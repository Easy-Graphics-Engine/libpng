cscope 15 $HOME/Desktop/progetti/libpng/libpng-350               0002249877
	@arm/arm_init.c

16 
	#_POSIX_SOURCE
 1

	)

18 
	~"../≤g¥iv.h
"

20 #ifde‡
PNG_READ_SUPPORTED


22 #i‡
PNG_ARM_NEON_OPT
 > 0

23 #ifde‡
PNG_ARM_NEON_CHECK_SUPPORTED


36 #i‚de‡
PNG_ARM_NEON_FILE


37 #ifde‡
__löux__


38 
	#PNG_ARM_NEON_FILE
 "c⁄åib/¨m-√⁄/löux.c"

	)

42 #ifde‡
PNG_ARM_NEON_FILE


44 
	~<sig«l.h
>

45 
≤g_have_√⁄
(
≤g_°ru˘p
 
≤g_±r
);

46 #ö˛udê
PNG_ARM_NEON_FILE


53 #i‚de‡
PNG_ALIGNED_MEMORY_SUPPORTED


58 
	$≤g_öô_fûãr_fun˘i⁄s_√⁄
(
≤g_°ru˘p
 
µ
, 
bµ
)

70 
	`≤g_debug
(1, "inÖng_init_filter_functions_neon");

71 #ifde‡
PNG_ARM_NEON_API_SUPPORTED


72 (
µ
->
›ti⁄s
 >> 
PNG_ARM_NEON
) & 3)

74 
PNG_OPTION_UNSET
:

81 #ifde‡
PNG_ARM_NEON_CHECK_SUPPORTED


83 vﬁ©ûê
sig_©omic_t
 
no_√⁄
 = -1;

85 i‡(
no_√⁄
 < 0)

86 
no_√⁄
 = !
	`≤g_have_√⁄
(
µ
);

88 i‡(
no_√⁄
)

91 #ifde‡
PNG_ARM_NEON_API_SUPPORTED


96 #ifde‡
PNG_ARM_NEON_API_SUPPORTED


100 
PNG_OPTION_ON
:

103 
	}
}

117 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_UP
-1] = 
≤g_ªad_fûãr_row_up_√⁄
;

119 i‡(
	gbµ
 == 3)

121 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub3_√⁄
;

122 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg3_√⁄
;

123 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] =

124 
≤g_ªad_fûãr_row_∑ëh3_√⁄
;

127 i‡(
	gbµ
 == 4)

129 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub4_√⁄
;

130 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg4_√⁄
;

131 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] =

132 
≤g_ªad_fûãr_row_∑ëh4_√⁄
;

	@arm/filter_neon_intrinsics.c

14 
	~"../≤g¥iv.h
"

16 #ifde‡
PNG_READ_SUPPORTED


19 #i‡
PNG_ARM_NEON_IMPLEMENTATION
 == 1

21 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
Ë&& deföed(
_M_ARM64
)

22 
	~<¨m64_√⁄.h
>

24 
	~<¨m_√⁄.h
>

32 
	#≤g_±r
(
ty≥
,
poöãr
Ë
	`≤g_Æignˇ°
—y≥ *,poöãr)

	)

33 
	#≤g_±rc
(
ty≥
,
poöãr
Ë
	`≤g_Æignˇ°c⁄°
(c⁄°Åy≥ *,poöãr)

	)

45 
	#≤g_ldr
(
ty≥
,
poöãr
)\

46 (
ãmp_poöãr
 = 
	`≤g_±r
(
ty≥
,
poöãr
), *ãmp_poöãr)

	)

48 #i‡
PNG_ARM_NEON_OPT
 > 0

51 
	$≤g_ªad_fûãr_row_up_√⁄
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

52 
≤g_c⁄°_byãp
 
¥ev_row
)

54 
≤g_byãp
 
Ω
 = 
row
;

55 
≤g_byãp
 
Ω_°›
 = 
row
 + 
row_öfo
->
rowbyãs
;

56 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

58 
	`≤g_debug
(1, "inÖng_read_filter_row_up_neon");

60 ; 
Ω
 < 
Ω_°›
;Ñ∞+16, 
µ
 += 16)

62 
uöt8x16_t
 
qΩ
, 
qµ
;

64 
qΩ
 = 
	`vld1q_u8
(
Ω
);

65 
qµ
 = 
	`vld1q_u8
(
µ
);

66 
qΩ
 = 
	`vaddq_u8
(qΩ, 
qµ
);

67 
	`v°1q_u8
(
Ω
, 
qΩ
);

69 
	}
}

72 
	$≤g_ªad_fûãr_row_sub3_√⁄
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

73 
≤g_c⁄°_byãp
 
¥ev_row
)

75 
≤g_byãp
 
Ω
 = 
row
;

76 
≤g_byãp
 
Ω_°›
 = 
row
 + 
row_öfo
->
rowbyãs
;

78 
uöt8x16_t
 
vtmp
 = 
	`vld1q_u8
(
Ω
);

79 
uöt8x8x2_t
 *
vΩt
 = 
	`≤g_±r
(uöt8x8x2_t, &
vtmp
);

80 
uöt8x8x2_t
 
vΩ
 = *
vΩt
;

82 
uöt8x8x4_t
 
vde°
;

83 
vde°
.
vÆ
[3] = 
	`vdup_n_u8
(0);

85 
	`≤g_debug
(1, "inÖng_read_filter_row_sub3_neon");

87 ; 
Ω
 < 
Ω_°›
;)

89 
uöt8x8_t
 
vtmp1
, 
vtmp2
;

90 
uöt32x2_t
 *
ãmp_poöãr
;

92 
vtmp1
 = 
	`vext_u8
(
vΩ
.
vÆ
[0], vrp.val[1], 3);

93 
vde°
.
vÆ
[0] = 
	`vadd_u8
(vde°.vÆ[3], 
vΩ
.val[0]);

94 
vtmp2
 = 
	`vext_u8
(
vΩ
.
vÆ
[0], vrp.val[1], 6);

95 
vde°
.
vÆ
[1] = 
	`vadd_u8
(vde°.vÆ[0], 
vtmp1
);

97 
vtmp1
 = 
	`vext_u8
(
vΩ
.
vÆ
[1], vrp.val[1], 1);

98 
vde°
.
vÆ
[2] = 
	`vadd_u8
(vde°.vÆ[1], 
vtmp2
);

99 
vde°
.
vÆ
[3] = 
	`vadd_u8
(vde°.vÆ[2], 
vtmp1
);

101 
vtmp
 = 
	`vld1q_u8
(
Ω
 + 12);

102 
vΩt
 = 
	`≤g_±r
(
uöt8x8x2_t
, &
vtmp
);

103 
vΩ
 = *
vΩt
;

105 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[0]), 0);

106 
Ω
 += 3;

107 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[1]), 0);

108 
Ω
 += 3;

109 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[2]), 0);

110 
Ω
 += 3;

111 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[3]), 0);

112 
Ω
 += 3;

115 
	`PNG_UNUSED
(
¥ev_row
)

116 
	}
}

119 
	$≤g_ªad_fûãr_row_sub4_√⁄
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

120 
≤g_c⁄°_byãp
 
¥ev_row
)

122 
≤g_byãp
 
Ω
 = 
row
;

123 
≤g_byãp
 
Ω_°›
 = 
row
 + 
row_öfo
->
rowbyãs
;

125 
uöt8x8x4_t
 
vde°
;

126 
vde°
.
vÆ
[3] = 
	`vdup_n_u8
(0);

128 
	`≤g_debug
(1, "inÖng_read_filter_row_sub4_neon");

130 ; 
Ω
 < 
Ω_°›
;Ñp += 16)

132 
uöt32x2x4_t
 
vtmp
 = 
	`vld4_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
));

133 
uöt8x8x4_t
 *
vΩt
 = 
	`≤g_±r
(uöt8x8x4_t,&
vtmp
);

134 
uöt8x8x4_t
 
vΩ
 = *
vΩt
;

135 
uöt32x2x4_t
 *
ãmp_poöãr
;

136 
uöt32x2x4_t
 
vde°_vÆ
;

138 
vde°
.
vÆ
[0] = 
	`vadd_u8
(vde°.vÆ[3], 
vΩ
.val[0]);

139 
vde°
.
vÆ
[1] = 
	`vadd_u8
(vde°.vÆ[0], 
vΩ
.val[1]);

140 
vde°
.
vÆ
[2] = 
	`vadd_u8
(vde°.vÆ[1], 
vΩ
.val[2]);

141 
vde°
.
vÆ
[3] = 
	`vadd_u8
(vde°.vÆ[2], 
vΩ
.val[3]);

143 
vde°_vÆ
 = 
	`≤g_ldr
(
uöt32x2x4_t
, &
vde°
);

144 
	`v°4_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
vde°_vÆ
, 0);

147 
	`PNG_UNUSED
(
¥ev_row
)

148 
	}
}

151 
	$≤g_ªad_fûãr_row_avg3_√⁄
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

152 
≤g_c⁄°_byãp
 
¥ev_row
)

154 
≤g_byãp
 
Ω
 = 
row
;

155 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

156 
≤g_byãp
 
Ω_°›
 = 
row
 + 
row_öfo
->
rowbyãs
;

158 
uöt8x16_t
 
vtmp
;

159 
uöt8x8x2_t
 *
vΩt
;

160 
uöt8x8x2_t
 
vΩ
;

161 
uöt8x8x4_t
 
vde°
;

162 
vde°
.
vÆ
[3] = 
	`vdup_n_u8
(0);

164 
vtmp
 = 
	`vld1q_u8
(
Ω
);

165 
vΩt
 = 
	`≤g_±r
(
uöt8x8x2_t
,&
vtmp
);

166 
vΩ
 = *
vΩt
;

168 
	`≤g_debug
(1, "inÖng_read_filter_row_avg3_neon");

170 ; 
Ω
 < 
Ω_°›
; 
µ
 += 12)

172 
uöt8x8_t
 
vtmp1
, 
vtmp2
, 
vtmp3
;

174 
uöt8x8x2_t
 *
vµt
;

175 
uöt8x8x2_t
 
vµ
;

177 
uöt32x2_t
 *
ãmp_poöãr
;

179 
vtmp
 = 
	`vld1q_u8
(
µ
);

180 
vµt
 = 
	`≤g_±r
(
uöt8x8x2_t
,&
vtmp
);

181 
vµ
 = *
vµt
;

183 
vtmp1
 = 
	`vext_u8
(
vΩ
.
vÆ
[0], vrp.val[1], 3);

184 
vde°
.
vÆ
[0] = 
	`vhadd_u8
(vde°.vÆ[3], 
vµ
.val[0]);

185 
vde°
.
vÆ
[0] = 
	`vadd_u8
(vde°.vÆ[0], 
vΩ
.val[0]);

187 
vtmp2
 = 
	`vext_u8
(
vµ
.
vÆ
[0], vpp.val[1], 3);

188 
vtmp3
 = 
	`vext_u8
(
vΩ
.
vÆ
[0], vrp.val[1], 6);

189 
vde°
.
vÆ
[1] = 
	`vhadd_u8
(vde°.vÆ[0], 
vtmp2
);

190 
vde°
.
vÆ
[1] = 
	`vadd_u8
(vde°.vÆ[1], 
vtmp1
);

192 
vtmp2
 = 
	`vext_u8
(
vµ
.
vÆ
[0], vpp.val[1], 6);

193 
vtmp1
 = 
	`vext_u8
(
vΩ
.
vÆ
[1], vrp.val[1], 1);

195 
vtmp
 = 
	`vld1q_u8
(
Ω
 + 12);

196 
vΩt
 = 
	`≤g_±r
(
uöt8x8x2_t
,&
vtmp
);

197 
vΩ
 = *
vΩt
;

199 
vde°
.
vÆ
[2] = 
	`vhadd_u8
(vde°.vÆ[1], 
vtmp2
);

200 
vde°
.
vÆ
[2] = 
	`vadd_u8
(vde°.vÆ[2], 
vtmp3
);

202 
vtmp2
 = 
	`vext_u8
(
vµ
.
vÆ
[1], vpp.val[1], 1);

204 
vde°
.
vÆ
[3] = 
	`vhadd_u8
(vde°.vÆ[2], 
vtmp2
);

205 
vde°
.
vÆ
[3] = 
	`vadd_u8
(vde°.vÆ[3], 
vtmp1
);

207 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[0]), 0);

208 
Ω
 += 3;

209 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[1]), 0);

210 
Ω
 += 3;

211 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[2]), 0);

212 
Ω
 += 3;

213 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[3]), 0);

214 
Ω
 += 3;

216 
	}
}

219 
	$≤g_ªad_fûãr_row_avg4_√⁄
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

220 
≤g_c⁄°_byãp
 
¥ev_row
)

222 
≤g_byãp
 
Ω
 = 
row
;

223 
≤g_byãp
 
Ω_°›
 = 
row
 + 
row_öfo
->
rowbyãs
;

224 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

226 
uöt8x8x4_t
 
vde°
;

227 
vde°
.
vÆ
[3] = 
	`vdup_n_u8
(0);

229 
	`≤g_debug
(1, "inÖng_read_filter_row_avg4_neon");

231 ; 
Ω
 < 
Ω_°›
;Ñ∞+16, 
µ
 += 16)

233 
uöt32x2x4_t
 
vtmp
;

234 
uöt8x8x4_t
 *
vΩt
, *
vµt
;

235 
uöt8x8x4_t
 
vΩ
, 
vµ
;

236 
uöt32x2x4_t
 *
ãmp_poöãr
;

237 
uöt32x2x4_t
 
vde°_vÆ
;

239 
vtmp
 = 
	`vld4_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
));

240 
vΩt
 = 
	`≤g_±r
(
uöt8x8x4_t
,&
vtmp
);

241 
vΩ
 = *
vΩt
;

242 
vtmp
 = 
	`vld4_u32
(
	`≤g_±rc
(
uöt32_t
,
µ
));

243 
vµt
 = 
	`≤g_±r
(
uöt8x8x4_t
,&
vtmp
);

244 
vµ
 = *
vµt
;

246 
vde°
.
vÆ
[0] = 
	`vhadd_u8
(vde°.vÆ[3], 
vµ
.val[0]);

247 
vde°
.
vÆ
[0] = 
	`vadd_u8
(vde°.vÆ[0], 
vΩ
.val[0]);

248 
vde°
.
vÆ
[1] = 
	`vhadd_u8
(vde°.vÆ[0], 
vµ
.val[1]);

249 
vde°
.
vÆ
[1] = 
	`vadd_u8
(vde°.vÆ[1], 
vΩ
.val[1]);

250 
vde°
.
vÆ
[2] = 
	`vhadd_u8
(vde°.vÆ[1], 
vµ
.val[2]);

251 
vde°
.
vÆ
[2] = 
	`vadd_u8
(vde°.vÆ[2], 
vΩ
.val[2]);

252 
vde°
.
vÆ
[3] = 
	`vhadd_u8
(vde°.vÆ[2], 
vµ
.val[3]);

253 
vde°
.
vÆ
[3] = 
	`vadd_u8
(vde°.vÆ[3], 
vΩ
.val[3]);

255 
vde°_vÆ
 = 
	`≤g_ldr
(
uöt32x2x4_t
, &
vde°
);

256 
	`v°4_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
vde°_vÆ
, 0);

258 
	}
}

260 
uöt8x8_t


261 
	$∑ëh
(
uöt8x8_t
 
a
, uöt8x8_à
b
, uöt8x8_à
c
)

263 
uöt8x8_t
 
d
, 
e
;

264 
uöt16x8_t
 
p1
, 
∑
, 
pb
, 
pc
;

266 
p1
 = 
	`vaddl_u8
(
a
, 
b
);

267 
pc
 = 
	`vaddl_u8
(
c
, c);

268 
∑
 = 
	`vabdl_u8
(
b
, 
c
);

269 
pb
 = 
	`vabdl_u8
(
a
, 
c
);

270 
pc
 = 
	`vabdq_u16
(
p1
,Öc);

272 
p1
 = 
	`v˛eq_u16
(
∑
, 
pb
);

273 
∑
 = 
	`v˛eq_u16
’a, 
pc
);

274 
pb
 = 
	`v˛eq_u16
’b, 
pc
);

276 
p1
 = 
	`v™dq_u16
’1, 
∑
);

278 
d
 = 
	`vmovn_u16
(
pb
);

279 
e
 = 
	`vmovn_u16
(
p1
);

281 
d
 = 
	`vb¶_u8
(d, 
b
, 
c
);

282 
e
 = 
	`vb¶_u8
”, 
a
, 
d
);

284  
e
;

285 
	}
}

288 
	$≤g_ªad_fûãr_row_∑ëh3_√⁄
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

289 
≤g_c⁄°_byãp
 
¥ev_row
)

291 
≤g_byãp
 
Ω
 = 
row
;

292 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

293 
≤g_byãp
 
Ω_°›
 = 
row
 + 
row_öfo
->
rowbyãs
;

295 
uöt8x16_t
 
vtmp
;

296 
uöt8x8x2_t
 *
vΩt
;

297 
uöt8x8x2_t
 
vΩ
;

298 
uöt8x8_t
 
vœ°
 = 
	`vdup_n_u8
(0);

299 
uöt8x8x4_t
 
vde°
;

300 
vde°
.
vÆ
[3] = 
	`vdup_n_u8
(0);

302 
vtmp
 = 
	`vld1q_u8
(
Ω
);

303 
vΩt
 = 
	`≤g_±r
(
uöt8x8x2_t
,&
vtmp
);

304 
vΩ
 = *
vΩt
;

306 
	`≤g_debug
(1, "inÖng_read_filter_row_paeth3_neon");

308 ; 
Ω
 < 
Ω_°›
; 
µ
 += 12)

310 
uöt8x8x2_t
 *
vµt
;

311 
uöt8x8x2_t
 
vµ
;

312 
uöt8x8_t
 
vtmp1
, 
vtmp2
, 
vtmp3
;

313 
uöt32x2_t
 *
ãmp_poöãr
;

315 
vtmp
 = 
	`vld1q_u8
(
µ
);

316 
vµt
 = 
	`≤g_±r
(
uöt8x8x2_t
,&
vtmp
);

317 
vµ
 = *
vµt
;

319 
vde°
.
vÆ
[0] = 
	`∑ëh
(vde°.vÆ[3], 
vµ
.vÆ[0], 
vœ°
);

320 
vde°
.
vÆ
[0] = 
	`vadd_u8
(vde°.vÆ[0], 
vΩ
.val[0]);

322 
vtmp1
 = 
	`vext_u8
(
vΩ
.
vÆ
[0], vrp.val[1], 3);

323 
vtmp2
 = 
	`vext_u8
(
vµ
.
vÆ
[0], vpp.val[1], 3);

324 
vde°
.
vÆ
[1] = 
	`∑ëh
(vde°.vÆ[0], 
vtmp2
, 
vµ
.val[0]);

325 
vde°
.
vÆ
[1] = 
	`vadd_u8
(vde°.vÆ[1], 
vtmp1
);

327 
vtmp1
 = 
	`vext_u8
(
vΩ
.
vÆ
[0], vrp.val[1], 6);

328 
vtmp3
 = 
	`vext_u8
(
vµ
.
vÆ
[0], vpp.val[1], 6);

329 
vde°
.
vÆ
[2] = 
	`∑ëh
(vde°.vÆ[1], 
vtmp3
, 
vtmp2
);

330 
vde°
.
vÆ
[2] = 
	`vadd_u8
(vde°.vÆ[2], 
vtmp1
);

332 
vtmp1
 = 
	`vext_u8
(
vΩ
.
vÆ
[1], vrp.val[1], 1);

333 
vtmp2
 = 
	`vext_u8
(
vµ
.
vÆ
[1], vpp.val[1], 1);

335 
vtmp
 = 
	`vld1q_u8
(
Ω
 + 12);

336 
vΩt
 = 
	`≤g_±r
(
uöt8x8x2_t
,&
vtmp
);

337 
vΩ
 = *
vΩt
;

339 
vde°
.
vÆ
[3] = 
	`∑ëh
(vde°.vÆ[2], 
vtmp2
, 
vtmp3
);

340 
vde°
.
vÆ
[3] = 
	`vadd_u8
(vde°.vÆ[3], 
vtmp1
);

342 
vœ°
 = 
vtmp2
;

344 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[0]), 0);

345 
Ω
 += 3;

346 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[1]), 0);

347 
Ω
 += 3;

348 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[2]), 0);

349 
Ω
 += 3;

350 
	`v°1_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
	`≤g_ldr
(
uöt32x2_t
,&
vde°
.
vÆ
[3]), 0);

351 
Ω
 += 3;

353 
	}
}

356 
	$≤g_ªad_fûãr_row_∑ëh4_√⁄
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

357 
≤g_c⁄°_byãp
 
¥ev_row
)

359 
≤g_byãp
 
Ω
 = 
row
;

360 
≤g_byãp
 
Ω_°›
 = 
row
 + 
row_öfo
->
rowbyãs
;

361 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

363 
uöt8x8_t
 
vœ°
 = 
	`vdup_n_u8
(0);

364 
uöt8x8x4_t
 
vde°
;

365 
vde°
.
vÆ
[3] = 
	`vdup_n_u8
(0);

367 
	`≤g_debug
(1, "inÖng_read_filter_row_paeth4_neon");

369 ; 
Ω
 < 
Ω_°›
;Ñ∞+16, 
µ
 += 16)

371 
uöt32x2x4_t
 
vtmp
;

372 
uöt8x8x4_t
 *
vΩt
, *
vµt
;

373 
uöt8x8x4_t
 
vΩ
, 
vµ
;

374 
uöt32x2x4_t
 *
ãmp_poöãr
;

375 
uöt32x2x4_t
 
vde°_vÆ
;

377 
vtmp
 = 
	`vld4_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
));

378 
vΩt
 = 
	`≤g_±r
(
uöt8x8x4_t
,&
vtmp
);

379 
vΩ
 = *
vΩt
;

380 
vtmp
 = 
	`vld4_u32
(
	`≤g_±rc
(
uöt32_t
,
µ
));

381 
vµt
 = 
	`≤g_±r
(
uöt8x8x4_t
,&
vtmp
);

382 
vµ
 = *
vµt
;

384 
vde°
.
vÆ
[0] = 
	`∑ëh
(vde°.vÆ[3], 
vµ
.vÆ[0], 
vœ°
);

385 
vde°
.
vÆ
[0] = 
	`vadd_u8
(vde°.vÆ[0], 
vΩ
.val[0]);

386 
vde°
.
vÆ
[1] = 
	`∑ëh
(vde°.vÆ[0], 
vµ
.val[1], vpp.val[0]);

387 
vde°
.
vÆ
[1] = 
	`vadd_u8
(vde°.vÆ[1], 
vΩ
.val[1]);

388 
vde°
.
vÆ
[2] = 
	`∑ëh
(vde°.vÆ[1], 
vµ
.val[2], vpp.val[1]);

389 
vde°
.
vÆ
[2] = 
	`vadd_u8
(vde°.vÆ[2], 
vΩ
.val[2]);

390 
vde°
.
vÆ
[3] = 
	`∑ëh
(vde°.vÆ[2], 
vµ
.val[3], vpp.val[2]);

391 
vde°
.
vÆ
[3] = 
	`vadd_u8
(vde°.vÆ[3], 
vΩ
.val[3]);

393 
vœ°
 = 
vµ
.
vÆ
[3];

395 
vde°_vÆ
 = 
	`≤g_ldr
(
uöt32x2x4_t
, &
vde°
);

396 
	`v°4_œ√_u32
(
	`≤g_±r
(
uöt32_t
,
Ω
), 
vde°_vÆ
, 0);

398 
	}
}

	@arm/palette_neon_intrinsics.c

13 
	~"../≤g¥iv.h
"

15 #i‡
PNG_ARM_NEON_IMPLEMENTATION
 == 1

17 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
Ë&& deföed(
_M_ARM64
)

18 
	~<¨m64_√⁄.h
>

20 
	~<¨m_√⁄.h
>

25 
	$≤g_rifÊe_∑Àâe_√⁄
(
≤g_°ru˘Ω
 
≤g_±r
)

27 
≤g_c⁄°_cﬁ‹p
 
∑Àâe
 = 
≤g_±r
->palette;

28 
≤g_byãp
 
rifÊed_∑Àâe
 = 
≤g_±r
->riffled_palette;

29 
≤g_c⁄°_byãp
 
å™s_Æpha
 = 
≤g_±r
->trans_alpha;

30 
num_å™s
 = 
≤g_±r
->num_trans;

31 
i
;

34 
uöt8x16x4_t
 
w
 = {{

35 
	`vdupq_n_u8
(0x00),

36 
	`vdupq_n_u8
(0x00),

37 
	`vdupq_n_u8
(0x00),

38 
	`vdupq_n_u8
(0xff),

41 
	`≤g_debug
(1, "inÖng_riffle_palette_neon");

46 
i
 = 0; i < 256; i += 16)

48 
uöt8x16x3_t
 
v
 = 
	`vld3q_u8
((
≤g_c⁄°_byãp
)(
∑Àâe
 + 
i
));

49 
w
.
vÆ
[0] = 
v
.val[0];

50 
w
.
vÆ
[1] = 
v
.val[1];

51 
w
.
vÆ
[2] = 
v
.val[2];

52 
	`v°4q_u8
(
rifÊed_∑Àâe
 + (
i
 << 2), 
w
);

56 
i
 = 0; i < 
num_å™s
; i++)

57 
rifÊed_∑Àâe
[(
i
 << 2Ë+ 3] = 
å™s_Æpha
[i];

58 
	}
}

62 
	$≤g_do_ex∑nd_∑Àâe_rgba8_√⁄
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
,

63 
≤g_c⁄°_byãp
 
row
, 
≤g_byãµ
 
s•
,Öng_byãµ 
ddp
)

65 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

66 c⁄° 
≤g_uöt_32
 *
rifÊed_∑Àâe
 =

67 (c⁄° 
≤g_uöt_32
 *)
≤g_±r
->
rifÊed_∑Àâe
;

68 c⁄° 
≤g_öt_32
 
pixñs_≥r_chunk
 = 4;

69 
i
;

71 
	`≤g_debug
(1, "inÖng_do_expand_palette_rgba8_neon");

73 i‡(
row_width
 < 
pixñs_≥r_chunk
)

80 *
ddp
 = *dd∞- ((
pixñs_≥r_chunk
 * (
≤g_uöt_32
)) - 1);

82 
i
 = 0; i < 
row_width
; i +
pixñs_≥r_chunk
)

84 
uöt32x4_t
 
cur
;

85 
≤g_byãp
 
•
 = *
s•
 - 
i
, 
dp
 = *
ddp
 - (i << 2);

86 
cur
 = 
	`vld1q_dup_u32
 (
rifÊed_∑Àâe
 + *(
•
 - 3));

87 
cur
 = 
	`vld1q_œ√_u32
(
rifÊed_∑Àâe
 + *(
•
 - 2), cur, 1);

88 
cur
 = 
	`vld1q_œ√_u32
(
rifÊed_∑Àâe
 + *(
•
 - 1), cur, 2);

89 
cur
 = 
	`vld1q_œ√_u32
(
rifÊed_∑Àâe
 + *(
•
 - 0), cur, 3);

90 
	`v°1q_u32
((*)
dp
, 
cur
);

92 i‡(
i
 !
row_width
)

95 
i
 -
pixñs_≥r_chunk
;

99 *
s•
 = *s• - 
i
;

100 *
ddp
 = *dd∞- (
i
 << 2);

101  
i
;

102 
	}
}

106 
	$≤g_do_ex∑nd_∑Àâe_rgb8_√⁄
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
,

107 
≤g_c⁄°_byãp
 
row
, 
≤g_byãµ
 
s•
,Öng_byãµ 
ddp
)

109 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

110 
≤g_c⁄°_byãp
 
∑Àâe
 = (≤g_c⁄°_byãp)
≤g_±r
->palette;

111 c⁄° 
≤g_uöt_32
 
pixñs_≥r_chunk
 = 8;

112 
i
;

114 
	`≤g_debug
(1, "inÖng_do_expand_palette_rgb8_neon");

116 i‡(
row_width
 <
pixñs_≥r_chunk
)

120 *
ddp
 = *dd∞- ((
pixñs_≥r_chunk
 * (
≤g_cﬁ‹
)) - 1);

122 
i
 = 0; i < 
row_width
; i +
pixñs_≥r_chunk
)

124 
uöt8x8x3_t
 
cur
;

125 
≤g_byãp
 
•
 = *
s•
 - 
i
, 
dp
 = *
ddp
 - ((i << 1) + i);

126 
cur
 = 
	`vld3_dup_u8
(
∑Àâe
 + (
≤g_cﬁ‹
Ë* (*(
•
 - 7)));

127 
cur
 = 
	`vld3_œ√_u8
(
∑Àâe
 + (
≤g_cﬁ‹
Ë* (*(
•
 - 6)), cur, 1);

128 
cur
 = 
	`vld3_œ√_u8
(
∑Àâe
 + (
≤g_cﬁ‹
Ë* (*(
•
 - 5)), cur, 2);

129 
cur
 = 
	`vld3_œ√_u8
(
∑Àâe
 + (
≤g_cﬁ‹
Ë* (*(
•
 - 4)), cur, 3);

130 
cur
 = 
	`vld3_œ√_u8
(
∑Àâe
 + (
≤g_cﬁ‹
Ë* (*(
•
 - 3)), cur, 4);

131 
cur
 = 
	`vld3_œ√_u8
(
∑Àâe
 + (
≤g_cﬁ‹
Ë* (*(
•
 - 2)), cur, 5);

132 
cur
 = 
	`vld3_œ√_u8
(
∑Àâe
 + (
≤g_cﬁ‹
Ë* (*(
•
 - 1)), cur, 6);

133 
cur
 = 
	`vld3_œ√_u8
(
∑Àâe
 + (
≤g_cﬁ‹
Ë* (*(
•
 - 0)), cur, 7);

134 
	`v°3_u8
((*)
dp
, 
cur
);

137 i‡(
i
 !
row_width
)

140 
i
 -
pixñs_≥r_chunk
;

144 *
s•
 = *s• - 
i
;

145 *
ddp
 = *dd∞- ((
i
 << 1) + i);

146  
i
;

147 
	}
}

	@contrib/arm-neon/android-ndk.c

27 
	~<˝u-„©uªs.h
>

30 
	$≤g_have_√⁄
(
≤g_°ru˘p
 
≤g_±r
)

36 
	`PNG_UNUSED
(
≤g_±r
)

37  
	`™droid_gëCpuFamûy
(Ë=
ANDROID_CPU_FAMILY_ARM
 &&

38 (
	`™droid_gëCpuFótuªs
(Ë& 
ANDROID_CPU_ARM_FEATURE_NEON
) != 0;

39 
	}
}

	@contrib/arm-neon/linux-auxv.c

25 
	~<uni°d.h
>

26 
	~<î∫o.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

30 
	~<f˙é.h
>

31 
	~<ñf.h
>

32 
	~<asm/hwˇp.h
>

38 
size_t


39 
	$ß„_ªad
(
≤g_°ru˘p
 
≤g_±r
, 
fd
, *
buf„r_ö
, 
size_t
 
nbyãs
)

41 
size_t
 
¡ŸÆ
 = 0;

42 *
buf„r
 = 
	`≤g_voidˇ°
(*, 
buf„r_ö
);

44 
nbyãs
 > 0)

46 
ƒód
;

47 
úód
;

53 i‡(
nbyãs
 > 
INT_MAX
)

54 
ƒód
 = 
INT_MAX
;

57 
ƒód
 = (Ë
nbyãs
;

59 
úód
 = 
	`ªad
(
fd
, 
buf„r
, 
ƒód
);

61 i‡(
úód
 == -1)

67 i‡(
î∫o
 !
EINTR
)

69 
	`≤g_w¨nög
(
≤g_±r
, "/procÑead failed");

74 i‡(
úód
 < 0)

77 
	`≤g_w¨nög
(
≤g_±r
, "OS /procÑead bug");

81 i‡(
úód
 > 0)

84 
buf„r
 +
úód
;

85 
nbyãs
 -(Ë
úód
;

86 
¡ŸÆ
 +(Ë
úód
;

90  
¡ŸÆ
;

93  
¡ŸÆ
;

94 
	}
}

97 
	$≤g_have_√⁄
(
≤g_°ru˘p
 
≤g_±r
)

99 
fd
 = 
	`›í
("/¥oc/£lf/auxv", 
O_RDONLY
);

100 
Elf32_auxv_t
 
aux
;

103 i‡(
fd
 == -1)

105 
	`≤g_w¨nög
(
≤g_±r
, "/proc/self/auxv open failed");

109 
	`ß„_ªad
(
≤g_±r
, 
fd
, &
aux
, áux) == áux)

111 i‡(
aux
.
a_ty≥
 =
AT_HWCAP
 && (aux.
a_un
.
a_vÆ
 & 
HWCAP_NEON
) != 0)

113 
	`˛o£
(
fd
);

118 
	`˛o£
(
fd
);

120 
	}
}

	@contrib/arm-neon/linux.c

22 
	~<°dio.h
>

25 
	$≤g_have_√⁄
(
≤g_°ru˘p
 
≤g_±r
)

27 
FILE
 *
f
 = 
	`f›í
("/proc/cpuinfo", "rb");

29 i‡(
f
 !
NULL
)

34 c⁄° 
ch_„©uª
[] = { 70, 69, 65, 84, 85, 82, 69, 83 };

35 c⁄° 
ch_√⁄
[] = { 78, 69, 79, 78 };

39 
SèπLöe
, 
Fótuª
, 
Cﬁ⁄
, 
SèπTag
, 
Ne⁄
, 
HaveNe⁄
, 
SkùTag
, 
SkùLöe


40 } 
°©e
;

41 
cou¡î
;

43 
°©e
=
SèπLöe
, 
cou¡î
=0;;)

45 
ch
 = 
	`fgëc
(
f
);

47 i‡(
ch
 =
EOF
)

52 
	`f˛o£
(
f
);

56 
°©e
)

58 
SèπLöe
:

60 i‡(
ch
 <= 32)

63 
cou¡î
=0;

64 
°©e
 = 
Fótuª
;

67 
Fótuª
:

69 i‡((
ch
 & ~0x20Ë=
ch_„©uª
[
cou¡î
])

71 i‡(++
cou¡î
 =( 
ch_„©uª
))

72 
°©e
 = 
Cﬁ⁄
;

77 
°©e
 = 
SkùLöe
;

80 
SkùLöe
:

81 
skùLöe
:

83 i‡(
ch
 != 10 && ch != 13)

86 
°©e
 = 
SèπLöe
;

89 
Cﬁ⁄
:

91 i‡(
ch
 == 32 || ch == 9)

94 i‡(
ch
 == 58)

96 
°©e
 = 
SèπTag
;

103 
°©e
 = 
SkùLöe
;

104 
skùLöe
;

106 
SèπTag
:

108 i‡(
ch
 == 32 || ch == 9)

111 
°©e
 = 
Ne⁄
;

112 
cou¡î
 = 0;

115 
Ne⁄
:

117 i‡((
ch
 & ~0x20Ë=
ch_√⁄
[
cou¡î
])

119 i‡(++
cou¡î
 =( 
ch_√⁄
))

120 
°©e
 = 
HaveNe⁄
;

124 
°©e
 = 
SkùTag
;

127 
SkùTag
:

129 i‡(
ch
 == 10 || ch == 13)

130 
°©e
 = 
SèπLöe
;

132 i‡(
ch
 == 32 || ch == 9)

133 
°©e
 = 
SèπTag
;

136 
HaveNe⁄
:

140 i‡(
ch
 == 10 || ch == 13 || ch == 32 || ch == 9)

142 
	`f˛o£
(
f
);

146 
°©e
 = 
SkùTag
;

150 
	`≤g_îr‹
(
≤g_±r
, "png_have_neon: internalÉrror (bug)");

155 #ifde‡
PNG_WARNINGS_SUPPORTED


157 
	`≤g_w¨nög
(
≤g_±r
, "/proc/cpuinfo open failed");

161 
	}
}

	@contrib/examples/iccfrompng.c

22 
	~<°dlib.h
>

23 
	~<£tjmp.h
>

24 
	~<°rög.h
>

25 
	~<°dio.h
>

27 
	~<≤g.h
>

29 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë&& deföed(
PNG_STDIO_SUPPORTED
) && \

30 
	$deföed
 (
PNG_iCCP_SUPPORTED
)

33 
vîbo£
 = 1;

34 
≤g_byã
 
no_¥ofûe
[] = "noÖrofile";

36 
≤g_byãp


37 
	$exåa˘
(
FILE
 *
Â
, 
≤g_uöt_32
 *
¥oÊí
)

39 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
,0,0,0);

40 
≤g_öf›
 
öfo_±r
 = 
NULL
;

41 
≤g_byãp
 
ªsu…
 = 
NULL
;

44 *
¥oÊí
 = 0;

46 i‡(
≤g_±r
 =
NULL
)

48 
	`Ârötf
(
°dîr
, "iccfrompng: versionÜibrary mismatch?\n");

52 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
)))

54 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

58 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

60 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

61 i‡(
öfo_±r
 =
NULL
)

62 
	`≤g_îr‹
(
≤g_±r
, "OOMállocating info structure");

64 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

67 
≤g_ch¨p
 
«me
;

68 
com¥essi⁄_ty≥
;

69 
≤g_byãp
 
¥ofûe
;

71 i‡(
	`≤g_gë_iCCP
(
≤g_±r
, 
öfo_±r
, &
«me
, &
com¥essi⁄_ty≥
, &
¥ofûe
,

72 
¥oÊí
Ë& 
PNG_INFO_iCCP
)

74 
ªsu…
 = 
	`mÆloc
(*
¥oÊí
);

75 i‡(
ªsu…
 !
NULL
)

76 
	`mem˝y
(
ªsu…
, 
¥ofûe
, *
¥oÊí
);

79 
	`≤g_îr‹
(
≤g_±r
, "OOMállocatingÖrofile buffer");

83 
ªsu…
 = 
no_¥ofûe
;

86 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

87  
ªsu…
;

88 
	}
}

91 
	$exåa˘_⁄e_fûe
(c⁄° *
fûíame
)

93 
ªsu…
 = 0;

94 
FILE
 *
Â
 = 
	`f›í
(
fûíame
, "rb");

96 i‡(
Â
 !
NULL
)

98 
≤g_uöt_32
 
¥oÊí
 = 0;

99 
≤g_byãp
 
¥ofûe
 = 
	`exåa˘
(
Â
, &
¥oÊí
);

101 i‡(
¥ofûe
 !
NULL
 &&Örofûê!
no_¥ofûe
)

103 
size_t
 
Àn
;

104 *
ouçut
;

107 c⁄° *
ï
 = 
	`°ºchr
(
fûíame
, '.');

109 i‡(
ï
 !
NULL
)

110 
Àn
 = 
ï
-
fûíame
;

113 
Àn
 = 
	`°æí
(
fûíame
);

116 
ouçut
 = 
	`mÆloc
(
Àn
 + 5);

117 i‡(
ouçut
 !
NULL
)

119 
FILE
 *
of
;

121 
	`mem˝y
(
ouçut
, 
fûíame
, 
Àn
);

122 
	`°r˝y
(
ouçut
+
Àn
, ".icc");

124 
of
 = 
	`f›í
(
ouçut
, "wb");

125 i‡(
of
 !
NULL
)

127 i‡(
	`fwrôe
(
¥ofûe
, 
¥oÊí
, 1, 
of
) == 1 &&

128 
	`fÊush
(
of
) == 0 &&

129 
	`f˛o£
(
of
) == 0)

131 i‡(
vîbo£
)

132 
	`¥ötf
("%†-> %s\n", 
fûíame
, 
ouçut
);

134 
ªsu…
 = 1;

139 
	`Ârötf
(
°dîr
, "%s:Éº‹ wrôögÖrofûe\n", 
ouçut
);

140 i‡(
	`ªmove
(
ouçut
))

141 
	`Ârötf
(
°dîr
, "%s: couldÇŸÑemovêfûe\n", 
ouçut
);

146 
	`Ârötf
(
°dîr
, "%s: faûedÅÿ›í ouçuàfûe\n", 
ouçut
);

148 
	`‰ì
(
ouçut
);

152 
	`Ârötf
(
°dîr
, "%s: OOMáŒoˇtög såög!\n", 
fûíame
);

154 
	`‰ì
(
¥ofûe
);

157 i‡(
vîbo£
 && 
¥ofûe
 =
no_¥ofûe
)

158 
	`¥ötf
("%†ha†nÿ¥ofûe\n", 
fûíame
);

162 
	`Ârötf
(
°dîr
, "%s: couldÇŸ o≥¿fûe\n", 
fûíame
);

164  
ªsu…
;

165 
	}
}

168 
	$maö
(
¨gc
, **
¨gv
)

170 
i
;

171 
exåa˘ed
 = 0;

173 
i
=1; i<
¨gc
; ++i)

175 i‡(
	`°rcmp
(
¨gv
[
i
], "-q") == 0)

176 
vîbo£
 = 0;

178 i‡(
	`exåa˘_⁄e_fûe
(
¨gv
[
i
]))

179 
exåa˘ed
 = 1;

183  
exåa˘ed
 == 0;

184 
	}
}

	@contrib/examples/pngpixel.c

21 
	~<°dlib.h
>

22 
	~<°dio.h
>

23 
	~<£tjmp.h
>

28 
	~"../../≤g.h
"

30 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë&& deföed(
PNG_SEQUENTIAL_READ_SUPPORTED
)

34 
	$comp⁄ít
(
≤g_c⁄°_byãp
 
row
, 
≤g_uöt_32
 
x
, 
c
,

35 
bô_dïth
, 
ch™√ls
)

42 
≤g_uöt_32
 
bô_off£t_hi
 = 
bô_dïth
 * ((
x
 >> 6Ë* 
ch™√ls
);

43 
≤g_uöt_32
 
bô_off£t_lo
 = 
bô_dïth
 * ((
x
 & 0x3fË* 
ch™√ls
 + 
c
);

45 
row
 = (
≤g_c⁄°_byãp
)(((c⁄° 
	`≤g_byã
 (*)[8]ÏowË+ 
bô_off£t_hi
);

46 
row
 +
bô_off£t_lo
 >> 3;

47 
bô_off£t_lo
 &= 0x07;

53 
bô_dïth
)

55 1:  (
row
[0] >> (7-
bô_off£t_lo
)) & 0x01;

56 2:  (
row
[0] >> (6-
bô_off£t_lo
)) & 0x03;

57 4:  (
row
[0] >> (4-
bô_off£t_lo
)) & 0x0f;

58 8:  
row
[0];

59 16:  (
row
[0] << 8) +Ñow[1];

64 
	`Ârötf
(
°dîr
, "≤gpixñ: invÆid bô dïth %u\n", 
bô_dïth
);

65 
	`exô
(1);

67 
	}
}

73 
	$¥öt_pixñ
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≤g_c⁄°_byãp
 
row
,

74 
≤g_uöt_32
 
x
)

76 
bô_dïth
 = 
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
);

78 
	`≤g_gë_cﬁ‹_ty≥
(
≤g_±r
, 
öfo_±r
))

80 
PNG_COLOR_TYPE_GRAY
:

81 
	`¥ötf
("GRAY %u\n", 
	`comp⁄ít
(
row
, 
x
, 0, 
bô_dïth
, 1));

88 
PNG_COLOR_TYPE_PALETTE
:

90 
ödex
 = 
	`comp⁄ít
(
row
, 
x
, 0, 
bô_dïth
, 1);

91 
≤g_cﬁ‹p
 
∑Àâe
 = 
NULL
;

92 
num_∑Àâe
 = 0;

94 i‡((
	`≤g_gë_PLTE
(
≤g_±r
, 
öfo_±r
, &
∑Àâe
, &
num_∑Àâe
) &

95 
PNG_INFO_PLTE
Ë&& 
num_∑Àâe
 > 0 && 
∑Àâe
 !
NULL
)

97 
≤g_byãp
 
å™s_Æpha
 = 
NULL
;

98 
num_å™s
 = 0;

99 i‡((
	`≤g_gë_tRNS
(
≤g_±r
, 
öfo_±r
, &
å™s_Æpha
, &
num_å™s
,

100 
NULL
Ë& 
PNG_INFO_tRNS
Ë&& 
num_å™s
 > 0 &&

101 
å™s_Æpha
 !
NULL
)

102 
	`¥ötf
("INDEXED %u = %d %d %d %d\n", 
ödex
,

103 
∑Àâe
[
ödex
].
ªd
,ÖÆëã[ödex].
gªí
,

104 
∑Àâe
[
ödex
].
blue
,

105 
ödex
 < 
num_å™s
 ? 
å™s_Æpha
[index] : 255);

108 
	`¥ötf
("INDEXED %u = %d %d %d\n", 
ödex
,

109 
∑Àâe
[
ödex
].
ªd
,ÖÆëã[ödex].
gªí
,

110 
∑Àâe
[
ödex
].
blue
);

114 
	`¥ötf
("INDEXED %u = invÆid index\n", 
ödex
);

118 
PNG_COLOR_TYPE_RGB
:

119 
	`¥ötf
("RGB %u %u %u\n", 
	`comp⁄ít
(
row
, 
x
, 0, 
bô_dïth
, 3),

120 
	`comp⁄ít
(
row
, 
x
, 1, 
bô_dïth
, 3),

121 
	`comp⁄ít
(
row
, 
x
, 2, 
bô_dïth
, 3));

124 
PNG_COLOR_TYPE_GRAY_ALPHA
:

125 
	`¥ötf
("GRAY+ALPHA %u %u\n", 
	`comp⁄ít
(
row
, 
x
, 0, 
bô_dïth
, 2),

126 
	`comp⁄ít
(
row
, 
x
, 1, 
bô_dïth
, 2));

129 
PNG_COLOR_TYPE_RGB_ALPHA
:

130 
	`¥ötf
("RGBA %u %u %u %u\n", 
	`comp⁄ít
(
row
, 
x
, 0, 
bô_dïth
, 4),

131 
	`comp⁄ít
(
row
, 
x
, 1, 
bô_dïth
, 4),

132 
	`comp⁄ít
(
row
, 
x
, 2, 
bô_dïth
, 4),

133 
	`comp⁄ít
(
row
, 
x
, 3, 
bô_dïth
, 4));

137 
	`≤g_îr‹
(
≤g_±r
, "pngpixel: invalid colorÅype");

139 
	}
}

141 
	$maö
(
¨gc
, c⁄° **
¨gv
)

149 vﬁ©ûê
ªsu…
 = 1 ;

151 i‡(
¨gc
 == 4)

153 
x
 = 
	`©ﬁ
(
¨gv
[1]);

154 
y
 = 
	`©ﬁ
(
¨gv
[2]);

155 
FILE
 *
f
 = 
	`f›í
(
¨gv
[3], "rb");

156 vﬁ©ûê
≤g_byãp
 
row
 = 
NULL
;

158 i‡(
f
 !
NULL
)

166 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
,

167 
NULL
, NULL, NULL);

169 i‡(
≤g_±r
 !
NULL
)

171 
≤g_öf›
 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

173 i‡(
öfo_±r
 !
NULL
)

180 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
)) == 0)

182 
≤g_uöt_32
 
width
, 
height
;

183 
bô_dïth
, 
cﬁ‹_ty≥
, 
öãæa˚_mëhod
,

184 
com¥essi⁄_mëhod
, 
fûãr_mëhod
;

185 
≤g_byãp
 
row_tmp
;

193 
	`≤g_öô_io
(
≤g_±r
, 
f
);

198 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

205 
row
 = 
	`≤g_mÆloc
(
≤g_±r
, 
	`≤g_gë_rowbyãs
(png_ptr,

206 
öfo_±r
));

211 
row_tmp
 = 
row
;

217 i‡(
	`≤g_gë_IHDR
(
≤g_±r
, 
öfo_±r
, &
width
, &
height
,

218 &
bô_dïth
, &
cﬁ‹_ty≥
, &
öãæa˚_mëhod
,

219 &
com¥essi⁄_mëhod
, &
fûãr_mëhod
))

221 
∑s£s
, 
∑ss
;

228 
öãæa˚_mëhod
)

230 
PNG_INTERLACE_NONE
:

231 
∑s£s
 = 1;

234 
PNG_INTERLACE_ADAM7
:

235 
∑s£s
 = 
PNG_INTERLACE_ADAM7_PASSES
;

239 
	`≤g_îr‹
(
≤g_±r
, "pngpixel: unknown interlace");

243 
	`≤g_°¨t_ªad_image
(
≤g_±r
);

245 
∑ss
=0;Öass<
∑s£s
; ++pass)

247 
≤g_uöt_32
 
y°¨t
, 
x°¨t
, 
y°ï
, 
x°ï
;

248 
≤g_uöt_32
 
py
;

250 i‡(
öãæa˚_mëhod
 =
PNG_INTERLACE_ADAM7
)

259 i‡(
	`PNG_PASS_COLS
(
width
, 
∑ss
) == 0)

266 
x°¨t
 = 
	`PNG_PASS_START_COL
(
∑ss
);

267 
y°¨t
 = 
	`PNG_PASS_START_ROW
(
∑ss
);

268 
x°ï
 = 
	`PNG_PASS_COL_OFFSET
(
∑ss
);

269 
y°ï
 = 
	`PNG_PASS_ROW_OFFSET
(
∑ss
);

274 
y°¨t
 = 
x°¨t
 = 0;

275 
y°ï
 = 
x°ï
 = 1;

282 
py
 = 
y°¨t
;Öy < 
height
;Öy +
y°ï
)

284 
≤g_uöt_32
 
px
, 
µx
;

296 
	`≤g_ªad_row
(
≤g_±r
, 
row_tmp
, 
NULL
);

302 i‡(
y
 =
py
Ë
px
 = 
x°¨t
, 
µx
 = 0;

303 
px
 < 
width
;Öx +
x°ï
, ++
µx
Ëi‡(
x
 ==Öx)

308 
	`¥öt_pixñ
(
≤g_±r
, 
öfo_±r
, 
row_tmp
, 
µx
);

313 
∑ss_lo›_íd
;

319 
∑ss_lo›_íd
:

320 
row
 = 
NULL
;

321 
	`≤g_‰ì
(
≤g_±r
, 
row_tmp
);

325 
	`≤g_îr‹
(
≤g_±r
, "pngpixel:Öng_get_IHDR failed");

335 i‡(
row
 !
NULL
)

342 
≤g_byãp
 
row_tmp
 = 
row
;

343 
row
 = 
NULL
;

344 
	`≤g_‰ì
(
≤g_±r
, 
row_tmp
);

348 
	`≤g_de°roy_öfo_°ru˘
(
≤g_±r
, &
öfo_±r
);

352 
	`Ârötf
(
°dîr
, "pngpixel: out of memoryállocatingÖng_info\n");

354 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
NULL
, NULL);

358 
	`Ârötf
(
°dîr
, "pngpixel: out of memoryállocatingÖng_struct\n");

362 
	`Ârötf
(
°dîr
, "≤gpixñ: %s: couldÇŸ o≥¿fûe\n", 
¨gv
[3]);

367 
	`Ârötf
(
°dîr
, "pngpixel: usage:Öngpixel x yÖng-file\n");

369  
ªsu…
;

370 
	}
}

	@contrib/examples/pngtopng.c

16 
	~<°ddef.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<°dio.h
>

24 
	~"../../≤g.h
"

25 #i‡
deföed
(
PNG_SIMPLIFIED_READ_SUPPORTED
) && \

26 
	$deföed
(
PNG_SIMPLIFIED_WRITE_SUPPORTED
)

28 
	$maö
(
¨gc
, c⁄° **
¨gv
)

30 
ªsu…
 = 1;

32 i‡(
¨gc
 == 3)

34 
≤g_image
 
image
;

37 
	`mem£t
(&
image
, 0,  image);

38 
image
.
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

40 i‡(
	`≤g_image_begö_ªad_‰om_fûe
(&
image
, 
¨gv
[1]))

42 
≤g_byãp
 
buf„r
;

47 
image
.
f‹m©
 = 
PNG_FORMAT_RGBA
;

49 
buf„r
 = 
	`mÆloc
(
	`PNG_IMAGE_SIZE
(
image
));

51 i‡(
buf„r
 !
NULL
)

53 i‡(
	`≤g_image_föish_ªad
(&
image
, 
NULL
 , 
buf„r
,

54 0 , 
NULL
 ))

56 i‡(
	`≤g_image_wrôe_to_fûe
(&
image
, 
¨gv
[2],

57 0 , 
buf„r
, 0 ,

58 
NULL
 ))

59 
ªsu…
 = 0;

62 
	`Ârötf
(
°dîr
, "≤gt›ng: wrôê%s: %s\n", 
¨gv
[2],

63 
image
.
mesßge
);

67 
	`Ârötf
(
°dîr
, "≤gt›ng:Ñód %s: %s\n", 
¨gv
[1],

68 
image
.
mesßge
);

70 
	`‰ì
(
buf„r
);

75 
	`Ârötf
(
°dîr
, "pngtopng: out of memory: %lu bytes\n",

76 ()
	`PNG_IMAGE_SIZE
(
image
));

83 
	`≤g_image_‰ì
(&
image
);

89 
	`Ârötf
(
°dîr
, "≤gt›ng: %s: %s\n", 
¨gv
[1], 
image
.
mesßge
);

94 
	`Ârötf
(
°dîr
, "pngtopng: usage:Öngtopng input-file output-file\n");

96  
ªsu…
;

97 
	}
}

	@contrib/examples/simpleover.c

34 
	~<°ddef.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<°dio.h
>

38 
	~<î∫o.h
>

45 
	~"../../≤g.h
"

47 #ifde‡
PNG_SIMPLIFIED_READ_SUPPORTED


49 
	#•rôe_«me_ch¨s
 15

	)

50 
	s•rôe
 {

51 
FILE
 *
	mfûe
;

52 
≤g_uöt_16p
 
	mbuf„r
;

53 
	mwidth
;

54 
	mheight
;

55 
	m«me
[
•rôe_«me_ch¨s
+1];

59 
	~<m©h.h
>

60 
	~<°dio.h
>

62 
	$maö
() {

63 
îr
 = 0;

64 
xîr
 = 0;

65 
r
 = 32769;

67 
x
 = 0;

70 
t
 = 
x
 + (x >> 16Ë + 
r
;

71 
v
 = 
x
, 
îπe°
;

73 i‡(
t
 < 
x
) {

74 
	`Ârötf
(
°dîr
, "ovîÊow: %u+%u -> %u\n", 
x
, 
r
, 
t
);

78 
v
 /= 65535;

79 
îπe°
 = 
v
;

80 
t
 >>= 16;

81 
îπe°
 -
t
;

83 i‡(
îπe°
 > 
îr
) {

84 
îr
 = 
îπe°
;

85 
xîr
 = 
x
;

87 i‡(
îπe°
 >= .5) {

88 
	`Ârötf
(
°dîr
, "error: %u/65535 = %f,Çot %u,Érror %f\n",

89 
x
, 
v
, 
t
, 
îπe°
);

93 } ++
x
 <= 65535U*65535U);

96 
	`¥ötf
("îr‹ %‡@ %u\n", 
îr
, 
xîr
);

99 
	}
}

103 
	$•rôe_›
(c⁄° 
•rôe
 *•rôe, 
x_off£t
, 
y_off£t
,

104 
≤g_imagï
 
image
, c⁄° 
≤g_uöt_16
 *
buf„r
)

115 i‡((
y_off£t
 < 0 || (Ëy_off£à< 
•rôe
->
height
) &&

116 (
x_off£t
 < 0 || (Ëx_off£à< 
•rôe
->
width
))

118 
y
 = 0;

120 i‡(
y_off£t
 < 0)

121 
y
 = -
y_off£t
;

125 
x
 = 0;

127 i‡(
x_off£t
 < 0)

128 
x
 = -
x_off£t
;

133 c⁄° 
≤g_uöt_16
 *
ö_pixñ
 = 
buf„r
 + (
y
 * 
image
->
width
 + 
x
)*4;

134 
≤g_uöt_32
 
ö_Æpha
 = 
ö_pixñ
[3];

139 i‡(
ö_Æpha
 > 0)

141 
≤g_uöt_16
 *
out_pixñ
 = 
•rôe
->
buf„r
 +

142 ((
y
+
y_off£t
Ë* 
•rôe
->
width
 + (
x
+
x_off£t
))*4;

145 
ö_Æpha
 = 65535-in_alpha;

147 i‡(
ö_Æpha
 > 0)

160 
≤g_uöt_32
 
tmp
;

162 
	#compo£
(
c
)\

163 
tmp
 = 
out_pixñ
[
c
] * 
ö_Æpha
;\

164 
tmp
 = (tmp + (tmp >> 16) + 32769) >> 16;\

165 
out_pixñ
[
c
] = 
tmp
 + 
ö_pixñ
[c]

	)

168 
	`compo£
(0);

169 
	`compo£
(1);

170 
	`compo£
(2);

171 
	`compo£
(3);

175 
out_pixñ
[0] = 
ö_pixñ
[0],

176 
out_pixñ
[1] = 
ö_pixñ
[1],

177 
out_pixñ
[2] = 
ö_pixñ
[2],

178 
out_pixñ
[3] = 
ö_pixñ
[3];

181 ++
x
 < 
image
->
width
);

183 ++
y
 < 
image
->
height
);

185 
	}
}

188 
	$¸óã_•rôe
(
•rôe
 *•rôe, *
¨gc
, c⁄° ***
¨gv
)

195 *
¨gc
 > 0)

197 
tomb°⁄e
;

198 
x
 = 0, 
y
 = 0;

200 i‡((*
¨gv
)[0][0] == '-' && (*argv)[0][1] == '-')

203 i‡(
	`ssˇnf
((*
¨gv
)[0], "--©=%d,%d%c", &
x
, &
y
, &
tomb°⁄e
) != 2)

206 ++*
¨gv
, --*
¨gc
;

212 
≤g_image
 
image
;

214 
image
.
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

215 
image
.
›aque
 = 
NULL
;

217 i‡(
	`≤g_image_begö_ªad_‰om_fûe
(&
image
, (*
¨gv
)[0]))

219 
≤g_uöt_16p
 
buf„r
;

221 
image
.
f‹m©
 = 
PNG_FORMAT_LINEAR_RGB_ALPHA
;

223 
buf„r
 = 
	`mÆloc
(
	`PNG_IMAGE_SIZE
(
image
));

225 i‡(
buf„r
 !
NULL
)

227 i‡(
	`≤g_image_föish_ªad
(&
image
, 
NULL
 , 
buf„r
,

229 
NULL
 ))

237 
	`•rôe_›
(
•rôe
, 
x
, 
y
, &
image
, 
buf„r
);

238 
	`‰ì
(
buf„r
);

239 ++*
¨gv
, --*
¨gc
;

246 
	`‰ì
(
buf„r
);

247 
	`Ârötf
(
°dîr
, "sim∂eovî:Ñód %s: %s\n", (*
¨gv
)[0],

248 
image
.
mesßge
);

254 
	`Ârötf
(
°dîr
, "simpleover: out of memory: %lu bytes\n",

255 ()
	`PNG_IMAGE_SIZE
(
image
));

261 
	`≤g_image_‰ì
(&
image
);

268 
	`Ârötf
(
°dîr
, "sim∂eovî: %s: %s\n", (*
¨gv
)[0], 
image
.
mesßge
);

278 
•rôe
->
fûe
 = 
	`tmpfûe
();

280 i‡(
•rôe
->
fûe
 !
NULL
)

282 
≤g_image
 
ßve
;

284 
	`mem£t
(&
ßve
, 0,  save);

285 
ßve
.
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

286 
ßve
.
›aque
 = 
NULL
;

287 
ßve
.
width
 = 
•rôe
->width;

288 
ßve
.
height
 = 
•rôe
->height;

289 
ßve
.
f‹m©
 = 
PNG_FORMAT_LINEAR_RGB_ALPHA
;

290 
ßve
.
Êags
 = 
PNG_IMAGE_FLAG_FAST
;

291 
ßve
.
cﬁ‹m≠_íåõs
 = 0;

293 i‡(
	`≤g_image_wrôe_to_°dio
(&
ßve
, 
•rôe
->
fûe
, 1 ,

294 
•rôe
->
buf„r
, 0 , 
NULL
 ))

297 
	`‰ì
(
•rôe
->
buf„r
);

298 
•rôe
->
buf„r
 = 
NULL
;

303 
	`Ârötf
(
°dîr
, "sim∂eovî: wrôê•rôê%s: %s\n", 
•rôe
->
«me
,

304 
ßve
.
mesßge
);

308 
	`Ârötf
(
°dîr
, "simpleover: sprite %s: couldÇotállocateÅmpfile: %s\n",

309 
•rôe
->
«me
, 
	`°ªº‹
(
î∫o
));

312 
	}
}

315 
	$add_•rôe
(
≤g_imagï
 
ouçut
, 
≤g_byãp
 
out_buf
, 
•rôe
 *sprite,

316 *
¨gc
, c⁄° ***
¨gv
)

323 *
¨gc
 > 0)

325 
tomb°⁄e
;

326 
x
, 
y
;

328 i‡((*
¨gv
)[0][0] == '-' && (*argv)[0][1] == '-')

331 i‡(
	`ssˇnf
((*
¨gv
)[0], "%d,%d%c", &
x
, &
y
, &
tomb°⁄e
) == 2)

336 i‡(
x
 < 0 || 
y
 < 0 ||

337 (Ë
x
 >
ouçut
->
width
 ||

338 (Ë
y
 >
ouçut
->
height
 ||

339 
•rôe
->
width
 > 
ouçut
->width-
x
 ||

340 
•rôe
->
height
 > 
ouçut
->height-
y
)

342 
	`Ârötf
(
°dîr
, "simpleover: sprite %s @ (%d,%d) outside image\n",

343 
•rôe
->
«me
, 
x
, 
y
);

353 
≤g_image
 
ö
;

355 
ö
.
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

356 
	`ªwöd
(
•rôe
->
fûe
);

358 i‡(
	`≤g_image_begö_ªad_‰om_°dio
(&
ö
, 
•rôe
->
fûe
))

360 
ö
.
f‹m©
 = 
PNG_FORMAT_RGB
;

362 i‡(
	`≤g_image_föish_ªad
(&
ö
, 
NULL
 ,

363 
out_buf
 + (
y
*
ouçut
->
width
 + 
x
)*3 ,

364 
ouçut
->
width
*3 ,

365 
NULL
 ))

367 ++*
¨gv
, --*
¨gc
;

373 
	`Ârötf
(
°dîr
, "sim∂eovî:ádd s¥ôê%s: %s\n", 
•rôe
->
«me
,

374 
ö
.
mesßge
);

381 
	`Ârötf
(
°dîr
, "simpleover: --add='%s': invalidÖosition %s\n",

382 
•rôe
->
«me
, (*
¨gv
)[0]);

388 
	}
}

391 
	$sim∂eovî_¥o˚ss
(
≤g_imagï
 
ouçut
, 
≤g_byãp
 
out_buf
, 
¨gc
,

392 c⁄° **
¨gv
)

394 
ªsu…
 = 1;

395 
	#c•rôes
 10

	)

396 
	#°r
(
a
Ë#a

	)

397 
n•rôes
 = 0;

398 
•rôe
 
•rôes
[
c•rôes
];

400 
¨gc
 > 0)

402 
ªsu…
 = 0;

404 i‡(
	`°∫cmp
(
¨gv
[0], "--sprite=", 9) == 0)

406 
tomb°⁄e
;

408 i‡(
n•rôes
 < 
c•rôes
)

410 
n
;

412 
•rôes
[
n•rôes
].
width
 = s¥ôes[n•rôes].
height
 = 0;

413 
•rôes
[
n•rôes
].
«me
[0] = 0;

415 
n
 = 
	`ssˇnf
(
¨gv
[0], "--•rôe=%u,%u,%" 
	`°r
(
•rôe_«me_ch¨s
) "s%c",

416 &
•rôes
[
n•rôes
].
width
, &•rôes[n•rôes].
height
,

417 
•rôes
[
n•rôes
].
«me
, &
tomb°⁄e
);

419 i‡((
n
 == 2 ||Ç == 3) &&

420 
•rôes
[
n•rôes
].
width
 > 0 && s¥ôes[n•rôes].
height
 > 0)

422 
size_t
 
buf_size
, 
tmp
;

425 i‡(
•rôes
[
n•rôes
].
«me
[0] == 0)

426 
	`•rötf
(
•rôes
[
n•rôes
].
«me
, "sprite-%d",Çsprites+1);

431 
buf_size
 =  (
≤g_uöt_16
 [4]);

432 
buf_size
 *
•rôes
[
n•rôes
].
width
;

433 
buf_size
 *
•rôes
[
n•rôes
].
height
;

436 
tmp
 = 
buf_size
;

437 
tmp
 /
•rôes
[
n•rôes
].
width
;

438 
tmp
 /
•rôes
[
n•rôes
].
height
;

440 i‡(
tmp
 = (
≤g_uöt_16
 [4]))

442 
•rôes
[
n•rôes
].
buf„r
 = 
	`mÆloc
(
buf_size
);

444 
	`mem£t
(
•rôes
[
n•rôes
].
buf„r
, 0, 
buf_size
);

446 i‡(
•rôes
[
n•rôes
].
buf„r
 !
NULL
)

448 
•rôes
[
n•rôes
].
fûe
 = 
NULL
;

449 ++
¨gv
, --
¨gc
;

451 i‡(
	`¸óã_•rôe
(
•rôes
+
n•rôes
++, &
¨gc
, &
¨gv
))

453 
ªsu…
 = 1;

462 
	`Ârötf
(
°dîr
, "sim∂eovî: %s: s¥ôêtoÿœrge\n", 
¨gv
[0]);

468 
	`Ârötf
(
°dîr
, "simpleover: %s: invalid sprite (%u,%u)\n",

469 
¨gv
[0], 
•rôes
[
n•rôes
].
width
, s¥ôes[n•rôes].
height
);

476 
	`Ârötf
(
°dîr
, "sim∂eovî: %s:Åoÿm™y s¥ôes\n", 
¨gv
[0]);

481 i‡(
	`°∫cmp
(
¨gv
[0], "--add=", 6) == 0)

483 c⁄° *
«me
 = 
¨gv
[0]+6;

484 
i•rôe
 = 
n•rôes
;

486 ++
¨gv
, --
¨gc
;

488 --
i•rôe
 >= 0)

490 i‡(
	`°rcmp
(
•rôes
[
i•rôe
].
«me
,Çame) == 0)

492 i‡(!
	`add_•rôe
(
ouçut
, 
out_buf
, 
•rôes
+
i•rôe
, &
¨gc
, &
¨gv
))

493 
out
;

499 i‡(
i•rôe
 < 0)

501 
	`Ârötf
(
°dîr
, "sim∂eovî: --add='%s': s¥ôênŸ found\n", 
«me
);

508 
	`Ârötf
(
°dîr
, "sim∂eovî: %s: uƒecognized o≥øti⁄\n", 
¨gv
[0]);

512 
ªsu…
 = 1;

516 
out
:

517 --
n•rôes
 >= 0)

519 i‡(
•rôes
[
n•rôes
].
buf„r
 !
NULL
)

520 
	`‰ì
(
•rôes
[
n•rôes
].
buf„r
);

522 i‡(
•rôes
[
n•rôes
].
fûe
 !
NULL
)

523 ()
	`f˛o£
(
•rôes
[
n•rôes
].
fûe
);

526  
ªsu…
;

527 
	}
}

529 
	$maö
(
¨gc
, c⁄° **
¨gv
)

531 
ªsu…
 = 1;

533 i‡(
¨gc
 >= 2)

535 
¨gi
 = 2;

536 c⁄° *
ouçut
 = 
NULL
;

537 
≤g_image
 
image
;

539 i‡(
¨gc
 > 2 && 
¨gv
[2][0] != '-' )

541 
ouçut
 = 
¨gv
[2];

542 
¨gi
 = 3;

545 
image
.
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

546 
image
.
›aque
 = 
NULL
;

548 i‡(
	`≤g_image_begö_ªad_‰om_fûe
(&
image
, 
¨gv
[1]))

550 
≤g_byãp
 
buf„r
;

552 
image
.
f‹m©
 = 
PNG_FORMAT_RGB
;

554 
buf„r
 = 
	`mÆloc
(
	`PNG_IMAGE_SIZE
(
image
));

556 i‡(
buf„r
 !
NULL
)

558 
≤g_cﬁ‹
 
background
 = {0, 0xff, 0};

560 i‡(
	`≤g_image_föish_ªad
(&
image
, &
background
, 
buf„r
,

561 0 , 
NULL
 ))

569 i‡(
	`sim∂eovî_¥o˚ss
(&
image
, 
buf„r
, 
¨gc
-
¨gi
, 
¨gv
+argi))

572 i‡((
ouçut
 !
NULL
 &&

573 
	`≤g_image_wrôe_to_fûe
(&
image
, 
ouçut
,

574 0 , 
buf„r
, 0 ,

575 
NULL
 )) ||

576 (
ouçut
 =
NULL
 &&

577 
	`≤g_image_wrôe_to_°dio
(&
image
, 
°dout
,

578 0 , 
buf„r
, 0 ,

579 
NULL
 )))

580 
ªsu…
 = 0;

583 
	`Ârötf
(
°dîr
, "simpleover: write %s: %s\n",

584 
ouçut
 =
NULL
 ? "°dout" : ouçut, 
image
.
mesßge
);

591 
	`Ârötf
(
°dîr
, "sim∂eovî:Ñód %s: %s\n", 
¨gv
[1],

592 
image
.
mesßge
);

594 
	`‰ì
(
buf„r
);

599 
	`Ârötf
(
°dîr
, "simpleover: out of memory: %lu bytes\n",

600 ()
	`PNG_IMAGE_SIZE
(
image
));

606 
	`≤g_image_‰ì
(&
image
);

613 
	`Ârötf
(
°dîr
, "sim∂eovî: %s: %s\n", 
¨gv
[1], 
image
.
mesßge
);

620 
	`Ârötf
(
°dîr
,

646  
ªsu…
;

647 
	}
}

	@contrib/gregbook/readpng.c

56 
	~<°dio.h
>

57 
	~<°dlib.h
>

58 
	~<zlib.h
>

60 
	~"≤g.h
"

61 
	~"ªad≤g.h
"

64 #i‚de‡
≤g_jmpbuf


65 
	#≤g_jmpbuf
(
≤g_±r
Ë(’ng_±r)->
jmpbuf
)

	)

69 
≤g_°ru˘p
 
	g≤g_±r
 = 
NULL
;

70 
≤g_öf›
 
	göfo_±r
 = 
NULL
;

72 
≤g_uöt_32
 
	gwidth
, 
	gheight
;

73 
	gbô_dïth
, 
	gcﬁ‹_ty≥
;

74 
uch
 *
	gimage_d©a
 = 
NULL
;

77 
	$ªad≤g_vîsi⁄_öfo
()

79 
	`Ârötf
(
°dîr
, " Compiled withÜibpng %s; usingÜibpng %s.\n",

80 
PNG_LIBPNG_VER_STRING
, 
≤g_lib≤g_vî
);

81 
	`Ârötf
(
°dîr
, " Compiled with zlib %s; using zlib %s.\n",

82 
ZLIB_VERSION
, 
zlib_vîsi⁄
);

83 
	}
}

88 
	$ªad≤g_öô
(
FILE
 *
öfûe
, 
ulg
 *
pWidth
, ulg *
pHeight
)

90 
uch
 
sig
[8];

96 
	`‰ód
(
sig
, 1, 8, 
öfûe
);

97 i‡(
	`≤g_sig_cmp
(
sig
, 0, 8))

103 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
	`≤g_gë_lib≤g_vî
(
NULL
), NULL, NULL,

104 
NULL
);

105 i‡(!
≤g_±r
)

108 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

109 i‡(!
öfo_±r
) {

110 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
NULL
, NULL);

123 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
))) {

124 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

129 
	`≤g_öô_io
(
≤g_±r
, 
öfûe
);

130 
	`≤g_£t_sig_byãs
(
≤g_±r
, 8);

132 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

139 
	`≤g_gë_IHDR
(
≤g_±r
, 
öfo_±r
, &
width
, &
height
, &
bô_dïth
, &
cﬁ‹_ty≥
,

140 
NULL
, NULL, NULL);

141 *
pWidth
 = 
width
;

142 *
pHeight
 = 
height
;

148 
	}
}

156 
	$ªad≤g_gë_bgcﬁ‹
(
uch
 *
ªd
, uch *
gªí
, uch *
blue
)

158 
≤g_cﬁ‹_16p
 
pBackground
;

164 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
))) {

165 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

170 i‡(!
	`≤g_gë_vÆid
(
≤g_±r
, 
öfo_±r
, 
PNG_INFO_bKGD
))

177 
	`≤g_gë_bKGD
(
≤g_±r
, 
öfo_±r
, &
pBackground
);

183 i‡(
bô_dïth
 == 16) {

184 *
ªd
 = 
pBackground
->red >> 8;

185 *
gªí
 = 
pBackground
->green >> 8;

186 *
blue
 = 
pBackground
->blue >> 8;

187 } i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 && 
bô_dïth
 < 8) {

188 i‡(
bô_dïth
 == 1)

189 *
ªd
 = *
gªí
 = *
blue
 = 
pBackground
->
gøy
? 255 : 0;

190 i‡(
bô_dïth
 == 2)

191 *
ªd
 = *
gªí
 = *
blue
 = (255/3Ë* 
pBackground
->
gøy
;

193 *
ªd
 = *
gªí
 = *
blue
 = (255/15Ë* 
pBackground
->
gøy
;

195 *
ªd
 = (
uch
)
pBackground
->red;

196 *
gªí
 = (
uch
)
pBackground
->green;

197 *
blue
 = (
uch
)
pBackground
->blue;

201 
	}
}

208 
uch
 *
	$ªad≤g_gë_image
(
di•œy_exp⁄ít
, *
pCh™√ls
, 
ulg
 *
pRowbyãs
)

210 
gamma
;

211 
≤g_uöt_32
 
i
, 
rowbyãs
;

212 
≤g_byãµ
 
row_poöãrs
 = 
NULL
;

218 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
))) {

219 
	`‰ì
(
image_d©a
);

220 
image_d©a
 = 
NULL
;

221 
	`‰ì
(
row_poöãrs
);

222 
row_poöãrs
 = 
NULL
;

223 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

224  
NULL
;

232 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

233 
	`≤g_£t_ex∑nd
(
≤g_±r
);

234 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 && 
bô_dïth
 < 8)

235 
	`≤g_£t_ex∑nd
(
≤g_±r
);

236 i‡(
	`≤g_gë_vÆid
(
≤g_±r
, 
öfo_±r
, 
PNG_INFO_tRNS
))

237 
	`≤g_£t_ex∑nd
(
≤g_±r
);

238 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


239 i‡(
bô_dïth
 == 16)

240 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


241 
	`≤g_£t_sˇÀ_16
(
≤g_±r
);

243 
	`≤g_£t_°rù_16
(
≤g_±r
);

246 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 ||

247 
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

248 
	`≤g_£t_gøy_to_rgb
(
≤g_±r
);

255 i‡(
	`≤g_gë_gAMA
(
≤g_±r
, 
öfo_±r
, &
gamma
))

256 
	`≤g_£t_gamma
(
≤g_±r
, 
di•œy_exp⁄ít
, 
gamma
);

262 
	`≤g_ªad_upd©e_öfo
(
≤g_±r
, 
öfo_±r
);

264 *
pRowbyãs
 = 
rowbyãs
 = 
	`≤g_gë_rowbyãs
(
≤g_±r
, 
öfo_±r
);

265 *
pCh™√ls
 = ()
	`≤g_gë_ch™√ls
(
≤g_±r
, 
öfo_±r
);

268 i‡(
height
 > ((
size_t
)(-1))/
rowbyãs
) {

269 
	`Ârötf
(
°dîr
, "readpng: image_data buffer would beÅooÜarge\n",

270  
NULL
;

273 i‡((
image_d©a
 = (
uch
 *)
	`mÆloc
(
rowbyãs
*
height
)Ë=
NULL
) {

274 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

275  
NULL
;

277 i‡((
row_poöãrs
 = (
≤g_byãµ
)
	`mÆloc
(
height
*(
≤g_byãp
))Ë=
NULL
) {

278 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

279 
	`‰ì
(
image_d©a
);

280 
image_d©a
 = 
NULL
;

281  
NULL
;

284 
	`Tø˚
((
°dîr
, "readpng_get_image: channels = %d,Ñowbytes = %ld, height = %ld\n",

285 *
pCh™√ls
, 
rowbyãs
, 
height
));

290 
i
 = 0; i < 
height
; ++i)

291 
row_poöãrs
[
i
] = 
image_d©a
 + i*
rowbyãs
;

296 
	`≤g_ªad_image
(
≤g_±r
, 
row_poöãrs
);

302 
	`‰ì
(
row_poöãrs
);

303 
row_poöãrs
 = 
NULL
;

305 
	`≤g_ªad_íd
(
≤g_±r
, 
NULL
);

307  
image_d©a
;

308 
	}
}

311 
	$ªad≤g_˛ónup
(
‰ì_image_d©a
)

313 i‡(
‰ì_image_d©a
 && 
image_d©a
) {

314 
	`‰ì
(
image_d©a
);

315 
image_d©a
 = 
NULL
;

318 i‡(
≤g_±r
 && 
öfo_±r
) {

319 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

320 
≤g_±r
 = 
NULL
;

321 
öfo_±r
 = 
NULL
;

323 
	}
}

	@contrib/gregbook/readpng.h

56 #i‚de‡
TRUE


57 
	#TRUE
 1

	)

58 
	#FALSE
 0

	)

61 #i‚de‡
MAX


62 
	#MAX
(
a
,
b
Ë(◊Ë> (b)? (aË: (b))

	)

63 
	#MIN
(
a
,
b
Ë(◊Ë< (b)? (aË: (b))

	)

66 #ifde‡
DEBUG


67 
	#Tø˚
(
x
Ë{
Ârötf
 x ; 
	`fÊush
(
°dîr
); fÊush(
°dout
);}

	)

69 
	#Tø˚
(
x
Ë;

	)

72 
	tuch
;

73 
	tush
;

74 
	tulg
;

79 
ªad≤g_vîsi⁄_öfo
();

81 
ªad≤g_öô
(
FILE
 *
öfûe
, 
ulg
 *
pWidth
, ulg *
pHeight
);

83 
ªad≤g_gë_bgcﬁ‹
(
uch
 *
bg_ªd
, uch *
bg_gªí
, uch *
bg_blue
);

85 
uch
 *
ªad≤g_gë_image
(
di•œy_exp⁄ít
, *
pCh™√ls
,

86 
ulg
 *
pRowbyãs
);

88 
ªad≤g_˛ónup
(
‰ì_image_d©a
);

	@contrib/gregbook/readpng2.c

63 
	~<°dlib.h
>

64 
	~<£tjmp.h
>

66 
	~<zlib.h
>

67 
	~"≤g.h
"

68 
	~"ªad≤g2.h
"

73 
ªad≤g2_öfo_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
);

74 
ªad≤g2_row_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
√w_row
,

75 
≤g_uöt_32
 
row_num
, 
∑ss
);

76 
ªad≤g2_íd_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
);

77 
ªad≤g2_îr‹_h™dÀr
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
);

78 
ªad≤g2_w¨nög_h™dÀr
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
);

83 
	$ªad≤g2_vîsi⁄_öfo
()

85 
	`Ârötf
(
°dîr
, " Compiled withÜibpng %s; usingÜibpng %s\n",

86 
PNG_LIBPNG_VER_STRING
, 
≤g_lib≤g_vî
);

88 
	`Ârötf
(
°dîr
, "ánd with zlib %s; using zlib %s.\n",

89 
ZLIB_VERSION
, 
zlib_vîsi⁄
);

90 
	}
}

95 
	$ªad≤g2_check_sig
(
uch
 *
sig
, 
num
)

97  !
	`≤g_sig_cmp
(
sig
, 0, 
num
);

98 
	}
}

105 
	$ªad≤g2_öô
(
maö¥og_öfo
 *
maö¥og_±r
)

107 
≤g_°ru˘p
 
≤g_±r
;

108 
≤g_öf›
 
öfo_±r
;

113 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
	`≤g_gë_lib≤g_vî
(
NULL
), 
maö¥og_±r
,

114 
ªad≤g2_îr‹_h™dÀr
, 
ªad≤g2_w¨nög_h™dÀr
);

115 i‡(!
≤g_±r
)

118 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

119 i‡(!
öfo_±r
) {

120 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
NULL
, NULL);

135 i‡(
	`£tjmp
(
maö¥og_±r
->
jmpbuf
)) {

136 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

141 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


149 c⁄° 
≤g_byã
 
chunks_to_¥o˚ss
[] = {

156 
	`≤g_£t_kìp_unknown_chunks
(
≤g_±r
, -1 ,

157 
NULL
, -1);

160 
	`≤g_£t_kìp_unknown_chunks
(
≤g_±r
,

161 0 , 
chunks_to_¥o˚ss
,

162 (
chunks_to_¥o˚ss
)/5);

170 
	`≤g_£t_¥ogªssive_ªad_‚
(
≤g_±r
, 
maö¥og_±r
,

171 
ªad≤g2_öfo_ˇŒback
, 
ªad≤g2_row_ˇŒback
, 
ªad≤g2_íd_ˇŒback
);

176 
maö¥og_±r
->
≤g_±r
 =Öng_ptr;

177 
maö¥og_±r
->
öfo_±r
 = info_ptr;

183 
	}
}

190 
	$ªad≤g2_decode_d©a
(
maö¥og_öfo
 *
maö¥og_±r
, 
uch
 *
øwbuf
, 
ulg
 
Àngth
)

192 
≤g_°ru˘p
 
≤g_±r
 = (≤g_°ru˘p)
maö¥og_±r
->png_ptr;

193 
≤g_öf›
 
öfo_±r
 = (≤g_öf›)
maö¥og_±r
->info_ptr;

199 i‡(
	`£tjmp
(
maö¥og_±r
->
jmpbuf
)) {

200 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

201 
maö¥og_±r
->
≤g_±r
 = 
NULL
;

202 
maö¥og_±r
->
öfo_±r
 = 
NULL
;

209 
	`≤g_¥o˚ss_d©a
(
≤g_±r
, 
öfo_±r
, 
øwbuf
, 
Àngth
);

212 
	}
}

217 
	$ªad≤g2_öfo_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
)

219 
maö¥og_öfo
 *
maö¥og_±r
;

220 
cﬁ‹_ty≥
, 
bô_dïth
;

221 
≤g_uöt_32
 
width
, 
height
;

222 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


223 
gamma
;

225 
≤g_fixed_poöt
 
gamma
;

242 
maö¥og_±r
 = 
	`≤g_gë_¥ogªssive_±r
(
≤g_±r
);

244 i‡(
maö¥og_±r
 =
NULL
) {

245 
	`Ârötf
(
°dîr
,

247 
	`fÊush
(
°dîr
);

261 
	`≤g_gë_IHDR
(
≤g_±r
, 
öfo_±r
, &
width
, &
height
, &
bô_dïth
, &
cﬁ‹_ty≥
,

262 
NULL
, NULL, NULL);

263 
maö¥og_±r
->
width
 = (
ulg
)width;

264 
maö¥og_±r
->
height
 = (
ulg
)height;

270 i‡(
maö¥og_±r
->
√ed_bgcﬁ‹
)

272 
≤g_cﬁ‹_16p
 
pBackground
;

277 i‡(
	`≤g_gë_bKGD
(
≤g_±r
, 
öfo_±r
, &
pBackground
))

283 i‡(
bô_dïth
 == 16) {

284 
maö¥og_±r
->
bg_ªd
 = 
pBackground
->
ªd
 >> 8;

285 
maö¥og_±r
->
bg_gªí
 = 
pBackground
->
gªí
 >> 8;

286 
maö¥og_±r
->
bg_blue
 = 
pBackground
->
blue
 >> 8;

287 } i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 && 
bô_dïth
 < 8) {

288 i‡(
bô_dïth
 == 1)

289 
maö¥og_±r
->
bg_ªd
 = maö¥og_±r->
bg_gªí
 =

290 
maö¥og_±r
->
bg_blue
 = 
pBackground
->
gøy
? 255 : 0;

291 i‡(
bô_dïth
 == 2)

292 
maö¥og_±r
->
bg_ªd
 = maö¥og_±r->
bg_gªí
 =

293 
maö¥og_±r
->
bg_blue
 = (255/3Ë* 
pBackground
->
gøy
;

295 
maö¥og_±r
->
bg_ªd
 = maö¥og_±r->
bg_gªí
 =

296 
maö¥og_±r
->
bg_blue
 = (255/15Ë* 
pBackground
->
gøy
;

298 
maö¥og_±r
->
bg_ªd
 = (
uch
)
pBackground
->
ªd
;

299 
maö¥og_±r
->
bg_gªí
 = (
uch
)
pBackground
->
gªí
;

300 
maö¥og_±r
->
bg_blue
 = (
uch
)
pBackground
->
blue
;

311 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

312 
	`≤g_£t_ex∑nd
(
≤g_±r
);

313 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 && 
bô_dïth
 < 8)

314 
	`≤g_£t_ex∑nd
(
≤g_±r
);

315 i‡(
	`≤g_gë_vÆid
(
≤g_±r
, 
öfo_±r
, 
PNG_INFO_tRNS
))

316 
	`≤g_£t_ex∑nd
(
≤g_±r
);

317 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


318 i‡(
bô_dïth
 == 16)

319 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


320 
	`≤g_£t_sˇÀ_16
(
≤g_±r
);

322 
	`≤g_£t_°rù_16
(
≤g_±r
);

325 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 ||

326 
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

327 
	`≤g_£t_gøy_to_rgb
(
≤g_±r
);

345 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


346 i‡(
	`≤g_gë_gAMA
(
≤g_±r
, 
öfo_±r
, &
gamma
))

347 
	`≤g_£t_gamma
(
≤g_±r
, 
maö¥og_±r
->
di•œy_exp⁄ít
, 
gamma
);

349 
	`≤g_£t_gamma
(
≤g_±r
, 
maö¥og_±r
->
di•œy_exp⁄ít
, 0.45455);

351 i‡(
	`≤g_gë_gAMA_fixed
(
≤g_±r
, 
öfo_±r
, &
gamma
))

352 
	`≤g_£t_gamma_fixed
(
≤g_±r
,

353 (
≤g_fixed_poöt
)(100000*
maö¥og_±r
->
di•œy_exp⁄ít
+.5), 
gamma
);

355 
	`≤g_£t_gamma_fixed
(
≤g_±r
,

356 (
≤g_fixed_poöt
)(100000*
maö¥og_±r
->
di•œy_exp⁄ít
+.5), 45455);

361 
maö¥og_±r
->
∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

367 
	`≤g_ªad_upd©e_öfo
(
≤g_±r
, 
öfo_±r
);

369 
maö¥og_±r
->
rowbyãs
 = ()
	`≤g_gë_rowbyãs
(
≤g_±r
, 
öfo_±r
);

370 
maö¥og_±r
->
ch™√ls
 = 
	`≤g_gë_ch™√ls
(
≤g_±r
, 
öfo_±r
);

378 (*
maö¥og_±r
->
maö¥og_öô
)();

384 
	}
}

390 
	$ªad≤g2_row_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
√w_row
,

391 
≤g_uöt_32
 
row_num
, 
∑ss
)

393 
maö¥og_öfo
 *
maö¥og_±r
;

399 i‡(!
√w_row
)

406 
maö¥og_±r
 = 
	`≤g_gë_¥ogªssive_±r
(
≤g_±r
);

411 
maö¥og_±r
->
∑ss
 =Öass;

418 
	`≤g_¥ogªssive_comböe_row
(
≤g_±r
, 
maö¥og_±r
->
row_poöãrs
[
row_num
],

419 
√w_row
);

425 (*
maö¥og_±r
->
maö¥og_di•œy_row
)(
row_num
);

431 
	}
}

437 
	$ªad≤g2_íd_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
)

439 
maö¥og_öfo
 *
maö¥og_±r
;

444 
maö¥og_±r
 = 
	`≤g_gë_¥ogªssive_±r
(
≤g_±r
);

454 (*
maö¥og_±r
->
maö¥og_föish_di•œy
)();

459 ()
öfo_±r
;

462 
	}
}

468 
	$ªad≤g2_˛ónup
(
maö¥og_öfo
 *
maö¥og_±r
)

470 
≤g_°ru˘p
 
≤g_±r
 = (≤g_°ru˘p)
maö¥og_±r
->png_ptr;

471 
≤g_öf›
 
öfo_±r
 = (≤g_öf›)
maö¥og_±r
->info_ptr;

473 i‡(
≤g_±r
 && 
öfo_±r
)

474 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

476 
maö¥og_±r
->
≤g_±r
 = 
NULL
;

477 
maö¥og_±r
->
öfo_±r
 = 
NULL
;

478 
	}
}

481 
	$ªad≤g2_w¨nög_h™dÀr
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
)

483 
	`Ârötf
(
°dîr
, "ªad≤g2Üib≤g w¨nög: %s\n", 
msg
);

484 
	`fÊush
(
°dîr
);

485 ()
≤g_±r
;

486 
	}
}

489 
	$ªad≤g2_îr‹_h™dÀr
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
)

491 
maö¥og_öfo
 *
maö¥og_±r
;

502 
	`Ârötf
(
°dîr
, "ªad≤g2Üib≤gÉº‹: %s\n", 
msg
);

503 
	`fÊush
(
°dîr
);

505 
maö¥og_±r
 = 
	`≤g_gë_îr‹_±r
(
≤g_±r
);

506 i‡(
maö¥og_±r
 =
NULL
) {

507 
	`Ârötf
(
°dîr
,

509 
	`fÊush
(
°dîr
);

510 
	`exô
(99);

520 
	`l⁄gjmp
(
maö¥og_±r
->
jmpbuf
, 1);

521 
	}
}

	@contrib/gregbook/readpng2.h

56 #i‚de‡
TRUE


57 
	#TRUE
 1

	)

58 
	#FALSE
 0

	)

61 #i‚de‡
MAX


62 
	#MAX
(
a
,
b
Ë(◊Ë> (b)? (aË: (b))

	)

63 
	#MIN
(
a
,
b
Ë(◊Ë< (b)? (aË: (b))

	)

66 #ifde‡
DEBUG


67 
	#Tø˚
(
x
Ë{
Ârötf
 x ; 
	`fÊush
(
°dîr
); fÊush(
°dout
);}

	)

69 
	#Tø˚
(
x
Ë;

	)

72 
	eΩng2_°©es
 {

73 
	mkPªInô
 = 0,

74 
	mkWödowInô
,

75 
	mkD⁄e


78 
	tuch
;

79 
	tush
;

80 
	tulg
;

82 
	s_maö¥og_öfo
 {

83 
	mdi•œy_exp⁄ít
;

84 
ulg
 
	mwidth
;

85 
ulg
 
	mheight
;

86 *
	m≤g_±r
;

87 *
	möfo_±r
;

88 (*
	mmaö¥og_öô
)();

89 (*
	mmaö¥og_di•œy_row
)(
ulg
 
	mrow_num
);

90 (*
	mmaö¥og_föish_di•œy
)();

91 
uch
 *
	mimage_d©a
;

92 
uch
 **
	mrow_poöãrs
;

93 
jmp_buf
 
	mjmpbuf
;

94 
	m∑s£s
;

95 
	m∑ss
;

96 
	mrowbyãs
;

97 
	mch™√ls
;

98 
	m√ed_bgcﬁ‹
;

99 
	m°©e
;

100 
uch
 
	mbg_ªd
;

101 
uch
 
	mbg_gªí
;

102 
uch
 
	mbg_blue
;

103 } 
	tmaö¥og_öfo
;

108 
ªad≤g2_vîsi⁄_öfo
();

110 
ªad≤g2_check_sig
(
uch
 *
sig
, 
num
);

112 
ªad≤g2_öô
(
maö¥og_öfo
 *
maö¥og_±r
);

114 
ªad≤g2_decode_d©a
(
maö¥og_öfo
 *
maö¥og_±r
, 
uch
 *
øwbuf
, 
ulg
 
Àngth
);

116 
ªad≤g2_˛ónup
(
maö¥og_öfo
 *
maö¥og_±r
);

	@contrib/gregbook/readppm.c

61 
	~<°dio.h
>

62 
	~<°dlib.h
>

64 
	~"ªad≤g.h
"

67 
ulg
 
	gwidth
, 
	gheight
;

68 
	gbô_dïth
, 
	gcﬁ‹_ty≥
, 
	gch™√ls
;

69 
uch
 *
	gimage_d©a
 = 
NULL
;

70 
FILE
 *
	gßved_öfûe
;

73 
	$ªad≤g_vîsi⁄_öfo
()

75 
	`Ârötf
(
°dîr
, " Compiled withoutÜibpng, zlib or PBMPLUS/NetPBM.\n");

76 
	}
}

81 
	$ªad≤g_öô
(
FILE
 *
öfûe
, 
ulg
 *
pWidth
, ulg *
pHeight
)

83 
uch
 
µmlöe
[256];

84 
maxvÆ
;

87 
ßved_öfûe
 = 
öfûe
;

89 
	`fgës
(
µmlöe
, 256, 
öfûe
);

90 i‡(
µmlöe
[0] != 'P' ||Öpmline[1] != '6') {

91 
	`Ârötf
(
°dîr
, "ERROR:Çotá PPM file\n");

95 i‡(
µmlöe
[1] == '6') {

96 
cﬁ‹_ty≥
 = 2;

97 
ch™√ls
 = 3;

98 } i‡(
µmlöe
[1] == '8') {

99 
cﬁ‹_ty≥
 = 6;

100 
ch™√ls
 = 4;

102 
cﬁ‹_ty≥
 = 0;

103 
ch™√ls
 = 1;

107 
	`fgës
(
µmlöe
, 256, 
öfûe
);

108 } 
µmlöe
[0] == '#');

109 
	`ssˇnf
(
µmlöe
, "%lu %lu", &
width
, &
height
);

112 
	`fgës
(
µmlöe
, 256, 
öfûe
);

113 } 
µmlöe
[0] == '#');

114 
	`ssˇnf
(
µmlöe
, "%d", &
maxvÆ
);

115 i‡(
maxvÆ
 != 255) {

116 
	`Ârötf
(
°dîr
, "ERROR: maxvÆ = %d\n", 
maxvÆ
);

119 
bô_dïth
 = 8;

121 *
pWidth
 = 
width
;

122 *
pHeight
 = 
height
;

125 
	}
}

133 
	$ªad≤g_gë_bgcﬁ‹
(
uch
 *
ªd
, uch *
gªí
, uch *
blue
)

136 
	}
}

143 
uch
 *
	$ªad≤g_gë_image
(
di•œy_exp⁄ít
, *
pCh™√ls
, 
ulg
 *
pRowbyãs
)

145 
ulg
 
rowbyãs
;

154 *
pRowbyãs
 = 
rowbyãs
 = 
ch™√ls
*
width
;

155 *
pCh™√ls
 = 
ch™√ls
;

157 
	`Tø˚
((
°dîr
, "ªad≤g_gë_image:Ñowbyã†%ld, heighà%ld\n", 
rowbyãs
, 
height
));

160 i‡(
height
 > ((
size_t
)(-1))/
rowbyãs
) {

161 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": image_data buffer would beÅooÜarge\n",

162  
NULL
;

165 i‡((
image_d©a
 = (
uch
 *)
	`mÆloc
(
rowbyãs
*
height
)Ë=
NULL
) {

166  
NULL
;

171 i‡(
	`‰ód
(
image_d©a
, 1L, 
rowbyãs
*
height
, 
ßved_öfûe
) <

172 
rowbyãs
*
height
) {

173 
	`‰ì
 (
image_d©a
);

174 
image_d©a
 = 
NULL
;

175  
NULL
;

178  
image_d©a
;

179 
	}
}

182 
	$ªad≤g_˛ónup
(
‰ì_image_d©a
)

184 i‡(
‰ì_image_d©a
 && 
image_d©a
) {

185 
	`‰ì
(
image_d©a
);

186 
image_d©a
 = 
NULL
;

188 
	}
}

	@contrib/gregbook/rpng-win.c

80 
	#PROGNAME
 "Ωng-wö"

	)

81 
	#LONGNAME
 "Sim∂êPNG Võwî f‹ Wödows"

	)

82 
	#VERSION
 "2.01 o‡16 M¨ch 2008"

	)

84 
	~<°dio.h
>

85 
	~<°dlib.h
>

86 
	~<°rög.h
>

87 
	~<time.h
>

88 
	~<wödows.h
>

89 #ifde‡
__CYGWIN__


94 
	~<uni°d.h
>

95 
	~<ãrmio.h
>

96 
	~<sys/io˘l.h
>

97 
	$ª∂_gëch
( )

99 
ch
;

100 
fd
 = 
	`fûío
(
°dö
);

101 
ãrmio
 
ﬁd_ây
, 
√w_ây
;

103 
	`io˘l
(
fd
, 
TCGETA
, &
ﬁd_ây
);

104 
√w_ây
 = 
ﬁd_ây
;

105 
√w_ây
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ISIG
);

106 
	`io˘l
(
fd
, 
TCSETA
, &
√w_ây
);

107 
	`‰ód
(&
ch
, 1, (ch), 
°dö
);

108 
	`io˘l
(
fd
, 
TCSETA
, &
ﬁd_ây
);

110  
ch
;

111 
	}
}

112 
	#_gëch
 
ª∂_gëch


	)

114 
	~<c⁄io.h
>

119 
	~"ªad≤g.h
"

127 
	#Æpha_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) { \

128 
ush
 
ãmp
 = ((ush)(
fg
)*(ush)(
Æpha
) + \

129 (
ush
)(
bg
)*(ush)(255 - (ush)(
Æpha
)) + (ush)128); \

130 (
composôe
Ë(
uch
)((
ãmp
 + (temp >> 8)) >> 8); \

131 }

	)

135 
Ωng_wö_¸óã_wödow
(
HINSTANCE
 
hIn°
, 
showmode
);

136 
Ωng_wö_di•œy_image
();

137 
Ωng_wö_˛ónup
();

138 
LRESULT
 
CALLBACK
 
Ωng_wö_wnd¥oc
(
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
);

141 
	gtôÀb¨
[1024];

142 *
	g¥og«me
 = 
PROGNAME
;

143 *
	g≠≤ame
 = 
LONGNAME
;

144 *
	gfûíame
;

145 
FILE
 *
	göfûe
;

147 *
	gbg°r
;

148 
uch
 
	gbg_ªd
=0, 
	gbg_gªí
=0, 
	gbg_blue
=0;

150 
	gdi•œy_exp⁄ít
;

152 
ulg
 
	gimage_width
, 
	gimage_height
, 
	gimage_rowbyãs
;

153 
	gimage_ch™√ls
;

154 
uch
 *
	gimage_d©a
;

157 
ulg
 
	gwimage_rowbyãs
;

158 
uch
 *
	gdib
;

159 
uch
 *
	gwimage_d©a
;

160 
BITMAPINFOHEADER
 *
	gbmih
;

162 
HWND
 
	gglobÆ_hwnd
;

167 
WINAPI
 
	$WöMaö
(
HINSTANCE
 
hIn°
, HINSTANCE 
hPªvIn°
, 
PSTR
 
cmd
, 
showmode
)

169 *
¨gs
[1024];

170 *
p
, *
q
, **
¨gv
 = 
¨gs
;

171 
¨gc
 = 0;

172 
rc
, 
Æí
, 
Êí
;

173 
îr‹
 = 0;

174 
have_bg
 = 
FALSE
;

175 
LUT_exp⁄ít
;

176 
CRT_exp⁄ít
 = 2.2;

177 
deÁu…_di•œy_exp⁄ít
;

178 
MSG
 
msg
;

181 
fûíame
 = (*)
NULL
;

183 #i‚de‡
__CYGWIN__


189 
	`AŒocC⁄sﬁe
();

190 
	`‰e›í
("CONOUT$", "a", 
°dîr
);

191 
	`‰e›í
("CONOUT$", "a", 
°dout
);

202 #i‡
	`deföed
(
NeXT
)

203 
LUT_exp⁄ít
 = 1.0 / 2.2;

208 #ñi‡
	`deföed
(
sgi
)

209 
LUT_exp⁄ít
 = 1.0 / 1.7;

212 
öfûe
 = 
	`f›í
("/etc/config/system.glGammaVal", "r");

213 i‡(
öfûe
) {

214 
sgi_gamma
;

216 
	`fgës
(
tm∂öe
, 80, 
öfûe
);

217 
	`f˛o£
(
öfûe
);

218 
sgi_gamma
 = 
	`©of
(
tm∂öe
);

219 i‡(
sgi_gamma
 > 0.0)

220 
LUT_exp⁄ít
 = 1.0 / 
sgi_gamma
;

222 #ñi‡
	`deföed
(
Macötosh
)

223 
LUT_exp⁄ít
 = 1.8 / 2.61;

229 
LUT_exp⁄ít
 = 1.0;

233 
deÁu…_di•œy_exp⁄ít
 = 
LUT_exp⁄ít
 * 
CRT_exp⁄ít
;

241 i‡((
p
 = 
	`gëív
("SCREEN_GAMMA")Ë!
NULL
)

242 
di•œy_exp⁄ít
 = 
	`©of
(
p
);

244 
di•œy_exp⁄ít
 = 
deÁu…_di•œy_exp⁄ít
;

251 
¨gv
[
¨gc
++] = 
PROGNAME
;

252 
p
 = 
cmd
;

254 i‡(*
p
 == ' ')

255 *++
p
 == ' ')

258 i‡(*
p
 == '\0')

260 
¨gv
[
¨gc
++] = 
q
 = 
p
;

261 *
q
 && *q != ' ')

262 ++
q
;

264 i‡(*
q
 == '\0')

266 *
q
 = '\0';

267 
p
 = 
q
 + 1;

269 
¨gv
[
¨gc
] = 
NULL
;

274 *++
¨gv
 && !
îr‹
) {

275 i‡(!
	`°∫cmp
(*
¨gv
, "-gamma", 2)) {

276 i‡(!*++
¨gv
)

277 ++
îr‹
;

279 
di•œy_exp⁄ít
 = 
	`©of
(*
¨gv
);

280 i‡(
di•œy_exp⁄ít
 <= 0.0)

281 ++
îr‹
;

283 } i‡(!
	`°∫cmp
(*
¨gv
, "-bgcolor", 2)) {

284 i‡(!*++
¨gv
)

285 ++
îr‹
;

287 
bg°r
 = *
¨gv
;

288 i‡(
	`°æí
(
bg°r
) != 7 || bgstr[0] != '#')

289 ++
îr‹
;

291 
have_bg
 = 
TRUE
;

294 i‡(**
¨gv
 != '-') {

295 
fûíame
 = *
¨gv
;

296 i‡(
¨gv
[1])

297 ++
îr‹
;

299 ++
îr‹
;

303 i‡(!
fûíame
)

304 ++
îr‹
;

309 i‡(
îr‹
) {

310 #i‚de‡
__CYGWIN__


311 
ch
;

314 
	`Ârötf
(
°dîr
, "\n%†%s: %s\n\n", 
PROGNAME
, 
VERSION
, 
≠≤ame
);

315 
	`ªad≤g_vîsi⁄_öfo
();

316 
	`Ârötf
(
°dîr
, "\n"

326 #i‚de‡
__CYGWIN__


329 "\n", 
PROGNAME
, 
deÁu…_di•œy_exp⁄ít
);

330 #i‚de‡
__CYGWIN__


332 
ch
 = 
	`_gëch
();

333 
ch
 != 'q' && ch != 'Q' && ch != 0x1B);

335 
	`exô
(1);

339 i‡(!(
öfûe
 = 
	`f›í
(
fûíame
, "rb"))) {

340 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": c™'à›í PNG fûê[%s]\n", 
fûíame
);

341 ++
îr‹
;

343 i‡((
rc
 = 
	`ªad≤g_öô
(
öfûe
, &
image_width
, &
image_height
)) != 0) {

344 
rc
) {

346 
	`Ârötf
(
°dîr
, 
PROGNAME


348 
fûíame
);

351 
	`Ârötf
(
°dîr
, 
PROGNAME


352 ": [%s] ha†bad IHDR (lib≤gÜ⁄gjmp)\n", 
fûíame
);

355 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": insufficient memory\n");

358 
	`Ârötf
(
°dîr
, 
PROGNAME


362 ++
îr‹
;

364 i‡(
îr‹
)

365 
	`f˛o£
(
öfûe
);

369 i‡(
îr‹
) {

370 #i‚de‡
__CYGWIN__


371 
ch
;

374 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":áborting.\n");

375 #i‚de‡
__CYGWIN__


377 
ch
 = 
	`_gëch
();

378 
ch
 != 'q' && ch != 'Q' && ch != 0x1B);

380 
	`exô
(2);

382 
	`Ârötf
(
°dîr
, "\n%†%s: %s\n", 
PROGNAME
, 
VERSION
, 
≠≤ame
);

383 #i‚de‡
__CYGWIN__


384 
	`Ârötf
(
°dîr
,

386 
PROGNAME
);

393 
Æí
 = 
	`°æí
(
≠≤ame
);

394 
Êí
 = 
	`°æí
(
fûíame
);

395 i‡(
Æí
 + 
Êí
 + 3 > 1023)

396 
	`•rötf
(
tôÀb¨
, "%s: ...%s", 
≠≤ame
, 
fûíame
+(
Æí
+
Êí
+6-1023));

398 
	`•rötf
(
tôÀb¨
, "%s: %s", 
≠≤ame
, 
fûíame
);

405 i‡(
have_bg
) {

406 
r
, 
g
, 
b
;

408 
	`ssˇnf
(
bg°r
+1, "%2x%2x%2x", &
r
, &
g
, &
b
);

409 
bg_ªd
 = (
uch
)
r
;

410 
bg_gªí
 = (
uch
)
g
;

411 
bg_blue
 = (
uch
)
b
;

412 } i‡(
	`ªad≤g_gë_bgcﬁ‹
(&
bg_ªd
, &
bg_gªí
, &
bg_blue
) > 1) {

413 
	`ªad≤g_˛ónup
(
TRUE
);

414 
	`Ârötf
(
°dîr
, 
PROGNAME


416 
	`exô
(2);

423 i‡(
	`Ωng_wö_¸óã_wödow
(
hIn°
, 
showmode
))

424 
	`exô
(2);

429 
	`Tø˚
((
°dîr
, "callingÑeadpng_get_image()\n"))

430 
image_d©a
 = 
	`ªad≤g_gë_image
(
di•œy_exp⁄ít
, &
image_ch™√ls
,

431 &
image_rowbyãs
);

432 
	`Tø˚
((
°dîr
, "done withÑeadpng_get_image()\n"))

438 
	`ªad≤g_˛ónup
(
FALSE
);

439 
	`f˛o£
(
öfûe
);

441 i‡(!
image_d©a
) {

442 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": unableÅo decode PNG image\n");

443 
	`exô
(3);

449 
	`Tø˚
((
°dîr
, "callingÑpng_win_display_image()\n"))

450 i‡(
	`Ωng_wö_di•œy_image
()) {

451 
	`‰ì
(
image_d©a
);

452 
	`exô
(4);

454 
	`Tø˚
((
°dîr
, "done withÑpng_win_display_image()\n"))

459 
	`¥ötf
(

460 #i‚de‡
__CYGWIN__


466 
	`fÊush
(
°dout
);

468 
	`GëMesßge
(&
msg
, 
NULL
, 0, 0)) {

469 
	`Tøn¶©eMesßge
(&
msg
);

470 
	`Di•©chMesßge
(&
msg
);

476 
	`Ωng_wö_˛ónup
();

478  
msg
.
wP¨am
;

479 
	}
}

485 
	$Ωng_wö_¸óã_wödow
(
HINSTANCE
 
hIn°
, 
showmode
)

487 
uch
 *
de°
;

488 
exåa_width
, 
exåa_height
;

489 
ulg
 
i
, 
j
;

490 
WNDCLASSEX
 
wnd˛ass
;

498 
wimage_rowbyãs
 = ((3*
image_width
 + 3L) >> 2) << 2;

501 i‡(
image_height
 > ((
size_t
)(-1))/
wimage_rowbyãs
) {

502 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": image_data buffer would beÅooÜarge\n");

506 i‡(!(
dib
 = (
uch
 *)
	`mÆloc
((
BITMAPINFOHEADER
) +

507 
wimage_rowbyãs
*
image_height
)))

519 
	`mem£t
(
dib
, 0, (
BITMAPINFOHEADER
));

520 
bmih
 = (
BITMAPINFOHEADER
 *)
dib
;

521 
bmih
->
biSize
 = (
BITMAPINFOHEADER
);

522 
bmih
->
biWidth
 = 
image_width
;

523 
bmih
->
biHeight
 = -(()
image_height
);

524 
bmih
->
biPœ√s
 = 1;

525 
bmih
->
biBôCou¡
 = 24;

526 
bmih
->
biCom¥essi⁄
 = 0;

527 
wimage_d©a
 = 
dib
 + (
BITMAPINFOHEADER
);

533 
j
 = 0; j < 
image_height
; ++j) {

534 
de°
 = 
wimage_d©a
 + 
j
*
wimage_rowbyãs
;

535 
i
 = 
image_width
; i > 0; --i) {

536 *
de°
++ = 
bg_blue
;

537 *
de°
++ = 
bg_gªí
;

538 *
de°
++ = 
bg_ªd
;

546 
	`mem£t
(&
wnd˛ass
, 0, (wndclass));

548 
wnd˛ass
.
cbSize
 = (wndclass);

549 
wnd˛ass
.
°yÀ
 = 
CS_HREDRAW
 | 
CS_VREDRAW
;

550 
wnd˛ass
.
Õ‚WndProc
 = 
Ωng_wö_wnd¥oc
;

551 
wnd˛ass
.
hIn°™˚
 = 
hIn°
;

552 
wnd˛ass
.
hIc⁄
 = 
	`LﬂdIc⁄
(
NULL
, 
IDI_APPLICATION
);

553 
wnd˛ass
.
hCurs‹
 = 
	`LﬂdCurs‹
(
NULL
, 
IDC_ARROW
);

554 
wnd˛ass
.
hbrBackground
 = (
HBRUSH
)
	`GëStockObje˘
(
DKGRAY_BRUSH
);

555 
wnd˛ass
.
ÕszMíuName
 = 
NULL
;

556 
wnd˛ass
.
ÕszCœssName
 = 
¥og«me
;

557 
wnd˛ass
.
hIc⁄Sm
 = 
	`LﬂdIc⁄
(
NULL
, 
IDI_APPLICATION
);

559 
	`Regi°îCœssEx
(&
wnd˛ass
);

565 
exåa_width
 = 2*(
	`GëSy°emMërics
(
SM_CXBORDER
) +

566 
	`GëSy°emMërics
(
SM_CXDLGFRAME
));

567 
exåa_height
 = 2*(
	`GëSy°emMërics
(
SM_CYBORDER
) +

568 
	`GëSy°emMërics
(
SM_CYDLGFRAME
)) +

569 
	`GëSy°emMërics
(
SM_CYCAPTION
);

571 
globÆ_hwnd
 = 
	`Cª©eWödow
(
¥og«me
, 
tôÀb¨
, 
WS_OVERLAPPEDWINDOW
,

572 
CW_USEDEFAULT
, CW_USEDEFAULT, 
image_width
+
exåa_width
,

573 
image_height
+
exåa_height
, 
NULL
, NULL, 
hIn°
, NULL);

575 
	`ShowWödow
(
globÆ_hwnd
, 
showmode
);

576 
	`Upd©eWödow
(
globÆ_hwnd
);

580 
	}
}

586 
	$Ωng_wö_di•œy_image
()

588 
uch
 *
§c
, *
de°
;

589 
uch
 
r
, 
g
, 
b
, 
a
;

590 
ulg
 
i
, 
row
, 
œ°row
;

591 
RECT
 
ª˘
;

594 
	`Tø˚
((
°dîr
, "beginning displayÜoop (image_channels == %d)\n",

595 
image_ch™√ls
))

596 
	`Tø˚
((
°dîr
, "(width = %ld,Ñowbytes = %ld, wimage_rowbytes = %d)\n",

597 
image_width
, 
image_rowbyãs
, 
wimage_rowbyãs
))

606 
œ°row
 = 
row
 = 0;Ñow < 
image_height
; ++row) {

607 
§c
 = 
image_d©a
 + 
row
*
image_rowbyãs
;

608 
de°
 = 
wimage_d©a
 + 
row
*
wimage_rowbyãs
;

609 i‡(
image_ch™√ls
 == 3) {

610 
i
 = 
image_width
; i > 0; --i) {

611 
r
 = *
§c
++;

612 
g
 = *
§c
++;

613 
b
 = *
§c
++;

614 *
de°
++ = 
b
;

615 *
de°
++ = 
g
;

616 *
de°
++ = 
r
;

619 
i
 = 
image_width
; i > 0; --i) {

620 
r
 = *
§c
++;

621 
g
 = *
§c
++;

622 
b
 = *
§c
++;

623 
a
 = *
§c
++;

624 i‡(
a
 == 255) {

625 *
de°
++ = 
b
;

626 *
de°
++ = 
g
;

627 *
de°
++ = 
r
;

628 } i‡(
a
 == 0) {

629 *
de°
++ = 
bg_blue
;

630 *
de°
++ = 
bg_gªí
;

631 *
de°
++ = 
bg_ªd
;

637 
	`Æpha_composôe
(*
de°
++, 
b
, 
a
, 
bg_blue
);

638 
	`Æpha_composôe
(*
de°
++, 
g
, 
a
, 
bg_gªí
);

639 
	`Æpha_composôe
(*
de°
++, 
r
, 
a
, 
bg_ªd
);

644 i‡(((
row
+1) & 0xf) == 0) {

645 
ª˘
.
À·
 = 0L;

646 
ª˘
.
t›
 = (
LONG
)
œ°row
;

647 
ª˘
.
right
 = (
LONG
)
image_width
;

648 
ª˘
.
bŸtom
 = (
LONG
)
œ°row
 + 16L;

649 
	`InvÆid©eRe˘
(
globÆ_hwnd
, &
ª˘
, 
FALSE
);

650 
	`Upd©eWödow
(
globÆ_hwnd
);

651 
œ°row
 = 
row
 + 1;

655 
	`Tø˚
((
°dîr
, "calling final image-flushÑoutine\n"))

656 i‡(
œ°row
 < 
image_height
) {

657 
ª˘
.
À·
 = 0L;

658 
ª˘
.
t›
 = (
LONG
)
œ°row
;

659 
ª˘
.
right
 = (
LONG
)
image_width
;

660 
ª˘
.
bŸtom
 = (
LONG
)
image_height
;

661 
	`InvÆid©eRe˘
(
globÆ_hwnd
, &
ª˘
, 
FALSE
);

662 
	`Upd©eWödow
(
globÆ_hwnd
);

672 
	}
}

678 
	$Ωng_wö_˛ónup
()

680 i‡(
image_d©a
) {

681 
	`‰ì
(
image_d©a
);

682 
image_d©a
 = 
NULL
;

685 i‡(
dib
) {

686 
	`‰ì
(
dib
);

687 
dib
 = 
NULL
;

689 
	}
}

695 
LRESULT
 
CALLBACK
 
	$Ωng_wö_wnd¥oc
(
HWND
 
hwnd
, 
UINT
 
iMsg
, 
WPARAM
 
wP
, 
LPARAM
 
lP
)

697 
HDC
 
hdc
;

698 
PAINTSTRUCT
 
ps
;

699 
rc
;

701 
iMsg
) {

702 
WM_CREATE
:

706 
WM_PAINT
:

707 
hdc
 = 
	`BegöPaöt
(
hwnd
, &
ps
);

709 
rc
 = 
	`SåëchDIBôs
(
hdc
, 0, 0, 
image_width
, 
image_height
,

711 0, 0, 
image_width
, 
image_height
,

712 
wimage_d©a
, (
BITMAPINFO
 *)
bmih
,

714 0, 
SRCCOPY
);

715 
	`EndPaöt
(
hwnd
, &
ps
);

719 
WM_CHAR
:

720 
wP
) {

724 
	`Po°QuôMesßge
(0);

728 
WM_LBUTTONDOWN
:

729 
WM_DESTROY
:

730 
	`Po°QuôMesßge
(0);

734  
	`DefWödowProc
(
hwnd
, 
iMsg
, 
wP
, 
lP
);

735 
	}
}

	@contrib/gregbook/rpng-x.c

84 
	#PROGNAME
 "Ωng-x"

	)

85 
	#LONGNAME
 "Sim∂êPNG Võwî f‹ X"

	)

86 
	#VERSION
 "2.02 o‡15 Ju√ 2014"

	)

87 
	#RESNAME
 "Ωng"

	)

88 
	#RESCLASS
 "R≤g"

	)

90 
	~<°dio.h
>

91 
	~<°dlib.h
>

92 
	~<°rög.h
>

93 
	~<time.h
>

94 
	~<X11/Xlib.h
>

95 
	~<X11/Xutû.h
>

96 
	~<X11/Xos.h
>

97 
	~<X11/keysym.h
>

101 
	~"ªad≤g.h
"

109 
	#Æpha_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) { \

110 
ush
 
ãmp
 = ((ush)(
fg
)*(ush)(
Æpha
) + \

111 (
ush
)(
bg
)*(ush)(255 - (ush)(
Æpha
)) + (ush)128); \

112 (
composôe
Ë(
uch
)((
ãmp
 + (temp >> 8)) >> 8); \

113 }

	)

117 
Ωng_x_¸óã_wödow
();

118 
Ωng_x_di•œy_image
();

119 
Ωng_x_˛ónup
();

120 
Ωng_x_msb
(
ulg
 
u32vÆ
);

123 
	gtôÀb¨
[1024], *
	gwödow_«me
 = 
tôÀb¨
;

124 *
	g≠≤ame
 = 
LONGNAME
;

125 *
	gic⁄_«me
 = 
PROGNAME
;

126 *
	gªs_«me
 = 
RESNAME
;

127 *
	gªs_˛ass
 = 
RESCLASS
;

128 *
	gfûíame
;

129 
FILE
 *
	göfûe
;

131 *
	gbg°r
;

132 
uch
 
	gbg_ªd
=0, 
	gbg_gªí
=0, 
	gbg_blue
=0;

134 
	gdi•œy_exp⁄ít
;

136 
ulg
 
	gimage_width
, 
	gimage_height
, 
	gimage_rowbyãs
;

137 
	gimage_ch™√ls
;

138 
uch
 *
	gimage_d©a
;

141 *
	gdi•œy«me
;

142 
XImage
 *
	gximage
;

143 
Di•œy
 *
	gdi•œy
;

144 
	gdïth
;

145 
VisuÆ
 *
	gvisuÆ
;

146 
XVisuÆInfo
 *
	gvisuÆ_li°
;

147 
	gRShi·
, 
	gGShi·
, 
	gBShi·
;

148 
ulg
 
	gRMask
, 
	gGMask
, 
	gBMask
;

149 
Wödow
 
	gwödow
;

150 
GC
 
	ggc
;

151 
Cﬁ‹m≠
 
	gcﬁ‹m≠
;

153 
	ghave_n⁄deÁu…_visuÆ
 = 
FALSE
;

154 
	ghave_cﬁ‹m≠
 = 
FALSE
;

155 
	ghave_wödow
 = 
FALSE
;

156 
	ghave_gc
 = 
FALSE
;

165 
	$maö
(
¨gc
, **
¨gv
)

167 #ifde‡
sgi


168 
tm∂öe
[80];

170 *
p
;

171 
rc
, 
Æí
, 
Êí
;

172 
îr‹
 = 0;

173 
have_bg
 = 
FALSE
;

174 
LUT_exp⁄ít
;

175 
CRT_exp⁄ít
 = 2.2;

176 
deÁu…_di•œy_exp⁄ít
;

177 
XEvít
 
e
;

178 
KeySym
 
k
;

181 
di•œy«me
 = (*)
NULL
;

182 
fûíame
 = (*)
NULL
;

191 #i‡
	`deföed
(
NeXT
)

192 
LUT_exp⁄ít
 = 1.0 / 2.2;

197 #ñi‡
	`deföed
(
sgi
)

198 
LUT_exp⁄ít
 = 1.0 / 1.7;

201 
öfûe
 = 
	`f›í
("/etc/config/system.glGammaVal", "r");

202 i‡(
öfûe
) {

203 
sgi_gamma
;

205 
	`fgës
(
tm∂öe
, 80, 
öfûe
);

206 
	`f˛o£
(
öfûe
);

207 
sgi_gamma
 = 
	`©of
(
tm∂öe
);

208 i‡(
sgi_gamma
 > 0.0)

209 
LUT_exp⁄ít
 = 1.0 / 
sgi_gamma
;

211 #ñi‡
	`deföed
(
Macötosh
)

212 
LUT_exp⁄ít
 = 1.8 / 2.61;

218 
LUT_exp⁄ít
 = 1.0;

222 
deÁu…_di•œy_exp⁄ít
 = 
LUT_exp⁄ít
 * 
CRT_exp⁄ít
;

230 i‡((
p
 = 
	`gëív
("SCREEN_GAMMA")Ë!
NULL
)

231 
di•œy_exp⁄ít
 = 
	`©of
(
p
);

233 
di•œy_exp⁄ít
 = 
deÁu…_di•œy_exp⁄ít
;

238 *++
¨gv
 && !
îr‹
) {

239 i‡(!
	`°∫cmp
(*
¨gv
, "-display", 2)) {

240 i‡(!*++
¨gv
)

241 ++
îr‹
;

243 
di•œy«me
 = *
¨gv
;

244 } i‡(!
	`°∫cmp
(*
¨gv
, "-gamma", 2)) {

245 i‡(!*++
¨gv
)

246 ++
îr‹
;

248 
di•œy_exp⁄ít
 = 
	`©of
(*
¨gv
);

249 i‡(
di•œy_exp⁄ít
 <= 0.0)

250 ++
îr‹
;

252 } i‡(!
	`°∫cmp
(*
¨gv
, "-bgcolor", 2)) {

253 i‡(!*++
¨gv
)

254 ++
îr‹
;

256 
bg°r
 = *
¨gv
;

257 i‡(
	`°æí
(
bg°r
) != 7 || bgstr[0] != '#')

258 ++
îr‹
;

260 
have_bg
 = 
TRUE
;

263 i‡(**
¨gv
 != '-') {

264 
fûíame
 = *
¨gv
;

265 i‡(
¨gv
[1])

266 ++
îr‹
;

268 ++
îr‹
;

272 i‡(!
fûíame
)

273 ++
îr‹
;

278 i‡(
îr‹
) {

279 
	`Ârötf
(
°dîr
, "\n%†%s: %s\n", 
PROGNAME
, 
VERSION
, 
≠≤ame
);

280 
	`ªad≤g_vîsi⁄_öfo
();

281 
	`Ârötf
(
°dîr
, "\n"

286 
PROGNAME
, 
deÁu…_di•œy_exp⁄ít
);

288 
	`Ârötf
(
°dîr
, "\n"

296 
	`exô
(1);

300 i‡(!(
öfûe
 = 
	`f›í
(
fûíame
, "rb"))) {

301 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": c™'à›í PNG fûê[%s]\n", 
fûíame
);

302 ++
îr‹
;

304 i‡((
rc
 = 
	`ªad≤g_öô
(
öfûe
, &
image_width
, &
image_height
)) != 0) {

305 
rc
) {

307 
	`Ârötf
(
°dîr
, 
PROGNAME


309 
fûíame
);

312 
	`Ârötf
(
°dîr
, 
PROGNAME


313 ": [%s] ha†bad IHDR (lib≤gÜ⁄gjmp)\n", 
fûíame
);

316 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": insufficient memory\n");

319 
	`Ârötf
(
°dîr
, 
PROGNAME


323 ++
îr‹
;

325 
di•œy
 = 
	`XO≥nDi•œy
(
di•œy«me
);

326 i‡(!
di•œy
) {

327 
	`ªad≤g_˛ónup
(
TRUE
);

328 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": can't open X display [%s]\n",

329 
di•œy«me
? displayname : "default");

330 ++
îr‹
;

333 i‡(
îr‹
)

334 
	`f˛o£
(
öfûe
);

338 i‡(
îr‹
) {

339 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":áborting.\n");

340 
	`exô
(2);

346 
Æí
 = 
	`°æí
(
≠≤ame
);

347 
Êí
 = 
	`°æí
(
fûíame
);

348 i‡(
Æí
 + 
Êí
 + 3 > 1023)

349 
	`•rötf
(
tôÀb¨
, "%s: ...%s", 
≠≤ame
, 
fûíame
+(
Æí
+
Êí
+6-1023));

351 
	`•rötf
(
tôÀb¨
, "%s: %s", 
≠≤ame
, 
fûíame
);

358 i‡(
have_bg
) {

359 
r
, 
g
, 
b
;

361 
	`ssˇnf
(
bg°r
+1, "%2x%2x%2x", &
r
, &
g
, &
b
);

362 
bg_ªd
 = (
uch
)
r
;

363 
bg_gªí
 = (
uch
)
g
;

364 
bg_blue
 = (
uch
)
b
;

365 } i‡(
	`ªad≤g_gë_bgcﬁ‹
(&
bg_ªd
, &
bg_gªí
, &
bg_blue
) > 1) {

366 
	`ªad≤g_˛ónup
(
TRUE
);

367 
	`Ârötf
(
°dîr
, 
PROGNAME


369 
	`exô
(2);

376 i‡(
	`Ωng_x_¸óã_wödow
())

377 
	`exô
(2);

382 
	`Tø˚
((
°dîr
, "callingÑeadpng_get_image()\n"))

383 
image_d©a
 = 
	`ªad≤g_gë_image
(
di•œy_exp⁄ít
, &
image_ch™√ls
,

384 &
image_rowbyãs
);

385 
	`Tø˚
((
°dîr
, "done withÑeadpng_get_image()\n"))

391 
	`ªad≤g_˛ónup
(
FALSE
);

392 
	`f˛o£
(
öfûe
);

394 i‡(!
image_d©a
) {

395 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": unableÅo decode PNG image\n");

396 
	`exô
(3);

402 
	`Tø˚
((
°dîr
, "callingÑpng_x_display_image()\n"))

403 i‡(
	`Ωng_x_di•œy_image
()) {

404 
	`‰ì
(
image_d©a
);

405 
	`exô
(4);

407 
	`Tø˚
((
°dîr
, "done withÑpng_x_display_image()\n"))

412 
	`¥ötf
(

414 
	`fÊush
(
°dout
);

417 
	`XNextEvít
(
di•œy
, &
e
);

418 !(
e
.
ty≥
 =
Buâ⁄Pªss
 &&É.
xbuâ⁄
.
buâ⁄
 =
Buâ⁄1
) &&

419 !(
e
.
ty≥
 =
KeyPªss
 &&

420 ((
k
 = 
	`XLookupKeysym
(&
e
.
xkey
, 0)Ë=
XK_q
 || k =
XK_Esˇ≥
) ));

425 
	`Ωng_x_˛ónup
();

427 ()
¨gc
;

430 
	}
}

436 
	$Ωng_x_¸óã_wödow
()

438 
uch
 *
xd©a
;

439 
√ed_cﬁ‹m≠
 = 
FALSE
;

440 
s¸ìn
, 
∑d
;

441 
ulg
 
bg_pixñ
 = 0L;

442 
ulg
 
©åmask
;

443 
Wödow
 
roŸ
;

444 
XEvít
 
e
;

445 
XGCVÆues
 
gcvÆues
;

446 
XSëWödowAâribuãs
 
©å
;

447 
XTextPr›îty
 
wödowName
, *
pWödowName
 = &windowName;

448 
XTextPr›îty
 
ic⁄Name
, *
pIc⁄Name
 = &iconName;

449 
XVisuÆInfo
 
visuÆ_öfo
;

450 
XSizeHöts
 *
size_höts
;

451 
XWMHöts
 *
wm_höts
;

452 
XCœssHöt
 *
˛ass_höts
;

455 
s¸ìn
 = 
	`DeÁu…S¸ìn
(
di•œy
);

456 
dïth
 = 
	`Di•œyPœ√s
(
di•œy
, 
s¸ìn
);

457 
roŸ
 = 
	`RoŸWödow
(
di•œy
, 
s¸ìn
);

459 #ifde‡
DEBUG


460 
	`XSynchr⁄ize
(
di•œy
, 
True
);

465 i‡–
dïth
 != 16 && depth != 24 && depth != 32) {

466 
	`Ârötf
(
°dîr
,

468 
dïth
);

472 
	`XM©chVisuÆInfo
(
di•œy
, 
s¸ìn
, 
dïth
,

473 (
dïth
 =8)? 
P£udoCﬁ‹
 : 
TrueCﬁ‹
, &
visuÆ_öfo
);

474 
visuÆ
 = 
visuÆ_öfo
.visual;

476 i‡(
dïth
 != 16 && depth != 24 && depth != 32) {

477 
visuÆs_m©ched
 = 0;

479 
	`Tø˚
((
°dîr
, "default depth is %d: checking other visuals\n",

480 
dïth
))

483 
visuÆ_öfo
.
s¸ìn
 = screen;

484 
visuÆ_öfo
.
dïth
 = 24;

485 
visuÆ_li°
 = 
	`XGëVisuÆInfo
(
di•œy
,

486 
VisuÆS¸ìnMask
 | 
VisuÆDïthMask
, &
visuÆ_öfo
, &
visuÆs_m©ched
);

487 i‡(
visuÆs_m©ched
 == 0) {

489 
	`Ârötf
(
°dîr
, "default screen depth %dÇot supported,ándÇo"

490 " 24-bô visuÆ†found\n", 
dïth
);

493 
	`Tø˚
((
°dîr
, "XGetVisualInfo()Ñeturned %d 24-bit visuals\n",

494 
visuÆs_m©ched
))

495 
visuÆ
 = 
visuÆ_li°
[0].visual;

496 
dïth
 = 
visuÆ_li°
[0].depth;

502 
have_n⁄deÁu…_visuÆ
 = 
TRUE
;

503 
√ed_cﬁ‹m≠
 = 
TRUE
;

505 
	`XM©chVisuÆInfo
(
di•œy
, 
s¸ìn
, 
dïth
, 
TrueCﬁ‹
, &
visuÆ_öfo
);

506 
visuÆ
 = 
visuÆ_öfo
.visual;

510 
RMask
 = 
visuÆ
->
ªd_mask
;

511 
GMask
 = 
visuÆ
->
gªí_mask
;

512 
BMask
 = 
visuÆ
->
blue_mask
;

515 i‡(
dïth
 =8 || 
√ed_cﬁ‹m≠
) {

516 
cﬁ‹m≠
 = 
	`XCª©eCﬁ‹m≠
(
di•œy
, 
roŸ
, 
visuÆ
, 
AŒocN⁄e
);

517 i‡(!
cﬁ‹m≠
) {

518 
	`Ârötf
(
°dîr
, "XCreateColormap() failed\n");

521 
have_cﬁ‹m≠
 = 
TRUE
;

523 i‡(
dïth
 == 15 || depth == 16) {

524 
RShi·
 = 15 - 
	`Ωng_x_msb
(
RMask
);

525 
GShi·
 = 15 - 
	`Ωng_x_msb
(
GMask
);

526 
BShi·
 = 15 - 
	`Ωng_x_msb
(
BMask
);

527 } i‡(
dïth
 > 16) {

528 
	#NO_24BIT_MASKS


	)

529 #ifde‡
NO_24BIT_MASKS


530 
RShi·
 = 
	`Ωng_x_msb
(
RMask
) - 7;

531 
GShi·
 = 
	`Ωng_x_msb
(
GMask
) - 7;

532 
BShi·
 = 
	`Ωng_x_msb
(
BMask
) - 7;

534 
RShi·
 = 7 - 
	`Ωng_x_msb
(
RMask
);

535 
GShi·
 = 7 - 
	`Ωng_x_msb
(
GMask
);

536 
BShi·
 = 7 - 
	`Ωng_x_msb
(
BMask
);

539 i‡(
dïth
 >15 && (
RShi·
 < 0 || 
GShi·
 < 0 || 
BShi·
 < 0)) {

540 
	`Ârötf
(
°dîr
, "rpng internalÜogicÉrror:Çegative X shift(s)!\n");

548 
©å
.
backög_°‹e
 = 
Always
;

549 
©å
.
evít_mask
 = 
ExposuªMask
 | 
KeyPªssMask
 | 
Buâ⁄PªssMask
;

550 
©åmask
 = 
CWBackögSt‹e
 | 
CWEvítMask
;

551 i‡(
have_n⁄deÁu…_visuÆ
) {

552 
©å
.
cﬁ‹m≠
 = colormap;

553 
©å
.
background_pixñ
 = 0;

554 
©å
.
b‹dî_pixñ
 = 1;

555 
©åmask
 |
CWCﬁ‹m≠
 | 
CWBackPixñ
 | 
CWB‹dîPixñ
;

558 
wödow
 = 
	`XCª©eWödow
(
di•œy
, 
roŸ
, 0, 0, 
image_width
, 
image_height
, 0,

559 
dïth
, 
I≈utOuçut
, 
visuÆ
, 
©åmask
, &
©å
);

561 i‡(
wödow
 =
N⁄e
) {

562 
	`Ârötf
(
°dîr
, "XCreateWindow() failed\n");

565 
have_wödow
 = 
TRUE
;

567 i‡(
dïth
 == 8)

568 
	`XSëWödowCﬁ‹m≠
(
di•œy
, 
wödow
, 
cﬁ‹m≠
);

570 i‡(!
	`XSåögLi°ToTextPr›îty
(&
wödow_«me
, 1, 
pWödowName
))

571 
pWödowName
 = 
NULL
;

572 i‡(!
	`XSåögLi°ToTextPr›îty
(&
ic⁄_«me
, 1, 
pIc⁄Name
))

573 
pIc⁄Name
 = 
NULL
;

577 i‡((
size_höts
 = 
	`XAŒocSizeHöts
()Ë!
NULL
) {

579 
size_höts
->
Êags
 = 
PMöSize
 | 
PMaxSize
;

580 
size_höts
->
mö_width
 = size_höts->
max_width
 = ()
image_width
;

581 
size_höts
->
mö_height
 = size_höts->
max_height
 = ()
image_height
;

584 i‡((
wm_höts
 = 
	`XAŒocWMHöts
()Ë!
NULL
) {

585 
wm_höts
->
öôül_°©e
 = 
N‹mÆSèã
;

586 
wm_höts
->
öput
 = 
True
;

588 
wm_höts
->
Êags
 = 
SèãHöt
 | 
I≈utHöt
 ;

591 i‡((
˛ass_höts
 = 
	`XAŒocCœssHöt
()Ë!
NULL
) {

592 
˛ass_höts
->
ªs_«me
 =Ñes_name;

593 
˛ass_höts
->
ªs_˛ass
 =Ñes_class;

596 
	`XSëWMPr›îtõs
(
di•œy
, 
wödow
, 
pWödowName
, 
pIc⁄Name
, 
NULL
, 0,

597 
size_höts
, 
wm_höts
, 
˛ass_höts
);

600 i‡(
pWödowName
)

601 
	`XFªe
(
pWödowName
->
vÆue
);

602 i‡(
pIc⁄Name
)

603 
	`XFªe
(
pIc⁄Name
->
vÆue
);

604 i‡(
size_höts
)

605 
	`XFªe
(
size_höts
);

606 i‡(
wm_höts
)

607 
	`XFªe
(
wm_höts
);

608 i‡(
˛ass_höts
)

609 
	`XFªe
(
˛ass_höts
);

611 
	`XM≠Wödow
(
di•œy
, 
wödow
);

613 
gc
 = 
	`XCª©eGC
(
di•œy
, 
wödow
, 0, &
gcvÆues
);

614 
have_gc
 = 
TRUE
;

620 i‡(
dïth
 == 24 || depth == 32) {

621 
bg_pixñ
 = ((
ulg
)
bg_ªd
 << 
RShi·
) |

622 ((
ulg
)
bg_gªí
 << 
GShi·
) |

623 ((
ulg
)
bg_blue
 << 
BShi·
);

624 } i‡(
dïth
 == 16) {

625 
bg_pixñ
 = ((((
ulg
)
bg_ªd
 << 8Ë>> 
RShi·
Ë& 
RMask
) |

626 ((((
ulg
)
bg_gªí
 << 8Ë>> 
GShi·
Ë& 
GMask
) |

627 ((((
ulg
)
bg_blue
 << 8Ë>> 
BShi·
Ë& 
BMask
);

634 
	`XSëF‹eground
(
di•œy
, 
gc
, 
bg_pixñ
);

635 
	`XFûlRe˘™gÀ
(
di•œy
, 
wödow
, 
gc
, 0, 0, 
image_width
, 
image_height
);

642 
	`XNextEvít
(
di•œy
, &
e
);

643 
e
.
ty≥
 !
Expo£
 ||É.
xexpo£
.
cou¡
);

645 
	`XFlush
(
di•œy
);

651 i‡(
dïth
 == 24 || depth == 32) {

652 
xd©a
 = (
uch
 *)
	`mÆloc
(4*
image_width
*
image_height
);

653 
∑d
 = 32;

654 } i‡(
dïth
 == 16) {

655 
xd©a
 = (
uch
 *)
	`mÆloc
(2*
image_width
*
image_height
);

656 
∑d
 = 16;

658 
xd©a
 = (
uch
 *)
	`mÆloc
(
image_width
*
image_height
);

659 
∑d
 = 8;

662 i‡(!
xd©a
) {

663 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": unableÅoállocate image memory\n");

667 
ximage
 = 
	`XCª©eImage
(
di•œy
, 
visuÆ
, 
dïth
, 
ZPixm≠
, 0,

668 (*)
xd©a
, 
image_width
, 
image_height
, 
∑d
, 0);

670 i‡(!
ximage
) {

671 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": XCreateImage() failed\n");

672 
	`‰ì
(
xd©a
);

683 
ximage
->
byã_‹dî
 = 
MSBFú°
;

687 
	}
}

693 
	$Ωng_x_di•œy_image
()

695 
uch
 *
§c
;

696 *
de°
;

697 
uch
 
r
, 
g
, 
b
, 
a
;

698 
ulg
 
i
, 
row
, 
œ°row
 = 0;

699 
ulg
 
pixñ
;

700 
ximage_rowbyãs
 = 
ximage
->
byãs_≥r_löe
;

704 
	`Tø˚
((
°dîr
, "beginning displayÜoop (image_channels == %d)\n",

705 
image_ch™√ls
))

706 
	`Tø˚
((
°dîr
, " (width = %ld,Ñowbytes = %ld, ximage_rowbytes = %d)\n",

707 
image_width
, 
image_rowbyãs
, 
ximage_rowbyãs
))

708 
	`Tø˚
((
°dîr
, " (bµ = %d)\n", 
ximage
->
bôs_≥r_pixñ
))

709 
	`Tø˚
((
°dîr
, " (byã_‹dî = %s)\n", 
ximage
->
byã_‹dî
 =
MSBFú°
?

710 "MSBFú°" : (
ximage
->
byã_‹dî
 =
LSBFú°
? "LSBFirst" : "unknown")))

712 i‡(
dïth
 == 24 || depth == 32) {

713 
ulg
 
ªd
, 
gªí
, 
blue
;

715 
œ°row
 = 
row
 = 0;Ñow < 
image_height
; ++row) {

716 
§c
 = 
image_d©a
 + 
row
*
image_rowbyãs
;

717 
de°
 = 
ximage
->
d©a
 + 
row
*
ximage_rowbyãs
;

718 i‡(
image_ch™√ls
 == 3) {

719 
i
 = 
image_width
; i > 0; --i) {

720 
ªd
 = *
§c
++;

721 
gªí
 = *
§c
++;

722 
blue
 = *
§c
++;

723 #ifde‡
NO_24BIT_MASKS


724 
pixñ
 = (
ªd
 << 
RShi·
) |

725 (
gªí
 << 
GShi·
) |

726 (
blue
 << 
BShi·
);

729 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

730 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

731 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

732 *
de°
++ = ()–
pixñ
 & 0xff);

734 
ªd
 = (
RShi·
 < 0)?Ñed << (-RShift) :Ñed >> RShift;

735 
gªí
 = (
GShi·
 < 0)? green << (-GShift) : green >> GShift;

736 
blue
 = (
BShi·
 < 0)? blue << (-BShift) : blue >> BShift;

737 
pixñ
 = (
ªd
 & 
RMask
Ë| (
gªí
 & 
GMask
Ë| (
blue
 & 
BMask
);

739 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

740 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

741 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

742 *
de°
++ = ()–
pixñ
 & 0xff);

746 
i
 = 
image_width
; i > 0; --i) {

747 
r
 = *
§c
++;

748 
g
 = *
§c
++;

749 
b
 = *
§c
++;

750 
a
 = *
§c
++;

751 i‡(
a
 == 255) {

752 
ªd
 = 
r
;

753 
gªí
 = 
g
;

754 
blue
 = 
b
;

755 } i‡(
a
 == 0) {

756 
ªd
 = 
bg_ªd
;

757 
gªí
 = 
bg_gªí
;

758 
blue
 = 
bg_blue
;

763 
	`Æpha_composôe
(
ªd
, 
r
, 
a
, 
bg_ªd
);

764 
	`Æpha_composôe
(
gªí
, 
g
, 
a
, 
bg_gªí
);

765 
	`Æpha_composôe
(
blue
, 
b
, 
a
, 
bg_blue
);

767 
pixñ
 = (
ªd
 << 
RShi·
) |

768 (
gªí
 << 
GShi·
) |

769 (
blue
 << 
BShi·
);

771 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

772 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

773 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

774 *
de°
++ = ()–
pixñ
 & 0xff);

778 i‡(((
row
+1) & 0xf) == 0) {

779 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, ()
œ°row
, 0,

780 ()
œ°row
, 
image_width
, 16);

781 
	`XFlush
(
di•œy
);

782 
œ°row
 = 
row
 + 1;

786 } i‡(
dïth
 == 16) {

787 
ush
 
ªd
, 
gªí
, 
blue
;

789 
œ°row
 = 
row
 = 0;Ñow < 
image_height
; ++row) {

790 
§c
 = 
image_d©a
 + 
row
*
image_rowbyãs
;

791 
de°
 = 
ximage
->
d©a
 + 
row
*
ximage_rowbyãs
;

792 i‡(
image_ch™√ls
 == 3) {

793 
i
 = 
image_width
; i > 0; --i) {

794 
ªd
 = ((
ush
)(*
§c
) << 8);

795 ++
§c
;

796 
gªí
 = ((
ush
)(*
§c
) << 8);

797 ++
§c
;

798 
blue
 = ((
ush
)(*
§c
) << 8);

799 ++
§c
;

800 
pixñ
 = ((
ªd
 >> 
RShi·
Ë& 
RMask
) |

801 ((
gªí
 >> 
GShi·
Ë& 
GMask
) |

802 ((
blue
 >> 
BShi·
Ë& 
BMask
);

804 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

805 *
de°
++ = ()–
pixñ
 & 0xff);

808 
i
 = 
image_width
; i > 0; --i) {

809 
r
 = *
§c
++;

810 
g
 = *
§c
++;

811 
b
 = *
§c
++;

812 
a
 = *
§c
++;

813 i‡(
a
 == 255) {

814 
ªd
 = ((
ush
)
r
 << 8);

815 
gªí
 = ((
ush
)
g
 << 8);

816 
blue
 = ((
ush
)
b
 << 8);

817 } i‡(
a
 == 0) {

818 
ªd
 = ((
ush
)
bg_ªd
 << 8);

819 
gªí
 = ((
ush
)
bg_gªí
 << 8);

820 
blue
 = ((
ush
)
bg_blue
 << 8);

825 
	`Æpha_composôe
(
r
,Ñ, 
a
, 
bg_ªd
);

826 
	`Æpha_composôe
(
g
, g, 
a
, 
bg_gªí
);

827 
	`Æpha_composôe
(
b
, b, 
a
, 
bg_blue
);

828 
ªd
 = ((
ush
)
r
 << 8);

829 
gªí
 = ((
ush
)
g
 << 8);

830 
blue
 = ((
ush
)
b
 << 8);

832 
pixñ
 = ((
ªd
 >> 
RShi·
Ë& 
RMask
) |

833 ((
gªí
 >> 
GShi·
Ë& 
GMask
) |

834 ((
blue
 >> 
BShi·
Ë& 
BMask
);

836 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

837 *
de°
++ = ()–
pixñ
 & 0xff);

841 i‡(((
row
+1) & 0xf) == 0) {

842 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, ()
œ°row
, 0,

843 ()
œ°row
, 
image_width
, 16);

844 
	`XFlush
(
di•œy
);

845 
œ°row
 = 
row
 + 1;

855 
	`Tø˚
((
°dîr
, "calling final XPutImage()\n"))

856 i‡(
œ°row
 < 
image_height
) {

857 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, ()
œ°row
, 0,

858 ()
œ°row
, 
image_width
, 
image_height
-lastrow);

859 
	`XFlush
(
di•œy
);

863 
	}
}

868 
	$Ωng_x_˛ónup
()

870 i‡(
image_d©a
) {

871 
	`‰ì
(
image_d©a
);

872 
image_d©a
 = 
NULL
;

875 i‡(
ximage
) {

876 i‡(
ximage
->
d©a
) {

877 
	`‰ì
(
ximage
->
d©a
);

878 
ximage
->
d©a
 = (*)
NULL
;

880 
	`XDe°royImage
(
ximage
);

881 
ximage
 = 
NULL
;

884 i‡(
have_gc
)

885 
	`XFªeGC
(
di•œy
, 
gc
);

887 i‡(
have_wödow
)

888 
	`XDe°royWödow
(
di•œy
, 
wödow
);

890 i‡(
have_cﬁ‹m≠
)

891 
	`XFªeCﬁ‹m≠
(
di•œy
, 
cﬁ‹m≠
);

893 i‡(
have_n⁄deÁu…_visuÆ
)

894 
	`XFªe
(
visuÆ_li°
);

895 
	}
}

901 
	$Ωng_x_msb
(
ulg
 
u32vÆ
)

903 
i
;

905 
i
 = 31; i >= 0; --i) {

906 i‡(
u32vÆ
 & 0x80000000L)

908 
u32vÆ
 <<= 1;

910  
i
;

911 
	}
}

	@contrib/gregbook/rpng2-win.c

89 
	#PROGNAME
 "Ωng2-wö"

	)

90 
	#LONGNAME
 "ProgªssivêPNG Võwî f‹ Wödows"

	)

91 
	#VERSION
 "2.02 o‡16 M¨ch 2008"

	)

93 
	~<°dio.h
>

94 
	~<°dlib.h
>

95 
	~<°rög.h
>

96 
	~<£tjmp.h
>

97 
	~<time.h
>

98 
	~<m©h.h
>

99 
	~<wödows.h
>

100 #ifde‡
__CYGWIN__


105 
	~<uni°d.h
>

106 
	~<ãrmio.h
>

107 
	~<sys/io˘l.h
>

108 
	$ª∂_gëch
( )

110 
ch
;

111 
fd
 = 
	`fûío
(
°dö
);

112 
ãrmio
 
ﬁd_ây
, 
√w_ây
;

114 
	`io˘l
(
fd
, 
TCGETA
, &
ﬁd_ây
);

115 
√w_ây
 = 
ﬁd_ây
;

116 
√w_ây
.
c_lÊag
 &~(
ICANON
 | 
ECHO
 | 
ISIG
);

117 
	`io˘l
(
fd
, 
TCSETA
, &
√w_ây
);

118 
	`‰ód
(&
ch
, 1, (ch), 
°dö
);

119 
	`io˘l
(
fd
, 
TCSETA
, &
ﬁd_ây
);

121  
ch
;

122 
	}
}

123 
	#_gëch
 
ª∂_gëch


	)

125 
	~<c⁄io.h
>

129 #i‚de‡
PI


130 
	#PI
 3.141592653589793238

	)

132 
	#PI_2
 (
PI
*0.5)

	)

133 
	#INV_PI_360
 (360.0 / 
PI
)

	)

134 
	#MAX
(
a
,
b
Ë◊>b?a:b)

	)

135 
	#MIN
(
a
,
b
Ë◊<b?a:b)

	)

136 
	#CLIP
(
a
,
mö
,
max
Ë
	`MAX
(mö,
	`MIN
(◊),max))

	)

137 
	#ABS
(
a
Ë(◊)<0?-◊):◊))

	)

138 
	#CLIP8P
(
c
Ë
	`MAX
(0,(
	`MIN
((c),255))Ë

	)

139 
	#ROUNDF
(
f
Ë(()(‡+ 0.5))

	)

141 
	#rgb1_max
 
bg_‰eq


	)

142 
	#rgb1_mö
 
bg_gøy


	)

143 
	#rgb2_max
 
bg_bßt


	)

144 
	#rgb2_mö
 
bg_brŸ


	)

148 
	~"ªad≤g2.h
"

156 
	#Æpha_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) { \

157 
ush
 
ãmp
 = ((ush)(
fg
)*(ush)(
Æpha
) + \

158 (
ush
)(
bg
)*(ush)(255 - (ush)(
Æpha
)) + (ush)128); \

159 (
composôe
Ë(
uch
)((
ãmp
 + (temp >> 8)) >> 8); \

160 }

	)

163 
	#INBUFSIZE
 4096

	)

170 
Ωng2_wö_öô
();

171 
Ωng2_wö_¸óã_wödow
();

172 
Ωng2_wö_lﬂd_bg_image
();

173 
Ωng2_wö_di•œy_row
(
ulg
 
row
);

174 
Ωng2_wö_föish_di•œy
();

175 
Ωng2_wö_˛ónup
();

176 
LRESULT
 
CALLBACK
 
Ωng2_wö_wnd¥oc
(
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
);

179 
	gtôÀb¨
[1024];

180 *
	g¥og«me
 = 
PROGNAME
;

181 *
	g≠≤ame
 = 
LONGNAME
;

182 *
	gfûíame
;

183 
FILE
 *
	göfûe
;

185 
maö¥og_öfo
 
	gΩng2_öfo
;

187 
uch
 
	göbuf
[
INBUFSIZE
];

188 
	göcou¡
;

190 
	g∑t
 = 6;

191 
	gbg_image
 = 0;

192 
	gbgsˇÀ
 = 16;

193 
ulg
 
	gbg_rowbyãs
;

194 
uch
 *
	gbg_d©a
;

196 
	srgb_cﬁ‹
 {

197 
uch
 
	mr
, 
	mg
, 
	mb
;

198 } 
	grgb
[] = {

237 
	sbackground_∑âîn
 {

238 
ush
 
	mty≥
;

239 
	mrgb1_max
, 
	mrgb1_mö
;

240 
	mrgb2_max
, 
	mrgb2_mö
;

241 } 
	gbg
[] = {

259 
	gnum_bg∑t
 = (
bg
Ë/ (
background_∑âîn
);

263 
ulg
 
	gwimage_rowbyãs
;

264 
uch
 *
	gdib
;

265 
uch
 *
	gwimage_d©a
;

266 
BITMAPINFOHEADER
 *
	gbmih
;

268 
HWND
 
	gglobÆ_hwnd
;

269 
HINSTANCE
 
	gglobÆ_hIn°
;

270 
	gglobÆ_showmode
;

275 
WINAPI
 
	$WöMaö
(
HINSTANCE
 
hIn°
, HINSTANCE 
hPªvIn°
, 
PSTR
 
cmd
, 
showmode
)

277 *
¨gs
[1024];

278 **
¨gv
 = 
¨gs
;

279 *
p
, *
q
, *
bg°r
 = 
NULL
;

280 
¨gc
 = 0;

281 
rc
, 
Æí
, 
Êí
;

282 
îr‹
 = 0;

283 
timög
 = 
FALSE
;

284 
have_bg
 = 
FALSE
;

285 
LUT_exp⁄ít
;

286 
CRT_exp⁄ít
 = 2.2;

287 
deÁu…_di•œy_exp⁄ít
;

288 
MSG
 
msg
;

295 
globÆ_hIn°
 = 
hIn°
;

296 
globÆ_showmode
 = 
showmode
;

297 
fûíame
 = (*)
NULL
;

298 
	`mem£t
(&
Ωng2_öfo
, 0, (
maö¥og_öfo
));

300 #i‚de‡
__CYGWIN__


306 
	`AŒocC⁄sﬁe
();

307 
	`‰e›í
("CONOUT$", "a", 
°dîr
);

308 
	`‰e›í
("CONOUT$", "a", 
°dout
);

318 #i‡
	`deföed
(
NeXT
)

320 
LUT_exp⁄ít
 = 1.0 / 2.2;

325 #ñi‡
	`deföed
(
sgi
)

326 
LUT_exp⁄ít
 = 1.0 / 1.7;

329 
öfûe
 = 
	`f›í
("/etc/config/system.glGammaVal", "r");

330 i‡(
öfûe
) {

331 
sgi_gamma
;

333 
	`fgës
(
tm∂öe
, 80, 
öfûe
);

334 
	`f˛o£
(
öfûe
);

335 
sgi_gamma
 = 
	`©of
(
tm∂öe
);

336 i‡(
sgi_gamma
 > 0.0)

337 
LUT_exp⁄ít
 = 1.0 / 
sgi_gamma
;

339 #ñi‡
	`deföed
(
Macötosh
)

340 
LUT_exp⁄ít
 = 1.8 / 2.61;

346 
LUT_exp⁄ít
 = 1.0;

350 
deÁu…_di•œy_exp⁄ít
 = 
LUT_exp⁄ít
 * 
CRT_exp⁄ít
;

358 i‡((
p
 = 
	`gëív
("SCREEN_GAMMA")Ë!
NULL
)

359 
Ωng2_öfo
.
di•œy_exp⁄ít
 = 
	`©of
(
p
);

361 
Ωng2_öfo
.
di•œy_exp⁄ít
 = 
deÁu…_di•œy_exp⁄ít
;

368 
¨gv
[
¨gc
++] = 
PROGNAME
;

369 
p
 = 
cmd
;

371 i‡(*
p
 == ' ')

372 *++
p
 == ' ')

375 i‡(*
p
 == '\0')

377 
¨gv
[
¨gc
++] = 
q
 = 
p
;

378 *
q
 && *q != ' ')

379 ++
q
;

381 i‡(*
q
 == '\0')

383 *
q
 = '\0';

384 
p
 = 
q
 + 1;

386 
¨gv
[
¨gc
] = 
NULL
;

391 *++
¨gv
 && !
îr‹
) {

392 i‡(!
	`°∫cmp
(*
¨gv
, "-gamma", 2)) {

393 i‡(!*++
¨gv
)

394 ++
îr‹
;

396 
Ωng2_öfo
.
di•œy_exp⁄ít
 = 
	`©of
(*
¨gv
);

397 i‡(
Ωng2_öfo
.
di•œy_exp⁄ít
 <= 0.0)

398 ++
îr‹
;

400 } i‡(!
	`°∫cmp
(*
¨gv
, "-bgcolor", 4)) {

401 i‡(!*++
¨gv
)

402 ++
îr‹
;

404 
bg°r
 = *
¨gv
;

405 i‡(
	`°æí
(
bg°r
) != 7 || bgstr[0] != '#')

406 ++
îr‹
;

408 
have_bg
 = 
TRUE
;

409 
bg_image
 = 
FALSE
;

412 } i‡(!
	`°∫cmp
(*
¨gv
, "-bgpat", 4)) {

413 i‡(!*++
¨gv
)

414 ++
îr‹
;

416 
∑t
 = 
	`©oi
(*
¨gv
) - 1;

417 i‡(
∑t
 < 0 ||Ö© >
num_bg∑t
)

418 ++
îr‹
;

420 
bg_image
 = 
TRUE
;

421 
have_bg
 = 
FALSE
;

424 } i‡(!
	`°∫cmp
(*
¨gv
, "-timing", 2)) {

425 
timög
 = 
TRUE
;

427 i‡(**
¨gv
 != '-') {

428 
fûíame
 = *
¨gv
;

429 i‡(
¨gv
[1])

430 ++
îr‹
;

432 ++
îr‹
;

436 i‡(!
fûíame
)

437 ++
îr‹
;

442 i‡(
îr‹
) {

443 #i‚de‡
__CYGWIN__


444 
ch
;

447 
	`Ârötf
(
°dîr
, "\n%†%s: %s\n\n", 
PROGNAME
, 
VERSION
, 
≠≤ame
);

448 
	`ªad≤g2_vîsi⁄_öfo
();

449 
	`Ârötf
(
°dîr
, "\n"

464 #i‚de‡
__CYGWIN__


469 
PROGNAME
,

470 #i‡(
	`deföed
(
__i386__
Ë|| deföed(
_M_IX86
Ë|| deföed(
__x86_64__
)) && \

471 !(
	`deföed
(
__CYGWIN__
Ë|| deföed(
__MINGW32__
))

472 ()
	`°æí
(
PROGNAME
), " ",

474 ()
	`°æí
(
PROGNAME
), " ", 
deÁu…_di•œy_exp⁄ít
, 
num_bg∑t
);

475 
	`fÊush
(
°dîr
);

476 #i‚de‡
__CYGWIN__


478 
ch
 = 
	`_gëch
();

479 
ch
 != 'q' && ch != 'Q' && ch != 0x1B);

481 
	`exô
(1);

485 i‡(!(
öfûe
 = 
	`f›í
(
fûíame
, "rb"))) {

486 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": c™'à›í PNG fûê[%s]\n", 
fûíame
);

487 ++
îr‹
;

489 
öcou¡
 = 
	`‰ód
(
öbuf
, 1, 
INBUFSIZE
, 
öfûe
);

490 i‡(
öcou¡
 < 8 || !
	`ªad≤g2_check_sig
(
öbuf
, 8)) {

491 
	`Ârötf
(
°dîr
, 
PROGNAME


493 
fûíame
);

494 ++
îr‹
;

495 } i‡((
rc
 = 
	`ªad≤g2_öô
(&
Ωng2_öfo
)) != 0) {

496 
rc
) {

498 
	`Ârötf
(
°dîr
, 
PROGNAME


499 ": [%s] ha†bad IHDR (lib≤gÜ⁄gjmp)\n", 
fûíame
);

502 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": insufficient memory\n");

505 
	`Ârötf
(
°dîr
, 
PROGNAME


509 ++
îr‹
;

511 i‡(
îr‹
)

512 
	`f˛o£
(
öfûe
);

516 i‡(
îr‹
) {

517 #i‚de‡
__CYGWIN__


518 
ch
;

521 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":áborting.\n");

522 #i‚de‡
__CYGWIN__


524 
ch
 = 
	`_gëch
();

525 
ch
 != 'q' && ch != 'Q' && ch != 0x1B);

527 
	`exô
(2);

529 
	`Ârötf
(
°dîr
, "\n%†%s: %s\n", 
PROGNAME
, 
VERSION
, 
≠≤ame
);

530 #i‚de‡
__CYGWIN__


531 
	`Ârötf
(
°dîr
,

533 
PROGNAME
);

535 
	`fÊush
(
°dîr
);

541 
Æí
 = 
	`°æí
(
≠≤ame
);

542 
Êí
 = 
	`°æí
(
fûíame
);

543 i‡(
Æí
 + 
Êí
 + 3 > 1023)

544 
	`•rötf
(
tôÀb¨
, "%s: ...%s", 
≠≤ame
, 
fûíame
+(
Æí
+
Êí
+6-1023));

546 
	`•rötf
(
tôÀb¨
, "%s: %s", 
≠≤ame
, 
fûíame
);

551 i‡(
have_bg
) {

552 
r
, 
g
, 
b
;

554 
	`ssˇnf
(
bg°r
+1, "%2x%2x%2x", &
r
, &
g
, &
b
);

555 
Ωng2_öfo
.
bg_ªd
 = (
uch
)
r
;

556 
Ωng2_öfo
.
bg_gªí
 = (
uch
)
g
;

557 
Ωng2_öfo
.
bg_blue
 = (
uch
)
b
;

559 
Ωng2_öfo
.
√ed_bgcﬁ‹
 = 
TRUE
;

561 
Ωng2_öfo
.
°©e
 = 
kPªInô
;

562 
Ωng2_öfo
.
maö¥og_öô
 = 
Ωng2_wö_öô
;

563 
Ωng2_öfo
.
maö¥og_di•œy_row
 = 
Ωng2_wö_di•œy_row
;

564 
Ωng2_öfo
.
maö¥og_föish_di•œy
 = 
Ωng2_wö_föish_di•œy
;

577 
	`Tø˚
((
°dîr
, "aboutÅo callÑeadpng2_decode_data()\n"))

578 i‡(
	`ªad≤g2_decode_d©a
(&
Ωng2_öfo
, 
öbuf
, 
öcou¡
))

579 ++
îr‹
;

580 
	`Tø˚
((
°dîr
, "done withÑeadpng2_decode_data()\n"))

582 i‡(
îr‹
 || 
öcou¡
 !
INBUFSIZE
 || 
Ωng2_öfo
.
°©e
 =
kD⁄e
) {

583 i‡(
Ωng2_öfo
.
°©e
 =
kD⁄e
) {

584 
	`Tø˚
((
°dîr
, "done decoding PNG image\n"))

585 } i‡(
	`„º‹
(
öfûe
)) {

586 
	`Ârötf
(
°dîr
, 
PROGNAME


588 
	`exô
(3);

589 } i‡(
	`„of
(
öfûe
)) {

590 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":Énd of fileÑeached "

592 
	`exô
(3);

599 i‡(
timög
)

600 
	`SÀï
(1000L);

602 
öcou¡
 = 
	`‰ód
(
öbuf
, 1, 
INBUFSIZE
, 
öfûe
);

608 
	`f˛o£
(
öfûe
);

609 
	`Tø˚
((
°dîr
, "aboutÅo callÑeadpng2_cleanup()\n"))

610 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

612 i‡(
îr‹
) {

613 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":ÜibpngÉrror while decoding PNG image\n");

614 
	`exô
(3);

620 
	`GëMesßge
(&
msg
, 
NULL
, 0, 0)) {

621 
	`Tøn¶©eMesßge
(&
msg
);

622 
	`Di•©chMesßge
(&
msg
);

628 
	`Tø˚
((
°dîr
, "aboutÅo callÑpng2_win_cleanup()\n"))

629 
	`Ωng2_wö_˛ónup
();

631  
msg
.
wP¨am
;

632 
	}
}

642 
	$Ωng2_wö_öô
()

644 
ulg
 
i
;

645 
ulg
 
rowbyãs
 = 
Ωng2_öfo
.rowbytes;

647 
	`Tø˚
((
°dîr
, "beginningÑpng2_win_init()\n"))

648 
	`Tø˚
((
°dîr
, "Ñowbyã†%d\n", 
Ωng2_öfo
.
rowbyãs
))

649 
	`Tø˚
((
°dîr
, " width = %ld\n", 
Ωng2_öfo
.
width
))

650 
	`Tø˚
((
°dîr
, " heighà%ld\n", 
Ωng2_öfo
.
height
))

653 i‡(
Ωng2_öfo
.
height
 > ((
size_t
)(-1))/
rowbyãs
) {

654 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": image_data buffer would beÅooÜarge\n",

655 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

659 
Ωng2_öfo
.
image_d©a
 = (
uch
 *)
	`mÆloc
(
rowbyãs
 *Ñ≤g2_öfo.
height
);

660 i‡(!
Ωng2_öfo
.
image_d©a
) {

661 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

665 
Ωng2_öfo
.
row_poöãrs
 = (
uch
 **)
	`mÆloc
‘≤g2_öfo.
height
 * (uch *));

666 i‡(!
Ωng2_öfo
.
row_poöãrs
) {

667 
	`‰ì
(
Ωng2_öfo
.
image_d©a
);

668 
Ωng2_öfo
.
image_d©a
 = 
NULL
;

669 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

673 
i
 = 0; i < 
Ωng2_öfo
.
height
; ++i)

674 
Ωng2_öfo
.
row_poöãrs
[
i
] =Ñ≤g2_öfo.
image_d©a
 + i*
rowbyãs
;

681 i‡(
	`Ωng2_wö_¸óã_wödow
()) {

682 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

686 
Ωng2_öfo
.
°©e
 = 
kWödowInô
;

687 
	}
}

693 
	$Ωng2_wö_¸óã_wödow
()

695 
uch
 
bg_ªd
 = 
Ωng2_öfo
.bg_red;

696 
uch
 
bg_gªí
 = 
Ωng2_öfo
.bg_green;

697 
uch
 
bg_blue
 = 
Ωng2_öfo
.bg_blue;

698 
uch
 *
de°
;

699 
exåa_width
, 
exåa_height
;

700 
ulg
 
i
, 
j
;

701 
WNDCLASSEX
 
wnd˛ass
;

702 
RECT
 
ª˘
;

710 
wimage_rowbyãs
 = ((3*
Ωng2_öfo
.
width
 + 3L) >> 2) << 2;

712 i‡(!(
dib
 = (
uch
 *)
	`mÆloc
((
BITMAPINFOHEADER
) +

713 
wimage_rowbyãs
*
Ωng2_öfo
.
height
)))

725 
	`mem£t
(
dib
, 0, (
BITMAPINFOHEADER
));

726 
bmih
 = (
BITMAPINFOHEADER
 *)
dib
;

727 
bmih
->
biSize
 = (
BITMAPINFOHEADER
);

728 
bmih
->
biWidth
 = 
Ωng2_öfo
.
width
;

729 
bmih
->
biHeight
 = -(()
Ωng2_öfo
.
height
);

730 
bmih
->
biPœ√s
 = 1;

731 
bmih
->
biBôCou¡
 = 24;

732 
bmih
->
biCom¥essi⁄
 = 0;

733 
wimage_d©a
 = 
dib
 + (
BITMAPINFOHEADER
);

741 i‡(
bg_image
) {

742 
	`mem£t
(
wimage_d©a
, 0, 
wimage_rowbyãs
*
Ωng2_öfo
.
height
);

744 
j
 = 0; j < 
Ωng2_öfo
.
height
; ++j) {

745 
de°
 = 
wimage_d©a
 + 
j
*
wimage_rowbyãs
;

746 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

747 *
de°
++ = 
bg_blue
;

748 *
de°
++ = 
bg_gªí
;

749 *
de°
++ = 
bg_ªd
;

758 
	`mem£t
(&
wnd˛ass
, 0, (wndclass));

760 
wnd˛ass
.
cbSize
 = (wndclass);

761 
wnd˛ass
.
°yÀ
 = 
CS_HREDRAW
 | 
CS_VREDRAW
;

762 
wnd˛ass
.
Õ‚WndProc
 = 
Ωng2_wö_wnd¥oc
;

763 
wnd˛ass
.
hIn°™˚
 = 
globÆ_hIn°
;

764 
wnd˛ass
.
hIc⁄
 = 
	`LﬂdIc⁄
(
NULL
, 
IDI_APPLICATION
);

765 
wnd˛ass
.
hCurs‹
 = 
	`LﬂdCurs‹
(
NULL
, 
IDC_ARROW
);

766 
wnd˛ass
.
hbrBackground
 = (
HBRUSH
)
	`GëStockObje˘
(
DKGRAY_BRUSH
);

767 
wnd˛ass
.
ÕszMíuName
 = 
NULL
;

768 
wnd˛ass
.
ÕszCœssName
 = 
¥og«me
;

769 
wnd˛ass
.
hIc⁄Sm
 = 
	`LﬂdIc⁄
(
NULL
, 
IDI_APPLICATION
);

771 
	`Regi°îCœssEx
(&
wnd˛ass
);

777 
exåa_width
 = 2*(
	`GëSy°emMërics
(
SM_CXBORDER
) +

778 
	`GëSy°emMërics
(
SM_CXDLGFRAME
));

779 
exåa_height
 = 2*(
	`GëSy°emMërics
(
SM_CYBORDER
) +

780 
	`GëSy°emMërics
(
SM_CYDLGFRAME
)) +

781 
	`GëSy°emMërics
(
SM_CYCAPTION
);

783 
globÆ_hwnd
 = 
	`Cª©eWödow
(
¥og«me
, 
tôÀb¨
, 
WS_OVERLAPPEDWINDOW
,

784 
CW_USEDEFAULT
, CW_USEDEFAULT, 
Ωng2_öfo
.
width
+
exåa_width
,

785 
Ωng2_öfo
.
height
+
exåa_height
, 
NULL
, NULL, 
globÆ_hIn°
, NULL);

787 
	`ShowWödow
(
globÆ_hwnd
, 
globÆ_showmode
);

788 
	`Upd©eWödow
(
globÆ_hwnd
);

795 i‡(
bg_image
) {

796 c⁄° *
msg
 = "Computing background image...";

797 
x
, 
y
, 
Àn
 = 
	`°æí
(
msg
);

798 
HDC
 
hdc
 = 
	`GëDC
(
globÆ_hwnd
);

799 
TEXTMETRIC
 
tm
;

801 
	`GëTextMërics
(
hdc
, &
tm
);

802 
x
 = (
Ωng2_öfo
.
width
 - 
Àn
*
tm
.
tmAveCh¨Width
)/2;

803 
y
 = (
Ωng2_öfo
.
height
 - 
tm
.
tmHeight
)/2;

804 
	`SëBkMode
(
hdc
, 
TRANSPARENT
);

805 
	`SëTextCﬁ‹
(
hdc
, 
	`GëSysCﬁ‹
(
COLOR_HIGHLIGHTTEXT
));

807 
	`TextOut
(
hdc
, ((
x
 < 0)? 0 : x), ((
y
 < 0)? 0 : y), 
msg
, 
Àn
);

808 
	`Rñó£DC
(
globÆ_hwnd
, 
hdc
);

810 
	`Ωng2_wö_lﬂd_bg_image
();

813 i‡(!
bg_image
) {

814 
j
 = 0; j < 
Ωng2_öfo
.
height
; ++j) {

815 
de°
 = 
wimage_d©a
 + 
j
*
wimage_rowbyãs
;

816 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

817 *
de°
++ = 
bg_blue
;

818 *
de°
++ = 
bg_gªí
;

819 *
de°
++ = 
bg_ªd
;

824 
ª˘
.
À·
 = 0L;

825 
ª˘
.
t›
 = 0L;

826 
ª˘
.
right
 = (
LONG
)
Ωng2_öfo
.
width
;

827 
ª˘
.
bŸtom
 = (
LONG
)
Ωng2_öfo
.
height
;

828 
	`InvÆid©eRe˘
(
globÆ_hwnd
, &
ª˘
, 
FALSE
);

829 
	`Upd©eWödow
(
globÆ_hwnd
);

833 
	}
}

839 
	$Ωng2_wö_lﬂd_bg_image
()

841 
uch
 *
§c
, *
de°
;

842 
uch
 
r1
, 
r2
, 
g1
, 
g2
, 
b1
, 
b2
;

843 
uch
 
r1_öv
, 
r2_öv
, 
g1_öv
, 
g2_öv
, 
b1_öv
, 
b2_öv
;

844 
k
, 
hmax
, 
max
;

845 
xidx
, 
yidx
, 
yidx_max
 = (
bgsˇÀ
-1);

846 
eví_odd_vît
, 
eví_odd_h‹iz
, 
eví_odd
;

847 
övît_gødõ¡2
 = (
bg
[
∑t
].
ty≥
 & 0x08);

848 
övît_cﬁumn
;

849 
ulg
 
i
, 
row
;

856 
bg_rowbyãs
 = 3 * 
Ωng2_öfo
.
width
;

857 
bg_d©a
 = (
uch
 *)
	`mÆloc
(
bg_rowbyãs
 * 
Ωng2_öfo
.
height
);

858 i‡(!
bg_d©a
) {

859 
	`Ârötf
(
°dîr
, 
PROGNAME


861 
bg_image
 = 0;

870 i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 0) {

871 
uch
 
r1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
r
;

872 
uch
 
g1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
g
;

873 
uch
 
b1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
b
;

874 
uch
 
r2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
r
;

875 
uch
 
g2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
g
;

876 
uch
 
b2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
b
;

877 
r1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
r
 - 
r1_mö
;

878 
g1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
g
 - 
g1_mö
;

879 
b1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
b
 - 
b1_mö
;

880 
r2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
r
 - 
r2_mö
;

881 
g2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
g
 - 
g2_mö
;

882 
b2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
b
 - 
b2_mö
;

884 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

885 
yidx
 = 
row
 % 
bgsˇÀ
;

886 
eví_odd_vît
 = (
row
 / 
bgsˇÀ
) & 1;

888 
r1
 = 
r1_mö
 + (
r1_diff
 * 
yidx
Ë/ 
yidx_max
;

889 
g1
 = 
g1_mö
 + (
g1_diff
 * 
yidx
Ë/ 
yidx_max
;

890 
b1
 = 
b1_mö
 + (
b1_diff
 * 
yidx
Ë/ 
yidx_max
;

891 
r1_öv
 = 
r1_mö
 + (
r1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

892 
g1_öv
 = 
g1_mö
 + (
g1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

893 
b1_öv
 = 
b1_mö
 + (
b1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

895 
r2
 = 
r2_mö
 + (
r2_diff
 * 
yidx
Ë/ 
yidx_max
;

896 
g2
 = 
g2_mö
 + (
g2_diff
 * 
yidx
Ë/ 
yidx_max
;

897 
b2
 = 
b2_mö
 + (
b2_diff
 * 
yidx
Ë/ 
yidx_max
;

898 
r2_öv
 = 
r2_mö
 + (
r2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

899 
g2_öv
 = 
g2_mö
 + (
g2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

900 
b2_öv
 = 
b2_mö
 + (
b2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

902 
de°
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

903 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

904 
eví_odd_h‹iz
 = (
i
 / 
bgsˇÀ
) & 1;

905 
eví_odd
 = 
eví_odd_vît
 ^ 
eví_odd_h‹iz
;

906 
övît_cﬁumn
 =

907 (
eví_odd_h‹iz
 && (
bg
[
∑t
].
ty≥
 & 0x10));

908 i‡(
eví_odd
 == 0) {

909 i‡(
övît_cﬁumn
) {

910 *
de°
++ = 
r1_öv
;

911 *
de°
++ = 
g1_öv
;

912 *
de°
++ = 
b1_öv
;

914 *
de°
++ = 
r1
;

915 *
de°
++ = 
g1
;

916 *
de°
++ = 
b1
;

919 i‡((
övît_cﬁumn
 && 
övît_gødõ¡2
) ||

920 (!
övît_cﬁumn
 && !
övît_gødõ¡2
))

922 *
de°
++ = 
r2
;

923 *
de°
++ = 
g2
;

924 *
de°
++ = 
b2
;

926 *
de°
++ = 
r2_öv
;

927 *
de°
++ = 
g2_öv
;

928 *
de°
++ = 
b2_öv
;

939 } i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 1) {

941 
hmax
 = (
bgsˇÀ
-1)/2;

942 
max
 = 2*
hmax
;

944 
r1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
r
;

945 
g1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
g
;

946 
b1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
b
;

947 
r2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
r
;

948 
g2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
g
;

949 
b2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
b
;

951 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

952 
yidx
 = 
row
 % 
bgsˇÀ
;

953 i‡(
yidx
 > 
hmax
)

954 
yidx
 = 
bgsˇÀ
-1 - yidx;

955 
de°
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

956 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

957 
xidx
 = 
i
 % 
bgsˇÀ
;

958 i‡(
xidx
 > 
hmax
)

959 
xidx
 = 
bgsˇÀ
-1 - xidx;

960 
k
 = 
xidx
 + 
yidx
;

961 *
de°
++ = (
k
*
r1
 + (
max
-k)*
r2
) / max;

962 *
de°
++ = (
k
*
g1
 + (
max
-k)*
g2
) / max;

963 *
de°
++ = (
k
*
b1
 + (
max
-k)*
b2
) / max;

973 } i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 2) {

974 
uch
 
ch
;

975 
ii
, 
x
, 
y
, 
hw
, 
hh
, 
gøy•Ÿ
;

976 
‰eq
, 
rŸ©e
, 
ßtuøã
, 
gøy
, 
öãnsôy
;

977 
™gÀ
=0.0, 
aoff£t
=0.0, 
maxDi°
, 
di°
;

978 
ªd
=0.0, 
gªí
=0.0, 
blue
=0.0, 
hue
, 
s
, 
v
, 
f
, 
p
, 
q
, 
t
;

980 
	`Ârötf
(
°dîr
, "%s: computingÑadial background...",

981 
PROGNAME
);

982 
	`fÊush
(
°dîr
);

984 
hh
 = 
Ωng2_öfo
.
height
 / 2;

985 
hw
 = 
Ωng2_öfo
.
width
 / 2;

994 
™gÀ
 = 
	`CLIP
(angle, 0.0, 360.0);

995 
gøy•Ÿ
 = 
	`CLIP
(
bg
[
∑t
].
bg_gøy
, 1, (
hh
 + 
hw
));

996 
‰eq
 = 
	`MAX
(()
bg
[
∑t
].
bg_‰eq
, 0.0);

997 
ßtuøã
 = ()
bg
[
∑t
].
bg_bßt
 * 0.1;

998 
rŸ©e
 = ()
bg
[
∑t
].
bg_brŸ
 * 0.1;

999 
gøy
 = 0.0;

1000 
öãnsôy
 = 0.0;

1001 
maxDi°
 = ()((
hw
*hwË+ (
hh
*hh));

1003 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1004 
y
 = 
row
 - 
hh
;

1005 
de°
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1006 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

1007 
x
 = 
i
 - 
hw
;

1008 
™gÀ
 = (
x
 =0)? 
PI_2
 : 
	`©™
(()
y
 / ()x);

1009 
gøy
 = ()
	`MAX
(
	`ABS
(
y
), ABS(
x
)Ë/ 
gøy•Ÿ
;

1010 
gøy
 = 
	`MIN
(1.0, gray);

1011 
di°
 = ()((
x
*xË+ (
y
*y)Ë/ 
maxDi°
;

1012 
öãnsôy
 = 
	`cos
((
™gÀ
+(
rŸ©e
*
di°
*
PI
)Ë* 
‰eq
) *

1013 
gøy
 * 
ßtuøã
;

1014 
öãnsôy
 = (
	`MAX
(
	`MIN
(intensity,1.0),-1.0) + 1.0) * 0.5;

1015 
hue
 = (
™gÀ
 + 
PI
Ë* 
INV_PI_360
 + 
aoff£t
;

1016 
s
 = 
gøy
 * (()(
	`ABS
(
x
)+ABS(
y
)Ë/ ()(
hw
 + 
hh
));

1017 
s
 = 
	`MIN
(
	`MAX
(s,0.0), 1.0);

1018 
v
 = 
	`MIN
(
	`MAX
(
öãnsôy
,0.0), 1.0);

1020 i‡(
s
 == 0.0) {

1021 
ch
 = (
uch
)(
v
 * 255.0);

1022 *
de°
++ = 
ch
;

1023 *
de°
++ = 
ch
;

1024 *
de°
++ = 
ch
;

1026 i‡((
hue
 < 0.0) || (hue >= 360.0))

1027 
hue
 -= ((()(hue / 360.0)) * 360.0);

1028 
hue
 /= 60.0;

1029 
ii
 = ()
hue
;

1030 
f
 = 
hue
 - ()
ii
;

1031 
p
 = (1.0 - 
s
Ë* 
v
;

1032 
q
 = (1.0 - (
s
 * 
f
)Ë* 
v
;

1033 
t
 = (1.0 - (
s
 * (1.0 - 
f
))Ë* 
v
;

1034 i‡(
ii
 =0Ë{ 
ªd
 = 
v
; 
gªí
 = 
t
; 
blue
 = 
p
; }

1035 i‡(
ii
 =1Ë{ 
ªd
 = 
q
; 
gªí
 = 
v
; 
blue
 = 
p
; }

1036 i‡(
ii
 =2Ë{ 
ªd
 = 
p
; 
gªí
 = 
v
; 
blue
 = 
t
; }

1037 i‡(
ii
 =3Ë{ 
ªd
 = 
p
; 
gªí
 = 
q
; 
blue
 = 
v
; }

1038 i‡(
ii
 =4Ë{ 
ªd
 = 
t
; 
gªí
 = 
p
; 
blue
 = 
v
; }

1039 i‡(
ii
 =5Ë{ 
ªd
 = 
v
; 
gªí
 = 
p
; 
blue
 = 
q
; }

1040 *
de°
++ = (
uch
)(
ªd
 * 255.0);

1041 *
de°
++ = (
uch
)(
gªí
 * 255.0);

1042 *
de°
++ = (
uch
)(
blue
 * 255.0);

1046 
	`Ârötf
(
°dîr
, "done.\n");

1047 
	`fÊush
(
°dîr
);

1055 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1056 
§c
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1057 
de°
 = 
wimage_d©a
 + 
row
*
wimage_rowbyãs
;

1058 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1059 
r1
 = *
§c
++;

1060 
g1
 = *
§c
++;

1061 
b1
 = *
§c
++;

1062 *
de°
++ = 
b1
;

1063 *
de°
++ = 
g1
;

1064 *
de°
++ = 
r1
;

1070 
	}
}

1076 
	$Ωng2_wö_di•œy_row
(
ulg
 
row
)

1078 
uch
 
bg_ªd
 = 
Ωng2_öfo
.bg_red;

1079 
uch
 
bg_gªí
 = 
Ωng2_öfo
.bg_green;

1080 
uch
 
bg_blue
 = 
Ωng2_öfo
.bg_blue;

1081 
uch
 *
§c
, *
§c2
=
NULL
, *
de°
;

1082 
uch
 
r
, 
g
, 
b
, 
a
;

1083 
ulg
 
i
;

1084 
rows
=0;

1085 
ulg
 
fú°row
;

1093 
	`Tø˚
((
°dîr
, "beginningÑpng2_win_display_row()\n"))

1095 i‡(
rows
 == 0)

1096 
fú°row
 = 
row
;

1098 ++
rows
;

1106 
§c
 = 
Ωng2_öfo
.
image_d©a
 + 
row
*Ωng2_öfo.
rowbyãs
;

1107 i‡(
bg_image
)

1108 
§c2
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1109 
de°
 = 
wimage_d©a
 + 
row
*
wimage_rowbyãs
;

1111 i‡(
Ωng2_öfo
.
ch™√ls
 == 3) {

1112 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1113 
r
 = *
§c
++;

1114 
g
 = *
§c
++;

1115 
b
 = *
§c
++;

1116 *
de°
++ = 
b
;

1117 *
de°
++ = 
g
;

1118 *
de°
++ = 
r
;

1121 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1122 
r
 = *
§c
++;

1123 
g
 = *
§c
++;

1124 
b
 = *
§c
++;

1125 
a
 = *
§c
++;

1126 i‡(
bg_image
) {

1127 
bg_ªd
 = *
§c2
++;

1128 
bg_gªí
 = *
§c2
++;

1129 
bg_blue
 = *
§c2
++;

1131 i‡(
a
 == 255) {

1132 *
de°
++ = 
b
;

1133 *
de°
++ = 
g
;

1134 *
de°
++ = 
r
;

1135 } i‡(
a
 == 0) {

1136 *
de°
++ = 
bg_blue
;

1137 *
de°
++ = 
bg_gªí
;

1138 *
de°
++ = 
bg_ªd
;

1144 
	`Æpha_composôe
(*
de°
++, 
b
, 
a
, 
bg_blue
);

1145 
	`Æpha_composôe
(*
de°
++, 
g
, 
a
, 
bg_gªí
);

1146 
	`Æpha_composôe
(*
de°
++, 
r
, 
a
, 
bg_ªd
);

1156 i‡((
rows
 & 0xfË=0 || 
row
 =
Ωng2_öfo
.
height
-1) {

1157 
RECT
 
ª˘
;

1159 
ª˘
.
À·
 = 0L;

1160 
ª˘
.
t›
 = (
LONG
)
fú°row
;

1161 
ª˘
.
right
 = (
LONG
)
Ωng2_öfo
.
width
;

1162 
ª˘
.
bŸtom
 = (
LONG
)
row
 + 1L;

1163 
	`InvÆid©eRe˘
(
globÆ_hwnd
, &
ª˘
, 
FALSE
);

1164 
	`Upd©eWödow
(
globÆ_hwnd
);

1165 
rows
 = 0;

1168 
	}
}

1174 
	$Ωng2_wö_föish_di•œy
()

1176 
	`Tø˚
((
°dîr
, "beginningÑpng2_win_finish_display()\n"))

1182 
Ωng2_öfo
.
°©e
 = 
kD⁄e
;

1183 
	`¥ötf
(

1184 #i‚de‡
__CYGWIN__


1190 
	`fÊush
(
°dout
);

1191 
	}
}

1197 
	$Ωng2_wö_˛ónup
()

1199 i‡(
bg_image
 && 
bg_d©a
) {

1200 
	`‰ì
(
bg_d©a
);

1201 
bg_d©a
 = 
NULL
;

1204 i‡(
Ωng2_öfo
.
image_d©a
) {

1205 
	`‰ì
(
Ωng2_öfo
.
image_d©a
);

1206 
Ωng2_öfo
.
image_d©a
 = 
NULL
;

1209 i‡(
Ωng2_öfo
.
row_poöãrs
) {

1210 
	`‰ì
(
Ωng2_öfo
.
row_poöãrs
);

1211 
Ωng2_öfo
.
row_poöãrs
 = 
NULL
;

1214 i‡(
dib
) {

1215 
	`‰ì
(
dib
);

1216 
dib
 = 
NULL
;

1218 
	}
}

1224 
LRESULT
 
CALLBACK
 
	$Ωng2_wö_wnd¥oc
(
HWND
 
hwnd
, 
UINT
 
iMsg
, 
WPARAM
 
wP
, 
LPARAM
 
lP
)

1226 
HDC
 
hdc
;

1227 
PAINTSTRUCT
 
ps
;

1228 
rc
;

1230 
iMsg
) {

1231 
WM_CREATE
:

1235 
WM_PAINT
:

1236 
hdc
 = 
	`BegöPaöt
(
hwnd
, &
ps
);

1237 
rc
 = 
	`SåëchDIBôs
(
hdc
, 0, 0, 
Ωng2_öfo
.
width
,Ñ≤g2_öfo.
height
,

1238 0, 0, 
Ωng2_öfo
.
width
,Ñ≤g2_öfo.
height
,

1239 
wimage_d©a
, (
BITMAPINFO
 *)
bmih
,

1240 0, 
SRCCOPY
);

1241 
	`EndPaöt
(
hwnd
, &
ps
);

1245 
WM_CHAR
:

1246 
wP
) {

1250 
	`Po°QuôMesßge
(0);

1254 
WM_LBUTTONDOWN
:

1255 
WM_DESTROY
:

1256 
	`Po°QuôMesßge
(0);

1260  
	`DefWödowProc
(
hwnd
, 
iMsg
, 
wP
, 
lP
);

1261 
	}
}

	@contrib/gregbook/rpng2-x.c

100 
	#PROGNAME
 "Ωng2-x"

	)

101 
	#LONGNAME
 "ProgªssivêPNG Võwî f‹ X"

	)

102 
	#VERSION
 "2.04 o‡15 Ju√ 2014"

	)

103 
	#RESNAME
 "Ωng2"

	)

104 
	#RESCLASS
 "R≤g"

	)

106 
	~<°dio.h
>

107 
	~<°dlib.h
>

108 
	~<˘y≥.h
>

109 
	~<°rög.h
>

110 
	~<£tjmp.h
>

111 
	~<time.h
>

112 
	~<m©h.h
>

113 
	~<X11/Xlib.h
>

114 
	~<X11/Xutû.h
>

115 
	~<X11/Xos.h
>

116 
	~<X11/keysym.h
>

118 #i‡
_POSIX_C_SOURCE
 >= 199309L

119 #unde‡
u¶ìp


120 
	#u¶ìp
(
u£c
) { \

121 
time•ec
 
ts
; \

122 
ts
.
tv_£c
 = 0; \

123 
ts
.
tv_n£c
 = (
u£c
) * 1000; \

124 
	`«no¶ìp
(&
ts
, 
NULL
); }

	)

127 #i‚de‡
u¶ìp


128 
	#u¶ìp
(
x
Ë
	`¶ìp
(((x)+499999)/1000000)

	)

131 #ifde‡
VMS


132 
	~<uni°d.h
>

136 #i‚de‡
PI


137 
	#PI
 3.141592653589793238

	)

139 
	#PI_2
 (
PI
*0.5)

	)

140 
	#INV_PI_360
 (360.0 / 
PI
)

	)

141 
	#MAX
(
a
,
b
Ë◊>b?a:b)

	)

142 
	#MIN
(
a
,
b
Ë◊<b?a:b)

	)

143 
	#CLIP
(
a
,
mö
,
max
Ë
	`MAX
(mö,
	`MIN
(◊),max))

	)

144 
	#ABS
(
a
Ë(◊)<0?-◊):◊))

	)

145 
	#CLIP8P
(
c
Ë
	`MAX
(0,(
	`MIN
((c),255))Ë

	)

146 
	#ROUNDF
(
f
Ë(()(‡+ 0.5))

	)

148 
	#QUIT
(
e
,
k
Ë(”.
ty≥
 =
Buâ⁄Pªss
 &&É.
xbuâ⁄
.
buâ⁄
 =
Buâ⁄1
) || \

149 (
e
.
ty≥
 =
KeyPªss
 && \

150 ((
k
 = 
	`XLookupKeysym
(&
e
.
xkey
, 0)Ë=
XK_q
 || k =
XK_Esˇ≥
)))

	)

152 
	#NO_24BIT_MASKS


	)

154 
	#rgb1_max
 
bg_‰eq


	)

155 
	#rgb1_mö
 
bg_gøy


	)

156 
	#rgb2_max
 
bg_bßt


	)

157 
	#rgb2_mö
 
bg_brŸ


	)

161 
	~"ªad≤g2.h
"

169 
	#Æpha_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) { \

170 
ush
 
ãmp
 = ((ush)(
fg
)*(ush)(
Æpha
) + \

171 (
ush
)(
bg
)*(ush)(255 - (ush)(
Æpha
)) + (ush)128); \

172 (
composôe
Ë(
uch
)((
ãmp
 + (temp >> 8)) >> 8); \

173 }

	)

176 
	#INBUFSIZE
 4096

	)

183 
Ωng2_x_öô
 ();

184 
Ωng2_x_¸óã_wödow
 ();

185 
Ωng2_x_lﬂd_bg_image
 ();

186 
Ωng2_x_di•œy_row
 (
ulg
 
row
);

187 
Ωng2_x_föish_di•œy
 ();

188 
Ωng2_x_ªdi•œy_image
 (
ulg
 
°¨tcﬁ
, ulg 
°¨åow
,

189 
ulg
 
width
, ulg 
height
);

190 #ifde‡
FEATURE_LOOP


191 
Ωng2_x_ªlﬂd_bg_image
 ();

192 
is_numbî
 (*
p
);

194 
Ωng2_x_˛ónup
 ();

195 
Ωng2_x_msb
 (
ulg
 
u32vÆ
);

198 
	gtôÀb¨
[1024], *
	gwödow_«me
 = 
tôÀb¨
;

199 *
	g≠≤ame
 = 
LONGNAME
;

200 *
	gic⁄_«me
 = 
PROGNAME
;

201 *
	gªs_«me
 = 
RESNAME
;

202 *
	gªs_˛ass
 = 
RESCLASS
;

203 *
	gfûíame
;

204 
FILE
 *
	göfûe
;

206 
maö¥og_öfo
 
	gΩng2_öfo
;

208 
uch
 
	göbuf
[
INBUFSIZE
];

209 
	göcou¡
;

211 
	g∑t
 = 6;

212 
	gbg_image
 = 0;

213 
	gbgsˇÀ
, 
	gbgsˇÀ_deÁu…
 = 16;

214 
ulg
 
	gbg_rowbyãs
;

215 
uch
 *
	gbg_d©a
;

217 
	g∑u£_a·î_∑ss
 = 
FALSE
;

218 
	gdemo_timög
 = 
FALSE
;

219 
ulg
 
	gu¶ìp_duøti⁄
 = 0L;

221 
	srgb_cﬁ‹
 {

222 
uch
 
	mr
, 
	mg
, 
	mb
;

223 } 
	grgb
[] = {

263 
	sbackground_∑âîn
 {

264 
ush
 
	mty≥
;

265 
	mrgb1_max
, 
	mrgb1_mö
;

266 
	mrgb2_max
, 
	mrgb2_mö
;

267 } 
	gbg
[] = {

286 
	gnum_bg∑t
 = (
bg
Ë/ (
background_∑âîn
);

290 *
	gdi•œy«me
;

291 
XImage
 *
	gximage
;

292 
Di•œy
 *
	gdi•œy
;

293 
	gdïth
;

294 
VisuÆ
 *
	gvisuÆ
;

295 
XVisuÆInfo
 *
	gvisuÆ_li°
;

296 
	gRShi·
, 
	gGShi·
, 
	gBShi·
;

297 
ulg
 
	gRMask
, 
	gGMask
, 
	gBMask
;

298 
Wödow
 
	gwödow
;

299 
GC
 
	ggc
;

300 
Cﬁ‹m≠
 
	gcﬁ‹m≠
;

302 
	ghave_n⁄deÁu…_visuÆ
 = 
FALSE
;

303 
	ghave_cﬁ‹m≠
 = 
FALSE
;

304 
	ghave_wödow
 = 
FALSE
;

305 
	ghave_gc
 = 
FALSE
;

310 
	$maö
(
¨gc
, **
¨gv
)

312 #ifde‡
sgi


313 
tm∂öe
[80];

315 *
p
, *
bg°r
 = 
NULL
;

316 
rc
, 
Æí
, 
Êí
;

317 
îr‹
 = 0;

318 
timög
 = 
FALSE
;

319 
have_bg
 = 
FALSE
;

320 #ifde‡
FEATURE_LOOP


321 
lo›
 = 
FALSE
;

322 
lo›_öãrvÆ
 = -1;

324 
LUT_exp⁄ít
;

325 
CRT_exp⁄ít
 = 2.2;

326 
deÁu…_di•œy_exp⁄ít
;

327 
XEvít
 
e
;

328 
KeySym
 
k
;

335 
di•œy«me
 = (*)
NULL
;

336 
fûíame
 = (*)
NULL
;

337 
	`mem£t
(&
Ωng2_öfo
, 0, (
maö¥og_öfo
));

346 #i‡
	`deföed
(
NeXT
)

348 
LUT_exp⁄ít
 = 1.0 / 2.2;

353 #ñi‡
	`deföed
(
sgi
)

354 
LUT_exp⁄ít
 = 1.0 / 1.7;

357 
öfûe
 = 
	`f›í
("/etc/config/system.glGammaVal", "r");

358 i‡(
öfûe
) {

359 
sgi_gamma
;

361 
	`fgës
(
tm∂öe
, 80, 
öfûe
);

362 
	`f˛o£
(
öfûe
);

363 
sgi_gamma
 = 
	`©of
(
tm∂öe
);

364 i‡(
sgi_gamma
 > 0.0)

365 
LUT_exp⁄ít
 = 1.0 / 
sgi_gamma
;

367 #ñi‡
	`deföed
(
Macötosh
)

368 
LUT_exp⁄ít
 = 1.8 / 2.61;

374 
LUT_exp⁄ít
 = 1.0;

378 
deÁu…_di•œy_exp⁄ít
 = 
LUT_exp⁄ít
 * 
CRT_exp⁄ít
;

386 i‡((
p
 = 
	`gëív
("SCREEN_GAMMA")Ë!
NULL
)

387 
Ωng2_öfo
.
di•œy_exp⁄ít
 = 
	`©of
(
p
);

389 
Ωng2_öfo
.
di•œy_exp⁄ít
 = 
deÁu…_di•œy_exp⁄ít
;

394 *++
¨gv
 && !
îr‹
) {

395 i‡(!
	`°∫cmp
(*
¨gv
, "-display", 2)) {

396 i‡(!*++
¨gv
)

397 ++
îr‹
;

399 
di•œy«me
 = *
¨gv
;

400 } i‡(!
	`°∫cmp
(*
¨gv
, "-gamma", 2)) {

401 i‡(!*++
¨gv
)

402 ++
îr‹
;

404 
Ωng2_öfo
.
di•œy_exp⁄ít
 = 
	`©of
(*
¨gv
);

405 i‡(
Ωng2_öfo
.
di•œy_exp⁄ít
 <= 0.0)

406 ++
îr‹
;

408 } i‡(!
	`°∫cmp
(*
¨gv
, "-bgcolor", 4)) {

409 i‡(!*++
¨gv
)

410 ++
îr‹
;

412 
bg°r
 = *
¨gv
;

413 i‡(
	`°æí
(
bg°r
) != 7 || bgstr[0] != '#')

414 ++
îr‹
;

416 
have_bg
 = 
TRUE
;

417 
bg_image
 = 
FALSE
;

420 } i‡(!
	`°∫cmp
(*
¨gv
, "-bgpat", 4)) {

421 i‡(!*++
¨gv
)

422 ++
îr‹
;

424 
∑t
 = 
	`©oi
(*
¨gv
);

425 i‡(
∑t
 >0 &&Ö© < 
num_bg∑t
) {

426 
bg_image
 = 
TRUE
;

427 
have_bg
 = 
FALSE
;

429 ++
îr‹
;

431 } i‡(!
	`°∫cmp
(*
¨gv
, "-usleep", 2)) {

432 i‡(!*++
¨gv
)

433 ++
îr‹
;

435 
u¶ìp_duøti⁄
 = (
ulg
)
	`©ﬁ
(*
¨gv
);

436 
demo_timög
 = 
TRUE
;

438 } i‡(!
	`°∫cmp
(*
¨gv
, "-pause", 2)) {

439 
∑u£_a·î_∑ss
 = 
TRUE
;

440 } i‡(!
	`°∫cmp
(*
¨gv
, "-timing", 2)) {

441 
timög
 = 
TRUE
;

442 #ifde‡
FEATURE_LOOP


443 } i‡(!
	`°∫cmp
(*
¨gv
, "-loop", 2)) {

444 
lo›
 = 
TRUE
;

445 i‡(!
¨gv
[1] || !
	`is_numbî
(argv[1]))

446 
lo›_öãrvÆ
 = 2;

448 ++
¨gv
;

449 
lo›_öãrvÆ
 = 
	`©ﬁ
(*
¨gv
);

450 i‡(
lo›_öãrvÆ
 < 0)

451 
lo›_öãrvÆ
 = 2;

452 i‡(
lo›_öãrvÆ
 > 100000)

453 
lo›_öãrvÆ
 = 100000;

457 i‡(**
¨gv
 != '-') {

458 
fûíame
 = *
¨gv
;

459 i‡(
¨gv
[1])

460 ++
îr‹
;

462 ++
îr‹
;

466 i‡(!
fûíame
)

467 ++
îr‹
;

472 i‡(
îr‹
) {

473 
	`Ârötf
(
°dîr
, "\n%†%s: %s\n\n", 
PROGNAME
, 
VERSION
, 
≠≤ame
);

474 
	`ªad≤g2_vîsi⁄_öfo
();

475 
	`Ârötf
(
°dîr
, "\n"

477 
	`Ârötf
(
°dîr
,

480 
PROGNAME
, ()
	`°æí
(PROGNAME), " ");

481 
	`Ârötf
(
°dîr
,

482 #ifde‡
FEATURE_LOOP


486 
	`Ârötf
(
°dîr
,

491 
deÁu…_di•œy_exp⁄ít
);

492 
	`Ârötf
(
°dîr
,

499 
num_bg∑t
-1);

500 #ifde‡
FEATURE_LOOP


501 
	`Ârötf
(
°dîr
,

506 
	`Ârötf
(
°dîr
,

514 
	`exô
(1);

517 i‡(!(
öfûe
 = 
	`f›í
(
fûíame
, "rb"))) {

518 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": c™'à›í PNG fûê[%s]\n", 
fûíame
);

519 ++
îr‹
;

521 
öcou¡
 = 
	`‰ód
(
öbuf
, 1, 
INBUFSIZE
, 
öfûe
);

522 i‡(
öcou¡
 < 8 || !
	`ªad≤g2_check_sig
(
öbuf
, 8)) {

523 
	`Ârötf
(
°dîr
, 
PROGNAME


525 
fûíame
);

526 ++
îr‹
;

527 } i‡((
rc
 = 
	`ªad≤g2_öô
(&
Ωng2_öfo
)) != 0) {

528 
rc
) {

530 
	`Ârötf
(
°dîr
, 
PROGNAME


531 ": [%s] ha†bad IHDR (lib≤gÜ⁄gjmp)\n", 
fûíame
);

534 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": insufficient memory\n");

537 
	`Ârötf
(
°dîr
, 
PROGNAME


541 ++
îr‹
;

543 
	`Tø˚
((
°dîr
, "aboutÅo call XOpenDisplay()\n"))

544 
di•œy
 = 
	`XO≥nDi•œy
(
di•œy«me
);

545 i‡(!
di•œy
) {

546 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

547 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": can't open X display [%s]\n",

548 
di•œy«me
? displayname : "default");

549 ++
îr‹
;

552 i‡(
îr‹
)

553 
	`f˛o£
(
öfûe
);

557 i‡(
îr‹
) {

558 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":áborting.\n");

559 
	`exô
(2);

565 
Æí
 = 
	`°æí
(
≠≤ame
);

566 
Êí
 = 
	`°æí
(
fûíame
);

567 i‡(
Æí
 + 
Êí
 + 3 > 1023)

568 
	`•rötf
(
tôÀb¨
, "%s: ...%s", 
≠≤ame
, 
fûíame
+(
Æí
+
Êí
+6-1023));

570 
	`•rötf
(
tôÀb¨
, "%s: %s", 
≠≤ame
, 
fûíame
);

575 i‡(
have_bg
) {

576 
r
, 
g
, 
b
;

578 
	`ssˇnf
(
bg°r
+1, "%2x%2x%2x", &
r
, &
g
, &
b
);

579 
Ωng2_öfo
.
bg_ªd
 = (
uch
)
r
;

580 
Ωng2_öfo
.
bg_gªí
 = (
uch
)
g
;

581 
Ωng2_öfo
.
bg_blue
 = (
uch
)
b
;

583 
Ωng2_öfo
.
√ed_bgcﬁ‹
 = 
TRUE
;

585 
Ωng2_öfo
.
°©e
 = 
kPªInô
;

586 
Ωng2_öfo
.
maö¥og_öô
 = 
Ωng2_x_öô
;

587 
Ωng2_öfo
.
maö¥og_di•œy_row
 = 
Ωng2_x_di•œy_row
;

588 
Ωng2_öfo
.
maö¥og_föish_di•œy
 = 
Ωng2_x_föish_di•œy
;

601 
	`Tø˚
((
°dîr
, "aboutÅo callÑeadpng2_decode_data()\n"))

602 i‡(
	`ªad≤g2_decode_d©a
(&
Ωng2_öfo
, 
öbuf
, 
öcou¡
))

603 ++
îr‹
;

604 
	`Tø˚
((
°dîr
, "done withÑeadpng2_decode_data()\n"))

606 i‡(
îr‹
 || 
öcou¡
 !
INBUFSIZE
 || 
Ωng2_öfo
.
°©e
 =
kD⁄e
) {

607 i‡(
Ωng2_öfo
.
°©e
 =
kD⁄e
) {

608 
	`Tø˚
((
°dîr
, "done decoding PNG image\n"))

609 } i‡(
	`„º‹
(
öfûe
)) {

610 
	`Ârötf
(
°dîr
, 
PROGNAME


612 
	`exô
(3);

613 } i‡(
	`„of
(
öfûe
)) {

614 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":Énd of fileÑeached "

616 
	`exô
(3);

623 i‡(
timög
)

624 
	`¶ìp
(1);

626 
öcou¡
 = 
	`‰ód
(
öbuf
, 1, 
INBUFSIZE
, 
öfûe
);

632 
	`f˛o£
(
öfûe
);

633 
	`Tø˚
((
°dîr
, "aboutÅo callÑeadpng2_cleanup()\n"))

634 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

636 i‡(
îr‹
) {

637 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":ÜibpngÉrror while decoding PNG image\n");

638 
	`exô
(3);

642 #ifde‡
FEATURE_LOOP


644 i‡(
lo›
 && 
bg_image
) {

645 
	`Tø˚
((
°dîr
, "entering -loopÜoop (FEATURE_LOOP)\n"))

647 
i
, 
u£_¶ìp
;

648 
timevÆ
 
now
, 
thí
;

651 i‡(
	`gëtimeofday
(&
thí
, 
NULL
) == 0) {

652 
thí
.
tv_£c
 +
lo›_öãrvÆ
;

653 
u£_¶ìp
 = 
FALSE
;

655 
u£_¶ìp
 = 
TRUE
;

659 i‡(
	`XCheckMaskEvít
(
di•œy
, 
KeyPªssMask
 | 
Buâ⁄PªssMask
, &
e
))

660 i‡(
	`QUIT
(
e
,
k
))

664 i‡(++
∑t
 >
num_bg∑t
)

665 
∑t
 = 0;

666 
	`Ωng2_x_ªlﬂd_bg_image
();

669 i‡(
u£_¶ìp
 || 
	`gëtimeofday
(&
now
, 
NULL
) != 0) {

670 
i
 = 
lo›_öãrvÆ
; i > 0; --i) {

671 
	`¶ìp
(1);

673 i‡(
	`XCheckMaskEvít
(
di•œy
, 
KeyPªssMask
 | 
Buâ⁄PªssMask
,

674 &
e
Ë&& 
	`QUIT
”,
k
))

679 i‡(
now
.
tv_£c
 < 
thí
.tv_sec ||

680 (
now
.
tv_£c
 =
thí
.tv_£¯&&Çow.
tv_u£c
 <Åhen.tv_usec))

682 
quô
 = 
FALSE
;

683 
£c⁄ds_to_go
 = 
thí
.
tv_£c
 - 
now
.tv_sec;

684 
u¶ìp_u£c
;

691 
£c⁄ds_to_go
-- > 1) {

692 
£c⁄ds_d⁄e
 = 0;

694 
i
 = 
£c⁄ds_to_go
; i > 0 && !
quô
; --i) {

695 
	`¶ìp
(1);

697 i‡(
	`XCheckMaskEvít
(
di•œy
, 
KeyPªssMask
 |

698 
Buâ⁄PªssMask
, &
e
Ë&& 
	`QUIT
”,
k
))

699 
quô
 = 
TRUE
;

700 i‡(++
£c⁄ds_d⁄e
 > 1000)

703 i‡(
quô
)

708 i‡(
	`gëtimeofday
(&
now
, 
NULL
) == 0) {

709 i‡(
now
.
tv_£c
 >
thí
.tv_sec)

711 
£c⁄ds_to_go
 = 
thí
.
tv_£c
 - 
now
.tv_sec;

713 ++
£c⁄ds_to_go
;

715 i‡(
quô
)

721 i‡(
	`gëtimeofday
(&
now
, 
NULL
) == 0) {

722 
u¶ìp_u£c
 = 1000000L*(
thí
.
tv_£c
 - 
now
.tv_sec) +

723 
thí
.
tv_u£c
 - 
now
.tv_usec;

724 i‡(
u¶ìp_u£c
 > 0)

725 
	`u¶ìp
((
ulg
)
u¶ìp_u£c
);

732 
	`Ωng2_x_ªdi•œy_image
 (0, 0, 
Ωng2_öfo
.
width
,Ñ≤g2_öfo.
height
);

741 i‡(
Ωng2_öfo
.
°©e
 >
kWödowInô
) {

742 
	`Tø˚
((
°dîr
, "entering final wait-for-quit-eventÜoop\n"))

744 
	`XNextEvít
(
di•œy
, &
e
);

745 i‡(
e
.
ty≥
 =
Expo£
) {

746 
XExpo£Evít
 *
ex
 = (XExpo£Evíà*)&
e
;

747 
	`Ωng2_x_ªdi•œy_image
 (
ex
->
x
,Éx->
y
,Éx->
width
,Éx->
height
);

749 } !
	`QUIT
(
e
,
k
));

751 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": init callbackÇever called:Örobable "

753 
	`exô
(4);

759 
	`Tø˚
((
°dîr
, "aboutÅo callÑpng2_x_cleanup()\n"))

760 
	`Ωng2_x_˛ónup
();

762 ()
¨gc
;

765 
	}
}

775 
	$Ωng2_x_öô
()

777 
ulg
 
i
;

778 
ulg
 
rowbyãs
 = 
Ωng2_öfo
.rowbytes;

780 
	`Tø˚
((
°dîr
, "beginningÑpng2_x_init()\n"))

781 
	`Tø˚
((
°dîr
, "Ñowbyã†%d\n", 
Ωng2_öfo
.
rowbyãs
))

782 
	`Tø˚
((
°dîr
, " width = %ld\n", 
Ωng2_öfo
.
width
))

783 
	`Tø˚
((
°dîr
, " heighà%ld\n", 
Ωng2_öfo
.
height
))

786 i‡(
Ωng2_öfo
.
height
 > ((
size_t
)(-1))/Ωng2_öfo.
rowbyãs
) {

787 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": image_data buffer would beÅooÜarge\n");

788 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

792 
Ωng2_öfo
.
image_d©a
 = (
uch
 *)
	`mÆloc
(
rowbyãs
 *Ñ≤g2_öfo.
height
);

793 i‡(!
Ωng2_öfo
.
image_d©a
) {

794 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

798 
Ωng2_öfo
.
row_poöãrs
 = (
uch
 **)
	`mÆloc
‘≤g2_öfo.
height
 * (uch *));

799 i‡(!
Ωng2_öfo
.
row_poöãrs
) {

800 
	`‰ì
(
Ωng2_öfo
.
image_d©a
);

801 
Ωng2_öfo
.
image_d©a
 = 
NULL
;

802 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

806 
i
 = 0; i < 
Ωng2_öfo
.
height
; ++i)

807 
Ωng2_öfo
.
row_poöãrs
[
i
] =Ñ≤g2_öfo.
image_d©a
 + i*
rowbyãs
;

814 i‡(
	`Ωng2_x_¸óã_wödow
()) {

822 
	`ªad≤g2_˛ónup
(&
Ωng2_öfo
);

823 
	`Ωng2_x_˛ónup
();

824 
	`exô
(2);

827 
Ωng2_öfo
.
°©e
 = 
kWödowInô
;

828 
	}
}

834 
	$Ωng2_x_¸óã_wödow
()

836 
ulg
 
bg_ªd
 = 
Ωng2_öfo
.bg_red;

837 
ulg
 
bg_gªí
 = 
Ωng2_öfo
.bg_green;

838 
ulg
 
bg_blue
 = 
Ωng2_öfo
.bg_blue;

839 
ulg
 
bg_pixñ
 = 0L;

840 
ulg
 
©åmask
;

841 
√ed_cﬁ‹m≠
 = 
FALSE
;

842 
s¸ìn
, 
∑d
;

843 
uch
 *
xd©a
;

844 
Wödow
 
roŸ
;

845 
XEvít
 
e
;

846 
XGCVÆues
 
gcvÆues
;

847 
XSëWödowAâribuãs
 
©å
;

848 
XTextPr›îty
 
wödowName
, *
pWödowName
 = &windowName;

849 
XTextPr›îty
 
ic⁄Name
, *
pIc⁄Name
 = &iconName;

850 
XVisuÆInfo
 
visuÆ_öfo
;

851 
XSizeHöts
 *
size_höts
;

852 
XWMHöts
 *
wm_höts
;

853 
XCœssHöt
 *
˛ass_höts
;

856 
	`Tø˚
((
°dîr
, "beginningÑpng2_x_create_window()\n"))

858 
s¸ìn
 = 
	`DeÁu…S¸ìn
(
di•œy
);

859 
dïth
 = 
	`Di•œyPœ√s
(
di•œy
, 
s¸ìn
);

860 
roŸ
 = 
	`RoŸWödow
(
di•œy
, 
s¸ìn
);

862 #ifde‡
DEBUG


863 
	`XSynchr⁄ize
(
di•œy
, 
True
);

866 i‡(
dïth
 != 16 && depth != 24 && depth != 32) {

867 
visuÆs_m©ched
 = 0;

869 
	`Tø˚
((
°dîr
, "default depth is %d: checking other visuals\n",

870 
dïth
))

873 
visuÆ_öfo
.
s¸ìn
 = screen;

874 
visuÆ_öfo
.
dïth
 = 24;

875 
visuÆ_li°
 = 
	`XGëVisuÆInfo
(
di•œy
,

876 
VisuÆS¸ìnMask
 | 
VisuÆDïthMask
, &
visuÆ_öfo
, &
visuÆs_m©ched
);

877 i‡(
visuÆs_m©ched
 == 0) {

879 
	`Ârötf
(
°dîr
, "default screen depth %dÇot supported,ándÇo"

880 " 24-bô visuÆ†found\n", 
dïth
);

883 
	`Tø˚
((
°dîr
, "XGetVisualInfo()Ñeturned %d 24-bit visuals\n",

884 
visuÆs_m©ched
))

885 
visuÆ
 = 
visuÆ_li°
[0].visual;

886 
dïth
 = 
visuÆ_li°
[0].depth;

892 
have_n⁄deÁu…_visuÆ
 = 
TRUE
;

893 
√ed_cﬁ‹m≠
 = 
TRUE
;

895 
	`XM©chVisuÆInfo
(
di•œy
, 
s¸ìn
, 
dïth
, 
TrueCﬁ‹
, &
visuÆ_öfo
);

896 
visuÆ
 = 
visuÆ_öfo
.visual;

899 
RMask
 = 
visuÆ
->
ªd_mask
;

900 
GMask
 = 
visuÆ
->
gªí_mask
;

901 
BMask
 = 
visuÆ
->
blue_mask
;

904 i‡(
dïth
 =8 || 
√ed_cﬁ‹m≠
) {

905 
cﬁ‹m≠
 = 
	`XCª©eCﬁ‹m≠
(
di•œy
, 
roŸ
, 
visuÆ
, 
AŒocN⁄e
);

906 i‡(!
cﬁ‹m≠
) {

907 
	`Ârötf
(
°dîr
, "XCreateColormap() failed\n");

910 
have_cﬁ‹m≠
 = 
TRUE
;

911 i‡(
dïth
 == 8)

912 
bg_image
 = 
FALSE
;

914 i‡(
dïth
 == 15 || depth == 16) {

915 
RShi·
 = 15 - 
	`Ωng2_x_msb
(
RMask
);

916 
GShi·
 = 15 - 
	`Ωng2_x_msb
(
GMask
);

917 
BShi·
 = 15 - 
	`Ωng2_x_msb
(
BMask
);

918 } i‡(
dïth
 > 16) {

919 
RShi·
 = 
	`Ωng2_x_msb
(
RMask
) - 7;

920 
GShi·
 = 
	`Ωng2_x_msb
(
GMask
) - 7;

921 
BShi·
 = 
	`Ωng2_x_msb
(
BMask
) - 7;

923 i‡(
dïth
 >15 && (
RShi·
 < 0 || 
GShi·
 < 0 || 
BShi·
 < 0)) {

924 
	`Ârötf
(
°dîr
, "rpng2 internalÜogicÉrror:Çegative X shift(s)!\n");

932 
©å
.
backög_°‹e
 = 
Always
;

933 
©å
.
evít_mask
 = 
ExposuªMask
 | 
KeyPªssMask
 | 
Buâ⁄PªssMask
;

934 
©åmask
 = 
CWBackögSt‹e
 | 
CWEvítMask
;

935 i‡(
have_n⁄deÁu…_visuÆ
) {

936 
©å
.
cﬁ‹m≠
 = colormap;

937 
©å
.
background_pixñ
 = 0;

938 
©å
.
b‹dî_pixñ
 = 1;

939 
©åmask
 |
CWCﬁ‹m≠
 | 
CWBackPixñ
 | 
CWB‹dîPixñ
;

942 
wödow
 = 
	`XCª©eWödow
(
di•œy
, 
roŸ
, 0, 0, 
Ωng2_öfo
.
width
,

943 
Ωng2_öfo
.
height
, 0, 
dïth
, 
I≈utOuçut
, 
visuÆ
, 
©åmask
, &
©å
);

945 i‡(
wödow
 =
N⁄e
) {

946 
	`Ârötf
(
°dîr
, "XCreateWindow() failed\n");

949 
have_wödow
 = 
TRUE
;

951 i‡(
dïth
 == 8)

952 
	`XSëWödowCﬁ‹m≠
(
di•œy
, 
wödow
, 
cﬁ‹m≠
);

954 i‡(!
	`XSåögLi°ToTextPr›îty
(&
wödow_«me
, 1, 
pWödowName
))

955 
pWödowName
 = 
NULL
;

956 i‡(!
	`XSåögLi°ToTextPr›îty
(&
ic⁄_«me
, 1, 
pIc⁄Name
))

957 
pIc⁄Name
 = 
NULL
;

961 i‡((
size_höts
 = 
	`XAŒocSizeHöts
()Ë!
NULL
) {

963 
size_höts
->
Êags
 = 
PMöSize
 | 
PMaxSize
;

964 
size_höts
->
mö_width
 = size_höts->
max_width
 = ()
Ωng2_öfo
.
width
;

965 
size_höts
->
mö_height
 = size_höts->
max_height
 =

966 ()
Ωng2_öfo
.
height
;

969 i‡((
wm_höts
 = 
	`XAŒocWMHöts
()Ë!
NULL
) {

970 
wm_höts
->
öôül_°©e
 = 
N‹mÆSèã
;

971 
wm_höts
->
öput
 = 
True
;

973 
wm_höts
->
Êags
 = 
SèãHöt
 | 
I≈utHöt
 ;

976 i‡((
˛ass_höts
 = 
	`XAŒocCœssHöt
()Ë!
NULL
) {

977 
˛ass_höts
->
ªs_«me
 =Ñes_name;

978 
˛ass_höts
->
ªs_˛ass
 =Ñes_class;

981 
	`XSëWMPr›îtõs
(
di•œy
, 
wödow
, 
pWödowName
, 
pIc⁄Name
, 
NULL
, 0,

982 
size_höts
, 
wm_höts
, 
˛ass_höts
);

985 i‡(
pWödowName
)

986 
	`XFªe
(
pWödowName
->
vÆue
);

987 i‡(
pIc⁄Name
)

988 
	`XFªe
(
pIc⁄Name
->
vÆue
);

989 i‡(
size_höts
)

990 
	`XFªe
(
size_höts
);

991 i‡(
wm_höts
)

992 
	`XFªe
(
wm_höts
);

993 i‡(
˛ass_höts
)

994 
	`XFªe
(
˛ass_höts
);

996 
	`XM≠Wödow
(
di•œy
, 
wödow
);

998 
gc
 = 
	`XCª©eGC
(
di•œy
, 
wödow
, 0, &
gcvÆues
);

999 
have_gc
 = 
TRUE
;

1005 i‡(
dïth
 == 24 || depth == 32) {

1006 
xd©a
 = (
uch
 *)
	`mÆloc
(4*
Ωng2_öfo
.
width
*Ωng2_öfo.
height
);

1007 
∑d
 = 32;

1008 } i‡(
dïth
 == 16) {

1009 
xd©a
 = (
uch
 *)
	`mÆloc
(2*
Ωng2_öfo
.
width
*Ωng2_öfo.
height
);

1010 
∑d
 = 16;

1012 
xd©a
 = (
uch
 *)
	`mÆloc
(
Ωng2_öfo
.
width
*Ωng2_öfo.
height
);

1013 
∑d
 = 8;

1016 i‡(!
xd©a
) {

1017 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": unableÅoállocate image memory\n");

1021 
ximage
 = 
	`XCª©eImage
(
di•œy
, 
visuÆ
, 
dïth
, 
ZPixm≠
, 0,

1022 (*)
xd©a
, 
Ωng2_öfo
.
width
,Ñ≤g2_öfo.
height
, 
∑d
, 0);

1024 i‡(!
ximage
) {

1025 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": XCreateImage() failed\n");

1026 
	`‰ì
(
xd©a
);

1037 
ximage
->
byã_‹dî
 = 
MSBFú°
;

1045 i‡(
bg_image
)

1046 
	`Ωng2_x_lﬂd_bg_image
();

1048 i‡(!
bg_image
) {

1049 i‡(
dïth
 == 24 || depth == 32) {

1050 
bg_pixñ
 = (
bg_ªd
 << 
RShi·
) |

1051 (
bg_gªí
 << 
GShi·
) |

1052 (
bg_blue
 << 
BShi·
);

1053 } i‡(
dïth
 == 16) {

1054 
bg_pixñ
 = (((
bg_ªd
 << 8Ë>> 
RShi·
Ë& 
RMask
) |

1055 (((
bg_gªí
 << 8Ë>> 
GShi·
Ë& 
GMask
) |

1056 (((
bg_blue
 << 8Ë>> 
BShi·
Ë& 
BMask
);

1062 
	`XSëF‹eground
(
di•œy
, 
gc
, 
bg_pixñ
);

1063 
	`XFûlRe˘™gÀ
(
di•œy
, 
wödow
, 
gc
, 0, 0, 
Ωng2_öfo
.
width
,

1064 
Ωng2_öfo
.
height
);

1072 
	`XNextEvít
(
di•œy
, &
e
);

1073 
e
.
ty≥
 !
Expo£
 ||É.
xexpo£
.
cou¡
);

1075 
	`XFlush
(
di•œy
);

1079 
	}
}

1085 
	$Ωng2_x_lﬂd_bg_image
()

1087 
uch
 *
§c
;

1088 *
de°
;

1089 
uch
 
r1
, 
r2
, 
g1
, 
g2
, 
b1
, 
b2
;

1090 
uch
 
r1_öv
, 
r2_öv
, 
g1_öv
, 
g2_öv
, 
b1_öv
, 
b2_öv
;

1091 
k
, 
hmax
, 
max
;

1092 
xidx
, 
yidx
, 
yidx_max
;

1093 
eví_odd_vît
, 
eví_odd_h‹iz
, 
eví_odd
;

1094 
övît_gødõ¡2
 = (
bg
[
∑t
].
ty≥
 & 0x08);

1095 
övît_cﬁumn
;

1096 
ximage_rowbyãs
 = 
ximage
->
byãs_≥r_löe
;

1097 
ulg
 
i
, 
row
;

1098 
ulg
 
pixñ
;

1105 
bg_rowbyãs
 = 3 * 
Ωng2_öfo
.
width
;

1106 
bg_d©a
 = (
uch
 *)
	`mÆloc
(
bg_rowbyãs
 * 
Ωng2_öfo
.
height
);

1107 i‡(!
bg_d©a
) {

1108 
	`Ârötf
(
°dîr
, 
PROGNAME


1110 
bg_image
 = 0;

1114 
bgsˇÀ
 = (
∑t
 =0)? 8 : 
bgsˇÀ_deÁu…
;

1115 
yidx_max
 = 
bgsˇÀ
 - 1;

1122 i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 0) {

1123 
uch
 
r1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
r
;

1124 
uch
 
g1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
g
;

1125 
uch
 
b1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
b
;

1126 
uch
 
r2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
r
;

1127 
uch
 
g2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
g
;

1128 
uch
 
b2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
b
;

1129 
r1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
r
 - 
r1_mö
;

1130 
g1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
g
 - 
g1_mö
;

1131 
b1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
b
 - 
b1_mö
;

1132 
r2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
r
 - 
r2_mö
;

1133 
g2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
g
 - 
g2_mö
;

1134 
b2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
b
 - 
b2_mö
;

1136 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1137 
yidx
 = ()(
row
 % 
bgsˇÀ
);

1138 
eví_odd_vît
 = ()((
row
 / 
bgsˇÀ
) & 1);

1140 
r1
 = 
r1_mö
 + (
r1_diff
 * 
yidx
Ë/ 
yidx_max
;

1141 
g1
 = 
g1_mö
 + (
g1_diff
 * 
yidx
Ë/ 
yidx_max
;

1142 
b1
 = 
b1_mö
 + (
b1_diff
 * 
yidx
Ë/ 
yidx_max
;

1143 
r1_öv
 = 
r1_mö
 + (
r1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1144 
g1_öv
 = 
g1_mö
 + (
g1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1145 
b1_öv
 = 
b1_mö
 + (
b1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1147 
r2
 = 
r2_mö
 + (
r2_diff
 * 
yidx
Ë/ 
yidx_max
;

1148 
g2
 = 
g2_mö
 + (
g2_diff
 * 
yidx
Ë/ 
yidx_max
;

1149 
b2
 = 
b2_mö
 + (
b2_diff
 * 
yidx
Ë/ 
yidx_max
;

1150 
r2_öv
 = 
r2_mö
 + (
r2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1151 
g2_öv
 = 
g2_mö
 + (
g2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1152 
b2_öv
 = 
b2_mö
 + (
b2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1154 
de°
 = (*)
bg_d©a
 + 
row
*
bg_rowbyãs
;

1155 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

1156 
eví_odd_h‹iz
 = ()((
i
 / 
bgsˇÀ
) & 1);

1157 
eví_odd
 = 
eví_odd_vît
 ^ 
eví_odd_h‹iz
;

1158 
övît_cﬁumn
 =

1159 (
eví_odd_h‹iz
 && (
bg
[
∑t
].
ty≥
 & 0x10));

1160 i‡(
eví_odd
 == 0) {

1161 i‡(
övît_cﬁumn
) {

1162 *
de°
++ = 
r1_öv
;

1163 *
de°
++ = 
g1_öv
;

1164 *
de°
++ = 
b1_öv
;

1166 *
de°
++ = 
r1
;

1167 *
de°
++ = 
g1
;

1168 *
de°
++ = 
b1
;

1171 i‡((
övît_cﬁumn
 && 
övît_gødõ¡2
) ||

1172 (!
övît_cﬁumn
 && !
övît_gødõ¡2
))

1174 *
de°
++ = 
r2
;

1175 *
de°
++ = 
g2
;

1176 *
de°
++ = 
b2
;

1178 *
de°
++ = 
r2_öv
;

1179 *
de°
++ = 
g2_öv
;

1180 *
de°
++ = 
b2_öv
;

1191 } i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 1) {

1193 
hmax
 = (
bgsˇÀ
-1)/2;

1194 
max
 = 2*
hmax
;

1196 
r1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
r
;

1197 
g1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
g
;

1198 
b1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
b
;

1199 
r2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
r
;

1200 
g2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
g
;

1201 
b2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
b
;

1203 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1204 
yidx
 = ()(
row
 % 
bgsˇÀ
);

1205 i‡(
yidx
 > 
hmax
)

1206 
yidx
 = 
bgsˇÀ
-1 - yidx;

1207 
de°
 = (*)
bg_d©a
 + 
row
*
bg_rowbyãs
;

1208 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

1209 
xidx
 = ()(
i
 % 
bgsˇÀ
);

1210 i‡(
xidx
 > 
hmax
)

1211 
xidx
 = 
bgsˇÀ
-1 - xidx;

1212 
k
 = 
xidx
 + 
yidx
;

1213 *
de°
++ = (
k
*
r1
 + (
max
-k)*
r2
) / max;

1214 *
de°
++ = (
k
*
g1
 + (
max
-k)*
g2
) / max;

1215 *
de°
++ = (
k
*
b1
 + (
max
-k)*
b2
) / max;

1225 } i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 2) {

1226 
uch
 
ch
;

1227 
ii
, 
x
, 
y
, 
hw
, 
hh
, 
gøy•Ÿ
;

1228 
‰eq
, 
rŸ©e
, 
ßtuøã
, 
gøy
, 
öãnsôy
;

1229 
™gÀ
=0.0, 
aoff£t
=0.0, 
maxDi°
, 
di°
;

1230 
ªd
=0.0, 
gªí
=0.0, 
blue
=0.0, 
hue
, 
s
, 
v
, 
f
, 
p
, 
q
, 
t
;

1232 
	`Ârötf
(
°dîr
, "%s: computingÑadial background...",

1233 
PROGNAME
);

1234 
	`fÊush
(
°dîr
);

1236 
hh
 = ()(
Ωng2_öfo
.
height
 / 2);

1237 
hw
 = ()(
Ωng2_öfo
.
width
 / 2);

1246 
™gÀ
 = 
	`CLIP
(angle, 0.0, 360.0);

1247 
gøy•Ÿ
 = 
	`CLIP
(
bg
[
∑t
].
bg_gøy
, 1, (
hh
 + 
hw
));

1248 
‰eq
 = 
	`MAX
(()
bg
[
∑t
].
bg_‰eq
, 0.0);

1249 
ßtuøã
 = ()
bg
[
∑t
].
bg_bßt
 * 0.1;

1250 
rŸ©e
 = ()
bg
[
∑t
].
bg_brŸ
 * 0.1;

1251 
gøy
 = 0.0;

1252 
öãnsôy
 = 0.0;

1253 
maxDi°
 = ()((
hw
*hwË+ (
hh
*hh));

1255 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1256 
y
 = ()(
row
 - 
hh
);

1257 
de°
 = (*)
bg_d©a
 + 
row
*
bg_rowbyãs
;

1258 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

1259 
x
 = ()(
i
 - 
hw
);

1260 
™gÀ
 = (
x
 =0)? 
PI_2
 : 
	`©™
(()
y
 / ()x);

1261 
gøy
 = ()
	`MAX
(
	`ABS
(
y
), ABS(
x
)Ë/ 
gøy•Ÿ
;

1262 
gøy
 = 
	`MIN
(1.0, gray);

1263 
di°
 = ()((
x
*xË+ (
y
*y)Ë/ 
maxDi°
;

1264 
öãnsôy
 = 
	`cos
((
™gÀ
+(
rŸ©e
*
di°
*
PI
)Ë* 
‰eq
) *

1265 
gøy
 * 
ßtuøã
;

1266 
öãnsôy
 = (
	`MAX
(
	`MIN
(intensity,1.0),-1.0) + 1.0) * 0.5;

1267 
hue
 = (
™gÀ
 + 
PI
Ë* 
INV_PI_360
 + 
aoff£t
;

1268 
s
 = 
gøy
 * (()(
	`ABS
(
x
)+ABS(
y
)Ë/ ()(
hw
 + 
hh
));

1269 
s
 = 
	`MIN
(
	`MAX
(s,0.0), 1.0);

1270 
v
 = 
	`MIN
(
	`MAX
(
öãnsôy
,0.0), 1.0);

1272 i‡(
s
 == 0.0) {

1273 
ch
 = (
uch
)(
v
 * 255.0);

1274 *
de°
++ = 
ch
;

1275 *
de°
++ = 
ch
;

1276 *
de°
++ = 
ch
;

1278 i‡((
hue
 < 0.0) || (hue >= 360.0))

1279 
hue
 -= ((()(hue / 360.0)) * 360.0);

1280 
hue
 /= 60.0;

1281 
ii
 = ()
hue
;

1282 
f
 = 
hue
 - ()
ii
;

1283 
p
 = (1.0 - 
s
Ë* 
v
;

1284 
q
 = (1.0 - (
s
 * 
f
)Ë* 
v
;

1285 
t
 = (1.0 - (
s
 * (1.0 - 
f
))Ë* 
v
;

1286 i‡(
ii
 =0Ë{ 
ªd
 = 
v
; 
gªí
 = 
t
; 
blue
 = 
p
; }

1287 i‡(
ii
 =1Ë{ 
ªd
 = 
q
; 
gªí
 = 
v
; 
blue
 = 
p
; }

1288 i‡(
ii
 =2Ë{ 
ªd
 = 
p
; 
gªí
 = 
v
; 
blue
 = 
t
; }

1289 i‡(
ii
 =3Ë{ 
ªd
 = 
p
; 
gªí
 = 
q
; 
blue
 = 
v
; }

1290 i‡(
ii
 =4Ë{ 
ªd
 = 
t
; 
gªí
 = 
p
; 
blue
 = 
v
; }

1291 i‡(
ii
 =5Ë{ 
ªd
 = 
v
; 
gªí
 = 
p
; 
blue
 = 
q
; }

1292 *
de°
++ = (
uch
)(
ªd
 * 255.0);

1293 *
de°
++ = (
uch
)(
gªí
 * 255.0);

1294 *
de°
++ = (
uch
)(
blue
 * 255.0);

1298 
	`Ârötf
(
°dîr
, "done.\n");

1299 
	`fÊush
(
°dîr
);

1306 i‡(
dïth
 == 24 || depth == 32) {

1307 
ulg
 
ªd
, 
gªí
, 
blue
;

1308 
bµ
 = 
ximage
->
bôs_≥r_pixñ
;

1310 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1311 
§c
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1312 
de°
 = 
ximage
->
d©a
 + 
row
*
ximage_rowbyãs
;

1313 i‡(
bµ
 == 32) {

1314 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1315 
ªd
 = *
§c
++;

1316 
gªí
 = *
§c
++;

1317 
blue
 = *
§c
++;

1318 
pixñ
 = (
ªd
 << 
RShi·
) |

1319 (
gªí
 << 
GShi·
) |

1320 (
blue
 << 
BShi·
);

1322 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

1323 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1324 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1325 *
de°
++ = ()–
pixñ
 & 0xff);

1328 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1329 
ªd
 = *
§c
++;

1330 
gªí
 = *
§c
++;

1331 
blue
 = *
§c
++;

1332 
pixñ
 = (
ªd
 << 
RShi·
) |

1333 (
gªí
 << 
GShi·
) |

1334 (
blue
 << 
BShi·
);

1338 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1339 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1340 *
de°
++ = ()–
pixñ
 & 0xff);

1345 } i‡(
dïth
 == 16) {

1346 
ush
 
ªd
, 
gªí
, 
blue
;

1348 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1349 
§c
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1350 
de°
 = 
ximage
->
d©a
 + 
row
*
ximage_rowbyãs
;

1351 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1352 
ªd
 = ((
ush
)(*
§c
) << 8); ++src;

1353 
gªí
 = ((
ush
)(*
§c
) << 8); ++src;

1354 
blue
 = ((
ush
)(*
§c
) << 8); ++src;

1355 
pixñ
 = ((
ªd
 >> 
RShi·
Ë& 
RMask
) |

1356 ((
gªí
 >> 
GShi·
Ë& 
GMask
) |

1357 ((
blue
 >> 
BShi·
Ë& 
BMask
);

1359 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1360 *
de°
++ = ()–
pixñ
 & 0xff);

1370 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, 0, 0, 0, 
Ωng2_öfo
.
width
,

1371 
Ωng2_öfo
.
height
);

1375 
	}
}

1381 
	$Ωng2_x_di•œy_row
(
ulg
 
row
)

1383 
uch
 
bg_ªd
 = 
Ωng2_öfo
.bg_red;

1384 
uch
 
bg_gªí
 = 
Ωng2_öfo
.bg_green;

1385 
uch
 
bg_blue
 = 
Ωng2_öfo
.bg_blue;

1386 
uch
 *
§c
, *
§c2
=
NULL
;

1387 *
de°
;

1388 
uch
 
r
, 
g
, 
b
, 
a
;

1389 
ximage_rowbyãs
 = 
ximage
->
byãs_≥r_löe
;

1390 
ulg
 
i
, 
pixñ
;

1391 
rows
=0, 
¥ev∑ss
=(-1);

1392 
ulg
 
fú°row
;

1400 
	`Tø˚
((
°dîr
, "beginningÑpng2_x_display_row()\n"))

1402 i‡(
Ωng2_öfo
.
∑ss
 !
¥ev∑ss
) {

1403 i‡(
∑u£_a·î_∑ss
 && 
Ωng2_öfo
.
∑ss
 > 0) {

1404 
XEvít
 
e
;

1405 
KeySym
 
k
;

1407 
	`Ârötf
(
°dîr
,

1409 
PROGNAME
, 
¥ev∑ss
 + 1);

1411 
	`XNextEvít
(
di•œy
, &
e
);

1412 !
	`QUIT
(
e
,
k
));

1414 
	`Ârötf
(
°dîr
, "%s:Öas†%d o‡7\r", 
PROGNAME
, 
Ωng2_öfo
.
∑ss
 + 1);

1415 
	`fÊush
(
°dîr
);

1416 
¥ev∑ss
 = 
Ωng2_öfo
.
∑ss
;

1419 i‡(
rows
 == 0)

1420 
fú°row
 = 
row
;

1422 ++
rows
;

1431 i‡(
dïth
 == 24 || depth == 32) {

1432 
ulg
 
ªd
, 
gªí
, 
blue
;

1433 
bµ
 = 
ximage
->
bôs_≥r_pixñ
;

1435 
§c
 = 
Ωng2_öfo
.
image_d©a
 + 
row
*Ωng2_öfo.
rowbyãs
;

1436 i‡(
bg_image
)

1437 
§c2
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1438 
de°
 = 
ximage
->
d©a
 + 
row
*
ximage_rowbyãs
;

1439 i‡(
Ωng2_öfo
.
ch™√ls
 == 3) {

1440 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1441 
ªd
 = *
§c
++;

1442 
gªí
 = *
§c
++;

1443 
blue
 = *
§c
++;

1444 
pixñ
 = (
ªd
 << 
RShi·
) |

1445 (
gªí
 << 
GShi·
) |

1446 (
blue
 << 
BShi·
);

1448 i‡(
bµ
 == 32) {

1449 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

1450 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1451 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1452 *
de°
++ = ()–
pixñ
 & 0xff);

1456 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1457 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1458 *
de°
++ = ()–
pixñ
 & 0xff);

1462 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1463 
r
 = *
§c
++;

1464 
g
 = *
§c
++;

1465 
b
 = *
§c
++;

1466 
a
 = *
§c
++;

1467 i‡(
bg_image
) {

1468 
bg_ªd
 = *
§c2
++;

1469 
bg_gªí
 = *
§c2
++;

1470 
bg_blue
 = *
§c2
++;

1472 i‡(
a
 == 255) {

1473 
ªd
 = 
r
;

1474 
gªí
 = 
g
;

1475 
blue
 = 
b
;

1476 } i‡(
a
 == 0) {

1477 
ªd
 = 
bg_ªd
;

1478 
gªí
 = 
bg_gªí
;

1479 
blue
 = 
bg_blue
;

1484 
	`Æpha_composôe
(
ªd
, 
r
, 
a
, 
bg_ªd
);

1485 
	`Æpha_composôe
(
gªí
, 
g
, 
a
, 
bg_gªí
);

1486 
	`Æpha_composôe
(
blue
, 
b
, 
a
, 
bg_blue
);

1488 
pixñ
 = (
ªd
 << 
RShi·
) |

1489 (
gªí
 << 
GShi·
) |

1490 (
blue
 << 
BShi·
);

1492 i‡(
bµ
 == 32) {

1493 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

1494 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1495 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1496 *
de°
++ = ()–
pixñ
 & 0xff);

1500 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1501 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1502 *
de°
++ = ()–
pixñ
 & 0xff);

1507 } i‡(
dïth
 == 16) {

1508 
ush
 
ªd
, 
gªí
, 
blue
;

1510 
§c
 = 
Ωng2_öfo
.
row_poöãrs
[
row
];

1511 i‡(
bg_image
)

1512 
§c2
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1513 
de°
 = 
ximage
->
d©a
 + 
row
*
ximage_rowbyãs
;

1514 i‡(
Ωng2_öfo
.
ch™√ls
 == 3) {

1515 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1516 
ªd
 = ((
ush
)(*
§c
) << 8);

1517 ++
§c
;

1518 
gªí
 = ((
ush
)(*
§c
) << 8);

1519 ++
§c
;

1520 
blue
 = ((
ush
)(*
§c
) << 8);

1521 ++
§c
;

1522 
pixñ
 = ((
ªd
 >> 
RShi·
Ë& 
RMask
) |

1523 ((
gªí
 >> 
GShi·
Ë& 
GMask
) |

1524 ((
blue
 >> 
BShi·
Ë& 
BMask
);

1526 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1527 *
de°
++ = ()–
pixñ
 & 0xff);

1530 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1531 
r
 = *
§c
++;

1532 
g
 = *
§c
++;

1533 
b
 = *
§c
++;

1534 
a
 = *
§c
++;

1535 i‡(
bg_image
) {

1536 
bg_ªd
 = *
§c2
++;

1537 
bg_gªí
 = *
§c2
++;

1538 
bg_blue
 = *
§c2
++;

1540 i‡(
a
 == 255) {

1541 
ªd
 = ((
ush
)
r
 << 8);

1542 
gªí
 = ((
ush
)
g
 << 8);

1543 
blue
 = ((
ush
)
b
 << 8);

1544 } i‡(
a
 == 0) {

1545 
ªd
 = ((
ush
)
bg_ªd
 << 8);

1546 
gªí
 = ((
ush
)
bg_gªí
 << 8);

1547 
blue
 = ((
ush
)
bg_blue
 << 8);

1552 
	`Æpha_composôe
(
r
,Ñ, 
a
, 
bg_ªd
);

1553 
	`Æpha_composôe
(
g
, g, 
a
, 
bg_gªí
);

1554 
	`Æpha_composôe
(
b
, b, 
a
, 
bg_blue
);

1555 
ªd
 = ((
ush
)
r
 << 8);

1556 
gªí
 = ((
ush
)
g
 << 8);

1557 
blue
 = ((
ush
)
b
 << 8);

1559 
pixñ
 = ((
ªd
 >> 
RShi·
Ë& 
RMask
) |

1560 ((
gªí
 >> 
GShi·
Ë& 
GMask
) |

1561 ((
blue
 >> 
BShi·
Ë& 
BMask
);

1563 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1564 *
de°
++ = ()–
pixñ
 & 0xff);

1583 i‡(
demo_timög
 && (
row
 - 
fú°row
 >16 ||Ñow >
Ωng2_öfo
.
height
-2)) {

1584 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, ()
fú°row
, 0,

1585 ()
fú°row
, 
Ωng2_öfo
.
width
, 
row
 - firstrow + 1);

1586 
	`XFlush
(
di•œy
);

1587 
rows
 = 0;

1588 
	`u¶ìp
(
u¶ìp_duøti⁄
);

1590 i‡(!
demo_timög
 && ((
rows
 & 0xfË=0 || 
row
 >
Ωng2_öfo
.
height
-2)) {

1591 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, ()
fú°row
, 0,

1592 ()
fú°row
, 
Ωng2_öfo
.
width
, 
row
 - firstrow + 1);

1593 
	`XFlush
(
di•œy
);

1594 
rows
 = 0;

1597 
	}
}

1603 
	$Ωng2_x_föish_di•œy
()

1605 
	`Tø˚
((
°dîr
, "beginningÑpng2_x_finish_display()\n"))

1611 
Ωng2_öfo
.
°©e
 = 
kD⁄e
;

1612 
	`¥ötf
(

1614 
	`fÊush
(
°dout
);

1615 
	}
}

1621 
	$Ωng2_x_ªdi•œy_image
(
ulg
 
°¨tcﬁ
, ulg 
°¨åow
,

1622 
ulg
 
width
, ulg 
height
)

1624 
uch
 
bg_ªd
 = 
Ωng2_öfo
.bg_red;

1625 
uch
 
bg_gªí
 = 
Ωng2_öfo
.bg_green;

1626 
uch
 
bg_blue
 = 
Ωng2_öfo
.bg_blue;

1627 
uch
 *
§c
, *
§c2
=
NULL
;

1628 *
de°
;

1629 
uch
 
r
, 
g
, 
b
, 
a
;

1630 
ulg
 
i
, 
row
, 
œ°row
 = 0;

1631 
ulg
 
pixñ
;

1632 
ximage_rowbyãs
 = 
ximage
->
byãs_≥r_löe
;

1635 
	`Tø˚
((
°dîr
, "beginning displayÜoop (image_channels == %d)\n",

1636 
Ωng2_öfo
.
ch™√ls
))

1637 
	`Tø˚
((
°dîr
, " (width = %ld,Ñowbytes = %d, ximage_rowbytes = %d)\n",

1638 
Ωng2_öfo
.
width
,Ñ≤g2_öfo.
rowbyãs
, 
ximage_rowbyãs
))

1639 
	`Tø˚
((
°dîr
, " (bµ = %d)\n", 
ximage
->
bôs_≥r_pixñ
))

1640 
	`Tø˚
((
°dîr
, " (byã_‹dî = %s)\n", 
ximage
->
byã_‹dî
 =
MSBFú°
?

1641 "MSBFú°" : (
ximage
->
byã_‹dî
 =
LSBFú°
? "LSBFirst" : "unknown")))

1651 i‡(
dïth
 == 24 || depth == 32) {

1652 
ulg
 
ªd
, 
gªí
, 
blue
;

1653 
bµ
 = 
ximage
->
bôs_≥r_pixñ
;

1655 
œ°row
 = 
row
 = 
°¨åow
;Ñow < sèπrow+
height
; ++row) {

1656 
§c
 = 
Ωng2_öfo
.
image_d©a
 + 
row
*Ωng2_öfo.
rowbyãs
;

1657 i‡(
bg_image
)

1658 
§c2
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1659 
de°
 = 
ximage
->
d©a
 + 
row
*
ximage_rowbyãs
;

1660 i‡(
Ωng2_öfo
.
ch™√ls
 == 3) {

1661 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1662 
ªd
 = *
§c
++;

1663 
gªí
 = *
§c
++;

1664 
blue
 = *
§c
++;

1665 #ifde‡
NO_24BIT_MASKS


1666 
pixñ
 = (
ªd
 << 
RShi·
) |

1667 (
gªí
 << 
GShi·
) |

1668 (
blue
 << 
BShi·
);

1670 i‡(
bµ
 == 32) {

1671 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

1672 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1673 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1674 *
de°
++ = ()–
pixñ
 & 0xff);

1678 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1679 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1680 *
de°
++ = ()–
pixñ
 & 0xff);

1683 
ªd
 = (
RShi·
 < 0)?Ñed << (-RShift) :Ñed >> RShift;

1684 
gªí
 = (
GShi·
 < 0)? green << (-GShift) : green >> GShift;

1685 
blue
 = (
BShi·
 < 0)? blue << (-BShift) : blue >> BShift;

1686 
pixñ
 = (
ªd
 & 
RMask
Ë| (
gªí
 & 
GMask
Ë| (
blue
 & 
BMask
);

1688 i‡(
bµ
 == 32) {

1689 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

1690 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1691 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1692 *
de°
++ = ()–
pixñ
 & 0xff);

1697 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1698 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1699 *
de°
++ = ()–
pixñ
 & 0xff);

1705 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1706 
r
 = *
§c
++;

1707 
g
 = *
§c
++;

1708 
b
 = *
§c
++;

1709 
a
 = *
§c
++;

1710 i‡(
bg_image
) {

1711 
bg_ªd
 = *
§c2
++;

1712 
bg_gªí
 = *
§c2
++;

1713 
bg_blue
 = *
§c2
++;

1715 i‡(
a
 == 255) {

1716 
ªd
 = 
r
;

1717 
gªí
 = 
g
;

1718 
blue
 = 
b
;

1719 } i‡(
a
 == 0) {

1720 
ªd
 = 
bg_ªd
;

1721 
gªí
 = 
bg_gªí
;

1722 
blue
 = 
bg_blue
;

1727 
	`Æpha_composôe
(
ªd
, 
r
, 
a
, 
bg_ªd
);

1728 
	`Æpha_composôe
(
gªí
, 
g
, 
a
, 
bg_gªí
);

1729 
	`Æpha_composôe
(
blue
, 
b
, 
a
, 
bg_blue
);

1731 #ifde‡
NO_24BIT_MASKS


1732 
pixñ
 = (
ªd
 << 
RShi·
) |

1733 (
gªí
 << 
GShi·
) |

1734 (
blue
 << 
BShi·
);

1736 i‡(
bµ
 == 32) {

1737 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

1738 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1739 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1740 *
de°
++ = ()–
pixñ
 & 0xff);

1744 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1745 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1746 *
de°
++ = ()–
pixñ
 & 0xff);

1749 
ªd
 = (
RShi·
 < 0)?Ñed << (-RShift) :Ñed >> RShift;

1750 
gªí
 = (
GShi·
 < 0)? green << (-GShift) : green >> GShift;

1751 
blue
 = (
BShi·
 < 0)? blue << (-BShift) : blue >> BShift;

1752 
pixñ
 = (
ªd
 & 
RMask
Ë| (
gªí
 & 
GMask
Ë| (
blue
 & 
BMask
);

1754 i‡(
bµ
 == 32) {

1755 *
de°
++ = ()((
pixñ
 >> 24) & 0xff);

1756 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1757 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1758 *
de°
++ = ()–
pixñ
 & 0xff);

1763 *
de°
++ = ()((
pixñ
 >> 16) & 0xff);

1764 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1765 *
de°
++ = ()–
pixñ
 & 0xff);

1771 i‡(((
row
+1) & 0xf) == 0) {

1772 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, ()
œ°row
, 0,

1773 ()
œ°row
, 
Ωng2_öfo
.
width
, 16);

1774 
	`XFlush
(
di•œy
);

1775 
œ°row
 = 
row
 + 1;

1779 } i‡(
dïth
 == 16) {

1780 
ush
 
ªd
, 
gªí
, 
blue
;

1782 
œ°row
 = 
row
 = 
°¨åow
;Ñow < sèπrow+
height
; ++row) {

1783 
§c
 = 
Ωng2_öfo
.
row_poöãrs
[
row
];

1784 i‡(
bg_image
)

1785 
§c2
 = 
bg_d©a
 + 
row
*
bg_rowbyãs
;

1786 
de°
 = 
ximage
->
d©a
 + 
row
*
ximage_rowbyãs
;

1787 i‡(
Ωng2_öfo
.
ch™√ls
 == 3) {

1788 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1789 
ªd
 = ((
ush
)(*
§c
) << 8);

1790 ++
§c
;

1791 
gªí
 = ((
ush
)(*
§c
) << 8);

1792 ++
§c
;

1793 
blue
 = ((
ush
)(*
§c
) << 8);

1794 ++
§c
;

1795 
pixñ
 = ((
ªd
 >> 
RShi·
Ë& 
RMask
) |

1796 ((
gªí
 >> 
GShi·
Ë& 
GMask
) |

1797 ((
blue
 >> 
BShi·
Ë& 
BMask
);

1799 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1800 *
de°
++ = ()–
pixñ
 & 0xff);

1803 
i
 = 
Ωng2_öfo
.
width
; i > 0; --i) {

1804 
r
 = *
§c
++;

1805 
g
 = *
§c
++;

1806 
b
 = *
§c
++;

1807 
a
 = *
§c
++;

1808 i‡(
bg_image
) {

1809 
bg_ªd
 = *
§c2
++;

1810 
bg_gªí
 = *
§c2
++;

1811 
bg_blue
 = *
§c2
++;

1813 i‡(
a
 == 255) {

1814 
ªd
 = ((
ush
)
r
 << 8);

1815 
gªí
 = ((
ush
)
g
 << 8);

1816 
blue
 = ((
ush
)
b
 << 8);

1817 } i‡(
a
 == 0) {

1818 
ªd
 = ((
ush
)
bg_ªd
 << 8);

1819 
gªí
 = ((
ush
)
bg_gªí
 << 8);

1820 
blue
 = ((
ush
)
bg_blue
 << 8);

1825 
	`Æpha_composôe
(
r
,Ñ, 
a
, 
bg_ªd
);

1826 
	`Æpha_composôe
(
g
, g, 
a
, 
bg_gªí
);

1827 
	`Æpha_composôe
(
b
, b, 
a
, 
bg_blue
);

1828 
ªd
 = ((
ush
)
r
 << 8);

1829 
gªí
 = ((
ush
)
g
 << 8);

1830 
blue
 = ((
ush
)
b
 << 8);

1832 
pixñ
 = ((
ªd
 >> 
RShi·
Ë& 
RMask
) |

1833 ((
gªí
 >> 
GShi·
Ë& 
GMask
) |

1834 ((
blue
 >> 
BShi·
Ë& 
BMask
);

1836 *
de°
++ = ()((
pixñ
 >> 8) & 0xff);

1837 *
de°
++ = ()–
pixñ
 & 0xff);

1841 i‡(((
row
+1) & 0xf) == 0) {

1842 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, ()
œ°row
, 0,

1843 ()
œ°row
, 
Ωng2_öfo
.
width
, 16);

1844 
	`XFlush
(
di•œy
);

1845 
œ°row
 = 
row
 + 1;

1855 
	`Tø˚
((
°dîr
, "calling final XPutImage()\n"))

1856 i‡(
œ°row
 < 
°¨åow
+
height
) {

1857 
	`XPutImage
(
di•œy
, 
wödow
, 
gc
, 
ximage
, 0, ()
œ°row
, 0,

1858 ()
œ°row
, 
Ωng2_öfo
.
width
,Ñ≤g2_öfo.
height
-lastrow);

1859 
	`XFlush
(
di•œy
);

1862 ()
°¨tcﬁ
;

1863 ()
width
;

1865 
	}
}

1871 #ifde‡
FEATURE_LOOP


1873 
	$Ωng2_x_ªlﬂd_bg_image
()

1875 *
de°
;

1876 
uch
 
r1
, 
r2
, 
g1
, 
g2
, 
b1
, 
b2
;

1877 
uch
 
r1_öv
, 
r2_öv
, 
g1_öv
, 
g2_öv
, 
b1_öv
, 
b2_öv
;

1878 
k
, 
hmax
, 
max
;

1879 
xidx
, 
yidx
, 
yidx_max
;

1880 
eví_odd_vît
, 
eví_odd_h‹iz
, 
eví_odd
;

1881 
övît_gødõ¡2
 = (
bg
[
∑t
].
ty≥
 & 0x08);

1882 
övît_cﬁumn
;

1883 
ulg
 
i
, 
row
;

1886 
bgsˇÀ
 = (
∑t
 =0)? 8 : 
bgsˇÀ_deÁu…
;

1887 
yidx_max
 = 
bgsˇÀ
 - 1;

1894 i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 0) {

1895 
uch
 
r1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
r
;

1896 
uch
 
g1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
g
;

1897 
uch
 
b1_mö
 = 
rgb
[
bg
[
∑t
].
rgb1_mö
].
b
;

1898 
uch
 
r2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
r
;

1899 
uch
 
g2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
g
;

1900 
uch
 
b2_mö
 = 
rgb
[
bg
[
∑t
].
rgb2_mö
].
b
;

1901 
r1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
r
 - 
r1_mö
;

1902 
g1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
g
 - 
g1_mö
;

1903 
b1_diff
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
b
 - 
b1_mö
;

1904 
r2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
r
 - 
r2_mö
;

1905 
g2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
g
 - 
g2_mö
;

1906 
b2_diff
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
b
 - 
b2_mö
;

1908 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1909 
yidx
 = ()(
row
 % 
bgsˇÀ
);

1910 
eví_odd_vît
 = ()((
row
 / 
bgsˇÀ
) & 1);

1912 
r1
 = 
r1_mö
 + (
r1_diff
 * 
yidx
Ë/ 
yidx_max
;

1913 
g1
 = 
g1_mö
 + (
g1_diff
 * 
yidx
Ë/ 
yidx_max
;

1914 
b1
 = 
b1_mö
 + (
b1_diff
 * 
yidx
Ë/ 
yidx_max
;

1915 
r1_öv
 = 
r1_mö
 + (
r1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1916 
g1_öv
 = 
g1_mö
 + (
g1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1917 
b1_öv
 = 
b1_mö
 + (
b1_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1919 
r2
 = 
r2_mö
 + (
r2_diff
 * 
yidx
Ë/ 
yidx_max
;

1920 
g2
 = 
g2_mö
 + (
g2_diff
 * 
yidx
Ë/ 
yidx_max
;

1921 
b2
 = 
b2_mö
 + (
b2_diff
 * 
yidx
Ë/ 
yidx_max
;

1922 
r2_öv
 = 
r2_mö
 + (
r2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1923 
g2_öv
 = 
g2_mö
 + (
g2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1924 
b2_öv
 = 
b2_mö
 + (
b2_diff
 * (
yidx_max
-
yidx
)) / yidx_max;

1926 
de°
 = (*)
bg_d©a
 + 
row
*
bg_rowbyãs
;

1927 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

1928 
eví_odd_h‹iz
 = ()((
i
 / 
bgsˇÀ
) & 1);

1929 
eví_odd
 = 
eví_odd_vît
 ^ 
eví_odd_h‹iz
;

1930 
övît_cﬁumn
 =

1931 (
eví_odd_h‹iz
 && (
bg
[
∑t
].
ty≥
 & 0x10));

1932 i‡(
eví_odd
 == 0) {

1933 i‡(
övît_cﬁumn
) {

1934 *
de°
++ = 
r1_öv
;

1935 *
de°
++ = 
g1_öv
;

1936 *
de°
++ = 
b1_öv
;

1938 *
de°
++ = 
r1
;

1939 *
de°
++ = 
g1
;

1940 *
de°
++ = 
b1
;

1943 i‡((
övît_cﬁumn
 && 
övît_gødõ¡2
) ||

1944 (!
övît_cﬁumn
 && !
övît_gødõ¡2
))

1946 *
de°
++ = 
r2
;

1947 *
de°
++ = 
g2
;

1948 *
de°
++ = 
b2
;

1950 *
de°
++ = 
r2_öv
;

1951 *
de°
++ = 
g2_öv
;

1952 *
de°
++ = 
b2_öv
;

1963 } i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 1) {

1965 
hmax
 = (
bgsˇÀ
-1)/2;

1966 
max
 = 2*
hmax
;

1968 
r1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
r
;

1969 
g1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
g
;

1970 
b1
 = 
rgb
[
bg
[
∑t
].
rgb1_max
].
b
;

1971 
r2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
r
;

1972 
g2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
g
;

1973 
b2
 = 
rgb
[
bg
[
∑t
].
rgb2_max
].
b
;

1975 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

1976 
yidx
 = ()(
row
 % 
bgsˇÀ
);

1977 i‡(
yidx
 > 
hmax
)

1978 
yidx
 = 
bgsˇÀ
-1 - yidx;

1979 
de°
 = (*)
bg_d©a
 + 
row
*
bg_rowbyãs
;

1980 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

1981 
xidx
 = ()(
i
 % 
bgsˇÀ
);

1982 i‡(
xidx
 > 
hmax
)

1983 
xidx
 = 
bgsˇÀ
-1 - xidx;

1984 
k
 = 
xidx
 + 
yidx
;

1985 *
de°
++ = (
k
*
r1
 + (
max
-k)*
r2
) / max;

1986 *
de°
++ = (
k
*
g1
 + (
max
-k)*
g2
) / max;

1987 *
de°
++ = (
k
*
b1
 + (
max
-k)*
b2
) / max;

1997 } i‡((
bg
[
∑t
].
ty≥
 & 0x07) == 2) {

1998 
uch
 
ch
;

1999 
ii
, 
x
, 
y
, 
hw
, 
hh
, 
gøy•Ÿ
;

2000 
‰eq
, 
rŸ©e
, 
ßtuøã
, 
gøy
, 
öãnsôy
;

2001 
™gÀ
=0.0, 
aoff£t
=0.0, 
maxDi°
, 
di°
;

2002 
ªd
=0.0, 
gªí
=0.0, 
blue
=0.0, 
hue
, 
s
, 
v
, 
f
, 
p
, 
q
, 
t
;

2004 
hh
 = ()(
Ωng2_öfo
.
height
 / 2);

2005 
hw
 = ()(
Ωng2_öfo
.
width
 / 2);

2014 
™gÀ
 = 
	`CLIP
(angle, 0.0, 360.0);

2015 
gøy•Ÿ
 = 
	`CLIP
(
bg
[
∑t
].
bg_gøy
, 1, (
hh
 + 
hw
));

2016 
‰eq
 = 
	`MAX
(()
bg
[
∑t
].
bg_‰eq
, 0.0);

2017 
ßtuøã
 = ()
bg
[
∑t
].
bg_bßt
 * 0.1;

2018 
rŸ©e
 = ()
bg
[
∑t
].
bg_brŸ
 * 0.1;

2019 
gøy
 = 0.0;

2020 
öãnsôy
 = 0.0;

2021 
maxDi°
 = ()((
hw
*hwË+ (
hh
*hh));

2023 
row
 = 0;Ñow < 
Ωng2_öfo
.
height
; ++row) {

2024 
y
 = ()(
row
 - 
hh
);

2025 
de°
 = (*)
bg_d©a
 + 
row
*
bg_rowbyãs
;

2026 
i
 = 0; i < 
Ωng2_öfo
.
width
; ++i) {

2027 
x
 = ()(
i
 - 
hw
);

2028 
™gÀ
 = (
x
 =0)? 
PI_2
 : 
	`©™
(()
y
 / ()x);

2029 
gøy
 = ()
	`MAX
(
	`ABS
(
y
), ABS(
x
)Ë/ 
gøy•Ÿ
;

2030 
gøy
 = 
	`MIN
(1.0, gray);

2031 
di°
 = ()((
x
*xË+ (
y
*y)Ë/ 
maxDi°
;

2032 
öãnsôy
 = 
	`cos
((
™gÀ
+(
rŸ©e
*
di°
*
PI
)Ë* 
‰eq
) *

2033 
gøy
 * 
ßtuøã
;

2034 
öãnsôy
 = (
	`MAX
(
	`MIN
(intensity,1.0),-1.0) + 1.0) * 0.5;

2035 
hue
 = (
™gÀ
 + 
PI
Ë* 
INV_PI_360
 + 
aoff£t
;

2036 
s
 = 
gøy
 * (()(
	`ABS
(
x
)+ABS(
y
)Ë/ ()(
hw
 + 
hh
));

2037 
s
 = 
	`MIN
(
	`MAX
(s,0.0), 1.0);

2038 
v
 = 
	`MIN
(
	`MAX
(
öãnsôy
,0.0), 1.0);

2040 i‡(
s
 == 0.0) {

2041 
ch
 = (
uch
)(
v
 * 255.0);

2042 *
de°
++ = 
ch
;

2043 *
de°
++ = 
ch
;

2044 *
de°
++ = 
ch
;

2046 i‡((
hue
 < 0.0) || (hue >= 360.0))

2047 
hue
 -= ((()(hue / 360.0)) * 360.0);

2048 
hue
 /= 60.0;

2049 
ii
 = ()
hue
;

2050 
f
 = 
hue
 - ()
ii
;

2051 
p
 = (1.0 - 
s
Ë* 
v
;

2052 
q
 = (1.0 - (
s
 * 
f
)Ë* 
v
;

2053 
t
 = (1.0 - (
s
 * (1.0 - 
f
))Ë* 
v
;

2054 i‡(
ii
 =0Ë{ 
ªd
 = 
v
; 
gªí
 = 
t
; 
blue
 = 
p
; }

2055 i‡(
ii
 =1Ë{ 
ªd
 = 
q
; 
gªí
 = 
v
; 
blue
 = 
p
; }

2056 i‡(
ii
 =2Ë{ 
ªd
 = 
p
; 
gªí
 = 
v
; 
blue
 = 
t
; }

2057 i‡(
ii
 =3Ë{ 
ªd
 = 
p
; 
gªí
 = 
q
; 
blue
 = 
v
; }

2058 i‡(
ii
 =4Ë{ 
ªd
 = 
t
; 
gªí
 = 
p
; 
blue
 = 
v
; }

2059 i‡(
ii
 =5Ë{ 
ªd
 = 
v
; 
gªí
 = 
p
; 
blue
 = 
q
; }

2060 *
de°
++ = (
uch
)(
ªd
 * 255.0);

2061 *
de°
++ = (
uch
)(
gªí
 * 255.0);

2062 *
de°
++ = (
uch
)(
blue
 * 255.0);

2068 
	}
}

2074 
	$is_numbî
(*
p
)

2076 *
p
) {

2077 i‡(!
	`isdigô
(*
p
))

2078  
FALSE
;

2079 ++
p
;

2081  
TRUE
;

2082 
	}
}

2090 
	$Ωng2_x_˛ónup
()

2092 i‡(
bg_image
 && 
bg_d©a
) {

2093 
	`‰ì
(
bg_d©a
);

2094 
bg_d©a
 = 
NULL
;

2097 i‡(
Ωng2_öfo
.
image_d©a
) {

2098 
	`‰ì
(
Ωng2_öfo
.
image_d©a
);

2099 
Ωng2_öfo
.
image_d©a
 = 
NULL
;

2102 i‡(
Ωng2_öfo
.
row_poöãrs
) {

2103 
	`‰ì
(
Ωng2_öfo
.
row_poöãrs
);

2104 
Ωng2_öfo
.
row_poöãrs
 = 
NULL
;

2107 i‡(
ximage
) {

2108 i‡(
ximage
->
d©a
) {

2109 
	`‰ì
(
ximage
->
d©a
);

2110 
ximage
->
d©a
 = (*)
NULL
;

2112 
	`XDe°royImage
(
ximage
);

2113 
ximage
 = 
NULL
;

2116 i‡(
have_gc
)

2117 
	`XFªeGC
(
di•œy
, 
gc
);

2119 i‡(
have_wödow
)

2120 
	`XDe°royWödow
(
di•œy
, 
wödow
);

2122 i‡(
have_cﬁ‹m≠
)

2123 
	`XFªeCﬁ‹m≠
(
di•œy
, 
cﬁ‹m≠
);

2125 i‡(
have_n⁄deÁu…_visuÆ
)

2126 
	`XFªe
(
visuÆ_li°
);

2127 
	}
}

2133 
	$Ωng2_x_msb
(
ulg
 
u32vÆ
)

2135 
i
;

2137 
i
 = 31; i >= 0; --i) {

2138 i‡(
u32vÆ
 & 0x80000000L)

2140 
u32vÆ
 <<= 1;

2142  
i
;

2143 
	}
}

	@contrib/gregbook/wpng.c

91 
	#PROGNAME
 "w≤g"

	)

92 
	#VERSION
 "2.00 o‡2 Ju√ 2007"

	)

93 
	#APPNAME
 "Sim∂êPGM/PPM/PAMÅÿPNG C⁄vîãr"

	)

95 #i‡
deföed
(
__MSDOS__
Ë|| deföed(
__OS2__
)

96 
	#DOS_OS2_W32


	)

97 #ñi‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed(
__WIN32__
)

98 #i‚de‡
__GNUC__


99 
	#DOS_OS2_W32


	)

103 
	~<°dio.h
>

104 
	~<°dlib.h
>

105 
	~<°rög.h
>

106 
	~<£tjmp.h
>

107 
	~<time.h
>

109 #ifde‡
DOS_OS2_W32


110 
	~<io.h
>

111 
	~<f˙é.h
>

112 #ifde‡
__EMX__


113 #i‚de‡
gëch


114 
	#gëch
(Ë
	`_ªad_kbd
(0, 1, 0Ë

	)

117 #ifde‡
__GO32__


118 
	~<pc.h
>

119 
	#gëch
(Ë
	`gëkey
(Ë

	)

121 
	~<c⁄io.h
>

124 
	#FGETS
(
buf
,
Àn
,
°ªam
Ë
	`dos_kbd_gës
(buf,Àn)

	)

126 
	~<uni°d.h
>

127 
	#FGETS
 
fgës


	)

136 
	~"wrôïng.h
"

142 
w≤g_isvÆid_œtö1
(
uch
 *
p
, 
Àn
);

143 
w≤g_˛ónup
();

145 #ifde‡
DOS_OS2_W32


146 *
dos_kbd_gës
(*
buf
, 
Àn
);

151 
maö¥og_öfo
 
	gw≤g_öfo
;

155 
	$maö
(
¨gc
, **
¨gv
)

157 #i‚de‡
DOS_OS2_W32


158 
FILE
 *
keybd
;

160 #ifde‡
sgi


161 
FILE
 *
tmpfûe
;

162 
tm∂öe
[80];

164 *
ö«me
 = 
NULL
, 
ouäame
[256];

165 *
p
, 
≤mch¨
, 
≤mlöe
[256];

166 *
bg°r
, *
ãxtbuf
 = 
NULL
;

167 
ulg
 
rowbyãs
;

168 
rc
, 
Àn
 = 0;

169 
îr‹
 = 0;

170 
ãxt
 = 
FALSE
;

171 
maxvÆ
;

172 
LUT_exp⁄ít
;

173 
CRT_exp⁄ít
 = 2.2;

174 
deÁu…_di•œy_exp⁄ít
;

175 
deÁu…_gamma
 = 0.0;

178 
w≤g_öfo
.
öfûe
 = 
NULL
;

179 
w≤g_öfo
.
outfûe
 = 
NULL
;

180 
w≤g_öfo
.
image_d©a
 = 
NULL
;

181 
w≤g_öfo
.
row_poöãrs
 = 
NULL
;

182 
w≤g_öfo
.
fûãr
 = 
FALSE
;

183 
w≤g_öfo
.
öãæa˚d
 = 
FALSE
;

184 
w≤g_öfo
.
have_bg
 = 
FALSE
;

185 
w≤g_öfo
.
have_time
 = 
FALSE
;

186 
w≤g_öfo
.
have_ãxt
 = 0;

187 
w≤g_öfo
.
gamma
 = 0.0;

199 #i‡
	`deföed
(
NeXT
)

201 
LUT_exp⁄ít
 = 1.0 / 2.2;

206 #ñi‡
	`deföed
(
sgi
)

207 
LUT_exp⁄ít
 = 1.0 / 1.7;

210 
tmpfûe
 = 
	`f›í
("/etc/config/system.glGammaVal", "r");

211 i‡(
tmpfûe
) {

212 
sgi_gamma
;

214 
	`fgës
(
tm∂öe
, 80, 
tmpfûe
);

215 
	`f˛o£
(
tmpfûe
);

216 
sgi_gamma
 = 
	`©of
(
tm∂öe
);

217 i‡(
sgi_gamma
 > 0.0)

218 
LUT_exp⁄ít
 = 1.0 / 
sgi_gamma
;

220 #ñi‡
	`deföed
(
Macötosh
)

221 
LUT_exp⁄ít
 = 1.8 / 2.61;

227 
LUT_exp⁄ít
 = 1.0;

231 
deÁu…_di•œy_exp⁄ít
 = 
LUT_exp⁄ít
 * 
CRT_exp⁄ít
;

239 i‡((
p
 = 
	`gëív
("SCREEN_GAMMA")Ë!
NULL
) {

240 
exp⁄ít
 = 
	`©of
(
p
);

242 i‡(
exp⁄ít
 > 0.0)

243 
deÁu…_gamma
 = 1.0 / 
exp⁄ít
;

246 i‡(
deÁu…_gamma
 == 0.0)

247 
deÁu…_gamma
 = 1.0 / 
deÁu…_di•œy_exp⁄ít
;

252 *++
¨gv
 && !
îr‹
) {

253 i‡(!
	`°∫cmp
(*
¨gv
, "-i", 2)) {

254 
w≤g_öfo
.
öãæa˚d
 = 
TRUE
;

255 } i‡(!
	`°∫cmp
(*
¨gv
, "-time", 3)) {

256 
w≤g_öfo
.
modtime
 = 
	`time
(
NULL
);

257 
w≤g_öfo
.
have_time
 = 
TRUE
;

258 } i‡(!
	`°∫cmp
(*
¨gv
, "-text", 3)) {

259 
ãxt
 = 
TRUE
;

260 } i‡(!
	`°∫cmp
(*
¨gv
, "-gamma", 2)) {

261 i‡(!*++
¨gv
)

262 ++
îr‹
;

264 
w≤g_öfo
.
gamma
 = 
	`©of
(*
¨gv
);

265 i‡(
w≤g_öfo
.
gamma
 <= 0.0)

266 ++
îr‹
;

267 i‡(
w≤g_öfo
.
gamma
 > 1.01)

268 
	`Ârötf
(
°dîr
, 
PROGNAME


271 } i‡(!
	`°∫cmp
(*
¨gv
, "-bgcolor", 4)) {

272 i‡(!*++
¨gv
)

273 ++
îr‹
;

275 
bg°r
 = *
¨gv
;

276 i‡(
	`°æí
(
bg°r
) != 7 || bgstr[0] != '#')

277 ++
îr‹
;

279 
r
, 
g
, 
b
;

281 
	`ssˇnf
(
bg°r
+1, "%2x%2x%2x", &
r
, &
g
, &
b
);

282 
w≤g_öfo
.
bg_ªd
 = (
uch
)
r
;

283 
w≤g_öfo
.
bg_gªí
 = (
uch
)
g
;

284 
w≤g_öfo
.
bg_blue
 = (
uch
)
b
;

285 
w≤g_öfo
.
have_bg
 = 
TRUE
;

289 i‡(**
¨gv
 != '-') {

290 
ö«me
 = *
¨gv
;

291 i‡(
¨gv
[1])

292 ++
îr‹
;

294 ++
îr‹
;

301 i‡(!
ö«me
) {

302 i‡(
	`ißây
(0)) {

303 
	`Ârötf
(
°dîr
, 
PROGNAME


305 ++
îr‹
;

307 #ifde‡
DOS_OS2_W32


309 
	`£tmode
(
	`fûío
(
°dö
), 
O_BINARY
);

310 
	`£tmode
(
	`fûío
(
°dout
), 
O_BINARY
);

312 i‡((
w≤g_öfo
.
öfûe
 = 
	`fd›í
(
	`fûío
(
°dö
), "rb")Ë=
NULL
) {

313 
	`Ârötf
(
°dîr
, 
PROGNAME


315 ++
îr‹
;

317 i‡((
w≤g_öfo
.
outfûe
 = 
	`fd›í
(
	`fûío
(
°dout
), "wb")Ë=
NULL
) {

318 
	`Ârötf
(
°dîr
, 
PROGNAME


320 
	`f˛o£
(
w≤g_öfo
.
öfûe
);

321 ++
îr‹
;

323 
w≤g_öfo
.
fûãr
 = 
TRUE
;

325 } i‡((
Àn
 = 
	`°æí
(
ö«me
)) > 250) {

326 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": input filename isÅooÜong [%d chars]\n",

327 
Àn
);

328 ++
îr‹
;

329 } i‡(!(
w≤g_öfo
.
öfûe
 = 
	`f›í
(
ö«me
, "rb"))) {

330 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": c™'à›í i≈uàfûê[%s]\n", 
ö«me
);

331 ++
îr‹
;

334 i‡(!
îr‹
) {

335 
	`fgës
(
≤mlöe
, 256, 
w≤g_öfo
.
öfûe
);

336 i‡(
≤mlöe
[0] !'P' || ((
≤mch¨
 =Önmline[1]) != '5' &&

337 
≤mch¨
 != '6' &&Önmchar != '8'))

339 
	`Ârötf
(
°dîr
, 
PROGNAME


341 
ö«me
);

342 ++
îr‹
;

344 
w≤g_öfo
.
≤mty≥
 = ()(
≤mch¨
 - '0');

345 i‡(
w≤g_öfo
.
≤mty≥
 != 8)

346 
w≤g_öfo
.
have_bg
 = 
FALSE
;

348 
	`fgës
(
≤mlöe
, 256, 
w≤g_öfo
.
öfûe
);

349 } 
≤mlöe
[0] == '#');

350 
	`ssˇnf
(
≤mlöe
, "%ld %ld", &
w≤g_öfo
.
width
, &w≤g_öfo.
height
);

352 
	`fgës
(
≤mlöe
, 256, 
w≤g_öfo
.
öfûe
);

353 } 
≤mlöe
[0] == '#');

354 
	`ssˇnf
(
≤mlöe
, "%d", &
maxvÆ
);

355 i‡(
w≤g_öfo
.
width
 <0L || w≤g_öfo.
height
 <= 0L ||

356 
maxvÆ
 != 255)

358 
	`Ârötf
(
°dîr
, 
PROGNAME


360 ++
îr‹
;

362 
w≤g_öfo
.
ßm∂e_dïth
 = 8;

364 i‡(!
w≤g_öfo
.
fûãr
) {

366 i‡((
p
 = 
	`°ºchr
(
ö«me
, '.')Ë=
NULL
 ||

367 (
p
 - 
ö«me
Ë!(
Àn
 - 4))

369 
	`°r˝y
(
ouäame
, 
ö«me
);

370 
	`°r˝y
(
ouäame
+
Àn
, ".png");

372 
Àn
 -= 4;

373 
	`°∫˝y
(
ouäame
, 
ö«me
, 
Àn
);

374 
	`°r˝y
(
ouäame
+
Àn
, ".png");

377 i‡((
w≤g_öfo
.
outfûe
 = 
	`f›í
(
ouäame
, "rb")Ë!
NULL
) {

378 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": output fileÉxists [%s]\n",

379 
ouäame
);

380 
	`f˛o£
(
w≤g_öfo
.
outfûe
);

381 ++
îr‹
;

382 } i‡(!(
w≤g_öfo
.
outfûe
 = 
	`f›í
(
ouäame
, "wb"))) {

383 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": can't open output file [%s]\n",

384 
ouäame
);

385 ++
îr‹
;

389 i‡(
îr‹
) {

390 
	`f˛o£
(
w≤g_öfo
.
öfûe
);

391 
w≤g_öfo
.
öfûe
 = 
NULL
;

392 i‡(
w≤g_öfo
.
fûãr
) {

393 
	`f˛o£
(
w≤g_öfo
.
outfûe
);

394 
w≤g_öfo
.
outfûe
 = 
NULL
;

402 i‡(
îr‹
) {

403 
	`Ârötf
(
°dîr
, "\n%†%s: %s\n", 
PROGNAME
, 
VERSION
, 
APPNAME
);

404 
	`wrôïng_vîsi⁄_öfo
();

405 
	`Ârötf
(
°dîr
, "\n"

429 "\n", 
PROGNAME
, PROGNAME, 
deÁu…_gamma
);

430 
	`exô
(1);

438 i‡(
ãxt
 &&

439 #i‚de‡
DOS_OS2_W32


440 (
keybd
 = 
	`fd›í
(
	`fûío
(
°dîr
), "r")Ë!
NULL
 &&

442 (
ãxtbuf
 = (*)
	`mÆloc
((5 + 9)*75)Ë!
NULL
)

444 
i
, 
vÆid
, 
ªsu…
;

446 
	`Ârötf
(
°dîr
,

448 
	`Ârötf
(
°dîr
, "to skipá field, hitÅhe <Enter> key.\n");

452 
vÆid
 = 
TRUE
;

453 
p
 = 
ãxtbuf
 + 
TEXT_TITLE_OFFSET
;

454 
	`Ârötf
(
°dîr
, " Title: ");

455 
	`fÊush
(
°dîr
);

456 i‡(
	`FGETS
(
p
, 74, 
keybd
Ë&& (
Àn
 = 
	`°æí
(p)) > 1) {

457 i‡(
p
[
Àn
-1] == '\n')

458 
p
[--
Àn
] = '\0';

459 
w≤g_öfo
.
tôÀ
 = 
p
;

460 
w≤g_öfo
.
have_ãxt
 |
TEXT_TITLE
;

461 i‡((
ªsu…
 = 
	`w≤g_isvÆid_œtö1
((
uch
 *)
p
, 
Àn
)) >= 0) {

462 
	`Ârötf
(
°dîr
, " " 
PROGNAME
 " warning: character code"

465 ()
p
[
ªsu…
], (p[result] == 27)? "strongly " : "",

466 
ªsu…
+1);

467 
	`fÊush
(
°dîr
);

468 #ifde‡
FORBID_LATIN1_CTRL


469 
w≤g_öfo
.
have_ãxt
 &~
TEXT_TITLE
;

470 
vÆid
 = 
FALSE
;

472 i‡(
p
[
ªsu…
] == 27) {

473 
w≤g_öfo
.
have_ãxt
 &~
TEXT_TITLE
;

474 
vÆid
 = 
FALSE
;

479 } !
vÆid
);

482 
vÆid
 = 
TRUE
;

483 
p
 = 
ãxtbuf
 + 
TEXT_AUTHOR_OFFSET
;

484 
	`Ârötf
(
°dîr
, " Author: ");

485 
	`fÊush
(
°dîr
);

486 i‡(
	`FGETS
(
p
, 74, 
keybd
Ë&& (
Àn
 = 
	`°æí
(p)) > 1) {

487 i‡(
p
[
Àn
-1] == '\n')

488 
p
[--
Àn
] = '\0';

489 
w≤g_öfo
.
auth‹
 = 
p
;

490 
w≤g_öfo
.
have_ãxt
 |
TEXT_AUTHOR
;

491 i‡((
ªsu…
 = 
	`w≤g_isvÆid_œtö1
((
uch
 *)
p
, 
Àn
)) >= 0) {

492 
	`Ârötf
(
°dîr
, " " 
PROGNAME
 " warning: character code"

495 ()
p
[
ªsu…
], (p[result] == 27)? "strongly " : "",

496 
ªsu…
+1);

497 
	`fÊush
(
°dîr
);

498 #ifde‡
FORBID_LATIN1_CTRL


499 
w≤g_öfo
.
have_ãxt
 &~
TEXT_AUTHOR
;

500 
vÆid
 = 
FALSE
;

502 i‡(
p
[
ªsu…
] == 27) {

503 
w≤g_öfo
.
have_ãxt
 &~
TEXT_AUTHOR
;

504 
vÆid
 = 
FALSE
;

509 } !
vÆid
);

512 
vÆid
 = 
TRUE
;

513 
p
 = 
ãxtbuf
 + 
TEXT_DESC_OFFSET
;

514 
	`Ârötf
(
°dîr
, " Description (upÅo 9Üines):\n");

515 
i
 = 1; i < 10; ++i) {

516 
	`Ârötf
(
°dîr
, " [%d] ", 
i
);

517 
	`fÊush
(
°dîr
);

518 i‡(
	`FGETS
(
p
, 74, 
keybd
Ë&& (
Àn
 = 
	`°æí
(p)) > 1)

519 
p
 +
Àn
;

523 i‡((
Àn
 = 
p
 - (
ãxtbuf
 + 
TEXT_DESC_OFFSET
)) > 1) {

524 i‡(
p
[-1] == '\n') {

525 
p
[-1] = '\0';

526 --
Àn
;

528 
w≤g_öfo
.
desc
 = 
ãxtbuf
 + 
TEXT_DESC_OFFSET
;

529 
w≤g_öfo
.
have_ãxt
 |
TEXT_DESC
;

530 
p
 = 
ãxtbuf
 + 
TEXT_DESC_OFFSET
;

531 i‡((
ªsu…
 = 
	`w≤g_isvÆid_œtö1
((
uch
 *)
p
, 
Àn
)) >= 0) {

532 
	`Ârötf
(
°dîr
, " " 
PROGNAME
 " warning: character code"

535 ()
p
[
ªsu…
], (p[result] == 27)? "strongly " : "",

536 
ªsu…
+1);

537 
	`fÊush
(
°dîr
);

538 #ifde‡
FORBID_LATIN1_CTRL


539 
w≤g_öfo
.
have_ãxt
 &~
TEXT_DESC
;

540 
vÆid
 = 
FALSE
;

542 i‡(
p
[
ªsu…
] == 27) {

543 
w≤g_öfo
.
have_ãxt
 &~
TEXT_DESC
;

544 
vÆid
 = 
FALSE
;

549 } !
vÆid
);

552 
vÆid
 = 
TRUE
;

553 
p
 = 
ãxtbuf
 + 
TEXT_COPY_OFFSET
;

554 
	`Ârötf
(
°dîr
, " Copyright: ");

555 
	`fÊush
(
°dîr
);

556 i‡(
	`FGETS
(
p
, 74, 
keybd
Ë&& (
Àn
 = 
	`°æí
(p)) > 1) {

557 i‡(
p
[
Àn
-1] == '\n')

558 
p
[--
Àn
] = '\0';

559 
w≤g_öfo
.
c›yright
 = 
p
;

560 
w≤g_öfo
.
have_ãxt
 |
TEXT_COPY
;

561 i‡((
ªsu…
 = 
	`w≤g_isvÆid_œtö1
((
uch
 *)
p
, 
Àn
)) >= 0) {

562 
	`Ârötf
(
°dîr
, " " 
PROGNAME
 " warning: character code"

565 ()
p
[
ªsu…
], (p[result] == 27)? "strongly " : "",

566 
ªsu…
+1);

567 
	`fÊush
(
°dîr
);

568 #ifde‡
FORBID_LATIN1_CTRL


569 
w≤g_öfo
.
have_ãxt
 &~
TEXT_COPY
;

570 
vÆid
 = 
FALSE
;

572 i‡(
p
[
ªsu…
] == 27) {

573 
w≤g_öfo
.
have_ãxt
 &~
TEXT_COPY
;

574 
vÆid
 = 
FALSE
;

579 } !
vÆid
);

582 
vÆid
 = 
TRUE
;

583 
p
 = 
ãxtbuf
 + 
TEXT_EMAIL_OFFSET
;

584 
	`Ârötf
(
°dîr
, " E-mail: ");

585 
	`fÊush
(
°dîr
);

586 i‡(
	`FGETS
(
p
, 74, 
keybd
Ë&& (
Àn
 = 
	`°æí
(p)) > 1) {

587 i‡(
p
[
Àn
-1] == '\n')

588 
p
[--
Àn
] = '\0';

589 
w≤g_öfo
.
emaû
 = 
p
;

590 
w≤g_öfo
.
have_ãxt
 |
TEXT_EMAIL
;

591 i‡((
ªsu…
 = 
	`w≤g_isvÆid_œtö1
((
uch
 *)
p
, 
Àn
)) >= 0) {

592 
	`Ârötf
(
°dîr
, " " 
PROGNAME
 " warning: character code"

595 ()
p
[
ªsu…
], (p[result] == 27)? "strongly " : "",

596 
ªsu…
+1);

597 
	`fÊush
(
°dîr
);

598 #ifde‡
FORBID_LATIN1_CTRL


599 
w≤g_öfo
.
have_ãxt
 &~
TEXT_EMAIL
;

600 
vÆid
 = 
FALSE
;

602 i‡(
p
[
ªsu…
] == 27) {

603 
w≤g_öfo
.
have_ãxt
 &~
TEXT_EMAIL
;

604 
vÆid
 = 
FALSE
;

609 } !
vÆid
);

612 
vÆid
 = 
TRUE
;

613 
p
 = 
ãxtbuf
 + 
TEXT_URL_OFFSET
;

614 
	`Ârötf
(
°dîr
, " URL: ");

615 
	`fÊush
(
°dîr
);

616 i‡(
	`FGETS
(
p
, 74, 
keybd
Ë&& (
Àn
 = 
	`°æí
(p)) > 1) {

617 i‡(
p
[
Àn
-1] == '\n')

618 
p
[--
Àn
] = '\0';

619 
w≤g_öfo
.
uæ
 = 
p
;

620 
w≤g_öfo
.
have_ãxt
 |
TEXT_URL
;

621 i‡((
ªsu…
 = 
	`w≤g_isvÆid_œtö1
((
uch
 *)
p
, 
Àn
)) >= 0) {

622 
	`Ârötf
(
°dîr
, " " 
PROGNAME
 " warning: character code"

625 ()
p
[
ªsu…
], (p[result] == 27)? "strongly " : "",

626 
ªsu…
+1);

627 
	`fÊush
(
°dîr
);

628 #ifde‡
FORBID_LATIN1_CTRL


629 
w≤g_öfo
.
have_ãxt
 &~
TEXT_URL
;

630 
vÆid
 = 
FALSE
;

632 i‡(
p
[
ªsu…
] == 27) {

633 
w≤g_öfo
.
have_ãxt
 &~
TEXT_URL
;

634 
vÆid
 = 
FALSE
;

639 } !
vÆid
);

641 #i‚de‡
DOS_OS2_W32


642 
	`f˛o£
(
keybd
);

645 } i‡(
ãxt
) {

646 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": unableÅoállocate memory forÅext\n");

647 
ãxt
 = 
FALSE
;

648 
w≤g_öfo
.
have_ãxt
 = 0;

654 i‡((
rc
 = 
	`wrôïng_öô
(&
w≤g_öfo
)) != 0) {

655 
rc
) {

657 
	`Ârötf
(
°dîr
, 
PROGNAME


661 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": insufficient memory\n");

664 
	`Ârötf
(
°dîr
, 
PROGNAME


668 
	`Ârötf
(
°dîr
, 
PROGNAME


672 
	`exô
(
rc
);

679 i‡(
ãxt
 && 
ãxtbuf
) {

680 
	`‰ì
(
ãxtbuf
);

681 
ãxtbuf
 = 
NULL
;

689 i‡(
w≤g_öfo
.
≤mty≥
 == 5)

690 
rowbyãs
 = 
w≤g_öfo
.
width
;

691 i‡(
w≤g_öfo
.
≤mty≥
 == 6)

692 
rowbyãs
 = 
w≤g_öfo
.
width
 * 3;

694 
rowbyãs
 = 
w≤g_öfo
.
width
 * 4;

700 
	`Ârötf
(
°dîr
, "Encoding image data...\n");

701 
	`fÊush
(
°dîr
);

703 i‡(
w≤g_öfo
.
öãæa˚d
) {

704 
i
;

705 
ulg
 
byãs
;

706 
ulg
 
image_byãs
;

709 i‡(
w≤g_öfo_height
 > ((
size_t
)(-1)/
rowbyãs
 ||

710 
w≤g_öfo_height
 > ((
ulg
)(-1)/
rowbyãs
) {

711 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": image_data bufferÅooÜarge\n");

712 
	`wrôïng_˛ónup
(&
w≤g_öfo
);

713 
	`w≤g_˛ónup
();

714 
	`exô
(5);

717 
image_byãs
 = 
rowbyãs
 * 
w≤g_öfo
.
height
;

719 
w≤g_öfo
.
image_d©a
 = (
uch
 *)
	`mÆloc
(
image_byãs
);

720 
w≤g_öfo
.
row_poöãrs
 = (
uch
 **)
	`mÆloc
(w≤g_öfo.
height
*(uch *));

721 i‡(
w≤g_öfo
.
image_d©a
 =
NULL
 || w≤g_öfo.
row_poöãrs
 == NULL) {

722 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": insufficient memory for image data\n");

723 
	`wrôïng_˛ónup
(&
w≤g_öfo
);

724 
	`w≤g_˛ónup
();

725 
	`exô
(5);

727 
i
 = 0; i < 
w≤g_öfo
.
height
; ++i)

728 
w≤g_öfo
.
row_poöãrs
[
i
] = w≤g_öfo.
image_d©a
 + i*
rowbyãs
;

729 
byãs
 = 
	`‰ód
(
w≤g_öfo
.
image_d©a
, 1, 
image_byãs
, w≤g_öfo.
öfûe
);

730 i‡(
byãs
 !
image_byãs
) {

731 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":Éxpected %lu bytes, got %lu bytes\n",

732 
image_byãs
, 
byãs
);

733 
	`Ârötf
(
°dîr
, " (continuingányway)\n");

735 i‡(
	`wrôïng_ícode_image
(&
w≤g_öfo
) != 0) {

736 
	`Ârötf
(
°dîr
, 
PROGNAME


738 
	`wrôïng_˛ónup
(&
w≤g_öfo
);

739 
	`w≤g_˛ónup
();

740 
	`exô
(2);

744 
j
;

745 
ulg
 
byãs
;

747 
w≤g_öfo
.
image_d©a
 = (
uch
 *)
	`mÆloc
(
rowbyãs
);

748 i‡(
w≤g_öfo
.
image_d©a
 =
NULL
) {

749 
	`Ârötf
(
°dîr
, 
PROGNAME
 ": insufficient memory forÑow data\n");

750 
	`wrôïng_˛ónup
(&
w≤g_öfo
);

751 
	`w≤g_˛ónup
();

752 
	`exô
(5);

754 
îr‹
 = 0;

755 
j
 = 
w≤g_öfo
.
height
; j > 0L; --j) {

756 
byãs
 = 
	`‰ód
(
w≤g_öfo
.
image_d©a
, 1, 
rowbyãs
, w≤g_öfo.
öfûe
);

757 i‡(
byãs
 !
rowbyãs
) {

758 
	`Ârötf
(
°dîr
, 
PROGNAME


759 ":Éx≥˘ed %lu byãs, gŸ %lu byã†‘ow %ld)\n", 
rowbyãs
,

760 
byãs
, 
w≤g_öfo
.
height
-
j
);

761 ++
îr‹
;

764 i‡(
	`wrôïng_ícode_row
(&
w≤g_öfo
) != 0) {

765 
	`Ârötf
(
°dîr
, 
PROGNAME


767 
w≤g_öfo
.
height
-
j
);

768 ++
îr‹
;

772 i‡(
îr‹
) {

773 
	`wrôïng_˛ónup
(&
w≤g_öfo
);

774 
	`w≤g_˛ónup
();

775 
	`exô
(2);

777 i‡(
	`wrôïng_ícode_föish
(&
w≤g_öfo
) != 0) {

778 
	`Ârötf
(
°dîr
, 
PROGNAME
 ":Érror on finalÜibpng call\n");

779 
	`wrôïng_˛ónup
(&
w≤g_öfo
);

780 
	`w≤g_˛ónup
();

781 
	`exô
(2);

788 
	`Ârötf
(
°dîr
, "Done.\n");

789 
	`fÊush
(
°dîr
);

791 
	`wrôïng_˛ónup
(&
w≤g_öfo
);

792 
	`w≤g_˛ónup
();

795 
	}
}

801 
	$w≤g_isvÆid_œtö1
(
uch
 *
p
, 
Àn
)

803 
i
, 
ªsu…
 = -1;

805 
i
 = 0; i < 
Àn
; ++i) {

806 i‡(
p
[
i
] == 10 || (p[i] > 31 &&Ö[i] < 127) ||Ö[i] > 160)

808 i‡(
ªsu…
 < 0 || (
p
[ªsu…] !27 &&Ö[
i
] == 27))

809 
ªsu…
 = 
i
;

812  
ªsu…
;

813 
	}
}

819 
	$w≤g_˛ónup
()

821 i‡(
w≤g_öfo
.
outfûe
) {

822 
	`f˛o£
(
w≤g_öfo
.
outfûe
);

823 
w≤g_öfo
.
outfûe
 = 
NULL
;

826 i‡(
w≤g_öfo
.
öfûe
) {

827 
	`f˛o£
(
w≤g_öfo
.
öfûe
);

828 
w≤g_öfo
.
öfûe
 = 
NULL
;

831 i‡(
w≤g_öfo
.
image_d©a
) {

832 
	`‰ì
(
w≤g_öfo
.
image_d©a
);

833 
w≤g_öfo
.
image_d©a
 = 
NULL
;

836 i‡(
w≤g_öfo
.
row_poöãrs
) {

837 
	`‰ì
(
w≤g_öfo
.
row_poöãrs
);

838 
w≤g_öfo
.
row_poöãrs
 = 
NULL
;

840 
	}
}

845 #ifde‡
DOS_OS2_W32


847 *
	$dos_kbd_gës
(*
buf
, 
Àn
)

849 
ch
, 
cou¡
=0;

852 
buf
[
cou¡
++] = 
ch
 = 
	`gëche
();

853 } 
ch
 !'\r' && 
cou¡
 < 
Àn
-1);

855 
buf
[
cou¡
--] = '\0';

856 i‡(
buf
[
cou¡
] == '\r')

857 
buf
[
cou¡
] = '\n';

859 
	`Ârötf
(
°dîr
, "\n");

860 
	`fÊush
(
°dîr
);

862  
buf
;

863 
	}
}

	@contrib/gregbook/writepng.c

57 
	~<°dlib.h
>

58 
	~<zlib.h
>

60 
	~"≤g.h
"

61 
	~"wrôïng.h
"

66 
wrôïng_îr‹_h™dÀr
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
);

70 
	$wrôïng_vîsi⁄_öfo
()

72 
	`Ârötf
(
°dîr
, " Compiled withÜibpng %s; usingÜibpng %s.\n",

73 
PNG_LIBPNG_VER_STRING
, 
≤g_lib≤g_vî
);

74 
	`Ârötf
(
°dîr
, " Compiled with zlib %s; using zlib %s.\n",

75 
ZLIB_VERSION
, 
zlib_vîsi⁄
);

76 
	}
}

84 
	$wrôïng_öô
(
maö¥og_öfo
 *
maö¥og_±r
)

86 
≤g_°ru˘p
 
≤g_±r
;

87 
≤g_öf›
 
öfo_±r
;

88 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
;

93 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
(
	`≤g_gë_lib≤g_vî
(
NULL
), 
maö¥og_±r
,

94 
wrôïng_îr‹_h™dÀr
, 
NULL
);

95 i‡(!
≤g_±r
)

98 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

99 i‡(!
öfo_±r
) {

100 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, 
NULL
);

111 i‡(
	`£tjmp
(
maö¥og_±r
->
jmpbuf
)) {

112 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

119 
	`≤g_öô_io
(
≤g_±r
, 
maö¥og_±r
->
outfûe
);

129 
	`≤g_£t_com¥essi⁄_Àvñ
(
≤g_±r
, 
Z_BEST_COMPRESSION
);

142 i‡(
maö¥og_±r
->
≤mty≥
 == 5)

143 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_GRAY
;

144 i‡(
maö¥og_±r
->
≤mty≥
 == 6)

145 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

146 i‡(
maö¥og_±r
->
≤mty≥
 == 8)

147 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB_ALPHA
;

149 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

153 
öãæa˚_ty≥
 = 
maö¥og_±r
->
öãæa˚d
? 
PNG_INTERLACE_ADAM7
 :

154 
PNG_INTERLACE_NONE
;

156 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
maö¥og_±r
->
width
, maö¥og_±r->
height
,

157 
maö¥og_±r
->
ßm∂e_dïth
, 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
,

158 
PNG_COMPRESSION_TYPE_DEFAULT
, 
PNG_FILTER_TYPE_DEFAULT
);

160 i‡(
maö¥og_±r
->
gamma
 > 0.0)

161 
	`≤g_£t_gAMA
(
≤g_±r
, 
öfo_±r
, 
maö¥og_±r
->
gamma
);

163 i‡(
maö¥og_±r
->
have_bg
) {

164 
≤g_cﬁ‹_16
 
background
;

166 
background
.
ªd
 = 
maö¥og_±r
->
bg_ªd
;

167 
background
.
gªí
 = 
maö¥og_±r
->
bg_gªí
;

168 
background
.
blue
 = 
maö¥og_±r
->
bg_blue
;

169 
	`≤g_£t_bKGD
(
≤g_±r
, 
öfo_±r
, &
background
);

172 i‡(
maö¥og_±r
->
have_time
) {

173 
≤g_time
 
modtime
;

175 
	`≤g_c⁄vît_‰om_time_t
(&
modtime
, 
maö¥og_±r
->modtime);

176 
	`≤g_£t_tIME
(
≤g_±r
, 
öfo_±r
, &
modtime
);

179 i‡(
maö¥og_±r
->
have_ãxt
) {

180 
≤g_ãxt
 
ãxt
[6];

181 
num_ãxt
 = 0;

183 i‡(
maö¥og_±r
->
have_ãxt
 & 
TEXT_TITLE
) {

184 
ãxt
[
num_ãxt
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

185 
ãxt
[
num_ãxt
].
key
 = "Title";

186 
ãxt
[
num_ãxt
].ãxà
maö¥og_±r
->
tôÀ
;

187 ++
num_ãxt
;

189 i‡(
maö¥og_±r
->
have_ãxt
 & 
TEXT_AUTHOR
) {

190 
ãxt
[
num_ãxt
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

191 
ãxt
[
num_ãxt
].
key
 = "Author";

192 
ãxt
[
num_ãxt
].ãxà
maö¥og_±r
->
auth‹
;

193 ++
num_ãxt
;

195 i‡(
maö¥og_±r
->
have_ãxt
 & 
TEXT_DESC
) {

196 
ãxt
[
num_ãxt
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

197 
ãxt
[
num_ãxt
].
key
 = "Description";

198 
ãxt
[
num_ãxt
].ãxà
maö¥og_±r
->
desc
;

199 ++
num_ãxt
;

201 i‡(
maö¥og_±r
->
have_ãxt
 & 
TEXT_COPY
) {

202 
ãxt
[
num_ãxt
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

203 
ãxt
[
num_ãxt
].
key
 = "Copyright";

204 
ãxt
[
num_ãxt
].ãxà
maö¥og_±r
->
c›yright
;

205 ++
num_ãxt
;

207 i‡(
maö¥og_±r
->
have_ãxt
 & 
TEXT_EMAIL
) {

208 
ãxt
[
num_ãxt
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

209 
ãxt
[
num_ãxt
].
key
 = "E-mail";

210 
ãxt
[
num_ãxt
].ãxà
maö¥og_±r
->
emaû
;

211 ++
num_ãxt
;

213 i‡(
maö¥og_±r
->
have_ãxt
 & 
TEXT_URL
) {

214 
ãxt
[
num_ãxt
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

215 
ãxt
[
num_ãxt
].
key
 = "URL";

216 
ãxt
[
num_ãxt
].ãxà
maö¥og_±r
->
uæ
;

217 ++
num_ãxt
;

219 
	`≤g_£t_ãxt
(
≤g_±r
, 
öfo_±r
, 
ãxt
, 
num_ãxt
);

225 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

238 
	`≤g_£t_∑ckög
(
≤g_±r
);

244 
maö¥og_±r
->
≤g_±r
 =Öng_ptr;

245 
maö¥og_±r
->
öfo_±r
 = info_ptr;

251 
	}
}

259 
	$wrôïng_ícode_image
(
maö¥og_öfo
 *
maö¥og_±r
)

261 
≤g_°ru˘p
 
≤g_±r
 = (≤g_°ru˘p)
maö¥og_±r
->png_ptr;

262 
≤g_öf›
 
öfo_±r
 = (≤g_öf›)
maö¥og_±r
->info_ptr;

268 i‡(
	`£tjmp
(
maö¥og_±r
->
jmpbuf
)) {

269 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

270 
maö¥og_±r
->
≤g_±r
 = 
NULL
;

271 
maö¥og_±r
->
öfo_±r
 = 
NULL
;

279 
	`≤g_wrôe_image
(
≤g_±r
, 
maö¥og_±r
->
row_poöãrs
);

286 
	`≤g_wrôe_íd
(
≤g_±r
, 
NULL
);

289 
	}
}

297 
	$wrôïng_ícode_row
(
maö¥og_öfo
 *
maö¥og_±r
)

299 
≤g_°ru˘p
 
≤g_±r
 = (≤g_°ru˘p)
maö¥og_±r
->png_ptr;

300 
≤g_öf›
 
öfo_±r
 = (≤g_öf›)
maö¥og_±r
->info_ptr;

306 i‡(
	`£tjmp
(
maö¥og_±r
->
jmpbuf
)) {

307 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

308 
maö¥og_±r
->
≤g_±r
 = 
NULL
;

309 
maö¥og_±r
->
öfo_±r
 = 
NULL
;

316 
	`≤g_wrôe_row
(
≤g_±r
, 
maö¥og_±r
->
image_d©a
);

319 
	}
}

327 
	$wrôïng_ícode_föish
(
maö¥og_öfo
 *
maö¥og_±r
)

329 
≤g_°ru˘p
 
≤g_±r
 = (≤g_°ru˘p)
maö¥og_±r
->png_ptr;

330 
≤g_öf›
 
öfo_±r
 = (≤g_öf›)
maö¥og_±r
->info_ptr;

336 i‡(
	`£tjmp
(
maö¥og_±r
->
jmpbuf
)) {

337 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

338 
maö¥og_±r
->
≤g_±r
 = 
NULL
;

339 
maö¥og_±r
->
öfo_±r
 = 
NULL
;

347 
	`≤g_wrôe_íd
(
≤g_±r
, 
NULL
);

350 
	}
}

356 
	$wrôïng_˛ónup
(
maö¥og_öfo
 *
maö¥og_±r
)

358 
≤g_°ru˘p
 
≤g_±r
 = (≤g_°ru˘p)
maö¥og_±r
->png_ptr;

359 
≤g_öf›
 
öfo_±r
 = (≤g_öf›)
maö¥og_±r
->info_ptr;

361 i‡(
≤g_±r
 && 
öfo_±r
)

362 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

363 
	}
}

369 
	$wrôïng_îr‹_h™dÀr
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
)

371 
maö¥og_öfo
 *
maö¥og_±r
;

382 
	`Ârötf
(
°dîr
, "wrôïngÜib≤gÉº‹: %s\n", 
msg
);

383 
	`fÊush
(
°dîr
);

385 
maö¥og_±r
 = 
	`≤g_gë_îr‹_±r
(
≤g_±r
);

386 i‡(
maö¥og_±r
 =
NULL
) {

387 
	`Ârötf
(
°dîr
,

389 
	`fÊush
(
°dîr
);

390 
	`exô
(99);

400 
	`l⁄gjmp
(
maö¥og_±r
->
jmpbuf
, 1);

401 
	}
}

	@contrib/gregbook/writepng.h

56 #i‚de‡
TRUE


57 
	#TRUE
 1

	)

58 
	#FALSE
 0

	)

61 #i‚de‡
MAX


62 
	#MAX
(
a
,
b
Ë(◊Ë> (b)? (aË: (b))

	)

63 
	#MIN
(
a
,
b
Ë(◊Ë< (b)? (aË: (b))

	)

66 #ifde‡
DEBUG


67 
	#Tø˚
(
x
Ë{
Ârötf
 x ; 
	`fÊush
(
°dîr
); fÊush(
°dout
);}

	)

69 
	#Tø˚
(
x
Ë;

	)

72 
	#TEXT_TITLE
 0x01

	)

73 
	#TEXT_AUTHOR
 0x02

	)

74 
	#TEXT_DESC
 0x04

	)

75 
	#TEXT_COPY
 0x08

	)

76 
	#TEXT_EMAIL
 0x10

	)

77 
	#TEXT_URL
 0x20

	)

79 
	#TEXT_TITLE_OFFSET
 0

	)

80 
	#TEXT_AUTHOR_OFFSET
 72

	)

81 
	#TEXT_COPY_OFFSET
 (2*72)

	)

82 
	#TEXT_EMAIL_OFFSET
 (3*72)

	)

83 
	#TEXT_URL_OFFSET
 (4*72)

	)

84 
	#TEXT_DESC_OFFSET
 (5*72)

	)

86 
	tuch
;

87 
	tush
;

88 
	tulg
;

90 
	s_maö¥og_öfo
 {

91 
	mgamma
;

92 
	mwidth
;

93 
	mheight
;

94 
time_t
 
	mmodtime
;

95 
FILE
 *
	möfûe
;

96 
FILE
 *
	moutfûe
;

97 *
	m≤g_±r
;

98 *
	möfo_±r
;

99 
uch
 *
	mimage_d©a
;

100 
uch
 **
	mrow_poöãrs
;

101 *
	mtôÀ
;

102 *
	mauth‹
;

103 *
	mdesc
;

104 *
	mc›yright
;

105 *
	memaû
;

106 *
	muæ
;

107 
	mfûãr
;

108 
	m≤mty≥
;

109 
	mßm∂e_dïth
;

110 
	möãæa˚d
;

111 
	mhave_bg
;

112 
	mhave_time
;

113 
	mhave_ãxt
;

114 
jmp_buf
 
	mjmpbuf
;

115 
uch
 
	mbg_ªd
;

116 
uch
 
	mbg_gªí
;

117 
uch
 
	mbg_blue
;

118 } 
	tmaö¥og_öfo
;

123 
wrôïng_vîsi⁄_öfo
();

125 
wrôïng_öô
(
maö¥og_öfo
 *
maö¥og_±r
);

127 
wrôïng_ícode_image
(
maö¥og_öfo
 *
maö¥og_±r
);

129 
wrôïng_ícode_row
(
maö¥og_öfo
 *
maö¥og_±r
);

131 
wrôïng_ícode_föish
(
maö¥og_öfo
 *
maö¥og_±r
);

133 
wrôïng_˛ónup
(
maö¥og_öfo
 *
maö¥og_±r
);

	@contrib/libtests/fakepng.c

10 
	~<°dio.h
>

11 
	~<zlib.h
>

14 
	$put_uL⁄g
(
uL⁄g
 
vÆ
)

16 
	`putch¨
(
vÆ
 >> 24);

17 
	`putch¨
(
vÆ
 >> 16);

18 
	`putch¨
(
vÆ
 >> 8);

19 
	`putch¨
(
vÆ
 >> 0);

20 
	}
}

23 
	$put_chunk
(c⁄° *
chunk
, 
uI¡
 
Àngth
)

25 
uL⁄g
 
¸c
;

27 
	`put_uL⁄g
(
Àngth
-4);

29 
	`fwrôe
(
chunk
, 
Àngth
, 1, 
°dout
);

31 
¸c
 = 
	`¸c32
(0, 
Z_NULL
, 0);

32 
	`put_uL⁄g
(
	`¸c32
(
¸c
, 
chunk
, 
Àngth
));

33 
	}
}

35 c⁄° 
	gsig«tuª
[] =

40 c⁄° 
	gIHDR
[] =

52 c⁄° 
	gunknown
[] =

58 
	$maö
()

60 
	`fwrôe
(
sig«tuª
,  sig«tuª, 1, 
°dout
);

61 
	`put_chunk
(
IHDR
,  IHDR);

64 
	`put_chunk
(
unknown
,  unknown);

65 
	}
}

	@contrib/libtests/makepng.c

2 
	#_ISOC99_SOURCE


	)

4 
	#COPYRIGHT
 "\251 2013,2015 Joh¿Cu¬ögham BowÀr"

	)

121 
	#IMAGE_LICENSING
 "DedicatedÅoÅheÖublic domainÖer Creative Commons "\

122 "li˚n£ \"CC0 1.0\"; hâps://¸ótivecomm⁄s.‹g/publicdomaö/zîo/1.0/"

	)

124 
	~<°ddef.h
>

125 
	~<°dlib.h
>

126 
	~<°dio.h
>

127 
	~<°rög.h
>

128 
	~<˘y≥.h
>

129 
	~<m©h.h
>

130 
	~<î∫o.h
>

131 
	~<as£π.h
>

132 
	~<°döt.h
>

134 #i‡
deföed
(
HAVE_CONFIG_H
Ë&& !deföed(
PNG_NO_CONFIG_H
)

135 
	~<c⁄fig.h
>

141 #ifde‡
PNG_FREESTANDING_TESTS


142 
	~<≤g.h
>

144 
	~"../../≤g.h
"

147 
	~<zlib.h
>

153 
	$Êo‹u
(
d
)

155 
d
 = 
	`Êo‹
(d);

156  ()
d
;

157 
	}
}

159 
≤g_byã


160 
	$Êo‹b
(
d
)

162 
d
 = 
	`Êo‹
(d);

163  (
≤g_byã
)
d
;

164 
	}
}

169 
	schunk_ö£π


171 
chunk_ö£π
 *
	m√xt
;

172 (*
	mö£π
)(
	m≤g_°ru˘p
, 
	m≤g_öf›
, , 
	m≤g_ch¨µ
);

173 
	m≈¨ams
;

174 
≤g_ch¨p
 
	m∑ømëîs
[1];

175 } 
	tchunk_ö£π
;

178 
	$ch™√ls_of_ty≥
(
cﬁ‹_ty≥
)

180 i‡(
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_PALETTE
)

185 
ch™√ls
 = 1;

187 i‡(
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
)

188 
ch™√ls
 = 3;

190 i‡(
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
)

191  
ch™√ls
 + 1;

194  
ch™√ls
;

196 
	}
}

199 
	$pixñ_dïth_of_ty≥
(
cﬁ‹_ty≥
, 
bô_dïth
)

201  
	`ch™√ls_of_ty≥
(
cﬁ‹_ty≥
Ë* 
bô_dïth
;

202 
	}
}

205 
	$image_size_of_ty≥
(
cﬁ‹_ty≥
, 
bô_dïth
, *
cﬁ‹s
,

206 
smÆl
)

208 i‡(*
cﬁ‹s
)

213 
pixñ_dïth
 = 
	`pixñ_dïth_of_ty≥
(
cﬁ‹_ty≥
, 
bô_dïth
);

215 i‡(
smÆl
)

217 i‡(
pixñ_dïth
 <= 8)

218  1 << 
pixñ_dïth
;

224 i‡(
pixñ_dïth
 < 8)

227 i‡(
pixñ_dïth
 > 16)

233 
	}
}

236 
	$£t_cﬁ‹
(
≤g_cﬁ‹p
 
cﬁ‹
, 
≤g_byãp
 
å™s
, 
ªd
,

237 
gªí
, 
blue
, 
Æpha
,

238 
≤g_c⁄°_byãp
 
gamma_èbÀ
)

240 
cﬁ‹
->
ªd
 = 
gamma_èbÀ
[red];

241 
cﬁ‹
->
gªí
 = 
gamma_èbÀ
[green];

242 
cﬁ‹
->
blue
 = 
gamma_èbÀ
[blue];

243 *
å™s
 = (
≤g_byã
)
Æpha
;

244 
	}
}

247 
	$gíî©e_∑Àâe
(
≤g_cﬁ‹p
 
∑Àâe
, 
≤g_byãp
 
å™s
, 
bô_dïth
,

248 
≤g_c⁄°_byãp
 
gamma_èbÀ
, *
cﬁ‹s
)

259 
cﬁ‹s
[0])

262 
	`Ârötf
(
°dîr
, "makepng: --colors=...: invalid count %u\n",

263 
cﬁ‹s
[0]);

264 
	`exô
(1);

267 
	`£t_cﬁ‹
(
∑Àâe
+0, 
å™s
+0, 
cﬁ‹s
[1], colors[1], colors[1], 255,

268 
gamma_èbÀ
);

272 
	`£t_cﬁ‹
(
∑Àâe
+0, 
å™s
+0, 
cﬁ‹s
[1], colors[1], colors[1],

273 
cﬁ‹s
[2], 
gamma_èbÀ
);

277 
	`£t_cﬁ‹
(
∑Àâe
+0, 
å™s
+0, 
cﬁ‹s
[1], colors[2], colors[3], 255,

278 
gamma_èbÀ
);

282 
	`£t_cﬁ‹
(
∑Àâe
+0, 
å™s
+0, 
cﬁ‹s
[1], colors[2], colors[3],

283 
cﬁ‹s
[4], 
gamma_èbÀ
);

287 i‡(
bô_dïth
 == 1)

289 
	`£t_cﬁ‹
(
∑Àâe
+0, 
å™s
+0, 255, 0, 0, 0, 
gamma_èbÀ
);

290 
	`£t_cﬁ‹
(
∑Àâe
+1, 
å™s
+1, 255, 255, 255, 255, 
gamma_èbÀ
);

296 
size
 = 1U << (
bô_dïth
/2);

297 
x
, 
y
;

298 vﬁ©ûê
ù
 = 0;

300 
x
=0; x<
size
; ++x)

302 
y
=0; y<
size
; ++y)

304 
ù
 = 
x
 + (
size
 * 
y
);

308 
	#öãΩ
(
pos
, 
c1
, 
c2
Ë(’o†* c1Ë+ ((
size
-posË* c2))

	)

309 
	#xyöãΩ
(
x
, 
y
, 
c1
, 
c2
, 
c3
, 
c4
Ë(((
size
 * size / 2) +\

310 (
	`öãΩ
(
x
, 
c1
, 
c2
Ë* 
y
 + (
size
-yË* i¡îp(x, 
c3
, 
c4
))) /\

311 (
size
*size))

	)

313 
	`£t_cﬁ‹
(
∑Àâe
+
ù
, 
å™s
+ip,

315 
	`xyöãΩ
(
x
, 
y
, 0, 255, 0, 255),

316 
	`xyöãΩ
(
x
, 
y
, 255, 0, 0, 255),

317 
	`xyöãΩ
(
x
, 
y
, 0, 0, 255, 255),

319 
	`xyöãΩ
(
x
, 
y
, 0, 102, 204, 255),

320 
gamma_èbÀ
);

324  
ù
+1;

327 
	}
}

330 
	$£t_vÆue
(
≤g_byãp
 
row
, 
size_t
 
rowbyãs
, 
≤g_uöt_32
 
x
, 
bô_dïth
,

331 
≤g_uöt_32
 
vÆue
, 
≤g_c⁄°_byãp
 
gamma_èbÀ
, 
c⁄v
)

333 
mask
 = (1U << 
bô_dïth
)-1;

335 
x
 *
bô_dïth
;

337 i‡(
vÆue
 <
mask
)

339 
≤g_uöt_32
 
off£t
 = 
x
 >> 3;

341 i‡(
off£t
 < 
rowbyãs
 && (
bô_dïth
 < 16 || offset+1 <Ñowbytes))

343 
row
 +
off£t
;

345 
bô_dïth
)

352 
shi·
 = (8 - 
bô_dïth
Ë- (
x
 & 0x7U);

354 
mask
 <<
shi·
;

355 
vÆue
 = (vÆuê<< 
shi·
Ë& 
mask
;

356 *
row
 = (
≤g_byã
)((*row & ~
mask
Ë| 
vÆue
);

361 
	`Ârötf
(
°dîr
, "makepng: bad bit depth (internalÉrror)\n");

362 
	`exô
(1);

365 
vÆue
 = 
	`Êo‹u
(65535*
	`pow
(vÆue/65535.,
c⁄v
)+.5);

366 *
row
++ = (
≤g_byã
)(
vÆue
 >> 8);

367 *
row
 = (
≤g_byã
)
vÆue
;

371 *
row
 = 
gamma_èbÀ
[
vÆue
];

378 
	`Ârötf
(
°dîr
, "makepng:Ñow buffer overflow (internalÉrror)\n");

379 
	`exô
(1);

385 
	`Ârötf
(
°dîr
, "makepng: component overflow (internalÉrror)\n");

386 
	`exô
(1);

388 
	}
}

391 
	$gíî©e_row
(
≤g_byãp
 
row
, 
size_t
 
rowbyãs
, 
y
, 
cﬁ‹_ty≥
,

392 
bô_dïth
, 
≤g_c⁄°_byãp
 
gamma_èbÀ
, 
c⁄v
,

393 *
cﬁ‹s
, 
smÆl
)

395 
fûãrs
 = 0;

396 
≤g_uöt_32
 
size_max
 =

397 
	`image_size_of_ty≥
(
cﬁ‹_ty≥
, 
bô_dïth
, 
cﬁ‹s
, 
smÆl
)-1;

398 
≤g_uöt_32
 
dïth_max
 = (1U << 
bô_dïth
)-1;

400 i‡(
cﬁ‹s
[0] =0 && 
smÆl
)

402 
pixñ_dïth
 = 
	`pixñ_dïth_of_ty≥
(
cﬁ‹_ty≥
, 
bô_dïth
);

408 
pixñ_dïth
)

411 
	`as£π
(
y
 =0 && 
rowbyãs
 =1 && 
size_max
 == 1);

412 
row
[0] = 0x6CU;

413 
fûãrs
 = 
PNG_FILTER_NONE
;

417 
	`as£π
(
y
 =0 && 
rowbyãs
 =1 && 
size_max
 == 3);

418 
row
[0] = 0x1BU;

419 
fûãrs
 = 
PNG_FILTER_NONE
;

423 
	`as£π
(
y
 =0 && 
rowbyãs
 =8 && 
size_max
 == 15);

424 
row
[0] = 0x01U;

425 
row
[1] = 0x23U;

426 
row
[2] = 0x45U;

427 
row
[3] = 0x67U;

428 
row
[4] = 0x89U;

429 
row
[5] = 0xABU;

430 
row
[6] = 0xCDU;

431 
row
[7] = 0xEFU;

432 
fûãrs
 = 
PNG_FILTER_SUB
;

441 
	`as£π
(
y
 =0 && 
rowbyãs
 =256 && 
size_max
 == 255);

444 
row
[
size_max
] = 0xFFU & (size_max+1);

445 i‡(
size_max
 == 0)

447 --
size_max
;

449 
fûãrs
 = 
PNG_FILTER_SUB
;

480 
	`as£π
(
rowbyãs
 =512 && 
size_max
 == 255);

483 
row
[2*
size_max
 ] = 0xFFU & size_max;

484 
row
[2*
size_max
+1] = 0xFFU & (size_max+
y
+1);

485 i‡(
size_max
 == 0)

487 --
size_max
;

492 
fûãrs
 = (
y
 =0 ? 
PNG_FILTER_SUB
+
PNG_FILTER_UP
 : PNG_FILTER_UP);

505 
	`as£π
(
size_max
 =255 && 
rowbyãs
 =256*(
pixñ_dïth
>>3));

506 
pixñ_dïth
 >>= 3;

507 
rowbyãs
 > 0)

509 c⁄° 
size_t
 
pixñ_ödex
 = --
rowbyãs
/
pixñ_dïth
;

511 i‡(
y
 == 0)

512 
row
[
rowbyãs
] = 0xFFU & 
pixñ_ödex
;

516 c⁄° 
size_t
 
byã_off£t
 =

517 
rowbyãs
 - 
pixñ_ödex
 * 
pixñ_dïth
;

519 
row
[
rowbyãs
] =

520 0xFFU & (
pixñ_ödex
 + (
byã_off£t
 * 2*
y
) + 1);

523 
fûãrs
 = (
y
 =0 ? 
PNG_FILTER_SUB
+
PNG_FILTER_UP
 : PNG_FILTER_UP);

527 
	`as£π
(0 );

531 
	`ch™√ls_of_ty≥
(
cﬁ‹_ty≥
))

538 
≤g_uöt_32
 
x
;

539 
≤g_uöt_32
 
ba£
 = 2*
size_max
 - 
	`abs
(2*
y
-size_max);

541 
x
=0; x<=
size_max
; ++x)

543 
≤g_uöt_32
 
luma
 = 
ba£
 - 
	`abs
(2*
x
-
size_max
);

548 
luma
 = (luma*
dïth_max
 + 
size_max
) / (2*size_max);

549 
	`£t_vÆue
(
row
, 
rowbyãs
, 
x
, 
bô_dïth
, 
luma
, 
gamma_èbÀ
, 
c⁄v
);

559 
≤g_uöt_32
 
Æpha
 = (
dïth_max
 * 
y
 * 2 + 
size_max
) / (2 * size_max);

560 
≤g_uöt_32
 
x
;

562 
x
=0; x<=
size_max
; ++x)

564 
	`£t_vÆue
(
row
, 
rowbyãs
, 2*
x
, 
bô_dïth
,

565 (
dïth_max
 * 
x
 * 2 + 
size_max
Ë/ (2 * size_max), 
gamma_èbÀ
,

566 
c⁄v
);

567 
	`£t_vÆue
(
row
, 
rowbyãs
, 2*
x
+1, 
bô_dïth
, 
Æpha
, 
gamma_èbÀ
,

568 
c⁄v
);

583 
≤g_uöt_32
 
Y
 = (
dïth_max
 * 
y
 * 2 + 
size_max
) / (2 * size_max);

584 
≤g_uöt_32
 
x
;

593 
x
=0; x<=
size_max
; ++x)

595 
	`£t_vÆue
(
row
, 
rowbyãs
, 3*
x
+0, 
bô_dïth
, 
Y
,

596 
gamma_èbÀ
, 
c⁄v
);

597 
	`£t_vÆue
(
row
, 
rowbyãs
, 3*
x
+1, 
bô_dïth
,

598 (
dïth_max
 * 
x
 * 2 + 
size_max
) / (2 * size_max),

599 
gamma_èbÀ
, 
c⁄v
);

600 
	`£t_vÆue
(
row
, 
rowbyãs
, 3*
x
+2, 
bô_dïth
,

601 (
Y
 * 
x
 * 2 + 
size_max
) / (2 * size_max),

602 
gamma_èbÀ
, 
c⁄v
);

618 
≤g_uöt_32
 
Y
 = (
dïth_max
 * 
y
 * 2 + 
size_max
) / (2 * size_max);

619 
≤g_uöt_32
 
x
;

629 
x
=0; x<=
size_max
; ++x)

631 
	`£t_vÆue
(
row
, 
rowbyãs
, 4*
x
+0, 
bô_dïth
,

632 ((
dïth_max
-
Y
Ë* 
x
 * 2 + 
size_max
) / (2 * size_max),

633 
gamma_èbÀ
, 
c⁄v
);

634 
	`£t_vÆue
(
row
, 
rowbyãs
, 4*
x
+1, 
bô_dïth
,

635 (
Y
 * 
x
 * 2 + 
size_max
) / (2 * size_max),

636 
gamma_èbÀ
, 
c⁄v
);

637 
	`£t_vÆue
(
row
, 
rowbyãs
, 4*
x
+2, 
bô_dïth
,

638 
Y
 - (Y * 
x
 * 2 + 
size_max
) / (2 * size_max),

639 
gamma_èbÀ
, 
c⁄v
);

640 
	`£t_vÆue
(
row
, 
rowbyãs
, 4*
x
+3, 
bô_dïth
,

641 
Y
 + ((
dïth_max
-YË* 
x
 * 2 + 
size_max
) / (2 * size_max),

642 
gamma_èbÀ
, 
c⁄v
);

648 
	`Ârötf
(
°dîr
, "makepng: internal bad channel count\n");

649 
	`exô
(2);

652 i‡(
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_PALETTE
)

657 
	`mem£t
(
row
, 0, 
rowbyãs
);

660 i‡(
cﬁ‹s
[0] =
	`ch™√ls_of_ty≥
(
cﬁ‹_ty≥
))

661 
	`ch™√ls_of_ty≥
(
cﬁ‹_ty≥
))

665 
≤g_uöt_32
 
luma
 = 
cﬁ‹s
[1];

666 
≤g_uöt_32
 
x
;

668 
x
=0; x<=
size_max
; ++x)

669 
	`£t_vÆue
(
row
, 
rowbyãs
, 
x
, 
bô_dïth
, 
luma
, 
gamma_èbÀ
,

670 
c⁄v
);

676 
≤g_uöt_32
 
luma
 = 
cﬁ‹s
[1];

677 
≤g_uöt_32
 
Æpha
 = 
cﬁ‹s
[2];

678 
≤g_uöt_32
 
x
;

680 
x
=0; x<
size_max
; ++x)

682 
	`£t_vÆue
(
row
, 
rowbyãs
, 2*
x
, 
bô_dïth
, 
luma
, 
gamma_èbÀ
,

683 
c⁄v
);

684 
	`£t_vÆue
(
row
, 
rowbyãs
, 2*
x
+1, 
bô_dïth
, 
Æpha
, 
gamma_èbÀ
,

685 
c⁄v
);

692 
≤g_uöt_32
 
ªd
 = 
cﬁ‹s
[1];

693 
≤g_uöt_32
 
gªí
 = 
cﬁ‹s
[2];

694 
≤g_uöt_32
 
blue
 = 
cﬁ‹s
[3];

695 
≤g_uöt_32
 
x
;

697 
x
=0; x<=
size_max
; ++x)

699 
	`£t_vÆue
(
row
, 
rowbyãs
, 3*
x
+0, 
bô_dïth
, 
ªd
, 
gamma_èbÀ
,

700 
c⁄v
);

701 
	`£t_vÆue
(
row
, 
rowbyãs
, 3*
x
+1, 
bô_dïth
, 
gªí
, 
gamma_èbÀ
,

702 
c⁄v
);

703 
	`£t_vÆue
(
row
, 
rowbyãs
, 3*
x
+2, 
bô_dïth
, 
blue
, 
gamma_èbÀ
,

704 
c⁄v
);

711 
≤g_uöt_32
 
ªd
 = 
cﬁ‹s
[1];

712 
≤g_uöt_32
 
gªí
 = 
cﬁ‹s
[2];

713 
≤g_uöt_32
 
blue
 = 
cﬁ‹s
[3];

714 
≤g_uöt_32
 
Æpha
 = 
cﬁ‹s
[4];

715 
≤g_uöt_32
 
x
;

717 
x
=0; x<=
size_max
; ++x)

719 
	`£t_vÆue
(
row
, 
rowbyãs
, 4*
x
+0, 
bô_dïth
, 
ªd
, 
gamma_èbÀ
,

720 
c⁄v
);

721 
	`£t_vÆue
(
row
, 
rowbyãs
, 4*
x
+1, 
bô_dïth
, 
gªí
, 
gamma_èbÀ
,

722 
c⁄v
);

723 
	`£t_vÆue
(
row
, 
rowbyãs
, 4*
x
+2, 
bô_dïth
, 
blue
, 
gamma_èbÀ
,

724 
c⁄v
);

725 
	`£t_vÆue
(
row
, 
rowbyãs
, 4*
x
+3, 
bô_dïth
, 
Æpha
, 
gamma_èbÀ
,

726 
c⁄v
);

732 
	`Ârötf
(
°dîr
, "makepng: internal bad channel count\n");

733 
	`exô
(2);

738 
	`Ârötf
(
°dîr
,

740 
cﬁ‹s
[0], 
	`ch™√ls_of_ty≥
(
cﬁ‹_ty≥
));

741 
	`exô
(1);

744  
fûãrs
;

745 
	}
}

748 
PNGCBAPI


749 
	$makïng_w¨nög
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
mesßge
)

751 c⁄° **
ï
 = 
	`≤g_gë_îr‹_±r
(
≤g_±r
);

752 c⁄° *
«me
;

754 i‡(
ï
 !
NULL
 && *ep != NULL)

755 
«me
 = *
ï
;

758 
«me
 = "makepng";

760 
	`Ârötf
(
°dîr
, "%s: w¨nög: %s\n", 
«me
, 
mesßge
);

761 
	}
}

763 
PNGCBAPI


764 
	$makïng_îr‹
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
mesßge
)

766 
	`makïng_w¨nög
(
≤g_±r
, 
mesßge
);

767 
	`≤g_l⁄gjmp
(
≤g_±r
, 1);

768 
	}
}

771 
	$wrôe_≤g
(c⁄° **
«me
, 
FILE
 *
Â
, 
cﬁ‹_ty≥
, 
bô_dïth
,

772 vﬁ©ûê
≤g_fixed_poöt
 
gamma
, 
chunk_ö£π
 * vﬁ©ûê
ö£π
,

773 
fûãrs
, *
cﬁ‹s
, 
smÆl
, 
tRNS
)

775 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
,

776 
«me
, 
makïng_îr‹
, 
makïng_w¨nög
);

777 vﬁ©ûê
≤g_öf›
 
öfo_±r
 = 
NULL
;

778 vﬁ©ûê
≤g_byãp
 
row
 = 
NULL
;

780 i‡(
≤g_±r
 =
NULL
)

782 
	`Ârötf
(
°dîr
, "makepng: OOMállocating write structure\n");

786 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
)))

788 
≤g_°ru˘p
 
nv_±r
 = 
≤g_±r
;

789 
≤g_öf›
 
nv_öfo
 = 
öfo_±r
;

791 
≤g_±r
 = 
NULL
;

792 
öfo_±r
 = 
NULL
;

793 
	`≤g_de°roy_wrôe_°ru˘
(&
nv_±r
, &
nv_öfo
);

794 i‡(
row
 !
NULL
Ë
	`‰ì
(row);

799 
	`≤g_£t_bíign_îr‹s
(
≤g_±r
, 1 );

804 i‡(
smÆl
)

805 
	`≤g_£t_com¥essi⁄_Àvñ
(
≤g_±r
, 
Z_BEST_COMPRESSION
);

807 
	`≤g_£t_ãxt_com¥essi⁄_Àvñ
(
≤g_±r
, 
Z_BEST_COMPRESSION
);

809 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

811 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

812 i‡(
öfo_±r
 =
NULL
)

813 
	`≤g_îr‹
(
≤g_±r
, "OOMállocating info structure");

816 
size
 =

817 
	`image_size_of_ty≥
(
cﬁ‹_ty≥
, 
bô_dïth
, 
cﬁ‹s
, 
smÆl
);

818 
ysize
;

819 
≤g_fixed_poöt
 
ªÆ_gamma
 = 45455;

820 
≤g_byã
 
gamma_èbÀ
[256];

821 
c⁄v
;

826 i‡(
smÆl
)

828 
pixñ_dïth
 =

829 
	`pixñ_dïth_of_ty≥
(
cﬁ‹_ty≥
, 
bô_dïth
);

831 i‡(
pixñ_dïth
 <= 8U)

833 
	`as£π
(
size
 =(1U<<
pixñ_dïth
));

834 
ysize
 = 1U;

839 
	`as£π
(
size
 == 256U);

840 
ysize
 = 256U;

845 
ysize
 = 
size
;

850 i‡(
gamma
 =
PNG_GAMMA_MAC_18
)

851 
gamma
 = 65909;

853 i‡(
gamma
 > 0 && gamma < 1000)

854 
gamma
 = 
PNG_FP_1
;

856 i‡(
gamma
 > 0)

857 
ªÆ_gamma
 = 
gamma
;

860 
i
;

862 i‡(
ªÆ_gamma
 == 45455)

864 
i
=0; i<256; ++i)

866 
gamma_èbÀ
[
i
] = (
≤g_byã
)i;

867 
c⁄v
 = 1.;

876 
c⁄v
 = 
ªÆ_gamma
;

877 
c⁄v
 /= 45455;

879 
gamma_èbÀ
[0] = 0;

881 
i
=1; i<255; ++i)

882 
gamma_èbÀ
[
i
] = 
	`Êo‹b
(
	`pow
(i/255.,
c⁄v
) * 255 + .5);

884 
gamma_èbÀ
[255] = 255;

888 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
size
, 
ysize
, 
bô_dïth
, 
cﬁ‹_ty≥
,

889 
PNG_INTERLACE_NONE
, 
PNG_COMPRESSION_TYPE_BASE
, 
PNG_FILTER_TYPE_BASE
);

891 i‡(
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_PALETTE
)

893 
≈Æëã
;

894 
≤g_cﬁ‹
 
∑Àâe
[256];

895 
≤g_byã
 
å™s
[256];

897 
≈Æëã
 = 
	`gíî©e_∑Àâe
(
∑Àâe
, 
å™s
, 
bô_dïth
, 
gamma_èbÀ
,

898 
cﬁ‹s
);

899 
	`≤g_£t_PLTE
(
≤g_±r
, 
öfo_±r
, 
∑Àâe
, 
≈Æëã
);

901 i‡(
tRNS
)

902 
	`≤g_£t_tRNS
(
≤g_±r
, 
öfo_±r
, 
å™s
, 
≈Æëã
-1,

903 
NULL
 );

906 
≈Æëã
=0;Çpalette<256; ++npalette)

907 
gamma_èbÀ
[
≈Æëã
] = (
≤g_byã
)npalette;

910 i‡(
tRNS
)

912 
≤g_cﬁ‹_16
 
cﬁ
;

914 
cﬁ
.
ªd
 = cﬁ.
gªí
 = cﬁ.
blue
 = cﬁ.
gøy
 =

915 0x0101U & ((1U<<
bô_dïth
)-1U);

916 
cﬁ
.
ödex
 = 0U;

917 
	`≤g_£t_tRNS
(
≤g_±r
, 
öfo_±r
, 
NULL
 , 1U, &
cﬁ
);

920 i‡(
gamma
 =
PNG_DEFAULT_sRGB
)

921 
	`≤g_£t_sRGB
(
≤g_±r
, 
öfo_±r
, 
PNG_sRGB_INTENT_ABSOLUTE
);

923 i‡(
gamma
 > 0)

925 
	`≤g_£t_gAMA_fixed
(
≤g_±r
, 
öfo_±r
, 
ªÆ_gamma
);

928 
	`≤g_£t_cHRM_fixed
(
≤g_±r
, 
öfo_±r
,

938 
ö£π
 !
NULL
)

940 
ö£π
->
	`ö£π
(
≤g_±r
, 
öfo_±r
, in£π->
≈¨ams
, in£π->
∑ømëîs
);

941 
ö£π
 = in£π->
√xt
;

945 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

948 
	`≤g_£t_fûãr
(
≤g_±r
, 
PNG_FILTER_TYPE_BASE
, 
fûãrs
);

951 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


952 
∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

954 
∑s£s
 = 1;

956 
∑ss
;

957 
size_t
 
rowbyãs
 = 
	`≤g_gë_rowbyãs
(
≤g_±r
, 
öfo_±r
);

959 
row
 = 
	`mÆloc
(
rowbyãs
);

961 i‡(
row
 =
NULL
)

962 
	`≤g_îr‹
(
≤g_±r
, "OOMállocatingÑow buffer");

964 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass)

966 
y
;

968 
y
=0; y<
ysize
; ++y)

970 
row_fûãrs
 =

971 
	`gíî©e_row
(
row
, 
rowbyãs
, 
y
, 
cﬁ‹_ty≥
, 
bô_dïth
,

972 
gamma_èbÀ
, 
c⁄v
, 
cﬁ‹s
, 
smÆl
);

974 i‡(
row_fûãrs
 !0 && 
fûãrs
 =
PNG_ALL_FILTERS
)

975 
	`≤g_£t_fûãr
(
≤g_±r
, 
PNG_FILTER_TYPE_BASE
, 
row_fûãrs
);

977 
	`≤g_wrôe_row
(
≤g_±r
, 
row
);

984 
	`≤g_wrôe_íd
(
≤g_±r
, 
öfo_±r
);

987 
≤g_°ru˘p
 
nv_±r
 = 
≤g_±r
;

988 
≤g_öf›
 
nv_öfo
 = 
öfo_±r
;

990 
≤g_±r
 = 
NULL
;

991 
öfo_±r
 = 
NULL
;

992 
	`≤g_de°roy_wrôe_°ru˘
(&
nv_±r
, &
nv_öfo
);

994 
	`‰ì
(
row
);

996 
	}
}

999 
size_t


1000 
	$lﬂd_fûe
(
≤g_c⁄°_ch¨p
 
«me
, 
≤g_byãµ
 
ªsu…
)

1002 
FILE
 *
Â
 = 
	`tmpfûe
();

1004 i‡(
Â
 !
NULL
)

1006 
FILE
 *
ù
 = 
	`f›í
(
«me
, "rb");

1008 i‡(
ù
 !
NULL
)

1010 
size_t
 
tŸÆ
 = 0;

1011 
ch
;

1015 
ch
 = 
	`gëc
(
ù
);

1016 i‡(
ch
 =
EOF
) ;

1017 
	`putc
(
ch
, 
Â
);

1018 ++
tŸÆ
;

1021 i‡(
	`„º‹
(
ù
))

1023 
	`≥º‹
(
«me
);

1024 
	`Ârötf
(
°dîr
, "%s:ÑódÉº‹\n", 
«me
);

1025 ()
	`f˛o£
(
ù
);

1030 ()
	`f˛o£
(
ù
);

1032 i‡(
	`„º‹
(
Â
))

1034 
	`≥º‹
("temporary file");

1035 
	`Ârötf
(
°dîr
, "temporary file writeÉrror\n");

1040 
	`ªwöd
(
Â
);

1042 i‡(
tŸÆ
 > 0)

1047 
≤g_byãp
 
d©a
 = 
	`mÆloc
((
tŸÆ
+3)&~3);

1049 i‡(
d©a
 !
NULL
)

1051 
size_t
 
√w_size
 = 0;

1055 
ch
 = 
	`gëc
(
Â
);

1056 i‡(
ch
 =
EOF
) ;

1057 
d©a
[
√w_size
++] = (
≤g_byã
)
ch
;

1060 i‡(
	`„º‹
(
Â
Ë|| 
√w_size
 !
tŸÆ
)

1062 
	`≥º‹
("temporary file");

1063 
	`Ârötf
(
°dîr
, "temporary fileÑeadÉrror\n");

1064 
	`‰ì
(
d©a
);

1069 ()
	`f˛o£
(
Â
);

1070 *
ªsu…
 = 
d©a
;

1071  
tŸÆ
;

1076 
	`Ârötf
(
°dîr
, "%s: ouào‡mem‹yÜﬂdög fûe\n", 
«me
);

1080 
	`Ârötf
(
°dîr
, "%s:Ém±y fûe\n", 
«me
);

1087 
	`≥º‹
(
«me
);

1088 
	`Ârötf
(
°dîr
, "%s: o≥¿Áûed\n", 
«me
);

1091 
	`f˛o£
(
Â
);

1095 
	`Ârötf
(
°dîr
, "makïng: %s: couldÇŸ o≥¿ãmp‹¨y fûe\n", 
«me
);

1097 
	`exô
(1);

1099 
	}
}

1101 
size_t


1102 
	$lﬂd_Áke
(
≤g_ch¨p
 
∑øm
, 
≤g_byãµ
 
¥ofûe
)

1104 *
íd±r
 = 
NULL
;

1105 
uöt64_t
 
size
 = 
	`°πouŒ
(
∑øm
, &
íd±r
, 0 );

1108 i‡(
íd±r
 !
NULL
 && *endptr == '*')

1110 
size_t
 
Àn
 = 
	`°æí
(++
íd±r
);

1111 
size_t
 
ªsu…
 = (size_t)
size
;

1113 i‡(
Àn
 == 0)Üen = 1;

1116 i‡(
ªsu…
 =
size
 && (*
¥ofûe
 = 
	`mÆloc
‘esu…)Ë!
NULL
)

1118 
≤g_byãp
 
out
 = *
¥ofûe
;

1120 i‡(
Àn
 == 1)

1121 
	`mem£t
(
out
, *
íd±r
, 
ªsu…
);

1125 
size
 >
Àn
)

1127 
	`mem˝y
(
out
, 
íd±r
, 
Àn
);

1128 
out
 +
Àn
;

1129 
size
 -
Àn
;

1131 
	`mem˝y
(
out
, 
íd±r
, 
size
);

1134  
ªsu…
;

1139 
	`Ârötf
(
°dîr
, "%s: sizêex˚ed†sy°emÜimôs\n", 
∑øm
);

1140 
	`exô
(1);

1145 
	}
}

1148 
	$check_∑øm_cou¡
(
≈¨ams
, 
ex≥˘
)

1150 i‡(
≈¨ams
 !
ex≥˘
)

1152 
	`Ârötf
(
°dîr
, "badÖarameter count (internalÉrror)\n");

1153 
	`exô
(1);

1155 
	}
}

1158 
	$ö£π_iCCP
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≈¨ams
,

1159 
≤g_ch¨µ
 
∑øms
)

1161 
≤g_byãp
 
¥ofûe
 = 
NULL
;

1162 
≤g_uöt_32
 
¥oÊí
 = 0;

1163 
ªsu…
;

1165 
	`check_∑øm_cou¡
(
≈¨ams
, 2);

1167 
∑øms
[1][0])

1171 
size_t
 
fûñí
 = 
	`lﬂd_fûe
(
∑øms
[1]+1, &
¥ofûe
);

1172 i‡(
fûñí
 > 0xfffffffc)

1174 
	`Ârötf
(
°dîr
, "%s: fileÅooÜong (%lu) forán ICCÖrofile\n",

1175 
∑øms
[1]+1, ()
fûñí
);

1176 
	`exô
(1);

1179 
¥oÊí
 = (
≤g_uöt_32
)
fûñí
;

1186 
size_t
 
Áke_Àn
 = 
	`lﬂd_Áke
(
∑øms
[1], &
¥ofûe
);

1188 i‡(
Áke_Àn
 > 0)

1190 i‡(
Áke_Àn
 > 0xffffffff)

1192 
	`Ârötf
(
°dîr
,

1194 
∑øms
[1], ()
Áke_Àn
);

1195 
	`exô
(1);

1197 
¥oÊí
 = (
≤g_uöt_32
)(
Áke_Àn
 & ~3U);

1199 
	`≤g_ßve_uöt_32
(
¥ofûe
, 
¥oÊí
);

1205 
	`Ârötf
(
°dîr
, "--ö£π iCCP \"%s\": uƒecognized\n", 
∑øms
[1]);

1206 
	`Ârötf
(
°dîr
, " use '<'ÅoÑeadá file: \"<filename\"\n");

1207 
	`exô
(1);

1210 
ªsu…
 = 1;

1212 i‡(
¥oÊí
 & 3)

1214 
	`Ârötf
(
°dîr
,

1216 
∑øms
[1]);

1221 
¥oÊí
 & 3)

1222 
¥ofûe
[
¥oÊí
++] = 0;

1225 i‡(
¥ofûe
 !
NULL
 && 
¥oÊí
 > 3)

1227 
≤g_uöt_32
 
¥of_hódî
 = 
	`≤g_gë_uöt_32
(
¥ofûe
);

1229 i‡(
¥of_hódî
 !
¥oÊí
)

1231 
	`Ârötf
(
°dîr
, "--insert iCCP %s:ÖrofileÜength field wrong:\n",

1232 
∑øms
[1]);

1233 
	`Ârötf
(
°dîr
, "áctual %lu,Ñecorded value %lu (corrected)\n",

1234 ()
¥oÊí
, ()
¥of_hódî
);

1235 
	`≤g_ßve_uöt_32
(
¥ofûe
, 
¥oÊí
);

1239 i‡(
ªsu…
 && 
¥ofûe
 !
NULL
 && 
¥oÊí
 >=4)

1240 
	`≤g_£t_iCCP
(
≤g_±r
, 
öfo_±r
, 
∑øms
[0], 
PNG_COMPRESSION_TYPE_BASE
,

1241 
¥ofûe
, 
¥oÊí
);

1243 i‡(
¥ofûe
)

1244 
	`‰ì
(
¥ofûe
);

1246 i‡(!
ªsu…
)

1247 
	`exô
(1);

1248 
	}
}

1251 
	$˛ór_ãxt
(
≤g_ãxt
 *
ãxt
, 
≤g_ch¨p
 
keyw‹d
)

1253 
ãxt
->
com¥essi⁄
 = -1;

1254 
ãxt
->
key
 = 
keyw‹d
;

1255 
ãxt
->ãxà
NULL
;

1256 
ãxt
->
ãxt_Àngth
 = 0;

1257 
ãxt
->
ôxt_Àngth
 = 0;

1258 
ãxt
->
œng
 = 
NULL
;

1259 
ãxt
->
œng_key
 = 
NULL
;

1260 
	}
}

1263 
	$£t_ãxt
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≤g_ãxç
 
ãxt
,

1264 
≤g_ch¨p
 
∑øm
)

1266 
∑øm
[0])

1270 
≤g_byãp
 
fûe
 = 
NULL
;

1272 
ãxt
->
ãxt_Àngth
 = 
	`lﬂd_fûe
(
∑øm
+1, &
fûe
);

1273 
ãxt
->ãxà(
≤g_ch¨p
)
fûe
;

1280 
≤g_byãp
 
d©a
 = 
NULL
;

1281 
size_t
 
Áke_Àn
 = 
	`lﬂd_Áke
(
∑øm
, &
d©a
);

1283 i‡(
Áke_Àn
 > 0)

1285 
ãxt
->
ãxt_Àngth
 = 
Áke_Àn
;

1286 
ãxt
->ãxà(
≤g_ch¨p
)
d©a
;

1292 
ãxt
->ãxà
∑øm
;

1296 
	`≤g_£t_ãxt
(
≤g_±r
, 
öfo_±r
, 
ãxt
, 1);

1298 i‡(
ãxt
->ãxà!
∑øm
)

1299 
	`‰ì
(
ãxt
->text);

1300 
	}
}

1303 
	$ö£π_tEXt
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≈¨ams
,

1304 
≤g_ch¨µ
 
∑øms
)

1306 
≤g_ãxt
 
ãxt
;

1308 
	`check_∑øm_cou¡
(
≈¨ams
, 2);

1309 
	`˛ór_ãxt
(&
ãxt
, 
∑øms
[0]);

1310 
	`£t_ãxt
(
≤g_±r
, 
öfo_±r
, &
ãxt
, 
∑øms
[1]);

1311 
	}
}

1314 
	$ö£π_zTXt
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≈¨ams
,

1315 
≤g_ch¨µ
 
∑øms
)

1317 
≤g_ãxt
 
ãxt
;

1319 
	`check_∑øm_cou¡
(
≈¨ams
, 2);

1320 
	`˛ór_ãxt
(&
ãxt
, 
∑øms
[0]);

1321 
ãxt
.
com¥essi⁄
 = 0;

1322 
	`£t_ãxt
(
≤g_±r
, 
öfo_±r
, &
ãxt
, 
∑øms
[1]);

1323 
	}
}

1326 
	$ö£π_iTXt
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≈¨ams
,

1327 
≤g_ch¨µ
 
∑øms
)

1329 
≤g_ãxt
 
ãxt
;

1331 
	`check_∑øm_cou¡
(
≈¨ams
, 4);

1332 
	`˛ór_ãxt
(&
ãxt
, 
∑øms
[0]);

1333 
ãxt
.
com¥essi⁄
 = 2;

1334 
ãxt
.
œng
 = 
∑øms
[1];

1335 
ãxt
.
œng_key
 = 
∑øms
[2];

1336 
	`£t_ãxt
(
≤g_±r
, 
öfo_±r
, &
ãxt
, 
∑øms
[3]);

1337 
	}
}

1340 
	$ö£π_hIST
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≈¨ams
,

1341 
≤g_ch¨µ
 
∑øms
)

1343 
i
;

1344 
≤g_uöt_16
 
‰eq
[256];

1349 
	`mem£t
(
‰eq
, 0,  freq);

1350 
i
=0; i<
≈¨ams
; ++i)

1352 *
íd±r
 = 
NULL
;

1353 
l
 = 
	`°πoul
(
∑øms
[
i
], &
íd±r
, 0 );

1355 i‡(
∑øms
[
i
][0] && *
íd±r
 =0 && 
l
 <= 65535)

1356 
‰eq
[
i
] = (
≤g_uöt_16
)
l
;

1360 
	`Ârötf
(
°dîr
, "hIST[%d]: %s: invÆid fªquícy\n", 
i
, 
∑øms
[i]);

1361 
	`exô
(1);

1365 
	`≤g_£t_hIST
(
≤g_±r
, 
öfo_±r
, 
‰eq
);

1366 
	}
}

1368 
≤g_byã


1369 
	$bvÆ
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_ch¨p
 
∑øm
, 
maxvÆ
)

1371 *
íd±r
 = 
NULL
;

1372 
l
 = 
	`°πoul
(
∑øm
, &
íd±r
, 0 );

1374 i‡(
∑øm
[0] && *
íd±r
 =0 && 
l
 <
maxvÆ
)

1375  (
≤g_byã
)
l
;

1378 
	`≤g_îr‹
(
≤g_±r
, "sBIT: invalid sBIT value");

1379 
	}
}

1382 
	$ö£π_sBIT
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≈¨ams
,

1383 
≤g_ch¨µ
 
∑øms
)

1385 
˘
 = 
	`≤g_gë_cﬁ‹_ty≥
(
≤g_±r
, 
öfo_±r
);

1386 
c
 = (
˘
 & 
PNG_COLOR_MASK_COLOR
 ? 3 : 1) +

1387 (
˘
 & 
PNG_COLOR_MASK_ALPHA
 ? 1 : 0);

1388 
maxvÆ
 =

1389 
˘
 & 
PNG_COLOR_MASK_PALETTE
 ? 8U : 
	`≤g_gë_bô_dïth
(
≤g_±r
, 
öfo_±r
);

1390 
≤g_cﬁ‹_8
 
sBIT
;

1392 i‡(
≈¨ams
 !
c
)

1393 
	`≤g_îr‹
(
≤g_±r
, "sBIT: incorrectÖarameter count");

1395 i‡(
˘
 & 
PNG_COLOR_MASK_COLOR
)

1397 
sBIT
.
ªd
 = 
	`bvÆ
(
≤g_±r
, 
∑øms
[0], 
maxvÆ
);

1398 
sBIT
.
gªí
 = 
	`bvÆ
(
≤g_±r
, 
∑øms
[1], 
maxvÆ
);

1399 
sBIT
.
blue
 = 
	`bvÆ
(
≤g_±r
, 
∑øms
[2], 
maxvÆ
);

1400 
sBIT
.
gøy
 = 42;

1405 
sBIT
.
ªd
 = sBIT.
gªí
 = sBIT.
blue
 = 42;

1406 
sBIT
.
gøy
 = 
	`bvÆ
(
≤g_±r
, 
∑øms
[0], 
maxvÆ
);

1409 i‡(
˘
 & 
PNG_COLOR_MASK_ALPHA
)

1410 
sBIT
.
Æpha
 = 
	`bvÆ
(
≤g_±r
, 
∑øms
[
≈¨ams
-1], 
maxvÆ
);

1413 
sBIT
.
Æpha
 = 42;

1415 
	`≤g_£t_sBIT
(
≤g_±r
, 
öfo_±r
, &
sBIT
);

1416 
	}
}

1420 
	$ö£π_sPLT
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
, 
≈¨ams
, 
≤g_ch¨µ
 
∑øms
)

1422 
	`Ârötf
(
°dîr
, "insert sPLT: NYI\n");

1423 
	}
}

1427 
	$föd_∑ømëîs
(
≤g_c⁄°_ch¨p
 
wh©
, 
≤g_ch¨p
 
∑øm
,Öng_ch¨∞*
li°
,

1428 
≈¨ams
)

1433 
i
;

1434 
i
=0; *
∑øm
 && i<
≈¨ams
; ++i)

1436 
li°
[
i
] = 
∑øm
;

1437 *++
∑øm
)

1439 i‡(*
∑øm
 == '\n' || *param == ':')

1441 *
∑øm
++ = 0;

1447 i‡(*
∑øm
)

1449 
	`Ârötf
(
°dîr
, "--ö£π %s:Åoÿm™yÖ¨amëî†(%s)\n", 
wh©
, 
∑øm
);

1450 
	`exô
(1);

1453 
li°
[
i
] = 
NULL
;

1454  
i
;

1455 
	}
}

1458 
	$bad_∑ømëî_cou¡
(
≤g_c⁄°_ch¨p
 
wh©
, 
≈¨ams
)

1460 
	`Ârötf
(
°dîr
, "--ö£π %s: badÖ¨amëî cou¡ %d\n", 
wh©
, 
≈¨ams
);

1461 
	`exô
(1);

1462 
	}
}

1464 
chunk_ö£π
 *

1465 
	$make_ö£π
(
≤g_c⁄°_ch¨p
 
wh©
,

1466 (*
ö£π
)(
≤g_°ru˘p
, 
≤g_öf›
, , 
≤g_ch¨µ
),

1467 
≈¨ams
, 
≤g_ch¨µ
 
li°
)

1469 
i
;

1470 
chunk_ö£π
 *
cù
;

1472 
cù
 = 
	`mÆloc
(
	`off£tof
(
chunk_ö£π
,
∑ømëîs
) +

1473 
≈¨ams
 *  (
≤g_ch¨p
));

1475 i‡(
cù
 =
NULL
)

1477 
	`Ârötf
(
°dîr
, "--insert %s: out of memoryállocating %dÖarameters\n",

1478 
wh©
, 
≈¨ams
);

1479 
	`exô
(1);

1482 
cù
->
√xt
 = 
NULL
;

1483 
cù
->
ö£π
 = insert;

1484 
cù
->
≈¨ams
 =Çparams;

1485 
i
=0; i<
≈¨ams
; ++i)

1486 
cù
->
∑ømëîs
[
i
] = 
li°
[i];

1488  
cù
;

1489 
	}
}

1491 
chunk_ö£π
 *

1492 
	$föd_ö£π
(
≤g_c⁄°_ch¨p
 
wh©
, 
≤g_ch¨p
 
∑øm
)

1494 
≤g_uöt_32
 
chunk
 = 0;

1495 
≤g_ch¨p
 
∑ømëî_li°
[1024];

1496 
i
, 
≈¨ams
;

1499 
i
=0; i<4; ++i)

1501 
ch
 = 
wh©
[
i
];

1503 i‡((
ch
 >= 65 && ch <= 90) || (ch >= 97 && ch <= 122))

1504 
chunk
 = (chunk << 8Ë+ 
wh©
[
i
];

1510 i‡(
i
 < 4 || 
wh©
[4] != 0)

1512 
	`Ârötf
(
°dîr
, "makïng --ö£π \"%s\": invÆid chunkÇame\n", 
wh©
);

1513 
	`exô
(1);

1517 
≈¨ams
 = 
	`föd_∑ømëîs
(
wh©
, 
∑øm
, 
∑ømëî_li°
, 1024);

1519 
	#CHUNK
(
a
,
b
,
c
,
d
Ë((◊)<<24)+((b)<<16)+((c)<<8)+(d))

	)

1521 
chunk
)

1523 
	`CHUNK
(105,67,67,80):

1524 i‡(
≈¨ams
 == 2)

1525  
	`make_ö£π
(
wh©
, 
ö£π_iCCP
, 
≈¨ams
, 
∑ømëî_li°
);

1528 
	`CHUNK
(116,69,88,116):

1529 i‡(
≈¨ams
 == 2)

1530  
	`make_ö£π
(
wh©
, 
ö£π_tEXt
, 
≈¨ams
, 
∑ømëî_li°
);

1533 
	`CHUNK
(122,84,88,116):

1534 i‡(
≈¨ams
 == 2)

1535  
	`make_ö£π
(
wh©
, 
ö£π_zTXt
, 
≈¨ams
, 
∑ømëî_li°
);

1538 
	`CHUNK
(105,84,88,116):

1539 i‡(
≈¨ams
 == 4)

1540  
	`make_ö£π
(
wh©
, 
ö£π_iTXt
, 
≈¨ams
, 
∑ømëî_li°
);

1543 
	`CHUNK
(104,73,83,84):

1544 i‡(
≈¨ams
 <= 256)

1545  
	`make_ö£π
(
wh©
, 
ö£π_hIST
, 
≈¨ams
, 
∑ømëî_li°
);

1548 
	`CHUNK
(115,66,73,84):

1549 i‡(
≈¨ams
 <= 4)

1550  
	`make_ö£π
(
wh©
, 
ö£π_sBIT
, 
≈¨ams
, 
∑ømëî_li°
);

1554 
	`CHUNK
(115,80,76,84):

1555  
	`make_ö£π
(
wh©
, 
ö£π_sPLT
, 
≈¨ams
, 
∑ømëî_li°
);

1559 
	`Ârötf
(
°dîr
, "makepng --insert \"%s\": unrecognized chunkÇame\n",

1560 
wh©
);

1561 
	`exô
(1);

1564 
	`bad_∑ømëî_cou¡
(
wh©
, 
≈¨ams
);

1565  
NULL
;

1566 
	}
}

1571 
≤g_ch¨p


1572 
	$°r°ash
(
≤g_c⁄°_ch¨p
 
foo
)

1577 i‡(
foo
 !
NULL
)

1579 
≤g_ch¨p
 
b¨
 = 
	`mÆloc
(
	`°æí
(
foo
)+1);

1580  
	`°r˝y
(
b¨
, 
foo
);

1583  
NULL
;

1584 
	}
}

1586 
≤g_ch¨p


1587 
	$°r°ash_li°
(c⁄° 
≤g_c⁄°_ch¨p
 *
ãxt
)

1589 
size_t
 
foo
 = 0;

1590 
≤g_ch¨p
 
ªsu…
, 
b¨
;

1591 c⁄° 
≤g_c⁄°_ch¨p
 *
löe
 = 
ãxt
;

1593 *
löe
 !
NULL
)

1594 
foo
 +
	`°æí
(*
löe
++);

1596 
ªsu…
 = 
b¨
 = 
	`mÆloc
(
foo
+1);

1598 
löe
 = 
ãxt
;

1599 *
löe
 !
NULL
)

1601 
foo
 = 
	`°æí
(*
löe
);

1602 
	`mem˝y
(
b¨
, *
löe
++, 
foo
);

1603 
b¨
 +
foo
;

1606 *
b¨
 = 0;

1607  
ªsu…
;

1608 
	}
}

1613 
chunk_ö£π
 *

1614 
	$add_tEXt
(c⁄° *
key
, c⁄° 
≤g_c⁄°_ch¨p
 *
ãxt
)

1616 
wh©
[5] = { 116, 69, 88, 116, 0 };

1617 
≤g_ch¨p
 
∑ømëî_li°
[3];

1619 
∑ømëî_li°
[0] = 
	`°r°ash
(
key
);

1620 
∑ømëî_li°
[1] = 
	`°r°ash_li°
(
ãxt
);

1621 
∑ømëî_li°
[2] = 
NULL
;

1623  
	`make_ö£π
(
wh©
, 
ö£π_tEXt
, 2, 
∑ømëî_li°
);

1624 
	}
}

1626 
chunk_ö£π
 *

1627 
	$add_iTXt
(c⁄° *
key
, c⁄° *
œnguage
, c⁄° *
œnguage_key
,

1628 c⁄° 
≤g_c⁄°_ch¨p
 *
ãxt
)

1630 
wh©
[5] = { 105, 84, 88, 116, 0 };

1631 
≤g_ch¨p
 
∑ømëî_li°
[5];

1633 
∑ømëî_li°
[0] = 
	`°r°ash
(
key
);

1634 
∑ømëî_li°
[1] = 
	`°r°ash
(
œnguage
);

1635 
∑ømëî_li°
[2] = 
	`°r°ash
(
œnguage_key
);

1636 
∑ømëî_li°
[3] = 
	`°r°ash_li°
(
ãxt
);

1637 
∑ømëî_li°
[4] = 
NULL
;

1639  
	`make_ö£π
(
wh©
, 
ö£π_iTXt
, 4, 
∑ømëî_li°
);

1640 
	}
}

1647 
	$∑r£_cﬁ‹
(*
¨g
, *
cﬁ‹s
)

1649 
ncﬁ‹s
 = 0;

1651 *
¨g
 && 
ncﬁ‹s
 < 4)

1653 *
ï
 = 
¨g
;

1655 
ul
 = 
	`°πoul
(
¨g
, &
ï
, 0);

1657 i‡(
ul
 > 65535)

1659 
	`Ârötf
(
°dîr
, "makïng --cﬁ‹=...'%s':Åoÿbig\n", 
¨g
);

1660 
	`exô
(1);

1663 i‡(
ï
 =
¨g
)

1665 
	`Ârötf
(
°dîr
, "makïng --cﬁ‹=...'%s':ÇŸá vÆid cﬁ‹\n", 
¨g
);

1666 
	`exô
(1);

1669 i‡(*
ï
) ++ep;

1670 
¨g
 = 
ï
;

1672 
cﬁ‹s
[++
ncﬁ‹s
] = ()
ul
;

1675 i‡(*
¨g
)

1677 
	`Ârötf
(
°dîr
, "makïng --cﬁ‹=...'%s':Åoÿm™y vÆues\n", 
¨g
);

1678 
	`exô
(1);

1681 *
cﬁ‹s
 = 
ncﬁ‹s
;

1682 
	}
}

1685 
	$maö
(
¨gc
, **
¨gv
)

1687 
FILE
 *
Â
 = 
°dout
;

1688 c⁄° *
fûe_«me
 = 
NULL
;

1689 
cﬁ‹_ty≥
 = 8;

1690 
bô_dïth
 = 32;

1691 
smÆl
 = 0;

1692 
tRNS
 = 0;

1693 
cﬁ‹s
[5];

1694 
fûãrs
 = 
PNG_ALL_FILTERS
;

1695 
≤g_fixed_poöt
 
gamma
 = 0;

1696 
chunk_ö£π
 *
hód_ö£π
 = 
NULL
;

1697 
chunk_ö£π
 **
ö£π_±r
 = &
hód_ö£π
;

1699 
	`mem£t
(
cﬁ‹s
, 0,  colors);

1701 --
¨gc
 > 0)

1703 *
¨g
 = *++
¨gv
;

1705 i‡(
	`°rcmp
(
¨g
, "--small") == 0)

1707 
smÆl
 = 1;

1711 i‡(
	`°rcmp
(
¨g
, "--tRNS") == 0)

1713 
tRNS
 = 1;

1717 i‡(
	`°rcmp
(
¨g
, "--sRGB") == 0)

1719 
gamma
 = 
PNG_DEFAULT_sRGB
;

1723 i‡(
	`°rcmp
(
¨g
, "--linear") == 0)

1725 
gamma
 = 
PNG_FP_1
;

1729 i‡(
	`°rcmp
(
¨g
, "--1.8") == 0)

1731 
gamma
 = 
PNG_GAMMA_MAC_18
;

1735 i‡(
	`°rcmp
(
¨g
, "--nofilters") == 0)

1737 
fûãrs
 = 
PNG_FILTER_NONE
;

1741 i‡(
	`°∫cmp
(
¨g
, "--color=", 8) == 0)

1743 
	`∑r£_cﬁ‹
(
¨g
+8, 
cﬁ‹s
);

1747 i‡(
¨gc
 >3 && 
	`°rcmp
(
¨g
, "--insert") == 0)

1749 
≤g_c⁄°_ch¨p
 
wh©
 = *++
¨gv
;

1750 
≤g_ch¨p
 
∑øm
 = *++
¨gv
;

1751 
chunk_ö£π
 *
√w_ö£π
;

1753 
¨gc
 -= 2;

1755 
√w_ö£π
 = 
	`föd_ö£π
(
wh©
, 
∑øm
);

1757 i‡(
√w_ö£π
 !
NULL
)

1759 *
ö£π_±r
 = 
√w_ö£π
;

1760 
ö£π_±r
 = &
√w_ö£π
->
√xt
;

1766 i‡(
¨g
[0] == '-')

1768 
	`Ârötf
(
°dîr
, "makïng: %s: invÆid o±i⁄\n", 
¨g
);

1769 
	`exô
(1);

1772 i‡(
	`°rcmp
(
¨g
, "palette") == 0)

1774 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_PALETTE
;

1778 i‡(
	`°∫cmp
(
¨g
, "gray", 4) == 0)

1780 i‡(
¨g
[4] == 0)

1782 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_GRAY
;

1786 i‡(
	`°rcmp
(
¨g
+4, "a") == 0 ||

1787 
	`°rcmp
(
¨g
+4, "alpha") == 0 ||

1788 
	`°rcmp
(
¨g
+4, "-alpha") == 0)

1790 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_GRAY_ALPHA
;

1795 i‡(
	`°∫cmp
(
¨g
, "rgb", 3) == 0)

1797 i‡(
¨g
[3] == 0)

1799 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

1803 i‡(
	`°rcmp
(
¨g
+3, "a") == 0 ||

1804 
	`°rcmp
(
¨g
+3, "alpha") == 0 ||

1805 
	`°rcmp
(
¨g
+3, "-alpha") == 0)

1807 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB_ALPHA
;

1812 i‡(
cﬁ‹_ty≥
 =8 && 
	`isdigô
(
¨g
[0]))

1814 
cﬁ‹_ty≥
 = 
	`©oi
(
¨g
);

1815 i‡(
cﬁ‹_ty≥
 < 0 || color_type > 6 || color_type == 1 ||

1816 
cﬁ‹_ty≥
 == 5)

1818 
	`Ârötf
(
°dîr
, "makïng: %s:ÇŸá vÆid cﬁ‹Åy≥\n", 
¨g
);

1819 
	`exô
(1);

1825 i‡(
bô_dïth
 =32 && 
	`isdigô
(
¨g
[0]))

1827 
bô_dïth
 = 
	`©oi
(
¨g
);

1828 i‡(
bô_dïth
 <= 0 || bit_depth > 16 ||

1829 (
bô_dïth
 & -bit_depth) != bit_depth)

1831 
	`Ârötf
(
°dîr
, "makïng: %s:ÇŸá vÆid bô dïth\n", 
¨g
);

1832 
	`exô
(1);

1838 i‡(
¨gc
 == 1)

1840 
Â
 = 
	`f›í
(
¨g
, "wb");

1841 i‡(
Â
 =
NULL
)

1843 
	`Ârötf
(
°dîr
, "%s: %s: couldÇŸ o≥n\n", 
¨g
, 
	`°ªº‹
(
î∫o
));

1844 
	`exô
(1);

1847 
fûe_«me
 = 
¨g
;

1851 
	`Ârötf
(
°dîr
, "makïng: %s: unknow¿¨gumít\n", 
¨g
);

1852 
	`exô
(1);

1855 i‡(
cﬁ‹_ty≥
 =8 || 
bô_dïth
 == 32)

1857 
	`Ârötf
(
°dîr
, "usage: makepng [--small] [--sRGB|--linear|--1.8] "

1861 
	`exô
(1);

1866 
lim
 = (
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 ? 255U :

1867 (1U<<
bô_dïth
)-1);

1868 
i
;

1870 
i
=1; i<=
cﬁ‹s
[0]; ++i)

1871 i‡(
cﬁ‹s
[
i
] > 
lim
)

1873 
	`Ârötf
(
°dîr
, "makepng: --color=...: %u out ofÑange [0..%u]\n",

1874 
cﬁ‹s
[
i
], 
lim
);

1875 
	`exô
(1);

1882 i‡(
smÆl
 && 
cﬁ‹s
[0] != 0)

1884 
	`Ârötf
(
°dîr
, "makepng: --color --small: only oneátáÅime!\n");

1885 
	`exô
(1);

1891 i‡(
fûãrs
 =
PNG_ALL_FILTERS
 && !
smÆl
 )

1893 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_PALETTE
Ë!0 || 
bô_dïth
 < 8)

1894 
fûãrs
 = 
PNG_FILTER_NONE
;

1896 i‡(
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
)

1898 i‡(
bô_dïth
 == 8)

1899 
fûãrs
 &~(
PNG_FILTER_NONE
 | 
PNG_FILTER_AVG
);

1902 
fûãrs
 = 
PNG_FILTER_SUB
 | 
PNG_FILTER_PAETH
;

1906 
fûãrs
 &~
PNG_FILTER_NONE
;

1911 
≤g_c⁄°_ch¨p
 
c›yright
[] =

1913 
COPYRIGHT
,

1914 
NULL


1916 
≤g_c⁄°_ch¨p
 
li˚nsög
[] =

1918 
IMAGE_LICENSING
,

1919 
NULL


1922 
chunk_ö£π
 *
√w_ö£π
;

1924 
√w_ö£π
 = 
	`add_tEXt
("C›yright", 
c›yright
);

1925 i‡(
√w_ö£π
 !
NULL
)

1927 *
ö£π_±r
 = 
√w_ö£π
;

1928 
ö£π_±r
 = &
√w_ö£π
->
√xt
;

1931 
√w_ö£π
 = 
	`add_iTXt
("Li˚nsög", "í", 
NULL
, 
li˚nsög
);

1932 i‡(
√w_ö£π
 !
NULL
)

1934 *
ö£π_±r
 = 
√w_ö£π
;

1935 
ö£π_±r
 = &
√w_ö£π
->
√xt
;

1940 
ªt
 = 
	`wrôe_≤g
(&
fûe_«me
, 
Â
, 
cﬁ‹_ty≥
, 
bô_dïth
, 
gamma
,

1941 
hód_ö£π
, 
fûãrs
, 
cﬁ‹s
, 
smÆl
, 
tRNS
);

1943 i‡(
ªt
 !0 && 
fûe_«me
 !
NULL
)

1944 
	`ªmove
(
fûe_«me
);

1946  
ªt
;

1948 
	}
}

	@contrib/libtests/pngimage.c

16 
	~<°d¨g.h
>

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<î∫o.h
>

20 
	~<°dio.h
>

21 
	~<as£π.h
>

23 #i‡
deföed
(
HAVE_CONFIG_H
Ë&& !deföed(
PNG_NO_CONFIG_H
)

24 
	~<c⁄fig.h
>

30 #ifde‡
PNG_FREESTANDING_TESTS


31 
	~<≤g.h
>

33 
	~"../../≤g.h
"

36 #i‚de‡
PNG_SETJMP_SUPPORTED


37 
	~<£tjmp.h
>

43 #i‡
PNG_LIBPNG_VER
 >10601 && 
deföed
(
HAVE_CONFIG_H
)

44 
	#SKIP
 77

	)

46 
	#SKIP
 0

	)

49 #i‡
PNG_LIBPNG_VER
 < 10700

51 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


52 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


53 
	#PNG_READ_PNG_SUPPORTED


	)

55 #ifde‡
PNG_WRITE_SUPPORTED


56 
	#PNG_WRITE_PNG_SUPPORTED


	)

61 #ifde‡
PNG_READ_PNG_SUPPORTED


93 
	så™sf‹m_öfo


95 c⁄° *
	m«me
;

96 
	må™sf‹m
;

97 
≤g_uöt_32
 
	mvÆid_chunks
;

98 
	#CHUNK_NONE
 0

	)

99 
	#CHUNK_sBIT
 
PNG_INFO_sBIT


	)

100 
	#CHUNK_tRNS
 
PNG_INFO_tRNS


	)

101 
≤g_byã
 
	mcﬁ‹_mask_ªquúed
;

102 
≤g_byã
 
	mcﬁ‹_mask_ab£¡
;

103 
	#COLOR_MASK_X
 0

	)

104 
	#COLOR_MASK_P
 
PNG_COLOR_MASK_PALETTE


	)

105 
	#COLOR_MASK_C
 
PNG_COLOR_MASK_COLOR


	)

106 
	#COLOR_MASK_A
 
PNG_COLOR_MASK_ALPHA


	)

107 
	#COLOR_MASK_ALL
 (
PALETTE
+
COLOR
+
ALPHA
Ë

	)

108 
≤g_byã
 
	mbô_dïths
;

109 
	#BD_ALL
 (1 + 2 + 4 + 8 + 16)

	)

110 
	#BD_PAL
 (1 + 2 + 4 + 8)

	)

111 
	#BD_LOW
 (1 + 2 + 4)

	)

112 
	#BD_16
 16

	)

113 
	#BD_TRUE
 (8+16Ë

	)

114 
≤g_byã
 
	mwhí
;

115 
	#TRANSFORM_R
 1

	)

116 
	#TRANSFORM_W
 2

	)

117 
	#TRANSFORM_RW
 3

	)

118 
≤g_byã
 
	mã°ed
;

119 } 
	gå™sf‹m_öfo
[] =

125 
	#T
(
«me
,
chunk
,
cm_ªquúed
,
cm_ab£¡
,
bd
,
whí
)\

126 { #«me, 
PNG_TRANSFORM_
 ## 
«me
, 
CHUNK_
 ## 
chunk
,\

127 
COLOR_MASK_
 ## 
cm_ªquúed
, COLOR_MASK_ ## 
cm_ab£¡
, 
BD_
 ## 
bd
,\

128 
TRANSFORM_
 ## 
whí
, 0 }

	)

130 #ifde‡
PNG_READ_STRIP_16_TO_8_SUPPORTED


131 
T
(
STRIP_16
, 
NONE
, 
X
, X, 16, 
R
),

134 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


135 
T
(
STRIP_ALPHA
, 
NONE
, 
A
, 
X
, 
ALL
, 
R
),

138 #ifde‡
PNG_WRITE_PACK_SUPPORTED


139 
	#TRANSFORM_RW_PACK
 
TRANSFORM_RW


	)

141 
	#TRANSFORM_RW_PACK
 
TRANSFORM_R


	)

143 #ifde‡
PNG_READ_PACK_SUPPORTED


144 
T
(
PACKING
, 
NONE
, 
X
, X, 
LOW
, 
RW_PACK
),

149 #ifde‡
PNG_WRITE_PACKSWAP_SUPPORTED


150 
	#TRANSFORM_RW_PACKSWAP
 
TRANSFORM_RW


	)

152 
	#TRANSFORM_RW_PACKSWAP
 
TRANSFORM_R


	)

154 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


155 
T
(
PACKSWAP
, 
NONE
, 
X
, X, 
LOW
, 
RW_PACKSWAP
),

158 #ifde‡
PNG_READ_EXPAND_SUPPORTED


159 
T
(
EXPAND
, 
NONE
, 
P
, 
X
, 
ALL
, 
R
),

162 
T
(
EXPAND
, 
NONE
, 
X
, 
C
, 
ALL
, 
R
),

164 
T
(
EXPAND
, 
tRNS
, 
X
, 
A
, 
ALL
, 
R
),

167 #ifde‡
PNG_WRITE_INVERT_SUPPORTED


168 
	#TRANSFORM_RW_INVERT
 
TRANSFORM_RW


	)

170 
	#TRANSFORM_RW_INVERT
 
TRANSFORM_R


	)

172 #ifde‡
PNG_READ_INVERT_SUPPORTED


173 
T
(
INVERT_MONO
, 
NONE
, 
X
, 
C
, 
ALL
, 
RW_INVERT
),

176 #ifde‡
PNG_WRITE_SHIFT_SUPPORTED


177 
	#TRANSFORM_RW_SHIFT
 
TRANSFORM_RW


	)

179 
	#TRANSFORM_RW_SHIFT
 
TRANSFORM_R


	)

181 #ifde‡
PNG_READ_SHIFT_SUPPORTED


182 
T
(
SHIFT
, 
sBIT
, 
X
, X, 
ALL
, 
RW_SHIFT
),

189 #ifde‡
PNG_WRITE_BGR_SUPPORTED


190 
	#TRANSFORM_RW_BGR
 
TRANSFORM_RW


	)

192 
	#TRANSFORM_RW_BGR
 
TRANSFORM_R


	)

194 #ifde‡
PNG_READ_BGR_SUPPORTED


195 
T
(
BGR
, 
NONE
, 
C
, 
P
, 
TRUE
, 
RW_BGR
),

198 #ifde‡
PNG_WRITE_SWAP_ALPHA_SUPPORTED


199 
	#TRANSFORM_RW_SWAP_ALPHA
 
TRANSFORM_RW


	)

201 
	#TRANSFORM_RW_SWAP_ALPHA
 
TRANSFORM_R


	)

203 #ifde‡
PNG_READ_SWAP_ALPHA_SUPPORTED


204 
T
(
SWAP_ALPHA
, 
NONE
, 
A
, 
X
, 
TRUE
, 
RW_SWAP_ALPHA
),

209 #ifde‡
PNG_WRITE_SWAP_SUPPORTED


210 
	#TRANSFORM_RW_SWAP
 
TRANSFORM_RW


	)

212 
	#TRANSFORM_RW_SWAP
 
TRANSFORM_R


	)

214 #ifde‡
PNG_READ_SWAP_SUPPORTED


215 
T
(
SWAP_ENDIAN
, 
NONE
, 
X
, 
P
, 16, 
RW_SWAP
),

218 #ifde‡
PNG_WRITE_INVERT_ALPHA_SUPPORTED


219 
	#TRANSFORM_RW_INVERT_ALPHA
 
TRANSFORM_RW


	)

221 
	#TRANSFORM_RW_INVERT_ALPHA
 
TRANSFORM_R


	)

223 #ifde‡
PNG_READ_INVERT_ALPHA_SUPPORTED


224 
T
(
INVERT_ALPHA
, 
NONE
, 
A
, 
X
, 
TRUE
, 
RW_INVERT_ALPHA
),

227 #ifde‡
PNG_WRITE_FILLER_SUPPORTED


228 
T
(
STRIP_FILLER_BEFORE
, 
NONE
, 
A
, 
P
, 
TRUE
, 
W
),

233 
T
(
STRIP_FILLER_AFTER
, 
NONE
, 
A
, 
P
, 
TRUE
, 
W
),

236 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


237 
T
(
GRAY_TO_RGB
, 
NONE
, 
X
, 
C
, 
ALL
, 
R
),

244 
T
(
GRAY_TO_RGB
, 
NONE
, 
P
, 
X
, 
ALL
, 
R
),

249 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


250 
T
(
EXPAND_16
, 
NONE
, 
X
, X, 
PAL
, 
R
),

255 
T
(
EXPAND_16
, 
tRNS
, 
X
, 
A
, 16, 
R
),

260 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


261 
T
(
SCALE_16
, 
NONE
, 
X
, X, 16, 
R
),

265 { 
NULL
 , 0, 0, 0, 0, 0, 0, 0 }

267 #unde‡
T


270 
	#ARRAY_SIZE
(
a
Ë((á)/(á[0]))

	)

271 
	#TTABLE_SIZE
 
	`ARRAY_SIZE
(
å™sf‹m_öfo
)

	)

276 
	gknown_bad_combos
[][2] =

279 { 
PNG_TRANSFORM_SHIFT
 | 
PNG_TRANSFORM_INVERT_ALPHA
, 0 }

283 
	$is_combo
(
å™sf‹ms
)

285  
å™sf‹ms
 & (transforms-1);

286 
	}
}

289 
	$fú°_å™sf‹m
(
å™sf‹ms
)

291  
å™sf‹ms
 & -transforms;

292 
	}
}

295 
	$is_bad_combo
(
å™sf‹ms
)

297 
i
;

299 
i
=0; i<
	`ARRAY_SIZE
(
known_bad_combos
); ++i)

301 
combo
 = 
known_bad_combos
[
i
][0];

303 i‡((
combo
 & 
å™sf‹ms
) == combo &&

304 (
å™sf‹ms
 & 
known_bad_combos
[
i
][1]) == 0)

309 
	}
}

312 
	$å™sf‹m_«me
(
t
)

317 
i
;

319 
t
 &= -t;

321 
i
=0; i<
TTABLE_SIZE
; ++i)

322 i‡(
å™sf‹m_öfo
[
i
].
«me
 !
NULL
)

323 i‡((
å™sf‹m_öfo
[
i
].
å™sf‹m
 & 
t
) != 0)

324  
å™sf‹m_öfo
[
i
].
«me
;

327 
	}
}

333 
	gªad_å™sf‹ms
, 
	gwrôe_å™sf‹ms
, 
	grw_å™sf‹ms
;

336 
	$vÆid©e_T
()

339 
i
;

341 
i
=0; i<
TTABLE_SIZE
; ++i)

343 i‡(
å™sf‹m_öfo
[
i
].
«me
 !
NULL
)

345 i‡(
å™sf‹m_öfo
[
i
].
whí
 & 
TRANSFORM_R
)

346 
ªad_å™sf‹ms
 |
å™sf‹m_öfo
[
i
].
å™sf‹m
;

348 i‡(
å™sf‹m_öfo
[
i
].
whí
 & 
TRANSFORM_W
)

349 
wrôe_å™sf‹ms
 |
å™sf‹m_öfo
[
i
].
å™sf‹m
;

356 
rw_å™sf‹ms
 = 
ªad_å™sf‹ms
 & 
wrôe_å™sf‹ms
;

357 
	}
}

366 
	#NEW
(
ty≥
Ë(—y≥ *)
	`mÆloc
( (ty≥)))

	)

367 
	#DELETE
(
±r
Ë(
	`‰ì
’å))

	)

369 
	sbuf„r_li°


371 
buf„r_li°
 *
	m√xt
;

372 
≤g_byã
 
	mbuf„r
[1024];

375 
	sbuf„r


377 
buf„r_li°
 *
	mœ°
;

378 
size_t
 
	míd_cou¡
;

379 
buf„r_li°
 *
	mcuºít
;

380 
size_t
 
	mªad_cou¡
;

381 
buf„r_li°
 
	mfú°
;

385 
	$buf„r_öô
(
buf„r
 *buffer)

388 
buf„r
->
fú°
.
√xt
 = 
NULL
;

389 
buf„r
->
œ°
 = 
NULL
;

390 
buf„r
->
cuºít
 = 
NULL
;

391 
	}
}

394 
	$buf„r_de°roy_li°
(
buf„r_li°
 *
li°
)

396 i‡(
li°
 !
NULL
)

398 
buf„r_li°
 *
√xt
 = 
li°
->next;

399 
	`DELETE
(
li°
);

400 
	`buf„r_de°roy_li°
(
√xt
);

402 
	}
}

405 
	$buf„r_de°roy
(
buf„r
 *buffer)

407 
buf„r_li°
 *
li°
 = 
buf„r
->
fú°
.
√xt
;

408 
	`buf„r_öô
(
buf„r
);

409 
	`buf„r_de°roy_li°
(
li°
);

410 
	}
}

412 #ifde‡
PNG_WRITE_PNG_SUPPORTED


414 
	$buf„r_°¨t_wrôe
(
buf„r
 *buffer)

416 
buf„r
->
œ°
 = &buf„r->
fú°
;

417 
buf„r
->
íd_cou¡
 = 0;

418 
buf„r
->
cuºít
 = 
NULL
;

419 
	}
}

423 
	$buf„r_°¨t_ªad
(
buf„r
 *buffer)

425 
buf„r
->
cuºít
 = &buf„r->
fú°
;

426 
buf„r
->
ªad_cou¡
 = 0;

427 
	}
}

429 #ifde‡
ENOMEM


430 
	#MEMORY
 
ENOMEM


	)

432 
	#MEMORY
 
ERANGE


	)

434 
buf„r
 *

435 
	$gë_buf„r
(
≤g_°ru˘p
 
µ
)

438  (
buf„r
*)
	`≤g_gë_io_±r
(
µ
);

439 
	}
}

441 
buf„r_li°
 *

442 
	$buf„r_exãnd
(
buf„r_li°
 *
cuºít
)

444 
buf„r_li°
 *
add
;

446 
	`as£π
(
cuºít
->
√xt
 =
NULL
);

448 
add
 = 
	`NEW
(
buf„r_li°
);

449 i‡(
add
 =
NULL
)

450  
NULL
;

452 
add
->
√xt
 = 
NULL
;

453 
cuºít
->
√xt
 = 
add
;

455  
add
;

456 
	}
}

462 
	$buf„r_‰om_fûe
(
buf„r
 *buf„r, 
FILE
 *
Â
)

464 
buf„r_li°
 *
œ°
 = &
buf„r
->
fú°
;

465 
size_t
 
cou¡
 = 0;

469 
size_t
 
r
 = 
	`‰ód
(
œ°
->
buf„r
+
cou¡
, 1 ,

470 ( 
œ°
->
buf„r
)-
cou¡
, 
Â
);

472 i‡(
r
 > 0)

474 
cou¡
 +
r
;

476 i‡(
cou¡
 > 
œ°
->
buf„r
)

478 
	`as£π
(
cou¡
 = 
œ°
->
buf„r
);

479 
cou¡
 = 0;

481 i‡(
œ°
->
√xt
 =
NULL
)

483 
œ°
 = 
	`buf„r_exãnd
(last);

484 i‡(
œ°
 =
NULL
)

485  
MEMORY
;

489 
œ°
 =Üa°->
√xt
;

495 i‡(
	`„of
(
Â
))

497 
buf„r
->
œ°
 =Üast;

498 
buf„r
->
íd_cou¡
 = 
cou¡
;

503  
î∫o
 =0 ? 
ERANGE
 :Érrno;

506 
	}
}

511 
	mVERBOSE
,

512 
	mINFORMATION
,

513 
	mWARNINGS
,

514 
	mLIBPNG_WARNING
,

515 
	mAPP_WARNING
,

516 
	mERRORS
,

517 
	mAPP_FAIL
,

518 
	mLIBPNG_ERROR
,

519 
	mLIBPNG_BUG
,

520 
	mAPP_ERROR
,

521 
	mQUIET
,

522 
	mUSER_ERROR
,

523 
	mINTERNAL_ERROR


524 } 
	tîr‹_Àvñ
;

525 
	#LEVEL_MASK
 0x‡

	)

527 
	#EXHAUSTIVE
 0x010

	)

528 
	#STRICT
 0x020

	)

529 
	#LOG
 0x040

	)

530 
	#CONTINUE
 0x080

	)

531 
	#SKIP_BUGS
 0x100

	)

532 
	#LOG_SKIPPED
 0x200

	)

533 
	#FIND_BAD_COMBOS
 0x400

	)

534 
	#LIST_COMBOS
 0x800

	)

540 
	#RESULT_STRICT
(
r
Ë((‘Ë& ~((1U<<
WARNINGS
)-1)Ë=0)

	)

541 
	#RESULT_RELAXED
(
r
Ë((‘Ë& ~((1U<<
ERRORS
)-1)Ë=0)

	)

543 
	sdi•œy


545 
jmp_buf
 
	mîr‹_ªtu∫
;

547 c⁄° *
	mfûíame
;

548 c⁄° *
	m›î©i⁄
;

549 
	må™sf‹ms
;

550 
≤g_uöt_32
 
	m›ti⁄s
;

551 
≤g_uöt_32
 
	mªsu…s
;

554 
≤g_°ru˘p
 
	m‹igöÆ_µ
;

555 
≤g_öf›
 
	m‹igöÆ_ù
;

557 
size_t
 
	m‹igöÆ_rowbyãs
;

558 
≤g_byãµ
 
	m‹igöÆ_rows
;

561 
≤g_uöt_32
 
	mchunks
;

564 
≤g_uöt_32
 
	mwidth
;

565 
≤g_uöt_32
 
	mheight
;

566 
	mbô_dïth
;

567 
	mcﬁ‹_ty≥
;

568 
	möãæa˚_mëhod
;

569 
	mcom¥essi⁄_mëhod
;

570 
	mfûãr_mëhod
;

573 
	ma˘ive_å™sf‹ms
;

574 
	mign‹ed_å™sf‹ms
;

579 
≤g_°ru˘p
 
	mªad_µ
;

580 
≤g_öf›
 
	mªad_ù
;

582 #ifde‡
PNG_WRITE_PNG_SUPPORTED


584 
≤g_°ru˘p
 
	mwrôe_µ
;

585 
buf„r
 
	mwrôãn_fûe
;

588 
buf„r
 
	m‹igöÆ_fûe
;

592 
	$di•œy_öô
(
di•œy
 *
dp
)

598 
	`mem£t
(
dp
, 0,  *dp);

599 
dp
->
›ti⁄s
 = 
WARNINGS
;

600 
dp
->
fûíame
 = 
NULL
;

601 
dp
->
›î©i⁄
 = 
NULL
;

602 
dp
->
‹igöÆ_µ
 = 
NULL
;

603 
dp
->
‹igöÆ_ù
 = 
NULL
;

604 
dp
->
‹igöÆ_rows
 = 
NULL
;

605 
dp
->
ªad_µ
 = 
NULL
;

606 
dp
->
ªad_ù
 = 
NULL
;

607 
	`buf„r_öô
(&
dp
->
‹igöÆ_fûe
);

609 #ifde‡
PNG_WRITE_PNG_SUPPORTED


610 
dp
->
wrôe_µ
 = 
NULL
;

611 
	`buf„r_öô
(&
dp
->
wrôãn_fûe
);

613 
	}
}

616 
	$di•œy_˛ón_ªad
(
di•œy
 *
dp
)

618 i‡(
dp
->
ªad_µ
 !
NULL
)

619 
	`≤g_de°roy_ªad_°ru˘
(&
dp
->
ªad_µ
, &dp->
ªad_ù
, 
NULL
);

620 
	}
}

622 #ifde‡
PNG_WRITE_PNG_SUPPORTED


624 
	$di•œy_˛ón_wrôe
(
di•œy
 *
dp
)

626 i‡(
dp
->
wrôe_µ
 !
NULL
)

627 
	`≤g_de°roy_wrôe_°ru˘
(&
dp
->
wrôe_µ
, 
NULL
);

628 
	}
}

632 
	$di•œy_˛ón
(
di•œy
 *
dp
)

634 #ifde‡
PNG_WRITE_PNG_SUPPORTED


635 
	`di•œy_˛ón_wrôe
(
dp
);

637 
	`di•œy_˛ón_ªad
(
dp
);

639 
dp
->
‹igöÆ_rowbyãs
 = 0;

640 
dp
->
‹igöÆ_rows
 = 
NULL
;

641 
dp
->
chunks
 = 0;

643 
	`≤g_de°roy_ªad_°ru˘
(&
dp
->
‹igöÆ_µ
, &dp->
‹igöÆ_ù
, 
NULL
);

645 
dp
->
ªsu…s
 = 0;

646 
	}
}

649 
	$di•œy_de°roy
(
di•œy
 *
dp
)

652 #ifde‡
PNG_WRITE_PNG_SUPPORTED


653 
	`buf„r_de°roy
(&
dp
->
wrôãn_fûe
);

656 
	`buf„r_de°roy
(&
dp
->
‹igöÆ_fûe
);

657 
	}
}

659 
di•œy
 *

660 
	$gë_dp
(
≤g_°ru˘p
 
µ
)

663 
di•œy
 *
dp
 = (di•œy*)
	`≤g_gë_îr‹_±r
(
µ
);

665 i‡(
dp
 =
NULL
)

667 
	`Ârötf
(
°dîr
, "pngimage: internalÉrror (no display)\n");

668 
	`exô
(99);

671  
dp
;

672 
	}
}

675 #ifde‡
__GNUC__


676 
	#VGATTR
 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
,3,4)))

	)

681 
	#VGATTR


	)

683 
VGATTR


684 
	$di•œy_log
(
di•œy
 *
dp
, 
îr‹_Àvñ
 
Àvñ
, c⁄° *
fmt
, ...)

689 
dp
->
ªsu…s
 |1U << 
Àvñ
;

691 i‡(
Àvñ
 > (
îr‹_Àvñ
)(
dp
->
›ti⁄s
 & 
LEVEL_MASK
))

693 c⁄° *
Õ
;

694 
va_li°
 
≠
;

696 
Àvñ
)

698 
INFORMATION
: 
Õ
 = "information"; ;

699 
LIBPNG_WARNING
: 
Õ
 = "warning(libpng)"; ;

700 
APP_WARNING
: 
Õ
 = "warning(pngimage)"; ;

701 
APP_FAIL
: 
Õ
 = "error(continuable)"; ;

702 
LIBPNG_ERROR
: 
Õ
 = "error(libpng)"; ;

703 
LIBPNG_BUG
: 
Õ
 = "bug(libpng)"; ;

704 
APP_ERROR
: 
Õ
 = "error(pngimage)"; ;

705 
USER_ERROR
: 
Õ
 = "error(user)"; ;

707 
INTERNAL_ERROR
:

708 
VERBOSE
: 
WARNINGS
: 
ERRORS
: 
QUIET
:

709 : 
Õ
 = "bug(pngimage)"; ;

712 
	`Ârötf
(
°dîr
, "%s: %s: %s",

713 
dp
->
fûíame
 !
NULL
 ? dp->fûíamê: "<°dö>", 
Õ
, dp->
›î©i⁄
);

715 i‡(
dp
->
å™sf‹ms
 != 0)

717 
å
 = 
dp
->
å™sf‹ms
;

719 i‡(
	`is_combo
(
å
))

721 i‡(
dp
->
›ti⁄s
 & 
LIST_COMBOS
)

723 
åx
 = 
å
;

725 
	`Ârötf
(
°dîr
, "(");

726 i‡(
åx
)

728 
°¨t
 = 0;

730 
åx
)

732 
åz
 = 
åx
 & -trx;

734 i‡(
°¨t
Ë
	`Ârötf
(
°dîr
, "+");

735 
	`Ârötf
(
°dîr
, "%s", 
	`å™sf‹m_«me
(
åz
));

736 
°¨t
 = 1;

737 
åx
 &~
åz
;

742 
	`Ârötf
(
°dîr
, "-");

743 
	`Ârötf
(
°dîr
, ")");

747 
	`Ârötf
(
°dîr
, "(0x%x)", 
å
);

751 
	`Ârötf
(
°dîr
, "(%s)", 
	`å™sf‹m_«me
(
å
));

754 
	`Ârötf
(
°dîr
, ": ");

756 
	`va_°¨t
(
≠
, 
fmt
);

757 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

758 
	`va_íd
(
≠
);

760 
	`Âutc
('\n', 
°dîr
);

765 i‡(
Àvñ
 > 
APP_FAIL
 || (Àvñ > 
ERRORS
 && !(
dp
->
›ti⁄s
 & 
CONTINUE
)))

766 
	`l⁄gjmp
(
dp
->
îr‹_ªtu∫
, 
Àvñ
);

767 
	}
}

770 
PNGCBAPI


771 
	$di•œy_w¨nög
(
≤g_°ru˘p
 
µ
, 
≤g_c⁄°_ch¨p
 
w¨nög
)

773 
	`di•œy_log
(
	`gë_dp
(
µ
), 
LIBPNG_WARNING
, "%s", 
w¨nög
);

774 
	}
}

776 
PNGCBAPI


777 
	$di•œy_îr‹
(
≤g_°ru˘p
 
µ
, 
≤g_c⁄°_ch¨p
 
îr‹
)

779 
di•œy
 *
dp
 = 
	`gë_dp
(
µ
);

781 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "%s", 
îr‹
);

782 
	}
}

785 
	$di•œy_ˇche_fûe
(
di•œy
 *
dp
, c⁄° *
fûíame
)

788 
FILE
 *
Â
;

789 
ªt
;

791 
dp
->
fûíame
 = filename;

793 i‡(
fûíame
 !
NULL
)

795 
Â
 = 
	`f›í
(
fûíame
, "rb");

796 i‡(
Â
 =
NULL
)

797 
	`di•œy_log
(
dp
, 
USER_ERROR
, "›í faûed: %s", 
	`°ªº‹
(
î∫o
));

801 
Â
 = 
°dö
;

803 
ªt
 = 
	`buf„r_‰om_fûe
(&
dp
->
‹igöÆ_fûe
, 
Â
);

805 
	`f˛o£
(
Â
);

807 i‡(
ªt
 != 0)

808 
	`di•œy_log
(
dp
, 
APP_ERROR
, "ªad faûed: %s", 
	`°ªº‹
(
ªt
));

809 
	}
}

812 
	$buf„r_ªad
(
di•œy
 *
dp
, 
buf„r
 *
bp
, 
≤g_byãp
 
d©a
,

813 
size_t
 
size
)

815 
buf„r_li°
 *
œ°
 = 
bp
->
cuºít
;

816 
size_t
 
ªad_cou¡
 = 
bp
->read_count;

818 
size
 > 0)

820 
size_t
 
avaû
;

822 i‡(
œ°
 =
NULL
 ||

823 (
œ°
 =
bp
->œ° && 
ªad_cou¡
 >bp->
íd_cou¡
))

825 
	`di•œy_log
(
dp
, 
USER_ERROR
, "fileÅruncated (%lu bytes)",

826 ()
size
);

831 i‡(
ªad_cou¡
 > 
œ°
->
buf„r
)

834 
œ°
 =Üa°->
√xt
;

835 
ªad_cou¡
 = 0;

836 
bp
->
cuºít
 = 
œ°
;

839 i‡(
œ°
 =
NULL
)

841 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
, "damaged bufferÜist");

847 
avaû
 = ( 
œ°
->
buf„r
Ë- 
ªad_cou¡
;

848 i‡(
avaû
 > 
size
)

849 
avaû
 = 
size
;

851 
	`mem˝y
(
d©a
, 
œ°
->
buf„r
 + 
ªad_cou¡
, 
avaû
);

852 
ªad_cou¡
 +
avaû
;

853 
size
 -
avaû
;

854 
d©a
 +
avaû
;

857 
bp
->
ªad_cou¡
 =Ñead_count;

858 
	}
}

860 
PNGCBAPI


861 
	$ªad_fun˘i⁄
(
≤g_°ru˘p
 
µ
, 
≤g_byãp
 
d©a
, 
size_t
 
size
)

863 
	`buf„r_ªad
(
	`gë_dp
(
µ
), 
	`gë_buf„r
’p), 
d©a
, 
size
);

864 
	}
}

867 
	$ªad_≤g
(
di•œy
 *
dp
, 
buf„r
 *
bp
, c⁄° *
›î©i⁄
,

868 
å™sf‹ms
)

870 
≤g_°ru˘p
 
µ
;

871 
≤g_öf›
 
ù
;

876 
	`di•œy_˛ón_ªad
(
dp
);

878 i‡(
›î©i⁄
 !
NULL
)

880 
dp
->
›î©i⁄
 = operation;

881 
dp
->
å™sf‹ms
 =Åransforms;

884 
dp
->
ªad_µ
 = 
µ
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, dp,

885 
di•œy_îr‹
, 
di•œy_w¨nög
);

886 i‡(
µ
 =
NULL
)

887 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "failedÅo createÑead struct");

892 
dp
->
ªad_ù
 = 
ù
 = 
	`≤g_¸óã_öfo_°ru˘
(
µ
);

893 i‡(
ù
 =
NULL
)

894 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "failedÅo create info struct");

896 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


898 
	`≤g_£t_u£r_limôs
(
µ
, 0x7fffffff, 0x7fffffff);

902 
	`buf„r_°¨t_ªad
(
bp
);

903 
	`≤g_£t_ªad_‚
(
µ
, 
bp
, 
ªad_fun˘i⁄
);

905 
	`≤g_ªad_≤g
(
µ
, 
ù
, 
å™sf‹ms
, 
NULL
 );

909 
≤g_byãp
 
¥
 = 
	`≤g_gë_rows
(
µ
, 
ù
)[0];

910 
size_t
 
rb
 = 
	`≤g_gë_rowbyãs
(
µ
, 
ù
);

911 
size_t
 
cb
;

912 
c
 = ' ';

914 
	`Ârötf
(
°dîr
, "%.4x %2d (%3lu byãs):", 
å™sf‹ms
, 
	`≤g_gë_bô_dïth
(
µ
,
ù
), ()
rb
);

916 
cb
=0; cb<
rb
; ++cb)

917 
	`Âutc
(
c
, 
°dîr
), 
	`Ârötf
(°dîr, "%.2x", 
¥
[
cb
]), c='.';

919 
	`Âutc
('\n', 
°dîr
);

922 
	}
}

925 
	$upd©e_di•œy
(
di•œy
 *
dp
)

930 
≤g_°ru˘p
 
µ
;

931 
≤g_öf›
 
ù
;

934 
	`ªad_≤g
(
dp
, &dp->
‹igöÆ_fûe
, "originalÑead", 0 );

937 
dp
->
‹igöÆ_µ
 = 
µ
 = dp->
ªad_µ
, dp->ªad_µ = 
NULL
;

938 
dp
->
‹igöÆ_ù
 = 
ù
 = dp->
ªad_ù
, dp->ªad_ù = 
NULL
;

940 
dp
->
‹igöÆ_rowbyãs
 = 
	`≤g_gë_rowbyãs
(
µ
, 
ù
);

941 i‡(
dp
->
‹igöÆ_rowbyãs
 == 0)

942 
	`di•œy_log
(
dp
, 
LIBPNG_BUG
, "png_get_rowbytesÑeturned 0");

944 
dp
->
chunks
 = 
	`≤g_gë_vÆid
(
µ
, 
ù
, 0xffffffff);

945 i‡((
dp
->
chunks
 & 
PNG_INFO_IDAT
) == 0)

946 
	`di•œy_log
(
dp
, 
LIBPNG_BUG
, "png_read_png didÇot set IDAT flag");

948 
dp
->
‹igöÆ_rows
 = 
	`≤g_gë_rows
(
µ
, 
ù
);

949 i‡(
dp
->
‹igöÆ_rows
 =
NULL
)

950 
	`di•œy_log
(
dp
, 
LIBPNG_BUG
, "png_read_png didÇot createÑow buffers");

952 i‡(!
	`≤g_gë_IHDR
(
µ
, 
ù
,

953 &
dp
->
width
, &dp->
height
, &dp->
bô_dïth
, &dp->
cﬁ‹_ty≥
,

954 &
dp
->
öãæa˚_mëhod
, &dp->
com¥essi⁄_mëhod
, &dp->
fûãr_mëhod
))

955 
	`di•œy_log
(
dp
, 
LIBPNG_BUG
, "png_get_IHDR failed");

962 
≤g_uöt_32
 
chunks
 = 
dp
->chunks;

963 
a˘ive
 = 0, 
öa˘ive
 = 0;

964 
˘
 = 
dp
->
cﬁ‹_ty≥
;

965 
bd
 = 
dp
->
bô_dïth
;

966 
i
;

968 
i
=0; i<
TTABLE_SIZE
; ++i)

970 i‡(
å™sf‹m_öfo
[
i
].
«me
 !
NULL
)

972 
å™sf‹m
 = 
å™sf‹m_öfo
[
i
].transform;

974 i‡((
å™sf‹m_öfo
[
i
].
vÆid_chunks
 == 0 ||

975 (
å™sf‹m_öfo
[
i
].
vÆid_chunks
 & 
chunks
) != 0) &&

976 (
å™sf‹m_öfo
[
i
].
cﬁ‹_mask_ªquúed
 & 
˘
) ==

977 
å™sf‹m_öfo
[
i
].
cﬁ‹_mask_ªquúed
 &&

978 (
å™sf‹m_öfo
[
i
].
cﬁ‹_mask_ab£¡
 & 
˘
) == 0 &&

979 (
å™sf‹m_öfo
[
i
].
bô_dïths
 & 
bd
) != 0 &&

980 (
å™sf‹m_öfo
[
i
].
whí
 & 
TRANSFORM_R
) != 0)

981 
a˘ive
 |
å™sf‹m
;

983 i‡((
å™sf‹m_öfo
[
i
].
whí
 & 
TRANSFORM_R
) != 0)

984 
öa˘ive
 |
å™sf‹m
;

992 
öa˘ive
 &~
a˘ive
;

994 
dp
->
a˘ive_å™sf‹ms
 = 
a˘ive
;

995 
dp
->
ign‹ed_å™sf‹ms
 = 
öa˘ive
;

997 
	}
}

1000 
	$com∑ª_ªad
(
di•œy
 *
dp
, 
≠∂õd_å™sf‹ms
)

1003 
size_t
 
rowbyãs
;

1004 
≤g_uöt_32
 
width
, 
height
;

1005 
bô_dïth
, 
cﬁ‹_ty≥
;

1006 
öãæa˚_mëhod
, 
com¥essi⁄_mëhod
, 
fûãr_mëhod
;

1007 c⁄° *
e
 = 
NULL
;

1009 i‡(!
	`≤g_gë_IHDR
(
dp
->
ªad_µ
, dp->
ªad_ù
, &
width
, &
height
, &
bô_dïth
,

1010 &
cﬁ‹_ty≥
, &
öãæa˚_mëhod
, &
com¥essi⁄_mëhod
, &
fûãr_mëhod
))

1011 
	`di•œy_log
(
dp
, 
LIBPNG_BUG
, "png_get_IHDR failed");

1013 
	#C
(
ôem
Ëi‡(ôem !
dp
->item) \

1014 
	`di•œy_log
(
dp
, 
APP_WARNING
, "IHDR " #item "(%lu) changedÅo %lu",\

1015 ()
dp
->
ôem
, ()ôem), 
e
 = #ôem

	)

1018 
	`C
(
width
);

1019 
	`C
(
height
);

1020 
	`C
(
bô_dïth
);

1021 
	`C
(
cﬁ‹_ty≥
);

1022 
	`C
(
öãæa˚_mëhod
);

1023 
	`C
(
com¥essi⁄_mëhod
);

1024 
	`C
(
fûãr_mëhod
);

1027 i‡(
e
)

1028 
	`di•œy_log
(
dp
, 
APP_ERROR
, "IHDR ch™ged (%s)", 
e
);

1034 
chunks
 =

1035 
	`≤g_gë_vÆid
(
dp
->
ªad_µ
, dp->
ªad_ù
, 0xffffffff);

1037 i‡(
chunks
 !
dp
->chunks)

1038 
	`di•œy_log
(
dp
, 
APP_FAIL
, "PNG chunks changed from 0x%lxÅo 0x%lx",

1039 ()
dp
->
chunks
, chunks);

1043 
rowbyãs
 = 
	`≤g_gë_rowbyãs
(
dp
->
ªad_µ
, dp->
ªad_ù
);

1048 i‡(
rowbyãs
 !
dp
->
‹igöÆ_rowbyãs
)

1049 
	`di•œy_log
(
dp
, 
APP_ERROR
, "PNGÑowbytes changed from %luÅo %lu",

1050 ()
dp
->
‹igöÆ_rowbyãs
, ()
rowbyãs
);

1056 
≤g_byãµ
 
rows
 = 
	`≤g_gë_rows
(
dp
->
ªad_µ
, dp->
ªad_ù
);

1057 
mask
;

1059 i‡(
bô_dïth
 < 8)

1065 
mask
 = 0xf‡& (0xff00 >> ((
bô_dïth
 * 
width
) & 7));

1069 
mask
 = 0;

1071 i‡(
rows
 =
NULL
)

1072 
	`di•œy_log
(
dp
, 
LIBPNG_BUG
, "png_get_rowsÑeturned NULL");

1074 i‡((
≠∂õd_å™sf‹ms
 & 
PNG_TRANSFORM_SHIFT
) == 0 ||

1075 (
dp
->
a˘ive_å™sf‹ms
 & 
PNG_TRANSFORM_SHIFT
) == 0 ||

1076 
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1078 
y
;

1080 
y
=0; y<
height
; ++y)

1082 
≤g_byãp
 
row
 = 
rows
[
y
];

1083 
≤g_byãp
 
‹ig
 = 
dp
->
‹igöÆ_rows
[
y
];

1085 i‡(
	`memcmp
(
row
, 
‹ig
, 
rowbyãs
-(
mask
 != 0)) != 0 || (mask != 0 &&

1086 ((
row
[
rowbyãs
-1] & 
mask
Ë!(
‹ig
[rowbytes-1] & mask))))

1088 
size_t
 
x
;

1091 
x
=0; x<
rowbyãs
-1; ++x)

1092 i‡(
row
[
x
] !
‹ig
[x])

1095 
	`di•œy_log
(
dp
, 
APP_FAIL
,

1097 ()
x
, ()
y
, 
‹ig
[x], 
row
[x]);

1104 #ifde‡
PNG_sBIT_SUPPORTED


1106 
y
;

1107 
bµ
;

1109 
≤g_byã
 
sig_bôs
[8];

1110 
≤g_cﬁ‹_8p
 
sBIT
;

1112 i‡(
	`≤g_gë_sBIT
(
dp
->
ªad_µ
, dp->
ªad_ù
, &
sBIT
Ë!
PNG_INFO_sBIT
)

1113 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
,

1116 
cﬁ‹_ty≥
)

1118 
PNG_COLOR_TYPE_GRAY
:

1119 
sig_bôs
[0] = 
sBIT
->
gøy
;

1120 
bµ
 = 
bô_dïth
;

1123 
PNG_COLOR_TYPE_GA
:

1124 
sig_bôs
[0] = 
sBIT
->
gøy
;

1125 
sig_bôs
[1] = 
sBIT
->
Æpha
;

1126 
bµ
 = 2 * 
bô_dïth
;

1129 
PNG_COLOR_TYPE_RGB
:

1130 
sig_bôs
[0] = 
sBIT
->
ªd
;

1131 
sig_bôs
[1] = 
sBIT
->
gªí
;

1132 
sig_bôs
[2] = 
sBIT
->
blue
;

1133 
bµ
 = 3 * 
bô_dïth
;

1136 
PNG_COLOR_TYPE_RGBA
:

1137 
sig_bôs
[0] = 
sBIT
->
ªd
;

1138 
sig_bôs
[1] = 
sBIT
->
gªí
;

1139 
sig_bôs
[2] = 
sBIT
->
blue
;

1140 
sig_bôs
[3] = 
sBIT
->
Æpha
;

1141 
bµ
 = 4 * 
bô_dïth
;

1145 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "invalid colourÅype %d",

1146 
cﬁ‹_ty≥
);

1148 
	`mem£t
(
sig_bôs
, 0, (sig_bits));

1149 
bµ
 = 0;

1154 
b
;

1156 
b
=0; 8*b<
bµ
; ++b)

1162 i‡(
sig_bôs
[
b
] =0 || sig_bôs[b] > 
bô_dïth
 )

1163 
	`di•œy_log
(
dp
, 
LIBPNG_BUG
,

1165 
b
, 
sig_bôs
[b], 
bô_dïth
);

1169 i‡(
bµ
 < 8 && bµ !
bô_dïth
)

1174 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
, "invalid bpp %u for bit_depth %u",

1175 
bµ
, 
bô_dïth
);

1178 
bô_dïth
)

1180 
b
;

1183 
b
 = (
bµ
 >> 4); b > 0; --b)

1185 
sig
 = ()(0xffff0000 >> 
sig_bôs
[
b
]);

1187 
sig_bôs
[2*
b
+1] = (
≤g_byã
)
sig
;

1188 
sig_bôs
[2*
b
+0] = (
≤g_byã
)(
sig
 >> 8);

1193 
b
=0; b*8 < 
bµ
; ++b)

1194 
sig_bôs
[
b
] = (
≤g_byã
)(0xff00 >> sig_bits[b]);

1199 
sig_bôs
[0] = 0xff;

1204 
b
 = 0x3 & ((0x3<<2Ë>> 
sig_bôs
[0]);

1205 
b
 |= b << 2;

1206 
b
 |= b << 4;

1207 
sig_bôs
[0] = (
≤g_byã
)
b
;

1212 
b
 = 0x‡& ((0x‡<< 4Ë>> 
sig_bôs
[0]);

1213 
b
 |= b << 4;

1214 
sig_bôs
[0] = (
≤g_byã
)
b
;

1218 
	`di•œy_log
(
dp
, 
LIBPNG_BUG
, "övÆid bô dïth %d", 
bô_dïth
);

1225 
bµ
 = (bpp+7) >> 3;

1228 i‡(
mask
 != 0)

1230 
mask
 &
sig_bôs
[0];

1232 i‡(
bµ
 !1 || 
mask
 == 0)

1233 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
, "mask calculationÉrror %u, %u",

1234 
bµ
, 
mask
);

1237 
y
=0; y<
height
; ++y)

1239 
≤g_byãp
 
row
 = 
rows
[
y
];

1240 
≤g_byãp
 
‹ig
 = 
dp
->
‹igöÆ_rows
[
y
];

1241 
x
;

1243 
x
=0; x<(
width
-(
mask
!=0)); ++x)

1245 
b
;

1247 
b
=0; b<
bµ
; ++b)

1249 i‡((*
row
++ & 
sig_bôs
[
b
]Ë!(*
‹ig
++ & sig_bits[b]))

1251 
	`di•œy_log
(
dp
, 
APP_FAIL
,

1253 
x
, 
b
, 
y
, 
‹ig
[-1], 
row
[-1]);

1259 i‡(
mask
 !0 && (*
row
 & maskË!(*
‹ig
 & mask))

1261 
	`di•œy_log
(
dp
, 
APP_FAIL
,

1262 "signifiˇ¡ bô†© (%lu[íd],%luËch™ged", 
x
, 
y
);

1268 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
,

1274 
	}
}

1276 #ifde‡
PNG_WRITE_PNG_SUPPORTED


1278 
	$buf„r_wrôe
(
di•œy
 *
dp
, 
buf„r
 *buf„r, 
≤g_byãp
 
d©a
,

1279 
size_t
 
size
)

1285 
buf„r_li°
 *
œ°
 = 
buf„r
->last;

1286 
size_t
 
íd_cou¡
 = 
buf„r
->end_count;

1288 
size
 > 0)

1290 
size_t
 
avaû
;

1292 i‡(
íd_cou¡
 > 
œ°
->
buf„r
)

1294 i‡(
œ°
->
√xt
 =
NULL
)

1296 
œ°
 = 
	`buf„r_exãnd
(last);

1298 i‡(
œ°
 =
NULL
)

1299 
	`di•œy_log
(
dp
, 
APP_ERROR
, "out of memory saving file");

1303 
œ°
 =Üa°->
√xt
;

1305 
buf„r
->
œ°
 =Üast;

1306 
íd_cou¡
 = 0;

1309 
avaû
 = ( 
œ°
->
buf„r
Ë- 
íd_cou¡
;

1310 i‡(
avaû
 > 
size
)

1311 
avaû
 = 
size
;

1313 
	`mem˝y
(
œ°
->
buf„r
 + 
íd_cou¡
, 
d©a
, 
avaû
);

1314 
íd_cou¡
 +
avaû
;

1315 
size
 -
avaû
;

1316 
d©a
 +
avaû
;

1319 
buf„r
->
íd_cou¡
 =Énd_count;

1320 
	}
}

1322 
PNGCBAPI


1323 
	$wrôe_fun˘i⁄
(
≤g_°ru˘p
 
µ
, 
≤g_byãp
 
d©a
, 
size_t
 
size
)

1325 
	`buf„r_wrôe
(
	`gë_dp
(
µ
), 
	`gë_buf„r
’p), 
d©a
, 
size
);

1326 
	}
}

1329 
	$wrôe_≤g
(
di•œy
 *
dp
, 
≤g_öf›
 
ù
, 
å™sf‹ms
)

1331 
	`di•œy_˛ón_wrôe
(
dp
);

1333 
	`buf„r_°¨t_wrôe
(&
dp
->
wrôãn_fûe
);

1334 
dp
->
›î©i⁄
 = "write";

1335 
dp
->
å™sf‹ms
 =Åransforms;

1337 
dp
->
wrôe_µ
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
, dp,

1338 
di•œy_îr‹
, 
di•œy_w¨nög
);

1340 i‡(
dp
->
wrôe_µ
 =
NULL
)

1341 
	`di•œy_log
(
dp
, 
APP_ERROR
, "failedÅo create writeÖng_struct");

1343 
	`≤g_£t_wrôe_‚
(
dp
->
wrôe_µ
, &dp->
wrôãn_fûe
, 
wrôe_fun˘i⁄
,

1344 
NULL
 );

1346 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


1348 
	`≤g_£t_u£r_limôs
(
dp
->
wrôe_µ
, 0x7fffffff, 0x7fffffff);

1354 i‡(
å™sf‹ms
 & (
PNG_TRANSFORM_PACKING
|

1355 
PNG_TRANSFORM_STRIP_FILLER
|

1356 
PNG_TRANSFORM_STRIP_FILLER_BEFORE
))

1358 
˘
 = 
dp
->
cﬁ‹_ty≥
;

1360 i‡(
å™sf‹ms
 & (
PNG_TRANSFORM_STRIP_FILLER
|

1361 
PNG_TRANSFORM_STRIP_FILLER_BEFORE
))

1362 
˘
 &~
PNG_COLOR_MASK_ALPHA
;

1364 
	`≤g_£t_IHDR
(
dp
->
wrôe_µ
, 
ù
, dp->
width
, dp->
height
, dp->
bô_dïth
, 
˘
,

1365 
dp
->
öãæa˚_mëhod
, dp->
com¥essi⁄_mëhod
, dp->
fûãr_mëhod
);

1368 
	`≤g_wrôe_≤g
(
dp
->
wrôe_µ
, 
ù
, 
å™sf‹ms
, 
NULL
 );

1373 
	`di•œy_˛ón_wrôe
(
dp
);

1374 
	}
}

1378 
	$skù_å™sf‹m
(
di•œy
 *
dp
, 
å
)

1381 i‡((
dp
->
›ti⁄s
 & 
SKIP_BUGS
Ë!0 && 
	`is_bad_combo
(
å
))

1386 i‡((
dp
->
›ti⁄s
 & 
LOG_SKIPPED
) != 0)

1388 
	`¥ötf
("SKIP: %†å™sf‹m†", 
dp
->
fûíame
);

1390 
å
 != 0)

1392 
√xt
 = 
	`fú°_å™sf‹m
(
å
);

1393 
å
 &~
√xt
;

1395 
	`¥ötf
("%s", 
	`å™sf‹m_«me
(
√xt
));

1396 i‡(
å
 != 0)

1397 
	`putch¨
('+');

1400 
	`putch¨
('\n');

1404 
	`di•œy_log
(
dp
, 
INFORMATION
, "%s: skipped known bad combo 0x%x",

1405 
dp
->
fûíame
, 
å
);

1411 
	}
}

1414 
	$ã°_⁄e_fûe
(
di•œy
 *
dp
, c⁄° *
fûíame
)

1419 
dp
->
›î©i⁄
 = "cache file";

1420 
dp
->
å™sf‹ms
 = 0;

1421 
	`di•œy_ˇche_fûe
(
dp
, 
fûíame
);

1422 
	`upd©e_di•œy
(
dp
);

1427 i‡(
dp
->
ign‹ed_å™sf‹ms
 != 0)

1429 
	`ªad_≤g
(
dp
, &dp->
‹igöÆ_fûe
, "ignoredÅransforms",

1430 
dp
->
ign‹ed_å™sf‹ms
);

1433 i‡(!
	`com∑ª_ªad
(
dp
, 0 ))

1437 #ifde‡
PNG_WRITE_PNG_SUPPORTED


1442 
dp
->
›î©i⁄
 = "write";

1443 
	`wrôe_≤g
(
dp
, dp->
‹igöÆ_ù
, 0 );

1444 
	`ªad_≤g
(
dp
, &dp->
wrôãn_fûe
, 
NULL
, 0 );

1445 i‡(!
	`com∑ª_ªad
(
dp
, 0 ))

1457 
a˘ive
 = 
dp
->
a˘ive_å™sf‹ms
;

1458 
exhau°ive
 = (
dp
->
›ti⁄s
 & 
EXHAUSTIVE
) != 0;

1459 
cuºít
 = 
	`fú°_å™sf‹m
(
a˘ive
);

1460 
bad_å™sf‹ms
 = 0;

1461 
bad_combo
 = ~0U;

1462 
bad_combo_li°
 = 0;

1466 
	`ªad_≤g
(
dp
, &dp->
‹igöÆ_fûe
, "a˘ivêå™sf‹ms", 
cuºít
);

1478 #ifde‡
PNG_WRITE_PNG_SUPPORTED


1479 i‡((
cuºít
 & 
wrôe_å™sf‹ms
) == current)

1486 
dp
->
›î©i⁄
 = "reversibleÅransforms";

1487 
	`wrôe_≤g
(
dp
, dp->
ªad_ù
, 
cuºít
);

1492 
	`ªad_≤g
(
dp
, &dp->
wrôãn_fûe
, 
NULL
, 0);

1493 i‡(!
	`com∑ª_ªad
(
dp
, 
cuºít
 ))

1500 i‡(
	`is_combo
(
cuºít
))

1502 
bad_combo
 &
cuºít
;

1503 
bad_combo_li°
 |
cuºít
;

1507 
bad_å™sf‹ms
 |
cuºít
;

1513 i‡(
exhau°ive
)

1515 
√xt
 = 
cuºít
;

1519 i‡(
√xt
 =
ªad_å™sf‹ms
)

1520 
combo
;

1522 ++
√xt
;

1526  (
√xt
 & 
ªad_å™sf‹ms
Ë<
cuºít


1527 || (
√xt
 & 
a˘ive
) == 0

1528 || (
√xt
 & 
bad_å™sf‹ms
) != 0

1529 || 
	`skù_å™sf‹m
(
dp
, 
√xt
));

1531 
	`as£π
((
√xt
 & 
ªad_å™sf‹ms
) ==Çext);

1532 
cuºít
 = 
√xt
;

1537 
a˘ive
 &~
cuºít
;

1539 i‡(
a˘ive
 == 0)

1540 
combo
;

1542 
cuºít
 = 
	`fú°_å™sf‹m
(
a˘ive
);

1546 
combo
:

1547 i‡(
dp
->
›ti⁄s
 & 
FIND_BAD_COMBOS
)

1553 i‡(
bad_combo
 != ~0U)

1554 
	`¥ötf
("%s[0x%x]: PROBLEM: 0x%x[0x%x] ANTIDOTE: 0x%x\n",

1555 
dp
->
fûíame
, 
a˘ive
, 
bad_combo
, 
bad_combo_li°
,

1556 
rw_å™sf‹ms
 & ~
bad_combo_li°
);

1559 
	`¥ötf
("%s:Çÿ%sbad combo†found\n", 
dp
->
fûíame
,

1560 (
dp
->
›ti⁄s
 & 
SKIP_BUGS
) ? "additional " : "");

1563 
	}
}

1566 
	$do_ã°
(
di•œy
 *
dp
, c⁄° *
fûe
)

1569 
ªt
 = 
	`£tjmp
(
dp
->
îr‹_ªtu∫
);

1571 i‡(
ªt
 == 0)

1573 
	`ã°_⁄e_fûe
(
dp
, 
fûe
);

1577 i‡(
ªt
 < 
ERRORS
)

1578 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
, "u√x≥˘edÑëu∫ codê%d", 
ªt
);

1580  
ªt
;

1581 
	}
}

1584 
	$maö
(
¨gc
, **
¨gv
)

1587 
›ti⁄_íd
, 
ûog
 = 0;

1588 
di•œy
 
d
;

1590 
	`vÆid©e_T
();

1591 
	`di•œy_öô
(&
d
);

1593 
›ti⁄_íd
=1; o±i⁄_íd<
¨gc
; ++option_end)

1595 c⁄° *
«me
 = 
¨gv
[
›ti⁄_íd
];

1597 i‡(
	`°rcmp
(
«me
, "--verbose") == 0)

1598 
d
.
›ti⁄s
 = (d.›ti⁄†& ~
LEVEL_MASK
Ë| 
VERBOSE
;

1600 i‡(
	`°rcmp
(
«me
, "--warnings") == 0)

1601 
d
.
›ti⁄s
 = (d.›ti⁄†& ~
LEVEL_MASK
Ë| 
WARNINGS
;

1603 i‡(
	`°rcmp
(
«me
, "--errors") == 0)

1604 
d
.
›ti⁄s
 = (d.›ti⁄†& ~
LEVEL_MASK
Ë| 
ERRORS
;

1606 i‡(
	`°rcmp
(
«me
, "--quiet") == 0)

1607 
d
.
›ti⁄s
 = (d.›ti⁄†& ~
LEVEL_MASK
Ë| 
QUIET
;

1609 i‡(
	`°rcmp
(
«me
, "--exhaustive") == 0)

1610 
d
.
›ti⁄s
 |
EXHAUSTIVE
;

1612 i‡(
	`°rcmp
(
«me
, "--fast") == 0)

1613 
d
.
›ti⁄s
 &~
EXHAUSTIVE
;

1615 i‡(
	`°rcmp
(
«me
, "--strict") == 0)

1616 
d
.
›ti⁄s
 |
STRICT
;

1618 i‡(
	`°rcmp
(
«me
, "--relaxed") == 0)

1619 
d
.
›ti⁄s
 &~
STRICT
;

1621 i‡(
	`°rcmp
(
«me
, "--log") == 0)

1623 
ûog
 = 
›ti⁄_íd
;

1624 
d
.
›ti⁄s
 |
LOG
;

1627 i‡(
	`°rcmp
(
«me
, "--nolog") == 0)

1628 
d
.
›ti⁄s
 &~
LOG
;

1630 i‡(
	`°rcmp
(
«me
, "--continue") == 0)

1631 
d
.
›ti⁄s
 |
CONTINUE
;

1633 i‡(
	`°rcmp
(
«me
, "--stop") == 0)

1634 
d
.
›ti⁄s
 &~
CONTINUE
;

1636 i‡(
	`°rcmp
(
«me
, "--skip-bugs") == 0)

1637 
d
.
›ti⁄s
 |
SKIP_BUGS
;

1639 i‡(
	`°rcmp
(
«me
, "--test-all") == 0)

1640 
d
.
›ti⁄s
 &~
SKIP_BUGS
;

1642 i‡(
	`°rcmp
(
«me
, "--log-skipped") == 0)

1643 
d
.
›ti⁄s
 |
LOG_SKIPPED
;

1645 i‡(
	`°rcmp
(
«me
, "--nolog-skipped") == 0)

1646 
d
.
›ti⁄s
 &~
LOG_SKIPPED
;

1648 i‡(
	`°rcmp
(
«me
, "--find-bad-combos") == 0)

1649 
d
.
›ti⁄s
 |
FIND_BAD_COMBOS
;

1651 i‡(
	`°rcmp
(
«me
, "--nofind-bad-combos") == 0)

1652 
d
.
›ti⁄s
 &~
FIND_BAD_COMBOS
;

1654 i‡(
	`°rcmp
(
«me
, "--list-combos") == 0)

1655 
d
.
›ti⁄s
 |
LIST_COMBOS
;

1657 i‡(
	`°rcmp
(
«me
, "--nolist-combos") == 0)

1658 
d
.
›ti⁄s
 &~
LIST_COMBOS
;

1660 i‡(
«me
[0] == '-' &&Çame[1] == '-')

1662 
	`Ârötf
(
°dîr
, "≤gimage: %s: unknow¿›ti⁄\n", 
«me
);

1671 
i
;

1672 
îr‹s
 = 0;

1674 
i
=
›ti⁄_íd
; i<
¨gc
; ++i)

1677 
ªt
 = 
	`do_ã°
(&
d
, 
¨gv
[
i
]);

1679 i‡(
ªt
 > 
QUIET
)

1686 
∑ss
 = (
d
.
›ti⁄s
 & 
STRICT
) ?

1687 
	`RESULT_STRICT
(
d
.
ªsu…s
Ë: 
	`RESULT_RELAXED
(d.results);

1689 i‡(!
∑ss
)

1690 ++
îr‹s
;

1692 i‡(
d
.
›ti⁄s
 & 
LOG
)

1694 
j
;

1696 
	`¥ötf
("%s:Öngimagê", 
∑ss
 ? "PASS" : "FAIL");

1698 
j
=1; j<
›ti⁄_íd
; ++j)

1699 i‡(
j
 !
ûog
)

1700 
	`¥ötf
("%†", 
¨gv
[
j
]);

1702 
	`¥ötf
("%s\n", 
d
.
fûíame
);

1706 
	`di•œy_˛ón
(&
d
);

1710 
	`di•œy_de°roy
(&
d
);

1712  
îr‹s
 != 0;

1714 
	}
}

1717 
	$maö
()

1719 
	`Ârötf
(
°dîr
, "pngimage:Ço support forÖng_read/write_image\n");

1720  
SKIP
;

1721 
	}
}

	@contrib/libtests/pngstest-errors.h

17 
≤g_uöt_16
 
	ggpc_îr‹
[16 ][16 ][4 ] =

101 
≤g_uöt_16
 
	ggpc_îr‹_vü_löór
[16][4 ][4] =

137 
≤g_uöt_16
 
	ggpc_îr‹_to_cﬁ‹m≠
[8 ][8 ][4] =

	@contrib/libtests/pngstest.c

14 
	#_ISOC90_SOURCE
 1

	)

15 
	#MALLOC_CHECK_
 2

	)

17 
	~<°ddef.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<°dio.h
>

21 
	~<î∫o.h
>

22 
	~<˘y≥.h
>

23 
	~<m©h.h
>

25 #i‡
deföed
(
HAVE_CONFIG_H
Ë&& !deföed(
PNG_NO_CONFIG_H
)

26 
	~<c⁄fig.h
>

32 #ifde‡
PNG_FREESTANDING_TESTS


33 
	~<≤g.h
>

35 
	~"../../≤g.h
"

41 #i‡
PNG_LIBPNG_VER
 >10601 && 
deföed
(
HAVE_CONFIG_H
)

42 
	#SKIP
 77

	)

44 
	#SKIP
 0

	)

47 #ifde‡
PNG_SIMPLIFIED_READ_SUPPORTED


48 
	~"../toﬁs/sRGB.h
"

57 
	#ALLOW_UNUSED_GPC
 0

	)

65 #ifde‡
__˝lu•lus


66 
	#voidˇ°
(
ty≥
, 
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

67 
	#Æignˇ°c⁄°
(
ty≥
, 
vÆue
) \

68 
°©ic_ˇ°
<
ty≥
>(°©ic_ˇ°<c⁄° *>(
vÆue
))

	)

70 
	#voidˇ°
(
ty≥
, 
vÆue
Ë(vÆue)

	)

71 
	#Æignˇ°c⁄°
(
ty≥
, 
vÆue
Ë((c⁄° *)(vÆue))

	)

78 
	gtmpf
[23] = "TMP";

87 
	$make_øndom_byãs
(
≤g_uöt_32
* 
£ed
, * 
pv
, 
size_t
 
size
)

89 
≤g_uöt_32
 
u0
 = 
£ed
[0], 
u1
 = seed[1];

90 
≤g_byãp
 
byãs
 = 
	`voidˇ°
’ng_byãp, 
pv
);

95 
size_t
 
i
;

96 
i
=0; i<
size
; ++i)

99 
≤g_uöt_32
 
u
 = ((
u0
 >> (20-8)Ë^ ((
u1
 << 7) | (u0 >> (32-7)))) & 0xff;

100 
u1
 <<= 8;

101 
u1
 |
u0
 >> 24;

102 
u0
 <<= 8;

103 
u0
 |
u
;

104 *
byãs
++ = (
≤g_byã
)
u
;

107 
£ed
[0] = 
u0
;

108 
£ed
[1] = 
u1
;

109 
	}
}

111 
≤g_uöt_32
 
	gcﬁ‹_£ed
[2];

114 
	$ª£ed
()

116 
cﬁ‹_£ed
[0] = 0x12345678U;

117 
cﬁ‹_£ed
[1] = 0x9abcdefU;

118 
	}
}

121 
	$øndom_cﬁ‹
(
≤g_cﬁ‹p
 
cﬁ‹
)

123 
	`make_øndom_byãs
(
cﬁ‹_£ed
, 
cﬁ‹
,  *color);

124 
	}
}

130 
	$˛o£°öãgî
(
x
)

132  
	`Êo‹
(
x
 + .5);

133 
	}
}

136 
≤g_byã


137 
	$u8d
(
d
)

139 
d
 = 
	`˛o£°öãgî
(d);

140  (
≤g_byã
)
d
;

141 
	}
}

143 
≤g_uöt_16


144 
	$u16d
(
d
)

146 
d
 = 
	`˛o£°öãgî
(d);

147  (
≤g_uöt_16
)
d
;

148 
	}
}

153 
	gsRGB_to_d
[256];

154 
	gg22_to_d
[256];

157 
	$öô_sRGB_to_d
()

159 
i
;

161 
sRGB_to_d
[0] = 0;

162 
i
=1; i<255; ++i)

163 
sRGB_to_d
[
i
] = 
	`löór_‰om_sRGB
(i/255.);

164 
sRGB_to_d
[255] = 1;

166 
g22_to_d
[0] = 0;

167 
i
=1; i<255; ++i)

168 
g22_to_d
[
i
] = 
	`pow
(i/255., 1/.45455);

169 
g22_to_d
[255] = 1;

170 
	}
}

172 
≤g_byã


173 
	$sRGB
(
löór
 )

175  
	`u8d
(255 * 
	`sRGB_‰om_löór
(
löór
));

176 
	}
}

178 
≤g_byã


179 
	$isRGB
(
fixed_löór
)

181  
	`sRGB
(
fixed_löór
 / 65535.);

182 
	}
}

185 
≤g_byã


186 
	$u≈ªmu…ùly
(
comp⁄ít
, 
Æpha
)

188 i‡(
Æpha
 <
comp⁄ít
)

191 i‡(
Æpha
 >= 65535)

192  
	`isRGB
(
comp⁄ít
);

195  
	`sRGB
(()
comp⁄ít
 / 
Æpha
);

196 
	}
}

199 
≤g_uöt_16


200 
	$ûöór
(
fixed_§gb
)

202  
	`u16d
(65535 * 
sRGB_to_d
[
fixed_§gb
]);

203 
	}
}

205 
≤g_uöt_16


206 
	$ûöóø
(
fixed_§gb
, 
Æpha
)

208  
	`u16d
((257 * 
Æpha
Ë* 
sRGB_to_d
[
fixed_§gb
]);

209 
	}
}

211 
≤g_uöt_16


212 
	$ûöór_g22
(
fixed_§gb
)

214  
	`u16d
(65535 * 
g22_to_d
[
fixed_§gb
]);

215 
	}
}

217 #i‡
ALLOW_UNUSED_GPC


218 
≤g_uöt_16


219 
	$ûöóø_g22
(
fixed_§gb
, 
Æpha
)

221  
	`u16d
((257 * 
Æpha
Ë* 
g22_to_d
[
fixed_§gb
]);

222 
	}
}

226 
	$Y‰omRGBöt
(
ú
, 
ig
, 
ib
)

228 
r
 = 
ú
;

229 
g
 = 
ig
;

230 
b
 = 
ib
;

231  
	`Y‰omRGB
(
r
, 
g
, 
b
);

232 
	}
}

239 
	$powî_œw_îr‹8
(
vÆue
)

241 i‡(
vÆue
 > 0 && value < 255)

243 
vd
 = 
vÆue
 / 255.;

244 
e
 = 
	`Ábs
(

245 
	`pow
(
sRGB_to_d
[
vÆue
], 1/2.2Ë- 
	`sRGB_‰om_löór
’ow(
vd
, 2.2)));

248 
e
 = 1+
	`Êo‹
(255 *É);

249  ()
e
;

253 
	}
}

255 
	gîr‹_ö_sRGB_roundåù
 = 56;

257 
	$powî_œw_îr‹16
(
vÆue
)

259 i‡(
vÆue
 > 0 && value < 65535)

264 
vd
 = 
vÆue
 / 65535.;

265 
e
 = 
	`Ábs
(

266 
	`pow
(
	`sRGB_‰om_löór
(
vd
), 2.2Ë- 
	`löór_‰om_sRGB
(pow(vd, 1/2.2)));

269 
e
 = 
îr‹_ö_sRGB_roundåù
+
	`Êo‹
(65535 *É);

270  ()
e
;

274 
	}
}

277 
	$com∑ª_8bô
(
v1
, 
v2
, 
îr‹_limô
, 
mu…ùÀ_Æg‹ôhms
)

279 
e
 = 
	`abs
(
v1
-
v2
);

280 
ev1
, 
ev2
;

282 i‡(
e
 <
îr‹_limô
)

285 i‡(!
mu…ùÀ_Æg‹ôhms
)

288 
ev1
 = 
	`powî_œw_îr‹8
(
v1
);

289 i‡(
e
 <
ev1
)

292 
ev2
 = 
	`powî_œw_îr‹8
(
v2
);

293 i‡(
e
 <
ev2
)

297 
	}
}

300 
	$com∑ª_16bô
(
v1
, 
v2
, 
îr‹_limô
, 
mu…ùÀ_Æg‹ôhms
)

302 
e
 = 
	`abs
(
v1
-
v2
);

303 
ev1
, 
ev2
;

305 i‡(
e
 <
îr‹_limô
)

312 i‡(!
mu…ùÀ_Æg‹ôhms
)

315 
ev1
 = 
	`powî_œw_îr‹16
(
v1
);

316 i‡(
e
 <
ev1
)

319 
ev2
 = 
	`powî_œw_îr‹16
(
v2
);

320 i‡(
e
 <
ev2
)

324 
	}
}

327 
	#USE_FILE
 1

	)

328 
	#USE_STDIO
 2

	)

329 
	#STRICT
 4

	)

330 
	#VERBOSE
 8

	)

331 
	#KEEP_TMPFILES
 16

	)

332 
	#KEEP_GOING
 32

	)

333 
	#ACCUMULATE
 64

	)

334 
	#FAST_WRITE
 128

	)

335 
	#sRGB_16BIT
 256

	)

336 
	#NO_RESEED
 512

	)

337 
	#GBG_ERROR
 1024

	)

341 
	$¥öt_›ts
(
≤g_uöt_32
 
›ts
)

343 i‡(
›ts
 & 
USE_FILE
)

344 
	`¥ötf
(" --file");

345 i‡(
›ts
 & 
USE_STDIO
)

346 
	`¥ötf
(" --stdio");

347 i‡(!(
›ts
 & 
STRICT
))

348 
	`¥ötf
(" --nostrict");

349 i‡(
›ts
 & 
VERBOSE
)

350 
	`¥ötf
(" --verbose");

351 i‡(
›ts
 & 
KEEP_TMPFILES
)

352 
	`¥ötf
(" --preserve");

353 i‡(
›ts
 & 
KEEP_GOING
)

354 
	`¥ötf
(" --keep-going");

355 i‡(
›ts
 & 
ACCUMULATE
)

356 
	`¥ötf
(" --accumulate");

357 i‡(!(
›ts
 & 
FAST_WRITE
))

358 
	`¥ötf
(" --slow");

359 i‡(
›ts
 & 
sRGB_16BIT
)

360 
	`¥ötf
(" --sRGB-16bit");

361 i‡(
›ts
 & 
NO_RESEED
)

362 
	`¥ötf
(" --noreseed");

363 #i‡
PNG_LIBPNG_VER
 < 10700

364 i‡(
›ts
 & 
GBG_ERROR
)

365 
	`¥ötf
(" --fault-gbg-warning");

367 
	}
}

369 
	#FORMAT_NO_CHANGE
 0x80000000

	)

374 
	#FORMAT_COUNT
 64

	)

375 
	#FORMAT_MASK
 0x3f

	)

376 c⁄° * c⁄° 
	gf‹m©_«mes
[
FORMAT_COUNT
] =

452 
≤g_uöt_32


453 
	$f‹m©of
(c⁄° *
¨g
)

455 *
ï
;

456 
f‹m©
 = 
	`°πoul
(
¨g
, &
ï
, 0);

458 i‡(
ï
 > 
¨g
 && *ï =0 && 
f‹m©
 < 
FORMAT_COUNT
)

459  (
≤g_uöt_32
)
f‹m©
;

461 
f‹m©
=0; f‹m© < 
FORMAT_COUNT
; ++format)

463 i‡(
	`°rcmp
(
f‹m©_«mes
[
f‹m©
], 
¨g
) == 0)

464  (
≤g_uöt_32
)
f‹m©
;

467 
	`Ârötf
(
°dîr
, "≤g°e°: f‹m©Çamê'%s' invÆid\n", 
¨g
);

468  
FORMAT_COUNT
;

469 
	}
}

472 
	#FORMAT_SET_COUNT
 (
FORMAT_COUNT
 / 32)

	)

475 
≤g_uöt_32
 
	mbôs
[
FORMAT_SET_COUNT
];

477 
	tf‹m©_li°
;

479 
	$f‹m©_öô
(
f‹m©_li°
 *
pf
)

481 
i
;

482 
i
=0; i<
FORMAT_SET_COUNT
; ++i)

483 
pf
->
bôs
[
i
] = 0;

484 
	}
}

487 
	$f‹m©_˛ór
(
f‹m©_li°
 *
pf
)

489 
i
;

490 
i
=0; i<
FORMAT_SET_COUNT
; ++i)

491 
pf
->
bôs
[
i
] = 0;

492 
	}
}

495 
	$f‹m©_is_öôül
(
f‹m©_li°
 *
pf
)

497 
i
;

498 
i
=0; i<
FORMAT_SET_COUNT
; ++i)

499 i‡(
pf
->
bôs
[
i
] != 0)

503 
	}
}

505 
	$f‹m©_£t
(
f‹m©_li°
 *
pf
, 
≤g_uöt_32
 
f‹m©
)

507 i‡(
f‹m©
 < 
FORMAT_COUNT
)

508  
pf
->
bôs
[
f‹m©
 >> 5] |((
≤g_uöt_32
)1) << (format & 31);

511 
	}
}

514 
	$f‹m©_un£t
(
f‹m©_li°
 *
pf
, 
≤g_uöt_32
 
f‹m©
)

516 i‡(
f‹m©
 < 
FORMAT_COUNT
)

517  
pf
->
bôs
[
f‹m©
 >> 5] &~((
≤g_uöt_32
)1) << (format & 31);

520 
	}
}

523 
	$f‹m©_is£t
(
f‹m©_li°
 *
pf
, 
≤g_uöt_32
 
f‹m©
)

525  
f‹m©
 < 
FORMAT_COUNT
 &&

526 (
pf
->
bôs
[
f‹m©
 >> 5] & (((
≤g_uöt_32
)1) << (format & 31))) != 0;

527 
	}
}

529 
	$f‹m©_deÁu…
(
f‹m©_li°
 *
pf
, 
ªdund™t
)

531 i‡(
ªdund™t
)

533 
i
;

536 
i
=0; i<
FORMAT_SET_COUNT
; ++i)

537 
pf
->
bôs
[
i
] = ~(
≤g_uöt_32
)0;

542 
≤g_uöt_32
 
f
;

544 
f
=0; f<
FORMAT_COUNT
; ++f)

547 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


549 i‡((
f
 & 
PNG_FORMAT_FLAG_COLOR
) == 0 &&

550 (
f
 & 
PNG_FORMAT_FLAG_BGR
) != 0)

552 i‡((
f
 & 0x10U ) != 0)

557 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


558 i‡((
f
 & 
PNG_FORMAT_FLAG_ALPHA
) == 0 &&

559 (
f
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0)

561 i‡((
f
 & 0x20U ) != 0)

565 
	`f‹m©_£t
(
pf
, 
f
);

568 
	}
}

576 
≤g_image
 
	mimage
;

577 
≤g_uöt_32
 
	m›ts
;

578 c⁄° *
	mfûe_«me
;

579 
	m°ride_exåa
;

580 
FILE
 *
	möput_fûe
;

581 
≤g_voidp
 
	möput_mem‹y
;

582 
size_t
 
	möput_mem‹y_size
;

583 
≤g_byãp
 
	mbuf„r
;

584 
±rdiff_t
 
	m°ride
;

585 
size_t
 
	mbufsize
;

586 
size_t
 
	mÆlocsize
;

587 
	mtmpfûe_«me
[32];

588 
≤g_uöt_16
 
	mcﬁ‹m≠
[256*4];

590 
	tImage
;

594 
	$√wimage
(
Image
 *
image
)

596 
	`mem£t
(
image
, 0,  *image);

597 
	}
}

602 
	$ª£timage
(
Image
 *
image
)

604 i‡(
image
->
öput_fûe
 !
NULL
)

605 
	`ªwöd
(
image
->
öput_fûe
);

606 
	}
}

612 
	$‰ìbuf„r
(
Image
 *
image
)

614 i‡(
image
->
buf„r
Ë
	`‰ì
(image->buffer);

615 
image
->
buf„r
 = 
NULL
;

616 
image
->
bufsize
 = 0;

617 
image
->
Ælocsize
 = 0;

618 
	}
}

624 
	$‰ìimage
(
Image
 *
image
)

626 
	`‰ìbuf„r
(
image
);

627 
	`≤g_image_‰ì
(&
image
->image);

629 i‡(
image
->
öput_fûe
 !
NULL
)

631 
	`f˛o£
(
image
->
öput_fûe
);

632 
image
->
öput_fûe
 = 
NULL
;

635 i‡(
image
->
öput_mem‹y
 !
NULL
)

637 
	`‰ì
(
image
->
öput_mem‹y
);

638 
image
->
öput_mem‹y
 = 
NULL
;

639 
image
->
öput_mem‹y_size
 = 0;

642 i‡(
image
->
tmpfûe_«me
[0] !0 && (image->
›ts
 & 
KEEP_TMPFILES
) == 0)

644 ()
	`ªmove
(
image
->
tmpfûe_«me
);

645 
image
->
tmpfûe_«me
[0] = 0;

647 
	}
}

652 
	$öôimage
(
Image
 *
image
, 
≤g_uöt_32
 
›ts
, c⁄° *
fûe_«me
,

653 
°ride_exåa
)

655 
	`‰ìimage
(
image
);

656 
	`mem£t
(&
image
->image, 0,  image->image);

657 
image
->
›ts
 = opts;

658 
image
->
fûe_«me
 = file_name;

659 
image
->
°ride_exåa
 = stride_extra;

660 
	}
}

665 
	#BUFFER_INIT8
 73

	)

667 
	$Ælocbuf„r
(
Image
 *
image
)

669 
size_t
 
size
 = 
	`PNG_IMAGE_BUFFER_SIZE
(
image
->image, image->
°ride
);

671 i‡(
size
+32 > 
image
->
bufsize
)

673 
	`‰ìbuf„r
(
image
);

674 
image
->
buf„r
 = 
	`voidˇ°
(
≤g_byãp
, 
	`mÆloc
(
size
+32));

675 i‡(
image
->
buf„r
 =
NULL
)

677 
	`fÊush
(
°dout
);

678 
	`Ârötf
(
°dîr
,

680 ()
size
);

681 
	`exô
(1);

683 
image
->
bufsize
 = 
size
+32;

686 
	`mem£t
(
image
->
buf„r
, 95, image->
bufsize
);

687 
	`mem£t
(
image
->
buf„r
+16, 
BUFFER_INIT8
, 
size
);

688 
image
->
Ælocsize
 = 
size
;

689 
	}
}

693 
	$check16
(
≤g_c⁄°_byãp
 
bp
, 
b
)

695 
i
 = 16;

698 i‡(*
bp
 !
b
)  1;

699 --
i
);

702 
	}
}

706 
	$checkbuf„r
(
Image
 *
image
, c⁄° *
¨g
)

708 i‡(
	`check16
(
image
->
buf„r
, 95))

710 
	`fÊush
(
°dout
);

711 
	`Ârötf
(
°dîr
, "%s: ovîwrôê© sèπ o‡imagêbuf„r\n", 
¨g
);

712 
	`exô
(1);

715 i‡(
	`check16
(
image
->
buf„r
+16+image->
Ælocsize
, 95))

717 
	`fÊush
(
°dout
);

718 
	`Ârötf
(
°dîr
, "%s: ovîwrôê©Énd o‡imagêbuf„r\n", 
¨g
);

719 
	`exô
(1);

721 
	}
}

727 
	$logîr‹
(
Image
 *
image
, c⁄° *
a1
, c⁄° *
a2
, c⁄° *
a3
)

729 
	`fÊush
(
°dout
);

730 i‡(
image
->image.
w¨nög_‹_îr‹
)

731 
	`Ârötf
(
°dîr
, "%s%s%s: %s\n", 
a1
, 
a2
, 
a3
, 
image
->image.
mesßge
);

734 
	`Ârötf
(
°dîr
, "%s%s%s\n", 
a1
, 
a2
, 
a3
);

736 i‡(
image
->image.
›aque
 !
NULL
)

738 
	`Ârötf
(
°dîr
, "%s: image opaqueÖointerÇon-NULL onÉrror\n",

739 
image
->
fûe_«me
);

740 
	`≤g_image_‰ì
(&
image
->image);

744 
	}
}

750 
	$log˛o£
(
Image
 *
image
, 
FILE
 *
f
, c⁄° *
«me
, c⁄° *
›î©i⁄
)

752 
e
 = 
î∫o
;

754 
	`f˛o£
(
f
);

755  
	`logîr‹
(
image
, 
«me
, 
›î©i⁄
, 
	`°ªº‹
(
e
));

756 
	}
}

762 
	$check›aque
(
Image
 *
image
)

764 i‡(
image
->image.
›aque
 !
NULL
)

766 
	`≤g_image_‰ì
(&
image
->image);

767  
	`logîr‹
(
image
, image->
fûe_«me
, ": opaqueÇot NULL", "");

773 i‡(
image
->image.
w¨nög_‹_îr‹
 != 0 &&

774 (
	`°rcmp
(
image
->image.
mesßge
,

776 (
image
->
›ts
 & 
GBG_ERROR
Ë!0 : (image->›t†& 
STRICT
) != 0))

777  
	`logîr‹
(
image
, image->
fûe_«me
, (image->
›ts
 & 
GBG_ERROR
) != 0 ?

782 
	}
}

793 
	mr
, 
	mg
, 
	mb
, 
	ma
;

794 } 
	tPixñ
;

802 
	mú
, 
	mig
, 
	mib
;

803 
	mdr
, 
	mdg
, 
	mdb
;

804 } 
	tBackground
;

807 
	#BASE_FORMATS
\

808 (
PNG_FORMAT_FLAG_ALPHA
|
PNG_FORMAT_FLAG_COLOR
|
PNG_FORMAT_FLAG_LINEAR
)

	)

814 
	$gp_g8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

816 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

818 
p
->
r
 =Ö->
g
 =Ö->
b
 = 
µ
[0];

819 
p
->
a
 = 255;

820 
	}
}

823 
	$gp_ga8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

825 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

827 
p
->
r
 =Ö->
g
 =Ö->
b
 = 
µ
[0];

828 
p
->
a
 = 
µ
[1];

829 
	}
}

831 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


833 
	$gp_ag8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

835 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

837 
p
->
r
 =Ö->
g
 =Ö->
b
 = 
µ
[1];

838 
p
->
a
 = 
µ
[0];

839 
	}
}

843 
	$gp_rgb8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

845 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

847 
p
->
r
 = 
µ
[0];

848 
p
->
g
 = 
µ
[1];

849 
p
->
b
 = 
µ
[2];

850 
p
->
a
 = 255;

851 
	}
}

853 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


855 
	$gp_bgr8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

857 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

859 
p
->
r
 = 
µ
[2];

860 
p
->
g
 = 
µ
[1];

861 
p
->
b
 = 
µ
[0];

862 
p
->
a
 = 255;

863 
	}
}

867 
	$gp_rgba8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

869 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

871 
p
->
r
 = 
µ
[0];

872 
p
->
g
 = 
µ
[1];

873 
p
->
b
 = 
µ
[2];

874 
p
->
a
 = 
µ
[3];

875 
	}
}

877 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


879 
	$gp_bgø8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

881 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

883 
p
->
r
 = 
µ
[2];

884 
p
->
g
 = 
µ
[1];

885 
p
->
b
 = 
µ
[0];

886 
p
->
a
 = 
µ
[3];

887 
	}
}

890 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


892 
	$gp_¨gb8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

894 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

896 
p
->
r
 = 
µ
[1];

897 
p
->
g
 = 
µ
[2];

898 
p
->
b
 = 
µ
[3];

899 
p
->
a
 = 
µ
[0];

900 
	}
}

903 #i‡
deföed
(
PNG_FORMAT_AFIRST_SUPPORTED
Ë&& deföed(
PNG_FORMAT_BGR_SUPPORTED
)

905 
	$gp_abgr8
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

907 
≤g_c⁄°_byãp
 
µ
 = 
	`voidˇ°
’ng_c⁄°_byãp, 
pb
);

909 
p
->
r
 = 
µ
[3];

910 
p
->
g
 = 
µ
[2];

911 
p
->
b
 = 
µ
[1];

912 
p
->
a
 = 
µ
[0];

913 
	}
}

917 
	$gp_g16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

919 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

921 
p
->
r
 =Ö->
g
 =Ö->
b
 = 
µ
[0];

922 
p
->
a
 = 65535;

923 
	}
}

926 
	$gp_ga16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

928 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

930 
p
->
r
 =Ö->
g
 =Ö->
b
 = 
µ
[0];

931 
p
->
a
 = 
µ
[1];

932 
	}
}

934 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


936 
	$gp_ag16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

938 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

940 
p
->
r
 =Ö->
g
 =Ö->
b
 = 
µ
[1];

941 
p
->
a
 = 
µ
[0];

942 
	}
}

946 
	$gp_rgb16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

948 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

950 
p
->
r
 = 
µ
[0];

951 
p
->
g
 = 
µ
[1];

952 
p
->
b
 = 
µ
[2];

953 
p
->
a
 = 65535;

954 
	}
}

956 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


958 
	$gp_bgr16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

960 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

962 
p
->
r
 = 
µ
[2];

963 
p
->
g
 = 
µ
[1];

964 
p
->
b
 = 
µ
[0];

965 
p
->
a
 = 65535;

966 
	}
}

970 
	$gp_rgba16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

972 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

974 
p
->
r
 = 
µ
[0];

975 
p
->
g
 = 
µ
[1];

976 
p
->
b
 = 
µ
[2];

977 
p
->
a
 = 
µ
[3];

978 
	}
}

980 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


982 
	$gp_bgø16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

984 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

986 
p
->
r
 = 
µ
[2];

987 
p
->
g
 = 
µ
[1];

988 
p
->
b
 = 
µ
[0];

989 
p
->
a
 = 
µ
[3];

990 
	}
}

993 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


995 
	$gp_¨gb16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

997 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

999 
p
->
r
 = 
µ
[1];

1000 
p
->
g
 = 
µ
[2];

1001 
p
->
b
 = 
µ
[3];

1002 
p
->
a
 = 
µ
[0];

1003 
	}
}

1006 #i‡
deföed
(
PNG_FORMAT_AFIRST_SUPPORTED
Ë&& deföed(
PNG_FORMAT_BGR_SUPPORTED
)

1008 
	$gp_abgr16
(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

1010 
≤g_c⁄°_uöt_16p
 
µ
 = 
	`voidˇ°
’ng_c⁄°_uöt_16p, 
pb
);

1012 
p
->
r
 = 
µ
[3];

1013 
p
->
g
 = 
µ
[2];

1014 
p
->
b
 = 
µ
[1];

1015 
p
->
a
 = 
µ
[0];

1016 
	}
}

1021 
	$gë_pixñ
(
≤g_uöt_32
 
f‹m©
))(
Pixñ
 *
p
, 
≤g_c⁄°_voidp
 
pb
)

1027 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
)

1029 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
)

1031 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


1032 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_BGR
)

1034 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
)

1036 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


1037 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
)

1038  
gp_abgr16
;

1042  
gp_bgø16
;

1046  
gp_bgr16
;

1052 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
)

1054 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


1055 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
)

1056  
gp_¨gb16
;

1060  
gp_rgba16
;

1064  
gp_rgb16
;

1070 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
)

1072 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


1073 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
)

1074  
gp_ag16
;

1078  
gp_ga16
;

1082  
gp_g16
;

1088 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
)

1090 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


1091 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_BGR
)

1093 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
)

1095 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


1096 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
)

1097  
gp_abgr8
;

1101  
gp_bgø8
;

1105  
gp_bgr8
;

1111 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
)

1113 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


1114 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
)

1115  
gp_¨gb8
;

1119  
gp_rgba8
;

1123  
gp_rgb8
;

1129 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
)

1131 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


1132 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
)

1133  
gp_ag8
;

1137  
gp_ga8
;

1141  
gp_g8
;

1144 
	}
}

1204 
	$gpc_no›
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1206 ()
back
;

1207 
out
->
r
 = 
ö
->r;

1208 
out
->
g
 = 
ö
->g;

1209 
out
->
b
 = 
ö
->b;

1210 
out
->
a
 = 
ö
->a;

1211 
	}
}

1213 #i‡
ALLOW_UNUSED_GPC


1215 
	$gpc_n›8
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1217 ()
back
;

1218 i‡(
ö
->
a
 == 0)

1219 
out
->
r
 = out->
g
 = out->
b
 = 255;

1223 
out
->
r
 = 
ö
->r;

1224 
out
->
g
 = 
ö
->g;

1225 
out
->
b
 = 
ö
->b;

1228 
out
->
a
 = 
ö
->a;

1229 
	}
}

1232 #i‡
ALLOW_UNUSED_GPC


1234 
	$gpc_n›6
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1236 ()
back
;

1237 i‡(
ö
->
a
 == 0)

1238 
out
->
r
 = out->
g
 = out->
b
 = 65535;

1242 
out
->
r
 = 
ö
->r;

1243 
out
->
g
 = 
ö
->g;

1244 
out
->
b
 = 
ö
->b;

1247 
out
->
a
 = 
ö
->a;

1248 
	}
}

1254 
	$gpc_bckg
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1256 i‡(
ö
->
a
 <= 0)

1257 
out
->
r
 = out->
g
 = out->
b
 = 
back
->
ig
;

1259 i‡(
ö
->
a
 >= 255)

1260 
out
->
r
 = out->
g
 = out->
b
 = 
ö
->g;

1264 
a
 = 
ö
->a / 255.;

1266 
out
->
r
 = out->
g
 = out->
b
 = 
	`sRGB
(
sRGB_to_d
[
ö
->g] * 
a
 + 
back
->
dg
 * (1-a));

1269 
out
->
a
 = 255;

1270 
	}
}

1274 
	$gpc_bckc
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1276 i‡(
ö
->
a
 <= 0)

1278 
out
->
r
 = 
back
->
ú
;

1279 
out
->
g
 = 
back
->
ig
;

1280 
out
->
b
 = 
back
->
ib
;

1283 i‡(
ö
->
a
 >= 255)

1285 
out
->
r
 = 
ö
->r;

1286 
out
->
g
 = 
ö
->g;

1287 
out
->
b
 = 
ö
->b;

1292 
a
 = 
ö
->a / 255.;

1294 
out
->
r
 = 
	`sRGB
(
sRGB_to_d
[
ö
->r] * 
a
 + 
back
->
dr
 * (1-a));

1295 
out
->
g
 = 
	`sRGB
(
sRGB_to_d
[
ö
->g] * 
a
 + 
back
->
dg
 * (1-a));

1296 
out
->
b
 = 
	`sRGB
(
sRGB_to_d
[
ö
->b] * 
a
 + 
back
->
db
 * (1-a));

1299 
out
->
a
 = 255;

1300 
	}
}

1304 
	$gpc_g8
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1306 ()
back
;

1308 i‡(
ö
->
r
 =ö->
g
 && in->g =ö->
b
)

1309 
out
->
r
 = out->
g
 = out->
b
 = 
ö
->g;

1312 
out
->
r
 = out->
g
 = out->
b
 =

1313 
	`sRGB
(
	`Y‰omRGB
(
sRGB_to_d
[
ö
->
r
], sRGB_to_d[ö->
g
], sRGB_to_d[ö->
b
]));

1315 
out
->
a
 = 
ö
->a;

1316 
	}
}

1320 
	$gpc_g8b
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1322 i‡(
ö
->
a
 <= 0)

1323 
out
->
r
 = out->
g
 = out->
b
 = 
back
->
ig
;

1325 i‡(
ö
->
a
 >= 255)

1327 i‡(
ö
->
r
 =ö->
g
 && in->g =ö->
b
)

1328 
out
->
r
 = out->
g
 = out->
b
 = 
ö
->g;

1331 
out
->
r
 = out->
g
 = out->
b
 = 
	`sRGB
(
	`Y‰omRGB
(

1332 
sRGB_to_d
[
ö
->
r
], sRGB_to_d[ö->
g
], sRGB_to_d[ö->
b
]));

1337 
a
 = 
ö
->a/255.;

1339 
out
->
r
 = out->
g
 = out->
b
 = 
	`sRGB
(
a
 * 
	`Y‰omRGB
(
sRGB_to_d
[
ö
->r],

1340 
sRGB_to_d
[
ö
->
g
], sRGB_to_d[ö->
b
]Ë+ 
back
->
dg
 * (1-
a
));

1343 
out
->
a
 = 255;

1344 
	}
}

1349 
	$gpc_lö
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1351 ()
back
;

1353 
out
->
r
 = 
	`ûöór
(
ö
->r);

1355 i‡(
ö
->
g
 =ö->
r
)

1357 
out
->
g
 = out->
r
;

1359 i‡(
ö
->
b
 =ö->
r
)

1360 
out
->
b
 = out->
r
;

1363 
out
->
b
 = 
	`ûöór
(
ö
->b);

1368 
out
->
g
 = 
	`ûöór
(
ö
->g);

1370 i‡(
ö
->
b
 =ö->
r
)

1371 
out
->
b
 = out->
r
;

1373 i‡(
ö
->
b
 =ö->
g
)

1374 
out
->
b
 = out->
g
;

1377 
out
->
b
 = 
	`ûöór
(
ö
->b);

1380 
out
->
a
 = 65535;

1381 
	}
}

1385 
	$gpc_¥e
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1387 ()
back
;

1389 
out
->
r
 = 
	`ûöóø
(
ö
->r, in->
a
);

1391 i‡(
ö
->
g
 =ö->
r
)

1393 
out
->
g
 = out->
r
;

1395 i‡(
ö
->
b
 =ö->
r
)

1396 
out
->
b
 = out->
r
;

1399 
out
->
b
 = 
	`ûöóø
(
ö
->b, in->
a
);

1404 
out
->
g
 = 
	`ûöóø
(
ö
->g, in->
a
);

1406 i‡(
ö
->
b
 =ö->
r
)

1407 
out
->
b
 = out->
r
;

1409 i‡(
ö
->
b
 =ö->
g
)

1410 
out
->
b
 = out->
g
;

1413 
out
->
b
 = 
	`ûöóø
(
ö
->b, in->
a
);

1416 
out
->
a
 = 
ö
->a * 257;

1417 
	}
}

1421 
	$gpc_¥eq
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1423 ()
back
;

1425 
out
->
r
 = 
	`ûöóø
(
ö
->r, in->
a
);

1427 i‡(
ö
->
g
 =ö->
r
)

1429 
out
->
g
 = out->
r
;

1431 i‡(
ö
->
b
 =ö->
r
)

1432 
out
->
b
 = out->
r
;

1435 
out
->
b
 = 
	`ûöóø
(
ö
->b, in->
a
);

1440 
out
->
g
 = 
	`ûöóø
(
ö
->g, in->
a
);

1442 i‡(
ö
->
b
 =ö->
r
)

1443 
out
->
b
 = out->
r
;

1445 i‡(
ö
->
b
 =ö->
g
)

1446 
out
->
b
 = out->
g
;

1449 
out
->
b
 = 
	`ûöóø
(
ö
->b, in->
a
);

1452 
out
->
a
 = 65535;

1453 
	}
}

1457 
	$gpc_glö
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1459 ()
back
;

1461 i‡(
ö
->
r
 =ö->
g
 && in->g =ö->
b
)

1462 
out
->
r
 = out->
g
 = out->
b
 = 
	`ûöór
(
ö
->g);

1465 
out
->
r
 = out->
g
 = out->
b
 = 
	`u16d
(65535 *

1466 
	`Y‰omRGB
(
sRGB_to_d
[
ö
->
r
], sRGB_to_d[ö->
g
], sRGB_to_d[ö->
b
]));

1468 
out
->
a
 = 65535;

1469 
	}
}

1473 
	$gpc_g¥e
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1475 ()
back
;

1477 i‡(
ö
->
r
 =ö->
g
 && in->g =ö->
b
)

1478 
out
->
r
 = out->
g
 = out->
b
 = 
	`ûöóø
(
ö
->g, in->
a
);

1481 
out
->
r
 = out->
g
 = out->
b
 = 
	`u16d
(
ö
->
a
 * 257 *

1482 
	`Y‰omRGB
(
sRGB_to_d
[
ö
->
r
], sRGB_to_d[ö->
g
], sRGB_to_d[ö->
b
]));

1484 
out
->
a
 = 257 * 
ö
->a;

1485 
	}
}

1489 
	$gpc_g¥q
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1491 ()
back
;

1493 i‡(
ö
->
r
 =ö->
g
 && in->g =ö->
b
)

1494 
out
->
r
 = out->
g
 = out->
b
 = 
	`ûöóø
(
ö
->g, in->
a
);

1497 
out
->
r
 = out->
g
 = out->
b
 = 
	`u16d
(
ö
->
a
 * 257 *

1498 
	`Y‰omRGB
(
sRGB_to_d
[
ö
->
r
], sRGB_to_d[ö->
g
], sRGB_to_d[ö->
b
]));

1500 
out
->
a
 = 65535;

1501 
	}
}

1506 
	$gpc_Lö
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1508 ()
back
;

1510 
out
->
r
 = 
	`ûöór_g22
(
ö
->r);

1512 i‡(
ö
->
g
 =ö->
r
)

1514 
out
->
g
 = out->
r
;

1516 i‡(
ö
->
b
 =ö->
r
)

1517 
out
->
b
 = out->
r
;

1520 
out
->
b
 = 
	`ûöór_g22
(
ö
->b);

1525 
out
->
g
 = 
	`ûöór_g22
(
ö
->g);

1527 i‡(
ö
->
b
 =ö->
r
)

1528 
out
->
b
 = out->
r
;

1530 i‡(
ö
->
b
 =ö->
g
)

1531 
out
->
b
 = out->
g
;

1534 
out
->
b
 = 
	`ûöór_g22
(
ö
->b);

1537 
out
->
a
 = 65535;

1538 
	}
}

1540 #i‡
ALLOW_UNUSED_GPC


1544 
	$gpc_Pª
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1546 ()
back
;

1548 
out
->
r
 = 
	`ûöóø_g22
(
ö
->r, in->
a
);

1550 i‡(
ö
->
g
 =ö->
r
)

1552 
out
->
g
 = out->
r
;

1554 i‡(
ö
->
b
 =ö->
r
)

1555 
out
->
b
 = out->
r
;

1558 
out
->
b
 = 
	`ûöóø_g22
(
ö
->b, in->
a
);

1563 
out
->
g
 = 
	`ûöóø_g22
(
ö
->g, in->
a
);

1565 i‡(
ö
->
b
 =ö->
r
)

1566 
out
->
b
 = out->
r
;

1568 i‡(
ö
->
b
 =ö->
g
)

1569 
out
->
b
 = out->
g
;

1572 
out
->
b
 = 
	`ûöóø_g22
(
ö
->b, in->
a
);

1575 
out
->
a
 = 
ö
->a * 257;

1576 
	}
}

1579 #i‡
ALLOW_UNUSED_GPC


1582 
	$gpc_Pªq
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1584 ()
back
;

1586 
out
->
r
 = 
	`ûöóø_g22
(
ö
->r, in->
a
);

1588 i‡(
ö
->
g
 =ö->
r
)

1590 
out
->
g
 = out->
r
;

1592 i‡(
ö
->
b
 =ö->
r
)

1593 
out
->
b
 = out->
r
;

1596 
out
->
b
 = 
	`ûöóø_g22
(
ö
->b, in->
a
);

1601 
out
->
g
 = 
	`ûöóø_g22
(
ö
->g, in->
a
);

1603 i‡(
ö
->
b
 =ö->
r
)

1604 
out
->
b
 = out->
r
;

1606 i‡(
ö
->
b
 =ö->
g
)

1607 
out
->
b
 = out->
g
;

1610 
out
->
b
 = 
	`ûöóø_g22
(
ö
->b, in->
a
);

1613 
out
->
a
 = 65535;

1614 
	}
}

1617 #i‡
ALLOW_UNUSED_GPC


1621 
	$gpc_Glö
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1623 ()
back
;

1625 i‡(
ö
->
r
 =ö->
g
 && in->g =ö->
b
)

1626 
out
->
r
 = out->
g
 = out->
b
 = 
	`ûöór_g22
(
ö
->g);

1629 
out
->
r
 = out->
g
 = out->
b
 = 
	`u16d
(65535 *

1630 
	`Y‰omRGB
(
g22_to_d
[
ö
->
r
], g22_to_d[ö->
g
], g22_to_d[ö->
b
]));

1632 
out
->
a
 = 65535;

1633 
	}
}

1636 #i‡
ALLOW_UNUSED_GPC


1641 
	$gpc_G¥e
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1643 ()
back
;

1645 i‡(
ö
->
r
 =ö->
g
 && in->g =ö->
b
)

1646 
out
->
r
 = out->
g
 = out->
b
 = 
	`ûöóø_g22
(
ö
->g, in->
a
);

1649 
out
->
r
 = out->
g
 = out->
b
 = 
	`u16d
(
ö
->
a
 * 257 *

1650 
	`Y‰omRGB
(
g22_to_d
[
ö
->
r
], g22_to_d[ö->
g
], g22_to_d[ö->
b
]));

1652 
out
->
a
 = 257 * 
ö
->a;

1653 
	}
}

1656 #i‡
ALLOW_UNUSED_GPC


1659 
	$gpc_G¥q
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1661 ()
back
;

1663 i‡(
ö
->
r
 =ö->
g
 && in->g =ö->
b
)

1664 
out
->
r
 = out->
g
 = out->
b
 = 
	`ûöóø_g22
(
ö
->g, in->
a
);

1667 
out
->
r
 = out->
g
 = out->
b
 = 
	`u16d
(
ö
->
a
 * 257 *

1668 
	`Y‰omRGB
(
g22_to_d
[
ö
->
r
], g22_to_d[ö->
g
], g22_to_d[ö->
b
]));

1670 
out
->
a
 = 65535;

1671 
	}
}

1677 
	$gpc_sRGB
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1679 ()
back
;

1681 
out
->
r
 = 
	`isRGB
(
ö
->r);

1683 i‡(
ö
->
g
 =ö->
r
)

1685 
out
->
g
 = out->
r
;

1687 i‡(
ö
->
b
 =ö->
r
)

1688 
out
->
b
 = out->
r
;

1691 
out
->
b
 = 
	`isRGB
(
ö
->b);

1696 
out
->
g
 = 
	`isRGB
(
ö
->g);

1698 i‡(
ö
->
b
 =ö->
r
)

1699 
out
->
b
 = out->
r
;

1701 i‡(
ö
->
b
 =ö->
g
)

1702 
out
->
b
 = out->
g
;

1705 
out
->
b
 = 
	`isRGB
(
ö
->b);

1708 
out
->
a
 = 255;

1709 
	}
}

1713 
	$gpc_u≈g
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1715 ()
back
;

1717 i‡(
ö
->
a
 <= 128)

1719 
out
->
r
 = out->
g
 = out->
b
 = 255;

1720 
out
->
a
 = 0;

1725 
out
->
r
 = out->
g
 = out->
b
 = 
	`sRGB
(()
ö
->g / in->
a
);

1726 
out
->
a
 = 
	`u8d
(
ö
->a / 257.);

1728 
	}
}

1732 
	$gpc_u≈c
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1734 ()
back
;

1736 i‡(
ö
->
a
 <= 128)

1738 
out
->
r
 = out->
g
 = out->
b
 = 255;

1739 
out
->
a
 = 0;

1744 
out
->
r
 = 
	`sRGB
(()
ö
->∏/ in->
a
);

1745 
out
->
g
 = 
	`sRGB
(()
ö
->g / in->
a
);

1746 
out
->
b
 = 
	`sRGB
(()
ö
->b / in->
a
);

1747 
out
->
a
 = 
	`u8d
(
ö
->a / 257.);

1749 
	}
}

1753 
	$gpc_b16g
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1755 i‡(
ö
->
a
 <= 0)

1756 
out
->
r
 = out->
g
 = out->
b
 = 
back
->
ig
;

1760 
a
 = 
ö
->a/65535.;

1761 
a1
 = 1-
a
;

1763 
a
 /= 65535;

1764 
out
->
r
 = out->
g
 = out->
b
 = 
	`sRGB
(
ö
->g * 
a
 + 
back
->
dg
 * 
a1
);

1767 
out
->
a
 = 255;

1768 
	}
}

1772 
	$gpc_b16c
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1774 i‡(
ö
->
a
 <= 0)

1776 
out
->
r
 = 
back
->
ú
;

1777 
out
->
g
 = 
back
->
ig
;

1778 
out
->
b
 = 
back
->
ib
;

1783 
a
 = 
ö
->a/65535.;

1784 
a1
 = 1-
a
;

1786 
a
 /= 65535;

1787 
out
->
r
 = 
	`sRGB
(
ö
->∏* 
a
 + 
back
->
dr
 * 
a1
);

1788 
out
->
g
 = 
	`sRGB
(
ö
->g * 
a
 + 
back
->
dg
 * 
a1
);

1789 
out
->
b
 = 
	`sRGB
(
ö
->b * 
a
 + 
back
->
db
 * 
a1
);

1792 
out
->
a
 = 255;

1793 
	}
}

1797 
	$gpc_sG
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1799 ()
back
;

1801 
out
->
r
 = out->
g
 = out->
b
 = 
	`sRGB
(
	`Y‰omRGBöt
(
ö
->r, in->g, in->b)/65535);

1802 
out
->
a
 = 255;

1803 
	}
}

1807 
	$gpc_sGp
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1809 ()
back
;

1811 i‡(
ö
->
a
 <= 128)

1813 
out
->
r
 = out->
g
 = out->
b
 = 255;

1814 
out
->
a
 = 0;

1819 
out
->
r
 = out->
g
 = out->
b
 = 
	`sRGB
(
	`Y‰omRGBöt
(
ö
->r, in->g, in->b)/ö->
a
);

1820 
out
->
a
 = 
	`u8d
(
ö
->a / 257.);

1822 
	}
}

1826 
	$gpc_sCp
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1828 ()
back
;

1830 i‡(
ö
->
a
 <= 128)

1832 
out
->
r
 = out->
g
 = out->
b
 = 255;

1833 
out
->
a
 = 0;

1838 
out
->
r
 = 
	`sRGB
(()
ö
->∏/ in->
a
);

1839 
out
->
g
 = 
	`sRGB
(()
ö
->g / in->
a
);

1840 
out
->
b
 = 
	`sRGB
(()
ö
->b / in->
a
);

1841 
out
->
a
 = 
	`u8d
(
ö
->a / 257.);

1843 
	}
}

1848 
	$gpc_gb16
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1850 i‡(
ö
->
a
 <= 0)

1851 
out
->
r
 = out->
g
 = out->
b
 = 
back
->
ig
;

1853 i‡(
ö
->
a
 >= 65535)

1854 
out
->
r
 = out->
g
 = out->
b
 = 
	`isRGB
(
ö
->g);

1858 
a
 = 
ö
->a / 65535.;

1859 
a1
 = 1-
a
;

1861 
a
 /= 65535;

1862 
out
->
r
 = out->
g
 = out->
b
 = 
	`sRGB
(
ö
->g * 
a
 + 
back
->
dg
 * 
a1
);

1865 
out
->
a
 = 255;

1866 
	}
}

1870 
	$gpc_cb16
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1872 i‡(
ö
->
a
 <= 0)

1874 
out
->
r
 = 
back
->
ú
;

1875 
out
->
g
 = 
back
->
ig
;

1876 
out
->
b
 = 
back
->
ib
;

1879 i‡(
ö
->
a
 >= 65535)

1881 
out
->
r
 = 
	`isRGB
(
ö
->r);

1882 
out
->
g
 = 
	`isRGB
(
ö
->g);

1883 
out
->
b
 = 
	`isRGB
(
ö
->b);

1888 
a
 = 
ö
->a / 65535.;

1889 
a1
 = 1-
a
;

1891 
a
 /= 65535;

1892 
out
->
r
 = 
	`sRGB
(
ö
->∏* 
a
 + 
back
->
dr
 * 
a1
);

1893 
out
->
g
 = 
	`sRGB
(
ö
->g * 
a
 + 
back
->
dg
 * 
a1
);

1894 
out
->
b
 = 
	`sRGB
(
ö
->b * 
a
 + 
back
->
db
 * 
a1
);

1897 
out
->
a
 = 255;

1898 
	}
}

1903 
	$gpc_A
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1905 ()
back
;

1906 
out
->
r
 = 
ö
->r;

1907 
out
->
g
 = 
ö
->g;

1908 
out
->
b
 = 
ö
->b;

1909 
out
->
a
 = 65535;

1910 
	}
}

1914 
	$gpc_g16
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1916 ()
back
;

1917 
out
->
r
 = out->
g
 = out->
b
 = 
	`u16d
(
	`Y‰omRGBöt
(
ö
->r, in->g, in->b));

1918 
out
->
a
 = 65535;

1919 
	}
}

1923 
	$gpc_g16q
(
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
)

1925 ()
back
;

1926 
out
->
r
 = out->
g
 = out->
b
 = 
	`u16d
(
	`Y‰omRGBöt
(
ö
->r, in->g, in->b));

1927 
out
->
a
 = 
ö
->a;

1928 
	}
}

1930 #i‡
ALLOW_UNUSED_GPC


1932 (* c⁄° 
gpc_unu£d
[])

1933 (
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
) =

1935 
gpc_Pª
, 
gpc_Pªq
, 
gpc_Glö
, 
gpc_G¥e
, 
gpc_G¥q
, 
gpc_n›8
, 
gpc_n›6


1936 
	}
};

1957 #i‡
PNG_FORMAT_FLAG_ALPHA
 =1 && 
PNG_FORMAT_FLAG_COLOR
 == 2 &&\

1958 
	gPNG_FORMAT_FLAG_LINEAR
 == 4

1959 (* c⁄° 
gpc_‚
[8 ][8 ])

1960 (
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
) =

1963 {
gpc_no›
,gpc_no›,gpc_no›,gpc_no›, 
gpc_Lö
, gpc_Lin, gpc_Lin, gpc_Lin },

1964 {
gpc_bckg
,
gpc_no›
,
gpc_bckc
,gpc_no›, 
gpc_¥eq
,
gpc_¥e
, gpc_preq,gpc_pre },

1965 {
gpc_g8
, gpc_g8, 
gpc_no›
,gpc_no›, 
gpc_glö
,gpc_glö,
gpc_lö
, gpc_lin },

1966 {
gpc_g8b
, 
gpc_g8
, 
gpc_bckc
,
gpc_no›
, 
gpc_g¥q
,
gpc_g¥e
,
gpc_¥eq
,
gpc_¥e
 },

1967 {
gpc_sRGB
,gpc_sRGB,gpc_sRGB,gpc_sRGB, 
gpc_no›
,gpc_noop,gpc_noop,gpc_noop},

1968 {
gpc_b16g
,
gpc_u≈g
,
gpc_b16c
,
gpc_u≈c
, 
gpc_A
, 
gpc_no›
,gpc_A, gpc_noop},

1969 {
gpc_sG
, gpc_sG, 
gpc_sRGB
,gpc_sRGB, 
gpc_g16
, gpc_g16, 
gpc_no›
,gpc_noop},

1970 {
gpc_gb16
,
gpc_sGp
, 
gpc_cb16
,
gpc_sCp
, 
gpc_g16
, 
gpc_g16q
,
gpc_A
, 
gpc_no›
}

1971 
	}
};

1976 (* c⁄° 
gpc_‚_cﬁ‹m≠≥d
[8 ][8 ])

1977 (
Pixñ
 *
out
, c⁄° Pixñ *
ö
, c⁄° 
Background
 *
back
) =

1980 {
gpc_no›
,gpc_no›,gpc_no›,gpc_no›, 
gpc_lö
, gpc_lin, gpc_lin, gpc_lin },

1981 {
gpc_bckg
,
gpc_no›
,
gpc_bckc
,gpc_no›, 
gpc_¥eq
,
gpc_¥e
, gpc_preq,gpc_pre },

1982 {
gpc_g8
, gpc_g8, 
gpc_no›
,gpc_no›, 
gpc_glö
,gpc_glö,
gpc_lö
, gpc_lin },

1983 {
gpc_g8b
, 
gpc_g8
, 
gpc_bckc
,
gpc_no›
, 
gpc_g¥q
,
gpc_g¥e
,
gpc_¥eq
,
gpc_¥e
 },

1984 {
gpc_sRGB
,gpc_sRGB,gpc_sRGB,gpc_sRGB, 
gpc_no›
,gpc_noop,gpc_noop,gpc_noop},

1985 {
gpc_b16g
,
gpc_u≈g
,
gpc_b16c
,
gpc_u≈c
, 
gpc_A
, 
gpc_no›
,gpc_A, gpc_noop},

1986 {
gpc_sG
, gpc_sG, 
gpc_sRGB
,gpc_sRGB, 
gpc_g16
, gpc_g16, 
gpc_no›
,gpc_noop},

1987 {
gpc_gb16
,
gpc_sGp
, 
gpc_cb16
,
gpc_sCp
, 
gpc_g16
, 
gpc_g16q
,
gpc_A
, 
gpc_no›
}

1988 
	}
};

2019 #i‡
PNG_FORMAT_FLAG_COLORMAP
 == 8

2020 
	~"≤g°e°-îr‹s.h
"

2027 
Image
* 
	mö_image
;

2028 c⁄° 
Image
* 
	mout_image
;

2034 
Background
 
	mbackground_cﬁ‹
;

2035 c⁄° 
Background
* 
	mbackground
;

2038 
	mö_›aque
;

2039 
	mis_∑Àâe
;

2040 
	maccumuœã
;

2041 
	mouçut_8bô
;

2043 (*
	mö_gp
)(
	mPixñ
*, 
	m≤g_c⁄°_voidp
);

2044 (*
	mout_gp
)(
	mPixñ
*, 
	m≤g_c⁄°_voidp
);

2046 (*
	må™sf‹m
)(
Pixñ
 *
	mout
, c⁄° Pixñ *
	mö
, c⁄° 
Background
 *
	mback
);

2049 (*
	m‰om_löór
)(
Pixñ
 *
	mout
, c⁄° Pixñ *
	mö
, c⁄° 
Background
 *
	mback
);

2052 
≤g_uöt_16
 
	mîr‹
[4];

2057 
≤g_uöt_16
 *
	mîr‹_±r
;

2060 
	tTønsf‹m
;

2064 
	$å™sf‹m_‰om_f‹m©s
(
Tønsf‹m
 *
ªsu…
, 
Image
 *
ö_image
,

2065 c⁄° 
Image
 *
out_image
, 
≤g_c⁄°_cﬁ‹p
 
background
, 
vü_löór
)

2067 
≤g_uöt_32
 
ö_f‹m©
, 
out_f‹m©
;

2068 
≤g_uöt_32
 
ö_ba£
, 
out_ba£
;

2070 
	`mem£t
(
ªsu…
, 0,  *result);

2073 
ªsu…
->
ö_image
 = in_image;

2074 
ªsu…
->
out_image
 = out_image;

2076 
ö_f‹m©
 = 
ö_image
->
image
.
f‹m©
;

2077 
out_f‹m©
 = 
out_image
->
image
.
f‹m©
;

2079 i‡(
ö_f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
)

2080 
ªsu…
->
ö_›aque
 = 65535;

2082 
ªsu…
->
ö_›aque
 = 255;

2084 
ªsu…
->
ouçut_8bô
 = (
out_f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) == 0;

2086 
ªsu…
->
is_∑Àâe
 = 0;

2087 
ªsu…
->
accumuœã
 = (
ö_image
->
›ts
 & 
ACCUMULATE
) != 0;

2090 
ªsu…
->
ö_gp
 = 
	`gë_pixñ
(
ö_f‹m©
);

2091 
ªsu…
->
out_gp
 = 
	`gë_pixñ
(
out_f‹m©
);

2094 
ö_f‹m©
 &
BASE_FORMATS
 | 
PNG_FORMAT_FLAG_COLORMAP
;

2095 
ö_ba£
 = 
ö_f‹m©
 & 
BASE_FORMATS
;

2096 
out_f‹m©
 &
BASE_FORMATS
 | 
PNG_FORMAT_FLAG_COLORMAP
;

2097 
out_ba£
 = 
out_f‹m©
 & 
BASE_FORMATS
;

2099 i‡(
vü_löór
)

2102 i‡(
out_f‹m©
 & (
PNG_FORMAT_FLAG_LINEAR
|
PNG_FORMAT_FLAG_COLORMAP
))

2104 
	`Ârötf
(
°dîr
, "internalÅransform viaÜinearÉrror 0x%x->0x%x\n",

2105 
ö_f‹m©
, 
out_f‹m©
);

2106 
	`exô
(1);

2109 
ªsu…
->
å™sf‹m
 = 
gpc_‚
[
ö_ba£
][
out_ba£
 | 
PNG_FORMAT_FLAG_LINEAR
];

2110 
ªsu…
->
‰om_löór
 = 
gpc_‚
[
out_ba£
 | 
PNG_FORMAT_FLAG_LINEAR
][out_base];

2111 
ªsu…
->
îr‹_±r
 = 
gpc_îr‹_vü_löór
[
ö_f‹m©
][
out_f‹m©
];

2114 i‡(~
ö_f‹m©
 & 
out_f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
)

2120 
ªsu…
->
å™sf‹m
 = 
gpc_‚
[
ö_ba£
][
out_ba£
];

2121 
ªsu…
->
‰om_löór
 = 
NULL
;

2122 
ªsu…
->
îr‹_±r
 = 
gpc_îr‹_to_cﬁ‹m≠
[
ö_ba£
][
out_ba£
];

2133 i‡(
ö_f‹m©
 & 
out_f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
)

2134 
ªsu…
->
å™sf‹m
 = 
gpc_‚_cﬁ‹m≠≥d
[
ö_ba£
][
out_ba£
];

2136 
ªsu…
->
å™sf‹m
 = 
gpc_‚
[
ö_ba£
][
out_ba£
];

2137 
ªsu…
->
‰om_löór
 = 
NULL
;

2138 
ªsu…
->
îr‹_±r
 = 
gpc_îr‹
[
ö_f‹m©
][
out_f‹m©
];

2145 
ªsu…
->
background
 = 
NULL
;

2148 i‡(
ö_f‹m©
 & ~
out_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
)

2157 
ªsu…
->
background
 = &ªsu…->
background_cﬁ‹
;

2159 i‡(
out_f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
 || 
vü_löór
)

2161 i‡(
out_f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
)

2163 
ªsu…
->
background_cﬁ‹
.
ú
 =

2164 
ªsu…
->
background_cﬁ‹
.
ig
 =

2165 
ªsu…
->
background_cﬁ‹
.
ib
 = 0;

2166 
ªsu…
->
background_cﬁ‹
.
dr
 =

2167 
ªsu…
->
background_cﬁ‹
.
dg
 =

2168 
ªsu…
->
background_cﬁ‹
.
db
 = 0;

2173 
ªsu…
->
background_cﬁ‹
.
ú
 =

2174 
ªsu…
->
background_cﬁ‹
.
ig
 =

2175 
ªsu…
->
background_cﬁ‹
.
ib
 = 
BUFFER_INIT8
 * 257;

2176 
ªsu…
->
background_cﬁ‹
.
dr
 =

2177 
ªsu…
->
background_cﬁ‹
.
dg
 =

2178 
ªsu…
->
background_cﬁ‹
.
db
 = 0;

2184 i‡(
background
 !
NULL
)

2186 i‡(
out_f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
)

2188 
ªsu…
->
background_cﬁ‹
.
ú
 = 
background
->
ªd
;

2189 
ªsu…
->
background_cﬁ‹
.
ig
 = 
background
->
gªí
;

2190 
ªsu…
->
background_cﬁ‹
.
ib
 = 
background
->
blue
;

2194 
ªsu…
->
background_cﬁ‹
.
dr
 = 
sRGB_to_d
[
background
->
ªd
];

2195 
ªsu…
->
background_cﬁ‹
.
dg
 = 
sRGB_to_d
[
background
->
gªí
];

2196 
ªsu…
->
background_cﬁ‹
.
db
 = 
sRGB_to_d
[
background
->
blue
];

2201 
ªsu…
->
background_cﬁ‹
.
ú
 =

2202 
ªsu…
->
background_cﬁ‹
.
ig
 =

2203 
ªsu…
->
background_cﬁ‹
.
ib
 = 
background
->
gªí
;

2207 
ªsu…
->
background_cﬁ‹
.
dr
 =

2208 
ªsu…
->
background_cﬁ‹
.
dg
 =

2209 
ªsu…
->
background_cﬁ‹
.
db
 = 
sRGB_to_d
[
background
->
gªí
];

2213 i‡((
out_f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
) == 0)

2215 
ªsu…
->
background_cﬁ‹
.
ú
 =

2216 
ªsu…
->
background_cﬁ‹
.
ig
 =

2217 
ªsu…
->
background_cﬁ‹
.
ib
 = 
BUFFER_INIT8
;

2221 
ªsu…
->
background_cﬁ‹
.
dr
 =

2222 
ªsu…
->
background_cﬁ‹
.
dg
 =

2223 
ªsu…
->
background_cﬁ‹
.
db
 = 
sRGB_to_d
[
BUFFER_INIT8
];

2231 
ªsu…
->
background
 = 
NULL
;

2235 i‡(
ªsu…
->
background
 =
NULL
)

2237 
ªsu…
->
background_cﬁ‹
.
ú
 =

2238 
ªsu…
->
background_cﬁ‹
.
ig
 =

2239 
ªsu…
->
background_cﬁ‹
.
ib
 = -1;

2240 
ªsu…
->
background_cﬁ‹
.
dr
 =

2241 
ªsu…
->
background_cﬁ‹
.
dg
 =

2242 
ªsu…
->
background_cﬁ‹
.
db
 = 1E30;

2247 
ªsu…
->
îr‹
[0] =Ñesu…->
îr‹_±r
[0];

2248 
ªsu…
->
îr‹
[1] =Ñesu…->
îr‹_±r
[1];

2249 
ªsu…
->
îr‹
[2] =Ñesu…->
îr‹_±r
[2];

2250 
ªsu…
->
îr‹
[3] =Ñesu…->
îr‹_±r
[3];

2251 
	}
}

2282 
	gîr‹_ö_lib≤g_gamma
;

2283 
	gîr‹_vü_löór
[256];

2286 
	$öô_îr‹_vü_löór
()

2288 
Æpha
;

2290 
îr‹_vü_löór
[0] = 255;

2292 
Æpha
=1;álpha<=255; ++alpha)

2304 
v
 = 
	`Êo‹
(255*
	`pow
(.5 / 
Æpha
, 1/2.2)+.1);

2306 
îr‹_vü_löór
[
Æpha
] = ()
v
;

2312 
îr‹_ö_lib≤g_gamma
 = 14;

2313 
	}
}

2317 
	$¥öt_pixñ
(
°rög
[64], c⁄° 
Pixñ
 *
pixñ
, 
≤g_uöt_32
 
f‹m©
)

2319 
f‹m©
 & (
PNG_FORMAT_FLAG_ALPHA
|
PNG_FORMAT_FLAG_COLOR
))

2322 
	`•rötf
(
°rög
, "%s(%d)", 
f‹m©_«mes
[
f‹m©
], 
pixñ
->
g
);

2325 
PNG_FORMAT_FLAG_ALPHA
:

2326 
	`•rötf
(
°rög
, "%s(%d,%d)", 
f‹m©_«mes
[
f‹m©
], 
pixñ
->
g
,

2327 
pixñ
->
a
);

2330 
PNG_FORMAT_FLAG_COLOR
:

2331 
	`•rötf
(
°rög
, "%s(%d,%d,%d)", 
f‹m©_«mes
[
f‹m©
],

2332 
pixñ
->
r
,Öixñ->
g
,Öixñ->
b
);

2335 
PNG_FORMAT_FLAG_COLOR
|
PNG_FORMAT_FLAG_ALPHA
:

2336 
	`•rötf
(
°rög
, "%s(%d,%d,%d,%d)", 
f‹m©_«mes
[
f‹m©
],

2337 
pixñ
->
r
,Öixñ->
g
,Öixñ->
b
,Öixñ->
a
);

2341 
	`•rötf
(
°rög
, "invalid-format");

2344 
	}
}

2347 
	$logpixñ
(c⁄° 
Tønsf‹m
 *
å™sf‹m
, 
≤g_uöt_32
 
x
,Öng_uöt_32 
y
,

2348 c⁄° 
Pixñ
 *
ö
, c⁄° Pixñ *
ˇlc
, c⁄° Pixñ *
out
, c⁄° *
ªas⁄
)

2350 
≤g_uöt_32
 
ö_f‹m©
 = 
å™sf‹m
->
ö_image
->
image
.
f‹m©
;

2351 
≤g_uöt_32
 
out_f‹m©
 = 
å™sf‹m
->
out_image
->
image
.
f‹m©
;

2353 
≤g_uöt_32
 
back_f‹m©
 = 
out_f‹m©
 & ~
PNG_FORMAT_FLAG_ALPHA
;

2354 c⁄° *
vü_löór
 = "";

2356 
pixñ_ö
[64], 
pixñ_ˇlc
[64], 
pixñ_out
[64], 
pixñ_loc
[64];

2357 
background_öfo
[100];

2359 
	`¥öt_pixñ
(
pixñ_ö
, 
ö
, 
ö_f‹m©
);

2360 
	`¥öt_pixñ
(
pixñ_ˇlc
, 
ˇlc
, 
out_f‹m©
);

2361 
	`¥öt_pixñ
(
pixñ_out
, 
out
, 
out_f‹m©
);

2363 i‡(
å™sf‹m
->
is_∑Àâe
)

2364 
	`•rötf
(
pixñ_loc
, "∑Àâe: %lu", ()
y
);

2366 
	`•rötf
(
pixñ_loc
, "%lu,%lu", ()
x
, ()
y
);

2368 i‡(
å™sf‹m
->
‰om_löór
 !
NULL
)

2370 
vü_löór
 = " (viaÜinear)";

2375 
back_f‹m©
 |
PNG_FORMAT_FLAG_LINEAR
;

2378 i‡(
å™sf‹m
->
background
 !
NULL
)

2380 
Pixñ
 
back
;

2381 
pixñ_back
[64];

2383 
back
.
r
 = 
å™sf‹m
->
background
->
ú
;

2384 
back
.
g
 = 
å™sf‹m
->
background
->
ig
;

2385 
back
.
b
 = 
å™sf‹m
->
background
->
ib
;

2386 
back
.
a
 = -1;

2388 
	`¥öt_pixñ
(
pixñ_back
, &
back
, 
back_f‹m©
);

2389 
	`•rötf
(
background_öfo
, " o¿background %s", 
pixñ_back
);

2393 
background_öfo
[0] = 0;

2395 i‡(
å™sf‹m
->
ö_image
->
fûe_«me
 !å™sf‹m->
out_image
->file_name)

2397 
îr‹_buf„r
[512];

2398 
	`•rötf
(
îr‹_buf„r
,

2400 "U£ --¥e£rvê™dÉxamöe: ", 
pixñ_loc
, 
ªas⁄
, 
vü_löór
,

2401 
pixñ_ö
, 
background_öfo
, 
pixñ_out
, 
pixñ_ˇlc
);

2402  
	`logîr‹
(
å™sf‹m
->
ö_image
,Åønsf‹m->ö_image->
fûe_«me
,

2403 
îr‹_buf„r
, 
å™sf‹m
->
out_image
->
fûe_«me
);

2408 
îr‹_buf„r
[512];

2409 
	`•rötf
(
îr‹_buf„r
,

2412 
pixñ_loc
, 
ªas⁄
, 
vü_löór
, 
pixñ_ö
, 
background_öfo
, 
pixñ_out
,

2413 
pixñ_ˇlc
);

2414  
	`logîr‹
(
å™sf‹m
->
ö_image
,Åønsf‹m->ö_image->
fûe_«me
,

2415 
îr‹_buf„r
, "");

2417 
	}
}

2420 
	$cmµixñ
(
Tønsf‹m
 *
å™sf‹m
, 
≤g_c⁄°_voidp
 
ö
,Öng_c⁄°_void∞
out
,

2421 
≤g_uöt_32
 
x
,Öng_uöt_32 
y
 )

2423 
maxîr
;

2424 
≤g_c⁄°_ch¨p
 
îrmsg
;

2425 
Pixñ
 
pixñ_ö
, 
pixñ_ˇlc
, 
pixñ_out
;

2427 
å™sf‹m
->
	`ö_gp
(&
pixñ_ö
, 
ö
);

2429 i‡(
å™sf‹m
->
‰om_löór
 =
NULL
)

2430 
å™sf‹m
->
	`å™sf‹m
(&
pixñ_ˇlc
, &
pixñ_ö
,Åønsf‹m->
background
);

2434 
å™sf‹m
->
	`å™sf‹m
(&
pixñ_out
, &
pixñ_ö
,Åønsf‹m->
background
);

2435 
å™sf‹m
->
	`‰om_löór
(&
pixñ_ˇlc
, &
pixñ_out
, 
NULL
);

2438 
å™sf‹m
->
	`out_gp
(&
pixñ_out
, 
out
);

2441 i‡(
pixñ_ˇlc
.
a
 =
pixñ_out
.®&&Öixñ_ˇlc.
r
 ==Öixel_out.r &&

2442 
pixñ_ˇlc
.
g
 =
pixñ_out
.g &&Öixñ_ˇlc.
b
 ==Öixel_out.b)

2449 i‡(
å™sf‹m
->
ouçut_8bô
 && 
pixñ_ˇlc
.
a
 =0 && 
pixñ_out
.a == 0)

2455 
îrmsg
 = 
NULL
;

2457 
îr_a
 = 
	`abs
(
pixñ_ˇlc
.
a
-
pixñ_out
.a);

2459 i‡(
îr_a
 > 
å™sf‹m
->
îr‹
[3])

2462 i‡(
å™sf‹m
->
accumuœã
)

2463 
å™sf‹m
->
îr‹
[3] = (
≤g_uöt_16
)
îr_a
;

2466 
îrmsg
 = "alpha";

2473 i‡(
îrmsg
 =
NULL
 && 
å™sf‹m
->
ouçut_8bô
 &&

2474 (
pixñ_ˇlc
.
a
 =0 || 
pixñ_out
.a == 0))

2477 i‡(
îrmsg
 =
NULL
)

2479 
îr_r
 = 
	`abs
(
pixñ_ˇlc
.
r
 - 
pixñ_out
.r);

2480 
îr_g
 = 
	`abs
(
pixñ_ˇlc
.
g
 - 
pixñ_out
.g);

2481 
îr_b
 = 
	`abs
(
pixñ_ˇlc
.
b
 - 
pixñ_out
.b);

2482 
limô
;

2484 i‡((
îr_r
 | 
îr_g
 | 
îr_b
) == 0)

2488 i‡(
pixñ_ö
.
a
 >
å™sf‹m
->
ö_›aque
)

2490 
îrmsg
 = "opaque component";

2491 
limô
 = 2;

2494 i‡(
pixñ_ö
.
a
 > 0)

2496 
îrmsg
 = "alpha component";

2497 
limô
 = 1;

2502 
îrmsg
 = "transparent component (background)";

2503 
limô
 = 0;

2506 
maxîr
 = 
îr_r
;

2507 i‡(
maxîr
 < 
îr_g
) maxerr =Érr_g;

2508 i‡(
maxîr
 < 
îr_b
) maxerr =Érr_b;

2510 i‡(
maxîr
 <
å™sf‹m
->
îr‹
[
limô
])

2516 i‡(
å™sf‹m
->
accumuœã
)

2518 
å™sf‹m
->
îr‹
[
limô
] = (
≤g_uöt_16
)
maxîr
;

2524  
	`logpixñ
(
å™sf‹m
, 
x
, 
y
, &
pixñ_ö
, &
pixñ_ˇlc
, &
pixñ_out
, 
îrmsg
);

2525 
	}
}

2527 
≤g_byã


2528 
	$comp⁄ít_loc
(
≤g_byã
 
loc
[4], 
≤g_uöt_32
 
f‹m©
)

2542 
≤g_byã
 
ch™√ls
;

2544 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
)

2546 
ch™√ls
 = 3;

2548 
loc
[2] = 1;

2550 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


2551 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_BGR
)

2553 
loc
[1] = 2;

2554 
loc
[3] = 0;

2560 
loc
[1] = 0;

2561 
loc
[3] = 2;

2567 
ch™√ls
 = 1;

2568 
loc
[1] =Üoc[2] =Üoc[3] = 0;

2571 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
)

2573 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


2574 i‡(
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
)

2576 
loc
[0] = 0;

2577 ++
loc
[1];

2578 ++
loc
[2];

2579 ++
loc
[3];

2584 
loc
[0] = 
ch™√ls
;

2586 ++
ch™√ls
;

2590 
loc
[0] = 4;

2592  
ch™√ls
;

2593 
	}
}

2599 
	$com∑ª_two_images
(
Image
 *
a
, Imagê*
b
, 
vü_löór
,

2600 
≤g_c⁄°_cﬁ‹p
 
background
)

2602 
±rdiff_t
 
°ridó
 = 
a
->
°ride
;

2603 
±rdiff_t
 
°rideb
 = 
b
->
°ride
;

2604 
≤g_c⁄°_byãp
 
rowa
 = 
a
->
buf„r
+16;

2605 
≤g_c⁄°_byãp
 
rowb
 = 
b
->
buf„r
+16;

2606 
≤g_uöt_32
 
width
 = 
a
->
image
.width;

2607 
≤g_uöt_32
 
height
 = 
a
->
image
.height;

2608 
≤g_uöt_32
 
f‹m©a
 = 
a
->
image
.
f‹m©
;

2609 
≤g_uöt_32
 
f‹m©b
 = 
b
->
image
.
f‹m©
;

2610 
a_ßm∂e
 = 
	`PNG_IMAGE_SAMPLE_SIZE
(
f‹m©a
);

2611 
b_ßm∂e
 = 
	`PNG_IMAGE_SAMPLE_SIZE
(
f‹m©b
);

2612 
Æpha_added
, 
Æpha_ªmoved
;

2613 
bch™√ls
;

2614 
≤g_uöt_32
 
y
;

2615 
Tønsf‹m
 
å
;

2616 
btﬂ
[4]={0,0,0,0};

2619 i‡(
width
 !
b
->
image
.width || 
height
 != b->image.height)

2620  
	`logîr‹
(
a
,á->
fûe_«me
, ": width x height changed: ",

2621 
b
->
fûe_«me
);

2624 
	`å™sf‹m_‰om_f‹m©s
(&
å
, 
a
, 
b
, 
background
, 
vü_löór
);

2627 i‡(!(
f‹m©a
 & 
PNG_FORMAT_FLAG_COLORMAP
) &&

2628 (
f‹m©a
 & 
PNG_FORMAT_FLAG_LINEAR
))

2629 
°ridó
 *= 2;

2631 i‡(!(
f‹m©b
 & 
PNG_FORMAT_FLAG_COLORMAP
) &&

2632 (
f‹m©b
 & 
PNG_FORMAT_FLAG_LINEAR
))

2633 
°rideb
 *= 2;

2635 i‡(
°ridó
 < 0Ë
rowa
 +(
height
-1) * (-stridea);

2636 i‡(
°rideb
 < 0Ë
rowb
 +(
height
-1) * (-strideb);

2643 i‡(
f‹m©a
 & 
f‹m©b
 & 
PNG_FORMAT_FLAG_COLORMAP
)

2646 
≤g_c⁄°_byãp
 
µa
, 
µb
;

2647 
m©ch
;

2648 
≤g_byã
 
ö_u£
[256], 
amax
 = 0, 
bmax
 = 0;

2650 
	`mem£t
(
ö_u£
, 0,  in_use);

2652 
µa
 = 
rowa
;

2653 
µb
 = 
rowb
;

2659 
y
=0, 
m©ch
=1; y<
height
 && m©ch; ++y, 
µa
 +
°ridó
, 
µb
 +
°rideb
)

2661 
≤g_uöt_32
 
x
;

2663 
x
=0; x<
width
; ++x)

2665 
≤g_byã
 
bvÆ
 = 
µb
[
x
];

2666 
≤g_byã
 
avÆ
 = 
µa
[
x
];

2668 i‡(
bvÆ
 > 
bmax
)

2669 
bmax
 = 
bvÆ
;

2671 i‡(
bvÆ
 !
avÆ
)

2672 
m©ch
 = 0;

2674 
ö_u£
[
avÆ
] = 1;

2675 i‡(
avÆ
 > 
amax
)

2676 
amax
 = 
avÆ
;

2681 i‡(
m©ch
)

2686 
≤g_c⁄°_byãp
 
a_cm≠
 = (≤g_c⁄°_byãp)
a
->
cﬁ‹m≠
;

2687 
≤g_c⁄°_byãp
 
b_cm≠
 = (≤g_c⁄°_byãp)
b
->
cﬁ‹m≠
;

2688 
ªsu…
 = 1;

2691 
å
.
is_∑Àâe
 = 1;

2693 
y
=0; y<256; ++y, 
a_cm≠
 +
a_ßm∂e
, 
b_cm≠
 +
b_ßm∂e
)

2694 i‡(
ö_u£
[
y
])

2701 i‡(
y
 >
a
->
image
.
cﬁ‹m≠_íåõs
)

2703 i‡((
a
->
›ts
 & 
ACCUMULATE
) == 0)

2705 
pödex
[16];

2706 
	`•rötf
(
pödex
, "%lu[%lu]", ()
y
,

2707 ()
a
->
image
.
cﬁ‹m≠_íåõs
);

2708 
	`logîr‹
(
a
,á->
fûe_«me
, ": badÖixñ index: ", 
pödex
);

2710 
ªsu…
 = 0;

2713 i‡(
y
 >
b
->
image
.
cﬁ‹m≠_íåõs
)

2715 i‡((
b
->
›ts
 & 
ACCUMULATE
) == 0)

2717 
pödex
[16];

2718 
	`•rötf
(
pödex
, "%lu[%lu]", ()
y
,

2719 ()
b
->
image
.
cﬁ‹m≠_íåõs
);

2720 
	`logîr‹
(
b
, b->
fûe_«me
, ": badÖixñ index: ", 
pödex
);

2722 
ªsu…
 = 0;

2726 i‡(!
	`cmµixñ
(&
å
, 
a_cm≠
, 
b_cm≠
, 0, 
y
))

2727 
ªsu…
 = 0;

2731 i‡(
a
->
›ts
 & 
ACCUMULATE
)

2733 
å
.
îr‹_±r
[0] =År.
îr‹
[0];

2734 
å
.
îr‹_±r
[1] =År.
îr‹
[1];

2735 
å
.
îr‹_±r
[2] =År.
îr‹
[2];

2736 
å
.
îr‹_±r
[3] =År.
îr‹
[3];

2737 
ªsu…
 = 1;

2740  
ªsu…
;

2747 i‡((
a
->
›ts
 & 
ACCUMULATE
) == 0)

2749 #ifde‡
__GNUC__


2750 
	#BYTE_CHARS
 20

	)

2752 
	#BYTE_CHARS
 3

	)

2757 i‡(
amax
 >
a
->
image
.
cﬁ‹m≠_íåõs
)

2759 
pödex
[3+2*
BYTE_CHARS
];

2760 
	`•rötf
(
pödex
, "%d[%u]", 
amax
,

2761 (
≤g_byã
Ë
a
->
image
.
cﬁ‹m≠_íåõs
);

2762  
	`logîr‹
(
a
,á->
fûe_«me
, ": badÖixñ index: ", 
pödex
);

2765 i‡(
bmax
 >
b
->
image
.
cﬁ‹m≠_íåõs
)

2767 
pödex
[3+2*
BYTE_CHARS
];

2768 
	`•rötf
(
pödex
, "%d[%u]", 
bmax
,

2769 (
≤g_byã
Ë
b
->
image
.
cﬁ‹m≠_íåõs
);

2770  
	`logîr‹
(
b
, b->
fûe_«me
, ": badÖixñ index: ", 
pödex
);

2790 i‡(!(((
f‹m©a
 ^ 
f‹m©b
Ë& 
PNG_FORMAT_FLAG_LINEAR
) |

2791 (
f‹m©a
 & (
f‹m©b
 ^ 
PNG_FORMAT_FLAG_COLOR
) & PNG_FORMAT_FLAG_COLOR)))

2794 
≤g_uöt_32
 
Æpha_ch™ged
 = (
f‹m©a
 ^ 
f‹m©b
Ë& 
PNG_FORMAT_FLAG_ALPHA
;

2799 
Æpha_ªmoved
 = (
f‹m©a
 & 
Æpha_ch™ged
) != 0;

2802 
Æpha_added
 = (
f‹m©b
 & 
Æpha_ch™ged
) != 0;

2810 
i
;

2811 
≤g_byã
 
Æoc
[4];

2812 
≤g_byã
 
bloc
[4];

2820 ()
	`comp⁄ít_loc
(
Æoc
, 
f‹m©a
);

2821 
bch™√ls
 = 
	`comp⁄ít_loc
(
bloc
, 
f‹m©b
);

2824 
i
=0; i<4; ++i)

2826 i‡(
bloc
[
i
] < 4)

2827 
btﬂ
[
bloc
[
i
]] = 
Æoc
[i];

2830 i‡(
Æpha_added
)

2831 
Æpha_added
 = 
bloc
[0];

2834 
Æpha_added
 = 4;

2836 i‡(
Æpha_ªmoved
)

2837 
Æpha_ªmoved
 = 
Æoc
[0];

2840 
Æpha_ªmoved
 = 4;

2849 
bch™√ls
 = 0;

2850 
Æpha_ªmoved
 = 
Æpha_added
 = 4;

2851 
btﬂ
[3] = btoa[2] = btoa[1] = btoa[0] = 4;

2854 
y
=0; y<
height
; ++y, 
rowa
 +
°ridó
, 
rowb
 +
°rideb
)

2856 
≤g_c⁄°_byãp
 
µa
, 
µb
;

2857 
≤g_uöt_32
 
x
;

2859 
x
=0, 
µa
=
rowa
, 
µb
=
rowb
; x<
width
; ++x)

2861 
≤g_c⁄°_byãp
 
pß
, 
psb
;

2863 i‡(
f‹m©a
 & 
PNG_FORMAT_FLAG_COLORMAP
)

2864 
pß
 = (
≤g_c⁄°_byãp
)
a
->
cﬁ‹m≠
 + 
a_ßm∂e
 * *
µa
++;

2866 
pß
 = 
µa
,Ö∑ +
a_ßm∂e
;

2868 i‡(
f‹m©b
 & 
PNG_FORMAT_FLAG_COLORMAP
)

2869 
psb
 = (
≤g_c⁄°_byãp
)
b
->
cﬁ‹m≠
 + 
b_ßm∂e
 * *
µb
++;

2871 
psb
 = 
µb
,Öpb +
b_ßm∂e
;

2874 i‡(
bch™√ls
)

2882 i‡(
f‹m©b
 & 
PNG_FORMAT_FLAG_LINEAR
)

2884 
≤g_c⁄°_uöt_16p
 
pua
 = 
	`Æignˇ°c⁄°
’ng_c⁄°_uöt_16p, 
pß
);

2885 
≤g_c⁄°_uöt_16p
 
pub
 = 
	`Æignˇ°c⁄°
’ng_c⁄°_uöt_16p, 
psb
);

2887 
bch™√ls
)

2890 i‡(
pua
[
btﬂ
[3]] !
pub
[3]) ;

2893 i‡(
pua
[
btﬂ
[2]] !
pub
[2]) ;

2896 i‡(
pua
[
btﬂ
[1]] !
pub
[1]) ;

2899 i‡(
pua
[
btﬂ
[0]] !
pub
[0]) ;

2900 i‡(
Æpha_added
 !4 && 
pub
[alpha_added] != 65535) ;

2907 i‡(
Æpha_ªmoved
 =4 || 
pß
[alpha_removed] == 255)

2909 
bch™√ls
)

2912 i‡(
pß
[
btﬂ
[3]] !
psb
[3]) ;

2915 i‡(
pß
[
btﬂ
[2]] !
psb
[2]) ;

2918 i‡(
pß
[
btﬂ
[1]] !
psb
[1]) ;

2921 i‡(
pß
[
btﬂ
[0]] !
psb
[0]) ;

2922 i‡(
Æpha_added
 !4 && 
psb
[alpha_added] != 255) ;

2933 i‡(!
	`cmµixñ
(&
å
, 
pß
, 
psb
, 
x
, 
y
Ë&& (
a
->
›ts
 & 
KEEP_GOING
) == 0)

2939 i‡(
a
->
›ts
 & 
ACCUMULATE
)

2941 
å
.
îr‹_±r
[0] =År.
îr‹
[0];

2942 
å
.
îr‹_±r
[1] =År.
îr‹
[1];

2943 
å
.
îr‹_±r
[2] =År.
îr‹
[2];

2944 
å
.
îr‹_±r
[3] =År.
îr‹
[3];

2948 
	}
}

2954 
	$ªad_fûe
(
Image
 *
image
, 
≤g_uöt_32
 
f‹m©
, 
≤g_c⁄°_cﬁ‹p
 
background
)

2956 
	`mem£t
(&
image
->image, 0,  image->image);

2957 
image
->image.
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

2959 i‡(
image
->
öput_mem‹y
 !
NULL
)

2961 i‡(!
	`≤g_image_begö_ªad_‰om_mem‹y
(&
image
->image, image->
öput_mem‹y
,

2962 
image
->
öput_mem‹y_size
))

2963  
	`logîr‹
(
image
, "mem‹y inô: ", image->
fûe_«me
, "");

2966 #ifde‡
PNG_STDIO_SUPPORTED


2967 i‡(
image
->
öput_fûe
 !
NULL
)

2969 i‡(!
	`≤g_image_begö_ªad_‰om_°dio
(&
image
->image, image->
öput_fûe
))

2970  
	`logîr‹
(
image
, "°diÿöô: ", image->
fûe_«me
, "");

2975 i‡(!
	`≤g_image_begö_ªad_‰om_fûe
(&
image
->image, image->
fûe_«me
))

2976  
	`logîr‹
(
image
, "fûêöô: ", image->
fûe_«me
, "");

2981  
	`logîr‹
(
image
, "unsupported file/stdio init: ",

2982 
image
->
fûe_«me
, "");

2987 i‡(
image
->
›ts
 & 
sRGB_16BIT
)

2988 
image
->image.
Êags
 |
PNG_IMAGE_FLAG_16BIT_sRGB
;

2994 
ªsu…
;

2995 
≤g_uöt_32
 
image_f‹m©
;

2998 
image_f‹m©
 = 
image
->image.
f‹m©
;

3000 i‡(
image
->
›ts
 & 
VERBOSE
)

3002 
	`¥ötf
("%†%lu x %lu %†-> %s", 
image
->
fûe_«me
,

3003 ()
image
->image.
width
,

3004 ()
image
->image.
height
,

3005 
f‹m©_«mes
[
image_f‹m©
 & 
FORMAT_MASK
],

3006 (
f‹m©
 & 
FORMAT_NO_CHANGE
Ë!0 || 
image
->image.format == format

3007 ? "nÿch™ge" : 
f‹m©_«mes
[
f‹m©
 & 
FORMAT_MASK
]);

3009 i‡(
background
 !
NULL
)

3010 
	`¥ötf
(" background(%d,%d,%d)\n", 
background
->
ªd
,

3011 
background
->
gªí
, background->
blue
);

3013 
	`¥ötf
("\n");

3015 
	`fÊush
(
°dout
);

3022 i‡((
f‹m©
 & 
FORMAT_NO_CHANGE
) != 0)

3024 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
) != 0 &&

3025 (
image_f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
) != 0)

3026 
f‹m©
 = (
image_f‹m©
 & ~
BASE_FORMATS
) | (format & BASE_FORMATS);

3029 
f‹m©
 = 
image_f‹m©
;

3032 
image
->image.
f‹m©
 = format;

3034 
image
->
°ride
 = 
	`PNG_IMAGE_ROW_STRIDE
(image->imageË+ image->
°ride_exåa
;

3035 
	`Ælocbuf„r
(
image
);

3037 
ªsu…
 = 
	`≤g_image_föish_ªad
(&
image
->image, 
background
,

3038 
image
->
buf„r
+16, (
≤g_öt_32
)image->
°ride
, image->
cﬁ‹m≠
);

3040 
	`checkbuf„r
(
image
, image->
fûe_«me
);

3042 i‡(
ªsu…
)

3043  
	`check›aque
(
image
);

3046  
	`logîr‹
(
image
, image->
fûe_«me
, ": imageÑead failed", "");

3048 
	}
}

3055 
	$ªad_⁄e_fûe
(
Image
 *
image
)

3057 i‡(!(
image
->
›ts
 & 
USE_FILE
Ë|| (image->›t†& 
USE_STDIO
))

3060 
FILE
 *
f
 = 
	`f›í
(
image
->
fûe_«me
, "rb");

3062 i‡(
f
 !
NULL
)

3064 i‡(
image
->
›ts
 & 
USE_FILE
)

3065 
image
->
öput_fûe
 = 
f
;

3069 i‡(
	`f£ek
(
f
, 0, 
SEEK_END
) == 0)

3071 
cb
 = 
	`·ñl
(
f
);

3073 i‡(
cb
 > 0)

3075 #i‚de‡
__COVERITY__


3076 i‡(()
cb
 <(
size_t
)~(size_t)0)

3079 
≤g_byãp
 
b
 = 
	`voidˇ°
’ng_byãp, 
	`mÆloc
((
size_t
)
cb
));

3081 i‡(
b
 !
NULL
)

3083 
	`ªwöd
(
f
);

3085 i‡(
	`‰ód
(
b
, (
size_t
)
cb
, 1, 
f
) == 1)

3087 
	`f˛o£
(
f
);

3088 
image
->
öput_mem‹y_size
 = 
cb
;

3089 
image
->
öput_mem‹y
 = 
b
;

3094 
	`‰ì
(
b
);

3095  
	`log˛o£
(
image
, 
f
, image->
fûe_«me
,

3101  
	`log˛o£
(
image
, 
f
, image->
fûe_«me
,

3106  
	`log˛o£
(
image
, 
f
, image->
fûe_«me
,

3114 i‡(
cb
 == 0)

3115  
	`log˛o£
(
image
, 
f
, image->
fûe_«me
,

3119  
	`log˛o£
(
image
, 
f
, image->
fûe_«me
,

3124  
	`log˛o£
(
image
, 
f
, image->
fûe_«me
, ": seek failed: ");

3129  
	`logîr‹
(
image
, image->
fûe_«me
, ": open failed: ",

3130 
	`°ªº‹
(
î∫o
));

3133  
	`ªad_fûe
(
image
, 
FORMAT_NO_CHANGE
, 
NULL
);

3134 
	}
}

3136 #ifde‡
PNG_SIMPLIFIED_WRITE_SUPPORTED


3138 
	$wrôe_⁄e_fûe
(
Image
 *
ouçut
, Imagê*
image
, 
c⁄vît_to_8bô
)

3140 i‡(
image
->
›ts
 & 
FAST_WRITE
)

3141 
image
->image.
Êags
 |
PNG_IMAGE_FLAG_FAST
;

3143 i‡(
image
->
›ts
 & 
USE_STDIO
)

3145 #ifde‡
PNG_SIMPLIFIED_WRITE_STDIO_SUPPORTED


3146 #i‚de‡
__COVERITY__


3147 
FILE
 *
f
 = 
	`tmpfûe
();

3164 
tmpfûe
[] = "pngstest-XXXXXX";

3165 
fûedes
;

3166 
FILE
 *
f
;

3167 
	`umask
(0177);

3168 
fûedes
 = 
	`mk°emp
(
tmpfûe
);

3169 i‡(
fûedes
 < 0)

3170 
f
 = 
NULL
;

3173 
f
 = 
	`fd›í
(
fûedes
,"w+");

3177 (Ë
	`u∆ök
(
tmpfûe
);

3181 i‡(
f
 !
NULL
)

3183 i‡(
	`≤g_image_wrôe_to_°dio
(&
image
->image, 
f
, 
c⁄vît_to_8bô
,

3184 
image
->
buf„r
+16, (
≤g_öt_32
)image->
°ride
, image->
cﬁ‹m≠
))

3186 i‡(
	`fÊush
(
f
) == 0)

3188 
	`ªwöd
(
f
);

3189 
	`öôimage
(
ouçut
, 
image
->
›ts
, "tmpfûe", image->
°ride_exåa
);

3190 
ouçut
->
öput_fûe
 = 
f
;

3191 i‡(!
	`check›aque
(
image
))

3196  
	`log˛o£
(
image
, 
f
, "tmpfile", ": flush: ");

3201 
	`f˛o£
(
f
);

3202  
	`logîr‹
(
image
, "tmpfile", ": write failed", "");

3207  
	`logîr‹
(
image
, "tmpfûe", ": o≥n: ", 
	`°ªº‹
(
î∫o
));

3209  
	`logîr‹
(
image
, "tmpfile", ": open: unsupported", "");

3213 i‡(
image
->
›ts
 & 
USE_FILE
)

3215 #ifde‡
PNG_SIMPLIFIED_WRITE_STDIO_SUPPORTED


3216 
cou¡î
 = 0;

3217 
«me
[32];

3219 
	`•rötf
(
«me
, "%s%u.≤g", 
tmpf
, ++
cou¡î
);

3221 i‡(
	`≤g_image_wrôe_to_fûe
(&
image
->image, 
«me
, 
c⁄vît_to_8bô
,

3222 
image
->
buf„r
+16, (
≤g_öt_32
)image->
°ride
, image->
cﬁ‹m≠
))

3224 
	`öôimage
(
ouçut
, 
image
->
›ts
, ouçut->
tmpfûe_«me
,

3225 
image
->
°ride_exåa
);

3227 
	`°r˝y
(
ouçut
->
tmpfûe_«me
, 
«me
);

3229 i‡(!
	`check›aque
(
image
))

3234  
	`logîr‹
(
image
, 
«me
, ": write failed", "");

3236  
	`logîr‹
(
image
, "stdio", ": open: unsupported", "");

3242 
≤g_Æloc_size_t
 
size
;

3244 i‡(
	`≤g_image_wrôe_gë_mem‹y_size
(
image
->image, 
size
, 
c⁄vît_to_8bô
,

3245 
image
->
buf„r
+16, (
≤g_öt_32
)image->
°ride
, image->
cﬁ‹m≠
))

3250 i‡(
size
 > 
	`PNG_IMAGE_PNG_SIZE_MAX
(
image
->image))

3251  
	`logîr‹
(
image
, "memory", ": PNG_IMAGE_SIZE_MAX wrong", "");

3253 
	`öôimage
(
ouçut
, 
image
->
›ts
, "mem‹y", image->
°ride_exåa
);

3254 
ouçut
->
öput_mem‹y
 = 
	`mÆloc
(
size
);

3256 i‡(
ouçut
->
öput_mem‹y
 !
NULL
)

3258 
ouçut
->
öput_mem‹y_size
 = 
size
;

3260 i‡(
	`≤g_image_wrôe_to_mem‹y
(&
image
->image, 
ouçut
->
öput_mem‹y
,

3261 &
ouçut
->
öput_mem‹y_size
, 
c⁄vît_to_8bô
, 
image
->
buf„r
+16,

3262 (
≤g_öt_32
)
image
->
°ride
, image->
cﬁ‹m≠
))

3266 i‡(
size
 !
ouçut
->
öput_mem‹y_size
)

3267  
	`logîr‹
(
image
, "memory", ": memory size wrong", "");

3271  
	`logîr‹
(
image
, "memory", ": write failed", "");

3275  
	`logîr‹
(
image
, "memory", ": out of memory", "");

3279  
	`logîr‹
(
image
, "memory", ": get size:", "");

3289 i‡(
	`ªad_fûe
(
ouçut
, 
image
->image.
f‹m©
 | 
FORMAT_NO_CHANGE
, 
NULL
))

3291 
≤g_uöt_32
 
‹igöÆ_f‹m©
 = 
image
->image.
f‹m©
;

3293 i‡(
c⁄vît_to_8bô
)

3294 
‹igöÆ_f‹m©
 &~
PNG_FORMAT_FLAG_LINEAR
;

3296 i‡((
ouçut
->
image
.
f‹m©
 & 
BASE_FORMATS
) !=

3297 (
‹igöÆ_f‹m©
 & 
BASE_FORMATS
))

3298  
	`logîr‹
(
image
, image->
fûe_«me
, ": format changed onÑead: ",

3299 
ouçut
->
fûe_«me
);

3301  
	`com∑ª_two_images
(
image
, 
ouçut
, 0 , 
NULL
);

3305  
	`logîr‹
(
ouçut
, ouçut->
tmpfûe_«me
,

3307 
	}
}

3311 
	$ã°image
(
Image
 *
image
, 
≤g_uöt_32
 
›ts
, 
f‹m©_li°
 *
pf
)

3313 
ªsu…
;

3314 
Image
 
c›y
;

3317 
	`check›aque
(
image
);

3318 
c›y
 = *
image
;

3320 
c›y
.
›ts
 = opts;

3321 
c›y
.
buf„r
 = 
NULL
;

3322 
c›y
.
bufsize
 = 0;

3323 
c›y
.
Ælocsize
 = 0;

3325 
image
->
öput_fûe
 = 
NULL
;

3326 
image
->
öput_mem‹y
 = 
NULL
;

3327 
image
->
öput_mem‹y_size
 = 0;

3328 
image
->
tmpfûe_«me
[0] = 0;

3331 
≤g_uöt_32
 
cou¡î
;

3332 
Image
 
ouçut
;

3334 
	`√wimage
(&
ouçut
);

3336 
ªsu…
 = 1;

3342 
cou¡î
=0; cou¡î<2*
FORMAT_COUNT
; ++counter)

3343 i‡(
	`f‹m©_is£t
(
pf
, 
cou¡î
 >> 1))

3345 
≤g_uöt_32
 
f‹m©
 = 
cou¡î
 >> 1;

3347 
≤g_cﬁ‹
 
background_cﬁ‹
;

3348 
≤g_cﬁ‹p
 
background
 = 
NULL
;

3356 i‡((
cou¡î
 & 1) == 0)

3358 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) == 0 &&

3359 (
image
->image.
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

3364 
	`øndom_cﬁ‹
(&
background_cﬁ‹
);

3365 
background
 = &
background_cﬁ‹
;

3371 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
) != 0 &&

3372 (
f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) == 0)

3373 ++
cou¡î
;

3380 ++
cou¡î
;

3384 
	`ª£timage
(&
c›y
);

3385 
c›y
.
›ts
 = opts;

3387 
ªsu…
 = 
	`ªad_fûe
(&
c›y
, 
f‹m©
, 
background
);

3388 i‡(!
ªsu…
)

3392 
ªsu…
 = 
	`com∑ª_two_images
(
image
, &
c›y
, 0 , 
background
);

3393 i‡(!
ªsu…
)

3396 #ifde‡
PNG_SIMPLIFIED_WRITE_SUPPORTED


3401 
ouçut
.
›ts
 = opts;

3402 
ªsu…
 = 
	`wrôe_⁄e_fûe
(&
ouçut
, &
c›y
, 0 );

3403 i‡(!
ªsu…
)

3409 
ªsu…
 = 
	`com∑ª_two_images
(
image
, &
ouçut
, 0, 
background
);

3410 i‡(!
ªsu…
)

3413 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) != 0 &&

3414 (
f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
) == 0)

3418 
ouçut
.
›ts
 = opts;

3419 
ªsu…
 = 
	`wrôe_⁄e_fûe
(&
ouçut
, &
c›y
, 1 );

3420 i‡(!
ªsu…
)

3432 
ªsu…
 = 
	`com∑ª_two_images
(
image
, &
ouçut
, 1 ,

3433 
background
);

3434 i‡(!
ªsu…
)

3440 
	`‰ìimage
(&
ouçut
);

3443 
	`‰ìimage
(&
c›y
);

3445  
ªsu…
;

3446 
	}
}

3449 
	$ã°_⁄e_fûe
(c⁄° *
fûe_«me
, 
f‹m©_li°
 *
f‹m©s
, 
≤g_uöt_32
 
›ts
,

3450 
°ride_exåa
, 
log_∑ss
)

3452 
ªsu…
;

3453 
Image
 
image
;

3455 i‡(!(
›ts
 & 
NO_RESEED
))

3456 
	`ª£ed
();

3457 
	`√wimage
(&
image
);

3458 
	`öôimage
(&
image
, 
›ts
, 
fûe_«me
, 
°ride_exåa
);

3459 
ªsu…
 = 
	`ªad_⁄e_fûe
(&
image
);

3460 i‡(
ªsu…
)

3461 
ªsu…
 = 
	`ã°image
(&
image
, 
›ts
, 
f‹m©s
);

3462 
	`‰ìimage
(&
image
);

3465 
	`fÊush
(
°dîr
);

3467 i‡(
log_∑ss
)

3469 i‡(
ªsu…
)

3470 
	`¥ötf
("PASS:");

3473 
	`¥ötf
("FAIL:");

3475 #i‚de‡
PNG_SIMPLIFIED_WRITE_SUPPORTED


3476 
	`¥ötf
(" (no write)");

3479 
	`¥öt_›ts
(
›ts
);

3480 
	`¥ötf
(" %s\n", 
fûe_«me
);

3482 
	`fÊush
(
°dout
);

3485 i‡(!
ªsu…
)

3486 
	`exô
(1);

3488  
ªsu…
;

3489 
	}
}

3492 
	$maö
(
¨gc
, **
¨gv
)

3494 
≤g_uöt_32
 
›ts
 = 
FAST_WRITE
 | 
STRICT
;

3495 
f‹m©_li°
 
f‹m©s
;

3496 c⁄° *
touch
 = 
NULL
;

3497 
log_∑ss
 = 0;

3498 
ªdund™t
 = 0;

3499 
°ride_exåa
 = 0;

3500 
ªtvÆ
 = 0;

3501 
c
;

3503 #i‡
PNG_LIBPNG_VER
 >= 10700

3505 
›ts
 |
GBG_ERROR
;

3508 
	`öô_sRGB_to_d
();

3510 
	`öô_îr‹_vü_löór
();

3512 
	`f‹m©_öô
(&
f‹m©s
);

3513 
	`ª£ed
();

3515 
c
=1; c<
¨gc
; ++c)

3517 c⁄° *
¨g
 = 
¨gv
[
c
];

3519 i‡(
	`°rcmp
(
¨g
, "--log") == 0)

3520 
log_∑ss
 = 1;

3521 i‡(
	`°rcmp
(
¨g
, "--fresh") == 0)

3523 
	`mem£t
(
gpc_îr‹
, 0,  gpc_error);

3524 
	`mem£t
(
gpc_îr‹_vü_löór
, 0,  gpc_error_via_linear);

3526 i‡(
	`°rcmp
(
¨g
, "--file") == 0)

3527 #ifde‡
PNG_STDIO_SUPPORTED


3528 
›ts
 |
USE_FILE
;

3530  
SKIP
;

3532 i‡(
	`°rcmp
(
¨g
, "--memory") == 0)

3533 
›ts
 &~
USE_FILE
;

3534 i‡(
	`°rcmp
(
¨g
, "--stdio") == 0)

3535 #ifde‡
PNG_STDIO_SUPPORTED


3536 
›ts
 |
USE_STDIO
;

3538  
SKIP
;

3540 i‡(
	`°rcmp
(
¨g
, "--name") == 0)

3541 
›ts
 &~
USE_STDIO
;

3542 i‡(
	`°rcmp
(
¨g
, "--verbose") == 0)

3543 
›ts
 |
VERBOSE
;

3544 i‡(
	`°rcmp
(
¨g
, "--quiet") == 0)

3545 
›ts
 &~
VERBOSE
;

3546 i‡(
	`°rcmp
(
¨g
, "--preserve") == 0)

3547 
›ts
 |
KEEP_TMPFILES
;

3548 i‡(
	`°rcmp
(
¨g
, "--nopreserve") == 0)

3549 
›ts
 &~
KEEP_TMPFILES
;

3550 i‡(
	`°rcmp
(
¨g
, "--keep-going") == 0)

3551 
›ts
 |
KEEP_GOING
;

3552 i‡(
	`°rcmp
(
¨g
, "--fast") == 0)

3553 
›ts
 |
FAST_WRITE
;

3554 i‡(
	`°rcmp
(
¨g
, "--slow") == 0)

3555 
›ts
 &~
FAST_WRITE
;

3556 i‡(
	`°rcmp
(
¨g
, "--accumulate") == 0)

3557 
›ts
 |
ACCUMULATE
;

3558 i‡(
	`°rcmp
(
¨g
, "--redundant") == 0)

3559 
ªdund™t
 = 1;

3560 i‡(
	`°rcmp
(
¨g
, "--stop") == 0)

3561 
›ts
 &~
KEEP_GOING
;

3562 i‡(
	`°rcmp
(
¨g
, "--strict") == 0)

3563 
›ts
 |
STRICT
;

3564 i‡(
	`°rcmp
(
¨g
, "--nostrict") == 0)

3565 
›ts
 &~
STRICT
;

3566 i‡(
	`°rcmp
(
¨g
, "--sRGB-16bit") == 0)

3567 
›ts
 |
sRGB_16BIT
;

3568 i‡(
	`°rcmp
(
¨g
, "--linear-16bit") == 0)

3569 
›ts
 &~
sRGB_16BIT
;

3570 i‡(
	`°rcmp
(
¨g
, "--noreseed") == 0)

3571 
›ts
 |
NO_RESEED
;

3572 i‡(
	`°rcmp
(
¨g
, "--fault-gbg-warning") == 0)

3573 
›ts
 |
GBG_ERROR
;

3574 i‡(
	`°rcmp
(
¨g
, "--tmpfile") == 0)

3576 i‡(
c
+1 < 
¨gc
)

3578 i‡(
	`°æí
(
¨gv
[++
c
]Ë> 
tmpf
)

3580 
	`fÊush
(
°dout
);

3581 
	`Ârötf
(
°dîr
, "%s: %s isÅooÜong foráÅemp fileÖrefix\n",

3582 
¨gv
[0],árgv[
c
]);

3583 
	`exô
(99);

3587 
	`°∫˝y
(
tmpf
, 
¨gv
[
c
],  (tmpf)-1);

3592 
	`fÊush
(
°dout
);

3593 
	`Ârötf
(
°dîr
, "%s: %sÑequiresáÅemporary fileÖrefix\n",

3594 
¨gv
[0], 
¨g
);

3595 
	`exô
(99);

3598 i‡(
	`°rcmp
(
¨g
, "--touch") == 0)

3600 i‡(
c
+1 < 
¨gc
)

3601 
touch
 = 
¨gv
[++
c
];

3605 
	`fÊush
(
°dout
);

3606 
	`Ârötf
(
°dîr
, "%s: %sÑequiresá fileÇameárgument\n",

3607 
¨gv
[0], 
¨g
);

3608 
	`exô
(99);

3611 i‡(
¨g
[0] == '+')

3613 
≤g_uöt_32
 
f‹m©
 = 
	`f‹m©of
(
¨g
+1);

3615 i‡(
f‹m©
 > 
FORMAT_COUNT
)

3616 
	`exô
(99);

3618 
	`f‹m©_£t
(&
f‹m©s
, 
f‹m©
);

3620 i‡(
¨g
[0] == '-' &&árg[1] != 0 && (arg[1] != '0' ||árg[2] != 0))

3622 
	`fÊush
(
°dout
);

3623 
	`Ârötf
(
°dîr
, "%s: unknow¿›ti⁄: %s\n", 
¨gv
[0], 
¨g
);

3624 
	`exô
(99);

3628 i‡(
	`f‹m©_is_öôül
(&
f‹m©s
))

3629 
	`f‹m©_deÁu…
(&
f‹m©s
, 
ªdund™t
);

3631 i‡(
¨g
[0] == '-')

3633 
ãrm
 = (
¨g
[1] == '0' ? 0 : '\n');

3634 
ich
 = 0;

3639 
buf„r
[4096];

3643 
ch
 = 
	`gëch¨
();

3648 i‡(
ch
 =
EOF
 || ch =
ãrm
 || ch == 0)

3650 
buf„r
[
ich
] = 0;

3652 i‡(
ich
 > 0 && !
	`ã°_⁄e_fûe
(
buf„r
, &
f‹m©s
, 
›ts
,

3653 
°ride_exåa
, 
log_∑ss
))

3654 
ªtvÆ
 = 1;

3656 i‡(
ch
 =
EOF
)

3659 
ich
 = 0;

3660 --
ich
;

3664 
buf„r
[
ich
] = ()
ch
;

3665 } ++
ich
 <  
buf„r
);

3667 i‡(
ich
)

3669 
buf„r
[32] = 0;

3670 
buf„r
[4095] = 0;

3671 
	`Ârötf
(
°dîr
, "%s...%s: fûê«mêtoÿl⁄g\n", 
buf„r
,

3672 
buf„r
+(4096-32));

3673 
	`exô
(99);

3677 i‡(!
	`ã°_⁄e_fûe
(
¨g
, &
f‹m©s
, 
›ts
, 
°ride_exåa
, 
log_∑ss
))

3678 
ªtvÆ
 = 1;

3682 i‡(
›ts
 & 
ACCUMULATE
)

3684 
ö
;

3686 
	`¥ötf
("/* contrib/libtests/pngstest-errors.h\n");

3687 
	`¥ötf
(" *\n");

3688 
	`¥ötf
(" * BUILT USING:" 
PNG_HEADER_VERSION_STRING
);

3689 
	`¥ötf
(" *\n");

3690 
	`¥ötf
(" * This code isÑeleased underÅheÜibpngÜicense.\n");

3691 
	`¥ötf
(" * For conditions of distributionánd use, seeÅhe disclaimer\n");

3692 
	`¥ötf
(" *ándÜicense inÖng.h\n");

3693 
	`¥ötf
(" *\n");

3694 
	`¥ötf
(" * THIS IS A MACHINE GENERATED FILE: doÇotÉdit it directly!\n");

3695 
	`¥ötf
(" * InsteadÑun:\n");

3696 
	`¥ötf
(" *\n");

3697 
	`¥ötf
(" *Öngstest --accumulate\n");

3698 
	`¥ötf
(" *\n");

3699 
	`¥ötf
(" * onás many PNG filesásÖossible;átÜeast PNGSuiteánd\n");

3700 
	`¥ötf
(" * contrib/libtests/testpngs.\n");

3701 
	`¥ötf
(" */\n");

3703 
	`¥ötf
("staticÖng_uint_16 gpc_error[16/*in*/][16/*out*/][4/*a*/] =\n");

3704 
	`¥ötf
("{\n");

3705 
ö
=0; in<16; ++in)

3707 
out
;

3708 
	`¥ötf
(" { /* i≈ut: %†*/\¿", 
f‹m©_«mes
[
ö
]);

3709 
out
=0; out<16; ++out)

3711 
Æpha
;

3712 
	`¥ötf
(" {");

3713 
Æpha
=0;álpha<4; ++alpha)

3715 
	`¥ötf
(" %d", 
gpc_îr‹
[
ö
][
out
][
Æpha
]);

3716 i‡(
Æpha
 < 3Ë
	`putch¨
(',');

3718 
	`¥ötf
(" }");

3719 i‡(
out
 < 15)

3721 
	`putch¨
(',');

3722 i‡(
out
 % 4 =3Ë
	`¥ötf
("\n ");

3725 
	`¥ötf
("\n }");

3727 i‡(
ö
 < 15)

3728 
	`putch¨
(',');

3730 
	`putch¨
('\n');

3732 
	`¥ötf
("};\n");

3734 
	`¥ötf
("staticÖng_uint_16 gpc_error_via_linear[16][4/*out*/][4] =\n");

3735 
	`¥ötf
("{\n");

3736 
ö
=0; in<16; ++in)

3738 
out
;

3739 
	`¥ötf
(" { /* i≈ut: %†*/\¿", 
f‹m©_«mes
[
ö
]);

3740 
out
=0; out<4; ++out)

3742 
Æpha
;

3743 
	`¥ötf
(" {");

3744 
Æpha
=0;álpha<4; ++alpha)

3746 
	`¥ötf
(" %d", 
gpc_îr‹_vü_löór
[
ö
][
out
][
Æpha
]);

3747 i‡(
Æpha
 < 3Ë
	`putch¨
(',');

3749 
	`¥ötf
(" }");

3750 i‡(
out
 < 3)

3751 
	`putch¨
(',');

3753 
	`¥ötf
("\n }");

3755 i‡(
ö
 < 15)

3756 
	`putch¨
(',');

3758 
	`putch¨
('\n');

3760 
	`¥ötf
("};\n");

3762 
	`¥ötf
("staticÖng_uint_16 gpc_error_to_colormap[8/*i*/][8/*o*/][4] =\n");

3763 
	`¥ötf
("{\n");

3764 
ö
=0; in<8; ++in)

3766 
out
;

3767 
	`¥ötf
(" { /* i≈ut: %†*/\¿", 
f‹m©_«mes
[
ö
]);

3768 
out
=0; out<8; ++out)

3770 
Æpha
;

3771 
	`¥ötf
(" {");

3772 
Æpha
=0;álpha<4; ++alpha)

3774 
	`¥ötf
(" %d", 
gpc_îr‹_to_cﬁ‹m≠
[
ö
][
out
][
Æpha
]);

3775 i‡(
Æpha
 < 3Ë
	`putch¨
(',');

3777 
	`¥ötf
(" }");

3778 i‡(
out
 < 7)

3780 
	`putch¨
(',');

3781 i‡(
out
 % 4 =3Ë
	`¥ötf
("\n ");

3784 
	`¥ötf
("\n }");

3786 i‡(
ö
 < 7)

3787 
	`putch¨
(',');

3789 
	`putch¨
('\n');

3791 
	`¥ötf
("};\n");

3792 
	`¥ötf
("/* END MACHINE GENERATED */\n");

3795 i‡(
ªtvÆ
 =0 && 
touch
 !
NULL
)

3797 
FILE
 *
fsuc˚ss
 = 
	`f›í
(
touch
, "wt");

3799 i‡(
fsuc˚ss
 !
NULL
)

3801 
îr‹
 = 0;

3802 
	`Ârötf
(
fsuc˚ss
, "PNG simple APIÅests succeeded\n");

3803 
	`fÊush
(
fsuc˚ss
);

3804 
îr‹
 = 
	`„º‹
(
fsuc˚ss
);

3806 i‡(
	`f˛o£
(
fsuc˚ss
Ë|| 
îr‹
)

3808 
	`fÊush
(
°dout
);

3809 
	`Ârötf
(
°dîr
, "%s: wrôêÁûed\n", 
touch
);

3810 
	`exô
(99);

3816 
	`fÊush
(
°dout
);

3817 
	`Ârötf
(
°dîr
, "%s: o≥¿Áûed\n", 
touch
);

3818 
	`exô
(99);

3822  
ªtvÆ
;

3823 
	}
}

3826 
	$maö
()

3828 
	`Ârötf
(
°dîr
, "pngstest:ÇoÑead support inÜibpng,Åest skipped\n");

3830  
SKIP
;

3831 
	}
}

	@contrib/libtests/pngunknown.c

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<°dio.h
>

22 
	~<£tjmp.h
>

27 #ifde‡
PNG_FREESTANDING_TESTS


28 
	~<≤g.h
>

30 
	~"../../≤g.h
"

36 #i‡
PNG_LIBPNG_VER
 >10601 && 
deföed
(
HAVE_CONFIG_H
)

37 
	#SKIP
 77

	)

39 
	#SKIP
 0

	)

46 #i‡
deföed
(
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
) &&\

47 
deföed
(
PNG_STDIO_SUPPORTED
) &&\

48 
	$deföed
(
PNG_READ_SUPPORTED
)

55 #i‡
	`deföed
(
PNG_READ_USER_CHUNKS_SUPPORTED
) ||\

56 
	$deföed
(
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED
)

58 #i‡
PNG_LIBPNG_VER
 < 10500

60 
≤g_byã
 *
	t≤g_c⁄°_byãp
;

63 
	#PNG_INTERLACE_ADAM7_PASSES
 7

	)

64 
	#PNG_PASS_START_ROW
(
∑ss
Ë(((1U&~’ass))<<(3-(’ass)>>1)))&7)

	)

65 
	#PNG_PASS_START_COL
(
∑ss
Ë(((1U& (∑ss))<<(3-((’ass)+1)>>1)))&7)

	)

66 
	#PNG_PASS_ROW_SHIFT
(
∑ss
Ë(’ass)>2?(8-’ass))>>1:3)

	)

67 
	#PNG_PASS_COL_SHIFT
(
∑ss
Ë(’ass)>1?(7-’ass))>>1:3)

	)

68 
	#PNG_PASS_ROWS
(
height
, 
∑ss
Ë(((height)+(((1<<
	`PNG_PASS_ROW_SHIFT
(pass))\

69 -1)-
	`PNG_PASS_START_ROW
(
∑ss
)))>>
	`PNG_PASS_ROW_SHIFT
’ass))

	)

70 
	#PNG_PASS_COLS
(
width
, 
∑ss
Ë(((width)+(((1<<
	`PNG_PASS_COL_SHIFT
(pass))\

71 -1)-
	`PNG_PASS_START_COL
(
∑ss
)))>>
	`PNG_PASS_COL_SHIFT
’ass))

	)

72 
	#PNG_ROW_FROM_PASS_ROW
(
yIn
, 
∑ss
) \

73 (((
yIn
)<<
	`PNG_PASS_ROW_SHIFT
(
∑ss
))+
	`PNG_PASS_START_ROW
’ass))

	)

74 
	#PNG_COL_FROM_PASS_COL
(
xIn
, 
∑ss
) \

75 (((
xIn
)<<
	`PNG_PASS_COL_SHIFT
(
∑ss
))+
	`PNG_PASS_START_COL
’ass))

	)

76 
	#PNG_PASS_MASK
(
∑ss
,
off
) ( \

77 ((0x110145AFU>>(((7-(
off
))-(
∑ss
))<<2)) & 0xFU) | \

78 ((0x01145AF0U>>(((7-(
off
))-(
∑ss
))<<2)Ë& 0xF0U))

	)

79 
	#PNG_ROW_IN_INTERLACE_PASS
(
y
, 
∑ss
) \

80 ((
	`PNG_PASS_MASK
(
∑ss
,0Ë>> ((
y
)&7)Ë& 1)

	)

81 
	#PNG_COL_IN_INTERLACE_PASS
(
x
, 
∑ss
) \

82 ((
	`PNG_PASS_MASK
(
∑ss
,1Ë>> ((
x
)&7)Ë& 1)

	)

85 
	#PNG_WRITE_16BIT_SUPPORTED


	)

86 
	#PNG_READ_16BIT_SUPPORTED


	)

89 
	#PNG_FP_1
 100000

	)

90 
	#PNG_GAMMA_THRESHOLD_FIXED
\

91 ((
≤g_fixed_poöt
)(
PNG_GAMMA_THRESHOLD
 * 
PNG_FP_1
))

	)

94 #i‡
PNG_LIBPNG_VER
 < 10600

98 
	#≤g_c⁄°_°ru˘p
 
≤g_°ru˘p


	)

101 #i‡
PNG_LIBPNG_VER
 < 10700

103 
	#PNG_u2
(
b1
, 
b2
Ë((()(b1Ë<< 8Ë+ (b2))

	)

105 
	#PNG_U16
(
b1
, 
b2
Ë((
≤g_uöt_16
)
	`PNG_u2
(b1, b2))

	)

106 
	#PNG_U32
(
b1
, 
b2
, 
b3
, 
b4
)\

107 (((
≤g_uöt_32
)
	`PNG_u2
(
b1
, 
b2
Ë<< 16Ë+ PNG_u2(
b3
, 
b4
))

	)

111 
	#≤g_IDAT
 
	`PNG_U32
–73, 68, 65, 84)

	)

112 
	#≤g_IEND
 
	`PNG_U32
–73, 69, 78, 68)

	)

113 
	#≤g_IHDR
 
	`PNG_U32
–73, 72, 68, 82)

	)

114 
	#≤g_PLTE
 
	`PNG_U32
–80, 76, 84, 69)

	)

115 
	#≤g_bKGD
 
	`PNG_U32
–98, 75, 71, 68)

	)

116 
	#≤g_cHRM
 
	`PNG_U32
–99, 72, 82, 77)

	)

117 
	#≤g_eXIf
 
	`PNG_U32
(101, 88, 73, 102Ë

	)

118 
	#≤g_fRAc
 
	`PNG_U32
(102, 82, 65, 99Ë

	)

119 
	#≤g_gAMA
 
	`PNG_U32
(103, 65, 77, 65)

	)

120 
	#≤g_gIFg
 
	`PNG_U32
(103, 73, 70, 103)

	)

121 
	#≤g_gIFt
 
	`PNG_U32
(103, 73, 70, 116Ë

	)

122 
	#≤g_gIFx
 
	`PNG_U32
(103, 73, 70, 120)

	)

123 
	#≤g_hIST
 
	`PNG_U32
(104, 73, 83, 84)

	)

124 
	#≤g_iCCP
 
	`PNG_U32
(105, 67, 67, 80)

	)

125 
	#≤g_iTXt
 
	`PNG_U32
(105, 84, 88, 116)

	)

126 
	#≤g_oFFs
 
	`PNG_U32
(111, 70, 70, 115)

	)

127 
	#≤g_pCAL
 
	`PNG_U32
(112, 67, 65, 76)

	)

128 
	#≤g_pHYs
 
	`PNG_U32
(112, 72, 89, 115)

	)

129 
	#≤g_sBIT
 
	`PNG_U32
(115, 66, 73, 84)

	)

130 
	#≤g_sCAL
 
	`PNG_U32
(115, 67, 65, 76)

	)

131 
	#≤g_sPLT
 
	`PNG_U32
(115, 80, 76, 84)

	)

132 
	#≤g_sRGB
 
	`PNG_U32
(115, 82, 71, 66)

	)

133 
	#≤g_sTER
 
	`PNG_U32
(115, 84, 69, 82)

	)

134 
	#≤g_tEXt
 
	`PNG_U32
(116, 69, 88, 116)

	)

135 
	#≤g_tIME
 
	`PNG_U32
(116, 73, 77, 69)

	)

136 
	#≤g_tRNS
 
	`PNG_U32
(116, 82, 78, 83)

	)

137 
	#≤g_zTXt
 
	`PNG_U32
(122, 84, 88, 116)

	)

140 
	#PNG_CHUNK_ANCILLARY
(
c
Ë(1 & ((cË>> 29))

	)

141 
	#PNG_CHUNK_CRITICAL
(
c
Ë(!
	`PNG_CHUNK_ANCILLARY
(c))

	)

142 
	#PNG_CHUNK_PRIVATE
(
c
Ë(1 & ((cË>> 21))

	)

143 
	#PNG_CHUNK_RESERVED
(
c
Ë(1 & ((cË>> 13))

	)

144 
	#PNG_CHUNK_SAFE_TO_COPY
(
c
Ë(1 & ((cË>> 5))

	)

148 #ifde‡
__˝lu•lus


149 
	#this
 
nŸ_the_˝p_this


	)

150 
	#√w
 
nŸ_the_˝p_√w


	)

151 
	#voidˇ°
(
ty≥
, 
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

153 
	#voidˇ°
(
ty≥
, 
vÆue
Ë(vÆue)

	)

159 #i‚de‡
UNUSED


160 #i‡
	`deföed
(
__GNUC__
Ë|| deföed(
_MSC_VER
)

161 
	#UNUSED
(
∑øm
Ë(Ì¨am;

	)

163 
	#UNUSED
(
∑øm
)

	)

168 
	#≤g_vpAg
 
	`PNG_U32
(118, 112, 65, 103)

	)

171 
	#PNG_INFO_tEXt
 0x10000000U

	)

172 
	#PNG_INFO_iTXt
 0x20000000U

	)

173 
	#PNG_INFO_zTXt
 0x40000000U

	)

175 
	#PNG_INFO_sTER
 0x01000000U

	)

176 
	#PNG_INFO_vpAg
 0x02000000U

	)

178 
	#ABSENT
 0

	)

179 
	#START
 1

	)

180 
	#END
 2

	)

184 
«me
[5];

185 
≤g_uöt_32
 
Êag
;

186 
≤g_uöt_32
 
èg
;

187 
unknown
;

188 
Æl
;

189 
posôi⁄
;

190 
kìp
;

191 } 
chunk_öfo
[] = {

193 { "IDAT", 
PNG_INFO_IDAT
, 
≤g_IDAT
, 0, 0, 
START
, 0 },

194 { "PLTE", 
PNG_INFO_PLTE
, 
≤g_PLTE
, 0, 0, 
ABSENT
, 0 },

200 { "bKGD", 
PNG_INFO_bKGD
, 
≤g_bKGD
,

201 #ifde‡
PNG_READ_bKGD_SUPPORTED


206 1, 
START
, 0 },

207 { "cHRM", 
PNG_INFO_cHRM
, 
≤g_cHRM
,

208 #ifde‡
PNG_READ_cHRM_SUPPORTED


213 1, 
START
, 0 },

214 { "eXIf", 
PNG_INFO_eXIf
, 
≤g_eXIf
,

215 #ifde‡
PNG_READ_eXIf_SUPPORTED


220 1, 
END
, 0 },

221 { "gAMA", 
PNG_INFO_gAMA
, 
≤g_gAMA
,

222 #ifde‡
PNG_READ_gAMA_SUPPORTED


227 1, 
START
, 0 },

228 { "hIST", 
PNG_INFO_hIST
, 
≤g_hIST
,

229 #ifde‡
PNG_READ_hIST_SUPPORTED


234 1, 
ABSENT
, 0 },

235 { "iCCP", 
PNG_INFO_iCCP
, 
≤g_iCCP
,

236 #ifde‡
PNG_READ_iCCP_SUPPORTED


241 1, 
ABSENT
, 0 },

242 { "iTXt", 
PNG_INFO_iTXt
, 
≤g_iTXt
,

243 #ifde‡
PNG_READ_iTXt_SUPPORTED


248 1, 
ABSENT
, 0 },

249 { "oFFs", 
PNG_INFO_oFFs
, 
≤g_oFFs
,

250 #ifde‡
PNG_READ_oFFs_SUPPORTED


255 1, 
START
, 0 },

256 { "pCAL", 
PNG_INFO_pCAL
, 
≤g_pCAL
,

257 #ifde‡
PNG_READ_pCAL_SUPPORTED


262 1, 
START
, 0 },

263 { "pHYs", 
PNG_INFO_pHYs
, 
≤g_pHYs
,

264 #ifde‡
PNG_READ_pHYs_SUPPORTED


269 1, 
START
, 0 },

270 { "sBIT", 
PNG_INFO_sBIT
, 
≤g_sBIT
,

271 #ifde‡
PNG_READ_sBIT_SUPPORTED


276 1, 
START
, 0 },

277 { "sCAL", 
PNG_INFO_sCAL
, 
≤g_sCAL
,

278 #ifde‡
PNG_READ_sCAL_SUPPORTED


283 1, 
START
, 0 },

284 { "sPLT", 
PNG_INFO_sPLT
, 
≤g_sPLT
,

285 #ifde‡
PNG_READ_sPLT_SUPPORTED


290 1, 
ABSENT
, 0 },

291 { "sRGB", 
PNG_INFO_sRGB
, 
≤g_sRGB
,

292 #ifde‡
PNG_READ_sRGB_SUPPORTED


297 1, 
START
, 0 },

298 { "tEXt", 
PNG_INFO_tEXt
, 
≤g_tEXt
,

299 #ifde‡
PNG_READ_tEXt_SUPPORTED


304 1, 
START
, 0 },

305 { "tIME", 
PNG_INFO_tIME
, 
≤g_tIME
,

306 #ifde‡
PNG_READ_tIME_SUPPORTED


311 1, 
START
, 0 },

312 { "tRNS", 
PNG_INFO_tRNS
, 
≤g_tRNS
,

313 #ifde‡
PNG_READ_tRNS_SUPPORTED


318 0, 
ABSENT
, 0 },

319 { "zTXt", 
PNG_INFO_zTXt
, 
≤g_zTXt
,

320 #ifde‡
PNG_READ_zTXt_SUPPORTED


325 1, 
END
, 0 },

328 { "sTER", 
PNG_INFO_sTER
, 
≤g_sTER
, 1, 1, 
START
, 0 },

329 { "vpAg", 
PNG_INFO_vpAg
, 
≤g_vpAg
, 1, 0, 
START
, 0 },

330 
	}
};

332 
	#NINFO
 (()(( 
chunk_öfo
)/( chunk_öfo[0])))

	)

335 
	$˛ór_kìp
()

337 
i
 = 
NINFO
;

338 --
i
 >= 0)

339 
chunk_öfo
[
i
].
kìp
 = 0;

340 
	}
}

343 
	$föd
(c⁄° *
«me
)

345 
i
 = 
NINFO
;

346 --
i
 >= 0)

348 i‡(
	`memcmp
(
chunk_öfo
[
i
].
«me
,Çame, 4) == 0)

352  
i
;

353 
	}
}

356 
	$födb
(c⁄° 
≤g_byã
 *
«me
)

358 
i
 = 
NINFO
;

359 --
i
 >= 0)

361 i‡(
	`memcmp
(
chunk_öfo
[
i
].
«me
,Çame, 4) == 0)

365  
i
;

366 
	}
}

369 
	$föd_by_Êag
(
≤g_uöt_32
 
Êag
)

371 
i
 = 
NINFO
;

373 --
i
 >= 0)

374 i‡(
chunk_öfo
[
i
].
Êag
 == flag)

375  
i
;

377 
	`Ârötf
(
°dîr
, "pngunknown: internalÉrror\n");

378 
	`exô
(4);

379 
	}
}

382 
	$™cûœry
(c⁄° *
«me
)

384  
	`PNG_CHUNK_ANCILLARY
(
	`PNG_U32
(
«me
[0],Çame[1],Çame[2],Çame[3]));

385 
	}
}

387 #ifde‡
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


389 
	$™cûœryb
(c⁄° 
≤g_byã
 *
«me
)

391  
	`PNG_CHUNK_ANCILLARY
(
	`PNG_U32
(
«me
[0],Çame[1],Çame[2],Çame[3]));

392 
	}
}

398 
jmp_buf
 
	mîr‹_ªtu∫
;

399 
≤g_°ru˘p
 
	m≤g_±r
;

400 
≤g_öf›
 
	möfo_±r
, 
	míd_±r
;

401 
≤g_uöt_32
 
	mbef‹e_IDAT
;

402 
≤g_uöt_32
 
	ma·î_IDAT
;

403 
	mîr‹_cou¡
;

404 
	mw¨nög_cou¡
;

405 
	mkìp
;

406 c⁄° *
	m¥ogøm
;

407 c⁄° *
	mfûe
;

408 c⁄° *
	mã°
;

409 } 
	tdi•œy
;

411 c⁄° 
	göô
[] = "initialization";

412 c⁄° 
	gcmd
[] = "commandÜine";

415 
	$öô_di•œy
(
di•œy
 *
d
, c⁄° *
¥ogøm
)

417 
	`mem£t
(
d
, 0,  *d);

418 
d
->
≤g_±r
 = 
NULL
;

419 
d
->
öfo_±r
 = d->
íd_±r
 = 
NULL
;

420 
d
->
îr‹_cou¡
 = d->
w¨nög_cou¡
 = 0;

421 
d
->
¥ogøm
 =Örogram;

422 
d
->
fûe
 = 
¥ogøm
;

423 
d
->
ã°
 = 
öô
;

424 
	}
}

427 
	$˛ón_di•œy
(
di•œy
 *
d
)

429 
	`≤g_de°roy_ªad_°ru˘
(&
d
->
≤g_±r
, &d->
öfo_±r
, &d->
íd_±r
);

432 i‡(
d
->
≤g_±r
 !
NULL
 || d->
öfo_±r
 !NULL || d->
íd_±r
 != NULL)

434 
	`Ârötf
(
°dîr
, "%s(%s):Öng_de°roy_ªad_°ru˘Éº‹\n", 
d
->
fûe
,

435 
d
->
ã°
);

436 
	`exô
(1);

438 
	}
}

440 
PNG_FUNCTION
(, 
di•œy_exô
, (
di•œy
 *
d
), 
PNG_NORETURN
)

442 ++(
	gd
->
	gîr‹_cou¡
);

444 i‡(
	gd
->
	g≤g_±r
 !
NULL
)

445 
˛ón_di•œy
(
d
);

450 i‡(
	gd
->
	gã°
 =
öô
 || 
d
->
ã°
 =
cmd
)

451 
exô
(1);

453 
l⁄gjmp
(
d
->
îr‹_ªtu∫
, 1);

457 
	$di•œy_rc
(c⁄° 
di•œy
 *
d
, 
°ri˘
)

459  
d
->
îr‹_cou¡
 + (
°ri˘
 ? d->
w¨nög_cou¡
 : 0);

460 
	}
}

463 
PNG_FUNCTION
(, (
PNGCBAPI
 
îr‹
), (
≤g_°ru˘p
 
≤g_±r
, c⁄° *
mesßge
),

464 
PNG_NORETURN
)

466 
di•œy
 *
	gd
 = (di•œy*)
≤g_gë_îr‹_±r
(
≤g_±r
);

468 
Ârötf
(
°dîr
, "%s(%s):Üib≤gÉº‹: %s\n", 
d
->
fûe
, d->
ã°
, 
mesßge
);

469 
di•œy_exô
(
d
);

472 
PNGCBAPI


473 
	$w¨nög
(
≤g_°ru˘p
 
≤g_±r
, c⁄° *
mesßge
)

475 
di•œy
 *
d
 = (di•œy*)
	`≤g_gë_îr‹_±r
(
≤g_±r
);

477 
	`Ârötf
(
°dîr
, "%s(%s):Üib≤g w¨nög: %s\n", 
d
->
fûe
, d->
ã°
, 
mesßge
);

478 ++(
d
->
w¨nög_cou¡
);

479 
	}
}

481 
≤g_uöt_32


482 
	$gë_vÆid
(
di•œy
 *
d
, 
≤g_öf›
 
öfo_±r
)

484 
≤g_uöt_32
 
Êags
 = 
	`≤g_gë_vÆid
(
d
->
≤g_±r
, 
öfo_±r
, (png_uint_32)~0);

488 
≤g_ãxç
 
ãxt
;

489 
≤g_uöt_32
 
¡ext
 = 
	`≤g_gë_ãxt
(
d
->
≤g_±r
, 
öfo_±r
, &
ãxt
, 
NULL
);

491 
¡ext
 > 0Ë
ãxt
[--¡ext].
com¥essi⁄
)

494 
Êags
 |
PNG_INFO_tEXt
;

497 
Êags
 |
PNG_INFO_zTXt
;

501 
Êags
 |
PNG_INFO_iTXt
;

504 
	`Ârötf
(
°dîr
, "%s(%s): unknow¿ãxàcom¥essi⁄ %d\n", 
d
->
fûe
,

505 
d
->
ã°
, 
ãxt
[
¡ext
].
com¥essi⁄
);

506 
	`di•œy_exô
(
d
);

510  
Êags
;

511 
	}
}

513 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


514 
PNGCBAPI


515 
	$ªad_ˇŒback
(
≤g_°ru˘p
 
µ
, 
≤g_unknown_chunkp
 
pc
)

520 
di•œy
 *
d
 = 
	`voidˇ°
(di•œy*, 
	`≤g_gë_u£r_chunk_±r
(
µ
));

521 
chunk
 = 
	`födb
(
pc
->
«me
);

522 
kìp
, 
disˇrd
;

524 i‡(
chunk
 < 0)

525 
kìp
 = 
d
->keep;

529 
kìp
 = 
chunk_öfo
[
chunk
].keep;

530 i‡(
kìp
 =
PNG_HANDLE_CHUNK_AS_DEFAULT
)

535 i‡(
chunk_öfo
[
chunk
].
unknown
)

536 
kìp
 = 
d
->keep;

539 
kìp
 = 
PNG_HANDLE_CHUNK_NEVER
;

543 
kìp
)

546 
	`Ârötf
(
°dîr
, "%s(%s): %d: uƒecognized chunk o±i⁄\n", 
d
->
fûe
,

547 
d
->
ã°
, 
chunk_öfo
[
chunk
].
kìp
);

548 
	`di•œy_exô
(
d
);

550 
PNG_HANDLE_CHUNK_AS_DEFAULT
:

551 
PNG_HANDLE_CHUNK_NEVER
:

552 
disˇrd
 = 1;

555 
PNG_HANDLE_CHUNK_IF_SAFE
:

556 
PNG_HANDLE_CHUNK_ALWAYS
:

557 
disˇrd
 = 0;

564 i‡(
chunk
 >= 0)

566 i‡(!
disˇrd
)

568 
≤g_uöt_32
 
Êag
 = 
chunk_öfo
[
chunk
].flag;

570 i‡(
pc
->
loˇti⁄
 & 
PNG_AFTER_IDAT
)

571 
d
->
a·î_IDAT
 |
Êag
;

574 
d
->
bef‹e_IDAT
 |
Êag
;

581 #ifde‡
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


582  
disˇrd
;

586 
	}
}

589 #ifde‡
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


590 
≤g_uöt_32


591 
	$gë_unknown
(
di•œy
 *
d
, 
≤g_öf›
 
öfo_±r
, 
a·î_IDAT
)

594 
≤g_uöt_32
 
Êags
 = 0;

596 
	`UNUSED
(
a·î_IDAT
)

599 
≤g_unknown_chunkp
 
unknown
;

600 
num_unknown
 = 
	`≤g_gë_unknown_chunks
(
d
->
≤g_±r
, 
öfo_±r
, &
unknown
);

602 --
num_unknown
 >= 0)

604 
chunk
 = 
	`födb
(
unknown
[
num_unknown
].
«me
);

610 i‡(
chunk
 < 0Ë
d
->
kìp
)

613 
PNG_HANDLE_CHUNK_AS_DEFAULT
:

614 
PNG_HANDLE_CHUNK_NEVER
:

615 
	`Ârötf
(
°dîr
, "%s(%s): %s: %s: unknown chunk saved\n",

616 
d
->
fûe
, d->
ã°
, d->
kìp
 ? "discard" : "default",

617 
unknown
[
num_unknown
].
«me
);

618 ++(
d
->
îr‹_cou¡
);

621 
PNG_HANDLE_CHUNK_IF_SAFE
:

622 i‡(!
	`™cûœryb
(
unknown
[
num_unknown
].
«me
))

624 
	`Ârötf
(
°dîr
,

626 
d
->
fûe
, d->
ã°
, 
unknown
[
num_unknown
].
«me
);

627 ++(
d
->
îr‹_cou¡
);

631 
PNG_HANDLE_CHUNK_ALWAYS
:

636 
Êags
 |
chunk_öfo
[
chunk
].
Êag
;

640  
Êags
;

641 
	}
}

643 
≤g_uöt_32


644 
	$gë_unknown
(
di•œy
 *
d
, 
≤g_öf›
 
öfo_±r
, 
a·î_IDAT
)

647 
	`UNUSED
(
öfo_±r
);

649 i‡(
a·î_IDAT
)

650  
d
->
a·î_IDAT
;

653  
d
->
bef‹e_IDAT
;

654 
	}
}

656 #i‚de‡
PNG_READ_USER_CHUNKS_SUPPORTED


660 #îr‹ 
No
 
°‹e
 
suµ‹t
 
™d
 
no
 
u£r
 
chunk
 suµ‹t, 
this
 
wûl
 
nŸ
 
w‹k


665 
	$check
(
FILE
 *
Â
, 
¨gc
, c⁄° **
¨gv
, 
≤g_uöt_32p
 
Êags
 ,

666 
di•œy
 *
d
, 
£t_ˇŒback
)

668 
i
, 
≈as£s
, 
ùass
;

669 
≤g_uöt_32
 
height
;

671 
d
->
kìp
 = 
PNG_HANDLE_CHUNK_AS_DEFAULT
;

672 
d
->
bef‹e_IDAT
 = 0;

673 
d
->
a·î_IDAT
 = 0;

678 
d
->
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, d, 
îr‹
,

679 
w¨nög
);

680 i‡(
d
->
≤g_±r
 =
NULL
)

682 
	`Ârötf
(
°dîr
, "%s(%s): couldÇŸáŒoˇãÖng såu˘\n", 
d
->
fûe
,

683 
d
->
ã°
);

685 
	`exô
(1);

688 
d
->
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(d->
≤g_±r
);

689 
d
->
íd_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(d->
≤g_±r
);

690 i‡(
d
->
öfo_±r
 =
NULL
 || d->
íd_±r
 == NULL)

692 
	`Ârötf
(
°dîr
, "%s(%s): couldÇŸáŒoˇãÖng info\n", 
d
->
fûe
,

693 
d
->
ã°
);

694 
	`˛ón_di•œy
(
d
);

695 
	`exô
(1);

698 
	`≤g_öô_io
(
d
->
≤g_±r
, 
Â
);

700 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


704 i‡(
£t_ˇŒback
)

705 
	`≤g_£t_ªad_u£r_chunk_‚
(
d
->
≤g_±r
, d, 
ªad_ˇŒback
);

707 
	`UNUSED
(
£t_ˇŒback
)

714 
i
=0; i<
¨gc
; ++i)

716 c⁄° *
equÆs
 = 
	`°rchr
(
¨gv
[
i
], '=');

718 i‡(
equÆs
 !
NULL
)

720 
chunk
, 
›ti⁄
;

722 i‡(
	`°rcmp
(
equÆs
+1, "default") == 0)

723 
›ti⁄
 = 
PNG_HANDLE_CHUNK_AS_DEFAULT
;

724 i‡(
	`°rcmp
(
equÆs
+1, "discard") == 0)

725 
›ti⁄
 = 
PNG_HANDLE_CHUNK_NEVER
;

726 i‡(
	`°rcmp
(
equÆs
+1, "if-safe") == 0)

727 
›ti⁄
 = 
PNG_HANDLE_CHUNK_IF_SAFE
;

728 i‡(
	`°rcmp
(
equÆs
+1, "save") == 0)

729 
›ti⁄
 = 
PNG_HANDLE_CHUNK_ALWAYS
;

732 
	`Ârötf
(
°dîr
, "%s(%s): %s: uƒecognized chunk o±i⁄\n", 
d
->
fûe
,

733 
d
->
ã°
, 
¨gv
[
i
]);

734 
	`di•œy_exô
(
d
);

737 
equÆs
 - 
¨gv
[
i
])

740 
chunk
 = 
	`föd
(
¨gv
[
i
]);

742 i‡(
chunk
 >= 0)

749 #i‡
PNG_LIBPNG_VER
 >= 10700 &&\

750 !
	`deföed
(
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED
)

751 i‡(
›ti⁄
 < 
PNG_HANDLE_CHUNK_IF_SAFE
)

754 
≤g_byã
 
«me
[5];

756 
	`mem˝y
(
«me
, 
chunk_öfo
[
chunk
].name, 5);

757 
	`≤g_£t_kìp_unknown_chunks
(
d
->
≤g_±r
, 
›ti⁄
, 
«me
, 1);

758 
chunk_öfo
[
chunk
].
kìp
 = 
›ti⁄
;

766 i‡(
	`memcmp
(
¨gv
[
i
], "default", 7) == 0)

768 #i‡
PNG_LIBPNG_VER
 >= 10700 &&\

769 !
	`deföed
(
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED
)

770 i‡(
›ti⁄
 < 
PNG_HANDLE_CHUNK_IF_SAFE
)

772 
	`≤g_£t_kìp_unknown_chunks
(
d
->
≤g_±r
, 
›ti⁄
, 
NULL
, 0);

774 
d
->
kìp
 = 
›ti⁄
;

781 i‡(
	`memcmp
(
¨gv
[
i
], "all", 3) == 0)

783 #i‡
PNG_LIBPNG_VER
 >= 10700 &&\

784 !
	`deföed
(
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED
)

785 i‡(
›ti⁄
 < 
PNG_HANDLE_CHUNK_IF_SAFE
)

787 
	`≤g_£t_kìp_unknown_chunks
(
d
->
≤g_±r
, 
›ti⁄
, 
NULL
, -1);

789 
d
->
kìp
 = 
›ti⁄
;

791 
chunk
 = 0; chunk < 
NINFO
; ++chunk)

792 i‡(
chunk_öfo
[
chunk
].
Æl
)

793 
chunk_öfo
[
chunk
].
kìp
 = 
›ti⁄
;

805 
	`Ârötf
(
°dîr
, "%s(%s): %s: uƒecognized chunkárgumít\n", 
d
->
fûe
,

806 
d
->
ã°
, 
¨gv
[
i
]);

807 
	`di•œy_exô
(
d
);

810 
	`≤g_ªad_öfo
(
d
->
≤g_±r
, d->
öfo_±r
);

812 
	`≤g_gë_öãæa˚_ty≥
(
d
->
≤g_±r
, d->
öfo_±r
))

814 
PNG_INTERLACE_NONE
:

815 
≈as£s
 = 1;

818 
PNG_INTERLACE_ADAM7
:

819 
≈as£s
 = 
PNG_INTERLACE_ADAM7_PASSES
;

824 
	`Ârötf
(
°dîr
, "%s(%s): invÆid i¡îœ˚Åy≥\n", 
d
->
fûe
, d->
ã°
);

825 
	`˛ón_di•œy
(
d
);

826 
	`exô
(1);

832 i‡(
chunk_öfo
[0 ].
kìp
 =
PNG_HANDLE_CHUNK_AS_DEFAULT
)

834 
	`≤g_°¨t_ªad_image
(
d
->
≤g_±r
);

835 
height
 = 
	`≤g_gë_image_height
(
d
->
≤g_±r
, d->
öfo_±r
);

837 i‡(
≈as£s
 > 1)

839 
≤g_uöt_32
 
width
 = 
	`≤g_gë_image_width
(
d
->
≤g_±r
, d->
öfo_±r
);

841 
ùass
=0; i∑ss<
≈as£s
; ++ipass)

843 
≤g_uöt_32
 
wPass
 = 
	`PNG_PASS_COLS
(
width
, 
ùass
);

845 i‡(
wPass
 > 0)

847 
≤g_uöt_32
 
y
;

849 
y
=0; y<
height
; ++y)

850 i‡(
	`PNG_ROW_IN_INTERLACE_PASS
(
y
, 
ùass
))

851 
	`≤g_ªad_row
(
d
->
≤g_±r
, 
NULL
, NULL);

858 
≤g_uöt_32
 
y
;

860 
y
=0; y<
height
; ++y)

861 
	`≤g_ªad_row
(
d
->
≤g_±r
, 
NULL
, NULL);

865 
	`≤g_ªad_íd
(
d
->
≤g_±r
, d->
íd_±r
);

867 
Êags
[0] = 
	`gë_vÆid
(
d
, d->
öfo_±r
);

868 
Êags
[1] = 
	`gë_unknown
(
d
, d->
öfo_±r
, 0 );

871 
Êags
[
chunk_öfo
[0 ].
kìp
 !
PNG_HANDLE_CHUNK_AS_DEFAULT
] |=

872 
PNG_INFO_IDAT
;

874 
Êags
[2] = 
	`gë_vÆid
(
d
, d->
íd_±r
);

875 
Êags
[3] = 
	`gë_unknown
(
d
, d->
íd_±r
, 1 );

877 
	`˛ón_di•œy
(
d
);

879  
d
->
kìp
;

880 
	}
}

883 
	$check_îr‹
(
di•œy
 *
d
, 
≤g_uöt_32
 
Êags
, c⁄° *
mesßge
)

885 
Êags
)

887 
≤g_uöt_32
 
Êag
 = 
Êags
 & -(
≤g_öt_32
)flags;

888 
i
 = 
	`föd_by_Êag
(
Êag
);

890 
	`Ârötf
(
°dîr
, "%s(%s): chunk %s: %s\n", 
d
->
fûe
, d->
ã°
,

891 
chunk_öfo
[
i
].
«me
, 
mesßge
);

892 ++(
d
->
îr‹_cou¡
);

894 
Êags
 &~
Êag
;

896 
	}
}

899 
	$check_h™dlög
(
di•œy
 *
d
, 
def
, 
≤g_uöt_32
 
chunks
,Öng_uöt_32 
known
,

900 
≤g_uöt_32
 
unknown
, c⁄° *
posôi⁄
, 
£t_ˇŒback
)

902 
chunks
)

904 
≤g_uöt_32
 
Êag
 = 
chunks
 & -(
≤g_öt_32
)chunks;

905 
i
 = 
	`föd_by_Êag
(
Êag
);

906 
kìp
 = 
chunk_öfo
[
i
].keep;

907 c⁄° *
ty≥
;

908 c⁄° *
îr‹x
 = 
NULL
;

910 i‡(
chunk_öfo
[
i
].
unknown
)

912 i‡(
kìp
 =
PNG_HANDLE_CHUNK_AS_DEFAULT
)

914 
ty≥
 = "UNKNOWN (default)";

915 
kìp
 = 
def
;

919 
ty≥
 = "UNKNOWN (specified)";

921 i‡(
Êag
 & 
known
)

922 
îr‹x
 = "chunkÖrocessed";

924 
kìp
)

926 
PNG_HANDLE_CHUNK_AS_DEFAULT
:

927 i‡(
Êag
 & 
unknown
)

928 
îr‹x
 = "DEFAULT: unknown chunk saved";

931 
PNG_HANDLE_CHUNK_NEVER
:

932 i‡(
Êag
 & 
unknown
)

933 
îr‹x
 = "DISCARD: unknown chunk saved";

936 
PNG_HANDLE_CHUNK_IF_SAFE
:

937 i‡(
	`™cûœry
(
chunk_öfo
[
i
].
«me
))

939 i‡(!(
Êag
 & 
unknown
))

940 
îr‹x
 = "IF-SAFE: unknownáncillary chunkÜost";

943 i‡(
Êag
 & 
unknown
)

944 
îr‹x
 = "IF-SAFE: unknown critical chunk saved";

947 
PNG_HANDLE_CHUNK_ALWAYS
:

948 i‡(!(
Êag
 & 
unknown
))

949 
îr‹x
 = "SAVE: unknown chunkÜost";

953 
îr‹x
 = "internalÉrror: bad keep";

960 
ty≥
 = "KNOWN";

962 i‡(
Êag
 & 
known
)

967 i‡(
kìp
 !
PNG_HANDLE_CHUNK_AS_DEFAULT
)

968 
îr‹x
 = "!DEFAULT: known chunkÖrocessed";

971 
kìp
)

973 
PNG_HANDLE_CHUNK_AS_DEFAULT
:

974 
îr‹x
 = "DEFAULT: known chunkÇotÖrocessed";

977 
PNG_HANDLE_CHUNK_NEVER
:

978 i‡(
Êag
 & 
unknown
)

979 
îr‹x
 = "DISCARD: known chunk saved";

982 
PNG_HANDLE_CHUNK_IF_SAFE
:

983 i‡(
	`™cûœry
(
chunk_öfo
[
i
].
«me
))

985 i‡(!(
Êag
 & 
unknown
))

986 
îr‹x
 = "IF-SAFE: knownáncillary chunkÜost";

989 i‡(
Êag
 & 
unknown
)

990 
îr‹x
 = "IF-SAFE: known critical chunk saved";

993 
PNG_HANDLE_CHUNK_ALWAYS
:

994 i‡(!(
Êag
 & 
unknown
))

995 
îr‹x
 = "SAVE: known chunkÜost";

999 
îr‹x
 = "internalÉrror: bad keep (2)";

1004 i‡(
îr‹x
 !
NULL
)

1006 ++(
d
->
îr‹_cou¡
);

1007 
	`Ârötf
(
°dîr
, "%s(%s%s): %†%†%s: %s\n", 
d
->
fûe
, d->
ã°
,

1008 
£t_ˇŒback
 ? ",callback" : "",

1009 
ty≥
, 
chunk_öfo
[
i
].
«me
, 
posôi⁄
, 
îr‹x
);

1012 
chunks
 &~
Êag
;

1014 
	}
}

1017 
	$≥rf‹m_⁄e_ã°
(
FILE
 *
Â
, 
¨gc
, c⁄° **
¨gv
,

1018 
≤g_uöt_32
 *
deÁu…_Êags
, 
di•œy
 *
d
, 
£t_ˇŒback
)

1020 
def
;

1021 
≤g_uöt_32
 
Êags
[2][4];

1023 
	`ªwöd
(
Â
);

1024 
	`˛ór_kìp
();

1025 
	`mem˝y
(
Êags
[0], 
deÁu…_Êags
,  flags[0]);

1027 
def
 = 
	`check
(
Â
, 
¨gc
, 
¨gv
, 
Êags
[1], 
d
, 
£t_ˇŒback
);

1039 i‡(
chunk_öfo
[0 ].
kìp
 !
PNG_HANDLE_CHUNK_AS_DEFAULT
 &&

1040 (
Êags
[1][3] & 
PNG_INFO_IDAT
) != 0)

1041 
Êags
[0][2] |
PNG_INFO_IDAT
;

1048 
	`check_îr‹
(
d
, (
Êags
[0][0]|flags[0][2]) & (flags[0][1]|flags[0][3]),

1050 
	`check_îr‹
(
d
, (
Êags
[1][0]|flags[1][2]) & (flags[1][1]|flags[1][3]),

1059 
≤g_uöt_32
 
ã°
;

1061 
ã°
 = 
Êags
[1][0] & ~flags[0][0];

1062 
	`check_îr‹
(
d
, 
ã°
, "new known chunk before IDAT");

1063 
ã°
 = 
Êags
[1][1] & ~(flags[0][0] | flags[0][1]);

1064 
	`check_îr‹
(
d
, 
ã°
, "new unknown chunk before IDAT");

1065 
ã°
 = 
Êags
[1][2] & ~flags[0][2];

1066 
	`check_îr‹
(
d
, 
ã°
, "new known chunkáfter IDAT");

1067 
ã°
 = 
Êags
[1][3] & ~(flags[0][2] | flags[0][3]);

1068 
	`check_îr‹
(
d
, 
ã°
, "new unknown chunkáfter IDAT");

1075 
	`check_h™dlög
(
d
, 
def
, 
Êags
[0][0] | flags[0][1], flags[1][0], flags[1][1],

1076 "bef‹êIDAT", 
£t_ˇŒback
);

1077 
	`check_h™dlög
(
d
, 
def
, 
Êags
[0][2] | flags[0][3], flags[1][2], flags[1][3],

1078 "a·î IDAT", 
£t_ˇŒback
);

1079 
	}
}

1082 
	$≥rf‹m_⁄e_ã°_ß„
(
FILE
 *
Â
, 
¨gc
, c⁄° **
¨gv
,

1083 
≤g_uöt_32
 *
deÁu…_Êags
, 
di•œy
 *
d
, c⁄° *
ã°
)

1085 i‡(
	`£tjmp
(
d
->
îr‹_ªtu∫
) == 0)

1087 
d
->
ã°
 =Åest;

1088 #ifde‡
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


1089 
	`≥rf‹m_⁄e_ã°
(
Â
, 
¨gc
, 
¨gv
, 
deÁu…_Êags
, 
d
, 0);

1091 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


1092 
	`≥rf‹m_⁄e_ã°
(
Â
, 
¨gc
, 
¨gv
, 
deÁu…_Êags
, 
d
, 1);

1094 
d
->
ã°
 = 
öô
;

1096 
	}
}

1098 c⁄° *
	g°™d¨d_ã°s
[] =

1100 "disˇrd", "deÁu…=disˇrd", 
NULL
,

1101 "ßve", "deÁu…=ßve", 
NULL
,

1102 "if-ß„", "deÁu…=if-ß„", 
NULL
,

1103 "vpAg", "vpAg=if-ß„", 
NULL
,

1104 "sTER", "sTER=if-ß„", 
NULL
,

1105 "IDAT", "deÁu…=disˇrd", "IDAT=ßve", 
NULL
,

1107 "sBIT=ßve", "sRGB=ßve", "eXIf=ßve", 
NULL
,

1108 
NULL


1111 
PNG_NORETURN
 

1112 
	$ußge
(c⁄° *
¥ogøm
, c⁄° *
ªas⁄
)

1114 
	`Ârötf
(
°dîr
, "pngunknown: %s: usage:\n %s [--strict] "

1116 "ã°fûe.≤g\n", 
ªas⁄
, 
¥ogøm
);

1117 
	`exô
(99);

1118 
	}
}

1121 
	$maö
(
¨gc
, c⁄° **
¨gv
)

1123 
FILE
 *
Â
;

1124 
≤g_uöt_32
 
deÁu…_Êags
[4];

1125 
°ri˘
 = 0, 
deÁu…_ã°s
 = 0;

1126 c⁄° *
cou¡_¨gv
 = "default=save";

1127 c⁄° *
touch_fûe
 = 
NULL
;

1128 
di•œy
 
d
;

1130 
	`öô_di•œy
(&
d
, 
¨gv
[0]);

1132 ++
¨gv
, --
¨gc
 > 0)

1134 i‡(
	`°rcmp
(*
¨gv
, "--strict") == 0)

1135 
°ri˘
 = 1;

1137 i‡(
	`°rcmp
(*
¨gv
, "--default") == 0)

1138 
deÁu…_ã°s
 = 1;

1140 i‡(
	`°rcmp
(*
¨gv
, "--touch") == 0)

1142 i‡(
¨gc
 > 1)

1143 
touch_fûe
 = *++
¨gv
, --
¨gc
;

1146 
	`ußge
(
d
.
¥ogøm
, "--touch: missing fileÇame");

1156 i‡(
¨gc
 <= 0)

1157 
	`ußge
(
d
.
¥ogøm
, "missingÅest file");

1162 i‡(
deÁu…_ã°s
)

1163 i‡(
¨gc
 != 1)

1164 
	`ußge
(
d
.
¥ogøm
, "extraárguments");

1167 
d
.
fûe
 = 
¨gv
[--
¨gc
];

1169 
Â
 = 
	`f›í
(
d
.
fûe
, "rb");

1170 i‡(
Â
 =
NULL
)

1172 
	`≥º‹
(
d
.
fûe
);

1173 
	`exô
(99);

1185 i‡(
	`check
(
Â
, 1, &
cou¡_¨gv
, 
deÁu…_Êags
, &
d
,

1186 #ifde‡
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


1191 Ë!
PNG_HANDLE_CHUNK_ALWAYS
)

1193 
	`Ârötf
(
°dîr
, "%s: %s: i¡î«»îr‹\n", 
d
.
¥ogøm
, d.
fûe
);

1194 
	`exô
(99);

1198 i‡(!
deÁu…_ã°s
)

1200 
d
.
ã°
 = 
cmd
;

1201 #ifde‡
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


1202 
	`≥rf‹m_⁄e_ã°
(
Â
, 
¨gc
, 
¨gv
, 
deÁu…_Êags
, &
d
, 0);

1204 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


1205 
	`≥rf‹m_⁄e_ã°
(
Â
, 
¨gc
, 
¨gv
, 
deÁu…_Êags
, &
d
, 1);

1207 
d
.
ã°
 = 
öô
;

1212 c⁄° **
ã°
 = 
°™d¨d_ã°s
;

1218 *
ã°
)

1220 c⁄° *
this_ã°
 = *
ã°
++;

1221 c⁄° **
√xt
 = 
ã°
;

1222 
cou¡
 = 
	`di•œy_rc
(&
d
, 
°ri˘
), 
√w_cou¡
;

1223 c⁄° *
ªsu…
;

1224 
¨g_cou¡
 = 0;

1226 *
√xt
 !
NULL
)

1228 ++
√xt
;

1229 ++
¨g_cou¡
;

1232 
	`≥rf‹m_⁄e_ã°_ß„
(
Â
, 
¨g_cou¡
, 
ã°
, 
deÁu…_Êags
, &
d
,

1233 
this_ã°
);

1235 
√w_cou¡
 = 
	`di•œy_rc
(&
d
, 
°ri˘
);

1237 i‡(
√w_cou¡
 =
cou¡
)

1238 
ªsu…
 = "PASS";

1241 
ªsu…
 = "FAIL";

1243 
	`¥ötf
("%s: %†%s\n", 
ªsu…
, 
d
.
¥ogøm
, 
this_ã°
);

1245 
ã°
 = 
√xt
+1;

1249 
	`f˛o£
(
Â
);

1251 i‡(
	`di•œy_rc
(&
d
, 
°ri˘
) == 0)

1254 i‡(
touch_fûe
 !
NULL
)

1256 
FILE
 *
fsuc˚ss
 = 
	`f›í
(
touch_fûe
, "wt");

1258 i‡(
fsuc˚ss
 !
NULL
)

1260 
îr
 = 0;

1261 
	`Ârötf
(
fsuc˚ss
, "PNG unknownÅests succeeded\n");

1262 
	`fÊush
(
fsuc˚ss
);

1263 
îr
 = 
	`„º‹
(
fsuc˚ss
);

1265 i‡(
	`f˛o£
(
fsuc˚ss
Ë|| 
îr
)

1267 
	`Ârötf
(
°dîr
, "%s: wrôêÁûed\n", 
touch_fûe
);

1268 
	`exô
(99);

1274 
	`Ârötf
(
°dîr
, "%s: o≥¿Áûed\n", 
touch_fûe
);

1275 
	`exô
(99);

1283 
	}
}

1287 
	$maö
()

1289 
	`Ârötf
(
°dîr
,

1292  
SKIP
;

1293 
	}
}

1298 
	$maö
()

1300 
	`Ârötf
(
°dîr
,

1303  
SKIP
;

1304 
	}
}

	@contrib/libtests/pngvalid.c

21 
	#_POSIX_SOURCE
 1

	)

22 
	#_ISOC99_SOURCE
 1

	)

23 
	#_GNU_SOURCE
 1

	)

24 
	#_BSD_SOURCE
 1

	)

25 
	#_DEFAULT_SOURCE
 1

	)

27 
	~<sig«l.h
>

28 
	~<°dio.h
>

30 #i‡
deföed
(
HAVE_CONFIG_H
Ë&& !deföed(
PNG_NO_CONFIG_H
)

31 
	~<c⁄fig.h
>

34 #ifde‡
HAVE_FEENABLEEXCEPT


35 
	~<„nv.h
>

38 #i‚de‡
FE_DIVBYZERO


39 
	#FE_DIVBYZERO
 0

	)

41 #i‚de‡
FE_INVALID


42 
	#FE_INVALID
 0

	)

44 #i‚de‡
FE_OVERFLOW


45 
	#FE_OVERFLOW
 0

	)

51 #ifde‡
PNG_FREESTANDING_TESTS


52 
	~<≤g.h
>

54 
	~"../../≤g.h
"

57 #ifde‡
PNG_ZLIB_HEADER


58 #ö˛udê
PNG_ZLIB_HEADER


60 
	~<zlib.h
>

66 #i‡
PNG_LIBPNG_VER
 >10601 && 
deföed
(
HAVE_CONFIG_H
)

67 
	#SKIP
 77

	)

69 
	#SKIP
 0

	)

74 #i‡
deföed
(
PNG_WRITE_SUPPORTED
) &&\

75 (
deföed
(
PNG_FIXED_POINT_SUPPORTED
Ë|| 
	$deföed
(
PNG_FLOATING_POINT_SUPPORTED
))

77 #i‡
PNG_LIBPNG_VER
 < 10500

79 
≤g_byã
 *
	t≤g_c⁄°_byãp
;

82 
	#PNG_INTERLACE_ADAM7_PASSES
 7

	)

83 
	#PNG_PASS_START_ROW
(
∑ss
Ë(((1U&~’ass))<<(3-(’ass)>>1)))&7)

	)

84 
	#PNG_PASS_START_COL
(
∑ss
Ë(((1U& (∑ss))<<(3-((’ass)+1)>>1)))&7)

	)

85 
	#PNG_PASS_ROW_SHIFT
(
∑ss
Ë(’ass)>2?(8-’ass))>>1:3)

	)

86 
	#PNG_PASS_COL_SHIFT
(
∑ss
Ë(’ass)>1?(7-’ass))>>1:3)

	)

87 
	#PNG_PASS_ROWS
(
height
, 
∑ss
Ë(((height)+(((1<<
	`PNG_PASS_ROW_SHIFT
(pass))\

88 -1)-
	`PNG_PASS_START_ROW
(
∑ss
)))>>
	`PNG_PASS_ROW_SHIFT
’ass))

	)

89 
	#PNG_PASS_COLS
(
width
, 
∑ss
Ë(((width)+(((1<<
	`PNG_PASS_COL_SHIFT
(pass))\

90 -1)-
	`PNG_PASS_START_COL
(
∑ss
)))>>
	`PNG_PASS_COL_SHIFT
’ass))

	)

91 
	#PNG_ROW_FROM_PASS_ROW
(
yIn
, 
∑ss
) \

92 (((
yIn
)<<
	`PNG_PASS_ROW_SHIFT
(
∑ss
))+
	`PNG_PASS_START_ROW
’ass))

	)

93 
	#PNG_COL_FROM_PASS_COL
(
xIn
, 
∑ss
) \

94 (((
xIn
)<<
	`PNG_PASS_COL_SHIFT
(
∑ss
))+
	`PNG_PASS_START_COL
’ass))

	)

95 
	#PNG_PASS_MASK
(
∑ss
,
off
) ( \

96 ((0x110145AFU>>(((7-(
off
))-(
∑ss
))<<2)) & 0xFU) | \

97 ((0x01145AF0U>>(((7-(
off
))-(
∑ss
))<<2)Ë& 0xF0U))

	)

98 
	#PNG_ROW_IN_INTERLACE_PASS
(
y
, 
∑ss
) \

99 ((
	`PNG_PASS_MASK
(
∑ss
,0Ë>> ((
y
)&7)Ë& 1)

	)

100 
	#PNG_COL_IN_INTERLACE_PASS
(
x
, 
∑ss
) \

101 ((
	`PNG_PASS_MASK
(
∑ss
,1Ë>> ((
x
)&7)Ë& 1)

	)

104 
	#PNG_WRITE_16BIT_SUPPORTED


	)

105 
	#PNG_READ_16BIT_SUPPORTED


	)

108 
	#PNG_FP_1
 100000

	)

109 
	#PNG_GAMMA_THRESHOLD_FIXED
\

110 ((
≤g_fixed_poöt
)(
PNG_GAMMA_THRESHOLD
 * 
PNG_FP_1
))

	)

113 #i‡
PNG_LIBPNG_VER
 < 10600

117 
	#≤g_c⁄°_°ru˘p
 
≤g_°ru˘p


	)

120 #i‚de‡
RELEASE_BUILD


122 
	#RELEASE_BUILD
 (
PNG_LIBPNG_BUILD_BASE_TYPE
 >
PNG_LIBPNG_BUILD_RC
)

	)

124 #i‡
RELEASE_BUILD


125 
	#debug⁄ly
(
somëhög
)

	)

127 
	#debug⁄ly
(
somëhög
Ë
	)
something

130 
	~<Êﬂt.h
>

131 
	~<°dlib.h
>

132 
	~<°rög.h
>

133 
	~<m©h.h
>

136 
	#CHUNK
(
a
,
b
,
c
,
d
Ë((◊)<<24)+((b)<<16)+((c)<<8)+(d))

	)

137 
	#CHUNK_IHDR
 
	`CHUNK
(73,72,68,82)

	)

138 
	#CHUNK_PLTE
 
	`CHUNK
(80,76,84,69)

	)

139 
	#CHUNK_IDAT
 
	`CHUNK
(73,68,65,84)

	)

140 
	#CHUNK_IEND
 
	`CHUNK
(73,69,78,68)

	)

141 
	#CHUNK_cHRM
 
	`CHUNK
(99,72,82,77)

	)

142 
	#CHUNK_gAMA
 
	`CHUNK
(103,65,77,65)

	)

143 
	#CHUNK_sBIT
 
	`CHUNK
(115,66,73,84)

	)

144 
	#CHUNK_sRGB
 
	`CHUNK
(115,82,71,66)

	)

149 #i‚de‡
UNUSED


150 #i‡
	`deföed
(
__GNUC__
Ë|| deföed(
_MSC_VER
)

151 
	#UNUSED
(
∑øm
Ë(Ì¨am;

	)

153 
	#UNUSED
(
∑øm
)

	)

158 #ifde‡
PNG_FREESTANDING_TESTS


159 
	~<˚x˚±.h
>

161 
	~"../visu≤g/˚x˚±.h
"

164 #ifde‡
__˝lu•lus


165 
	#this
 
nŸ_the_˝p_this


	)

166 
	#√w
 
nŸ_the_˝p_√w


	)

167 
	#voidˇ°
(
ty≥
, 
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

169 
	#voidˇ°
(
ty≥
, 
vÆue
Ë(vÆue)

	)

172 
≤g_°‹e
;

173 
	`deföe_ex˚±i⁄_ty≥
(
≤g_°‹e
*);

178 
	#™⁄_c⁄ãxt
(
ps
Ë
ex˚±i⁄_c⁄ãxt
 *
the_ex˚±i⁄_c⁄ãxt
 = \

179 &(
ps
)->
ex˚±i⁄_c⁄ãxt


	)

180 
	#c⁄ãxt
(
ps
,
Áu…
Ë
	`™⁄_c⁄ãxt
’s); 
≤g_°‹e
 *
	)
fault

187 
	#ARRAY_SIZE
(
a
Ë(()(( (a))/( (a)[0])))

	)

195 
	#is_gnu
(
maj‹
,
mö‹
)\

196 (
deföed
 
__GNUC__
Ë&& __GNUC__ =(
maj‹
Ë&& 
__GNUC_MINOR__
 =(
mö‹
)

	)

197 
	#is_gnu_∑tch
(
maj‹
,
mö‹
,
∑tch
)\

198 
	`is_gnu
(
maj‹
,
mö‹
Ë&& 
__GNUC_PATCHLEVEL__
 =0

	)

200 #ifde‡
__GNUC__


201 c⁄° * vﬁ©ûê
make_vﬁ©ûe_f‹_gnu
;

202 
	#gnu_vﬁ©ûe
(
x
Ë
make_vﬁ©ûe_f‹_gnu
 = &x;

	)

204 
	#gnu_vﬁ©ûe
(
x
)

	)

214 
size_t
 
	$ß„ˇt
(*
buf„r
, 
size_t
 
bufsize
, size_à
pos
,

215 c⁄° *
ˇt
)

217 
pos
 < 
bufsize
 && 
ˇt
 !
NULL
 && *cat != 0)

218 
buf„r
[
pos
++] = *
ˇt
++;

220 i‡(
pos
 >
bufsize
)

221 
pos
 = 
bufsize
-1;

223 
buf„r
[
pos
] = 0;

224  
pos
;

225 
	}
}

227 
size_t
 
	$ß„ˇä
(*
buf„r
, 
size_t
 
bufsize
, size_à
pos
, 
n
)

229 
numbî
[64];

230 
	`•rötf
(
numbî
, "%d", 
n
);

231  
	`ß„ˇt
(
buf„r
, 
bufsize
, 
pos
, 
numbî
);

232 
	}
}

234 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


235 
size_t
 
	$ß„ˇtd
(*
buf„r
, 
size_t
 
bufsize
, size_à
pos
, 
d
,

236 
¥ecisi⁄
)

238 
numbî
[64];

239 
	`•rötf
(
numbî
, "%.*f", 
¥ecisi⁄
, 
d
);

240  
	`ß„ˇt
(
buf„r
, 
bufsize
, 
pos
, 
numbî
);

241 
	}
}

244 c⁄° 
	gövÆid
[] = "invalid";

245 c⁄° 
	g£p
[] = ": ";

247 c⁄° *
	gcﬁour_ty≥s
[8] =

249 "gøysˇÀ", 
övÆid
, "truecolour", "indexed-colour",

250 "gøysˇÀ wôháÕha", 
övÆid
, "truecolour withálpha", invalid

253 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


255 
≤g_fixed_poöt


256 
	$fix
(
d
)

258 
d
 = 
	`Êo‹
(d * 
PNG_FP_1
 + .5);

259  (
≤g_fixed_poöt
)
d
;

260 
	}
}

271 
	$make_øndom_byãs
(
≤g_uöt_32
* 
£ed
, * 
pv
, 
size_t
 
size
)

273 
≤g_uöt_32
 
u0
 = 
£ed
[0], 
u1
 = seed[1];

274 
≤g_byãp
 
byãs
 = 
	`voidˇ°
’ng_byãp, 
pv
);

279 
size_t
 
i
;

280 
i
=0; i<
size
; ++i)

283 
≤g_uöt_32
 
u
 = ((
u0
 >> (20-8)Ë^ ((
u1
 << 7) | (u0 >> (32-7)))) & 0xff;

284 
u1
 <<= 8;

285 
u1
 |
u0
 >> 24;

286 
u0
 <<= 8;

287 
u0
 |
u
;

288 *
byãs
++ = (
≤g_byã
)
u
;

291 
£ed
[0] = 
u0
;

292 
£ed
[1] = 
u1
;

293 
	}
}

296 
	$make_four_øndom_byãs
(
≤g_uöt_32
* 
£ed
, 
≤g_byãp
 
byãs
)

298 
	`make_øndom_byãs
(
£ed
, 
byãs
, 4);

299 
	}
}

301 #i‡
deföed
 
PNG_READ_SUPPORTED
 || deföed 
PNG_WRITE_tRNS_SUPPORTED
 ||\

302 
deföed
 
PNG_WRITE_FILTER_SUPPORTED


304 
	$øndomize
(*
pv
, 
size_t
 
size
)

306 
≤g_uöt_32
 
øndom_£ed
[2] = {0x56789abc, 0xd};

307 
	`make_øndom_byãs
(
øndom_£ed
, 
pv
, 
size
);

308 
	}
}

310 
	#R8
(
this
Ë
	`øndomize
(&—his),  (this))

	)

312 #ifde‡
PNG_READ_SUPPORTED


313 
≤g_byã


314 
	$øndom_byã
()

316 
b1
[1];

317 
	`øndomize
(
b1
,  b1);

318  
b1
[0];

319 
	}
}

322 
≤g_uöt_16


323 
	$øndom_u16
()

325 
b2
[2];

326 
	`øndomize
(
b2
,  b2);

327  
	`≤g_gë_uöt_16
(
b2
);

328 
	}
}

330 #i‡
deföed
 
PNG_READ_RGB_TO_GRAY_SUPPORTED
 ||\

331 
deföed
 
PNG_READ_FILLER_SUPPORTED


332 
≤g_uöt_32


333 
	$øndom_u32
()

335 
b4
[4];

336 
	`øndomize
(
b4
,  b4);

337  
	`≤g_gë_uöt_32
(
b4
);

338 
	}
}

343 #i‡
deföed
 
PNG_READ_TRANSFORMS_SUPPORTED
 ||\

344 
deföed
 
PNG_WRITE_FILTER_SUPPORTED


346 
	$øndom_mod
(
max
)

348  
	`øndom_u16
(Ë% 
max
;

349 
	}
}

352 #i‡(
deföed
 
PNG_READ_RGB_TO_GRAY_SUPPORTED
) ||\

353 (
deföed
 
	gPNG_READ_FILLER_SUPPORTED
)

355 
	$øndom_choi˚
()

357  
	`øndom_byã
() & 1;

358 
	}
}

367 
	#FILEID
(
cﬁ
, 
dïth
, 
∑Àâe
, 
öãæa˚
, 
width
, 
height
, 
do_öãæa˚
) \

368 ((
≤g_uöt_32
)((
cﬁ
Ë+ ((
dïth
)<<3Ë+ ((
∑Àâe
)<<8Ë+ ((
öãæa˚
)<<13) + \

369 (((
do_öãæa˚
)!=0)<<15Ë+ ((
width
)<<16Ë+ ((
height
)<<24)))

	)

371 
	#COL_FROM_ID
(
id
Ë((
≤g_byã
)((id)& 0x7U))

	)

372 
	#DEPTH_FROM_ID
(
id
Ë((
≤g_byã
)(((idË>> 3Ë& 0x1fU))

	)

373 
	#PALETTE_FROM_ID
(
id
Ë(((idË>> 8Ë& 0x1f)

	)

374 
	#INTERLACE_FROM_ID
(
id
Ë((
≤g_byã
)(((idË>> 13Ë& 0x3))

	)

375 
	#DO_INTERLACE_FROM_ID
(
id
Ë(()(((id)>>15Ë& 1))

	)

376 
	#WIDTH_FROM_ID
(
id
Ë(((id)>>16Ë& 0xff)

	)

377 
	#HEIGHT_FROM_ID
(
id
Ë(((id)>>24Ë& 0xff)

	)

380 
size_t


381 
	$°™d¨d_«me
(*
buf„r
, 
size_t
 
bufsize
, size_à
pos
, 
≤g_byã
 
cﬁour_ty≥
,

382 
bô_dïth
, 
≈Æëã
, 
öãæa˚_ty≥
,

383 
≤g_uöt_32
 
w
,Öng_uöt_32 
h
, 
do_öãæa˚
)

385 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, 
cﬁour_ty≥s
[
cﬁour_ty≥
]);

386 i‡(
cﬁour_ty≥
 == 3)

388 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "[");

389 
pos
 = 
	`ß„ˇä
(
buf„r
, 
bufsize
,Öos, 
≈Æëã
);

390 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "]");

393 i‡(
≈Æëã
 != 0)

394 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "+tRNS");

396 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, " ");

397 
pos
 = 
	`ß„ˇä
(
buf„r
, 
bufsize
,Öos, 
bô_dïth
);

398 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, " bit");

400 i‡(
öãæa˚_ty≥
 !
PNG_INTERLACE_NONE
)

402 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, " interlaced");

403 i‡(
do_öãæa˚
)

404 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "(pngvalid)");

406 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "(libpng)");

409 i‡(
w
 > 0 || 
h
 > 0)

411 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, " ");

412 
pos
 = 
	`ß„ˇä
(
buf„r
, 
bufsize
,Öos, 
w
);

413 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "x");

414 
pos
 = 
	`ß„ˇä
(
buf„r
, 
bufsize
,Öos, 
h
);

417  
pos
;

418 
	}
}

420 
size_t


421 
	$°™d¨d_«me_‰om_id
(*
buf„r
, 
size_t
 
bufsize
, size_à
pos
, 
≤g_uöt_32
 
id
)

423  
	`°™d¨d_«me
(
buf„r
, 
bufsize
, 
pos
, 
	`COL_FROM_ID
(
id
),

424 
	`DEPTH_FROM_ID
(
id
), 
	`PALETTE_FROM_ID
(id), 
	`INTERLACE_FROM_ID
(id),

425 
	`WIDTH_FROM_ID
(
id
), 
	`HEIGHT_FROM_ID
(id), 
	`DO_INTERLACE_FROM_ID
(id));

426 
	}
}

432 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


433 
	#WRITE_BDHI
 4

	)

434 #ifde‡
PNG_READ_16BIT_SUPPORTED


435 
	#READ_BDHI
 4

	)

436 
	#DO_16BIT


	)

439 
	#WRITE_BDHI
 3

	)

441 #i‚de‡
DO_16BIT


442 
	#READ_BDHI
 3

	)

448 
	#PALETTE_COUNT
(
bô_dïth
Ë((bô_dïthË> 4 ? 1U : 16U)

	)

451 
	$√xt_f‹m©
(
≤g_byãp
 
cﬁour_ty≥
,Öng_byã∞
bô_dïth
,

452 * 
∑Àâe_numbî
, 
low_dïth_gøy
, 
tRNS
)

454 i‡(*
bô_dïth
 == 0)

456 *
cﬁour_ty≥
 = 0;

457 i‡(
low_dïth_gøy
)

458 *
bô_dïth
 = 1;

460 *
bô_dïth
 = 8;

461 *
∑Àâe_numbî
 = 0;

465 i‡(*
cﬁour_ty≥
 < 4 )

470 
≤
 = ++*
∑Àâe_numbî
;

471 
≤g_byã
 
˘
 = *
cﬁour_ty≥
;

473 i‡(((
˘
 =0 || cà=2Ë&& 
tRNS
 && 
≤
 < 2) ||

474 (
˘
 =3 && 
≤
 < 
	`PALETTE_COUNT
(*
bô_dïth
)))

478 *
∑Àâe_numbî
 = 0;

481 *
bô_dïth
 = (
≤g_byã
)(*bit_depth << 1);

484 i‡(*
bô_dïth
 <= 8

485 #ifde‡
DO_16BIT


486 || (*
cﬁour_ty≥
 !3 && *
bô_dïth
 <= 16)

492 *
cﬁour_ty≥
)

495 *
cﬁour_ty≥
 = 2;

496 *
bô_dïth
 = 8;

500 *
cﬁour_ty≥
 = 3;

501 *
bô_dïth
 = 1;

505 *
cﬁour_ty≥
 = 4;

506 *
bô_dïth
 = 8;

510 *
cﬁour_ty≥
 = 6;

511 *
bô_dïth
 = 8;

517 
	}
}

519 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


521 
	$ßm∂e
(
≤g_c⁄°_byãp
 
row
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
,

522 
≤g_uöt_32
 
x
, 
ßm∂e_ödex
, 
sw≠16
, 
lôéìndün
)

524 
≤g_uöt_32
 
bô_ödex
, 
ªsu…
;

527 
x
 *
bô_dïth
;

528 
bô_ödex
 = 
x
;

530 i‡((
cﬁour_ty≥
 & 1) == 0)

532 i‡(
cﬁour_ty≥
 & 2)

533 
bô_ödex
 *= 3;

535 i‡(
cﬁour_ty≥
 & 4)

536 
bô_ödex
 +
x
;

539 i‡(
cﬁour_ty≥
 & (2+4))

540 
bô_ödex
 +
ßm∂e_ödex
 * 
bô_dïth
;

544 
row
 +
bô_ödex
 >> 3;

545 
ªsu…
 = *
row
;

547 i‡(
bô_dïth
 == 8)

548  
ªsu…
;

550 i‡(
bô_dïth
 > 8)

552 i‡(
sw≠16
)

553  (*++
row
 << 8Ë+ 
ªsu…
;

555  (
ªsu…
 << 8Ë+ *++
row
;

562 
bô_ödex
 &= 7;

564 i‡(!
lôéìndün
)

565 
bô_ödex
 = 8-bô_ödex-
bô_dïth
;

567  (
ªsu…
 >> 
bô_ödex
Ë& ((1U<<
bô_dïth
)-1);

568 
	}
}

580 
	$pixñ_c›y
(
≤g_byãp
 
toBuf„r
, 
≤g_uöt_32
 
toIndex
,

581 
≤g_c⁄°_byãp
 
‰omBuf„r
, 
≤g_uöt_32
 
‰omIndex
, 
pixñSize
,

582 
lôéìndün
)

587 
toIndex
 *
pixñSize
;

588 
‰omIndex
 *
pixñSize
;

589 i‡(
pixñSize
 < 8)

592 
de°Mask
 = ((1U<<
pixñSize
)-1) <<

593 (
lôéìndün
 ? 
toIndex
&7 : 8-
pixñSize
-(toIndex&7));

595 
de°Byã
 = 
toBuf„r
[
toIndex
 >> 3] & ~
de°Mask
;

596 
sour˚Byã
 = 
‰omBuf„r
[
‰omIndex
 >> 3];

599 
‰omIndex
 &= 7;

600 i‡(
lôéìndün
)

602 i‡(
‰omIndex
 > 0Ë
sour˚Byã
 >>= fromIndex;

603 i‡((
toIndex
 & 7Ë> 0Ë
sour˚Byã
 <<=ÅoIndex & 7;

608 i‡(
‰omIndex
 > 0Ë
sour˚Byã
 <<= fromIndex;

609 i‡((
toIndex
 & 7Ë> 0Ë
sour˚Byã
 >>=ÅoIndex & 7;

612 
toBuf„r
[
toIndex
 >> 3] = (
≤g_byã
)(
de°Byã
 | (
sour˚Byã
 & 
de°Mask
));

615 
	`memmove
(
toBuf„r
+(
toIndex
>>3), 
‰omBuf„r
+(
‰omIndex
>>3), 
pixñSize
>>3);

616 
	}
}

618 #ifde‡
PNG_READ_SUPPORTED


623 
	$row_c›y
(
≤g_byãp
 
toBuf„r
, 
≤g_c⁄°_byãp
 
‰omBuf„r
, 
bôWidth
,

624 
lôéìndün
)

626 
	`mem˝y
(
toBuf„r
, 
‰omBuf„r
, 
bôWidth
 >> 3);

628 i‡((
bôWidth
 & 7) != 0)

630 
mask
;

632 
toBuf„r
 +
bôWidth
 >> 3;

633 
‰omBuf„r
 +
bôWidth
 >> 3;

634 i‡(
lôéìndün
)

635 
mask
 = 0xf‡<< (
bôWidth
 & 7);

637 
mask
 = 0xf‡>> (
bôWidth
 & 7);

638 *
toBuf„r
 = (
≤g_byã
)((*toBuf„∏& 
mask
Ë| (*
‰omBuf„r
 & ~mask));

640 
	}
}

646 
	$pixñ_cmp
(
≤g_c⁄°_byãp
 
∑
,Öng_c⁄°_byã∞
pb
, 
≤g_uöt_32
 
bô_width
)

648 #i‡
PNG_LIBPNG_VER
 < 10506

649 i‡(
	`memcmp
(
∑
, 
pb
, 
bô_width
>>3) == 0)

651 
≤g_uöt_32
 
p
;

653 i‡((
bô_width
 & 7) == 0)  0;

656 
p
 = 
∑
[
bô_width
 >> 3];

657 
p
 ^
pb
[
bô_width
 >> 3];

659 i‡(
p
 == 0)  0;

664 
bô_width
 &= 7;

665 
p
 >>8-
bô_width
;

667 i‡(
p
 == 0)  0;

673 i‡(
	`memcmp
(
∑
, 
pb
, (
bô_width
+7)>>3) == 0)

679 
≤g_uöt_32
 
whîe
 = 0;

681 
∑
[
whîe
] =
pb
[where]) ++where;

682  1+
whîe
;

684 
	}
}

692 
	#STORE_BUFFER_SIZE
 500

	)

693 
	s≤g_°‹e_buf„r


695 
≤g_°‹e_buf„r
* 
	m¥ev
;

696 
≤g_byã
 
	mbuf„r
[
STORE_BUFFER_SIZE
];

697 } 
	t≤g_°‹e_buf„r
;

699 
	#FILE_NAME_SIZE
 64

	)

701 
	s°‹e_∑Àâe_íåy


703 
≤g_byã
 
	mªd
;

704 
≤g_byã
 
	mgªí
;

705 
≤g_byã
 
	mblue
;

706 
≤g_byã
 
	mÆpha
;

707 } 
	t°‹e_∑Àâe_íåy
, 
	t°‹e_∑Àâe
[256];

709 
	s≤g_°‹e_fûe


711 
≤g_°‹e_fûe
* 
	m√xt
;

712 
	m«me
[
FILE_NAME_SIZE
];

713 
	mIDAT_bôs
;

714 
≤g_uöt_32
 
	mIDAT_size
;

715 
≤g_uöt_32
 
	mid
;

716 
size_t
 
	md©acou¡
;

717 
≤g_°‹e_buf„r
 
	md©a
;

718 
	m≈Æëã
;

719 
°‹e_∑Àâe_íåy
* 
	m∑Àâe
;

720 } 
	t≤g_°‹e_fûe
;

725 
	s°‹e_poﬁ


727 
≤g_°‹e
 *
	m°‹e
;

728 
°‹e_mem‹y
 *
	mli°
;

729 
≤g_byã
 
	mm¨k
[4];

732 
≤g_Æloc_size_t
 
	mmax
;

733 
≤g_Æloc_size_t
 
	mcuºít
;

734 
≤g_Æloc_size_t
 
	mlimô
;

735 
≤g_Æloc_size_t
 
	mtŸÆ
;

738 
≤g_Æloc_size_t
 
	mmax_max
;

739 
≤g_Æloc_size_t
 
	mmax_limô
;

740 
≤g_Æloc_size_t
 
	mmax_tŸÆ
;

741 } 
	t°‹e_poﬁ
;

743 
	s≤g_°‹e


749 
ex˚±i⁄_c⁄ãxt


750 
	mex˚±i⁄_c⁄ãxt
;

752 
	mvîbo£
 :1;

753 
	måót_w¨nögs_as_îr‹s
 :1;

754 
	mex≥˘_îr‹
 :1;

755 
	mex≥˘_w¨nög
 :1;

756 
	mßw_w¨nög
 :1;

757 
	m•ìd
 :1;

758 
	m¥ogªssive
 :1;

759 
	mvÆid©ed
 :1;

760 
	m√º‹s
;

761 
	mnw¨nögs
;

762 
	mn›ti⁄s
;

764 
	m›ti⁄
;

765 
	m£âög
;

766 } 
	m›ti⁄s
[16];

767 
	mã°
[128];

768 
	mîr‹
[256];

771 
≤g_uöt_32
 
	mchunkÀn
;

772 
≤g_uöt_32
 
	mchunkty≥
;

773 
≤g_uöt_32
 
	mchunkpos
;

774 
≤g_uöt_32
 
	mIDAT_size
;

775 
	mIDAT_bôs
;

778 
≤g_°ru˘p
 
	m¥ód
;

779 
≤g_öf›
 
	mpúód
;

780 
≤g_°‹e_fûe
* 
	mcuºít
;

781 
≤g_°‹e_buf„r
* 
	m√xt
;

782 
size_t
 
	mªadpos
;

783 
≤g_byã
* 
	mimage
;

784 
size_t
 
	mcb_image
;

785 
size_t
 
	mcb_row
;

786 
uL⁄g
 
	mIDAT_¸c
;

787 
≤g_uöt_32
 
	mIDAT_Àn
;

788 
≤g_uöt_32
 
	mIDAT_pos
;

789 
≤g_uöt_32
 
	mimage_h
;

790 
°‹e_poﬁ
 
	mªad_mem‹y_poﬁ
;

793 
≤g_°‹e_fûe
* 
	mßved
;

794 
≤g_°ru˘p
 
	mpwrôe
;

795 
≤g_öf›
 
	mpiwrôe
;

796 
size_t
 
	mwrôïos
;

797 
	mw«me
[
FILE_NAME_SIZE
];

798 
≤g_°‹e_buf„r
 
	m√w
;

799 
°‹e_poﬁ
 
	mwrôe_mem‹y_poﬁ
;

800 
°‹e_∑Àâe_íåy
* 
	m∑Àâe
;

801 
	m≈Æëã
;

802 } 
	t≤g_°‹e
;

806 
	$°‹e_poﬁ_m¨k
(
≤g_byãp
 
m¨k
)

808 
≤g_uöt_32
 
°‹e_£ed
[2] = { 0x12345678, 1};

810 
	`make_four_øndom_byãs
(
°‹e_£ed
, 
m¨k
);

811 
	}
}

813 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


817 
≤g_uöt_32


818 
	$øndom_32
()

823 
≤g_byã
 
m¨k
[4];

824 
≤g_uöt_32
 
ªsu…
;

826 
	`°‹e_poﬁ_m¨k
(
m¨k
);

827 
ªsu…
 = 
	`≤g_gë_uöt_32
(
m¨k
);

829 i‡(
ªsu…
 != 0)

830  
ªsu…
;

832 
	}
}

836 
	$°‹e_poﬁ_öô
(
≤g_°‹e
 *
ps
, 
°‹e_poﬁ
 *
poﬁ
)

838 
	`mem£t
(
poﬁ
, 0,  *pool);

840 
poﬁ
->
°‹e
 = 
ps
;

841 
poﬁ
->
li°
 = 
NULL
;

842 
poﬁ
->
max
 =Öoﬁ->
cuºít
 =Öoﬁ->
limô
 =Öoﬁ->
tŸÆ
 = 0;

843 
poﬁ
->
max_max
 =Öoﬁ->
max_limô
 =Öoﬁ->
max_tŸÆ
 = 0;

844 
	`°‹e_poﬁ_m¨k
(
poﬁ
->
m¨k
);

845 
	}
}

848 
	$°‹e_öô
(
≤g_°‹e
* 
ps
)

850 
	`mem£t
(
ps
, 0,  *ps);

851 
	`öô_ex˚±i⁄_c⁄ãxt
(&
ps
->
ex˚±i⁄_c⁄ãxt
);

852 
	`°‹e_poﬁ_öô
(
ps
, &ps->
ªad_mem‹y_poﬁ
);

853 
	`°‹e_poﬁ_öô
(
ps
, &ps->
wrôe_mem‹y_poﬁ
);

854 
ps
->
vîbo£
 = 0;

855 
ps
->
åót_w¨nögs_as_îr‹s
 = 0;

856 
ps
->
ex≥˘_îr‹
 = 0;

857 
ps
->
ex≥˘_w¨nög
 = 0;

858 
ps
->
ßw_w¨nög
 = 0;

859 
ps
->
•ìd
 = 0;

860 
ps
->
¥ogªssive
 = 0;

861 
ps
->
vÆid©ed
 = 0;

862 
ps
->
√º‹s
 =Ös->
nw¨nögs
 = 0;

863 
ps
->
¥ód
 = 
NULL
;

864 
ps
->
púód
 = 
NULL
;

865 
ps
->
ßved
 =Ös->
cuºít
 = 
NULL
;

866 
ps
->
√xt
 = 
NULL
;

867 
ps
->
ªadpos
 = 0;

868 
ps
->
image
 = 
NULL
;

869 
ps
->
cb_image
 = 0;

870 
ps
->
cb_row
 = 0;

871 
ps
->
image_h
 = 0;

872 
ps
->
pwrôe
 = 
NULL
;

873 
ps
->
piwrôe
 = 
NULL
;

874 
ps
->
wrôïos
 = 0;

875 
ps
->
chunkpos
 = 8;

876 
ps
->
chunkty≥
 = 0;

877 
ps
->
chunkÀn
 = 16;

878 
ps
->
IDAT_size
 = 0;

879 
ps
->
IDAT_bôs
 = 0;

880 
ps
->
√w
.
¥ev
 = 
NULL
;

881 
ps
->
∑Àâe
 = 
NULL
;

882 
ps
->
≈Æëã
 = 0;

883 
ps
->
n›ti⁄s
 = 0;

884 
	}
}

887 
	$°‹e_‰ìbuf„r
(
≤g_°‹e_buf„r
* 
psb
)

889 i‡(
psb
->
¥ev
)

891 
	`°‹e_‰ìbuf„r
(
psb
->
¥ev
);

892 
	`‰ì
(
psb
->
¥ev
);

893 
psb
->
¥ev
 = 
NULL
;

895 
	}
}

898 
	$°‹e_‰ì√w
(
≤g_°‹e
 *
ps
)

900 
	`°‹e_‰ìbuf„r
(&
ps
->
√w
);

901 
ps
->
wrôïos
 = 0;

902 
ps
->
chunkpos
 = 8;

903 
ps
->
chunkty≥
 = 0;

904 
ps
->
chunkÀn
 = 16;

905 
ps
->
IDAT_size
 = 0;

906 
ps
->
IDAT_bôs
 = 0;

907 i‡(
ps
->
∑Àâe
 !
NULL
)

909 
	`‰ì
(
ps
->
∑Àâe
);

910 
ps
->
∑Àâe
 = 
NULL
;

911 
ps
->
≈Æëã
 = 0;

913 
	}
}

916 
	$°‹e_°‹íew
(
≤g_°‹e
 *
ps
)

918 
≤g_°‹e_buf„r
 *
pb
;

920 
pb
 = 
	`voidˇ°
(
≤g_°‹e_buf„r
*, 
	`mÆloc
( *pb));

922 i‡(
pb
 =
NULL
)

923 
	`≤g_îr‹
(
ps
->
pwrôe
, "storeÇew: OOM");

925 *
pb
 = 
ps
->
√w
;

926 
ps
->
√w
.
¥ev
 = 
pb
;

927 
ps
->
wrôïos
 = 0;

928 
	}
}

931 
	$°‹e_‰ìfûe
(
≤g_°‹e_fûe
 **
µf
)

933 i‡(*
µf
 !
NULL
)

935 
	`°‹e_‰ìfûe
(&(*
µf
)->
√xt
);

937 
	`°‹e_‰ìbuf„r
(&(*
µf
)->
d©a
);

938 (*
µf
)->
d©acou¡
 = 0;

939 i‡((*
µf
)->
∑Àâe
 !
NULL
)

941 
	`‰ì
((*
µf
)->
∑Àâe
);

942 (*
µf
)->
∑Àâe
 = 
NULL
;

943 (*
µf
)->
≈Æëã
 = 0;

945 
	`‰ì
(*
µf
);

946 *
µf
 = 
NULL
;

948 
	}
}

951 
	$bôs_of
(
≤g_uöt_32
 
num
)

954 
b
 = 0;

956 i‡(
num
 & 0xffff0000UË
b
 += 16U,Çum >>= 16;

957 i‡(
num
 & 0xff00UË
b
 += 8U,Çum >>= 8;

958 i‡(
num
 & 0xf0UË
b
 += 4U,Çum >>= 4;

959 i‡(
num
 & 0xcUË
b
 += 2U,Çum >>= 2;

960 i‡(
num
 & 0x2UË++
b
,Çum >>= 1;

961 i‡(
num
Ë++
b
;

963  
b
;

964 
	}
}

970 
	$°‹e_°‹efûe
(
≤g_°‹e
 *
ps
, 
≤g_uöt_32
 
id
)

972 
≤g_°‹e_fûe
 *
pf
;

974 i‡(
ps
->
chunkpos
 !0U ||Ös->
chunkty≥
 !0U ||Ös->
chunkÀn
 != 0U ||

975 
ps
->
IDAT_size
 == 0)

976 
	`≤g_îr‹
(
ps
->
pwrôe
, "storefile: incomplete write");

978 
pf
 = 
	`voidˇ°
(
≤g_°‹e_fûe
*, 
	`mÆloc
( *pf));

979 i‡(
pf
 =
NULL
)

980 
	`≤g_îr‹
(
ps
->
pwrôe
, "storefile: OOM");

981 
	`ß„ˇt
(
pf
->
«me
, Öf->«me, 0, 
ps
->
w«me
);

982 
pf
->
id
 = id;

983 
pf
->
d©a
 = 
ps
->
√w
;

984 
pf
->
d©acou¡
 = 
ps
->
wrôïos
;

985 
pf
->
IDAT_size
 = 
ps
->IDAT_size;

986 
pf
->
IDAT_bôs
 = 
	`bôs_of
(
ps
->
IDAT_size
);

988 i‡(
pf
->
IDAT_bôs
 == 0U)

989 
	`≤g_îr‹
(
ps
->
pwrôe
, "storefile: 0 sized IDAT");

990 
ps
->
√w
.
¥ev
 = 
NULL
;

991 
ps
->
wrôïos
 = 0;

992 
ps
->
chunkpos
 = 8;

993 
ps
->
chunkty≥
 = 0;

994 
ps
->
chunkÀn
 = 16;

995 
ps
->
IDAT_size
 = 0;

996 
pf
->
∑Àâe
 = 
ps
->palette;

997 
pf
->
≈Æëã
 = 
ps
->npalette;

998 
ps
->
∑Àâe
 = 0;

999 
ps
->
≈Æëã
 = 0;

1002 
pf
->
√xt
 = 
ps
->
ßved
;

1003 
ps
->
ßved
 = 
pf
;

1004 
	}
}

1007 
size_t


1008 
	$°‹e_mesßge
(
≤g_°‹e
 *
ps
, 
≤g_c⁄°_°ru˘p
 
µ
, *
buf„r
, 
size_t
 
bufsize
,

1009 
size_t
 
pos
, c⁄° *
msg
)

1011 i‡(
µ
 !
NULL
 &&Ö∞=
ps
->
¥ód
)

1014 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "read: ");

1016 i‡(
ps
->
cuºít
 !
NULL
)

1018 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, 
ps
->
cuºít
->
«me
);

1019 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, 
£p
);

1023 i‡(
µ
 !
NULL
 &&Ö∞=
ps
->
pwrôe
)

1026 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "write: ");

1027 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, 
ps
->
w«me
);

1028 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, 
£p
);

1034 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "pngvalid: ");

1037 i‡(
ps
->
ã°
[0] != 0)

1039 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, 
ps
->
ã°
);

1040 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, 
£p
);

1042 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, 
msg
);

1043  
pos
;

1044 
	}
}

1048 
	$°‹e_vîbo£
(
≤g_°‹e
 *
ps
, 
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_c⁄°_ch¨p
 
¥efix
,

1049 
≤g_c⁄°_ch¨p
 
mesßge
)

1051 
buf„r
[512];

1053 i‡(
¥efix
)

1054 
	`Âuts
(
¥efix
, 
°dîr
);

1056 ()
	`°‹e_mesßge
(
ps
, 
µ
, 
buf„r
,  buf„r, 0, 
mesßge
);

1057 
	`Âuts
(
buf„r
, 
°dîr
);

1058 
	`Âutc
('\n', 
°dîr
);

1059 
	}
}

1063 
	$°‹e_log
(
≤g_°‹e
* 
ps
, 
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_c⁄°_ch¨p
 
mesßge
,

1064 
is_îr‹
)

1070 i‡(
is_îr‹
 ? (
ps
->
√º‹s
)++ == 0 :

1071 (
ps
->
nw¨nögs
)++ =0 &&Ös->
√º‹s
 == 0)

1072 
	`°‹e_mesßge
(
ps
, 
µ
,Ös->
îr‹
, Ös->îr‹, 0, 
mesßge
);

1074 i‡(
ps
->
vîbo£
)

1075 
	`°‹e_vîbo£
(
ps
, 
µ
, 
is_îr‹
 ? "îr‹: " : "w¨nög: ", 
mesßge
);

1076 
	}
}

1078 #ifde‡
PNG_READ_SUPPORTED


1081 
	$öã∫Æ_îr‹
(
≤g_°‹e
 *
ps
, 
≤g_c⁄°_ch¨p
 
mesßge
)

1083 
	`°‹e_log
(
ps
, 
NULL
, 
mesßge
, 1 );

1087 
ex˚±i⁄_c⁄ãxt
 *
the_ex˚±i⁄_c⁄ãxt
 = &
ps
->exception_context;

1088 
Throw
 
ps
;

1090 
	}
}

1094 
PNGCBAPI


1095 
	$°‹e_îr‹
(
≤g_°ru˘p
 
µIn
, 
≤g_c⁄°_ch¨p
 
mesßge
)

1097 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

1098 
≤g_°‹e
 *
ps
 = 
	`voidˇ°
’ng_°‹e*, 
	`≤g_gë_îr‹_±r
(
µ
));

1100 i‡(!
ps
->
ex≥˘_îr‹
)

1101 
	`°‹e_log
(
ps
, 
µ
, 
mesßge
, 1 );

1105 
ex˚±i⁄_c⁄ãxt
 *
the_ex˚±i⁄_c⁄ãxt
 = &
ps
->exception_context;

1106 
Throw
 
ps
;

1108 
	}
}

1110 
PNGCBAPI


1111 
	$°‹e_w¨nög
(
≤g_°ru˘p
 
µIn
, 
≤g_c⁄°_ch¨p
 
mesßge
)

1113 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

1114 
≤g_°‹e
 *
ps
 = 
	`voidˇ°
’ng_°‹e*, 
	`≤g_gë_îr‹_±r
(
µ
));

1116 i‡(!
ps
->
ex≥˘_w¨nög
)

1117 
	`°‹e_log
(
ps
, 
µ
, 
mesßge
, 0 );

1119 
ps
->
ßw_w¨nög
 = 1;

1120 
	}
}

1126 
≤g_byãp


1127 
	$°‹e_image_row
(c⁄° 
≤g_°‹e
* 
ps
, 
≤g_c⁄°_°ru˘p
 
µ
, 
nImage
,

1128 
≤g_uöt_32
 
y
)

1130 
size_t
 
coff£t
 = (
nImage
 * 
ps
->
image_h
 + 
y
Ë* (ps->
cb_row
 + 5) + 2;

1132 i‡(
ps
->
image
 =
NULL
)

1133 
	`≤g_îr‹
(
µ
, "noállocated image");

1135 i‡(
coff£t
 + 
ps
->
cb_row
 + 3 >Ös->
cb_image
)

1136 
	`≤g_îr‹
(
µ
, "imageÅoo small");

1138  
ps
->
image
 + 
coff£t
;

1139 
	}
}

1142 
	$°‹e_image_‰ì
(
≤g_°‹e
 *
ps
, 
≤g_c⁄°_°ru˘p
 
µ
)

1144 i‡(
ps
->
image
 !
NULL
)

1146 
≤g_byãp
 
image
 = 
ps
->image;

1148 i‡(
image
[-1] !0xed || image[
ps
->
cb_image
] != 0xfe)

1150 i‡(
µ
 !
NULL
)

1151 
	`≤g_îr‹
(
µ
, "png_store image overwrite (1)");

1153 
	`°‹e_log
(
ps
, 
NULL
, "png_store image overwrite (2)", 1);

1156 
ps
->
image
 = 
NULL
;

1157 
ps
->
cb_image
 = 0;

1158 --
image
;

1159 
	`‰ì
(
image
);

1161 
	}
}

1164 
	$°‹e_ísuª_image
(
≤g_°‹e
 *
ps
, 
≤g_c⁄°_°ru˘p
 
µ
, 
nImages
,

1165 
size_t
 
cbRow
, 
≤g_uöt_32
 
cRows
)

1167 
size_t
 
cb
 = 
nImages
 * 
cRows
 * (
cbRow
 + 5);

1169 i‡(
ps
->
cb_image
 < 
cb
)

1171 
≤g_byãp
 
image
;

1173 
	`°‹e_image_‰ì
(
ps
, 
µ
);

1176 
image
 = 
	`voidˇ°
(
≤g_byãp
, 
	`mÆloc
(
cb
+2));

1177 i‡(
image
 =
NULL
)

1180 i‡(
µ
 =
NULL
)

1183 
	`≤g_îr‹
(
µ
, "OOMállocating image buffer");

1187 ++
image
;

1188 
image
[-1] = 0xed;

1189 
image
[
cb
] = 0xfe;

1191 
ps
->
image
 = image;

1192 
ps
->
cb_image
 = 
cb
;

1199 
ps
->
cb_row
 = 
cbRow
;

1200 
ps
->
image_h
 = 
cRows
;

1208 
	`mem£t
(
ps
->
image
, 178, 
cb
);

1211 --
nImages
 >= 0)

1213 
≤g_uöt_32
 
y
;

1215 
y
=0; y<
cRows
; ++y)

1217 
≤g_byãp
 
row
 = 
	`°‹e_image_row
(
ps
, 
µ
, 
nImages
, 
y
);

1220 
row
[-2] = 190;

1221 
row
[-1] = 239;

1222 
row
[
cbRow
] = 222;

1223 
row
[
cbRow
+1] = 173;

1224 
row
[
cbRow
+2] = 17;

1227 
	}
}

1229 #ifde‡
PNG_READ_SUPPORTED


1231 
	$°‹e_image_check
(c⁄° 
≤g_°‹e
* 
ps
, 
≤g_c⁄°_°ru˘p
 
µ
, 
iImage
)

1233 
≤g_c⁄°_byãp
 
image
 = 
ps
->image;

1235 i‡(
image
[-1] !0xed || image[
ps
->
cb_image
] != 0xfe)

1236 
	`≤g_îr‹
(
µ
, "image overwrite");

1239 
size_t
 
cbRow
 = 
ps
->
cb_row
;

1240 
≤g_uöt_32
 
rows
 = 
ps
->
image_h
;

1242 
image
 +
iImage
 * (
cbRow
+5Ë* 
ps
->
image_h
;

1244 
image
 += 2;

1246 ; 
rows
 > 0; --rows)

1248 i‡(
image
[-2] != 190 || image[-1] != 239)

1249 
	`≤g_îr‹
(
µ
, "row start overwritten");

1251 i‡(
image
[
cbRow
] != 222 || image[cbRow+1] != 173 ||

1252 
image
[
cbRow
+2] != 17)

1253 
	`≤g_îr‹
(
µ
, "rowÉnd overwritten");

1255 
image
 +
cbRow
+5;

1258 
	}
}

1262 
	$vÆid_chunkty≥
(
≤g_uöt_32
 
chunkty≥
)

1267 
i
;

1269 
i
=0; i<4; ++i)

1271 
c
 = 
chunkty≥
 & 0xffU;

1273 i‡(!((
c
 >= 65U && c <= 90U) || (c >= 97U && c <= 122U)))

1276 
chunkty≥
 >>= 8;

1280 
	}
}

1282 
PNGCBAPI


1283 
	$°‹e_wrôe
(
≤g_°ru˘p
 
µIn
, 
≤g_byãp
 
pb
, 
size_t
 
°
)

1285 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

1286 
≤g_°‹e
 *
ps
 = 
	`voidˇ°
’ng_°‹e*, 
	`≤g_gë_io_±r
(
µ
));

1287 
size_t
 
wrôïos
 = 
ps
->writepos;

1288 
≤g_uöt_32
 
chunkpos
 = 
ps
->chunkpos;

1289 
≤g_uöt_32
 
chunkty≥
 = 
ps
->chunktype;

1290 
≤g_uöt_32
 
chunkÀn
 = 
ps
->chunklen;

1292 i‡(
ps
->
pwrôe
 !
µ
)

1293 
	`≤g_îr‹
(
µ
, "store state damaged");

1299 i‡(
°
 > 0x7fffffffU)

1300 
	`≤g_îr‹
(
µ
, "unexpected write size");

1306 
°
 > 0)

1308 i‡(
wrôïos
 >
STORE_BUFFER_SIZE
)

1309 
	`°‹e_°‹íew
(
ps
), 
wrôïos
 = 0;

1311 i‡(
chunkpos
 < 4)

1313 
≤g_byã
 
b
 = *
pb
++;

1314 --
°
;

1315 
chunkÀn
 = (chunkÀ¿<< 8Ë+ 
b
;

1316 
ps
->
√w
.
buf„r
[
wrôïos
++] = 
b
;

1317 ++
chunkpos
;

1320 i‡(
chunkpos
 < 8)

1322 
≤g_byã
 
b
 = *
pb
++;

1323 --
°
;

1324 
chunkty≥
 = (chunkty≥ << 8Ë+ 
b
;

1325 
ps
->
√w
.
buf„r
[
wrôïos
++] = 
b
;

1327 i‡(++
chunkpos
 == 8)

1329 
chunkÀn
 &= 0xffffffffU;

1330 i‡(
chunkÀn
 > 0x7fffffffU)

1331 
	`≤g_îr‹
(
µ
, "chunkÜengthÅoo great");

1333 
chunkty≥
 &= 0xffffffffU;

1334 i‡(
chunkty≥
 =
CHUNK_IDAT
)

1336 i‡(
chunkÀn
 > ~
ps
->
IDAT_size
)

1337 
	`≤g_îr‹
(
µ
, "pngvalid internal imageÅooÜarge");

1339 
ps
->
IDAT_size
 +
chunkÀn
;

1342 i‡(!
	`vÆid_chunkty≥
(
chunkty≥
))

1343 
	`≤g_îr‹
(
µ
, "invalid chunkÅype");

1345 
chunkÀn
 += 12;

1351 
size_t
 
cb
 = 
°
;

1353 i‡(
cb
 > 
STORE_BUFFER_SIZE
 - 
wrôïos
)

1354 
cb
 = 
STORE_BUFFER_SIZE
 - 
wrôïos
;

1356 i‡(
cb
 > 
chunkÀn
 - 
chunkpos
 )

1357 
cb
 = (
size_t
Ë(
chunkÀn
 - 
chunkpos
);

1359 
	`mem˝y
(
ps
->
√w
.
buf„r
 + 
wrôïos
, 
pb
, 
cb
);

1360 
chunkpos
 +(
≤g_uöt_32
Ë
cb
;

1361 
pb
 +
cb
;

1362 
wrôïos
 +
cb
;

1363 
°
 -
cb
;

1365 i‡(
chunkpos
 >
chunkÀn
)

1366 
chunkpos
 = 
chunkty≥
 = 
chunkÀn
 = 0;

1370 
ps
->
wrôïos
 = writepos;

1371 
ps
->
chunkpos
 = chunkpos;

1372 
ps
->
chunkty≥
 = chunktype;

1373 
ps
->
chunkÀn
 = chunklen;

1374 
	}
}

1376 
PNGCBAPI


1377 
	$°‹e_Êush
(
≤g_°ru˘p
 
µIn
)

1379 
	`UNUSED
(
µIn
)

1380 
	}
}

1382 #ifde‡
PNG_READ_SUPPORTED


1383 
size_t


1384 
	$°‹e_ªad_buf„r_size
(
≤g_°‹e
 *
ps
)

1387 i‡(
ps
->
√xt
 !&ps->
cuºít
->
d©a
)

1388  
STORE_BUFFER_SIZE
;

1390  
ps
->
cuºít
->
d©acou¡
;

1391 
	}
}

1394 
size_t


1395 
	$°‹e_ªad_buf„r_avaû
(
≤g_°‹e
 *
ps
)

1397 i‡(
ps
->
cuºít
 !
NULL
 &&Ös->
√xt
 != NULL)

1399 
≤g_°‹e_buf„r
 *
√xt
 = &
ps
->
cuºít
->
d©a
;

1400 
size_t
 
cbAvaû
 = 
ps
->
cuºít
->
d©acou¡
;

1402 
√xt
 !
ps
->√xà&&Çexà!
NULL
)

1404 
√xt
 =Çext->
¥ev
;

1405 
cbAvaû
 +
STORE_BUFFER_SIZE
;

1408 i‡(
√xt
 !
ps
->next)

1409 
	`≤g_îr‹
(
ps
->
¥ód
, "bufferÑeadÉrror");

1411 i‡(
cbAvaû
 > 
ps
->
ªadpos
)

1412  
cbAvaû
 - 
ps
->
ªadpos
;

1416 
	}
}

1419 
	$°‹e_ªad_buf„r_√xt
(
≤g_°‹e
 *
ps
)

1421 
≤g_°‹e_buf„r
 *
pbOld
 = 
ps
->
√xt
;

1422 
≤g_°‹e_buf„r
 *
pbNew
 = &
ps
->
cuºít
->
d©a
;

1423 i‡(
pbOld
 !
pbNew
)

1425 
pbNew
 !
NULL
 &&ÖbNew->
¥ev
 !
pbOld
)

1426 
pbNew
 =ÖbNew->
¥ev
;

1428 i‡(
pbNew
 !
NULL
)

1430 
ps
->
√xt
 = 
pbNew
;

1431 
ps
->
ªadpos
 = 0;

1435 
	`≤g_îr‹
(
ps
->
¥ód
, "bufferÜost");

1439 
	}
}

1445 
	$°‹e_ªad_imp
(
≤g_°‹e
 *
ps
, 
≤g_byãp
 
pb
, 
size_t
 
°
)

1447 i‡(
ps
->
cuºít
 =
NULL
 ||Ös->
√xt
 == NULL)

1448 
	`≤g_îr‹
(
ps
->
¥ód
, "store state damaged");

1450 
°
 > 0)

1452 
size_t
 
cbAvaû
 = 
	`°‹e_ªad_buf„r_size
(
ps
Ë-Ös->
ªadpos
;

1454 i‡(
cbAvaû
 > 0)

1456 i‡(
cbAvaû
 > 
°
) cbAvail = st;

1457 
	`mem˝y
(
pb
, 
ps
->
√xt
->
buf„r
 +Ös->
ªadpos
, 
cbAvaû
);

1458 
°
 -
cbAvaû
;

1459 
pb
 +
cbAvaû
;

1460 
ps
->
ªadpos
 +
cbAvaû
;

1463 i‡(!
	`°‹e_ªad_buf„r_√xt
(
ps
))

1464 
	`≤g_îr‹
(
ps
->
¥ód
, "read beyondÉnd of file");

1466 
	}
}

1468 
size_t


1469 
	$°‹e_ªad_chunk
(
≤g_°‹e
 *
ps
, 
≤g_byãp
 
pb
, 
size_t
 
max
, size_à
mö
)

1471 
≤g_uöt_32
 
chunkÀn
 = 
ps
->chunklen;

1472 
≤g_uöt_32
 
chunkty≥
 = 
ps
->chunktype;

1473 
≤g_uöt_32
 
chunkpos
 = 
ps
->chunkpos;

1474 
size_t
 
°
 = 
max
;

1476 i‡(
°
 > 0) do

1478 i‡(
chunkpos
 >
chunkÀn
)

1480 
≤g_byã
 
buf„r
[8];

1483 
	`°‹e_ªad_imp
(
ps
, 
buf„r
, 8U);

1484 
chunkÀn
 = 
	`≤g_gë_uöt_32
(
buf„r
) + 12U;

1485 
chunkty≥
 = 
	`≤g_gë_uöt_32
(
buf„r
+4U);

1486 
chunkpos
 = 0U;

1489 i‡(
chunkty≥
 =
CHUNK_IDAT
)

1491 
≤g_uöt_32
 
IDAT_pos
 = 
ps
->IDAT_pos;

1492 
≤g_uöt_32
 
IDAT_Àn
 = 
ps
->IDAT_len;

1493 
≤g_uöt_32
 
IDAT_size
 = 
ps
->IDAT_size;

1496 i‡(
chunkpos
 < 8U)

1497 
chunkpos
 = 8U;

1499 i‡(
IDAT_pos
 =
IDAT_Àn
)

1501 
≤g_byã
 
øndom
 = 
	`øndom_byã
();

1508 i‡(
IDAT_Àn
 == 0U)

1510 
øndom
 & 3U)

1512 0U: 
IDAT_Àn
 = 12U; ;

1513 1U: 
IDAT_Àn
 = 13U; ;

1514 : 
IDAT_Àn
 = 
	`øndom_u32
();

1515 
IDAT_Àn
 %
IDAT_size
;

1516 
IDAT_Àn
 += 13U;

1521 i‡(
IDAT_size
 == 0U)

1524 i‡(
chunkpos
 !
chunkÀn
-4U)

1525 
	`≤g_îr‹
(
ps
->
¥ód
, "internal: IDAT size mismatch");

1532 i‡((
øndom
 & 3U) == 0U)

1533 
IDAT_Àn
 = 12U;

1540 
≤g_byã
 
buf„r
[4];

1542 
	`°‹e_ªad_imp
(
ps
, 
buf„r
, 4U);

1543 
chunkpos
 += 4U;

1544 
ps
->
IDAT_pos
 = IDAT_pos;

1545 
ps
->
IDAT_Àn
 = IDAT_len;

1546 
ps
->
IDAT_size
 = 0U;

1556 
IDAT_Àn
 = 
	`øndom_u32
();

1557 
IDAT_Àn
 &(1U << (1U + 
øndom
 % 
ps
->
IDAT_bôs
)) - 1U;

1558 i‡(
IDAT_Àn
 > 
IDAT_size
)

1559 
IDAT_Àn
 = 
IDAT_size
;

1560 
IDAT_Àn
 += 12U;

1563 
IDAT_pos
 = 0U;

1564 
ps
->
IDAT_¸c
 = 0x35af061e;

1567 i‡(
IDAT_pos
 < 8U) do

1569 
≤g_uöt_32
 
b
;

1570 
shi·
;

1572 i‡(
IDAT_pos
 < 4U)

1573 
b
 = 
IDAT_Àn
 - 12U;

1576 
b
 = 
CHUNK_IDAT
;

1578 
shi·
 = 3U & 
IDAT_pos
;

1579 ++
IDAT_pos
;

1581 i‡(
shi·
 < 3U)

1582 
b
 >>8U*(3U-
shi·
);

1584 *
pb
++ = 0xffU & 
b
;

1586 --
°
 > 0 && 
IDAT_pos
 < 8);

1588 i‡(
IDAT_pos
 < 
IDAT_Àn
 - 4U)

1590 i‡(
chunkpos
 < 
chunkÀn
-4U)

1592 
uI¡
 
avaû
 = (uInt)-1;

1594 i‡(
avaû
 > (
IDAT_Àn
-4UË- 
IDAT_pos
)

1595 
avaû
 = (
uI¡
Ë((
IDAT_Àn
-4UË- 
IDAT_pos
);

1597 i‡(
avaû
 > 
°
)

1598 
avaû
 = (
uI¡
Ë
°
;

1600 i‡(
avaû
 > (
chunkÀn
-4UË- 
chunkpos
)

1601 
avaû
 = (
uI¡
Ë((
chunkÀn
-4UË- 
chunkpos
);

1603 
	`°‹e_ªad_imp
(
ps
, 
pb
, 
avaû
);

1604 
ps
->
IDAT_¸c
 = 
	`¸c32
’s->IDAT_¸c, 
pb
, 
avaû
);

1605 
pb
 +(
size_t
Ë
avaû
;

1606 
°
 -(
size_t
Ë
avaû
;

1607 
chunkpos
 +(
≤g_uöt_32
Ë
avaû
;

1608 
IDAT_size
 -(
≤g_uöt_32
Ë
avaû
;

1609 
IDAT_pos
 +(
≤g_uöt_32
Ë
avaû
;

1614 
≤g_byã
 
buf„r
[4];

1616 
	`°‹e_ªad_imp
(
ps
, 
buf„r
, 4U);

1617 
chunkpos
 += 4U;

1623 
uL⁄g
 
b
 = 
ps
->
IDAT_¸c
;

1624 
shi·
 = (
IDAT_Àn
 - 
IDAT_pos
);

1625 ++
IDAT_pos
;

1627 i‡(
shi·
 > 1U)

1628 
b
 >>8U*(
shi·
-1U);

1630 *
pb
++ = 0xffU & 
b
;

1632 --
°
 > 0 && 
IDAT_pos
 < 
IDAT_Àn
);

1634 
ps
->
IDAT_pos
 = IDAT_pos;

1635 
ps
->
IDAT_Àn
 = IDAT_len;

1636 
ps
->
IDAT_size
 = IDAT_size;

1644 i‡(
ps
->
IDAT_Àn
 > 0 &&Ös->
IDAT_size
 > 0)

1645 
	`≤g_îr‹
(
ps
->
¥ód
, "internal: missing IDAT data");

1647 i‡(
chunkty≥
 =
CHUNK_IEND
 && 
ps
->
IDAT_Àn
 == 0U)

1648 
	`≤g_îr‹
(
ps
->
¥ód
, "internal: missing IDAT");

1650 i‡(
chunkpos
 < 8U) do

1652 
≤g_uöt_32
 
b
;

1653 
shi·
;

1655 i‡(
chunkpos
 < 4U)

1656 
b
 = 
chunkÀn
 - 12U;

1659 
b
 = 
chunkty≥
;

1661 
shi·
 = 3U & 
chunkpos
;

1662 ++
chunkpos
;

1664 i‡(
shi·
 < 3U)

1665 
b
 >>8U*(3U-
shi·
);

1667 *
pb
++ = 0xffU & 
b
;

1669 --
°
 > 0 && 
chunkpos
 < 8);

1673 
size_t
 
avaû
 = 
°
;

1675 i‡(
avaû
 > 
chunkÀn
 - 
chunkpos
)

1676 
avaû
 = (
size_t
Ë(
chunkÀn
 - 
chunkpos
);

1678 
	`°‹e_ªad_imp
(
ps
, 
pb
, 
avaû
);

1679 
pb
 +
avaû
;

1680 
°
 -
avaû
;

1681 
chunkpos
 +(
≤g_uöt_32
Ë
avaû
;

1686 i‡(
chunkpos
 >
chunkÀn
 && 
max
-
°
 >
mö
 &&

1687 
	`°‹e_ªad_buf„r_avaû
(
ps
) == 0)

1692 
°
 > 0);

1694 
ps
->
chunkÀn
 = chunklen;

1695 
ps
->
chunkty≥
 = chunktype;

1696 
ps
->
chunkpos
 = chunkpos;

1698  
°
;

1699 
	}
}

1701 
PNGCBAPI


1702 
	$°‹e_ªad
(
≤g_°ru˘p
 
µIn
, 
≤g_byãp
 
pb
, 
size_t
 
°
)

1704 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

1705 
≤g_°‹e
 *
ps
 = 
	`voidˇ°
’ng_°‹e*, 
	`≤g_gë_io_±r
(
µ
));

1707 i‡(
ps
 =
NULL
 ||Ös->
¥ód
 !
µ
)

1708 
	`≤g_îr‹
(
µ
, "bad storeÑead call");

1710 
	`°‹e_ªad_chunk
(
ps
, 
pb
, 
°
, st);

1711 
	}
}

1714 
	$°‹e_¥ogªssive_ªad
(
≤g_°‹e
 *
ps
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

1716 i‡(
ps
->
¥ód
 !
µ
 ||Ös->
cuºít
 =
NULL
 ||Ös->
√xt
 == NULL)

1717 
	`≤g_îr‹
(
µ
, "store state damaged (progressive)");

1725 
	`°‹e_ªad_buf„r_avaû
(
ps
) > 0)

1727 
≤g_uöt_32
 
noi£
 = 2;

1728 
size_t
 
cb
;

1729 
≤g_byã
 
buf„r
[512];

1732 
noi£
 = (noise << 9) | ((noise ^ (noise >> (9-5))) & 0x1ff);

1733 
cb
 = 
noi£
 & 0x1ff;

1734 
cb
 -
	`°‹e_ªad_chunk
(
ps
, 
buf„r
, cb, 1);

1735 
	`≤g_¥o˚ss_d©a
(
µ
, 
pi
, 
buf„r
, 
cb
);

1737 
	}
}

1741 
°‹e_∑Àâe_íåy
 *

1742 
	$°‹e_wrôe_∑Àâe
(
≤g_°‹e
 *
ps
, 
≈Æëã
)

1744 i‡(
ps
->
pwrôe
 =
NULL
)

1745 
	`°‹e_log
(
ps
, 
NULL
, "attemptÅo writeÖalette without write stream", 1);

1747 i‡(
ps
->
∑Àâe
 !
NULL
)

1748 
	`≤g_îr‹
(
ps
->
pwrôe
, "multiple store_write_palette calls");

1751 i‡(
≈Æëã
 > 0)

1753 
ps
->
∑Àâe
 = 
	`voidˇ°
(
°‹e_∑Àâe_íåy
*, 
	`mÆloc
(
≈Æëã
 *

1754  *
ps
->
∑Àâe
));

1756 i‡(
ps
->
∑Àâe
 =
NULL
)

1757 
	`≤g_îr‹
(
ps
->
pwrôe
, "storeÇewÖalette: OOM");

1759 
ps
->
≈Æëã
 =Çpalette;

1762  
ps
->
∑Àâe
;

1763 
	}
}

1765 #ifde‡
PNG_READ_SUPPORTED


1766 
°‹e_∑Àâe_íåy
 *

1767 
	$°‹e_cuºít_∑Àâe
(
≤g_°‹e
 *
ps
, *
≈Æëã
)

1772 i‡(
ps
->
cuºít
 =
NULL
)

1774 
	`°‹e_log
(
ps
,Ös->
¥ód
, "no current stream forÖalette", 1);

1775  
NULL
;

1779 *
≈Æëã
 = 
ps
->
cuºít
->npalette;

1780  
ps
->
cuºít
->
∑Àâe
;

1781 
	}
}

1785 #ifde‡
PNG_USER_MEM_SUPPORTED


1790 
	s°‹e_mem‹y


1792 
°‹e_poﬁ
 *
	mpoﬁ
;

1793 
°‹e_mem‹y
 *
	m√xt
;

1794 
≤g_Æloc_size_t
 
	msize
;

1795 
≤g_byã
 
	mm¨k
[4];

1796 } 
	t°‹e_mem‹y
;

1806 
	$°‹e_poﬁ_îr‹
(
≤g_°‹e
 *
ps
, 
≤g_c⁄°_°ru˘p
 
µ
, c⁄° *
msg
)

1808 i‡(
µ
 !
NULL
)

1809 
	`≤g_îr‹
(
µ
, 
msg
);

1815 
	`°‹e_log
(
ps
, 
µ
, 
msg
, 1 );

1816 
	}
}

1819 
	$°‹e_mem‹y_‰ì
(
≤g_c⁄°_°ru˘p
 
µ
, 
°‹e_poﬁ
 *
poﬁ
, 
°‹e_mem‹y
 *
mem‹y
)

1825 i‡(
mem‹y
->
poﬁ
 !=Öool)

1826 
	`°‹e_poﬁ_îr‹
(
poﬁ
->
°‹e
, 
µ
, "memory corrupted (pool)");

1828 i‡(
	`memcmp
(
mem‹y
->
m¨k
, 
poﬁ
->mark,  memory->mark) != 0)

1829 
	`°‹e_poﬁ_îr‹
(
poﬁ
->
°‹e
, 
µ
, "memory corrupted (start)");

1834 
≤g_Æloc_size_t
 
cb
 = 
mem‹y
->
size
;

1836 i‡(
cb
 > 
poﬁ
->
max
)

1837 
	`°‹e_poﬁ_îr‹
(
poﬁ
->
°‹e
, 
µ
, "memory corrupted (size)");

1839 i‡(
	`memcmp
((
≤g_byãp
)(
mem‹y
+1)+
cb
, 
poﬁ
->
m¨k
, Öool->mark)

1841 
	`°‹e_poﬁ_îr‹
(
poﬁ
->
°‹e
, 
µ
, "memory corrupted (end)");

1846 
poﬁ
->
cuºít
 -
cb
;

1847 
	`‰ì
(
mem‹y
);

1850 
	}
}

1853 
	$°‹e_poﬁ_dñëe
(
≤g_°‹e
 *
ps
, 
°‹e_poﬁ
 *
poﬁ
)

1855 i‡(
poﬁ
->
li°
 !
NULL
)

1857 
	`Ârötf
(
°dîr
, "%s: %†%s: mem‹yÜo° (li° fﬁlows):\n", 
ps
->
ã°
,

1858 
poﬁ
 =&
ps
->
ªad_mem‹y_poﬁ
 ? "read" : "write",

1859 
poﬁ
 =&
ps
->
ªad_mem‹y_poﬁ
 ? (ps->
cuºít
 !
NULL
 ?

1860 
ps
->
cuºít
->
«me
 : "unknow¿fûe"Ë:Ös->
w«me
);

1861 ++
ps
->
√º‹s
;

1865 
°‹e_mem‹y
 *
√xt
 = 
poﬁ
->
li°
;

1866 
poﬁ
->
li°
 = 
√xt
->next;

1867 
√xt
->√xà
NULL
;

1869 
	`Ârötf
(
°dîr
, "\t%lu bytes @ %p\n",

1870 ()
√xt
->
size
, (const *)(next+1));

1874 
	`°‹e_mem‹y_‰ì
(
NULL
, 
poﬁ
, 
√xt
);

1876 
poﬁ
->
li°
 !
NULL
);

1880 i‡(
poﬁ
->
max
 >Öoﬁ->
max_max
)Öool->max_max =Öool->max;

1881 
poﬁ
->
max
 = 0;

1882 i‡(
poﬁ
->
cuºít
 != 0)

1883 
	`Ârötf
(
°dîr
, "%s: %s %s: memory counter mismatch (internalÉrror)\n",

1884 
ps
->
ã°
, 
poﬁ
 =&ps->
ªad_mem‹y_poﬁ
 ? "read" : "write",

1885 
poﬁ
 =&
ps
->
ªad_mem‹y_poﬁ
 ? (ps->
cuºít
 !
NULL
 ?

1886 
ps
->
cuºít
->
«me
 : "unknow¿fûe"Ë:Ös->
w«me
);

1887 
poﬁ
->
cuºít
 = 0;

1889 i‡(
poﬁ
->
limô
 >Öoﬁ->
max_limô
)

1890 
poﬁ
->
max_limô
 =Öoﬁ->
limô
;

1892 
poﬁ
->
limô
 = 0;

1894 i‡(
poﬁ
->
tŸÆ
 >Öoﬁ->
max_tŸÆ
)

1895 
poﬁ
->
max_tŸÆ
 =Öoﬁ->
tŸÆ
;

1897 
poﬁ
->
tŸÆ
 = 0;

1900 
	`°‹e_poﬁ_m¨k
(
poﬁ
->
m¨k
);

1901 
	}
}

1904 
≤g_voidp
 
PNGCBAPI


1905 
	$°‹e_mÆloc
(
≤g_°ru˘p
 
µIn
, 
≤g_Æloc_size_t
 
cb
)

1907 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

1908 
°‹e_poﬁ
 *
poﬁ
 = 
	`voidˇ°
(°‹e_poﬁ*, 
	`≤g_gë_mem_±r
(
µ
));

1909 
°‹e_mem‹y
 *
√w
 = 
	`voidˇ°
(°‹e_mem‹y*, 
	`mÆloc
(
cb
 + ( *new) +

1910 ( 
poﬁ
->
m¨k
)));

1912 i‡(
√w
 !
NULL
)

1914 i‡(
cb
 > 
poﬁ
->
max
)

1915 
poﬁ
->
max
 = 
cb
;

1917 
poﬁ
->
cuºít
 +
cb
;

1919 i‡(
poﬁ
->
cuºít
 >Öoﬁ->
limô
)

1920 
poﬁ
->
limô
 =Öoﬁ->
cuºít
;

1922 
poﬁ
->
tŸÆ
 +
cb
;

1924 
√w
->
size
 = 
cb
;

1925 
	`mem˝y
(
√w
->
m¨k
, 
poﬁ
->mark, Çew->mark);

1926 
	`mem˝y
((
≤g_byã
*)(
√w
+1Ë+ 
cb
, 
poﬁ
->
m¨k
, Öool->mark);

1927 
√w
->
poﬁ
 =Öool;

1928 
√w
->
√xt
 = 
poﬁ
->
li°
;

1929 
poﬁ
->
li°
 = 
√w
;

1930 ++
√w
;

1947 
	`°‹e_log
(
poﬁ
->
°‹e
, 
µ
, "out of memory", 1 );

1950  
√w
;

1951 
	}
}

1953 
PNGCBAPI


1954 
	$°‹e_‰ì
(
≤g_°ru˘p
 
µIn
, 
≤g_voidp
 
mem‹y
)

1956 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

1957 
°‹e_poﬁ
 *
poﬁ
 = 
	`voidˇ°
(°‹e_poﬁ*, 
	`≤g_gë_mem_±r
(
µ
));

1958 
°‹e_mem‹y
 *
this
 = 
	`voidˇ°
(°‹e_mem‹y*, 
mem‹y
), **
ã°
;

1965 i‡(
µ
 !
poﬁ
->
°‹e
->
¥ód
 &&Ö∞!poﬁ->°‹e->
pwrôe
)

1966 
µ
 = 
NULL
;

1971 --
this
;

1972 
ã°
 = &
poﬁ
->
li°
; *ã° !
this
;Åe° = &(*ã°)->
√xt
)

1974 i‡(*
ã°
 =
NULL
)

1976 
	`°‹e_poﬁ_îr‹
(
poﬁ
->
°‹e
, 
µ
, "badÖointerÅo free");

1982 *
ã°
 = 
this
->
√xt
;

1983 
this
->
√xt
 = 
NULL
;

1984 
	`°‹e_mem‹y_‰ì
(
µ
, 
poﬁ
, 
this
);

1985 
	}
}

1991 
	$°‹e_wrôe_ª£t
(
≤g_°‹e
 *
ps
)

1993 i‡(
ps
->
pwrôe
 !
NULL
)

1995 
	`™⁄_c⁄ãxt
(
ps
);

1997 
Try


1998 
	`≤g_de°roy_wrôe_°ru˘
(&
ps
->
pwrôe
, &ps->
piwrôe
);

2000 
C©ch_™⁄ymous


2005 
ps
->
pwrôe
 = 
NULL
;

2006 
ps
->
piwrôe
 = 
NULL
;

2012 #ifde‡
PNG_USER_MEM_SUPPORTED


2013 
	`°‹e_poﬁ_dñëe
(
ps
, &ps->
wrôe_mem‹y_poﬁ
);

2016 
	`°‹e_‰ì√w
(
ps
);

2017 
	}
}

2024 
≤g_°ru˘p


2025 
	$£t_°‹e_f‹_wrôe
(
≤g_°‹e
 *
ps
, 
≤g_öf›p
 
µi
, c⁄° *
«me
)

2027 
	`™⁄_c⁄ãxt
(
ps
);

2029 
Try


2031 i‡(
ps
->
pwrôe
 !
NULL
)

2032 
	`≤g_îr‹
(
ps
->
pwrôe
, "write storeálready in use");

2034 
	`°‹e_wrôe_ª£t
(
ps
);

2035 
	`ß„ˇt
(
ps
->
w«me
, Ös->w«me, 0, 
«me
);

2040 #ifde‡
PNG_USER_MEM_SUPPORTED


2041 i‡(!
ps
->
•ìd
)

2042 
ps
->
pwrôe
 = 
	`≤g_¸óã_wrôe_°ru˘_2
(
PNG_LIBPNG_VER_STRING
,

2043 
ps
, 
°‹e_îr‹
, 
°‹e_w¨nög
, &ps->
wrôe_mem‹y_poﬁ
,

2044 
°‹e_mÆloc
, 
°‹e_‰ì
);

2048 
ps
->
pwrôe
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
,

2049 
ps
, 
°‹e_îr‹
, 
°‹e_w¨nög
);

2051 
	`≤g_£t_wrôe_‚
(
ps
->
pwrôe
,Ös, 
°‹e_wrôe
, 
°‹e_Êush
);

2053 #ifde‡
PNG_SET_OPTION_SUPPORTED


2055 
›t
;

2056 
›t
=0; o±<
ps
->
n›ti⁄s
; ++opt)

2057 i‡(
	`≤g_£t_›ti⁄
(
ps
->
pwrôe
,Ös->
›ti⁄s
[
›t
].
›ti⁄
,

2058 
ps
->
›ti⁄s
[
›t
].
£âög
Ë=
PNG_OPTION_INVALID
)

2059 
	`≤g_îr‹
(
ps
->
pwrôe
, "png option invalid");

2063 i‡(
µi
 !
NULL
)

2064 *
µi
 = 
ps
->
piwrôe
 = 
	`≤g_¸óã_öfo_°ru˘
’s->
pwrôe
);

2067 
C©ch_™⁄ymous


2068  
NULL
;

2070  
ps
->
pwrôe
;

2071 
	}
}

2078 
	$°‹e_ªad_ª£t
(
≤g_°‹e
 *
ps
)

2080 #ifde‡
PNG_READ_SUPPORTED


2081 i‡(
ps
->
¥ód
 !
NULL
)

2083 
	`™⁄_c⁄ãxt
(
ps
);

2085 
Try


2086 
	`≤g_de°roy_ªad_°ru˘
(&
ps
->
¥ód
, &ps->
púód
, 
NULL
);

2088 
C©ch_™⁄ymous


2093 
ps
->
¥ód
 = 
NULL
;

2094 
ps
->
púód
 = 
NULL
;

2098 #ifde‡
PNG_USER_MEM_SUPPORTED


2100 
	`°‹e_poﬁ_dñëe
(
ps
, &ps->
ªad_mem‹y_poﬁ
);

2103 
ps
->
cuºít
 = 
NULL
;

2104 
ps
->
√xt
 = 
NULL
;

2105 
ps
->
ªadpos
 = 0;

2106 
ps
->
vÆid©ed
 = 0;

2108 
ps
->
chunkpos
 = 8;

2109 
ps
->
chunkty≥
 = 0;

2110 
ps
->
chunkÀn
 = 16;

2111 
ps
->
IDAT_size
 = 0;

2112 
	}
}

2114 #ifde‡
PNG_READ_SUPPORTED


2116 
	$°‹e_ªad_£t
(
≤g_°‹e
 *
ps
, 
≤g_uöt_32
 
id
)

2118 
≤g_°‹e_fûe
 *
pf
 = 
ps
->
ßved
;

2120 
pf
 !
NULL
)

2122 i‡(
pf
->
id
 == id)

2124 
ps
->
cuºít
 = 
pf
;

2125 
ps
->
√xt
 = 
NULL
;

2126 
ps
->
IDAT_size
 = 
pf
->IDAT_size;

2127 
ps
->
IDAT_bôs
 = 
pf
->IDAT_bits;

2128 
ps
->
IDAT_Àn
 = 0;

2129 
ps
->
IDAT_pos
 = 0;

2130 
ps
->
IDAT_¸c
 = 0UL;

2131 
	`°‹e_ªad_buf„r_√xt
(
ps
);

2135 
pf
 =Öf->
√xt
;

2139 
size_t
 
pos
;

2140 
msg
[
FILE_NAME_SIZE
+64];

2142 
pos
 = 
	`°™d¨d_«me_‰om_id
(
msg
,  msg, 0, 
id
);

2143 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, ": fileÇot found");

2144 
	`≤g_îr‹
(
ps
->
¥ód
, 
msg
);

2146 
	}
}

2153 
≤g_°ru˘p


2154 
	$£t_°‹e_f‹_ªad
(
≤g_°‹e
 *
ps
, 
≤g_öf›p
 
µi
, 
≤g_uöt_32
 
id
,

2155 c⁄° *
«me
)

2158 
	`ß„ˇt
(
ps
->
ã°
, Ös->ã°, 0, 
«me
);

2160 i‡(
ps
->
¥ód
 !
NULL
)

2161 
	`≤g_îr‹
(
ps
->
¥ód
, "read storeálready in use");

2163 
	`°‹e_ªad_ª£t
(
ps
);

2171 #ifde‡
PNG_USER_MEM_SUPPORTED


2172 i‡(!
ps
->
•ìd
)

2173 
ps
->
¥ód
 = 
	`≤g_¸óã_ªad_°ru˘_2
(
PNG_LIBPNG_VER_STRING
,Ös,

2174 
°‹e_îr‹
, 
°‹e_w¨nög
, &
ps
->
ªad_mem‹y_poﬁ
, 
°‹e_mÆloc
,

2175 
°‹e_‰ì
);

2179 
ps
->
¥ód
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
,Ös, 
°‹e_îr‹
,

2180 
°‹e_w¨nög
);

2182 i‡(
ps
->
¥ód
 =
NULL
)

2184 
ex˚±i⁄_c⁄ãxt
 *
the_ex˚±i⁄_c⁄ãxt
 = &
ps
->exception_context;

2186 
	`°‹e_log
(
ps
, 
NULL
, "png_create_read_structÑeturned NULL (unexpected)",

2189 
Throw
 
ps
;

2192 #ifde‡
PNG_SET_OPTION_SUPPORTED


2194 
›t
;

2195 
›t
=0; o±<
ps
->
n›ti⁄s
; ++opt)

2196 i‡(
	`≤g_£t_›ti⁄
(
ps
->
¥ód
,Ös->
›ti⁄s
[
›t
].
›ti⁄
,

2197 
ps
->
›ti⁄s
[
›t
].
£âög
Ë=
PNG_OPTION_INVALID
)

2198 
	`≤g_îr‹
(
ps
->
¥ód
, "png option invalid");

2202 
	`°‹e_ªad_£t
(
ps
, 
id
);

2204 i‡(
µi
 !
NULL
)

2205 *
µi
 = 
ps
->
púód
 = 
	`≤g_¸óã_öfo_°ru˘
’s->
¥ód
);

2207  
ps
->
¥ód
;

2208 
	}
}

2215 
	$°‹e_dñëe
(
≤g_°‹e
 *
ps
)

2217 
	`°‹e_wrôe_ª£t
(
ps
);

2218 
	`°‹e_ªad_ª£t
(
ps
);

2219 
	`°‹e_‰ìfûe
(&
ps
->
ßved
);

2220 
	`°‹e_image_‰ì
(
ps
, 
NULL
);

2221 
	}
}

2232 
	emodifõr_°©e


2234 
	mmodifõr_°¨t
,

2235 
	mmodifõr_sig«tuª
,

2236 
	mmodifõr_IHDR


2237 } 
	tmodifõr_°©e
;

2239 
	sCIE_cﬁ‹


2246 
	mX
, 
	mY
, 
	mZ
;

2247 } 
	tCIE_cﬁ‹
;

2249 
	scﬁ‹_ícodög


2257 
	mgamma
;

2258 
CIE_cﬁ‹
 
	mªd
, 
	mgªí
, 
	mblue
;

2259 } 
	tcﬁ‹_ícodög
;

2261 #ifde‡
PNG_READ_SUPPORTED


2262 #i‡
deföed
 
PNG_READ_TRANSFORMS_SUPPORTED
 && deföed 
PNG_READ_cHRM_SUPPORTED


2264 
	$chrom©icôy_x
(
CIE_cﬁ‹
 
c
)

2266  
c
.
X
 / (c.X + c.
Y
 + c.
Z
);

2267 
	}
}

2270 
	$chrom©icôy_y
(
CIE_cﬁ‹
 
c
)

2272  
c
.
Y
 / (c.
X
 + c.Y + c.
Z
);

2273 
	}
}

2275 
CIE_cﬁ‹


2276 
	$whôe_poöt
(c⁄° 
cﬁ‹_ícodög
 *
ícodög
)

2278 
CIE_cﬁ‹
 
whôe
;

2280 
whôe
.
X
 = 
ícodög
->
ªd
.X +Éncodög->
gªí
.X +Éncodög->
blue
.X;

2281 
whôe
.
Y
 = 
ícodög
->
ªd
.Y +Éncodög->
gªí
.Y +Éncodög->
blue
.Y;

2282 
whôe
.
Z
 = 
ícodög
->
ªd
.Z +Éncodög->
gªí
.Z +Éncodög->
blue
.Z;

2284  
whôe
;

2285 
	}
}

2288 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


2290 
	$n‹mÆize_cﬁ‹_ícodög
(
cﬁ‹_ícodög
 *
ícodög
)

2292 c⁄° 
whôeY
 = 
ícodög
->
ªd
.
Y
 +Éncodög->
gªí
.Y +

2293 
ícodög
->
blue
.
Y
;

2295 i‡(
whôeY
 != 1)

2297 
ícodög
->
ªd
.
X
 /
whôeY
;

2298 
ícodög
->
ªd
.
Y
 /
whôeY
;

2299 
ícodög
->
ªd
.
Z
 /
whôeY
;

2300 
ícodög
->
gªí
.
X
 /
whôeY
;

2301 
ícodög
->
gªí
.
Y
 /
whôeY
;

2302 
ícodög
->
gªí
.
Z
 /
whôeY
;

2303 
ícodög
->
blue
.
X
 /
whôeY
;

2304 
ícodög
->
blue
.
Y
 /
whôeY
;

2305 
ícodög
->
blue
.
Z
 /
whôeY
;

2307 
	}
}

2310 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


2311 
size_t


2312 
	$ß„ˇt_cﬁ‹_ícodög
(*
buf„r
, 
size_t
 
bufsize
, size_à
pos
,

2313 c⁄° 
cﬁ‹_ícodög
 *
e
, 
ícodög_gamma
)

2315 i‡(
e
 != 0)

2317 i‡(
ícodög_gamma
 != 0)

2318 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "(");

2319 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "R(");

2320 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
ªd
.
X
, 4);

2321 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, ",");

2322 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
ªd
.
Y
, 4);

2323 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, ",");

2324 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
ªd
.
Z
, 4);

2325 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "),G(");

2326 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
gªí
.
X
, 4);

2327 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, ",");

2328 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
gªí
.
Y
, 4);

2329 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, ",");

2330 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
gªí
.
Z
, 4);

2331 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "),B(");

2332 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
blue
.
X
, 4);

2333 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, ",");

2334 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
blue
.
Y
, 4);

2335 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, ",");

2336 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
e
->
blue
.
Z
, 4);

2337 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, ")");

2338 i‡(
ícodög_gamma
 != 0)

2339 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, ")");

2342 i‡(
ícodög_gamma
 != 0)

2344 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "^");

2345 
pos
 = 
	`ß„ˇtd
(
buf„r
, 
bufsize
,Öos, 
ícodög_gamma
, 5);

2348  
pos
;

2349 
	}
}

2353 
	s≤g_modifõr


2355 
≤g_°‹e
 
	mthis
;

2356 
≤g_modifiˇti⁄
 *
	mmodifiˇti⁄s
;

2358 
modifõr_°©e
 
	m°©e
;

2361 
≤g_byã
 
	mbô_dïth
;

2362 
≤g_byã
 
	mcﬁour_ty≥
;

2367 
≤g_uöt_32
 
	m≥ndög_Àn
;

2368 
≤g_uöt_32
 
	m≥ndög_chunk
;

2371 *
	mgammas
;

2372 
	mngammas
;

2373 
	mngamma_ã°s
;

2374 
	mcuºít_gamma
;

2375 c⁄° 
cﬁ‹_ícodög
 *
	mícodögs
;

2376 
	m√ncodögs
;

2377 c⁄° 
cﬁ‹_ícodög
 *
	mcuºít_ícodög
;

2378 
	mícodög_cou¡î
;

2379 
	mícodög_ign‹ed
;

2385 
	mª≥©
 :1;

2386 
	mã°_u£s_ícodög
 :1;

2389 
≤g_byã
 
	msbôlow
;

2394 
	mmaxout8
;

2395 
	mmaxabs8
;

2396 
	mmaxˇlc8
;

2397 
	mmaxpc8
;

2398 
	mmaxout16
;

2399 
	mmaxabs16
;

2400 
	mmaxˇlc16
;

2401 
	mmaxˇlcG
;

2402 
	mmaxpc16
;

2411 
	mlimô
;

2416 
	mlog8
;

2417 
	mlog16
;

2420 
	mîr‹_gøy_2
;

2421 
	mîr‹_gøy_4
;

2422 
	mîr‹_gøy_8
;

2423 
	mîr‹_gøy_16
;

2424 
	mîr‹_cﬁ‹_8
;

2425 
	mîr‹_cﬁ‹_16
;

2426 
	mîr‹_ödexed
;

2432 
	mu£_upd©e_öfo
;

2435 
	möãæa˚_ty≥
 :9;

2438 
	mã°_°™d¨d
 :1;

2441 
	mã°_size
 :1;

2444 
	mã°_å™sf‹m
 :1;

2445 
	mã°_tRNS
 :1;

2453 
	mu£_öput_¥ecisi⁄
 :1;

2454 
	mu£_öput_¥ecisi⁄_sbô
 :1;

2455 
	mu£_öput_¥ecisi⁄_16to8
 :1;

2460 
	mˇlcuœti⁄s_u£_öput_¥ecisi⁄
 :1;

2465 
	massume_16_bô_ˇlcuœti⁄s
 :1;

2468 
	mã°_gamma_thªshﬁd
 :1;

2469 
	mã°_gamma_å™sf‹m
 :1;

2470 
	mã°_gamma_sbô
 :1;

2471 
	mã°_gamma_sˇÀ16
 :1;

2472 
	mã°_gamma_background
 :1;

2473 
	mã°_gamma_Æpha_mode
 :1;

2474 
	mã°_gamma_ex∑nd16
 :1;

2475 
	mã°_exhau°ive
 :1;

2481 
	mã°_lbg
 :1;

2482 
	mã°_lbg_gamma_thªshﬁd
 :1;

2483 
	mã°_lbg_gamma_å™sf‹m
 :1;

2484 
	mã°_lbg_gamma_sbô
 :1;

2485 
	mã°_lbg_gamma_composôi⁄
 :1;

2487 
	mlog
 :1;

2492 
size_t
 
	mÊush
;

2493 
size_t
 
	mbuf„r_cou¡
;

2494 
size_t
 
	mbuf„r_posôi⁄
;

2495 
≤g_byã
 
	mbuf„r
[1024];

2496 } 
	t≤g_modifõr
;

2501 
	$Áû
(
≤g_modifõr
 *
pm
)

2503  !
pm
->
log
 && !pm->
this
.
vîbo£
 && (pm->this.
√º‹s
 > 0 ||

2504 (
pm
->
this
.
åót_w¨nögs_as_îr‹s
 &&Öm->this.
nw¨nögs
 > 0));

2505 
	}
}

2508 
	$modifõr_öô
(
≤g_modifõr
 *
pm
)

2510 
	`mem£t
(
pm
, 0,  *pm);

2511 
	`°‹e_öô
(&
pm
->
this
);

2512 
pm
->
modifiˇti⁄s
 = 
NULL
;

2513 
pm
->
°©e
 = 
modifõr_°¨t
;

2514 
pm
->
sbôlow
 = 1U;

2515 
pm
->
ngammas
 = 0;

2516 
pm
->
ngamma_ã°s
 = 0;

2517 
pm
->
gammas
 = 0;

2518 
pm
->
cuºít_gamma
 = 0;

2519 
pm
->
ícodögs
 = 0;

2520 
pm
->
√ncodögs
 = 0;

2521 
pm
->
cuºít_ícodög
 = 0;

2522 
pm
->
ícodög_cou¡î
 = 0;

2523 
pm
->
ícodög_ign‹ed
 = 0;

2524 
pm
->
ª≥©
 = 0;

2525 
pm
->
ã°_u£s_ícodög
 = 0;

2526 
pm
->
maxout8
 =Öm->
maxpc8
 =Öm->
maxabs8
 =Öm->
maxˇlc8
 = 0;

2527 
pm
->
maxout16
 =Öm->
maxpc16
 =Öm->
maxabs16
 =Öm->
maxˇlc16
 = 0;

2528 
pm
->
maxˇlcG
 = 0;

2529 
pm
->
limô
 = 4E-3;

2530 
pm
->
log8
 =Öm->
log16
 = 0;

2531 
pm
->
îr‹_gøy_2
 =Öm->
îr‹_gøy_4
 =Öm->
îr‹_gøy_8
 = 0;

2532 
pm
->
îr‹_gøy_16
 =Öm->
îr‹_cﬁ‹_8
 =Öm->
îr‹_cﬁ‹_16
 = 0;

2533 
pm
->
îr‹_ödexed
 = 0;

2534 
pm
->
u£_upd©e_öfo
 = 0;

2535 
pm
->
öãæa˚_ty≥
 = 
PNG_INTERLACE_NONE
;

2536 
pm
->
ã°_°™d¨d
 = 0;

2537 
pm
->
ã°_size
 = 0;

2538 
pm
->
ã°_å™sf‹m
 = 0;

2539 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


2540 
pm
->
ã°_tRNS
 = 1;

2542 
pm
->
ã°_tRNS
 = 0;

2544 
pm
->
u£_öput_¥ecisi⁄
 = 0;

2545 
pm
->
u£_öput_¥ecisi⁄_sbô
 = 0;

2546 
pm
->
u£_öput_¥ecisi⁄_16to8
 = 0;

2547 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 0;

2548 
pm
->
assume_16_bô_ˇlcuœti⁄s
 = 0;

2549 
pm
->
ã°_gamma_thªshﬁd
 = 0;

2550 
pm
->
ã°_gamma_å™sf‹m
 = 0;

2551 
pm
->
ã°_gamma_sbô
 = 0;

2552 
pm
->
ã°_gamma_sˇÀ16
 = 0;

2553 
pm
->
ã°_gamma_background
 = 0;

2554 
pm
->
ã°_gamma_Æpha_mode
 = 0;

2555 
pm
->
ã°_gamma_ex∑nd16
 = 0;

2556 
pm
->
ã°_lbg
 = 1;

2557 
pm
->
ã°_lbg_gamma_thªshﬁd
 = 1;

2558 
pm
->
ã°_lbg_gamma_å™sf‹m
 = 1;

2559 
pm
->
ã°_lbg_gamma_sbô
 = 1;

2560 
pm
->
ã°_lbg_gamma_composôi⁄
 = 1;

2561 
pm
->
ã°_exhau°ive
 = 0;

2562 
pm
->
log
 = 0;

2565 
	}
}

2567 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


2574 
	#DIGITIZE
 
PNG_LIBPNG_VER
 < 10700

	)

2584 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


2585 #i‡
DIGITIZE


2586 
	$digôize
(
vÆue
, 
dïth
, 
do_round
)

2594 
digôiz©i⁄_Á˘‹
 = (1U << 
dïth
) - 1;

2599 i‡(
vÆue
 <= 0)

2600 
vÆue
 = 0;

2602 i‡(
vÆue
 >= 1)

2603 
vÆue
 = 1;

2605 
vÆue
 *
digôiz©i⁄_Á˘‹
;

2606 i‡(
do_round
Ë
vÆue
 += .5;

2607  
	`Êo‹
(
vÆue
)/
digôiz©i⁄_Á˘‹
;

2608 
	}
}

2612 #ifde‡
PNG_READ_GAMMA_SUPPORTED


2613 
	$ab£º
(c⁄° 
≤g_modifõr
 *
pm
, 
ö_dïth
, 
out_dïth
)

2618 i‡(
pm
->
assume_16_bô_ˇlcuœti⁄s
 ||

2619 (
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 ? 
ö_dïth
 : 
out_dïth
) == 16)

2620  
pm
->
maxabs16
;

2622  
pm
->
maxabs8
;

2623 
	}
}

2625 
	$ˇl˚º
(c⁄° 
≤g_modifõr
 *
pm
, 
ö_dïth
, 
out_dïth
)

2630 i‡((
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 ? 
ö_dïth
 : 
out_dïth
) == 16)

2631  
pm
->
maxˇlc16
;

2632 i‡(
pm
->
assume_16_bô_ˇlcuœti⁄s
)

2633  
pm
->
maxˇlcG
;

2635  
pm
->
maxˇlc8
;

2636 
	}
}

2638 
	$p˚º
(c⁄° 
≤g_modifõr
 *
pm
, 
ö_dïth
, 
out_dïth
)

2643 i‡(
pm
->
assume_16_bô_ˇlcuœti⁄s
 ||

2644 (
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 ? 
ö_dïth
 : 
out_dïth
) == 16)

2645  
pm
->
maxpc16
 * .01;

2647  
pm
->
maxpc8
 * .01;

2648 
	}
}

2661 
	$ouãº
(c⁄° 
≤g_modifõr
 *
pm
, 
ö_dïth
, 
out_dïth
)

2670 i‡(
out_dïth
 == 2)

2673 i‡(
out_dïth
 == 4)

2676 i‡((
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 ? 
ö_dïth
 : 
out_dïth
) == 16)

2677  
pm
->
maxout16
;

2682 i‡(
out_dïth
 == 16)

2683  
pm
->
maxout8
 * 257;

2686  
pm
->
maxout8
;

2687 
	}
}

2693 
	$ouéog
(c⁄° 
≤g_modifõr
 *
pm
, 
ö_dïth
, 
out_dïth
)

2698 i‡(
out_dïth
 <= 8)

2700 i‡(
pm
->
log8
 == 0)

2703 i‡(
out_dïth
 < 8)

2704  
pm
->
log8
 / 255 * ((1<<
out_dïth
)-1);

2706  
pm
->
log8
;

2709 i‡((
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 ? 
ö_dïth
 : 
out_dïth
) == 16)

2711 i‡(
pm
->
log16
 == 0)

2714  
pm
->
log16
;

2720 i‡(
pm
->
log8
 == 0)

2723  
pm
->
log8
 * 257;

2724 
	}
}

2731 
	$ouçut_qu™tiz©i⁄_Á˘‹
(c⁄° 
≤g_modifõr
 *
pm
, 
ö_dïth
,

2732 
out_dïth
)

2734 i‡(
out_dïth
 =16 && 
ö_dïth
 != 16 &&

2735 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
)

2739 
	}
}

2751 
	s≤g_modifiˇti⁄


2753 
≤g_modifiˇti⁄
 *
	m√xt
;

2754 
≤g_uöt_32
 
	mchunk
;

2757 (*
	mmodify_‚
)(
≤g_modifõr
 *
	mpm
,

2758 
≤g_modifiˇti⁄
 *
	mme
, 
	madd
);

2764 
≤g_uöt_32
 
	madd
;

2765 
	mmodifõd
 :1;

2766 
	madded
 :1;

2767 
	mªmoved
 :1;

2768 } 
	t≤g_modifiˇti⁄
;

2771 
	$modifiˇti⁄_ª£t
(
≤g_modifiˇti⁄
 *
pmm
)

2773 i‡(
pmm
 !
NULL
)

2775 
pmm
->
modifõd
 = 0;

2776 
pmm
->
added
 = 0;

2777 
pmm
->
ªmoved
 = 0;

2778 
	`modifiˇti⁄_ª£t
(
pmm
->
√xt
);

2780 
	}
}

2783 
	$modifiˇti⁄_öô
(
≤g_modifiˇti⁄
 *
pmm
)

2785 
	`mem£t
(
pmm
, 0,  *pmm);

2786 
pmm
->
√xt
 = 
NULL
;

2787 
pmm
->
chunk
 = 0;

2788 
pmm
->
modify_‚
 = 
NULL
;

2789 
pmm
->
add
 = 0;

2790 
	`modifiˇti⁄_ª£t
(
pmm
);

2791 
	}
}

2793 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


2795 
	$modifõr_cuºít_ícodög
(c⁄° 
≤g_modifõr
 *
pm
, 
cﬁ‹_ícodög
 *
˚
)

2797 i‡(
pm
->
cuºít_ícodög
 != 0)

2798 *
˚
 = *
pm
->
cuºít_ícodög
;

2801 
	`mem£t
(
˚
, 0,  *ce);

2803 
˚
->
gamma
 = 
pm
->
cuºít_gamma
;

2804 
	}
}

2807 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


2808 
size_t


2809 
	$ß„ˇt_cuºít_ícodög
(*
buf„r
, 
size_t
 
bufsize
, size_à
pos
,

2810 c⁄° 
≤g_modifõr
 *
pm
)

2812 
pos
 = 
	`ß„ˇt_cﬁ‹_ícodög
(
buf„r
, 
bufsize
,Öos, 
pm
->
cuºít_ícodög
,

2813 
pm
->
cuºít_gamma
);

2815 i‡(
pm
->
ícodög_ign‹ed
)

2816 
pos
 = 
	`ß„ˇt
(
buf„r
, 
bufsize
,Öos, "[overridden]");

2818  
pos
;

2819 
	}
}

2840 
	$modifõr_tŸÆ_ícodögs
(c⁄° 
≤g_modifõr
 *
pm
)

2843 
pm
->
ngammas
 +

2844 
pm
->
√ncodögs
 +

2853 ((
pm
->
bô_dïth
 =16 ||Öm->
assume_16_bô_ˇlcuœti⁄s
) ?

2854 
pm
->
√ncodögs
 : 0);

2855 
	}
}

2858 
	$modifõr_ícodög_ôî©e
(
≤g_modifõr
 *
pm
)

2860 i‡(!
pm
->
ª≥©
 &&

2861 
pm
->
ã°_u£s_ícodög
)

2863 i‡(
pm
->
ã°_exhau°ive
)

2865 i‡(++
pm
->
ícodög_cou¡î
 >
	`modifõr_tŸÆ_ícodögs
(pm))

2866 
pm
->
ícodög_cou¡î
 = 0;

2874 i‡(
pm
->
ícodög_cou¡î
 == 0)

2875 
pm
->
ícodög_cou¡î
 = 
	`øndom_mod
(
	`modifõr_tŸÆ_ícodögs
(pm)-1)+1;

2877 
pm
->
ícodög_cou¡î
 = 0;

2880 i‡(
pm
->
ícodög_cou¡î
 > 0)

2881 
pm
->
ª≥©
 = 1;

2884 i‡(!
pm
->
ª≥©
)

2885 
pm
->
ícodög_cou¡î
 = 0;

2886 
	}
}

2889 
	$modifõr_ª£t
(
≤g_modifõr
 *
pm
)

2891 
	`°‹e_ªad_ª£t
(&
pm
->
this
);

2892 
pm
->
limô
 = 4E-3;

2893 
pm
->
≥ndög_Àn
 =Öm->
≥ndög_chunk
 = 0;

2894 
pm
->
Êush
 =Öm->
buf„r_cou¡
 =Öm->
buf„r_posôi⁄
 = 0;

2895 
pm
->
modifiˇti⁄s
 = 
NULL
;

2896 
pm
->
°©e
 = 
modifõr_°¨t
;

2897 
	`modifõr_ícodög_ôî©e
(
pm
);

2902 
pm
->
ã°_u£s_ícodög
 = 0;

2903 
pm
->
cuºít_gamma
 = 0;

2904 
pm
->
cuºít_ícodög
 = 0;

2905 
pm
->
ícodög_ign‹ed
 = 0;

2907 
pm
->
bô_dïth
 =Öm->
cﬁour_ty≥
 = 0;

2908 
	}
}

2915 
	$modifõr_£t_ícodög
(
≤g_modifõr
 *
pm
)

2921 
pm
->
cuºít_gamma
 = 0;

2922 
pm
->
cuºít_ícodög
 = 0;

2923 
pm
->
ícodög_ign‹ed
 = 0;

2926 i‡(
pm
->
ícodög_cou¡î
 > 0)

2931 i‡(
pm
->
ícodög_cou¡î
 <pm->
ngammas
)

2932 
pm
->
cuºít_gamma
 = 1/pm->
gammas
[pm->
ícodög_cou¡î
-1];

2936 
i
 = 
pm
->
ícodög_cou¡î
 -Öm->
ngammas
;

2938 i‡(
i
 >
pm
->
√ncodögs
)

2940 
i
 %
pm
->
√ncodögs
;

2941 
pm
->
cuºít_gamma
 = 1;

2945 
pm
->
cuºít_gamma
 =Öm->
ícodögs
[
i
].
gamma
;

2947 
pm
->
cuºít_ícodög
 =Öm->
ícodögs
 + 
i
;

2950 
	}
}

2956 
	$modifõr_cﬁ‹_ícodög_is_sRGB
(c⁄° 
≤g_modifõr
 *
pm
)

2958  
pm
->
cuºít_ícodög
 !0 &&Öm->cuºít_ícodög =pm->
ícodögs
 &&

2959 
pm
->
cuºít_ícodög
->
gamma
 =pm->
cuºít_gamma
;

2960 
	}
}

2963 
	$modifõr_cﬁ‹_ícodög_is_£t
(c⁄° 
≤g_modifõr
 *
pm
)

2965  
pm
->
cuºít_gamma
 != 0;

2966 
	}
}

2970 
	$modifõr_¸c
(
≤g_byãp
 
buf„r
)

2975 
uI¡
 
d©Æí
 = 
	`≤g_gë_uöt_32
(
buf„r
);

2976 
uL⁄g
 
¸c
 = 
	`¸c32
(0, 
buf„r
+4, 
d©Æí
+4);

2979 
	`≤g_ßve_uöt_32
(
buf„r
+
d©Æí
+8, (
≤g_uöt_32
)
¸c
);

2980 
	}
}

2983 
	$modifõr_£tbuf„r
(
≤g_modifõr
 *
pm
)

2985 
	`modifõr_¸c
(
pm
->
buf„r
);

2986 
pm
->
buf„r_cou¡
 = 
	`≤g_gë_uöt_32
’m->
buf„r
)+12;

2987 
pm
->
buf„r_posôi⁄
 = 0;

2988 
	}
}

2995 
	$modifõr_ªad_imp
(
≤g_modifõr
 *
pm
, 
≤g_byãp
 
pb
, 
size_t
 
°
)

2997 
°
 > 0)

2999 
size_t
 
cb
;

3000 
≤g_uöt_32
 
Àn
, 
chunk
;

3001 
≤g_modifiˇti⁄
 *
mod
;

3003 i‡(
pm
->
buf„r_posôi⁄
 >pm->
buf„r_cou¡
Ëpm->
°©e
)

3005 
≤g_byã
 
sign
[8] = { 137, 80, 78, 71, 13, 10, 26, 10 };

3006 
modifõr_°¨t
:

3007 
	`°‹e_ªad_chunk
(&
pm
->
this
,Öm->
buf„r
, 8, 8);

3008 
pm
->
buf„r_cou¡
 = 8;

3009 
pm
->
buf„r_posôi⁄
 = 0;

3011 i‡(
	`memcmp
(
pm
->
buf„r
, 
sign
, 8) != 0)

3012 
	`≤g_îr‹
(
pm
->
this
.
¥ód
, "invalid PNG file signature");

3013 
pm
->
°©e
 = 
modifõr_sig«tuª
;

3016 
modifõr_sig«tuª
:

3017 
	`°‹e_ªad_chunk
(&
pm
->
this
,Öm->
buf„r
, 13+12, 13+12);

3018 
pm
->
buf„r_cou¡
 = 13+12;

3019 
pm
->
buf„r_posôi⁄
 = 0;

3021 i‡(
	`≤g_gë_uöt_32
(
pm
->
buf„r
) != 13 ||

3022 
	`≤g_gë_uöt_32
(
pm
->
buf„r
+4Ë!
CHUNK_IHDR
)

3023 
	`≤g_îr‹
(
pm
->
this
.
¥ód
, "invalid IHDR");

3026 
mod
 = 
pm
->
modifiˇti⁄s
;

3027 
mod
 !
NULL
)

3029 i‡(
mod
->
chunk
 =
CHUNK_IHDR
 && mod->
modify_‚
 &&

3030 (*
mod
->
modify_‚
)(
pm
, mod, 0))

3032 
mod
->
modifõd
 = 1;

3033 
	`modifõr_£tbuf„r
(
pm
);

3037 
mod
 = mod->
√xt
;

3041 
pm
->
bô_dïth
 =Öm->
buf„r
[8+8];

3042 
pm
->
cﬁour_ty≥
 =Öm->
buf„r
[8+8+1];

3044 
pm
->
°©e
 = 
modifõr_IHDR
;

3045 
pm
->
Êush
 = 0;

3048 
modifõr_IHDR
:

3054 i‡((
cb
 = 
pm
->
Êush
) > 0)

3056 i‡(
cb
 > 
°
) cb = st;

3057 
pm
->
Êush
 -
cb
;

3058 
	`°‹e_ªad_chunk
(&
pm
->
this
, 
pb
, 
cb
, cb);

3059 
pb
 +
cb
;

3060 
°
 -
cb
;

3061 i‡(
°
 == 0) ;

3067 i‡(
pm
->
≥ndög_chunk
 != 0)

3069 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
,Öm->
≥ndög_Àn
);

3070 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+4,Öm->
≥ndög_chunk
);

3071 
pm
->
≥ndög_Àn
 = 0;

3072 
pm
->
≥ndög_chunk
 = 0;

3075 
	`°‹e_ªad_chunk
(&
pm
->
this
,Öm->
buf„r
, 8, 8);

3077 
pm
->
buf„r_cou¡
 = 8;

3078 
pm
->
buf„r_posôi⁄
 = 0;

3081 
Àn
 = 
	`≤g_gë_uöt_32
(
pm
->
buf„r
);

3082 
chunk
 = 
	`≤g_gë_uöt_32
(
pm
->
buf„r
+4);

3087 i‡(
chunk
 =
CHUNK_PLTE
 || chunk =
CHUNK_IDAT
 ||

3088 
chunk
 =
CHUNK_IEND
)

3090 
mod
 = 
pm
->
modifiˇti⁄s
;

3092 
mod
 !
NULL
)

3094 i‡((
mod
->
add
 =
chunk
 ||

3095 (
mod
->
add
 =
CHUNK_PLTE
 && 
chunk
 =
CHUNK_IDAT
)) &&

3096 
mod
->
modify_‚
 !
NULL
 && !mod->
modifõd
 && !mod->
added
)

3101 
mod
->
added
 = 1;

3103 i‡((*
mod
->
modify_‚
)(
pm
, mod, 1 ))

3106 i‡(
pm
->
buf„r_cou¡
 > 0)

3107 
	`modifõr_£tbuf„r
(
pm
);

3111 
pm
->
buf„r_posôi⁄
 = 0;

3112 
mod
->
ªmoved
 = 1;

3118 
pm
->
≥ndög_Àn
 = 
Àn
;

3119 
pm
->
≥ndög_chunk
 = 
chunk
;

3124 
mod
 = mod->
√xt
;

3131 i‡(
mod
 !
NULL
)

3139 i‡(
Àn
+12 < 
pm
->
buf„r
)

3141 
size_t
 
s
 = 
Àn
+12-
pm
->
buf„r_cou¡
;

3142 
	`°‹e_ªad_chunk
(&
pm
->
this
,Öm->
buf„r
+pm->
buf„r_cou¡
, 
s
, s);

3143 
pm
->
buf„r_cou¡
 = 
Àn
+12;

3146 
mod
 = 
pm
->
modifiˇti⁄s
;

3147 
mod
 !
NULL
)

3149 i‡(
mod
->
chunk
 == chunk)

3151 i‡(
mod
->
modify_‚
 =
NULL
)

3154 
pm
->
buf„r_cou¡
 =Öm->
buf„r_posôi⁄
 = 0;

3155 
mod
->
ªmoved
 = 1;

3159 i‡((*
mod
->
modify_‚
)(
pm
, mod, 0))

3161 
mod
->
modifõd
 = 1;

3163 i‡(
pm
->
buf„r_cou¡
 == 0)

3165 
pm
->
buf„r_posôi⁄
 = 0;

3168 
	`modifõr_£tbuf„r
(
pm
);

3172 
mod
 = mod->
√xt
;

3177 
pm
->
Êush
 = 
Àn
+12 -Öm->
buf„r_cou¡
;

3186 
cb
 = 
pm
->
buf„r_cou¡
 -Öm->
buf„r_posôi⁄
;

3188 i‡(
cb
 > 
°
)

3189 
cb
 = 
°
;

3191 
	`mem˝y
(
pb
, 
pm
->
buf„r
 +Öm->
buf„r_posôi⁄
, 
cb
);

3192 
°
 -
cb
;

3193 
pb
 +
cb
;

3194 
pm
->
buf„r_posôi⁄
 +
cb
;

3196 
	}
}

3199 
PNGCBAPI


3200 
	$modifõr_ªad
(
≤g_°ru˘p
 
µIn
, 
≤g_byãp
 
pb
, 
size_t
 
°
)

3202 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

3203 
≤g_modifõr
 *
pm
 = 
	`voidˇ°
’ng_modifõr*, 
	`≤g_gë_io_±r
(
µ
));

3205 i‡(
pm
 =
NULL
 ||Öm->
this
.
¥ód
 !
µ
)

3206 
	`≤g_îr‹
(
µ
, "bad modifier_read call");

3208 
	`modifõr_ªad_imp
(
pm
, 
pb
, 
°
);

3209 
	}
}

3215 
	$modifõr_¥ogªssive_ªad
(
≤g_modifõr
 *
pm
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

3217 i‡(
pm
->
this
.
¥ód
 !
µ
 ||Öm->this.
cuºít
 =
NULL
 ||

3218 
pm
->
this
.
√xt
 =
NULL
)

3219 
	`≤g_îr‹
(
µ
, "store state damaged (progressive)");

3229 
≤g_uöt_32
 
noi£
 = 1;

3230 
size_t
 
cb
, 
cbAvaû
;

3231 
≤g_byã
 
buf„r
[512];

3234 
noi£
 = (noise << 9) | ((noise ^ (noise >> (9-5))) & 0x1ff);

3235 
cb
 = 
noi£
 & 0x1ff;

3242 
cbAvaû
 = 
	`°‹e_ªad_buf„r_avaû
(&
pm
->
this
);

3243 i‡(
pm
->
buf„r_cou¡
 >Öm->
buf„r_posôi⁄
)

3244 
cbAvaû
 +
pm
->
buf„r_cou¡
 -Öm->
buf„r_posôi⁄
;

3246 i‡(
cb
 > 
cbAvaû
)

3249 i‡(
cbAvaû
 == 0)

3252 
cb
 = 
cbAvaû
;

3255 
	`modifõr_ªad_imp
(
pm
, 
buf„r
, 
cb
);

3256 
	`≤g_¥o˚ss_d©a
(
µ
, 
pi
, 
buf„r
, 
cb
);

3262 i‡(
pm
->
buf„r_cou¡
 >Öm->
buf„r_posôi⁄
 ||

3263 
pm
->
this
.
√xt
 !&pm->this.
cuºít
->
d©a
 ||

3264 
pm
->
this
.
ªadpos
 <Öm->this.
cuºít
->
d©acou¡
)

3265 
	`≤g_îr‹
(
µ
, "progressiveÑead implementationÉrror");

3266 
	}
}

3269 
≤g_°ru˘p


3270 
	$£t_modifõr_f‹_ªad
(
≤g_modifõr
 *
pm
, 
≤g_öf›p
 
µi
, 
≤g_uöt_32
 
id
,

3271 c⁄° *
«me
)

3277 
pm
->
°©e
 = 
modifõr_°¨t
;

3278 
pm
->
bô_dïth
 = 0;

3279 
pm
->
cﬁour_ty≥
 = 255;

3281 
pm
->
≥ndög_Àn
 = 0;

3282 
pm
->
≥ndög_chunk
 = 0;

3283 
pm
->
Êush
 = 0;

3284 
pm
->
buf„r_cou¡
 = 0;

3285 
pm
->
buf„r_posôi⁄
 = 0;

3287  
	`£t_°‹e_f‹_ªad
(&
pm
->
this
, 
µi
, 
id
, 
«me
);

3288 
	}
}

3296 
	sgama_modifiˇti⁄


3298 
≤g_modifiˇti⁄
 
	mthis
;

3299 
≤g_fixed_poöt
 
	mgamma
;

3300 } 
	tgama_modifiˇti⁄
;

3303 
	$gama_modify
(
≤g_modifõr
 *
pm
, 
≤g_modifiˇti⁄
 *
me
, 
add
)

3305 
	`UNUSED
(
add
)

3307 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
, 4);

3308 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+4, 
CHUNK_gAMA
);

3309 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+8, ((
gama_modifiˇti⁄
*)
me
)->
gamma
);

3311 
	}
}

3314 
	$gama_modifiˇti⁄_öô
(
gama_modifiˇti⁄
 *
me
, 
≤g_modifõr
 *
pm
, 
gammad
)

3316 
g
;

3318 
	`modifiˇti⁄_öô
(&
me
->
this
);

3319 
me
->
this
.
chunk
 = 
CHUNK_gAMA
;

3320 
me
->
this
.
modify_‚
 = 
gama_modify
;

3321 
me
->
this
.
add
 = 
CHUNK_PLTE
;

3322 
g
 = 
	`fix
(
gammad
);

3323 
me
->
gamma
 = (
≤g_fixed_poöt
)
g
;

3324 
me
->
this
.
√xt
 = 
pm
->
modifiˇti⁄s
;

3325 
pm
->
modifiˇti⁄s
 = &
me
->
this
;

3326 
	}
}

3328 
	schrm_modifiˇti⁄


3330 
≤g_modifiˇti⁄
 
	mthis
;

3331 c⁄° 
cﬁ‹_ícodög
 *
	mícodög
;

3332 
≤g_fixed_poöt
 
	mwx
, 
	mwy
, 
	mrx
, 
	mry
, 
	mgx
, 
	mgy
, 
	mbx
, 
	mby
;

3333 } 
	tchrm_modifiˇti⁄
;

3336 
	$chrm_modify
(
≤g_modifõr
 *
pm
, 
≤g_modifiˇti⁄
 *
me
, 
add
)

3338 
	`UNUSED
(
add
)

3340 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
 , 32);

3341 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+ 4, 
CHUNK_cHRM
);

3342 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+ 8, ((
chrm_modifiˇti⁄
*)
me
)->
wx
);

3343 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+12, ((
chrm_modifiˇti⁄
*)
me
)->
wy
);

3344 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+16, ((
chrm_modifiˇti⁄
*)
me
)->
rx
);

3345 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+20, ((
chrm_modifiˇti⁄
*)
me
)->
ry
);

3346 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+24, ((
chrm_modifiˇti⁄
*)
me
)->
gx
);

3347 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+28, ((
chrm_modifiˇti⁄
*)
me
)->
gy
);

3348 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+32, ((
chrm_modifiˇti⁄
*)
me
)->
bx
);

3349 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+36, ((
chrm_modifiˇti⁄
*)
me
)->
by
);

3351 
	}
}

3354 
	$chrm_modifiˇti⁄_öô
(
chrm_modifiˇti⁄
 *
me
, 
≤g_modifõr
 *
pm
,

3355 c⁄° 
cﬁ‹_ícodög
 *
ícodög
)

3357 
CIE_cﬁ‹
 
whôe
 = 
	`whôe_poöt
(
ícodög
);

3360 
me
->
ícodög
 =Éncoding;

3363 
me
->
wx
 = 
	`fix
(
	`chrom©icôy_x
(
whôe
));

3364 
me
->
wy
 = 
	`fix
(
	`chrom©icôy_y
(
whôe
));

3366 
me
->
rx
 = 
	`fix
(
	`chrom©icôy_x
(
ícodög
->
ªd
));

3367 
me
->
ry
 = 
	`fix
(
	`chrom©icôy_y
(
ícodög
->
ªd
));

3368 
me
->
gx
 = 
	`fix
(
	`chrom©icôy_x
(
ícodög
->
gªí
));

3369 
me
->
gy
 = 
	`fix
(
	`chrom©icôy_y
(
ícodög
->
gªí
));

3370 
me
->
bx
 = 
	`fix
(
	`chrom©icôy_x
(
ícodög
->
blue
));

3371 
me
->
by
 = 
	`fix
(
	`chrom©icôy_y
(
ícodög
->
blue
));

3373 
	`modifiˇti⁄_öô
(&
me
->
this
);

3374 
me
->
this
.
chunk
 = 
CHUNK_cHRM
;

3375 
me
->
this
.
modify_‚
 = 
chrm_modify
;

3376 
me
->
this
.
add
 = 
CHUNK_PLTE
;

3377 
me
->
this
.
√xt
 = 
pm
->
modifiˇti⁄s
;

3378 
pm
->
modifiˇti⁄s
 = &
me
->
this
;

3379 
	}
}

3381 
	s§gb_modifiˇti⁄


3383 
≤g_modifiˇti⁄
 
	mthis
;

3384 
≤g_byã
 
	möã¡
;

3385 } 
	t§gb_modifiˇti⁄
;

3388 
	$§gb_modify
(
≤g_modifõr
 *
pm
, 
≤g_modifiˇti⁄
 *
me
, 
add
)

3390 
	`UNUSED
(
add
)

3392 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
, 1);

3393 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+4, 
CHUNK_sRGB
);

3394 
pm
->
buf„r
[8] = ((
§gb_modifiˇti⁄
*)
me
)->
öã¡
;

3396 
	}
}

3399 
	$§gb_modifiˇti⁄_öô
(
§gb_modifiˇti⁄
 *
me
, 
≤g_modifõr
 *
pm
, 
≤g_byã
 
öã¡
)

3401 
	`modifiˇti⁄_öô
(&
me
->
this
);

3402 
me
->
this
.
chunk
 = 
CHUNK_sBIT
;

3404 i‡(
öã¡
 <= 3)

3406 
me
->
this
.
modify_‚
 = 
§gb_modify
;

3407 
me
->
this
.
add
 = 
CHUNK_PLTE
;

3408 
me
->
öã¡
 = intent;

3413 
me
->
this
.
modify_‚
 = 0;

3414 
me
->
this
.
add
 = 0;

3415 
me
->
öã¡
 = 0;

3418 
me
->
this
.
√xt
 = 
pm
->
modifiˇti⁄s
;

3419 
pm
->
modifiˇti⁄s
 = &
me
->
this
;

3420 
	}
}

3422 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3423 
	ssbô_modifiˇti⁄


3425 
≤g_modifiˇti⁄
 
	mthis
;

3426 
≤g_byã
 
	msbô
;

3427 } 
	tsbô_modifiˇti⁄
;

3430 
	$sbô_modify
(
≤g_modifõr
 *
pm
, 
≤g_modifiˇti⁄
 *
me
, 
add
)

3432 
≤g_byã
 
sbô
 = ((
sbô_modifiˇti⁄
*)
me
)->sbit;

3433 i‡(
pm
->
bô_dïth
 > 
sbô
)

3435 
cb
 = 0;

3436 
pm
->
cﬁour_ty≥
)

3439 
cb
 = 1;

3444 
cb
 = 3;

3448 
cb
 = 2;

3452 
cb
 = 4;

3456 
	`≤g_îr‹
(
pm
->
this
.
¥ód
,

3460 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
, 
cb
);

3461 
	`≤g_ßve_uöt_32
(
pm
->
buf„r
+4, 
CHUNK_sBIT
);

3463 
cb
 > 0)

3464 (
pm
->
buf„r
+8)[--
cb
] = 
sbô
;

3468 i‡(!
add
)

3471 
pm
->
buf„r_cou¡
 =Öm->
buf„r_posôi⁄
 = 0;

3476 
	}
}

3479 
	$sbô_modifiˇti⁄_öô
(
sbô_modifiˇti⁄
 *
me
, 
≤g_modifõr
 *
pm
, 
≤g_byã
 
sbô
)

3481 
	`modifiˇti⁄_öô
(&
me
->
this
);

3482 
me
->
this
.
chunk
 = 
CHUNK_sBIT
;

3483 
me
->
this
.
modify_‚
 = 
sbô_modify
;

3484 
me
->
this
.
add
 = 
CHUNK_PLTE
;

3485 
me
->
sbô
 = sbit;

3486 
me
->
this
.
√xt
 = 
pm
->
modifiˇti⁄s
;

3487 
pm
->
modifiˇti⁄s
 = &
me
->
this
;

3488 
	}
}

3545 
°‹e_∑Àâe_íåy
 *

3546 
	$make_°™d¨d_∑Àâe
(
≤g_°‹e
* 
ps
, 
≈Æëã
, 
do_tRNS
)

3548 
≤g_uöt_32
 
∑Àâe_£ed
[2] = { 0x87654321, 9 };

3550 
i
 = 0;

3551 
≤g_byã
 
vÆues
[256][4];

3555 ; 
i
<8; ++i)

3557 
vÆues
[
i
][1] = (
≤g_byã
)((i&1) ? 255U : 0U);

3558 
vÆues
[
i
][2] = (
≤g_byã
)((i&2) ? 255U : 0U);

3559 
vÆues
[
i
][3] = (
≤g_byã
)((i&4) ? 255U : 0U);

3564 
j
 = 0;

3565 
≤g_byã
 
øndom_byãs
[4];

3566 
≤g_byã
 
√ed
[256];

3568 
√ed
[0] = 0;

3569 
	`mem£t
(
√ed
+1, 1, (Çeed)-2);

3570 
√ed
[255] = 0;

3572 
i
<70)

3574 
≤g_byã
 
b
;

3576 i‡(
j
==0)

3578 
	`make_four_øndom_byãs
(
∑Àâe_£ed
, 
øndom_byãs
);

3579 
j
 = 4;

3582 
b
 = 
øndom_byãs
[--
j
];

3583 i‡(
√ed
[
b
])

3585 
vÆues
[
i
][1] = 
b
;

3586 
vÆues
[
i
][2] = 
b
;

3587 
vÆues
[
i
++][3] = 
b
;

3597 ; 
i
<256; ++i)

3598 
	`make_four_øndom_byãs
(
∑Àâe_£ed
, 
vÆues
[
i
]);

3604 
°‹e_∑Àâe_íåy
 *
∑Àâe
;

3605 
≤g_byã
 
£À˘‹
[4];

3607 
	`make_four_øndom_byãs
(
∑Àâe_£ed
, 
£À˘‹
);

3609 i‡(
do_tRNS
)

3610 
i
=0; i<256; ++i)

3611 
vÆues
[
i
][0] = (
≤g_byã
)(ò^ 
£À˘‹
[0]);

3614 
i
=0; i<256; ++i)

3615 
vÆues
[
i
][0] = 255;

3626 
∑Àâe
 = 
	`°‹e_wrôe_∑Àâe
(
ps
, 
≈Æëã
);

3628 
i
=0; i<
≈Æëã
; ++i)

3630 
∑Àâe
[
i
].
Æpha
 = 
vÆues
[ò^ 
£À˘‹
[1]][0];

3631 
∑Àâe
[
i
].
ªd
 = 
vÆues
[ò^ 
£À˘‹
[1]][1];

3632 
∑Àâe
[
i
].
gªí
 = 
vÆues
[ò^ 
£À˘‹
[1]][2];

3633 
∑Àâe
[
i
].
blue
 = 
vÆues
[ò^ 
£À˘‹
[1]][3];

3636  
∑Àâe
;

3638 
	}
}

3645 
	$öô_°™d¨d_∑Àâe
(
≤g_°‹e
 *
ps
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
, 
≈Æëã
,

3646 
do_tRNS
)

3648 
°‹e_∑Àâe_íåy
 *
µÆ
 = 
	`make_°™d¨d_∑Àâe
(
ps
, 
≈Æëã
, 
do_tRNS
);

3651 
i
;

3652 
≤g_cﬁ‹
 
∑Àâe
[256];

3655 
i
=0; i<
≈Æëã
; ++i)

3657 
∑Àâe
[
i
].
ªd
 = 
µÆ
[i].red;

3658 
∑Àâe
[
i
].
gªí
 = 
µÆ
[i].green;

3659 
∑Àâe
[
i
].
blue
 = 
µÆ
[i].blue;

3663 ; 
i
<256; ++i)

3664 
∑Àâe
[
i
].
ªd
 =ÖÆëã[i].
gªí
 =ÖÆëã[i].
blue
 = 42;

3666 
	`≤g_£t_PLTE
(
µ
, 
pi
, 
∑Àâe
, 
≈Æëã
);

3669 i‡(
do_tRNS
)

3671 
i
, 
j
;

3672 
≤g_byã
 
tRNS
[256];

3675 
i
=
j
=0; i<
≈Æëã
; ++i)

3676 i‡((
tRNS
[
i
] = 
µÆ
[i].
Æpha
) < 255)

3677 
j
 = 
i
+1;

3680 ; 
i
<256; ++i)

3681 
tRNS
[
i
] = 24;

3683 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


3684 i‡(
j
 > 0)

3685 
	`≤g_£t_tRNS
(
µ
, 
pi
, 
tRNS
, 
j
, 0 );

3688 
	}
}

3690 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


3692 
	$£t_øndom_tRNS
(
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
, 
≤g_byã
 
cﬁour_ty≥
,

3693 
bô_dïth
)

3700 
≤g_cﬁ‹_16
 
tRNS
;

3701 
≤g_uöt_16
 
mask
 = (≤g_uöt_16)((1U << 
bô_dïth
)-1);

3703 
	`R8
(
tRNS
);

3705 i‡(
cﬁour_ty≥
 & 2 )

3707 i‡(
bô_dïth
 == 8)

3709 
tRNS
.
ªd
 = 
	`øndom_u16
();

3710 
tRNS
.
gªí
 = 
	`øndom_u16
();

3711 
tRNS
.
blue
 =ÅRNS.
ªd
 ^ÅRNS.
gªí
;

3712 
tRNS
.
ªd
 &
mask
;

3713 
tRNS
.
gªí
 &
mask
;

3714 
tRNS
.
blue
 &
mask
;

3719 
tRNS
.
ªd
 = 
	`øndom_u16
();

3720 
tRNS
.
gªí
 = (
≤g_uöt_16
)—RNS.
ªd
 * 257);

3721 
tRNS
.
blue
 = (
≤g_uöt_16
)—RNS.
gªí
 * 17);

3727 
tRNS
.
gøy
 = 
	`øndom_u16
();

3728 
tRNS
.
gøy
 &
mask
;

3731 
	`≤g_£t_tRNS
(
µ
, 
pi
, 
NULL
, 0, &
tRNS
);

3732 
	}
}

3739 
	$≈as£s_‰om_öãæa˚_ty≥
(
≤g_c⁄°_°ru˘p
 
µ
, 
öãæa˚_ty≥
)

3741 
öãæa˚_ty≥
)

3744 
	`≤g_îr‹
(
µ
, "invalid interlaceÅype");

3746 
PNG_INTERLACE_NONE
:

3749 
PNG_INTERLACE_ADAM7
:

3750  
PNG_INTERLACE_ADAM7_PASSES
;

3752 
	}
}

3755 
	$bô_size
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

3757 
cﬁour_ty≥
)

3759 : 
	`≤g_îr‹
(
µ
, "invalid colorÅype");

3761 0:  
bô_dïth
;

3763 2:  3*
bô_dïth
;

3765 3:  
bô_dïth
;

3767 4:  2*
bô_dïth
;

3769 6:  4*
bô_dïth
;

3771 
	}
}

3773 
	#TRANSFORM_WIDTH
 128U

	)

3774 
	#TRANSFORM_ROWMAX
 (
TRANSFORM_WIDTH
*8U)

	)

3775 
	#SIZE_ROWMAX
 (16*8UË

	)

3776 
	#STANDARD_ROWMAX
 
TRANSFORM_ROWMAX


	)

3777 
	#SIZE_HEIGHTMAX
 16

	)

3779 
size_t


3780 
	$å™sf‹m_rowsize
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_byã
 
cﬁour_ty≥
,

3781 
≤g_byã
 
bô_dïth
)

3783  (
TRANSFORM_WIDTH
 * 
	`bô_size
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
)) / 8;

3784 
	}
}

3789 
	#å™sf‹m_width
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
Ë
TRANSFORM_WIDTH


	)

3791 
≤g_uöt_32


3792 
	$å™sf‹m_height
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

3794 
	`bô_size
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
))

3814 
	#TRANSFORM_HEIGHTMAX
 2048

	)

3819 
	}
}

3821 #ifde‡
PNG_READ_SUPPORTED


3825 
≤g_uöt_32


3826 
	$°™d¨d_width
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_uöt_32
 
id
)

3828 
≤g_uöt_32
 
width
 = 
	`WIDTH_FROM_ID
(
id
);

3829 
	`UNUSED
(
µ
)

3831 i‡(
width
 == 0)

3832 
width
 = 
	`å™sf‹m_width
(
µ
, 
	`COL_FROM_ID
(
id
), 
	`DEPTH_FROM_ID
(id));

3834  
width
;

3835 
	}
}

3837 
≤g_uöt_32


3838 
	$°™d¨d_height
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_uöt_32
 
id
)

3840 
≤g_uöt_32
 
height
 = 
	`HEIGHT_FROM_ID
(
id
);

3842 i‡(
height
 == 0)

3843 
height
 = 
	`å™sf‹m_height
(
µ
, 
	`COL_FROM_ID
(
id
), 
	`DEPTH_FROM_ID
(id));

3845  
height
;

3846 
	}
}

3848 
≤g_uöt_32


3849 
	$°™d¨d_rowsize
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_uöt_32
 
id
)

3851 
≤g_uöt_32
 
width
 = 
	`°™d¨d_width
(
µ
, 
id
);

3854 
width
 *
	`bô_size
(
µ
, 
	`COL_FROM_ID
(
id
), 
	`DEPTH_FROM_ID
(id));

3855  (
width
 + 7) / 8;

3856 
	}
}

3860 
	$å™sf‹m_row
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_byã
 
buf„r
[
TRANSFORM_ROWMAX
],

3861 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
, 
≤g_uöt_32
 
y
)

3863 
≤g_uöt_32
 
v
 = 
y
 << 7;

3864 
≤g_uöt_32
 
i
 = 0;

3866 
	`bô_size
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
))

3869 
i
<128/8Ë
buf„r
[i] = (
≤g_byã
)(
v
 & 0xff), v += 17, ++i;

3873 
i
<128/4Ë
buf„r
[i] = (
≤g_byã
)(
v
 & 0xff), v += 33, ++i;

3877 
i
<128/2Ë
buf„r
[i] = (
≤g_byã
)(
v
 & 0xff), v += 65, ++i;

3882 
i
<128Ë
buf„r
[i] = (
≤g_byã
)(
v
 & 0xff), ++v, ++i;

3889 
i
<128)

3891 
buf„r
[2*
i
] = (
≤g_byã
)((
v
>>8) & 0xff);

3892 
buf„r
[2*
i
+1] = (
≤g_byã
)(
v
 & 0xff);

3893 ++
v
;

3894 ++
i
;

3901 
i
<128)

3904 
buf„r
[3*
i
+0] = (
≤g_byã
)((
v
 >> 8) & 0xff);

3905 
buf„r
[3*
i
+1] = (
≤g_byã
)(
v
 & 0xff);

3906 
buf„r
[3*
i
+2] = (
≤g_byã
)(((
v
 >> 8) ^ v) & 0xff);

3907 ++
v
;

3908 ++
i
;

3915 
i
<128)

3917 
buf„r
[4*
i
+0] = (
≤g_byã
)((
v
 >> 8) & 0xff);

3918 
buf„r
[4*
i
+1] = (
≤g_byã
)(
v
 & 0xff);

3919 
buf„r
[4*
i
+2] = (
≤g_byã
)((
v
 >> 8) & 0xff);

3920 
buf„r
[4*
i
+3] = (
≤g_byã
)(
v
 & 0xff);

3921 ++
v
;

3922 ++
i
;

3931 
i
<128)

3933 
≤g_uöt_32
 
t
 = 
v
++;

3934 
buf„r
[6*
i
+0] = (
≤g_byã
)((
t
 >> 8) & 0xff);

3935 
buf„r
[6*
i
+1] = (
≤g_byã
)(
t
 & 0xff);

3936 
t
 *= 257;

3937 
buf„r
[6*
i
+2] = (
≤g_byã
)((
t
 >> 8) & 0xff);

3938 
buf„r
[6*
i
+3] = (
≤g_byã
)(
t
 & 0xff);

3939 
t
 *= 17;

3940 
buf„r
[6*
i
+4] = (
≤g_byã
)((
t
 >> 8) & 0xff);

3941 
buf„r
[6*
i
+5] = (
≤g_byã
)(
t
 & 0xff);

3942 ++
i
;

3949 
i
<128)

3951 
≤g_uöt_32
 
t
 = 
v
++;

3952 
buf„r
[8*
i
+0] = (
≤g_byã
)((
t
 >> 8) & 0xff);

3953 
buf„r
[8*
i
+1] = (
≤g_byã
)(
t
 & 0xff);

3954 
buf„r
[8*
i
+4] = (
≤g_byã
)((
t
 >> 8) & 0xff);

3955 
buf„r
[8*
i
+5] = (
≤g_byã
)(
t
 & 0xff);

3956 
t
 *= 257;

3957 
buf„r
[8*
i
+2] = (
≤g_byã
)((
t
 >> 8) & 0xff);

3958 
buf„r
[8*
i
+3] = (
≤g_byã
)(
t
 & 0xff);

3959 
buf„r
[8*
i
+6] = (
≤g_byã
)((
t
 >> 8) & 0xff);

3960 
buf„r
[8*
i
+7] = (
≤g_byã
)(
t
 & 0xff);

3961 ++
i
;

3969 
	`≤g_îr‹
(
µ
, "internalÉrror");

3970 
	}
}

3975 
	#DEPTH
(
bd
Ë((
≤g_byã
)(1U << (bd)))

	)

3981 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


3982 
	#INTERLACE_LAST
 
PNG_INTERLACE_LAST


	)

3983 
	#check_öãæa˚_ty≥
(
ty≥
Ë(()—y≥))

	)

3984 
	#£t_wrôe_öãæa˚_h™dlög
(
µ
,
ty≥
Ë
	`≤g_£t_öãæa˚_h™dlög
’p)

	)

3985 
	#do_own_öãæa˚
 0

	)

3986 #ñi‡
PNG_LIBPNG_VER
 < 10700

3987 
	#£t_wrôe_öãæa˚_h™dlög
(
µ
,
ty≥
Ë(1)

	)

3989 
	$check_öãæa˚_ty≥
(c⁄° 
öãæa˚_ty≥
)

3995 i‡(
öãæa˚_ty≥
 !
PNG_INTERLACE_NONE
)

4000 
	`Ârötf
(
°dîr
, "pngvalid:Ço interlace support\n");

4001 
	`exô
(99);

4003 
	}
}

4004 
	#INTERLACE_LAST
 (
PNG_INTERLACE_NONE
+1)

	)

4005 
	#do_own_öãæa˚
 0

	)

4007 
	#£t_wrôe_öãæa˚_h™dlög
(
µ
,
ty≥
)\

4008 
	`≈as£s_‰om_öãæa˚_ty≥
(
µ
,
ty≥
)

	)

4009 
	#check_öãæa˚_ty≥
(
ty≥
Ë(()—y≥))

	)

4010 
	#INTERLACE_LAST
 
PNG_INTERLACE_LAST


	)

4011 
	#do_own_öãæa˚
 1

	)

4014 #i‡
PNG_LIBPNG_VER
 >10700 || 
deföed
 
PNG_WRITE_INTERLACING_SUPPORTED


4015 
	#CAN_WRITE_INTERLACE
 1

	)

4017 
	#CAN_WRITE_INTERLACE
 0

	)

4023 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


4024 
	#do_ªad_öãæa˚
 0

	)

4026 
	#do_ªad_öãæa˚
 1

	)

4032 
	$öãæa˚_row
(
≤g_byãp
 
buf„r
, 
≤g_c⁄°_byãp
 
imageRow
,

4033 
pixñ_size
, 
≤g_uöt_32
 
w
, 
∑ss
, 
lôéìndün
)

4035 
≤g_uöt_32
 
xö
, 
xout
, 
x°ï
;

4044 
xö
 = 
	`PNG_PASS_START_COL
(
∑ss
);

4045 
x°ï
 = 1U<<
	`PNG_PASS_COL_SHIFT
(
∑ss
);

4047 
xout
=0; 
xö
<
w
; xö+=
x°ï
)

4049 
	`pixñ_c›y
(
buf„r
, 
xout
, 
imageRow
, 
xö
, 
pixñ_size
, 
lôéìndün
);

4050 ++
xout
;

4052 
	}
}

4054 #ifde‡
PNG_READ_SUPPORTED


4056 
	$deöãæa˚_row
(
≤g_byãp
 
buf„r
, 
≤g_c⁄°_byãp
 
row
,

4057 
pixñ_size
, 
≤g_uöt_32
 
w
, 
∑ss
, 
lôéìndün
)

4064 
≤g_uöt_32
 
xö
, 
xout
, 
x°ï
;

4066 
xout
 = 
	`PNG_PASS_START_COL
(
∑ss
);

4067 
x°ï
 = 1U<<
	`PNG_PASS_COL_SHIFT
(
∑ss
);

4069 
xö
=0; 
xout
<
w
; xout+=
x°ï
)

4071 
	`pixñ_c›y
(
buf„r
, 
xout
, 
row
, 
xö
, 
pixñ_size
, 
lôéìndün
);

4072 ++
xö
;

4074 
	}
}

4083 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


4085 
	$choo£_øndom_fûãr
(
≤g_°ru˘p
 
µ
, 
°¨t
)

4090 
fûãrs
 = 
PNG_ALL_FILTERS
 & 
	`øndom_mod
(256U);

4093 i‡(
fûãrs
 != 0)

4095 i‡(
°¨t
 && 
fûãrs
 < 
PNG_FILTER_UP
)

4096 
fûãrs
 |
PNG_FILTER_UP
;

4098 
	`≤g_£t_fûãr
(
µ
, 0 , 
fûãrs
);

4100 
	}
}

4102 
	#choo£_øndom_fûãr
(
µ
, 
°¨t
Ë(()0)

	)

4106 
	$make_å™sf‹m_image
(
≤g_°‹e
* c⁄° 
ps
, 
≤g_byã
 c⁄° 
cﬁour_ty≥
,

4107 
≤g_byã
 c⁄° 
bô_dïth
, 
∑Àâe_numbî
,

4108 
öãæa˚_ty≥
, 
≤g_c⁄°_ch¨p
 
«me
)

4110 
	`c⁄ãxt
(
ps
, 
Áu…
);

4112 
	`check_öãæa˚_ty≥
(
öãæa˚_ty≥
);

4114 
Try


4116 
≤g_öf›
 
pi
;

4117 
≤g_°ru˘p
 
µ
 = 
	`£t_°‹e_f‹_wrôe
(
ps
, &
pi
, 
«me
);

4118 
≤g_uöt_32
 
h
, 
w
;

4124 i‡(
µ
 =
NULL
)

4125 
Throw
 
ps
;

4127 
w
 = 
	`å™sf‹m_width
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
);

4128 
h
 = 
	`å™sf‹m_height
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
);

4130 
	`≤g_£t_IHDR
(
µ
, 
pi
, 
w
, 
h
, 
bô_dïth
, 
cﬁour_ty≥
, 
öãæa˚_ty≥
,

4131 
PNG_COMPRESSION_TYPE_BASE
, 
PNG_FILTER_TYPE_BASE
);

4133 #ifde‡
PNG_TEXT_SUPPORTED


4134 #i‡
	`deföed
(
PNG_READ_zTXt_SUPPORTED
Ë&& deföed(
PNG_WRITE_zTXt_SUPPORTED
)

4135 
	#TEXT_COMPRESSION
 
PNG_TEXT_COMPRESSION_zTXt


	)

4137 
	#TEXT_COMPRESSION
 
PNG_TEXT_COMPRESSION_NONE


	)

4140 
key
[] = "imageÇame";

4141 
size_t
 
pos
;

4142 
≤g_ãxt
 
ãxt
;

4143 
c›y
[
FILE_NAME_SIZE
];

4148 
ãxt
.
com¥essi⁄
 = 
TEXT_COMPRESSION
;

4149 
ãxt
.
key
 = key;

4151 
pos
 = 
	`ß„ˇt
(
c›y
,  c›y, 0, 
ps
->
w«me
);

4152 
ãxt
.ãxà
c›y
;

4153 
ãxt
.
ãxt_Àngth
 = 
pos
;

4154 
ãxt
.
ôxt_Àngth
 = 0;

4155 
ãxt
.
œng
 = 0;

4156 
ãxt
.
œng_key
 = 0;

4158 
	`≤g_£t_ãxt
(
µ
, 
pi
, &
ãxt
, 1);

4162 i‡(
cﬁour_ty≥
 == 3)

4163 
	`öô_°™d¨d_∑Àâe
(
ps
, 
µ
, 
pi
, 1U << 
bô_dïth
, 1 );

4165 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


4166 i‡(
∑Àâe_numbî
)

4167 
	`£t_øndom_tRNS
(
µ
, 
pi
, 
cﬁour_ty≥
, 
bô_dïth
);

4170 
	`≤g_wrôe_öfo
(
µ
, 
pi
);

4172 i‡(
	`≤g_gë_rowbyãs
(
µ
, 
pi
) !=

4173 
	`å™sf‹m_rowsize
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
))

4174 
	`≤g_îr‹
(
µ
, "transformÑow size incorrect");

4182 
≈as£s
 = 
	`£t_wrôe_öãæa˚_h™dlög
(
µ
, 
öãæa˚_ty≥
);

4183 
∑ss
;

4185 i‡(
≈as£s
 !
	`≈as£s_‰om_öãæa˚_ty≥
(
µ
, 
öãæa˚_ty≥
))

4186 
	`≤g_îr‹
(
µ
, "write:Öng_set_interlace_handling failed");

4188 
∑ss
=0;Öass<
≈as£s
; ++pass)

4190 
≤g_uöt_32
 
y
;

4195 
y
=0; y<
h
; ++y)

4197 
≤g_byã
 
buf„r
[
TRANSFORM_ROWMAX
];

4199 
	`å™sf‹m_row
(
µ
, 
buf„r
, 
cﬁour_ty≥
, 
bô_dïth
, 
y
);

4201 #i‡
do_own_öãæa˚


4205 i‡(
öãæa˚_ty≥
 =
PNG_INTERLACE_ADAM7
)

4213 i‡(
	`PNG_ROW_IN_INTERLACE_PASS
(
y
, 
∑ss
) &&

4214 
	`PNG_PASS_COLS
(
w
, 
∑ss
) > 0)

4215 
	`öãæa˚_row
(
buf„r
, buffer,

4216 
	`bô_size
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
), 
w
, 
∑ss
,

4223 
	`choo£_øndom_fûãr
(
µ
, 
∑ss
 =0 && 
y
 == 0);

4224 
	`≤g_wrôe_row
(
µ
, 
buf„r
);

4229 #ifde‡
PNG_TEXT_SUPPORTED


4231 
key
[] = "end marker";

4232 
commít
[] = "end";

4233 
≤g_ãxt
 
ãxt
;

4238 
ãxt
.
com¥essi⁄
 = 
TEXT_COMPRESSION
;

4239 
ãxt
.
key
 = key;

4240 
ãxt
.ãxà
commít
;

4241 
ãxt
.
ãxt_Àngth
 = ( 
commít
)-1;

4242 
ãxt
.
ôxt_Àngth
 = 0;

4243 
ãxt
.
œng
 = 0;

4244 
ãxt
.
œng_key
 = 0;

4246 
	`≤g_£t_ãxt
(
µ
, 
pi
, &
ãxt
, 1);

4250 
	`≤g_wrôe_íd
(
µ
, 
pi
);

4253 
	`°‹e_°‹efûe
(
ps
, 
	`FILEID
(
cﬁour_ty≥
, 
bô_dïth
, 
∑Àâe_numbî
,

4254 
öãæa˚_ty≥
, 0, 0, 0));

4256 
	`°‹e_wrôe_ª£t
(
ps
);

4259 
	`C©ch
(
Áu…
)

4265 
	`°‹e_wrôe_ª£t
(
Áu…
);

4267 
	}
}

4270 
	$make_å™sf‹m_images
(
≤g_modifõr
 *
pm
)

4272 
≤g_byã
 
cﬁour_ty≥
 = 0;

4273 
≤g_byã
 
bô_dïth
 = 0;

4274 
∑Àâe_numbî
 = 0;

4277 
	`ß„ˇt
(
pm
->
this
.
ã°
, Öm->this.test, 0, "make standard images");

4283 
	`√xt_f‹m©
(&
cﬁour_ty≥
, &
bô_dïth
, &
∑Àâe_numbî
, 1, 1))

4285 
öãæa˚_ty≥
;

4287 
öãæa˚_ty≥
 = 
PNG_INTERLACE_NONE
;

4288 
öãæa˚_ty≥
 < 
INTERLACE_LAST
; ++interlace_type)

4290 
«me
[
FILE_NAME_SIZE
];

4292 
	`°™d¨d_«me
(
«me
, Çame, 0, 
cﬁour_ty≥
, 
bô_dïth
,

4293 
∑Àâe_numbî
, 
öãæa˚_ty≥
, 0, 0, 
do_own_öãæa˚
);

4294 
	`make_å™sf‹m_image
(&
pm
->
this
, 
cﬁour_ty≥
, 
bô_dïth
, 
∑Àâe_numbî
,

4295 
öãæa˚_ty≥
, 
«me
);

4298 
	}
}

4304 
	$size_row
(
≤g_byã
 
buf„r
[
SIZE_ROWMAX
], 
≤g_uöt_32
 
bô_width
,Öng_uöt_32 
y
)

4307 
y
 = ((y & 1) << 7) + ((y & 2) << 6) + ((y & 4) << 5) + ((y & 8) << 4);

4309 
y
 ^= 0xA5;

4311 
bô_width
 >= 8)

4312 *
buf„r
++ = (
≤g_byã
)
y
++, 
bô_width
 -= 8;

4317 i‡(
bô_width
 > 0)

4319 
≤g_uöt_32
 
mask
 = (1U<<(8-
bô_width
))-1;

4320 *
buf„r
 = (
≤g_byã
)((*buf„∏& 
mask
Ë| (
y
 & ~mask));

4322 
	}
}

4325 
	$make_size_image
(
≤g_°‹e
* c⁄° 
ps
, 
≤g_byã
 c⁄° 
cﬁour_ty≥
,

4326 
≤g_byã
 c⁄° 
bô_dïth
, c⁄° 
öãæa˚_ty≥
,

4327 
≤g_uöt_32
 c⁄° 
w
,Öng_uöt_32 c⁄° 
h
,

4328 c⁄° 
do_öãæa˚
)

4330 
	`c⁄ãxt
(
ps
, 
Áu…
);

4332 
	`check_öãæa˚_ty≥
(
öãæa˚_ty≥
);

4334 
Try


4336 
≤g_öf›
 
pi
;

4337 
≤g_°ru˘p
 
µ
;

4338 
pixñ_size
;

4341 
«me
[
FILE_NAME_SIZE
];

4342 
≤g_uöt_32
 
id
 = 
	`FILEID
(
cﬁour_ty≥
, 
bô_dïth
, 0 ,

4343 
öãæa˚_ty≥
, 
w
, 
h
, 
do_öãæa˚
);

4345 
	`°™d¨d_«me_‰om_id
(
«me
, Çame, 0, 
id
);

4346 
µ
 = 
	`£t_°‹e_f‹_wrôe
(
ps
, &
pi
, 
«me
);

4352 i‡(
µ
 =
NULL
)

4353 
Throw
 
ps
;

4355 
	`≤g_£t_IHDR
(
µ
, 
pi
, 
w
, 
h
, 
bô_dïth
, 
cﬁour_ty≥
, 
öãæa˚_ty≥
,

4356 
PNG_COMPRESSION_TYPE_BASE
, 
PNG_FILTER_TYPE_BASE
);

4358 #ifde‡
PNG_TEXT_SUPPORTED


4360 
key
[] = "imageÇame";

4361 
size_t
 
pos
;

4362 
≤g_ãxt
 
ãxt
;

4363 
c›y
[
FILE_NAME_SIZE
];

4368 
ãxt
.
com¥essi⁄
 = 
TEXT_COMPRESSION
;

4369 
ãxt
.
key
 = key;

4371 
pos
 = 
	`ß„ˇt
(
c›y
,  c›y, 0, 
ps
->
w«me
);

4372 
ãxt
.ãxà
c›y
;

4373 
ãxt
.
ãxt_Àngth
 = 
pos
;

4374 
ãxt
.
ôxt_Àngth
 = 0;

4375 
ãxt
.
œng
 = 0;

4376 
ãxt
.
œng_key
 = 0;

4378 
	`≤g_£t_ãxt
(
µ
, 
pi
, &
ãxt
, 1);

4382 i‡(
cﬁour_ty≥
 == 3)

4383 
	`öô_°™d¨d_∑Àâe
(
ps
, 
µ
, 
pi
, 1U << 
bô_dïth
, 0 );

4385 
	`≤g_wrôe_öfo
(
µ
, 
pi
);

4391 
pixñ_size
 = 
	`bô_size
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
);

4392 i‡(
	`≤g_gë_rowbyãs
(
µ
, 
pi
Ë!((
w
 * 
pixñ_size
) + 7) / 8)

4393 
	`≤g_îr‹
(
µ
, "sizeÑow size incorrect");

4397 
≈as£s
 = 
	`≈as£s_‰om_öãæa˚_ty≥
(
µ
, 
öãæa˚_ty≥
);

4398 
≤g_uöt_32
 
y
;

4399 
∑ss
;

4400 
≤g_byã
 
image
[16][
SIZE_ROWMAX
];

4405 
	`mem£t
(
image
, 0xff,  image);

4407 i‡(!
do_öãæa˚
 &&

4408 
≈as£s
 !
	`£t_wrôe_öãæa˚_h™dlög
(
µ
, 
öãæa˚_ty≥
))

4409 
	`≤g_îr‹
(
µ
, "write:Öng_set_interlace_handling failed");

4412 
y
=0; y<
h
; ++y)

4413 
	`size_row
(
image
[
y
], 
w
 * 
pixñ_size
, y);

4415 
∑ss
=0;Öass<
≈as£s
; ++pass)

4418 
≤g_uöt_32
 
wPass
 = 
	`PNG_PASS_COLS
(
w
, 
∑ss
);

4424 
y
=0; y<
h
; ++y)

4426 
≤g_c⁄°_byãp
 
row
 = 
image
[
y
];

4427 
≤g_byã
 
ãmpRow
[
SIZE_ROWMAX
];

4433 i‡(
do_öãæa˚
 && 
öãæa˚_ty≥
 =
PNG_INTERLACE_ADAM7
)

4441 i‡(
	`PNG_ROW_IN_INTERLACE_PASS
(
y
, 
∑ss
Ë&& 
wPass
 > 0)

4446 
	`mem£t
(
ãmpRow
, 0xff, ÅempRow);

4447 
	`öãæa˚_row
(
ãmpRow
, 
row
, 
pixñ_size
, 
w
, 
∑ss
,

4449 
row
 = 
ãmpRow
;

4455 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


4467 
fûãrs
 = 8 << 
	`øndom_mod
(
PNG_FILTER_VALUE_LAST
);

4469 i‡(
∑ss
 =0 && 
y
 == 0 &&

4470 (
fûãrs
 < 
PNG_FILTER_UP
 || 
w
 == 1U))

4471 
fûãrs
 |
PNG_FILTER_UP
;

4473 
	`≤g_£t_fûãr
(
µ
, 0 , 
fûãrs
);

4477 
	`≤g_wrôe_row
(
µ
, 
row
);

4482 #ifde‡
PNG_TEXT_SUPPORTED


4484 
key
[] = "end marker";

4485 
commít
[] = "end";

4486 
≤g_ãxt
 
ãxt
;

4491 
ãxt
.
com¥essi⁄
 = 
TEXT_COMPRESSION
;

4492 
ãxt
.
key
 = key;

4493 
ãxt
.ãxà
commít
;

4494 
ãxt
.
ãxt_Àngth
 = ( 
commít
)-1;

4495 
ãxt
.
ôxt_Àngth
 = 0;

4496 
ãxt
.
œng
 = 0;

4497 
ãxt
.
œng_key
 = 0;

4499 
	`≤g_£t_ãxt
(
µ
, 
pi
, &
ãxt
, 1);

4503 
	`≤g_wrôe_íd
(
µ
, 
pi
);

4506 
	`°‹e_°‹efûe
(
ps
, 
id
);

4508 
	`°‹e_wrôe_ª£t
(
ps
);

4511 
	`C©ch
(
Áu…
)

4517 
	`°‹e_wrôe_ª£t
(
Áu…
);

4519 
	}
}

4522 
	$make_size
(
≤g_°‹e
* c⁄° 
ps
, 
≤g_byã
 c⁄° 
cﬁour_ty≥
, 
bdlo
,

4523 c⁄° 
bdhi
)

4525 ; 
bdlo
 <
bdhi
; ++bdlo)

4527 
≤g_uöt_32
 
width
;

4529 
width
 = 1; width <= 16; ++width)

4531 
≤g_uöt_32
 
height
;

4533 
height
 = 1; height <= 16; ++height)

4539 
	`make_size_image
(
ps
, 
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
), 
PNG_INTERLACE_NONE
,

4540 
width
, 
height
, 0);

4541 
	`make_size_image
(
ps
, 
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
), 
PNG_INTERLACE_NONE
,

4542 
width
, 
height
, 1);

4543 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


4544 
	`make_size_image
(
ps
, 
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
), 
PNG_INTERLACE_ADAM7
,

4545 
width
, 
height
, 0);

4547 #i‡
CAN_WRITE_INTERLACE


4551 
	`make_size_image
(
ps
, 
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
), 
PNG_INTERLACE_ADAM7
,

4552 
width
, 
height
, 1);

4557 
	}
}

4560 
	$make_size_images
(
≤g_°‹e
 *
ps
)

4563 
	`ß„ˇt
(
ps
->
ã°
, Ös->test, 0, "make size images");

4567 
	`make_size
(
ps
, 0, 0, 
WRITE_BDHI
);

4568 
	`make_size
(
ps
, 2, 3, 
WRITE_BDHI
);

4569 
	`make_size
(
ps
, 3, 0, 3 );

4570 
	`make_size
(
ps
, 4, 3, 
WRITE_BDHI
);

4571 
	`make_size
(
ps
, 6, 3, 
WRITE_BDHI
);

4572 
	}
}

4574 #ifde‡
PNG_READ_SUPPORTED


4577 
	$°™d¨d_row
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_byã
 
°d
[
STANDARD_ROWMAX
],

4578 
≤g_uöt_32
 
id
,Öng_uöt_32 
y
)

4580 i‡(
	`WIDTH_FROM_ID
(
id
) == 0)

4581 
	`å™sf‹m_row
(
µ
, 
°d
, 
	`COL_FROM_ID
(
id
), 
	`DEPTH_FROM_ID
(id), 
y
);

4583 
	`size_row
(
°d
, 
	`WIDTH_FROM_ID
(
id
Ë* 
	`bô_size
(
µ
, 
	`COL_FROM_ID
(id),

4584 
	`DEPTH_FROM_ID
(
id
)), 
y
);

4585 
	}
}

4596 #ifde‡
PNG_WARNINGS_SUPPORTED


4598 
	$sBIT0_îr‹_‚
(
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

4601 
≤g_cﬁ‹_8
 
bad
;

4602 
bad
.
ªd
 = bad.
gªí
 = bad.
blue
 = bad.
gøy
 = bad.
Æpha
 = 0;

4603 
	`≤g_£t_sBIT
(
µ
, 
pi
, &
bad
);

4604 
	}
}

4607 
	$sBIT_îr‹_‚
(
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

4609 
≤g_byã
 
bô_dïth
;

4610 
≤g_cﬁ‹_8
 
bad
;

4612 i‡(
	`≤g_gë_cﬁ‹_ty≥
(
µ
, 
pi
Ë=
PNG_COLOR_TYPE_PALETTE
)

4613 
bô_dïth
 = 8;

4616 
bô_dïth
 = 
	`≤g_gë_bô_dïth
(
µ
, 
pi
);

4619 
bad
.
ªd
 = bad.
gªí
 = bad.
blue
 = bad.
gøy
 = bad.
Æpha
 =

4620 (
≤g_byã
)(
bô_dïth
+1);

4621 
	`≤g_£t_sBIT
(
µ
, 
pi
, &
bad
);

4622 
	}
}

4626 (*
	m‚
)(
	m≤g_°ru˘p
, 
	m≤g_öf›
);

4627 c⁄° *
	mmsg
;

4628 
	mw¨nög
 :1;

4629 } 
	gîr‹_ã°
[] =

4632 { 
sBIT0_îr‹_‚
, "sBIT(0): failedÅo detectÉrror",

4633 
PNG_LIBPNG_VER
 < 10700 },

4635 { 
sBIT_îr‹_‚
, "sBIT(too big): failedÅo detectÉrror",

4636 
PNG_LIBPNG_VER
 < 10700 },

4640 
	$make_îr‹
(
≤g_°‹e
* c⁄° 
ps
, 
≤g_byã
 c⁄° 
cﬁour_ty≥
,

4641 
≤g_byã
 
bô_dïth
, 
öãæa˚_ty≥
, 
ã°
, 
≤g_c⁄°_ch¨p
 
«me
)

4643 
	`c⁄ãxt
(
ps
, 
Áu…
);

4645 
	`check_öãæa˚_ty≥
(
öãæa˚_ty≥
);

4647 
Try


4649 
≤g_öf›
 
pi
;

4650 
≤g_°ru˘p
 
µ
 = 
	`£t_°‹e_f‹_wrôe
(
ps
, &
pi
, 
«me
);

4651 
≤g_uöt_32
 
w
, 
h
;

4652 
	`gnu_vﬁ©ûe
(
µ
)

4654 i‡(
µ
 =
NULL
)

4655 
Throw
 
ps
;

4657 
w
 = 
	`å™sf‹m_width
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
);

4658 
	`gnu_vﬁ©ûe
(
w
)

4659 
h
 = 
	`å™sf‹m_height
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
);

4660 
	`gnu_vﬁ©ûe
(
h
)

4661 
	`≤g_£t_IHDR
(
µ
, 
pi
, 
w
, 
h
, 
bô_dïth
, 
cﬁour_ty≥
, 
öãæa˚_ty≥
,

4662 
PNG_COMPRESSION_TYPE_BASE
, 
PNG_FILTER_TYPE_BASE
);

4664 i‡(
cﬁour_ty≥
 == 3)

4665 
	`öô_°™d¨d_∑Àâe
(
ps
, 
µ
, 
pi
, 1U << 
bô_dïth
, 0 );

4670 
	#ex˚±i⁄__¥ev
 
ex˚±i⁄_¥ev_1


	)

4671 
	#ex˚±i⁄__ív
 
ex˚±i⁄_ív_1


	)

4672 
Try


4674 
	`gnu_vﬁ©ûe
(
ex˚±i⁄__¥ev
)

4677 
ps
->
ex≥˘_îr‹
 = !
îr‹_ã°
[
ã°
].
w¨nög
;

4678 
ps
->
ex≥˘_w¨nög
 = 
îr‹_ã°
[
ã°
].
w¨nög
;

4679 
ps
->
ßw_w¨nög
 = 0;

4680 
îr‹_ã°
[
ã°
].
	`‚
(
µ
, 
pi
);

4683 
	`≤g_wrôe_öfo
(
µ
, 
pi
);

4686 i‡(
ps
->
ex≥˘_w¨nög
 &&Ös->
ßw_w¨nög
)

4687 
Throw
 
ps
;

4692 
	`°‹e_log
(
ps
, 
µ
, 
îr‹_ã°
[
ã°
].
msg
, 1 );

4695 
	`C©ch
 (
Áu…
)

4698 #unde‡
ex˚±i⁄__¥ev


4699 #unde‡
ex˚±i⁄__ív


4702 
ps
->
ex≥˘_w¨nög
 = 0;

4704 i‡(
ps
->
ex≥˘_îr‹
)

4705 
ps
->
ex≥˘_îr‹
 = 0;

4714 i‡(
	`≤g_gë_rowbyãs
(
µ
, 
pi
) !=

4715 
	`å™sf‹m_rowsize
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
))

4716 
	`≤g_îr‹
(
µ
, "row size incorrect");

4720 
≈as£s
 = 
	`£t_wrôe_öãæa˚_h™dlög
(
µ
, 
öãæa˚_ty≥
);

4721 
∑ss
;

4723 i‡(
≈as£s
 !
	`≈as£s_‰om_öãæa˚_ty≥
(
µ
, 
öãæa˚_ty≥
))

4724 
	`≤g_îr‹
(
µ
, "write:Öng_set_interlace_handling failed");

4726 
∑ss
=0;Öass<
≈as£s
; ++pass)

4728 
≤g_uöt_32
 
y
;

4730 
y
=0; y<
h
; ++y)

4732 
≤g_byã
 
buf„r
[
TRANSFORM_ROWMAX
];

4734 
	`å™sf‹m_row
(
µ
, 
buf„r
, 
cﬁour_ty≥
, 
bô_dïth
, 
y
);

4736 #i‡
do_own_öãæa˚


4741 i‡(
öãæa˚_ty≥
 =
PNG_INTERLACE_ADAM7
)

4750 i‡(
	`PNG_ROW_IN_INTERLACE_PASS
(
y
, 
∑ss
) &&

4751 
	`PNG_PASS_COLS
(
w
, 
∑ss
) > 0)

4752 
	`öãæa˚_row
(
buf„r
, buffer,

4753 
	`bô_size
(
µ
, 
cﬁour_ty≥
, 
bô_dïth
), 
w
, 
∑ss
,

4760 
	`≤g_wrôe_row
(
µ
, 
buf„r
);

4765 
	`≤g_wrôe_íd
(
µ
, 
pi
);

4769 
	`°‹e_wrôe_ª£t
(
ps
);

4772 
	`C©ch
(
Áu…
)

4774 
	`°‹e_wrôe_ª£t
(
Áu…
);

4776 
	}
}

4779 
	$make_îr‹s
(
≤g_modifõr
* c⁄° 
pm
, 
≤g_byã
 c⁄° 
cﬁour_ty≥
,

4780 
bdlo
, c⁄° 
bdhi
)

4782 ; 
bdlo
 <
bdhi
; ++bdlo)

4784 
öãæa˚_ty≥
;

4786 
öãæa˚_ty≥
 = 
PNG_INTERLACE_NONE
;

4787 
öãæa˚_ty≥
 < 
INTERLACE_LAST
; ++interlace_type)

4789 
ã°
;

4790 
«me
[
FILE_NAME_SIZE
];

4792 
	`°™d¨d_«me
(
«me
, Çame, 0, 
cﬁour_ty≥
, 1<<
bdlo
, 0,

4793 
öãæa˚_ty≥
, 0, 0, 
do_own_öãæa˚
);

4795 
ã°
=0;Åe°<
	`ARRAY_SIZE
(
îr‹_ã°
); ++test)

4797 
	`make_îr‹
(&
pm
->
this
, 
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
), 
öãæa˚_ty≥
,

4798 
ã°
, 
«me
);

4800 i‡(
	`Áû
(
pm
))

4807 
	}
}

4811 
	$≥rf‹m_îr‹_ã°
(
≤g_modifõr
 *
pm
)

4813 #ifde‡
PNG_WARNINGS_SUPPORTED


4815 
	`ß„ˇt
(
pm
->
this
.
ã°
, Öm->this.test, 0, "errorÅest");

4817 i‡(!
	`make_îr‹s
(
pm
, 0, 0, 
WRITE_BDHI
))

4820 i‡(!
	`make_îr‹s
(
pm
, 2, 3, 
WRITE_BDHI
))

4823 i‡(!
	`make_îr‹s
(
pm
, 3, 0, 3))

4826 i‡(!
	`make_îr‹s
(
pm
, 4, 3, 
WRITE_BDHI
))

4829 i‡(!
	`make_îr‹s
(
pm
, 6, 3, 
WRITE_BDHI
))

4832 
	`UNUSED
(
pm
)

4834 
	}
}

4840 
	$≥rf‹m_f‹m©tög_ã°
(
≤g_°‹e
 *
ps
)

4842 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


4846 
	`c⁄ãxt
(
ps
, 
Áu…
);

4848 
Try


4850 
≤g_c⁄°_ch¨p
 
c‹ª˘
 = "29 Aug 2079 13:53:60 +0000";

4851 
≤g_c⁄°_ch¨p
 
ªsu…
;

4852 #i‡
PNG_LIBPNG_VER
 >= 10600

4853 
time°rög
[29];

4855 
≤g_°ru˘p
 
µ
;

4856 
≤g_time
 
±
;

4858 
µ
 = 
	`£t_°‹e_f‹_wrôe
(
ps
, 
NULL
, "libpng formattingÅest");

4860 i‡(
µ
 =
NULL
)

4861 
Throw
 
ps
;

4865 
±
.
yór
 = 2079;

4866 
±
.
m⁄th
 = 8;

4867 
±
.
day
 = 29;

4868 
±
.
hour
 = 13;

4869 
±
.
möuã
 = 53;

4870 
±
.
£c⁄d
 = 60;

4872 #i‡
PNG_LIBPNG_VER
 < 10600

4873 
ªsu…
 = 
	`≤g_c⁄vît_to_rfc1123
(
µ
, &
±
);

4875 i‡(
	`≤g_c⁄vît_to_rfc1123_buf„r
(
time°rög
, &
±
))

4876 
ªsu…
 = 
time°rög
;

4879 
ªsu…
 = 
NULL
;

4882 i‡(
ªsu…
 =
NULL
)

4883 
	`≤g_îr‹
(
µ
, "png_convert_to_rfc1123 failed");

4885 i‡(
	`°rcmp
(
ªsu…
, 
c‹ª˘
) != 0)

4887 
size_t
 
pos
 = 0;

4888 
msg
[128];

4890 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "png_convert_to_rfc1123(");

4891 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
c‹ª˘
);

4892 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, ")Ñeturned: '");

4893 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
ªsu…
);

4894 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "'");

4896 
	`≤g_îr‹
(
µ
, 
msg
);

4899 
	`°‹e_wrôe_ª£t
(
ps
);

4902 
	`C©ch
(
Áu…
)

4904 
	`°‹e_wrôe_ª£t
(
Áu…
);

4907 
	`UNUSED
(
ps
)

4909 
	}
}

4911 #ifde‡
PNG_READ_SUPPORTED


4936 
	s°™d¨d_di•œy


4938 
≤g_°‹e
* 
	mps
;

4939 
≤g_byã
 
	mcﬁour_ty≥
;

4940 
≤g_byã
 
	mbô_dïth
;

4941 
≤g_byã
 
	mªd_sBIT
;

4942 
≤g_byã
 
	mgªí_sBIT
;

4943 
≤g_byã
 
	mblue_sBIT
;

4944 
≤g_byã
 
	mÆpha_sBIT
;

4945 
≤g_byã
 
	möãæa˚_ty≥
;

4946 
≤g_byã
 
	mfûÀr
;

4947 
≤g_uöt_32
 
	mid
;

4948 
≤g_uöt_32
 
	mw
;

4949 
≤g_uöt_32
 
	mh
;

4950 
	m≈as£s
;

4951 
≤g_uöt_32
 
	mpixñ_size
;

4952 
≤g_uöt_32
 
	mbô_width
;

4953 
size_t
 
	mcbRow
;

4954 
	mdo_öãæa˚
;

4955 
	mlôéìndün
;

4956 
	mis_å™•¨ít
;

4957 
	mhas_tRNS
;

4958 
	m•ìd
;

4959 
	mu£_upd©e_öfo
;

4962 
≤g_uöt_16
 
	mªd
;

4963 
≤g_uöt_16
 
	mgªí
;

4964 
≤g_uöt_16
 
	mblue
;

4965 } 
	må™•¨ít
;

4966 
	m≈Æëã
;

4967 
°‹e_∑Àâe


4968 
	m∑Àâe
;

4969 } 
	t°™d¨d_di•œy
;

4972 
	$°™d¨d_di•œy_öô
(
°™d¨d_di•œy
 *
dp
, 
≤g_°‹e
* 
ps
, 
≤g_uöt_32
 
id
,

4973 
do_öãæa˚
, 
u£_upd©e_öfo
)

4975 
	`mem£t
(
dp
, 0,  *dp);

4977 
dp
->
ps
 =Ös;

4978 
dp
->
cﬁour_ty≥
 = 
	`COL_FROM_ID
(
id
);

4979 
dp
->
bô_dïth
 = 
	`DEPTH_FROM_ID
(
id
);

4980 i‡(
dp
->
bô_dïth
 < 1 || dp->bit_depth > 16)

4981 
	`öã∫Æ_îr‹
(
ps
, "internal: bad bit depth");

4982 i‡(
dp
->
cﬁour_ty≥
 == 3)

4983 
dp
->
ªd_sBIT
 = dp->
blue_sBIT
 = dp->
gªí_sBIT
 = dp->
Æpha_sBIT
 = 8;

4985 
dp
->
ªd_sBIT
 = dp->
blue_sBIT
 = dp->
gªí_sBIT
 = dp->
Æpha_sBIT
 =

4986 
dp
->
bô_dïth
;

4987 
dp
->
öãæa˚_ty≥
 = 
	`INTERLACE_FROM_ID
(
id
);

4988 
	`check_öãæa˚_ty≥
(
dp
->
öãæa˚_ty≥
);

4989 
dp
->
id
 = id;

4991 
dp
->
w
 = 0;

4992 
dp
->
h
 = 0;

4993 
dp
->
≈as£s
 = 0;

4994 
dp
->
pixñ_size
 = 0;

4995 
dp
->
bô_width
 = 0;

4996 
dp
->
cbRow
 = 0;

4997 
dp
->
do_öãæa˚
 = do_interlace;

4998 
dp
->
lôéìndün
 = 0;

4999 
dp
->
is_å™•¨ít
 = 0;

5000 
dp
->
•ìd
 = 
ps
->speed;

5001 
dp
->
u£_upd©e_öfo
 = use_update_info;

5002 
dp
->
≈Æëã
 = 0;

5004 
	`mem£t
(&
dp
->
å™•¨ít
, 0,  dp->transparent);

5006 
	`mem£t
(
dp
->
∑Àâe
, 0xff,  dp->palette);

5007 
	}
}

5013 
	$°™d¨d_∑Àâe_öô
(
°™d¨d_di•œy
 *
dp
)

5015 
°‹e_∑Àâe_íåy
 *
∑Àâe
 = 
	`°‹e_cuºít_∑Àâe
(
dp
->
ps
, &dp->
≈Æëã
);

5018 i‡(
dp
->
≈Æëã
 > 0)

5020 
i
 = 
dp
->
≈Æëã
;

5021 
	`mem˝y
(
dp
->
∑Àâe
,ÖÆëã, 
i
 *  *palette);

5024 --
i
 >= 0)

5025 i‡(
∑Àâe
[
i
].
Æpha
 < 255)

5028 #ifde‡
__GNUC__


5030 i‡(
i
 >= 0)

5031 
dp
->
is_å™•¨ít
 = 1;

5033 
dp
->
is_å™•¨ít
 = 0;

5035 
dp
->
is_å™•¨ít
 = (
i
 >= 0);

5038 
	}
}

5045 
	$ªad_∑Àâe
(
°‹e_∑Àâe
 
∑Àâe
, *
≈Æëã
, 
≤g_c⁄°_°ru˘p
 
µ
,

5046 
≤g_öf›
 
pi
)

5048 
≤g_cﬁ‹p
 
∑l
;

5049 
≤g_byãp
 
å™s_Æpha
;

5050 
num
;

5052 
∑l
 = 0;

5053 *
≈Æëã
 = -1;

5055 i‡(
	`≤g_gë_PLTE
(
µ
, 
pi
, &
∑l
, 
≈Æëã
Ë& 
PNG_INFO_PLTE
)

5057 
i
 = *
≈Æëã
;

5059 i‡(
i
 <= 0 || i > 256)

5060 
	`≤g_îr‹
(
µ
, "validate: invalid PLTE count");

5062 --
i
 >= 0)

5064 
∑Àâe
[
i
].
ªd
 = 
∑l
[i].red;

5065 
∑Àâe
[
i
].
gªí
 = 
∑l
[i].green;

5066 
∑Àâe
[
i
].
blue
 = 
∑l
[i].blue;

5072 
	`mem£t
(
∑Àâe
 + *
≈Æëã
, 126, (256-*npalette) *  *palette);

5077 i‡(*
≈Æëã
 != (-1))

5078 
	`≤g_îr‹
(
µ
, "validate: invalid PLTEÑesult");

5080 *
≈Æëã
 = 0;

5081 
	`mem£t
(
∑Àâe
, 113,  (
°‹e_∑Àâe
));

5084 
å™s_Æpha
 = 0;

5085 
num
 = 2;

5086 i‡((
	`≤g_gë_tRNS
(
µ
, 
pi
, &
å™s_Æpha
, &
num
, 0Ë& 
PNG_INFO_tRNS
) != 0 &&

5087 (
å™s_Æpha
 !
NULL
 || 
num
 != 1 ) &&

5093 !(
å™s_Æpha
 !
NULL
 && 
num
 == 0))

5095 
i
;

5103 i‡(
å™s_Æpha
 =
NULL
 || 
num
 <0 ||Çum > 256 ||Çum > *
≈Æëã
)

5104 
	`≤g_îr‹
(
µ
, "validate: unexpectedÖng_get_tRNS (palette)Ñesult");

5106 
i
=0; i<
num
; ++i)

5107 
∑Àâe
[
i
].
Æpha
 = 
å™s_Æpha
[i];

5109 
num
=*
≈Æëã
; 
i
<num; ++i)

5110 
∑Àâe
[
i
].
Æpha
 = 255;

5112 ; 
i
<256; ++i)

5113 
∑Àâe
[
i
].
Æpha
 = 33;

5121 
i
;

5123 
i
=0, 
num
=*
≈Æëã
; i<num; ++i)

5124 
∑Àâe
[
i
].
Æpha
 = 255;

5126 ; 
i
<256; ++i)

5127 
∑Àâe
[
i
].
Æpha
 = 55;

5131 
	}
}

5137 
	$°™d¨d_∑Àâe_vÆid©e
(
°™d¨d_di•œy
 *
dp
, 
≤g_c⁄°_°ru˘p
 
µ
,

5138 
≤g_öf›
 
pi
)

5140 
≈Æëã
;

5141 
°‹e_∑Àâe
 
∑Àâe
;

5143 i‡(
	`ªad_∑Àâe
(
∑Àâe
, &
≈Æëã
, 
µ
, 
pi
Ë!
dp
->
is_å™•¨ít
)

5144 
	`≤g_îr‹
(
µ
, "validate:ÖaletteÅransparency changed");

5146 i‡(
≈Æëã
 !
dp
->npalette)

5148 
size_t
 
pos
 = 0;

5149 
msg
[64];

5151 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "validate:Öalette size changed: ");

5152 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
dp
->
≈Æëã
);

5153 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, " -> ");

5154 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
≈Æëã
);

5155 
	`≤g_îr‹
(
µ
, 
msg
);

5159 
i
 = 
≈Æëã
;

5161 --
i
 >= 0)

5162 i‡(
∑Àâe
[
i
].
ªd
 !
dp
->palette[i].red ||

5163 
∑Àâe
[
i
].
gªí
 !
dp
->palette[i].green ||

5164 
∑Àâe
[
i
].
blue
 !
dp
->palette[i].blue ||

5165 
∑Àâe
[
i
].
Æpha
 !
dp
->palette[i].alpha)

5166 
	`≤g_îr‹
(
µ
, "validate: PLTE orÅRNS chunk changed");

5168 
	}
}

5179 
	$°™d¨d_öfo_∑π1
(
°™d¨d_di•œy
 *
dp
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

5181 i‡(
	`≤g_gë_bô_dïth
(
µ
, 
pi
Ë!
dp
->
bô_dïth
)

5182 
	`≤g_îr‹
(
µ
, "validate: bit depth changed");

5184 i‡(
	`≤g_gë_cﬁ‹_ty≥
(
µ
, 
pi
Ë!
dp
->
cﬁour_ty≥
)

5185 
	`≤g_îr‹
(
µ
, "validate: colorÅype changed");

5187 i‡(
	`≤g_gë_fûãr_ty≥
(
µ
, 
pi
Ë!
PNG_FILTER_TYPE_BASE
)

5188 
	`≤g_îr‹
(
µ
, "validate: filterÅype changed");

5190 i‡(
	`≤g_gë_öãæa˚_ty≥
(
µ
, 
pi
Ë!
dp
->
öãæa˚_ty≥
)

5191 
	`≤g_îr‹
(
µ
, "validate: interlacing changed");

5193 i‡(
	`≤g_gë_com¥essi⁄_ty≥
(
µ
, 
pi
Ë!
PNG_COMPRESSION_TYPE_BASE
)

5194 
	`≤g_îr‹
(
µ
, "validate: compressionÅype changed");

5196 
dp
->
w
 = 
	`≤g_gë_image_width
(
µ
, 
pi
);

5198 i‡(
dp
->
w
 !
	`°™d¨d_width
(
µ
, dp->
id
))

5199 
	`≤g_îr‹
(
µ
, "validate: image width changed");

5201 
dp
->
h
 = 
	`≤g_gë_image_height
(
µ
, 
pi
);

5203 i‡(
dp
->
h
 !
	`°™d¨d_height
(
µ
, dp->
id
))

5204 
	`≤g_îr‹
(
µ
, "validate: image height changed");

5210 
≤g_cﬁ‹_8p
 
sBIT
 = 0;

5212 i‡(
	`≤g_gë_sBIT
(
µ
, 
pi
, &
sBIT
Ë& 
PNG_INFO_sBIT
)

5214 
sBIT_övÆid
 = 0;

5216 i‡(
sBIT
 == 0)

5217 
	`≤g_îr‹
(
µ
, "validate: unexpectedÖng_get_sBITÑesult");

5219 i‡(
dp
->
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
)

5221 i‡(
sBIT
->
ªd
 =0 || sBIT->ªd > 
dp
->
bô_dïth
)

5222 
sBIT_övÆid
 = 1;

5224 
dp
->
ªd_sBIT
 = 
sBIT
->
ªd
;

5226 i‡(
sBIT
->
gªí
 =0 || sBIT->gªí > 
dp
->
bô_dïth
)

5227 
sBIT_övÆid
 = 1;

5229 
dp
->
gªí_sBIT
 = 
sBIT
->
gªí
;

5231 i‡(
sBIT
->
blue
 =0 || sBIT->bluê> 
dp
->
bô_dïth
)

5232 
sBIT_övÆid
 = 1;

5234 
dp
->
blue_sBIT
 = 
sBIT
->
blue
;

5239 i‡(
sBIT
->
gøy
 =0 || sBIT->gøy > 
dp
->
bô_dïth
)

5240 
sBIT_övÆid
 = 1;

5242 
dp
->
blue_sBIT
 = dp->
gªí_sBIT
 = dp->
ªd_sBIT
 = 
sBIT
->
gøy
;

5248 i‡(
dp
->
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
)

5250 i‡(
sBIT
->
Æpha
 =0 || sBIT->Æph®> 
dp
->
bô_dïth
)

5251 
sBIT_övÆid
 = 1;

5253 
dp
->
Æpha_sBIT
 = 
sBIT
->
Æpha
;

5256 i‡(
sBIT_övÆid
)

5257 
	`≤g_îr‹
(
µ
, "validate: sBIT value out ofÑange");

5266 i‡(
	`≤g_gë_rowbyãs
(
µ
, 
pi
Ë!
	`°™d¨d_rowsize
’p, 
dp
->
id
))

5267 
	`≤g_îr‹
(
µ
, "validate:Ñow size changed");

5272 
	`°™d¨d_∑Àâe_vÆid©e
(
dp
, 
µ
, 
pi
);

5279 
≤g_cﬁ‹_16p
 
å™s_cﬁ‹
 = 0;

5281 i‡(
	`≤g_gë_tRNS
(
µ
, 
pi
, 0, 0, &
å™s_cﬁ‹
Ë& 
PNG_INFO_tRNS
)

5283 i‡(
å™s_cﬁ‹
 == 0)

5284 
	`≤g_îr‹
(
µ
, "validate: unexpectedÖng_get_tRNS (color)Ñesult");

5286 
dp
->
cﬁour_ty≥
)

5289 
dp
->
å™•¨ít
.
ªd
 = dp->å™•¨ít.
gªí
 = dp->å™•¨ít.
blue
 =

5290 
å™s_cﬁ‹
->
gøy
;

5291 
dp
->
has_tRNS
 = 1;

5295 
dp
->
å™•¨ít
.
ªd
 = 
å™s_cﬁ‹
->red;

5296 
dp
->
å™•¨ít
.
gªí
 = 
å™s_cﬁ‹
->green;

5297 
dp
->
å™•¨ít
.
blue
 = 
å™s_cﬁ‹
->blue;

5298 
dp
->
has_tRNS
 = 1;

5305 
	`≤g_îr‹
(
µ
, "validate: unexpectedÖng_get_tRNSÑesult");

5309 
	`≤g_îr‹
(
µ
, "validate: invalidÅRNS chunk withálpha image");

5318 
dp
->
≈as£s
 = 
	`≈as£s_‰om_öãæa˚_ty≥
(
µ
, dp->
öãæa˚_ty≥
);

5319 i‡(!
dp
->
do_öãæa˚
)

5321 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


5322 i‡(
dp
->
≈as£s
 !
	`≤g_£t_öãæa˚_h™dlög
(
µ
))

5323 
	`≤g_îr‹
(
µ
, "validate: file changed interlaceÅype");

5328 i‡(
dp
->
≈as£s
 > 1)

5329 
	`≤g_îr‹
(
µ
, "validate:ÇoÜibpng interlace support");

5336 
	}
}

5343 
	$°™d¨d_öfo_∑π2
(
°™d¨d_di•œy
 *
dp
, 
≤g_c⁄°_°ru˘p
 
µ
,

5344 
≤g_c⁄°_öf›
 
pi
, 
nImages
)

5348 
≤g_byã
 
˘
 = 
	`≤g_gë_cﬁ‹_ty≥
(
µ
, 
pi
);

5349 
≤g_byã
 
bd
 = 
	`≤g_gë_bô_dïth
(
µ
, 
pi
);

5351 i‡(
bd
 >8 && (
˘
 =
PNG_COLOR_TYPE_RGB
 || cà=
PNG_COLOR_TYPE_GRAY
) &&

5352 
dp
->
fûÀr
)

5353 
˘
 |= 4;

5355 
dp
->
pixñ_size
 = 
	`bô_size
(
µ
, 
˘
, 
bd
);

5357 
dp
->
bô_width
 = 
	`≤g_gë_image_width
(
µ
, 
pi
Ë* dp->
pixñ_size
;

5358 
dp
->
cbRow
 = 
	`≤g_gë_rowbyãs
(
µ
, 
pi
);

5361 i‡(
dp
->
cbRow
 !(dp->
bô_width
+7)/8)

5362 
	`≤g_îr‹
(
µ
, "badÖng_get_rowbytes calculation");

5365 
	`°‹e_ísuª_image
(
dp
->
ps
, 
µ
, 
nImages
, dp->
cbRow
, dp->
h
);

5366 
	}
}

5369 
	$°™d¨d_öfo_imp
(
°™d¨d_di•œy
 *
dp
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
,

5370 
nImages
)

5375 
	`°™d¨d_öfo_∑π1
(
dp
, 
µ
, 
pi
);

5380 i‡(
dp
->
u£_upd©e_öfo
)

5383 
i
 = 
dp
->
u£_upd©e_öfo
;

5384 
i
-- > 0)

5385 
	`≤g_ªad_upd©e_öfo
(
µ
, 
pi
);

5389 
	`≤g_°¨t_ªad_image
(
µ
);

5394 
	`°™d¨d_öfo_∑π2
(
dp
, 
µ
, 
pi
, 
nImages
);

5395 
	}
}

5397 
PNGCBAPI


5398 
	$°™d¨d_öfo
(
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

5400 
°™d¨d_di•œy
 *
dp
 = 
	`voidˇ°
(standard_display*,

5401 
	`≤g_gë_¥ogªssive_±r
(
µ
));

5406 
	`°™d¨d_öfo_imp
(
dp
, 
µ
, 
pi
, 1 );

5407 
	}
}

5409 
PNGCBAPI


5410 
	$¥ogªssive_row
(
≤g_°ru˘p
 
µIn
, 
≤g_byãp
 
√w_row
, 
≤g_uöt_32
 
y
, 
∑ss
)

5412 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

5413 c⁄° 
°™d¨d_di•œy
 *
dp
 = 
	`voidˇ°
(standard_display*,

5414 
	`≤g_gë_¥ogªssive_±r
(
µ
));

5421 i‡(
√w_row
 !
NULL
)

5423 
≤g_byãp
 
row
;

5428 i‡(
dp
->
do_öãæa˚
 && dp->
öãæa˚_ty≥
 =
PNG_INTERLACE_ADAM7
)

5430 #ifde‡
PNG_USER_TRANSFORM_INFO_SUPPORTED


5432 i‡(
y
 !
	`≤g_gë_cuºít_row_numbî
(
µ
))

5433 
	`≤g_îr‹
(
µ
, "png_get_current_row_number is broken");

5435 i‡(
∑ss
 !
	`≤g_gë_cuºít_∑ss_numbî
(
µ
))

5436 
	`≤g_îr‹
(
µ
, "png_get_current_pass_number is broken");

5439 
y
 = 
	`PNG_ROW_FROM_PASS_ROW
(y, 
∑ss
);

5443 i‡(
y
 >
dp
->
h
)

5444 
	`≤g_îr‹
(
µ
, "invalid yÅoÖrogressiveÑow callback");

5446 
row
 = 
	`°‹e_image_row
(
dp
->
ps
, 
µ
, 0, 
y
);

5449 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


5450 i‡(
dp
->
do_öãæa˚
)

5453 i‡(
dp
->
öãæa˚_ty≥
 =
PNG_INTERLACE_ADAM7
)

5454 
	`deöãæa˚_row
(
row
, 
√w_row
, 
dp
->
pixñ_size
, dp->
w
, 
∑ss
,

5455 
dp
->
lôéìndün
);

5457 
	`row_c›y
(
row
, 
√w_row
, 
dp
->
pixñ_size
 * dp->
w
, dp->
lôéìndün
);

5459 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


5461 
	`≤g_¥ogªssive_comböe_row
(
µ
, 
row
, 
√w_row
);

5465 i‡(
dp
->
öãæa˚_ty≥
 =
PNG_INTERLACE_ADAM7
 &&

5466 
	`PNG_ROW_IN_INTERLACE_PASS
(
y
, 
∑ss
) &&

5467 
	`PNG_PASS_COLS
(
dp
->
w
, 
∑ss
) > 0)

5468 
	`≤g_îr‹
(
µ
, "missingÑow inÖrogressive de-interlacing");

5469 
	}
}

5472 
	$£quítül_row
(
°™d¨d_di•œy
 *
dp
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
,

5473 
iImage
, 
iDi•œy
)

5475 
≈as£s
 = 
dp
->npasses;

5476 
do_öãæa˚
 = 
dp
->do_interlace &&

5477 
dp
->
öãæa˚_ty≥
 =
PNG_INTERLACE_ADAM7
;

5478 
≤g_uöt_32
 
height
 = 
	`°™d¨d_height
(
µ
, 
dp
->
id
);

5479 
≤g_uöt_32
 
width
 = 
	`°™d¨d_width
(
µ
, 
dp
->
id
);

5480 c⁄° 
≤g_°‹e
* 
ps
 = 
dp
->ps;

5481 
∑ss
;

5483 
∑ss
=0;Öass<
≈as£s
; ++pass)

5485 
≤g_uöt_32
 
y
;

5486 
≤g_uöt_32
 
wPass
 = 
	`PNG_PASS_COLS
(
width
, 
∑ss
);

5488 
y
=0; y<
height
; ++y)

5490 i‡(
do_öãæa˚
)

5495 i‡(
wPass
 > 0 && 
	`PNG_ROW_IN_INTERLACE_PASS
(
y
, 
∑ss
))

5500 
≤g_byã
 
row
[
STANDARD_ROWMAX
], 
di•œy
[STANDARD_ROWMAX];

5508 
	`mem£t
(
row
, 0xc5, Ñow);

5509 
	`mem£t
(
di•œy
, 0x5c,  display);

5511 
	`≤g_ªad_row
(
µ
, 
row
, 
di•œy
);

5513 i‡(
iImage
 >= 0)

5514 
	`deöãæa˚_row
(
	`°‹e_image_row
(
ps
, 
µ
, 
iImage
, 
y
), 
row
,

5515 
dp
->
pixñ_size
, dp->
w
, 
∑ss
, dp->
lôéìndün
);

5517 i‡(
iDi•œy
 >= 0)

5518 
	`deöãæa˚_row
(
	`°‹e_image_row
(
ps
, 
µ
, 
iDi•œy
, 
y
), 
di•œy
,

5519 
dp
->
pixñ_size
, dp->
w
, 
∑ss
, dp->
lôéìndün
);

5523 
	`≤g_ªad_row
(
µ
,

5524 
iImage
 >0 ? 
	`°‹e_image_row
(
ps
, 
µ
, iImage, 
y
Ë: 
NULL
,

5525 
iDi•œy
 >0 ? 
	`°‹e_image_row
(
ps
, 
µ
, iDi•œy, 
y
Ë: 
NULL
);

5532 
	`≤g_ªad_íd
(
µ
, 
pi
);

5533 
	}
}

5535 #ifde‡
PNG_TEXT_SUPPORTED


5537 
	$°™d¨d_check_ãxt
(
≤g_c⁄°_°ru˘p
 
µ
, 
≤g_c⁄°_ãxç
 
ç
,

5538 
≤g_c⁄°_ch¨p
 
keyw‹d
,Öng_c⁄°_ch¨∞
ãxt
)

5540 
msg
[1024];

5541 
size_t
 
pos
 = 
	`ß„ˇt
(
msg
,  msg, 0, "text: ");

5542 
size_t
 
ok
;

5544 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
keyw‹d
);

5545 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, ": ");

5546 
ok
 = 
pos
;

5548 i‡(
ç
->
com¥essi⁄
 !
TEXT_COMPRESSION
)

5550 
buf
[64];

5552 
	`•rötf
(
buf
, "com¥essi⁄ [%d->%d], ", 
TEXT_COMPRESSION
,

5553 
ç
->
com¥essi⁄
);

5554 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
buf
);

5557 i‡(
ç
->
key
 =
NULL
 || 
	`°rcmp
—p->key, 
keyw‹d
) != 0)

5559 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "keyword \"");

5560 i‡(
ç
->
key
 !
NULL
)

5562 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
ç
->
key
);

5563 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "\", ");

5567 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "null, ");

5570 i‡(
ç
->
ãxt
 =
NULL
)

5571 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "textÜost, ");

5575 i‡(
ç
->
ãxt_Àngth
 !
	`°æí
(
ãxt
))

5577 
buf
[64];

5578 
	`•rötf
(
buf
, "textÜength changed[%lu->%lu], ",

5579 ()
	`°æí
(
ãxt
), ()
ç
->
ãxt_Àngth
);

5580 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
buf
);

5583 i‡(
	`°rcmp
(
ç
->
ãxt
,Åext) != 0)

5585 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "text becomes \"");

5586 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
ç
->
ãxt
);

5587 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "\" (was \"");

5588 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
ãxt
);

5589 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "\"), ");

5593 i‡(
ç
->
ôxt_Àngth
 != 0)

5594 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "iTXtÜength set, ");

5596 i‡(
ç
->
œng
 !
NULL
)

5598 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "iTXtÜanguage \"");

5599 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
ç
->
œng
);

5600 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "\", ");

5603 i‡(
ç
->
œng_key
 !
NULL
)

5605 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "iTXt keyword \"");

5606 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
ç
->
œng_key
);

5607 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "\", ");

5610 i‡(
pos
 > 
ok
)

5612 
msg
[
pos
-2] = '\0';

5613 
	`≤g_îr‹
(
µ
, 
msg
);

5615 
	}
}

5618 
	$°™d¨d_ãxt_vÆid©e
(
°™d¨d_di•œy
 *
dp
, 
≤g_c⁄°_°ru˘p
 
µ
,

5619 
≤g_öf›
 
pi
, 
check_íd
)

5621 
≤g_ãxç
 
ç
 = 
NULL
;

5622 
≤g_uöt_32
 
num_ãxt
 = 
	`≤g_gë_ãxt
(
µ
, 
pi
, &
ç
, 
NULL
);

5624 i‡(
num_ãxt
 =2 && 
ç
 !
NULL
)

5626 
	`°™d¨d_check_ãxt
(
µ
, 
ç
, "imagê«me", 
dp
->
ps
->
cuºít
->
«me
);

5632 i‡(
check_íd
)

5633 
	`°™d¨d_check_ãxt
(
µ
, 
ç
+1, "end marker", "end");

5638 
msg
[64];

5640 
	`•rötf
(
msg
, "expectedÅwoÅext items, got %lu",

5641 ()
num_ãxt
);

5642 
	`≤g_îr‹
(
µ
, 
msg
);

5644 
	}
}

5646 
	#°™d¨d_ãxt_vÆid©e
(
dp
,
µ
,
pi
,
check_íd
Ë(()0)

	)

5650 
	$°™d¨d_row_vÆid©e
(
°™d¨d_di•œy
 *
dp
, 
≤g_c⁄°_°ru˘p
 
µ
,

5651 
iImage
, 
iDi•œy
, 
≤g_uöt_32
 
y
)

5653 
whîe
;

5654 
≤g_byã
 
°d
[
STANDARD_ROWMAX
];

5659 
	`mem£t
(
°d
, 178,  std);

5660 
	`°™d¨d_row
(
µ
, 
°d
, 
dp
->
id
, 
y
);

5667 i‡(
iImage
 >= 0 &&

5668 (
whîe
 = 
	`pixñ_cmp
(
°d
, 
	`°‹e_image_row
(
dp
->
ps
, 
µ
, 
iImage
, 
y
),

5669 
dp
->
bô_width
)) != 0)

5671 
msg
[64];

5672 
	`•rötf
(
msg
, "PNG imageÑow[%lu][%d] changed from %.2xÅo %.2x",

5673 ()
y
, 
whîe
-1, 
°d
[where-1],

5674 
	`°‹e_image_row
(
dp
->
ps
, 
µ
, 
iImage
, 
y
)[
whîe
-1]);

5675 
	`≤g_îr‹
(
µ
, 
msg
);

5678 i‡(
iDi•œy
 >= 0 &&

5679 (
whîe
 = 
	`pixñ_cmp
(
°d
, 
	`°‹e_image_row
(
dp
->
ps
, 
µ
, 
iDi•œy
, 
y
),

5680 
dp
->
bô_width
)) != 0)

5682 
msg
[64];

5683 
	`•rötf
(
msg
, "displayÑow[%lu][%d] changed from %.2xÅo %.2x",

5684 ()
y
, 
whîe
-1, 
°d
[where-1],

5685 
	`°‹e_image_row
(
dp
->
ps
, 
µ
, 
iDi•œy
, 
y
)[
whîe
-1]);

5686 
	`≤g_îr‹
(
µ
, 
msg
);

5688 
	}
}

5691 
	$°™d¨d_image_vÆid©e
(
°™d¨d_di•œy
 *
dp
, 
≤g_c⁄°_°ru˘p
 
µ
, 
iImage
,

5692 
iDi•œy
)

5694 
≤g_uöt_32
 
y
;

5696 i‡(
iImage
 >= 0)

5697 
	`°‹e_image_check
(
dp
->
ps
, 
µ
, 
iImage
);

5699 i‡(
iDi•œy
 >= 0)

5700 
	`°‹e_image_check
(
dp
->
ps
, 
µ
, 
iDi•œy
);

5702 
y
=0; y<
dp
->
h
; ++y)

5703 
	`°™d¨d_row_vÆid©e
(
dp
, 
µ
, 
iImage
, 
iDi•œy
, 
y
);

5706 
dp
->
ps
->
vÆid©ed
 = 1;

5707 
	}
}

5709 
PNGCBAPI


5710 
	$°™d¨d_íd
(
≤g_°ru˘p
 
µIn
, 
≤g_öf›
 
pi
)

5712 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

5713 
°™d¨d_di•œy
 *
dp
 = 
	`voidˇ°
(standard_display*,

5714 
	`≤g_gë_¥ogªssive_±r
(
µ
));

5716 
	`UNUSED
(
pi
)

5721 
	`°™d¨d_ãxt_vÆid©e
(
dp
, 
µ
, 
pi
,

5722 
PNG_LIBPNG_VER
 >= 10518 );

5723 
	`°™d¨d_image_vÆid©e
(
dp
, 
µ
, 0, -1);

5724 
	}
}

5728 
	$°™d¨d_ã°
(
≤g_°‹e
* c⁄° 
psIn
, 
≤g_uöt_32
 c⁄° 
id
,

5729 
do_öãæa˚
, 
u£_upd©e_öfo
)

5731 
°™d¨d_di•œy
 
d
;

5732 
	`c⁄ãxt
(
psIn
, 
Áu…
);

5737 
	`°™d¨d_di•œy_öô
(&
d
, 
psIn
, 
id
, 
do_öãæa˚
, 
u£_upd©e_öfo
);

5742 
Try


5744 
≤g_°ru˘p
 
µ
;

5745 
≤g_öf›
 
pi
;

5750 
µ
 = 
	`£t_°‹e_f‹_ªad
(
d
.
ps
, &
pi
, d.
id
,

5751 
d
.
do_öãæa˚
 ? (d.
ps
->
¥ogªssive
 ?

5753 "≤gvÆid sequítü»deöãæa˚r"Ë: (
d
.
ps
->
¥ogªssive
 ?

5757 
	`°™d¨d_∑Àâe_öô
(&
d
);

5760 i‡(
d
.
ps
->
¥ogªssive
)

5762 
	`≤g_£t_¥ogªssive_ªad_‚
(
µ
, &
d
, 
°™d¨d_öfo
, 
¥ogªssive_row
,

5763 
°™d¨d_íd
);

5766 
	`°‹e_¥ogªssive_ªad
(
d
.
ps
, 
µ
, 
pi
);

5771 
	`≤g_£t_ªad_‚
(
µ
, 
d
.
ps
, 
°‹e_ªad
);

5774 
	`≤g_ªad_öfo
(
µ
, 
pi
);

5779 
	`°™d¨d_öfo_imp
(&
d
, 
µ
, 
pi
, 2 );

5786 
	`£quítül_row
(&
d
, 
µ
, 
pi
, 0, 1);

5791 i‡(!
d
.
•ìd
)

5793 
	`°™d¨d_ãxt_vÆid©e
(&
d
, 
µ
, 
pi
, 1 );

5794 
	`°™d¨d_image_vÆid©e
(&
d
, 
µ
, 0, 1);

5797 
d
.
ps
->
vÆid©ed
 = 1;

5802 i‡(!
d
.
ps
->
vÆid©ed
)

5803 
	`≤g_îr‹
(
µ
, "imageÑead failed silently");

5808 
	`C©ch
(
Áu…
)

5809 
d
.
ps
 = 
Áu…
;

5812 
	`°‹e_ªad_ª£t
(
d
.
ps
);

5813 
	}
}

5816 
	$ã°_°™d¨d
(
≤g_modifõr
* c⁄° 
pm
, 
≤g_byã
 c⁄° 
cﬁour_ty≥
,

5817 
bdlo
, c⁄° 
bdhi
)

5819 ; 
bdlo
 <
bdhi
; ++bdlo)

5821 
öãæa˚_ty≥
;

5823 
öãæa˚_ty≥
 = 
PNG_INTERLACE_NONE
;

5824 
öãæa˚_ty≥
 < 
INTERLACE_LAST
; ++interlace_type)

5826 
	`°™d¨d_ã°
(&
pm
->
this
, 
	`FILEID
(
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
),

5827 0 , 
öãæa˚_ty≥
, 0, 0, 0), 
do_ªad_öãæa˚
,

5828 
pm
->
u£_upd©e_öfo
);

5830 i‡(
	`Áû
(
pm
))

5836 
	}
}

5839 
	$≥rf‹m_°™d¨d_ã°
(
≤g_modifõr
 *
pm
)

5844 i‡(!
	`ã°_°™d¨d
(
pm
, 0, 0, 
READ_BDHI
))

5847 i‡(!
	`ã°_°™d¨d
(
pm
, 2, 3, 
READ_BDHI
))

5850 i‡(!
	`ã°_°™d¨d
(
pm
, 3, 0, 3))

5853 i‡(!
	`ã°_°™d¨d
(
pm
, 4, 3, 
READ_BDHI
))

5856 i‡(!
	`ã°_°™d¨d
(
pm
, 6, 3, 
READ_BDHI
))

5858 
	}
}

5863 
	$ã°_size
(
≤g_modifõr
* c⁄° 
pm
, 
≤g_byã
 c⁄° 
cﬁour_ty≥
,

5864 
bdlo
, c⁄° 
bdhi
)

5873 c⁄° 
≤g_byã
 
höc
[] = {1, 3, 11, 1, 5};

5874 c⁄° 
≤g_byã
 
wöc
[] = {1, 9, 5, 7, 1};

5875 
ßve_bdlo
 = 
bdlo
;

5877 ; 
bdlo
 <
bdhi
; ++bdlo)

5879 
≤g_uöt_32
 
h
, 
w
;

5881 
h
=1; h<=16; h+=
höc
[
bdlo
])

5883 
w
=1; w<=16; w+=
wöc
[
bdlo
])

5890 
	`°™d¨d_ã°
(&
pm
->
this
, 
	`FILEID
(
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
),

5891 0 , 
PNG_INTERLACE_NONE
, 
w
, 
h
, 0), 0 ,

5892 
pm
->
u£_upd©e_öfo
);

5894 i‡(
	`Áû
(
pm
))

5897 
	`°™d¨d_ã°
(&
pm
->
this
, 
	`FILEID
(
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
),

5898 0 , 
PNG_INTERLACE_NONE
, 
w
, 
h
, 1), 0 ,

5899 
pm
->
u£_upd©e_öfo
);

5901 i‡(
	`Áû
(
pm
))

5908 
	`°™d¨d_ã°
(&
pm
->
this
, 
	`FILEID
(
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
),

5909 0 , 
PNG_INTERLACE_NONE
, 
w
, 
h
, 0), 1 ,

5910 
pm
->
u£_upd©e_öfo
);

5912 i‡(
	`Áû
(
pm
))

5915 #i‡
CAN_WRITE_INTERLACE


5917 
	`°™d¨d_ã°
(&
pm
->
this
, 
	`FILEID
(
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
),

5918 0 , 
PNG_INTERLACE_ADAM7
, 
w
, 
h
, 1), 1 ,

5919 
pm
->
u£_upd©e_öfo
);

5921 i‡(
	`Áû
(
pm
))

5931 
bdlo
 = 
ßve_bdlo
; bdlÿ<
bdhi
; ++bdlo)

5933 
≤g_uöt_32
 
h
, 
w
;

5935 
h
=1; h<=16; h+=
höc
[
bdlo
])

5937 
w
=1; w<=16; w+=
wöc
[
bdlo
])

5939 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


5945 #i‡
CAN_WRITE_INTERLACE


5946 
	`°™d¨d_ã°
(&
pm
->
this
, 
	`FILEID
(
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
),

5947 0 , 
PNG_INTERLACE_ADAM7
, 
w
, 
h
, 1), 0 ,

5948 
pm
->
u£_upd©e_öfo
);

5950 i‡(
	`Áû
(
pm
))

5955 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


5957 
	`°™d¨d_ã°
(&
pm
->
this
, 
	`FILEID
(
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
),

5958 0 , 
PNG_INTERLACE_ADAM7
, 
w
, 
h
, 0), 1 ,

5959 
pm
->
u£_upd©e_öfo
);

5961 i‡(
	`Áû
(
pm
))

5965 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


5966 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


5968 
	`°™d¨d_ã°
(&
pm
->
this
, 
	`FILEID
(
cﬁour_ty≥
, 
	`DEPTH
(
bdlo
),

5969 0 , 
PNG_INTERLACE_ADAM7
, 
w
, 
h
, 0), 0 ,

5970 
pm
->
u£_upd©e_öfo
);

5972 i‡(
	`Áû
(
pm
))

5981 
	}
}

5984 
	$≥rf‹m_size_ã°
(
≤g_modifõr
 *
pm
)

5989 i‡(!
	`ã°_size
(
pm
, 0, 0, 
READ_BDHI
))

5992 i‡(!
	`ã°_size
(
pm
, 2, 3, 
READ_BDHI
))

5999 i‡(!
	`ã°_size
(
pm
, 3, 0, 3))

6003 i‡(!
	`ã°_size
(
pm
, 4, 3, 
READ_BDHI
))

6006 i‡(!
	`ã°_size
(
pm
, 6, 3, 
READ_BDHI
))

6008 
	}
}

6012 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


6018 
	simage_pixñ


6023 
	mªd
, 
	mgªí
, 
	mblue
, 
	mÆpha
;

6024 
	m∑Àâe_ödex
;

6025 
≤g_byã
 
	mcﬁour_ty≥
;

6026 
≤g_byã
 
	mbô_dïth
;

6027 
≤g_byã
 
	mßm∂e_dïth
;

6028 
	mhave_tRNS
 :1;

6029 
	msw≠_rgb
 :1;

6030 
	mÆpha_fú°
 :1;

6031 
	mÆpha_övîãd
 :1;

6032 
	mm⁄o_övîãd
 :1;

6033 
	msw≠16
 :1;

6034 
	mlôéìndün
 :1;

6035 
	msig_bôs
 :1;

6047 
	mªdf
, 
	mgªíf
, 
	mbluef
, 
	mÆphaf
;

6048 
	mªde
, 
	mgªíe
, 
	mbluì
, 
	mÆph´
;

6049 
≤g_byã
 
	mªd_sBIT
, 
	mgªí_sBIT
, 
	mblue_sBIT
, 
	mÆpha_sBIT
;

6050 } 
	timage_pixñ
;

6054 
	$image_pixñ_£tf
(
image_pixñ
 *
this
, 
rMax
, 
gMax
,

6055 
bMax
, 
aMax
)

6057 
this
->
ªdf
 =Åhis->
ªd
 / ()
rMax
;

6058 
this
->
gªíf
 =Åhis->
gªí
 / ()
gMax
;

6059 
this
->
bluef
 =Åhis->
blue
 / ()
bMax
;

6060 
this
->
Æphaf
 =Åhis->
Æpha
 / ()
aMax
;

6062 i‡(
this
->
ªd
 < 
rMax
)

6063 
this
->
ªde
 =Åhis->
ªdf
 * 
DBL_EPSILON
;

6065 
this
->
ªde
 = 0;

6066 i‡(
this
->
gªí
 < 
gMax
)

6067 
this
->
gªíe
 =Åhis->
gªíf
 * 
DBL_EPSILON
;

6069 
this
->
gªíe
 = 0;

6070 i‡(
this
->
blue
 < 
bMax
)

6071 
this
->
bluì
 =Åhis->
bluef
 * 
DBL_EPSILON
;

6073 
this
->
bluì
 = 0;

6074 i‡(
this
->
Æpha
 < 
aMax
)

6075 
this
->
Æph´
 =Åhis->
Æphaf
 * 
DBL_EPSILON
;

6077 
this
->
Æph´
 = 0;

6078 
	}
}

6085 
	$image_pixñ_öô
(
image_pixñ
 *
this
, 
≤g_c⁄°_byãp
 
row
, 
≤g_byã
 
cﬁour_ty≥
,

6086 
≤g_byã
 
bô_dïth
, 
≤g_uöt_32
 
x
, 
°‹e_∑Àâe
 
∑Àâe
,

6087 c⁄° 
image_pixñ
 *
f‹m©
 )

6089 
≤g_byã
 
ßm∂e_dïth
 =

6090 (
≤g_byã
)(
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 ? 8 : 
bô_dïth
);

6091 
max
 = (1U<<
ßm∂e_dïth
)-1;

6092 
sw≠16
 = (
f‹m©
 != 0 && format->swap16);

6093 
lôéìndün
 = (
f‹m©
 != 0 && format->littleendian);

6094 
sig_bôs
 = (
f‹m©
 != 0 && format->sig_bits);

6100 
this
->
∑Àâe_ödex
 =Åhis->
ªd
 =Åhis->
gªí
 =Åhis->
blue
 =

6101 
	`ßm∂e
(
row
, 
cﬁour_ty≥
, 
bô_dïth
, 
x
, 0, 
sw≠16
, 
lôéìndün
);

6102 
this
->
Æpha
 = 
max
;

6103 
this
->
ªd_sBIT
 =Åhis->
gªí_sBIT
 =Åhis->
blue_sBIT
 =Åhis->
Æpha_sBIT
 =

6104 
ßm∂e_dïth
;

6107 i‡(
cﬁour_ty≥
 == 3)

6110 i‡(
∑Àâe
 != 0)

6112 
i
 = 
this
->
∑Àâe_ödex
;

6114 
this
->
ªd
 = 
∑Àâe
[
i
].red;

6115 
this
->
gªí
 = 
∑Àâe
[
i
].green;

6116 
this
->
blue
 = 
∑Àâe
[
i
].blue;

6117 
this
->
Æpha
 = 
∑Àâe
[
i
].alpha;

6123 
i
 = 0;

6125 i‡((
cﬁour_ty≥
 & 4Ë!0 && 
f‹m©
 !0 && f‹m©->
Æpha_fú°
)

6127 
this
->
Æpha
 =Åhis->
ªd
;

6129 
this
->
∑Àâe_ödex
 =Åhis->
ªd
 =Åhis->
gªí
 =Åhis->
blue
 =

6130 
	`ßm∂e
(
row
, 
cﬁour_ty≥
, 
bô_dïth
, 
x
, 1, 
sw≠16
, 
lôéìndün
);

6131 
i
 = 1;

6134 i‡(
cﬁour_ty≥
 & 2)

6137 
this
->
gªí
 = 
	`ßm∂e
(
row
, 
cﬁour_ty≥
, 
bô_dïth
, 
x
, ++
i
, 
sw≠16
,

6138 
lôéìndün
);

6140 i‡(
f‹m©
 !0 && f‹m©->
sw≠_rgb
)

6141 
this
->
ªd
 = 
	`ßm∂e
(
row
, 
cﬁour_ty≥
, 
bô_dïth
, 
x
, ++
i
, 
sw≠16
,

6142 
lôéìndün
);

6144 
this
->
blue
 = 
	`ßm∂e
(
row
, 
cﬁour_ty≥
, 
bô_dïth
, 
x
, ++
i
, 
sw≠16
,

6145 
lôéìndün
);

6148 i‡(
f‹m©
 !0 && f‹m©->
m⁄o_övîãd
)

6149 
this
->
ªd
 =Åhis->
gªí
 =Åhis->
blue
 =Åhis->ªd ^ 
max
;

6151 i‡((
cﬁour_ty≥
 & 4) != 0)

6153 i‡(
f‹m©
 =0 || !f‹m©->
Æpha_fú°
)

6154 
this
->
Æpha
 = 
	`ßm∂e
(
row
, 
cﬁour_ty≥
, 
bô_dïth
, 
x
, ++
i
, 
sw≠16
,

6155 
lôéìndün
);

6157 i‡(
f‹m©
 !0 && f‹m©->
Æpha_övîãd
)

6158 
this
->
Æpha
 ^
max
;

6166 
	`image_pixñ_£tf
(
this
,

6167 
sig_bôs
 ? (1U << 
f‹m©
->
ªd_sBIT
)-1 : 
max
,

6168 
sig_bôs
 ? (1U << 
f‹m©
->
gªí_sBIT
)-1 : 
max
,

6169 
sig_bôs
 ? (1U << 
f‹m©
->
blue_sBIT
)-1 : 
max
,

6170 
sig_bôs
 ? (1U << 
f‹m©
->
Æpha_sBIT
)-1 : 
max
);

6175 
this
->
cﬁour_ty≥
 = colour_type;

6176 
this
->
bô_dïth
 = bit_depth;

6177 
this
->
ßm∂e_dïth
 = sample_depth;

6178 
this
->
have_tRNS
 = 0;

6179 
this
->
sw≠_rgb
 = 0;

6180 
this
->
Æpha_fú°
 = 0;

6181 
this
->
Æpha_övîãd
 = 0;

6182 
this
->
m⁄o_övîãd
 = 0;

6183 
this
->
sw≠16
 = 0;

6184 
this
->
lôéìndün
 = 0;

6185 
this
->
sig_bôs
 = 0;

6186 
	}
}

6188 #i‡
deföed
 
PNG_READ_EXPAND_SUPPORTED
 || deföed 
PNG_READ_GRAY_TO_RGB_SUPPORTED
\

6189 || 
deföed
 
	gPNG_READ_EXPAND_SUPPORTED
 || deföed 
	gPNG_READ_EXPAND_16_SUPPORTED
\

6190 || 
deföed
 
PNG_READ_BACKGROUND_SUPPORTED


6199 
	$image_pixñ_c⁄vît_PLTE
(
image_pixñ
 *
this
)

6201 i‡(
this
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

6203 i‡(
this
->
have_tRNS
)

6205 
this
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_RGB_ALPHA
;

6206 
this
->
have_tRNS
 = 0;

6209 
this
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

6214 
this
->
bô_dïth
 = 8;

6216 
	}
}

6226 
	$image_pixñ_add_Æpha
(
image_pixñ
 *
this
, c⁄° 
°™d¨d_di•œy
 *
di•œy
,

6227 
f‹_background
)

6229 i‡(
this
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

6230 
	`image_pixñ_c⁄vît_PLTE
(
this
);

6232 i‡((
this
->
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) == 0)

6234 i‡(
this
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

6236 #i‡
PNG_LIBPNG_VER
 < 10700

6237 i‡(!
f‹_background
 && 
this
->
bô_dïth
 < 8)

6238 
this
->
bô_dïth
 =Åhis->
ßm∂e_dïth
 = 8;

6241 i‡(
this
->
have_tRNS
)

6246 #i‡
PNG_LIBPNG_VER
 >= 10700

6247 i‡(!
f‹_background
 && 
this
->
bô_dïth
 < 8)

6248 
this
->
bô_dïth
 =Åhis->
ßm∂e_dïth
 = 8;

6251 
this
->
have_tRNS
 = 0;

6256 i‡(
this
->
ªd
 =
di•œy
->
å™•¨ít
.red)

6257 
this
->
Æphaf
 = 0;

6259 
this
->
Æphaf
 = 1;

6262 
this
->
Æphaf
 = 1;

6264 
this
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_GRAY_ALPHA
;

6267 i‡(
this
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
)

6269 i‡(
this
->
have_tRNS
)

6271 
this
->
have_tRNS
 = 0;

6276 i‡(
this
->
ªd
 =
di•œy
->
å™•¨ít
.red &&

6277 
this
->
gªí
 =
di•œy
->
å™•¨ít
.green &&

6278 
this
->
blue
 =
di•œy
->
å™•¨ít
.blue)

6279 
this
->
Æphaf
 = 0;

6281 
this
->
Æphaf
 = 1;

6284 
this
->
Æphaf
 = 1;

6286 
this
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_RGB_ALPHA
;

6292 
this
->
Æph´
 = 0;

6293 
this
->
Æpha_sBIT
 = 
di•œy
->alpha_sBIT;

6295 
	}
}

6298 
	gå™sf‹m_di•œy
;

6299 
	simage_å™sf‹m


6302 c⁄° *
	m«me
;

6305 
	míabÀ
;

6308 
image_å™sf‹m
 *c⁄° 
	mli°
;

6313 
	mglobÆ_u£
;

6316 
	mloˇl_u£
;

6321 c⁄° 
image_å™sf‹m
 *
	m√xt
;

6329 (*
	möi
)(c⁄° 
image_å™sf‹m
 *
	mthis
,

6330 
å™sf‹m_di•œy
 *
	mth©
);

6334 (*
	m£t
)(c⁄° 
image_å™sf‹m
 *
	mthis
,

6335 
å™sf‹m_di•œy
 *
	mth©
, 
≤g_°ru˘p
 
	mµ
, 
≤g_öf›
 
	mpi
);

6343 (*
	mmod
)(c⁄° 
image_å™sf‹m
 *
	mthis
, 
image_pixñ
 *
	mth©
,

6344 
≤g_c⁄°_°ru˘p
 
	mµ
, c⁄° 
å™sf‹m_di•œy
 *
	mdi•œy
);

6351 (*
	madd
)(
image_å™sf‹m
 *
	mthis
,

6352 c⁄° 
image_å™sf‹m
 **
	mth©
, 
≤g_byã
 
	mcﬁour_ty≥
,

6353 
≤g_byã
 
	mbô_dïth
);

6354 } 
	timage_å™sf‹m
;

6356 
	så™sf‹m_di•œy


6358 
°™d¨d_di•œy
 
	mthis
;

6361 
≤g_modifõr
* 
	mpm
;

6362 c⁄° 
image_å™sf‹m
* 
	må™sf‹m_li°
;

6363 
	mmax_gamma_8
;

6366 
≤g_byã
 
	mouçut_cﬁour_ty≥
;

6367 
≤g_byã
 
	mouçut_bô_dïth
;

6368 
≤g_byã
 
	mu≈acked
;

6371 
gama_modifiˇti⁄
 
	mgama_mod
;

6372 
chrm_modifiˇti⁄
 
	mchrm_mod
;

6373 
§gb_modifiˇti⁄
 
	m§gb_mod
;

6374 } 
	tå™sf‹m_di•œy
;

6378 
	$å™sf‹m_£t_ícodög
(
å™sf‹m_di•œy
 *
this
)

6383 
≤g_modifõr
 *
pm
 = 
this
->pm;

6385 
	`modifõr_£t_ícodög
(
pm
);

6387 i‡(
	`modifõr_cﬁ‹_ícodög_is_£t
(
pm
))

6389 i‡(
	`modifõr_cﬁ‹_ícodög_is_sRGB
(
pm
))

6390 
	`§gb_modifiˇti⁄_öô
(&
this
->
§gb_mod
, 
pm
, 
PNG_sRGB_INTENT_ABSOLUTE
);

6395 
	`gama_modifiˇti⁄_öô
(&
this
->
gama_mod
, 
pm
,Öm->
cuºít_gamma
);

6397 i‡(
pm
->
cuºít_ícodög
 != 0)

6398 
	`chrm_modifiˇti⁄_öô
(&
this
->
chrm_mod
, 
pm
,Öm->
cuºít_ícodög
);

6401 
	}
}

6405 
	$image_å™sf‹m_öi_íd
(c⁄° 
image_å™sf‹m
 *
this
,

6406 
å™sf‹m_di•œy
 *
th©
)

6408 
	`UNUSED
(
this
)

6409 
	`UNUSED
(
th©
)

6410 
	}
}

6413 
	$image_å™sf‹m_£t_íd
(c⁄° 
image_å™sf‹m
 *
this
,

6414 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

6416 
	`UNUSED
(
this
)

6417 
	`UNUSED
(
th©
)

6418 
	`UNUSED
(
µ
)

6419 
	`UNUSED
(
pi
)

6420 
	}
}

6426 
	$ßm∂e_sˇÀ
(
ßm∂e_vÆue
, 
sˇÀ
)

6428 
ßm∂e_vÆue
 = 
	`Êo‹
(ßm∂e_vÆuê* 
sˇÀ
 + .5);

6431 i‡(!(
ßm∂e_vÆue
 > 0))

6432 
ßm∂e_vÆue
 = 0;

6433 i‡(
ßm∂e_vÆue
 > 
sˇÀ
)

6434 
ßm∂e_vÆue
 = 
sˇÀ
;

6436  ()
ßm∂e_vÆue
;

6437 
	}
}

6440 
	$image_å™sf‹m_mod_íd
(c⁄° 
image_å™sf‹m
 *
this
, 
image_pixñ
 *
th©
,

6441 
≤g_c⁄°_°ru˘p
 
µ
, c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

6443 
sˇÀ
 = (1U<<
th©
->
ßm∂e_dïth
)-1;

6444 
sig_bôs
 = 
th©
->sig_bits;

6446 
	`UNUSED
(
this
)

6447 
	`UNUSED
(
µ
)

6448 
	`UNUSED
(
di•œy
)

6457 
th©
->
ªd
 = 
	`ßm∂e_sˇÀ
—h©->
ªdf
, 
sˇÀ
);

6463 i‡(
sig_bôs
 && 
th©
->
ªd_sBIT
 <Åh©->
ßm∂e_dïth
)

6464 
th©
->
ªd
 >>th©->
ßm∂e_dïth
 -Åh©->
ªd_sBIT
;

6476 
th©
->
ªde
 +1./(2*((1U<<th©->
ªd_sBIT
)-1));

6478 i‡(
th©
->
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
)

6480 
th©
->
gªí
 = 
	`ßm∂e_sˇÀ
—h©->
gªíf
, 
sˇÀ
);

6481 i‡(
sig_bôs
 && 
th©
->
gªí_sBIT
 <Åh©->
ßm∂e_dïth
)

6482 
th©
->
gªí
 >>th©->
ßm∂e_dïth
 -Åh©->
gªí_sBIT
;

6484 
th©
->
blue
 = 
	`ßm∂e_sˇÀ
—h©->
bluef
, 
sˇÀ
);

6485 i‡(
sig_bôs
 && 
th©
->
blue_sBIT
 <Åh©->
ßm∂e_dïth
)

6486 
th©
->
blue
 >>th©->
ßm∂e_dïth
 -Åh©->
blue_sBIT
;

6488 
th©
->
gªíe
 +1./(2*((1U<<th©->
gªí_sBIT
)-1));

6489 
th©
->
bluì
 +1./(2*((1U<<th©->
blue_sBIT
)-1));

6493 
th©
->
blue
 =Åh©->
gªí
 =Åh©->
ªd
;

6494 
th©
->
bluef
 =Åh©->
gªíf
 =Åh©->
ªdf
;

6495 
th©
->
bluì
 =Åh©->
gªíe
 =Åh©->
ªde
;

6498 i‡((
th©
->
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) ||

6499 
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

6501 
th©
->
Æpha
 = 
	`ßm∂e_sˇÀ
—h©->
Æphaf
, 
sˇÀ
);

6502 
th©
->
Æph´
 +1./(2*((1U<<th©->
Æpha_sBIT
)-1));

6506 
th©
->
Æpha
 = 
sˇÀ
;

6507 
th©
->
Æphaf
 = 1;

6508 
th©
->
Æph´
 = 0;

6511 i‡(
sig_bôs
 && 
th©
->
Æpha_sBIT
 <Åh©->
ßm∂e_dïth
)

6512 
th©
->
Æpha
 >>th©->
ßm∂e_dïth
 -Åh©->
Æpha_sBIT
;

6513 
	}
}

6516 
image_å™sf‹m
 
	gimage_å™sf‹m_íd
 =

6524 
image_å™sf‹m_öi_íd
,

6525 
image_å™sf‹m_£t_íd
,

6526 
image_å™sf‹m_mod_íd
,

6534 
	$å™sf‹m_di•œy_öô
(
å™sf‹m_di•œy
 *
dp
, 
≤g_modifõr
 *
pm
, 
≤g_uöt_32
 
id
,

6535 c⁄° 
image_å™sf‹m
 *
å™sf‹m_li°
)

6537 
	`mem£t
(
dp
, 0,  *dp);

6540 
	`°™d¨d_di•œy_öô
(&
dp
->
this
, &
pm
->this, 
id
, 
do_ªad_öãæa˚
,

6541 
pm
->
u£_upd©e_öfo
);

6544 
dp
->
pm
 =Öm;

6545 
dp
->
å™sf‹m_li°
 =Åransform_list;

6546 
dp
->
max_gamma_8
 = 16;

6549 
dp
->
ouçut_cﬁour_ty≥
 = 255;

6550 
dp
->
ouçut_bô_dïth
 = 255;

6551 
dp
->
u≈acked
 = 0;

6552 
	}
}

6555 
	$å™sf‹m_öfo_imp
(
å™sf‹m_di•œy
 *
dp
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

6558 
	`°™d¨d_öfo_∑π1
(&
dp
->
this
, 
µ
, 
pi
);

6561 
dp
->
å™sf‹m_li°
->
	`£t
(dp->å™sf‹m_li°, dp, 
µ
, 
pi
);

6565 
i
 = 
dp
->
this
.
u£_upd©e_öfo
;

6568 
	`≤g_ªad_upd©e_öfo
(
µ
, 
pi
);

6569 --
i
 > 0);

6573 
	`°™d¨d_öfo_∑π2
(&
dp
->
this
, 
µ
, 
pi
, 1 );

6576 
dp
->
ouçut_cﬁour_ty≥
 = 
	`≤g_gë_cﬁ‹_ty≥
(
µ
, 
pi
);

6577 
dp
->
ouçut_bô_dïth
 = 
	`≤g_gë_bô_dïth
(
µ
, 
pi
);

6582 i‡(
dp
->
ouçut_bô_dïth
 >= 8 &&

6583 (
dp
->
ouçut_cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

6584 
dp
->
ouçut_cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
Ë&& dp->
this
.
fûÀr
)

6585 
dp
->
ouçut_cﬁour_ty≥
 |= 4;

6591 
dp
->
ouçut_cﬁour_ty≥
)

6593 
PNG_COLOR_TYPE_PALETTE
:

6594 i‡(
dp
->
ouçut_bô_dïth
 > 8Ë
îr‹
;

6596 
PNG_COLOR_TYPE_GRAY
:

6597 i‡(
dp
->
ouçut_bô_dïth
 == 1 || dp->output_bit_depth == 2 ||

6598 
dp
->
ouçut_bô_dïth
 == 4)

6602 i‡(
dp
->
ouçut_bô_dïth
 == 8 || dp->output_bit_depth == 16)

6605 
îr‹
:

6607 
mesßge
[128];

6608 
size_t
 
pos
;

6610 
pos
 = 
	`ß„ˇt
(
mesßge
,  message, 0,

6612 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
dp
->
ouçut_cﬁour_ty≥
);

6613 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, ") with bit depth: ");

6614 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
dp
->
ouçut_bô_dïth
);

6616 
	`≤g_îr‹
(
µ
, 
mesßge
);

6625 
image_pixñ
 
ã°_pixñ
;

6627 
	`mem£t
(&
ã°_pixñ
, 0, Åest_pixel);

6628 
ã°_pixñ
.
cﬁour_ty≥
 = 
dp
->
this
.colour_type;

6629 
ã°_pixñ
.
bô_dïth
 = 
dp
->
this
.bit_depth;

6630 i‡(
ã°_pixñ
.
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

6631 
ã°_pixñ
.
ßm∂e_dïth
 = 8;

6633 
ã°_pixñ
.
ßm∂e_dïth
 =Åe°_pixñ.
bô_dïth
;

6637 
ã°_pixñ
.
have_tRNS
 = 
dp
->
this
.
is_å™•¨ít
 != 0;

6638 
ã°_pixñ
.
ªd_sBIT
 =Åe°_pixñ.
gªí_sBIT
 =Åe°_pixñ.
blue_sBIT
 =

6639 
ã°_pixñ
.
Æpha_sBIT
 =Åe°_pixñ.
ßm∂e_dïth
;

6641 
dp
->
å™sf‹m_li°
->
	`mod
(dp->å™sf‹m_li°, &
ã°_pixñ
, 
µ
, dp);

6643 i‡(
ã°_pixñ
.
cﬁour_ty≥
 !
dp
->
ouçut_cﬁour_ty≥
)

6645 
mesßge
[128];

6646 
size_t
 
pos
 = 
	`ß„ˇt
(
mesßge
,  message, 0, "colourÅype ");

6648 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
dp
->
ouçut_cﬁour_ty≥
);

6649 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, "Éxpected ");

6650 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
ã°_pixñ
.
cﬁour_ty≥
);

6652 
	`≤g_îr‹
(
µ
, 
mesßge
);

6655 i‡(
ã°_pixñ
.
bô_dïth
 !
dp
->
ouçut_bô_dïth
)

6657 
mesßge
[128];

6658 
size_t
 
pos
 = 
	`ß„ˇt
(
mesßge
,  message, 0, "bit depth ");

6660 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
dp
->
ouçut_bô_dïth
);

6661 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, "Éxpected ");

6662 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
ã°_pixñ
.
bô_dïth
);

6664 
	`≤g_îr‹
(
µ
, 
mesßge
);

6669 i‡(
ã°_pixñ
.
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 &&

6670 
ã°_pixñ
.
ßm∂e_dïth
 != 8)

6671 
	`≤g_îr‹
(
µ
, "pngvalid: internal:Öalette sample depthÇot 8");

6672 i‡(
dp
->
u≈acked
 && 
ã°_pixñ
.
bô_dïth
 != 8)

6673 
	`≤g_îr‹
(
µ
, "pngvalid: internal: bad unpackedÖixel depth");

6674 i‡(!
dp
->
u≈acked
 && 
ã°_pixñ
.
cﬁour_ty≥
 !
PNG_COLOR_TYPE_PALETTE


6675 && 
ã°_pixñ
.
bô_dïth
 !ã°_pixñ.
ßm∂e_dïth
)

6677 
mesßge
[128];

6678 
size_t
 
pos
 = 
	`ß„ˇt
(
mesßge
,  message, 0,

6685 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
ã°_pixñ
.
ßm∂e_dïth
);

6686 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, "Éxpected ");

6687 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
ã°_pixñ
.
bô_dïth
);

6689 
	`≤g_îr‹
(
µ
, 
mesßge
);

6691 i‡(
ã°_pixñ
.
bô_dïth
 !
dp
->
ouçut_bô_dïth
)

6696 
mesßge
[128];

6697 
size_t
 
pos
 = 
	`ß„ˇt
(
mesßge
,  message, 0,

6700 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
dp
->
ouçut_bô_dïth
);

6701 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, "Éxpected ");

6702 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
ã°_pixñ
.
bô_dïth
);

6704 
	`≤g_îr‹
(
µ
, 
mesßge
);

6707 
	}
}

6709 
PNGCBAPI


6710 
	$å™sf‹m_öfo
(
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

6712 
	`å™sf‹m_öfo_imp
(
	`voidˇ°
(
å™sf‹m_di•œy
*, 
	`≤g_gë_¥ogªssive_±r
(
µ
)),

6713 
µ
, 
pi
);

6714 
	}
}

6717 
	$å™sf‹m_ønge_check
(
≤g_c⁄°_°ru˘p
 
µ
, 
r
, 
g
,

6718 
b
, 
a
, 
ö_digôized
, 
ö
,

6719 
out
, 
≤g_byã
 
ßm∂e_dïth
, 
îr
, 
limô
,

6720 c⁄° *
«me
, 
digôiz©i⁄_îr‹
)

6728 
max
 = (1U<<
ßm∂e_dïth
)-1;

6729 
ö_mö
 = 
	`˚û
((
ö
-
îr
)*
max
 - 
digôiz©i⁄_îr‹
);

6730 
ö_max
 = 
	`Êo‹
((
ö
+
îr
)*
max
 + 
digôiz©i⁄_îr‹
);

6731 i‡(
	`debug⁄ly
(
îr
 > 
limô
 ||Ë!(
out
 >
ö_mö
 && ouà<
ö_max
))

6733 
mesßge
[256];

6734 
size_t
 
pos
;

6736 
pos
 = 
	`ß„ˇt
(
mesßge
,  mesßge, 0, 
«me
);

6737 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, " output valueÉrror:Ñgba(");

6738 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
r
);

6739 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, ",");

6740 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
g
);

6741 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, ",");

6742 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
b
);

6743 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, ",");

6744 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
a
);

6745 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, "): ");

6746 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
out
);

6747 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, "Éxpected: ");

6748 
pos
 = 
	`ß„ˇä
(
mesßge
,  mesßge,Öos, 
ö_digôized
);

6749 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, " (");

6750 
pos
 = 
	`ß„ˇtd
(
mesßge
,  mesßge,Öos, (
ö
-
îr
)*
max
, 3);

6751 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, "..");

6752 
pos
 = 
	`ß„ˇtd
(
mesßge
,  mesßge,Öos, (
ö
+
îr
)*
max
, 3);

6753 
pos
 = 
	`ß„ˇt
(
mesßge
,  message,Öos, ")");

6755 
	`≤g_îr‹
(
µ
, 
mesßge
);

6758 
	`UNUSED
(
limô
)

6759 
	}
}

6762 
	$å™sf‹m_image_vÆid©e
(
å™sf‹m_di•œy
 *
dp
, 
≤g_c⁄°_°ru˘p
 
µ
,

6763 
≤g_öf›
 
pi
)

6766 c⁄° 
≤g_°‹e
* c⁄° 
ps
 = 
dp
->
this
.ps;

6767 
≤g_byã
 
ö_˘
 = 
dp
->
this
.
cﬁour_ty≥
;

6768 
≤g_byã
 
ö_bd
 = 
dp
->
this
.
bô_dïth
;

6769 
≤g_uöt_32
 
w
 = 
dp
->
this
.w;

6770 
≤g_uöt_32
 
h
 = 
dp
->
this
.h;

6771 
≤g_byã
 
out_˘
 = 
dp
->
ouçut_cﬁour_ty≥
;

6772 
≤g_byã
 
out_bd
 = 
dp
->
ouçut_bô_dïth
;

6773 
≤g_byã
 
ßm∂e_dïth
 =

6774 (
≤g_byã
)(
out_˘
 =
PNG_COLOR_TYPE_PALETTE
 ? 8 : 
out_bd
);

6775 
≤g_byã
 
ªd_sBIT
 = 
dp
->
this
.red_sBIT;

6776 
≤g_byã
 
gªí_sBIT
 = 
dp
->
this
.green_sBIT;

6777 
≤g_byã
 
blue_sBIT
 = 
dp
->
this
.blue_sBIT;

6778 
≤g_byã
 
Æpha_sBIT
 = 
dp
->
this
.alpha_sBIT;

6779 
have_tRNS
 = 
dp
->
this
.
is_å™•¨ít
;

6780 
digôiz©i⁄_îr‹
;

6782 
°‹e_∑Àâe
 
out_∑Àâe
;

6783 
≤g_uöt_32
 
y
;

6785 
	`UNUSED
(
pi
)

6788 
	`°‹e_image_check
(
dp
->
this
.
ps
, 
µ
, 0);

6793 i‡(
out_˘
 =
PNG_COLOR_TYPE_PALETTE
)

6798 
≈Æëã
 = (-1);

6800 ()
	`ªad_∑Àâe
(
out_∑Àâe
, &
≈Æëã
, 
µ
, 
pi
);

6801 i‡(
≈Æëã
 !
dp
->
this
.npalette)

6802 
	`≤g_îr‹
(
µ
, "unexpected change inÖalette size");

6804 
digôiz©i⁄_îr‹
 = .5;

6808 
≤g_byã
 
ö_ßm∂e_dïth
;

6810 
	`mem£t
(
out_∑Àâe
, 0x5e,  out_palette);

6816 i‡(
ö_˘
 =
PNG_COLOR_TYPE_PALETTE
 || 
ö_bd
 < 16)

6817 
ö_ßm∂e_dïth
 = 8;

6819 
ö_ßm∂e_dïth
 = 
ö_bd
;

6821 i‡(
ßm∂e_dïth
 !16 || 
ö_ßm∂e_dïth
 > 8 ||

6822 !
dp
->
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
)

6823 
digôiz©i⁄_îr‹
 = .5;

6829 
digôiz©i⁄_îr‹
 = .5 * 257;

6832 
y
=0; y<
h
; ++y)

6834 
≤g_c⁄°_byãp
 c⁄° 
pRow
 = 
	`°‹e_image_row
(
ps
, 
µ
, 0, 
y
);

6835 
≤g_uöt_32
 
x
;

6838 
≤g_byã
 
°d
[
STANDARD_ROWMAX
];

6840 
	`å™sf‹m_row
(
µ
, 
°d
, 
ö_˘
, 
ö_bd
, 
y
);

6845 
x
=0; x<
w
; ++x)

6847 
image_pixñ
 
ö_pixñ
, 
out_pixñ
;

6848 
r
, 
g
, 
b
, 
a
;

6851 
	`image_pixñ_öô
(&
ö_pixñ
, 
°d
, 
ö_˘
, 
ö_bd
, 
x
, 
dp
->
this
.
∑Àâe
,

6852 
NULL
);

6854 
ö_pixñ
.
ªd_sBIT
 =Ñed_sBIT;

6855 
ö_pixñ
.
gªí_sBIT
 = green_sBIT;

6856 
ö_pixñ
.
blue_sBIT
 = blue_sBIT;

6857 
ö_pixñ
.
Æpha_sBIT
 =álpha_sBIT;

6858 
ö_pixñ
.
have_tRNS
 = have_tRNS != 0;

6861 
r
 = 
ö_pixñ
.
ªd
;

6862 
g
 = 
ö_pixñ
.
gªí
;

6863 
b
 = 
ö_pixñ
.
blue
;

6864 
a
 = 
ö_pixñ
.
Æpha
;

6870 
dp
->
å™sf‹m_li°
->
	`mod
(dp->å™sf‹m_li°, &
ö_pixñ
, 
µ
, dp);

6876 
	`image_pixñ_öô
(&
out_pixñ
, 
pRow
, 
out_˘
, 
out_bd
, 
x
, 
out_∑Àâe
,

6877 &
ö_pixñ
);

6882 i‡(
ö_˘
 =
PNG_COLOR_TYPE_PALETTE
 &&

6883 
out_˘
 =
PNG_COLOR_TYPE_PALETTE
)

6885 i‡(
ö_pixñ
.
∑Àâe_ödex
 !
out_pixñ
.palette_index)

6886 
	`≤g_îr‹
(
µ
, "unexpectedÅransformedÖalette index");

6892 i‡(
ö_pixñ
.
ªd
 !
out_pixñ
.red)

6893 
	`å™sf‹m_ønge_check
(
µ
, 
r
, 
g
, 
b
, 
a
, 
ö_pixñ
.
ªd
, in_pixñ.
ªdf
,

6894 
out_pixñ
.
ªd
, 
ßm∂e_dïth
, 
ö_pixñ
.
ªde
,

6895 
dp
->
pm
->
limô
 + 1./(2*((1U<<
ö_pixñ
.
ªd_sBIT
)-1)), "red/gray",

6896 
digôiz©i⁄_îr‹
);

6898 i‡((
out_˘
 & 
PNG_COLOR_MASK_COLOR
) != 0 &&

6899 
ö_pixñ
.
gªí
 !
out_pixñ
.green)

6900 
	`å™sf‹m_ønge_check
(
µ
, 
r
, 
g
, 
b
, 
a
, 
ö_pixñ
.
gªí
,

6901 
ö_pixñ
.
gªíf
, 
out_pixñ
.
gªí
, 
ßm∂e_dïth
, in_pixñ.
gªíe
,

6902 
dp
->
pm
->
limô
 + 1./(2*((1U<<
ö_pixñ
.
gªí_sBIT
)-1)), "green",

6903 
digôiz©i⁄_îr‹
);

6905 i‡((
out_˘
 & 
PNG_COLOR_MASK_COLOR
) != 0 &&

6906 
ö_pixñ
.
blue
 !
out_pixñ
.blue)

6907 
	`å™sf‹m_ønge_check
(
µ
, 
r
, 
g
, 
b
, 
a
, 
ö_pixñ
.
blue
, in_pixñ.
bluef
,

6908 
out_pixñ
.
blue
, 
ßm∂e_dïth
, 
ö_pixñ
.
bluì
,

6909 
dp
->
pm
->
limô
 + 1./(2*((1U<<
ö_pixñ
.
blue_sBIT
)-1)), "blue",

6910 
digôiz©i⁄_îr‹
);

6912 i‡((
out_˘
 & 
PNG_COLOR_MASK_ALPHA
) != 0 &&

6913 
ö_pixñ
.
Æpha
 !
out_pixñ
.alpha)

6914 
	`å™sf‹m_ønge_check
(
µ
, 
r
, 
g
, 
b
, 
a
, 
ö_pixñ
.
Æpha
,

6915 
ö_pixñ
.
Æphaf
, 
out_pixñ
.
Æpha
, 
ßm∂e_dïth
, in_pixñ.
Æph´
,

6916 
dp
->
pm
->
limô
 + 1./(2*((1U<<
ö_pixñ
.
Æpha_sBIT
)-1)), "alpha",

6917 
digôiz©i⁄_îr‹
);

6922 
dp
->
this
.
ps
->
vÆid©ed
 = 1;

6923 
	}
}

6925 
PNGCBAPI


6926 
	$å™sf‹m_íd
(
≤g_°ru˘p
 
µIn
, 
≤g_öf›
 
pi
)

6928 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

6929 
å™sf‹m_di•œy
 *
dp
 = 
	`voidˇ°
(transform_display*,

6930 
	`≤g_gë_¥ogªssive_±r
(
µ
));

6932 i‡(!
dp
->
this
.
•ìd
)

6933 
	`å™sf‹m_image_vÆid©e
(
dp
, 
µ
, 
pi
);

6935 
dp
->
this
.
ps
->
vÆid©ed
 = 1;

6936 
	}
}

6940 
	$å™sf‹m_ã°
(
≤g_modifõr
 *
pmIn
, 
≤g_uöt_32
 
idIn
,

6941 c⁄° 
image_å™sf‹m
* 
å™sf‹m_li°In
, c⁄° * c⁄° 
«me
)

6943 
å™sf‹m_di•œy
 
d
;

6944 
	`c⁄ãxt
(&
pmIn
->
this
, 
Áu…
);

6946 
	`å™sf‹m_di•œy_öô
(&
d
, 
pmIn
, 
idIn
, 
å™sf‹m_li°In
);

6948 
Try


6950 
size_t
 
pos
 = 0;

6951 
≤g_°ru˘p
 
µ
;

6952 
≤g_öf›
 
pi
;

6953 
fuŒ_«me
[256];

6958 
	`å™sf‹m_£t_ícodög
(&
d
);

6961 
d
.
å™sf‹m_li°
->
	`öi
(d.transform_list, &d);

6964 
pos
 = 
	`ß„ˇt
(
fuŒ_«me
,  fuŒ_«me,Öos, 
«me
);

6965 
pos
 = 
	`ß„ˇt_cuºít_ícodög
(
fuŒ_«me
,  fuŒ_«me,Öos, 
d
.
pm
);

6968 
µ
 = 
	`£t_modifõr_f‹_ªad
(
d
.
pm
, &
pi
, d.
this
.
id
, 
fuŒ_«me
);

6969 
	`°™d¨d_∑Àâe_öô
(&
d
.
this
);

6974 
buf„r
[256];

6976 ()
	`°‹e_mesßge
(&
d
.
pm
->
this
, 
µ
, 
buf„r
,  buffer, 0,

6979 
	`Ârötf
(
°dîr
, "%s\n", 
buf„r
);

6984 i‡(
d
.
pm
->
this
.
¥ogªssive
)

6987 
	`≤g_£t_¥ogªssive_ªad_‚
(
µ
, &
d
, 
å™sf‹m_öfo
, 
¥ogªssive_row
,

6988 
å™sf‹m_íd
);

6991 
	`modifõr_¥ogªssive_ªad
(
d
.
pm
, 
µ
, 
pi
);

6996 
	`≤g_£t_ªad_‚
(
µ
, 
d
.
pm
, 
modifõr_ªad
);

6999 
	`≤g_ªad_öfo
(
µ
, 
pi
);

7002 
	`å™sf‹m_öfo_imp
(&
d
, 
µ
, 
pi
);

7004 
	`£quítül_row
(&
d
.
this
, 
µ
, 
pi
, -1, 0);

7006 i‡(!
d
.
this
.
•ìd
)

7007 
	`å™sf‹m_image_vÆid©e
(&
d
, 
µ
, 
pi
);

7009 
d
.
this
.
ps
->
vÆid©ed
 = 1;

7012 
	`modifõr_ª£t
(
d
.
pm
);

7015 
	`C©ch
(
Áu…
)

7017 
	`modifõr_ª£t
(
	`voidˇ°
(
≤g_modifõr
*,(*)
Áu…
));

7019 
	}
}

7022 
	#ITSTRUCT
(
«me
Ë
image_å™sf‹m_
##
	)
name

7023 
	#ITDATA
(
«me
Ë
image_å™sf‹m_d©a_
##
	)
name

7024 
	#image_å™sf‹m_öi
 
image_å™sf‹m_deÁu…_öi


	)

7025 
	#IT
(
«me
)\

7026 
image_å™sf‹m
 
	`ITSTRUCT
(
«me
) =\

7030 &
PT
, \

7034 
image_å™sf‹m_öi
,\

7035 
image_å™sf‹m_≤g_£t_
##
«me
##
_£t
,\

7036 
image_å™sf‹m_≤g_£t_
##
«me
##
_mod
,\

7037 
image_å™sf‹m_≤g_£t_
##
«me
##
_add
\

7038 }

	)

7039 
	#PT
 
	`ITSTRUCT
(
íd
Ë

	)

7042 
image_å™sf‹m_deÁu…_öi
(c⁄° 
image_å™sf‹m
 *
this
,

7043 
å™sf‹m_di•œy
 *
th©
);

7046 
	$image_å™sf‹m_deÁu…_öi
(c⁄° 
image_å™sf‹m
 *
this
,

7047 
å™sf‹m_di•œy
 *
th©
)

7049 
this
->
√xt
->
	`öi
—his->√xt, 
th©
);

7050 
	}
}

7052 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


7054 
	$image_å™sf‹m_deÁu…_add
(
image_å™sf‹m
 *
this
,

7055 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7057 
	`UNUSED
(
cﬁour_ty≥
)

7058 
	`UNUSED
(
bô_dïth
)

7060 
this
->
√xt
 = *
th©
;

7061 *
th©
 = 
this
;

7064 
	}
}

7067 #ifde‡
PNG_READ_EXPAND_SUPPORTED


7070 
	$image_å™sf‹m_≤g_£t_∑Àâe_to_rgb_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7071 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7073 
	`≤g_£t_∑Àâe_to_rgb
(
µ
);

7074 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7075 
	}
}

7078 
	$image_å™sf‹m_≤g_£t_∑Àâe_to_rgb_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7079 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7080 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7082 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

7083 
	`image_pixñ_c⁄vît_PLTE
(
th©
);

7085 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7086 
	}
}

7089 
	$image_å™sf‹m_≤g_£t_∑Àâe_to_rgb_add
(
image_å™sf‹m
 *
this
,

7090 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7092 
	`UNUSED
(
bô_dïth
)

7094 
this
->
√xt
 = *
th©
;

7095 *
th©
 = 
this
;

7097  
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
;

7098 
	}
}

7100 
IT
(
∑Àâe_to_rgb
);

7101 #unde‡
PT


7102 
	#PT
 
	`ITSTRUCT
(
∑Àâe_to_rgb
)

	)

7105 #ifde‡
PNG_READ_EXPAND_SUPPORTED


7108 
	$image_å™sf‹m_≤g_£t_tRNS_to_Æpha_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7109 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7111 
	`≤g_£t_tRNS_to_Æpha
(
µ
);

7116 i‡(
th©
->
this
.
has_tRNS
)

7117 
th©
->
this
.
is_å™•¨ít
 = 1;

7119 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7120 
	}
}

7123 
	$image_å™sf‹m_≤g_£t_tRNS_to_Æpha_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7124 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7125 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7127 #i‡
PNG_LIBPNG_VER
 < 10700

7129 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

7130 
	`image_pixñ_c⁄vît_PLTE
(
th©
);

7136 i‡(
th©
->
have_tRNS
)

7137 #i‡
PNG_LIBPNG_VER
 >= 10700

7138 i‡(
th©
->
cﬁour_ty≥
 !
PNG_COLOR_TYPE_PALETTE
 &&

7139 (
th©
->
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) == 0)

7141 
	`image_pixñ_add_Æpha
(
th©
, &
di•œy
->
this
, 0 );

7143 #i‡
PNG_LIBPNG_VER
 < 10700

7147 i‡(
th©
->
bô_dïth
 < 8)

7148 
th©
->
bô_dïth
 =8;

7149 i‡(
th©
->
ßm∂e_dïth
 < 8)

7150 
th©
->
ßm∂e_dïth
 = 8;

7154 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7155 
	}
}

7158 
	$image_å™sf‹m_≤g_£t_tRNS_to_Æpha_add
(
image_å™sf‹m
 *
this
,

7159 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7161 
	`UNUSED
(
bô_dïth
)

7163 
this
->
√xt
 = *
th©
;

7164 *
th©
 = 
this
;

7172 #i‡
PNG_LIBPNG_VER
 >= 10700

7173 
cﬁour_ty≥
 !
PNG_COLOR_TYPE_PALETTE
 &&

7175 (
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) == 0;

7176 
	}
}

7178 
IT
(
tRNS_to_Æpha
);

7179 #unde‡
PT


7180 
	#PT
 
	`ITSTRUCT
(
tRNS_to_Æpha
)

	)

7183 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


7186 
	$image_å™sf‹m_≤g_£t_gøy_to_rgb_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7187 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7189 
	`≤g_£t_gøy_to_rgb
(
µ
);

7191 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7192 
	}
}

7195 
	$image_å™sf‹m_≤g_£t_gøy_to_rgb_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7196 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7197 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7204 i‡((
th©
->
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
Ë=0 &&Åh©->
have_tRNS
)

7205 
	`image_pixñ_add_Æpha
(
th©
, &
di•œy
->
this
, 0 );

7208 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

7211 i‡(
th©
->
bô_dïth
 < 8)

7212 
th©
->
ßm∂e_dïth
 =Åh©->
bô_dïth
 = 8;

7217 
th©
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

7220 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

7221 
th©
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_RGB_ALPHA
;

7223 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7224 
	}
}

7227 
	$image_å™sf‹m_≤g_£t_gøy_to_rgb_add
(
image_å™sf‹m
 *
this
,

7228 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7230 
	`UNUSED
(
bô_dïth
)

7232 
this
->
√xt
 = *
th©
;

7233 *
th©
 = 
this
;

7235  (
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
) == 0;

7236 
	}
}

7238 
IT
(
gøy_to_rgb
);

7239 #unde‡
PT


7240 
	#PT
 
	`ITSTRUCT
(
gøy_to_rgb
)

	)

7243 #ifde‡
PNG_READ_EXPAND_SUPPORTED


7246 
	$image_å™sf‹m_≤g_£t_ex∑nd_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7247 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7249 
	`≤g_£t_ex∑nd
(
µ
);

7251 i‡(
th©
->
this
.
has_tRNS
)

7252 
th©
->
this
.
is_å™•¨ít
 = 1;

7254 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7255 
	}
}

7258 
	$image_å™sf‹m_≤g_£t_ex∑nd_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7259 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7260 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7263 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

7264 
	`image_pixñ_c⁄vît_PLTE
(
th©
);

7265 i‡(
th©
->
bô_dïth
 < 8)

7266 
th©
->
ßm∂e_dïth
 =Åh©->
bô_dïth
 = 8;

7268 i‡(
th©
->
have_tRNS
)

7269 
	`image_pixñ_add_Æpha
(
th©
, &
di•œy
->
this
, 0 );

7271 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7272 
	}
}

7275 
	$image_å™sf‹m_≤g_£t_ex∑nd_add
(
image_å™sf‹m
 *
this
,

7276 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7278 
	`UNUSED
(
bô_dïth
)

7280 
this
->
√xt
 = *
th©
;

7281 *
th©
 = 
this
;

7286  (
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) == 0;

7287 
	}
}

7289 
IT
(
ex∑nd
);

7290 #unde‡
PT


7291 
	#PT
 
	`ITSTRUCT
(
ex∑nd
)

	)

7294 #ifde‡
PNG_READ_EXPAND_SUPPORTED


7299 
	$image_å™sf‹m_≤g_£t_ex∑nd_gøy_1_2_4_to_8_£t
(

7300 c⁄° 
image_å™sf‹m
 *
this
, 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
,

7301 
≤g_öf›
 
pi
)

7303 
	`≤g_£t_ex∑nd_gøy_1_2_4_to_8
(
µ
);

7305 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7306 
	}
}

7309 
	$image_å™sf‹m_≤g_£t_ex∑nd_gøy_1_2_4_to_8_mod
(

7310 c⁄° 
image_å™sf‹m
 *
this
, 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7311 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7313 #i‡
PNG_LIBPNG_VER
 < 10700

7314 
	`image_å™sf‹m_≤g_£t_ex∑nd_mod
(
this
, 
th©
, 
µ
, 
di•œy
);

7317 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
 &&

7318 
th©
->
bô_dïth
 < 8)

7319 
th©
->
ßm∂e_dïth
 =Åh©->
bô_dïth
 = 8;

7321 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7323 
	}
}

7326 
	$image_å™sf‹m_≤g_£t_ex∑nd_gøy_1_2_4_to_8_add
(
image_å™sf‹m
 *
this
,

7327 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7329 #i‡
PNG_LIBPNG_VER
 < 10700

7330  
	`image_å™sf‹m_≤g_£t_ex∑nd_add
(
this
, 
th©
, 
cﬁour_ty≥
,

7331 
bô_dïth
);

7333 
	`UNUSED
(
bô_dïth
)

7335 
this
->
√xt
 = *
th©
;

7336 *
th©
 = 
this
;

7341  
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
 && 
bô_dïth
 < 8;

7343 
	}
}

7345 
IT
(
ex∑nd_gøy_1_2_4_to_8
);

7346 #unde‡
PT


7347 
	#PT
 
	`ITSTRUCT
(
ex∑nd_gøy_1_2_4_to_8
)

	)

7350 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


7353 
	$image_å™sf‹m_≤g_£t_ex∑nd_16_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7354 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7356 
	`≤g_£t_ex∑nd_16
(
µ
);

7359 #i‡
PNG_LIBPNG_VER
 < 10700

7360 i‡(
th©
->
this
.
has_tRNS
)

7361 
th©
->
this
.
is_å™•¨ít
 = 1;

7364 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7365 
	}
}

7368 
	$image_å™sf‹m_≤g_£t_ex∑nd_16_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7369 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7370 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7375 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

7376 
	`image_pixñ_c⁄vît_PLTE
(
th©
);

7378 i‡(
th©
->
have_tRNS
)

7379 
	`image_pixñ_add_Æpha
(
th©
, &
di•œy
->
this
, 0 );

7381 i‡(
th©
->
bô_dïth
 < 16)

7382 
th©
->
ßm∂e_dïth
 =Åh©->
bô_dïth
 = 16;

7384 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7385 
	}
}

7388 
	$image_å™sf‹m_≤g_£t_ex∑nd_16_add
(
image_å™sf‹m
 *
this
,

7389 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7391 
	`UNUSED
(
cﬁour_ty≥
)

7393 
this
->
√xt
 = *
th©
;

7394 *
th©
 = 
this
;

7397  
bô_dïth
 < 16;

7398 
	}
}

7400 
IT
(
ex∑nd_16
);

7401 #unde‡
PT


7402 
	#PT
 
	`ITSTRUCT
(
ex∑nd_16
)

	)

7405 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


7408 
	$image_å™sf‹m_≤g_£t_sˇÀ_16_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7409 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7411 
	`≤g_£t_sˇÀ_16
(
µ
);

7412 #i‡
PNG_LIBPNG_VER
 < 10700

7414 
th©
->
max_gamma_8
 = 
PNG_MAX_GAMMA_8
;

7416 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7417 
	}
}

7420 
	$image_å™sf‹m_≤g_£t_sˇÀ_16_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7421 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7422 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7424 i‡(
th©
->
bô_dïth
 == 16)

7426 
th©
->
ßm∂e_dïth
 =Åh©->
bô_dïth
 = 8;

7427 i‡(
th©
->
ªd_sBIT
 > 8)Åhat->red_sBIT = 8;

7428 i‡(
th©
->
gªí_sBIT
 > 8)Åhat->green_sBIT = 8;

7429 i‡(
th©
->
blue_sBIT
 > 8)Åhat->blue_sBIT = 8;

7430 i‡(
th©
->
Æpha_sBIT
 > 8)Åhat->alpha_sBIT = 8;

7433 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7434 
	}
}

7437 
	$image_å™sf‹m_≤g_£t_sˇÀ_16_add
(
image_å™sf‹m
 *
this
,

7438 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7440 
	`UNUSED
(
cﬁour_ty≥
)

7442 
this
->
√xt
 = *
th©
;

7443 *
th©
 = 
this
;

7445  
bô_dïth
 > 8;

7446 
	}
}

7448 
IT
(
sˇÀ_16
);

7449 #unde‡
PT


7450 
	#PT
 
	`ITSTRUCT
(
sˇÀ_16
)

	)

7453 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


7456 
	$image_å™sf‹m_≤g_£t_°rù_16_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7457 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7459 
	`≤g_£t_°rù_16
(
µ
);

7460 #i‡
PNG_LIBPNG_VER
 < 10700

7462 
th©
->
max_gamma_8
 = 
PNG_MAX_GAMMA_8
;

7464 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7465 
	}
}

7468 
	$image_å™sf‹m_≤g_£t_°rù_16_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7469 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7470 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7472 i‡(
th©
->
bô_dïth
 == 16)

7474 
th©
->
ßm∂e_dïth
 =Åh©->
bô_dïth
 = 8;

7475 i‡(
th©
->
ªd_sBIT
 > 8)Åhat->red_sBIT = 8;

7476 i‡(
th©
->
gªí_sBIT
 > 8)Åhat->green_sBIT = 8;

7477 i‡(
th©
->
blue_sBIT
 > 8)Åhat->blue_sBIT = 8;

7478 i‡(
th©
->
Æpha_sBIT
 > 8)Åhat->alpha_sBIT = 8;

7484 #ifde‡
PNG_READ_ACCURATE_SCALE_SUPPORTED


7485 #i‡
PNG_LIBPNG_VER
 >= 10504

7486 #îr‹ 
PNG_READ_ACCURATE_SCALE
 
should
 
nŸ
 
be
 
£t


7495 c⁄° 
d
 = (255-128.5)/65535;

7496 
th©
->
ªde
 +
d
;

7497 
th©
->
gªíe
 +
d
;

7498 
th©
->
bluì
 +
d
;

7499 
th©
->
Æph´
 +
d
;

7504 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7505 
	}
}

7508 
	$image_å™sf‹m_≤g_£t_°rù_16_add
(
image_å™sf‹m
 *
this
,

7509 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7511 
	`UNUSED
(
cﬁour_ty≥
)

7513 
this
->
√xt
 = *
th©
;

7514 *
th©
 = 
this
;

7516  
bô_dïth
 > 8;

7517 
	}
}

7519 
IT
(
°rù_16
);

7520 #unde‡
PT


7521 
	#PT
 
	`ITSTRUCT
(
°rù_16
)

	)

7524 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


7527 
	$image_å™sf‹m_≤g_£t_°rù_Æpha_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7528 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7530 
	`≤g_£t_°rù_Æpha
(
µ
);

7531 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7532 
	}
}

7535 
	$image_å™sf‹m_≤g_£t_°rù_Æpha_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7536 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7537 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7539 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

7540 
th©
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_GRAY
;

7541 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

7542 
th©
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

7544 
th©
->
have_tRNS
 = 0;

7545 
th©
->
Æphaf
 = 1;

7547 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

7548 
	}
}

7551 
	$image_å™sf‹m_≤g_£t_°rù_Æpha_add
(
image_å™sf‹m
 *
this
,

7552 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

7554 
	`UNUSED
(
bô_dïth
)

7556 
this
->
√xt
 = *
th©
;

7557 *
th©
 = 
this
;

7559  (
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0;

7560 
	}
}

7562 
IT
(
°rù_Æpha
);

7563 #unde‡
PT


7564 
	#PT
 
	`ITSTRUCT
(
°rù_Æpha
)

	)

7567 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


7585 
	#d©a
 
	`ITDATA
(
rgb_to_gøy
)

	)

7588 
	mgamma
;

7591 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


7592 
	mªd_to_£t
;

7593 
	mgªí_to_£t
;

7595 
≤g_fixed_poöt
 
	mªd_to_£t
;

7596 
≤g_fixed_poöt
 
	mgªí_to_£t
;

7600 
	mªd_c€fficõ¡
;

7601 
	mgªí_c€fficõ¡
;

7602 
	mblue_c€fficõ¡
;

7605 
	mc€fficõ¡s_ovîriddí
;

7606 } 
	gd©a
;

7608 #unde‡
image_å™sf‹m_öi


7609 
	#image_å™sf‹m_öi
 
image_å™sf‹m_≤g_£t_rgb_to_gøy_öi


	)

7611 
	$image_å™sf‹m_≤g_£t_rgb_to_gøy_öi
(c⁄° 
image_å™sf‹m
 *
this
,

7612 
å™sf‹m_di•œy
 *
th©
)

7614 
≤g_modifõr
 *
pm
 = 
th©
->pm;

7615 c⁄° 
cﬁ‹_ícodög
 *
e
 = 
pm
->
cuºít_ícodög
;

7617 
	`UNUSED
(
this
)

7620 
pm
->
ã°_u£s_ícodög
 = 1;

7625 i‡(
e
 != 0)

7630 c⁄° 
whôeY
 = 
e
->
ªd
.
Y
 +É->
gªí
.Y +É->
blue
.Y;

7632 
d©a
.
ªd_c€fficõ¡
 = 
e
->
ªd
.
Y
;

7633 
d©a
.
gªí_c€fficõ¡
 = 
e
->
gªí
.
Y
;

7634 
d©a
.
blue_c€fficõ¡
 = 
e
->
blue
.
Y
;

7636 i‡(
whôeY
 != 1)

7638 
d©a
.
ªd_c€fficõ¡
 /
whôeY
;

7639 
d©a
.
gªí_c€fficõ¡
 /
whôeY
;

7640 
d©a
.
blue_c€fficõ¡
 /
whôeY
;

7647 #i‡
PNG_LIBPNG_VER
 < 10700

7648 
d©a
.
ªd_c€fficõ¡
 = 6968 / 32768.;

7649 
d©a
.
gªí_c€fficõ¡
 = 23434 / 32768.;

7650 
d©a
.
blue_c€fficõ¡
 = 2366 / 32768.;

7652 
d©a
.
ªd_c€fficõ¡
 = .2126;

7653 
d©a
.
gªí_c€fficõ¡
 = .7152;

7654 
d©a
.
blue_c€fficõ¡
 = .0722;

7658 
d©a
.
gamma
 = 
pm
->
cuºít_gamma
;

7661 i‡(
d©a
.
gamma
 == 0)

7662 
d©a
.
gamma
 = 1;

7668 i‡(
pm
->
ã°_exhau°ive
)

7674 
d©a
.
c€fficõ¡s_ovîriddí
 = !data.coefficients_overridden;

7675 
pm
->
ª≥©
 = 
d©a
.
c€fficõ¡s_ovîriddí
 != 0;

7679 
d©a
.
c€fficõ¡s_ovîriddí
 = 
	`øndom_choi˚
();

7681 i‡(
d©a
.
c€fficõ¡s_ovîriddí
)

7686 
≤g_uöt_32
 
ru
;

7687 
tŸÆ
;

7689 
ru
 = 
	`øndom_u32
();

7690 
d©a
.
gªí_c€fficõ¡
 = 
tŸÆ
 = (
ru
 & 0xffff) / 65535.;

7691 
ru
 >>= 16;

7692 
d©a
.
ªd_c€fficõ¡
 = (1 - 
tŸÆ
Ë* (
ru
 & 0xffff) / 65535.;

7693 
tŸÆ
 +
d©a
.
ªd_c€fficõ¡
;

7694 
d©a
.
blue_c€fficõ¡
 = 1 - 
tŸÆ
;

7696 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


7697 
d©a
.
ªd_to_£t
 = d©a.
ªd_c€fficõ¡
;

7698 
d©a
.
gªí_to_£t
 = d©a.
gªí_c€fficõ¡
;

7700 
d©a
.
ªd_to_£t
 = 
	`fix
(d©a.
ªd_c€fficõ¡
);

7701 
d©a
.
gªí_to_£t
 = 
	`fix
(d©a.
gªí_c€fficõ¡
);

7705 
pm
->
ícodög_ign‹ed
 = 1;

7710 
d©a
.
ªd_to_£t
 = -1;

7711 
d©a
.
gªí_to_£t
 = -1;

7717 i‡(
d©a
.
gamma
 != 1)

7719 i‡(
th©
->
this
.
bô_dïth
 =16 || 
pm
->
assume_16_bô_ˇlcuœti⁄s
)

7730 #i‡
PNG_LIBPNG_VER
 < 10700

7731 i‡(
th©
->
this
.
bô_dïth
 < 16)

7732 
th©
->
max_gamma_8
 = 
PNG_MAX_GAMMA_8
;

7734 
th©
->
pm
->
limô
 +
	`pow
(

7735 (
th©
->
this
.
bô_dïth
 =16 ||Åh©->
max_gamma_8
 > 14 ?

7737 6. + (1<<(15-
th©
->
max_gamma_8
))

7738 )/65535, 
d©a
.
gamma
);

7753 #i‡
DIGITIZE


7754 
th©
->
pm
->
limô
 +
	`pow
–2.0/255, 
d©a
.
gamma
);

7756 
th©
->
pm
->
limô
 +
	`pow
–1.0/255, 
d©a
.
gamma
);

7766 i‡(
th©
->
this
.
bô_dïth
 !16 && !
pm
->
assume_16_bô_ˇlcuœti⁄s
)

7767 
th©
->
pm
->
limô
 += 4E-3;

7769 
	}
}

7772 
	$image_å™sf‹m_≤g_£t_rgb_to_gøy_£t
(c⁄° 
image_å™sf‹m
 *
this
,

7773 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

7775 
îr‹_a˘i⁄
 = 1;

7777 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


7778 
	`≤g_£t_rgb_to_gøy
(
µ
, 
îr‹_a˘i⁄
, 
d©a
.
ªd_to_£t
, d©a.
gªí_to_£t
);

7780 
	`≤g_£t_rgb_to_gøy_fixed
(
µ
, 
îr‹_a˘i⁄
, 
d©a
.
ªd_to_£t
,

7781 
d©a
.
gªí_to_£t
);

7784 #ifde‡
PNG_READ_cHRM_SUPPORTED


7785 i‡(
th©
->
pm
->
cuºít_ícodög
 != 0)

7792 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


7793 
	#API_fun˘i⁄
 
≤g_gë_cHRM_XYZ


	)

7794 
	#API_f‹m
 "FP"

	)

7795 
	#API_ty≥
 

	)

7796 
	#API_cvt
(
x
Ë(x)

	)

7798 
	#API_fun˘i⁄
 
≤g_gë_cHRM_XYZ_fixed


	)

7799 
	#API_f‹m
 "fixed"

	)

7800 
	#API_ty≥
 
≤g_fixed_poöt


	)

7801 
	#API_cvt
(
x
Ë(()(x)/
PNG_FP_1
)

	)

7804 
API_ty≥
 
rX
, 
gX
, 
bX
;

7805 
API_ty≥
 
rY
, 
gY
, 
bY
;

7806 
API_ty≥
 
rZ
, 
gZ
, 
bZ
;

7808 i‡((
	`API_fun˘i⁄
(
µ
, 
pi
, &
rX
, &
rY
, &
rZ
, &
gX
, &
gY
, &
gZ
, &
bX
, &
bY
, &
bZ
)

7809 & 
PNG_INFO_cHRM
) != 0)

7811 
maxe
;

7812 c⁄° *
ñ
;

7813 
cﬁ‹_ícodög
 
e
, 
o
;

7818 
	`modifõr_cuºít_ícodög
(
th©
->
pm
, &
o
);

7819 
	`n‹mÆize_cﬁ‹_ícodög
(&
o
);

7825 i‡(
d©a
.
ªd_to_£t
 =-1 && d©a.
gªí_to_£t
 == -1 &&

7826 (
	`Ábs
(
o
.
ªd
.
Y
 - 
d©a
.
ªd_c€fficõ¡
Ë> 
DBL_EPSILON
 ||

7827 
	`Ábs
(
o
.
gªí
.
Y
 - 
d©a
.
gªí_c€fficõ¡
Ë> 
DBL_EPSILON
 ||

7828 
	`Ábs
(
o
.
blue
.
Y
 - 
d©a
.
blue_c€fficõ¡
Ë> 
DBL_EPSILON
))

7829 
	`≤g_îr‹
(
µ
, "internalÖngvalid cHRM coefficientÉrror");

7832 
e
.
gamma
 = 
o
.gamma;

7833 
e
.
ªd
.
X
 = 
	`API_cvt
(
rX
);

7834 
e
.
ªd
.
Y
 = 
	`API_cvt
(
rY
);

7835 
e
.
ªd
.
Z
 = 
	`API_cvt
(
rZ
);

7836 
e
.
gªí
.
X
 = 
	`API_cvt
(
gX
);

7837 
e
.
gªí
.
Y
 = 
	`API_cvt
(
gY
);

7838 
e
.
gªí
.
Z
 = 
	`API_cvt
(
gZ
);

7839 
e
.
blue
.
X
 = 
	`API_cvt
(
bX
);

7840 
e
.
blue
.
Y
 = 
	`API_cvt
(
bY
);

7841 
e
.
blue
.
Z
 = 
	`API_cvt
(
bZ
);

7846 
maxe
 = 0;

7847 
ñ
 = "-";

7849 
	#CHECK
(
cﬁ
,
x
)\

7851 
îr
 = 
	`Ábs
(
o
.
cﬁ
.
x
 - 
e
.col.x);\

7852 i‡(
îr
 > 
maxe
)\

7854 
maxe
 = 
îr
;\

7855 
ñ
 = #col "(" #x ")";\

7857 }

	)

7859 
	`CHECK
(
ªd
,
X
)

7860 
	`CHECK
(
ªd
,
Y
)

7861 
	`CHECK
(
ªd
,
Z
)

7862 
	`CHECK
(
gªí
,
X
)

7863 
	`CHECK
(
gªí
,
Y
)

7864 
	`CHECK
(
gªí
,
Z
)

7865 
	`CHECK
(
blue
,
X
)

7866 
	`CHECK
(
blue
,
Y
)

7867 
	`CHECK
(
blue
,
Z
)

7873 i‡(
maxe
 >= 1E-5)

7875 
size_t
 
pos
 = 0;

7876 
buf„r
[256];

7878 
pos
 = 
	`ß„ˇt
(
buf„r
,  buf„r,Öos, 
API_f‹m
);

7879 
pos
 = 
	`ß„ˇt
(
buf„r
,  buffer,Öos, " cHRM ");

7880 
pos
 = 
	`ß„ˇt
(
buf„r
,  buf„r,Öos, 
ñ
);

7881 
pos
 = 
	`ß„ˇt
(
buf„r
,  buffer,Öos, "Érror: ");

7882 
pos
 = 
	`ß„ˇtd
(
buf„r
,  buf„r,Öos, 
maxe
, 7);

7883 
pos
 = 
	`ß„ˇt
(
buf„r
,  buffer,Öos, " ");

7885 
pos
 = 
	`ß„ˇt_cﬁ‹_ícodög
(
buf„r
,  buf„r,Öos, &
o
, 0);

7886 
pos
 = 
	`ß„ˇt
(
buf„r
,  buffer,Öos, " -> ");

7887 
pos
 = 
	`ß„ˇt_cﬁ‹_ícodög
(
buf„r
,  buf„r,Öos, &
e
, 0);

7889 
	`≤g_îr‹
(
µ
, 
buf„r
);

7895 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

7896 
	}
}

7899 
	$image_å™sf‹m_≤g_£t_rgb_to_gøy_mod
(c⁄° 
image_å™sf‹m
 *
this
,

7900 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

7901 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

7903 i‡((
th©
->
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

7905 
gøy
, 
îr
;

7907 #i‡
PNG_LIBPNG_VER
 < 10700

7908 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

7909 
	`image_pixñ_c⁄vît_PLTE
(
th©
);

7913 #i‡
DIGITIZE


7915 
≤g_modifõr
 *
pm
 = 
di•œy
->pm;

7916 
ßm∂e_dïth
 = 
th©
->sample_depth;

7917 
ˇlc_dïth
 = (
pm
->
assume_16_bô_ˇlcuœti⁄s
 ? 16 :

7918 
ßm∂e_dïth
);

7919 
gamma_dïth
 =

7920 (
ßm∂e_dïth
 == 16 ?

7921 
di•œy
->
max_gamma_8
 :

7922 (
pm
->
assume_16_bô_ˇlcuœti⁄s
 ?

7923 
di•œy
->
max_gamma_8
 :

7924 
ßm∂e_dïth
));

7925 
isgøy
;

7926 
r
, 
g
, 
b
;

7927 
æo
, 
rhi
, 
glo
, 
ghi
, 
blo
, 
bhi
, 
gøylo
, 
gøyhi
;

7943 
	#DD
(
v
,
d
,
r
Ë(
	`digôize
(v*(1-
DBL_EPSILON
), d,ÑË* (1-DBL_EPSILON))

	)

7944 
	#DU
(
v
,
d
,
r
Ë(
	`digôize
(v*(1+
DBL_EPSILON
), d,ÑË* (1+DBL_EPSILON))

	)

7946 
r
 = 
æo
 = 
rhi
 = 
th©
->
ªdf
;

7947 
æo
 -
th©
->
ªde
;

7948 
æo
 = 
	`DD
‘lo, 
ˇlc_dïth
, 1 );

7949 
rhi
 +
th©
->
ªde
;

7950 
rhi
 = 
	`DU
‘hi, 
ˇlc_dïth
, 1 );

7952 
g
 = 
glo
 = 
ghi
 = 
th©
->
gªíf
;

7953 
glo
 -
th©
->
gªíe
;

7954 
glo
 = 
	`DD
(glo, 
ˇlc_dïth
, 1 );

7955 
ghi
 +
th©
->
gªíe
;

7956 
ghi
 = 
	`DU
(ghi, 
ˇlc_dïth
, 1 );

7958 
b
 = 
blo
 = 
bhi
 = 
th©
->
bluef
;

7959 
blo
 -
th©
->
bluì
;

7960 
blo
 = 
	`DD
(blo, 
ˇlc_dïth
, 1 );

7961 
bhi
 +
th©
->
bluì
;

7962 
bhi
 = 
	`DU
(bhi, 
ˇlc_dïth
, 1 );

7964 
isgøy
 = 
r
==
g
 && g==
b
;

7966 i‡(
d©a
.
gamma
 != 1)

7968 c⁄° 
powî
 = 1/
d©a
.
gamma
;

7969 c⁄° 
ab£
 = .5/(
ßm∂e_dïth
 == 16 ? 65535 : 255);

7975 i‡(
gamma_dïth
 !
ˇlc_dïth
)

7977 
æo
 = 
	`DD
‘lo, 
gamma_dïth
, 0 );

7978 
rhi
 = 
	`DU
‘hi, 
gamma_dïth
, 0 );

7979 
glo
 = 
	`DD
(glo, 
gamma_dïth
, 0 );

7980 
ghi
 = 
	`DU
(ghi, 
gamma_dïth
, 0 );

7981 
blo
 = 
	`DD
(blo, 
gamma_dïth
, 0 );

7982 
bhi
 = 
	`DU
(bhi, 
gamma_dïth
, 0 );

7986 
r
 = 
	`pow
‘, 
powî
);

7987 
æo
 = 
	`DD
(
	`pow
‘lo, 
powî
)-
ab£
, 
ˇlc_dïth
, 1);

7988 
rhi
 = 
	`DU
(
	`pow
‘hi, 
powî
)+
ab£
, 
ˇlc_dïth
, 1);

7990 
g
 = 
	`pow
(g, 
powî
);

7991 
glo
 = 
	`DD
(
	`pow
(glo, 
powî
)-
ab£
, 
ˇlc_dïth
, 1);

7992 
ghi
 = 
	`DU
(
	`pow
(ghi, 
powî
)+
ab£
, 
ˇlc_dïth
, 1);

7994 
b
 = 
	`pow
(b, 
powî
);

7995 
blo
 = 
	`DD
(
	`pow
(blo, 
powî
)-
ab£
, 
ˇlc_dïth
, 1);

7996 
bhi
 = 
	`DU
(
	`pow
(bhi, 
powî
)+
ab£
, 
ˇlc_dïth
, 1);

8009 
gøy
 = 
r
 * 
d©a
.
ªd_c€fficõ¡
 + 
g
 * d©a.
gªí_c€fficõ¡
 +

8010 
b
 * 
d©a
.
blue_c€fficõ¡
;

8013 
do_round
 = 
d©a
.
gamma
 !1 || 
ˇlc_dïth
 == 16;

8014 c⁄° 
˚
 = 2. / 32768;

8016 
gøylo
 = 
	`DD
(
æo
 * (
d©a
.
ªd_c€fficõ¡
-
˚
) +

8017 
glo
 * (
d©a
.
gªí_c€fficõ¡
-
˚
) +

8018 
blo
 * (
d©a
.
blue_c€fficõ¡
-
˚
), 
ˇlc_dïth
, 
do_round
);

8019 i‡(
gøylo
 > 
gøy
)

8020 
gøylo
 = 
gøy
;

8022 
gøyhi
 = 
	`DU
(
rhi
 * (
d©a
.
ªd_c€fficõ¡
+
˚
) +

8023 
ghi
 * (
d©a
.
gªí_c€fficõ¡
+
˚
) +

8024 
bhi
 * (
d©a
.
blue_c€fficõ¡
+
˚
), 
ˇlc_dïth
, 
do_round
);

8025 i‡(
gøyhi
 < 
gøy
)

8026 
gøyhi
 = 
gøy
;

8030 i‡(
d©a
.
gamma
 != 1)

8032 c⁄° 
powî
 = 
d©a
.
gamma
;

8035 i‡(
gamma_dïth
 !
ßm∂e_dïth
)

8037 
æo
 = 
	`DD
‘lo, 
gamma_dïth
, 0 );

8038 
rhi
 = 
	`DU
‘hi, 
gamma_dïth
, 0 );

8039 
glo
 = 
	`DD
(glo, 
gamma_dïth
, 0 );

8040 
ghi
 = 
	`DU
(ghi, 
gamma_dïth
, 0 );

8041 
blo
 = 
	`DD
(blo, 
gamma_dïth
, 0 );

8042 
bhi
 = 
	`DU
(bhi, 
gamma_dïth
, 0 );

8045 
gøy
 = 
	`pow
(gøy, 
powî
);

8046 
gøylo
 = 
	`DD
(
	`pow
(gøylo, 
powî
), 
ßm∂e_dïth
, 1);

8047 
gøyhi
 = 
	`DU
(
	`pow
(gøyhi, 
powî
), 
ßm∂e_dïth
, 1);

8050 #unde‡
DD


8051 #unde‡
DU


8058 i‡(
isgøy
)

8059 
îr
 = (
th©
->
ªde
 +Åh©->
gªíe
 +Åh©->
bluì
)/3;

8063 
îr
 = 
	`Ábs
(
gøyhi
-
gøy
);

8065 i‡(
	`Ábs
(
gøy
 - 
gøylo
Ë> 
îr
)

8066 
îr
 = 
	`Ábs
(
gøylo
-
gøy
);

8068 #i‡!
RELEASE_BUILD


8070 i‡(
îr
 > 
pm
->
limô
)

8072 
size_t
 
pos
 = 0;

8073 
buf„r
[128];

8075 
pos
 = 
	`ß„ˇt
(
buf„r
,  buffer,Öos, "rgb_to_grayÉrror ");

8076 
pos
 = 
	`ß„ˇtd
(
buf„r
,  buf„r,Öos, 
îr
, 6);

8077 
pos
 = 
	`ß„ˇt
(
buf„r
,  buffer,Öos, "ÉxceedsÜimit ");

8078 
pos
 = 
	`ß„ˇtd
(
buf„r
,  buf„r,Öos, 
pm
->
limô
, 6);

8079 
	`≤g_w¨nög
(
µ
, 
buf„r
);

8080 
pm
->
limô
 = 
îr
;

8087 
r
 = 
th©
->
ªdf
;

8088 
ª
 = 
th©
->
ªde
;

8089 
g
 = 
th©
->
gªíf
;

8090 
ge
 = 
th©
->
gªíe
;

8091 
b
 = 
th©
->
bluef
;

8092 
be
 = 
th©
->
bluì
;

8094 #i‡
PNG_LIBPNG_VER
 < 10700

8098 i‡(
r
 =
g
 &&Ñ =
b
)

8100 
gøy
 = 
r
;

8101 
îr
 = 
ª
;

8102 i‡(
îr
 < 
ge
)Érr = ge;

8103 i‡(
îr
 < 
be
)Érr = be;

8108 i‡(
d©a
.
gamma
 == 1)

8130 
gøy
 = 
r
 * 
d©a
.
ªd_c€fficõ¡
 + 
g
 * d©a.
gªí_c€fficõ¡
 +

8131 
b
 * 
d©a
.
blue_c€fficõ¡
;

8132 
îr
 = 
ª
 * 
d©a
.
ªd_c€fficõ¡
 + 
ge
 * d©a.
gªí_c€fficõ¡
 +

8133 
be
 * 
d©a
.
blue_c€fficõ¡
 + 2./32768 + 
gøy
 * 5 * 
DBL_EPSILON
;

8144 
≤g_modifõr
 *
pm
 = 
di•œy
->pm;

8145 
ö_qe
 = (
th©
->
ßm∂e_dïth
 > 8 ? .5/65535 : .5/255);

8146 
out_qe
 = (
th©
->
ßm∂e_dïth
 > 8 ? .5/65535 :

8147 (
pm
->
assume_16_bô_ˇlcuœti⁄s
 ? .5/(1<<
di•œy
->
max_gamma_8
) :

8149 
rhi
, 
ghi
, 
bhi
, 
gøyhi
;

8150 
g1
 = 1/
d©a
.
gamma
;

8152 
rhi
 = 
r
 + 
ª
 + 
ö_qe
; if (rhi > 1)Ñhi = 1;

8153 
r
 -
ª
 + 
ö_qe
; if (r < 0)Ñ = 0;

8154 
ghi
 = 
g
 + 
ge
 + 
ö_qe
; if (ghi > 1) ghi = 1;

8155 
g
 -
ge
 + 
ö_qe
; if (g < 0) g = 0;

8156 
bhi
 = 
b
 + 
be
 + 
ö_qe
; if (bhi > 1) bhi = 1;

8157 
b
 -
be
 + 
ö_qe
; if (b < 0) b = 0;

8159 
r
 = 
	`pow
‘, 
g1
)*(1-
DBL_EPSILON
); 
rhi
 =Öow(rhi, g1)*(1+DBL_EPSILON);

8160 
g
 = 
	`pow
(g, 
g1
)*(1-
DBL_EPSILON
); 
ghi
 =Öow(ghi, g1)*(1+DBL_EPSILON);

8161 
b
 = 
	`pow
(b, 
g1
)*(1-
DBL_EPSILON
); 
bhi
 =Öow(bhi, g1)*(1+DBL_EPSILON);

8167 
gøy
 = 
r
 * 
d©a
.
ªd_c€fficõ¡
 + 
g
 * d©a.
gªí_c€fficõ¡
 +

8168 
b
 * 
d©a
.
blue_c€fficõ¡
 - 2./32768 - 
out_qe
;

8169 i‡(
gøy
 <= 0)

8170 
gøy
 = 0;

8173 
gøy
 *(1 - 6 * 
DBL_EPSILON
);

8174 
gøy
 = 
	`pow
(gøy, 
d©a
.
gamma
Ë* (1-
DBL_EPSILON
);

8177 
gøyhi
 = 
rhi
 * 
d©a
.
ªd_c€fficõ¡
 + 
ghi
 * d©a.
gªí_c€fficõ¡
 +

8178 
bhi
 * 
d©a
.
blue_c€fficõ¡
 + 2./32768 + 
out_qe
;

8179 
gøyhi
 *(1 + 6 * 
DBL_EPSILON
);

8180 i‡(
gøyhi
 >= 1)

8181 
gøyhi
 = 1;

8183 
gøyhi
 = 
	`pow
(gøyhi, 
d©a
.
gamma
Ë* (1+
DBL_EPSILON
);

8185 
îr
 = (
gøyhi
 - 
gøy
) / 2;

8186 
gøy
 = (
gøyhi
 + gray) / 2;

8188 i‡(
îr
 <
ö_qe
)

8189 
îr
 = 
gøy
 * 
DBL_EPSILON
;

8192 
îr
 -
ö_qe
;

8194 #i‡!
RELEASE_BUILD


8198 i‡(
îr
 > 
pm
->
limô
)

8200 
size_t
 
pos
 = 0;

8201 
buf„r
[128];

8203 
pos
 = 
	`ß„ˇt
(
buf„r
,  buffer,Öos, "rgb_to_grayÉrror ");

8204 
pos
 = 
	`ß„ˇtd
(
buf„r
,  buf„r,Öos, 
îr
, 6);

8205 
pos
 = 
	`ß„ˇt
(
buf„r
,  buffer,Öos, "ÉxceedsÜimit ");

8206 
pos
 = 
	`ß„ˇtd
(
buf„r
,  buf„r,Öos, 
pm
->
limô
, 6);

8207 
	`≤g_w¨nög
(
µ
, 
buf„r
);

8208 
pm
->
limô
 = 
îr
;

8215 
th©
->
bluef
 =Åh©->
gªíf
 =Åh©->
ªdf
 = 
gøy
;

8216 
th©
->
bluì
 =Åh©->
gªíe
 =Åh©->
ªde
 = 
îr
;

8219 i‡(
th©
->
ªd_sBIT
 >Åh©->
gªí_sBIT
)

8220 
th©
->
ªd_sBIT
 =Åh©->
gªí_sBIT
;

8221 i‡(
th©
->
ªd_sBIT
 >Åh©->
blue_sBIT
)

8222 
th©
->
ªd_sBIT
 =Åh©->
blue_sBIT
;

8223 
th©
->
blue_sBIT
 =Åh©->
gªí_sBIT
 =Åh©->
ªd_sBIT
;

8226 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
)

8227 
th©
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_GRAY
;

8228 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

8229 
th©
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_GRAY_ALPHA
;

8232 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8233 
	}
}

8236 
	$image_å™sf‹m_≤g_£t_rgb_to_gøy_add
(
image_å™sf‹m
 *
this
,

8237 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8239 
	`UNUSED
(
bô_dïth
)

8241 
this
->
√xt
 = *
th©
;

8242 *
th©
 = 
this
;

8244  (
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0;

8245 
	}
}

8247 #unde‡
d©a


8248 
IT
(
rgb_to_gøy
);

8249 #unde‡
PT


8250 
	#PT
 
	`ITSTRUCT
(
rgb_to_gøy
)

	)

8251 #unde‡
image_å™sf‹m_öi


8252 
	#image_å™sf‹m_öi
 
image_å™sf‹m_deÁu…_öi


	)

8255 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


8264 
	#d©a
 
	`ITDATA
(
background
)

	)

8265 
image_pixñ
 
	gd©a
;

8268 
	$image_å™sf‹m_≤g_£t_background_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8269 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8271 
≤g_byã
 
cﬁour_ty≥
, 
bô_dïth
;

8272 
≤g_byã
 
øndom_byãs
[8];

8273 
ex∑nd
;

8274 
≤g_cﬁ‹_16
 
back
;

8281 
	`R8
(
øndom_byãs
);

8286 
cﬁour_ty≥
 = 
th©
->
this
.colour_type;

8287 i‡(
cﬁour_ty≥
 == 3)

8289 
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

8290 
bô_dïth
 = 8;

8291 
ex∑nd
 = 0;

8296 i‡(
th©
->
this
.
has_tRNS
)

8297 
th©
->
this
.
is_å™•¨ít
 = 1;

8299 
bô_dïth
 = 
th©
->
this
.bit_depth;

8300 
ex∑nd
 = 1;

8303 
	`image_pixñ_öô
(&
d©a
, 
øndom_byãs
, 
cﬁour_ty≥
,

8304 
bô_dïth
, 0 , 0 , 
NULL
 );

8309 
	`R8
(
back
);

8311 i‡(
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
)

8313 
back
.
ªd
 = (
≤g_uöt_16
)
d©a
.red;

8314 
back
.
gªí
 = (
≤g_uöt_16
)
d©a
.green;

8315 
back
.
blue
 = (
≤g_uöt_16
)
d©a
.blue;

8319 
back
.
gøy
 = (
≤g_uöt_16
)
d©a
.
ªd
;

8321 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


8322 
	`≤g_£t_background
(
µ
, &
back
, 
PNG_BACKGROUND_GAMMA_FILE
, 
ex∑nd
, 0);

8324 
	`≤g_£t_background_fixed
(
µ
, &
back
, 
PNG_BACKGROUND_GAMMA_FILE
, 
ex∑nd
, 0);

8327 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8328 
	}
}

8331 
	$image_å™sf‹m_≤g_£t_background_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8332 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8333 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8336 i‡(
th©
->
have_tRNS
 &&Åh©->
cﬁour_ty≥
 !
PNG_COLOR_TYPE_PALETTE
)

8337 
	`image_pixñ_add_Æpha
(
th©
, &
di•œy
->
this
, 1 );

8340 i‡(
th©
->
Æphaf
 < 1)

8343 i‡(
th©
->
Æphaf
 <= 0)

8345 
th©
->
ªdf
 = 
d©a
.redf;

8346 
th©
->
gªíf
 = 
d©a
.greenf;

8347 
th©
->
bluef
 = 
d©a
.bluef;

8349 
th©
->
ªde
 = 
d©a
.rede;

8350 
th©
->
gªíe
 = 
d©a
.greene;

8351 
th©
->
bluì
 = 
d©a
.bluee;

8353 
th©
->
ªd_sBIT

d©a
.red_sBIT;

8354 
th©
->
gªí_sBIT

d©a
.green_sBIT;

8355 
th©
->
blue_sBIT

d©a
.blue_sBIT;

8360 
Æf
 = 1 - 
th©
->
Æphaf
;

8362 
th©
->
ªdf
 =Åh©->ªd‡*Åh©->
Æphaf
 + 
d©a
.ªd‡* 
Æf
;

8363 
th©
->
ªde
 =Åh©->ªdê*Åh©->
Æphaf
 + 
d©a
.ªdê* 
Æf
 +

8364 
DBL_EPSILON
;

8365 
th©
->
gªíf
 =Åh©->gªí‡*Åh©->
Æphaf
 + 
d©a
.gªí‡* 
Æf
;

8366 
th©
->
gªíe
 =Åh©->gªíê*Åh©->
Æphaf
 + 
d©a
.gªíê* 
Æf
 +

8367 
DBL_EPSILON
;

8368 
th©
->
bluef
 =Åh©->blue‡*Åh©->
Æphaf
 + 
d©a
.blue‡* 
Æf
;

8369 
th©
->
bluì
 =Åh©->bluì *Åh©->
Æphaf
 + 
d©a
.bluì * 
Æf
 +

8370 
DBL_EPSILON
;

8374 
th©
->
Æphaf
 = 1;

8375 
th©
->
Æph´
 = 0;

8378 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

8379 
th©
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

8380 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

8381 
th©
->
cﬁour_ty≥
 = 
PNG_COLOR_TYPE_GRAY
;

8384 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8385 
	}
}

8387 
	#image_å™sf‹m_≤g_£t_background_add
 
image_å™sf‹m_deÁu…_add


	)

8389 #unde‡
d©a


8390 
IT
(
background
);

8391 #unde‡
PT


8392 
	#PT
 
	`ITSTRUCT
(
background
)

	)

8410 #ifde‡
PNG_READ_INVERT_ALPHA_SUPPORTED


8416 
	$image_å™sf‹m_≤g_£t_övît_Æpha_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8417 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8419 
	`≤g_£t_övît_Æpha
(
µ
);

8420 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8421 
	}
}

8424 
	$image_å™sf‹m_≤g_£t_övît_Æpha_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8425 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8426 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8428 i‡(
th©
->
cﬁour_ty≥
 & 4)

8429 
th©
->
Æpha_övîãd
 = 1;

8431 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8432 
	}
}

8435 
	$image_å™sf‹m_≤g_£t_övît_Æpha_add
(
image_å™sf‹m
 *
this
,

8436 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8438 
	`UNUSED
(
bô_dïth
)

8440 
this
->
√xt
 = *
th©
;

8441 *
th©
 = 
this
;

8444  (
cﬁour_ty≥
 & 4) != 0;

8445 
	}
}

8447 
IT
(
övît_Æpha
);

8448 #unde‡
PT


8449 
	#PT
 
	`ITSTRUCT
(
övît_Æpha
)

	)

8454 #ifde‡
PNG_READ_BGR_SUPPORTED


8462 
	$image_å™sf‹m_≤g_£t_bgr_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8463 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8465 
	`≤g_£t_bgr
(
µ
);

8466 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8467 
	}
}

8470 
	$image_å™sf‹m_≤g_£t_bgr_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8471 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8472 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8474 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

8475 
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGBA
)

8476 
th©
->
sw≠_rgb
 = 1;

8478 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8479 
	}
}

8482 
	$image_å™sf‹m_≤g_£t_bgr_add
(
image_å™sf‹m
 *
this
,

8483 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8485 
	`UNUSED
(
bô_dïth
)

8487 
this
->
√xt
 = *
th©
;

8488 *
th©
 = 
this
;

8490  
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

8491 
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGBA
;

8492 
	}
}

8494 
IT
(
bgr
);

8495 #unde‡
PT


8496 
	#PT
 
	`ITSTRUCT
(
bgr
)

	)

8501 #ifde‡
PNG_READ_SWAP_ALPHA_SUPPORTED


8509 
	$image_å™sf‹m_≤g_£t_sw≠_Æpha_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8510 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8512 
	`≤g_£t_sw≠_Æpha
(
µ
);

8513 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8514 
	}
}

8517 
	$image_å™sf‹m_≤g_£t_sw≠_Æpha_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8518 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8519 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8521 i‡(
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GA
 ||

8522 
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGBA
)

8523 
th©
->
Æpha_fú°
 = 1;

8525 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8526 
	}
}

8529 
	$image_å™sf‹m_≤g_£t_sw≠_Æpha_add
(
image_å™sf‹m
 *
this
,

8530 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8532 
	`UNUSED
(
bô_dïth
)

8534 
this
->
√xt
 = *
th©
;

8535 *
th©
 = 
this
;

8537  
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GA
 ||

8538 
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGBA
;

8539 
	}
}

8541 
IT
(
sw≠_Æpha
);

8542 #unde‡
PT


8543 
	#PT
 
	`ITSTRUCT
(
sw≠_Æpha
)

	)

8548 #ifde‡
PNG_READ_SWAP_SUPPORTED


8554 
	$image_å™sf‹m_≤g_£t_sw≠_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8555 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8557 
	`≤g_£t_sw≠
(
µ
);

8558 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8559 
	}
}

8562 
	$image_å™sf‹m_≤g_£t_sw≠_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8563 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8564 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8566 i‡(
th©
->
bô_dïth
 == 16)

8567 
th©
->
sw≠16
 = 1;

8569 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8570 
	}
}

8573 
	$image_å™sf‹m_≤g_£t_sw≠_add
(
image_å™sf‹m
 *
this
,

8574 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8576 
	`UNUSED
(
cﬁour_ty≥
)

8578 
this
->
√xt
 = *
th©
;

8579 *
th©
 = 
this
;

8581  
bô_dïth
 == 16;

8582 
	}
}

8584 
IT
(
sw≠
);

8585 #unde‡
PT


8586 
	#PT
 
	`ITSTRUCT
(
sw≠
)

	)

8590 #ifde‡
PNG_READ_FILLER_SUPPORTED


8600 
	#d©a
 
	`ITDATA
(
fûÀr
)

	)

8603 
≤g_uöt_32
 
	mfûÀr
;

8604 
	mÊags
;

8605 } 
	gd©a
;

8608 
	$image_å™sf‹m_≤g_£t_fûÀr_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8609 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8615 
d©a
.
fûÀr
 = 
	`øndom_u32
();

8616 
d©a
.
Êags
 = 
	`øndom_choi˚
();

8618 
	`≤g_£t_fûÀr
(
µ
, 
d©a
.
fûÀr
, d©a.
Êags
);

8623 
th©
->
this
.
fûÀr
 = 1;

8625 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8626 
	}
}

8629 
	$image_å™sf‹m_≤g_£t_fûÀr_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8630 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8631 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8633 i‡(
th©
->
bô_dïth
 >= 8 &&

8634 (
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

8635 
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
))

8637 
max
 = (1U << 
th©
->
bô_dïth
)-1;

8638 
th©
->
Æpha
 = 
d©a
.
fûÀr
 & 
max
;

8639 
th©
->
Æphaf
 = ((Èh©->
Æpha
Ë/ 
max
;

8640 
th©
->
Æph´
 = 0;

8648 
th©
->
cﬁour_ty≥
 |= 4;

8649 
th©
->
Æpha_fú°
 = 
d©a
.
Êags
 =
PNG_FILLER_BEFORE
;

8652 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8653 
	}
}

8656 
	$image_å™sf‹m_≤g_£t_fûÀr_add
(
image_å™sf‹m
 *
this
,

8657 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8659 
this
->
√xt
 = *
th©
;

8660 *
th©
 = 
this
;

8662  
bô_dïth
 >8 && (
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

8663 
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
);

8664 
	}
}

8666 #unde‡
d©a


8667 
IT
(
fûÀr
);

8668 #unde‡
PT


8669 
	#PT
 
	`ITSTRUCT
(
fûÀr
)

	)

8673 
	#d©a
 
	`ITDATA
(
add_Æpha
)

	)

8676 
≤g_uöt_32
 
	mfûÀr
;

8677 
	mÊags
;

8678 } 
	gd©a
;

8681 
	$image_å™sf‹m_≤g_£t_add_Æpha_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8682 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8688 
d©a
.
fûÀr
 = 
	`øndom_u32
();

8689 
d©a
.
Êags
 = 
	`øndom_choi˚
();

8691 
	`≤g_£t_add_Æpha
(
µ
, 
d©a
.
fûÀr
, d©a.
Êags
);

8692 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8693 
	}
}

8696 
	$image_å™sf‹m_≤g_£t_add_Æpha_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8697 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8698 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8700 i‡(
th©
->
bô_dïth
 >= 8 &&

8701 (
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

8702 
th©
->
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
))

8704 
max
 = (1U << 
th©
->
bô_dïth
)-1;

8705 
th©
->
Æpha
 = 
d©a
.
fûÀr
 & 
max
;

8706 
th©
->
Æphaf
 = ((Èh©->
Æpha
Ë/ 
max
;

8707 
th©
->
Æph´
 = 0;

8709 
th©
->
cﬁour_ty≥
 |= 4;

8710 
th©
->
Æpha_fú°
 = 
d©a
.
Êags
 =
PNG_FILLER_BEFORE
;

8713 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8714 
	}
}

8717 
	$image_å™sf‹m_≤g_£t_add_Æpha_add
(
image_å™sf‹m
 *
this
,

8718 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8720 
this
->
√xt
 = *
th©
;

8721 *
th©
 = 
this
;

8723  
bô_dïth
 >8 && (
cﬁour_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

8724 
cﬁour_ty≥
 =
PNG_COLOR_TYPE_GRAY
);

8725 
	}
}

8727 #unde‡
d©a


8728 
IT
(
add_Æpha
);

8729 #unde‡
PT


8730 
	#PT
 
	`ITSTRUCT
(
add_Æpha
)

	)

8735 #ifde‡
PNG_READ_PACK_SUPPORTED


8744 
	$image_å™sf‹m_≤g_£t_∑ckög_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8745 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8747 
	`≤g_£t_∑ckög
(
µ
);

8748 
th©
->
u≈acked
 = 1;

8749 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8750 
	}
}

8753 
	$image_å™sf‹m_≤g_£t_∑ckög_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8754 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8755 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8761 i‡(
th©
->
bô_dïth
 < 8)

8762 
th©
->
bô_dïth
 = 8;

8764 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8765 
	}
}

8768 
	$image_å™sf‹m_≤g_£t_∑ckög_add
(
image_å™sf‹m
 *
this
,

8769 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8771 
	`UNUSED
(
cﬁour_ty≥
)

8773 
this
->
√xt
 = *
th©
;

8774 *
th©
 = 
this
;

8777  
bô_dïth
 < 8;

8778 
	}
}

8780 
IT
(
∑ckög
);

8781 #unde‡
PT


8782 
	#PT
 
	`ITSTRUCT
(
∑ckög
)

	)

8787 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


8794 
	$image_å™sf‹m_≤g_£t_∑cksw≠_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8795 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8797 
	`≤g_£t_∑cksw≠
(
µ
);

8798 
th©
->
this
.
lôéìndün
 = 1;

8799 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8800 
	}
}

8803 
	$image_å™sf‹m_≤g_£t_∑cksw≠_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8804 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8805 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8807 i‡(
th©
->
bô_dïth
 < 8)

8808 
th©
->
lôéìndün
 = 1;

8810 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8811 
	}
}

8814 
	$image_å™sf‹m_≤g_£t_∑cksw≠_add
(
image_å™sf‹m
 *
this
,

8815 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8817 
	`UNUSED
(
cﬁour_ty≥
)

8819 
this
->
√xt
 = *
th©
;

8820 *
th©
 = 
this
;

8822  
bô_dïth
 < 8;

8823 
	}
}

8825 
IT
(
∑cksw≠
);

8826 #unde‡
PT


8827 
	#PT
 
	`ITSTRUCT
(
∑cksw≠
)

	)

8833 #ifde‡
PNG_READ_INVERT_MONO_SUPPORTED


8839 
	$image_å™sf‹m_≤g_£t_övît_m⁄o_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8840 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8842 
	`≤g_£t_övît_m⁄o
(
µ
);

8843 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8844 
	}
}

8847 
	$image_å™sf‹m_≤g_£t_övît_m⁄o_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8848 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8849 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8851 i‡(
th©
->
cﬁour_ty≥
 & 4)

8852 
th©
->
m⁄o_övîãd
 = 1;

8854 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8855 
	}
}

8858 
	$image_å™sf‹m_≤g_£t_övît_m⁄o_add
(
image_å™sf‹m
 *
this
,

8859 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8861 
	`UNUSED
(
bô_dïth
)

8863 
this
->
√xt
 = *
th©
;

8864 *
th©
 = 
this
;

8867  (
cﬁour_ty≥
 & 2) == 0;

8868 
	}
}

8870 
IT
(
övît_m⁄o
);

8871 #unde‡
PT


8872 
	#PT
 
	`ITSTRUCT
(
övît_m⁄o
)

	)

8876 #ifde‡
PNG_READ_SHIFT_SUPPORTED


8882 
	#d©a
 
	`ITDATA
(
shi·
)

	)

8883 
≤g_cﬁ‹_8
 
	gd©a
;

8886 
	$image_å™sf‹m_≤g_£t_shi·_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8887 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8895 
dïth
 = 
th©
->
this
.
bô_dïth
;

8897 
d©a
.
ªd
 = (
≤g_byã
Ë(
	`øndom_mod
(
dïth
)+1);

8898 
d©a
.
gªí
 = (
≤g_byã
Ë(
	`øndom_mod
(
dïth
)+1);

8899 
d©a
.
blue
 = (
≤g_byã
Ë(
	`øndom_mod
(
dïth
)+1);

8900 
d©a
.
gøy
 = (
≤g_byã
Ë(
	`øndom_mod
(
dïth
)+1);

8901 
d©a
.
Æpha
 = (
≤g_byã
Ë(
	`øndom_mod
(
dïth
)+1);

8903 
	`≤g_£t_shi·
(
µ
, &
d©a
);

8904 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8905 
	}
}

8908 
	$image_å™sf‹m_≤g_£t_shi·_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8909 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8910 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8915 i‡(
th©
->
cﬁour_ty≥
 !
PNG_COLOR_TYPE_PALETTE
)

8917 
th©
->
sig_bôs
 = 1;

8923 i‡(
th©
->
cﬁour_ty≥
 & 2)

8925 
th©
->
ªd_sBIT
 = 
d©a
.
ªd
;

8926 
th©
->
gªí_sBIT
 = 
d©a
.
gªí
;

8927 
th©
->
blue_sBIT
 = 
d©a
.
blue
;

8931 
th©
->
ªd_sBIT
 =Åh©->
gªí_sBIT
 =Åh©->
blue_sBIT
 = 
d©a
.
gøy
;

8933 
th©
->
Æpha_sBIT
 = 
d©a
.
Æpha
;

8936 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8937 
	}
}

8940 
	$image_å™sf‹m_≤g_£t_shi·_add
(
image_å™sf‹m
 *
this
,

8941 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8943 
	`UNUSED
(
bô_dïth
)

8945 
this
->
√xt
 = *
th©
;

8946 *
th©
 = 
this
;

8948  
cﬁour_ty≥
 !
PNG_COLOR_TYPE_PALETTE
;

8949 
	}
}

8951 
IT
(
shi·
);

8952 #unde‡
PT


8953 
	#PT
 
	`ITSTRUCT
(
shi·
)

	)

8957 #ifde‡
THIS_IS_THE_PROFORMA


8959 
	gimage_å™sf‹m_≤g_£t_
@
	$_£t
(c⁄° 
image_å™sf‹m
 *
this
,

8960 
å™sf‹m_di•œy
 *
th©
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

8962 
≤g_£t_
@(
µ
);

8963 
this
->
√xt
->
	`£t
—his->√xt, 
th©
, 
µ
, 
pi
);

8964 
	}
}

8967 
	gimage_å™sf‹m_≤g_£t_
@
	$_mod
(c⁄° 
image_å™sf‹m
 *
this
,

8968 
image_pixñ
 *
th©
, 
≤g_c⁄°_°ru˘p
 
µ
,

8969 c⁄° 
å™sf‹m_di•œy
 *
di•œy
)

8971 
this
->
√xt
->
	`mod
—his->√xt, 
th©
, 
µ
, 
di•œy
);

8972 
	}
}

8975 
	gimage_å™sf‹m_≤g_£t_
@
	$_add
(
image_å™sf‹m
 *
this
,

8976 c⁄° 
image_å™sf‹m
 **
th©
, 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

8978 
this
->
√xt
 = *
th©
;

8979 *
th©
 = 
this
;

8982 
	}
}

8984 
IT
(@);

8989 
image_å™sf‹m
 *c⁄° 
	gimage_å™sf‹m_fú°
 = &
PT
;

8992 
	$å™sf‹m_íabÀ
(c⁄° *
«me
)

8997 
Æl_dißbÀd
 = 0;

8998 
found_ô
 = 0;

8999 
image_å™sf‹m
 *
li°
 = 
image_å™sf‹m_fú°
;

9001 
li°
 !&
image_å™sf‹m_íd
)

9003 i‡(
	`°rcmp
(
li°
->
«me
,Çame) == 0)

9005 
li°
->
íabÀ
 = 1;

9006 
found_ô
 = 1;

9008 i‡(!
Æl_dißbÀd
)

9009 
li°
->
íabÀ
 = 0;

9011 
li°
 =Üist->list;

9014 
Æl_dißbÀd
 = 1;

9016 i‡(!
found_ô
)

9018 
	`Ârötf
(
°dîr
, "pngvalid: --transform-enable=%s: unknownÅransform\n",

9019 
«me
);

9020 
	`exô
(99);

9022 
	}
}

9025 
	$å™sf‹m_dißbÀ
(c⁄° *
«me
)

9027 
image_å™sf‹m
 *
li°
 = 
image_å™sf‹m_fú°
;

9029 
li°
 !&
image_å™sf‹m_íd
)

9031 i‡(
	`°rcmp
(
li°
->
«me
,Çame) == 0)

9033 
li°
->
íabÀ
 = 0;

9037 
li°
 =Üist->list;

9040 
	`Ârötf
(
°dîr
, "pngvalid: --transform-disable=%s: unknownÅransform\n",

9041 
«me
);

9042 
	`exô
(99);

9043 
	}
}

9046 
	$image_å™sf‹m_ª£t_cou¡
()

9048 
image_å™sf‹m
 *
√xt
 = 
image_å™sf‹m_fú°
;

9049 
cou¡
 = 0;

9051 
√xt
 !&
image_å™sf‹m_íd
)

9053 
√xt
->
loˇl_u£
 = 0;

9054 
√xt
->next = 0;

9055 
√xt
 =Çext->
li°
;

9056 ++
cou¡
;

9062 i‡(
cou¡
 > 32Ë
	`ab‹t
();

9063 
	}
}

9066 
	$image_å™sf‹m_ã°_cou¡î
(
≤g_uöt_32
 
cou¡î
, 
max
)

9071 
image_å™sf‹m
 *
√xt
 = 
image_å™sf‹m_fú°
;

9073 
√xt
 !&
image_å™sf‹m_íd
)

9076 
cou¡î
 >>= 1;

9079 i‡(
max
 > 1 && 
√xt
->
loˇl_u£
 < max)

9081 
√xt
 =Çext->
li°
;

9084  
max
 <1 && 
cou¡î
 == 0;

9085 
	}
}

9087 
≤g_uöt_32


9088 
	$image_å™sf‹m_add
(c⁄° 
image_å™sf‹m
 **
this
, 
max
,

9089 
≤g_uöt_32
 
cou¡î
, *
«me
, 
size_t
 
sizeof_«me
, size_à*
pos
,

9090 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
)

9094 
≤g_uöt_32
 
mask
;

9095 
image_å™sf‹m
 *
li°
;

9101 i‡(
cou¡î
 == 0)

9103 
	`image_å™sf‹m_ª£t_cou¡
();

9104 i‡(
max
 <= 1)

9105 
cou¡î
 = 1;

9107 
cou¡î
 = 
	`øndom_32
();

9111 
max
)

9113 0: ++
cou¡î
; ;

9114 1: 
cou¡î
 <<= 1; ;

9115 : 
cou¡î
 = 
	`øndom_32
(); ;

9120 *
this
 = &
image_å™sf‹m_íd
;

9121 
li°
 = 
image_å™sf‹m_fú°
;

9122 
mask
 = 1;

9125 
li°
 !&
image_å™sf‹m_íd
)

9127 i‡((
cou¡î
 & 
mask
Ë!0 && 
li°
->
íabÀ
 &&

9128 (
max
 =0 || 
li°
->
loˇl_u£
 < max))

9131 i‡(
li°
->
	`add
÷i°, 
this
, 
cﬁour_ty≥
, 
bô_dïth
Ë|| 
max
 == 0)

9134 *
pos
 = 
	`ß„ˇt
(
«me
, 
sizeof_«me
, *pos, " +");

9135 *
pos
 = 
	`ß„ˇt
(
«me
, 
sizeof_«me
, *pos, 
li°
->name);

9141 *
this
 = 
li°
->
√xt
;

9142 
li°
->
√xt
 = 0;

9147 
li°
->
loˇl_u£
 = 
max
;

9151 
mask
 <<= 1;

9152 
li°
 =Üist->list;

9156 i‡(*
this
 !&
image_å™sf‹m_íd
)

9157  
cou¡î
;

9160 i‡(!
	`image_å™sf‹m_ã°_cou¡î
(
cou¡î
, 
max
))

9163 
	}
}

9166 
	$≥rf‹m_å™sf‹m_ã°
(
≤g_modifõr
 *
pm
)

9168 
≤g_byã
 
cﬁour_ty≥
 = 0;

9169 
≤g_byã
 
bô_dïth
 = 0;

9170 
∑Àâe_numbî
 = 0;

9172 
	`√xt_f‹m©
(&
cﬁour_ty≥
, &
bô_dïth
, &
∑Àâe_numbî
, 
pm
->
ã°_lbg
,

9173 
pm
->
ã°_tRNS
))

9175 
≤g_uöt_32
 
cou¡î
 = 0;

9176 
size_t
 
ba£_pos
;

9177 
«me
[64];

9179 
ba£_pos
 = 
	`ß„ˇt
(
«me
, Çame, 0, "transform:");

9183 
size_t
 
pos
 = 
ba£_pos
;

9184 c⁄° 
image_å™sf‹m
 *
li°
 = 0;

9189 
cou¡î
 = 
	`image_å™sf‹m_add
(&
li°
, 1 , counter,

9190 
«me
, Çame, &
pos
, 
cﬁour_ty≥
, 
bô_dïth
);

9192 i‡(
cou¡î
 == 0)

9198 
pm
->
ª≥©
 = 0;

9199 
	`å™sf‹m_ã°
(
pm
, 
	`FILEID
(
cﬁour_ty≥
, 
bô_dïth
, 
∑Àâe_numbî
,

9200 
pm
->
öãæa˚_ty≥
, 0, 0, 0), 
li°
, 
«me
);

9202 i‡(
	`Áû
(
pm
))

9205 
pm
->
ª≥©
);

9208 
	}
}

9212 #ifde‡
PNG_READ_GAMMA_SUPPORTED


9216 
	sgamma_di•œy


9218 
°™d¨d_di•œy
 
	mthis
;

9221 
≤g_modifõr
* 
	mpm
;

9222 
	mfûe_gamma
;

9223 
	ms¸ìn_gamma
;

9224 
	mbackground_gamma
;

9225 
≤g_byã
 
	msbô
;

9226 
	mthªshﬁd_ã°
;

9227 
	mu£_öput_¥ecisi⁄
;

9228 
	msˇÀ16
;

9229 
	mex∑nd16
;

9230 
	mdo_background
;

9231 
≤g_cﬁ‹_16
 
	mbackground_cﬁ‹
;

9234 
	mmaxîrout
;

9235 
	mmaxîΩc
;

9236 
	mmaxîøbs
;

9237 } 
	tgamma_di•œy
;

9239 
	#ALPHA_MODE_OFFSET
 4

	)

9242 
	$gamma_di•œy_öô
(
gamma_di•œy
 *
dp
, 
≤g_modifõr
 *
pm
, 
≤g_uöt_32
 
id
,

9243 
fûe_gamma
, 
s¸ìn_gamma
, 
≤g_byã
 
sbô
, 
thªshﬁd_ã°
,

9244 
u£_öput_¥ecisi⁄
, 
sˇÀ16
, 
ex∑nd16
,

9245 
do_background
, c⁄° 
≤g_cﬁ‹_16
 *
poöãr_to_the_background_cﬁ‹
,

9246 
background_gamma
)

9249 
	`°™d¨d_di•œy_öô
(&
dp
->
this
, &
pm
->this, 
id
, 
do_ªad_öãæa˚
,

9250 
pm
->
u£_upd©e_öfo
);

9253 
dp
->
pm
 =Öm;

9254 
dp
->
fûe_gamma
 = file_gamma;

9255 
dp
->
s¸ìn_gamma
 = screen_gamma;

9256 
dp
->
background_gamma
 = background_gamma;

9257 
dp
->
sbô
 = sbit;

9258 
dp
->
thªshﬁd_ã°
 =Åhreshold_test;

9259 
dp
->
u£_öput_¥ecisi⁄
 = use_input_precision;

9260 
dp
->
sˇÀ16
 = scale16;

9261 
dp
->
ex∑nd16
 =Éxpand16;

9262 
dp
->
do_background
 = do_background;

9263 i‡(
do_background
 && 
poöãr_to_the_background_cﬁ‹
 != 0)

9264 
dp
->
background_cﬁ‹
 = *
poöãr_to_the_background_cﬁ‹
;

9266 
	`mem£t
(&
dp
->
background_cﬁ‹
, 0,  dp->background_color);

9269 
dp
->
maxîrout
 = dp->
maxîΩc
 = dp->
maxîøbs
 = 0;

9270 
	}
}

9273 
	$gamma_öfo_imp
(
gamma_di•œy
 *
dp
, 
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

9276 
	`°™d¨d_öfo_∑π1
(&
dp
->
this
, 
µ
, 
pi
);

9283 i‡(
dp
->
sˇÀ16
)

9284 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


9285 
	`≤g_£t_sˇÀ_16
(
µ
);

9288 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


9289 
	`≤g_£t_°rù_16
(
µ
);

9291 
	`≤g_îr‹
(
µ
, "scale16 (16Åo 8 bit conversion)Çot supported");

9295 i‡(
dp
->
ex∑nd16
)

9296 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


9297 
	`≤g_£t_ex∑nd_16
(
µ
);

9299 
	`≤g_îr‹
(
µ
, "expand16 (8Åo 16 bit conversion)Çot supported");

9302 i‡(
dp
->
do_background
 >
ALPHA_MODE_OFFSET
)

9304 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


9307 
mode
 = 
dp
->
do_background
 - 
ALPHA_MODE_OFFSET
;

9313 c⁄° 
sg
 = 
dp
->
s¸ìn_gamma
;

9314 #i‚de‡
PNG_FLOATING_POINT_SUPPORTED


9315 
≤g_fixed_poöt
 
g
 = 
	`fix
(
sg
);

9318 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


9319 
	`≤g_£t_Æpha_mode
(
µ
, 
mode
, 
sg
);

9321 
	`≤g_£t_Æpha_mode_fixed
(
µ
, 
mode
, 
g
);

9328 i‡(
mode
 =
PNG_ALPHA_STANDARD
 && 
sg
 != 1)

9330 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


9331 
	`≤g_£t_gamma
(
µ
, 
sg
, 
dp
->
fûe_gamma
);

9333 
≤g_fixed_poöt
 
f
 = 
	`fix
(
dp
->
fûe_gamma
);

9334 
	`≤g_£t_gamma_fixed
(
µ
, 
g
, 
f
);

9339 
	`≤g_îr‹
(
µ
, "alpha mode handlingÇot supported");

9346 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


9347 
	`≤g_£t_gamma
(
µ
, 
dp
->
s¸ìn_gamma
, dp->
fûe_gamma
);

9350 
≤g_fixed_poöt
 
s
 = 
	`fix
(
dp
->
s¸ìn_gamma
);

9351 
≤g_fixed_poöt
 
f
 = 
	`fix
(
dp
->
fûe_gamma
);

9352 
	`≤g_£t_gamma_fixed
(
µ
, 
s
, 
f
);

9356 i‡(
dp
->
do_background
)

9358 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


9361 c⁄° 
bg
 = 
dp
->
background_gamma
;

9362 #i‚de‡
PNG_FLOATING_POINT_SUPPORTED


9363 
≤g_fixed_poöt
 
g
 = 
	`fix
(
bg
);

9366 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


9367 
	`≤g_£t_background
(
µ
, &
dp
->
background_cﬁ‹
, dp->
do_background
,

9368 0 , 
bg
);

9370 
	`≤g_£t_background_fixed
(
µ
, &
dp
->
background_cﬁ‹
,

9371 
dp
->
do_background
, 0 , 
g
);

9374 
	`≤g_îr‹
(
µ
, "png_set_backgroundÇot supported");

9380 
i
 = 
dp
->
this
.
u£_upd©e_öfo
;

9383 
	`≤g_ªad_upd©e_öfo
(
µ
, 
pi
);

9384 --
i
 > 0);

9388 
	`°™d¨d_öfo_∑π2
(&
dp
->
this
, 
µ
, 
pi
, 1 );

9389 
	}
}

9391 
PNGCBAPI


9392 
	$gamma_öfo
(
≤g_°ru˘p
 
µ
, 
≤g_öf›
 
pi
)

9394 
	`gamma_öfo_imp
(
	`voidˇ°
(
gamma_di•œy
*, 
	`≤g_gë_¥ogªssive_±r
(
µ
)),Öp,

9395 
pi
);

9396 
	}
}

9402 
	svÆid©e_öfo


9404 
≤g_c⁄°_°ru˘p
 
	mµ
;

9405 
gamma_di•œy
 *
	mdp
;

9406 
≤g_byã
 
	msbô
;

9407 
	mu£_öput_¥ecisi⁄
;

9408 
	mdo_background
;

9409 
	msˇÀ16
;

9410 
	msbô_max
;

9411 
	misbô_shi·
;

9412 
	moutmax
;

9414 
	mgamma_c‹ª˘i⁄
;

9415 
	mfûe_övî£
;

9416 
	ms¸ìn_gamma
;

9417 
	ms¸ìn_övî£
;

9419 
	mbackground_ªd
;

9420 
	mbackground_gªí
;

9421 
	mbackground_blue
;

9423 
	mmaxabs
;

9424 
	mmaxpc
;

9425 
	mmaxˇlc
;

9426 
	mmaxout
;

9427 
	mmaxout_tŸÆ
;

9428 
	mouéog
;

9429 
	moutqu™t
;

9431 
	tvÆid©e_öfo
;

9434 
	$öô_vÆid©e_öfo
(
vÆid©e_öfo
 *
vi
, 
gamma_di•œy
 *
dp
, 
≤g_c⁄°_°ru˘p
 
µ
,

9435 
ö_dïth
, 
out_dïth
)

9437 
outmax
 = (1U<<
out_dïth
)-1;

9439 
vi
->
µ
 =Öp;

9440 
vi
->
dp
 = dp;

9442 i‡(
dp
->
sbô
 > 0 && dp->sbô < 
ö_dïth
)

9444 
vi
->
sbô
 = 
dp
->sbit;

9445 
vi
->
isbô_shi·
 = 
ö_dïth
 - 
dp
->
sbô
;

9450 
vi
->
sbô
 = (
≤g_byã
)
ö_dïth
;

9451 
vi
->
isbô_shi·
 = 0;

9454 
vi
->
sbô_max
 = (1U << vi->
sbô
)-1;

9459 
vi
->
s¸ìn_gamma
 = 
dp
->screen_gamma;

9460 i‡(
	`Ábs
(
vi
->
s¸ìn_gamma
-1Ë< 
PNG_GAMMA_THRESHOLD
)

9461 
vi
->
s¸ìn_gamma
 = vi->
s¸ìn_övî£
 = 0;

9463 
vi
->
s¸ìn_övî£
 = 1/vi->
s¸ìn_gamma
;

9465 
vi
->
u£_öput_¥ecisi⁄
 = 
dp
->use_input_precision;

9466 
vi
->
outmax
 = outmax;

9467 
vi
->
maxabs
 = 
	`ab£º
(
dp
->
pm
, 
ö_dïth
, 
out_dïth
);

9468 
vi
->
maxpc
 = 
	`p˚º
(
dp
->
pm
, 
ö_dïth
, 
out_dïth
);

9469 
vi
->
maxˇlc
 = 
	`ˇl˚º
(
dp
->
pm
, 
ö_dïth
, 
out_dïth
);

9470 
vi
->
maxout
 = 
	`ouãº
(
dp
->
pm
, 
ö_dïth
, 
out_dïth
);

9471 
vi
->
outqu™t
 = 
	`ouçut_qu™tiz©i⁄_Á˘‹
(
dp
->
pm
, 
ö_dïth
, 
out_dïth
);

9472 
vi
->
maxout_tŸÆ
 = vi->
maxout
 + vi->
outqu™t
 * .5;

9473 
vi
->
ouéog
 = 
	`ouéog
(
dp
->
pm
, 
ö_dïth
, 
out_dïth
);

9475 i‡((
dp
->
this
.
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0 ||

9476 (
dp
->
this
.
cﬁour_ty≥
 =3 && dp->this.
is_å™•¨ít
) ||

9477 ((
dp
->
this
.
cﬁour_ty≥
 == 0 || dp->this.colour_type == 2) &&

9478 
dp
->
this
.
has_tRNS
))

9480 
vi
->
do_background
 = 
dp
->do_background;

9482 i‡(
vi
->
do_background
 != 0)

9484 c⁄° 
bg_övî£
 = 1/
dp
->
background_gamma
;

9485 
r
, 
g
, 
b
;

9488 
r
 = 
dp
->
background_cﬁ‹
.
ªd
;Ñ /
outmax
;

9489 
g
 = 
dp
->
background_cﬁ‹
.
gªí
; g /
outmax
;

9490 
b
 = 
dp
->
background_cﬁ‹
.
blue
; b /
outmax
;

9495 i‡(
	`Ábs
(
bg_övî£
-1Ë>
PNG_GAMMA_THRESHOLD
)

9498 
r
 = 
	`pow
‘, 
bg_övî£
);

9499 
g
 = 
	`pow
(g, 
bg_övî£
);

9500 
b
 = 
	`pow
(b, 
bg_övî£
);

9503 
vi
->
background_ªd
 = 
r
;

9504 
vi
->
background_gªí
 = 
g
;

9505 
vi
->
background_blue
 = 
b
;

9509 
vi
->
do_background
 = 0;

9511 i‡(
vi
->
do_background
 == 0)

9512 
vi
->
background_ªd
 = vi->
background_gªí
 = vi->
background_blue
 = 0;

9514 
vi
->
gamma_c‹ª˘i⁄
 = 1/(
dp
->
fûe_gamma
*dp->
s¸ìn_gamma
);

9515 i‡(
	`Ábs
(
vi
->
gamma_c‹ª˘i⁄
-1Ë< 
PNG_GAMMA_THRESHOLD
)

9516 
vi
->
gamma_c‹ª˘i⁄
 = 0;

9518 
vi
->
fûe_övî£
 = 1/
dp
->
fûe_gamma
;

9519 i‡(
	`Ábs
(
vi
->
fûe_övî£
-1Ë< 
PNG_GAMMA_THRESHOLD
)

9520 
vi
->
fûe_övî£
 = 0;

9522 
vi
->
sˇÀ16
 = 
dp
->scale16;

9523 
	}
}

9531 
	$gamma_comp⁄ít_compo£
(
do_background
, 
öput_ßm∂e
, 
Æpha
,

9532 
background
, *
compo£
)

9534 
do_background
)

9536 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


9537 
PNG_BACKGROUND_GAMMA_SCREEN
:

9538 
PNG_BACKGROUND_GAMMA_FILE
:

9539 
PNG_BACKGROUND_GAMMA_UNIQUE
:

9541 i‡(
Æpha
 < 1)

9543 i‡(
Æpha
 > 0)

9545 
öput_ßm∂e
 = i≈ut_ßm∂ê* 
Æpha
 + 
background
 * (1-alpha);

9546 i‡(
compo£
 !
NULL
)

9547 *
compo£
 = 1;

9551 
öput_ßm∂e
 = 
background
;

9556 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


9557 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_STANDARD
:

9558 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_BROKEN
:

9563 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_OPTIMIZED
:

9568 i‡(
Æpha
 < 1)

9570 i‡(
Æpha
 > 0)

9572 
öput_ßm∂e
 *
Æpha
;

9573 i‡(
compo£
 !
NULL
)

9574 *
compo£
 = 1;

9578 
öput_ßm∂e
 = 0;

9587 
	`UNUSED
(
Æpha
)

9588 
	`UNUSED
(
background
)

9589 
	`UNUSED
(
compo£
)

9593  
öput_ßm∂e
;

9594 
	}
}

9598 
	$gamma_comp⁄ít_vÆid©e
(c⁄° *
«me
, c⁄° 
vÆid©e_öfo
 *
vi
,

9599 
id
, 
od
,

9600 c⁄° 
Æpha
 ,

9601 c⁄° 
background
 )

9603 
isbô
 = 
id
 >> 
vi
->
isbô_shi·
;

9604 
sbô_max
 = 
vi
->sbit_max;

9605 
outmax
 = 
vi
->outmax;

9606 
do_background
 = 
vi
->do_background;

9608 
i
;

9614 
i
 = 
isbô
; i /
sbô_max
;

9620 i‡(
Æpha
 =1 || !
do_background


9621 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


9622 || 
do_background
 =
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_PNG


9624 || (
Æpha
 < 0

9625 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


9626 && 
do_background
 !
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_BROKEN


9635 
ícoded_ßm∂e
 = 
i
;

9636 
ícoded_îr‹
;

9640 i‡(
Æpha
 >0 && 
vi
->
gamma_c‹ª˘i⁄
 > 0)

9641 
ícoded_ßm∂e
 = 
	`pow
”ncoded_ßm∂e, 
vi
->
gamma_c‹ª˘i⁄
);

9642 
ícoded_ßm∂e
 *
outmax
;

9644 
ícoded_îr‹
 = 
	`Ábs
(
od
-
ícoded_ßm∂e
);

9646 i‡(
ícoded_îr‹
 > 
vi
->
dp
->
maxîrout
)

9647 
vi
->
dp
->
maxîrout
 = 
ícoded_îr‹
;

9649 i‡(
ícoded_îr‹
 < 
vi
->
maxout_tŸÆ
 &&Éncoded_îr‹ < vi->
ouéog
)

9650  
i
;

9662 
öput_ßm∂e
 = 
i
;

9663 
ouçut
, 
îr‹
, 
ícoded_ßm∂e
, 
ícoded_îr‹
;

9664 
es_lo
, 
es_hi
;

9665 
compo£
 = 0;

9666 
ouçut_is_ícoded
;

9667 
log_max_îr‹
 = 1;

9668 
≤g_c⁄°_ch¨p
 
∑ss
 = 0;

9673 i‡(
Æpha
 >= 0)

9675 
tcompo£
;

9677 i‡(
vi
->
fûe_övî£
 > 0)

9678 
öput_ßm∂e
 = 
	`pow
(öput_ßm∂e, 
vi
->
fûe_övî£
);

9681 
tcompo£
 = 0;

9682 
öput_ßm∂e
 = 
	`gamma_comp⁄ít_compo£
(
do_background
, input_sample,

9683 
Æpha
, 
background
, &
tcompo£
);

9685 i‡(
tcompo£
)

9686 
compo£
 = 1;

9692 
ouçut
 = 
od
;

9693 
ouçut
 /
outmax
;

9695 
ouçut_is_ícoded
 = 
vi
->
s¸ìn_gamma
 > 0;

9697 i‡(
Æpha
 < 0)

9699 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


9700 i‡(
do_background
 !
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_BROKEN
)

9706 
ouçut_is_ícoded
 = 0;

9707 
log_max_îr‹
 = 0;

9711 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


9714 i‡(
do_background
 =
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_OPTIMIZED
 &&

9715 
Æpha
 < 1)

9717 i‡(
Æpha
 > 0Ë
log_max_îr‹
 = 0;

9718 
ouçut_is_ícoded
 = 0;

9723 i‡(
ouçut_is_ícoded
)

9724 
ouçut
 = 
	`pow
(ouçut, 
vi
->
s¸ìn_gamma
);

9729 
ícoded_ßm∂e
 = 
öput_ßm∂e
;

9730 i‡(
ouçut_is_ícoded
)

9731 
ícoded_ßm∂e
 = 
	`pow
”ncoded_ßm∂e, 
vi
->
s¸ìn_övî£
);

9732 
ícoded_ßm∂e
 *
outmax
;

9734 
ícoded_îr‹
 = 
	`Ábs
(
od
-
ícoded_ßm∂e
);

9739 i‡(
log_max_îr‹
 && 
ícoded_îr‹
 > 
vi
->
dp
->
maxîrout
)

9740 
vi
->
dp
->
maxîrout
 = 
ícoded_îr‹
;

9742 i‡(
ícoded_îr‹
 < 
vi
->
maxout_tŸÆ
)

9744 i‡(
ícoded_îr‹
 < 
vi
->
ouéog
)

9745  
i
;

9750 
∑ss
 = "lessÅhan maxout:\n";

9767 
îr‹
 = 
	`Ábs
(
öput_ßm∂e
-
ouçut
);

9769 i‡(
log_max_îr‹
 && 
îr‹
 > 
vi
->
dp
->
maxîøbs
)

9770 
vi
->
dp
->
maxîøbs
 = 
îr‹
;

9775 i‡(
log_max_îr‹
 && 
öput_ßm∂e
 > .5)

9777 
≥r˚¡age_îr‹
 = 
îr‹
/
öput_ßm∂e
;

9778 i‡(
≥r˚¡age_îr‹
 > 
vi
->
dp
->
maxîΩc
)

9779 
vi
->
dp
->
maxîΩc
 = 
≥r˚¡age_îr‹
;

9789 
tmp
 = 
öput_ßm∂e
 * 
vi
->
maxpc
;

9790 i‡(
tmp
 < 
vi
->
maxabs
)Åmp = vi->maxabs;

9797 i‡(
compo£
 && 
tmp
 < 
vi
->
maxˇlc
)Åmp = vi->maxcalc;

9802 
es_lo
 = 
ícoded_ßm∂e
 - 
vi
->
maxout
;

9804 i‡(
es_lo
 > 0 && 
öput_ßm∂e
-
tmp
 > 0)

9806 
low_vÆue
 = 
öput_ßm∂e
-
tmp
;

9807 i‡(
ouçut_is_ícoded
)

9808 
low_vÆue
 = 
	`pow
÷ow_vÆue, 
vi
->
s¸ìn_övî£
);

9809 
low_vÆue
 *
outmax
;

9810 i‡(
low_vÆue
 < 
es_lo
)És_lo =Üow_value;

9813 
es_lo
 = 
	`˚û
”s_lÿ/ 
vi
->
outqu™t
 - .5) * vi->outquant;

9817 
es_lo
 = 0;

9819 
es_hi
 = 
ícoded_ßm∂e
 + 
vi
->
maxout
;

9821 i‡(
es_hi
 < 
outmax
 && 
öput_ßm∂e
+
tmp
 < 1)

9823 
high_vÆue
 = 
öput_ßm∂e
+
tmp
;

9824 i‡(
ouçut_is_ícoded
)

9825 
high_vÆue
 = 
	`pow
(high_vÆue, 
vi
->
s¸ìn_övî£
);

9826 
high_vÆue
 *
outmax
;

9827 i‡(
high_vÆue
 > 
es_hi
)És_hi = high_value;

9829 
es_hi
 = 
	`Êo‹
”s_hò/ 
vi
->
outqu™t
 + .5) * vi->outquant;

9833 
es_hi
 = 
outmax
;

9840 i‡(
od
 >
es_lo
 && od <
es_hi
)

9843 i‡(
ícoded_îr‹
 < 
vi
->
ouéog
)

9844  
i
;

9846 i‡(
∑ss
 == 0)

9847 
∑ss
 = "within digitizationÜimits:\n";

9854 
is_lo
, 
is_hi
;

9860 i‡(
∑ss
 =0 && 
vi
->
u£_öput_¥ecisi⁄
 && vi->
dp
->
sbô
)

9873 #i‡
PNG_LIBPNG_VER
 < 10700

9874 
	#SBIT_ERROR
 .5

	)

9876 
	#SBIT_ERROR
 1.

	)

9878 
tmp
 = (
isbô
 - 
SBIT_ERROR
)/
sbô_max
;

9880 i‡(
tmp
 <= 0)

9881 
tmp
 = 0;

9883 i‡(
Æpha
 >0 && 
vi
->
fûe_övî£
 > 0 && 
tmp
 < 1)

9884 
tmp
 = 
	`pow
—mp, 
vi
->
fûe_övî£
);

9886 
tmp
 = 
	`gamma_comp⁄ít_compo£
(
do_background
,Åmp, 
Æpha
, 
background
,

9887 
NULL
);

9889 i‡(
ouçut_is_ícoded
 && 
tmp
 > 0 &&Åmp < 1)

9890 
tmp
 = 
	`pow
—mp, 
vi
->
s¸ìn_övî£
);

9892 
is_lo
 = 
	`˚û
(
outmax
 * 
tmp
 - 
vi
->
maxout_tŸÆ
);

9894 i‡(
is_lo
 < 0)

9895 
is_lo
 = 0;

9897 
tmp
 = (
isbô
 + 
SBIT_ERROR
)/
sbô_max
;

9899 i‡(
tmp
 >= 1)

9900 
tmp
 = 1;

9902 i‡(
Æpha
 >0 && 
vi
->
fûe_övî£
 > 0 && 
tmp
 < 1)

9903 
tmp
 = 
	`pow
—mp, 
vi
->
fûe_övî£
);

9905 
tmp
 = 
	`gamma_comp⁄ít_compo£
(
do_background
,Åmp, 
Æpha
, 
background
,

9906 
NULL
);

9908 i‡(
ouçut_is_ícoded
 && 
tmp
 > 0 &&Åmp < 1)

9909 
tmp
 = 
	`pow
—mp, 
vi
->
s¸ìn_övî£
);

9911 
is_hi
 = 
	`Êo‹
(
outmax
 * 
tmp
 + 
vi
->
maxout_tŸÆ
);

9913 i‡(
is_hi
 > 
outmax
)

9914 
is_hi
 = 
outmax
;

9916 i‡(!(
od
 < 
is_lo
 || od > 
is_hi
))

9918 i‡(
ícoded_îr‹
 < 
vi
->
ouéog
)

9919  
i
;

9921 
∑ss
 = "within inputÖrecisionÜimits:\n";

9932 #i‚de‡
PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED


9933 #i‡
PNG_LIBPNG_VER
 < 10504

9940 i‡(
∑ss
 =0 && 
Æpha
 < 0 && 
vi
->
sˇÀ16
 && vi->
sbô
 > 8 &&

9941 
vi
->
sbô
 + vi->
isbô_shi·
 == 16)

9943 
tmp
 = ((
id
 >> 8) - .5)/255;

9945 i‡(
tmp
 > 0)

9947 
is_lo
 = 
	`˚û
(
outmax
 * 
tmp
 - 
vi
->
maxout_tŸÆ
);

9948 i‡(
is_lo
 < 0) is_lo = 0;

9952 
is_lo
 = 0;

9954 
tmp
 = ((
id
 >> 8) + .5)/255;

9956 i‡(
tmp
 < 1)

9958 
is_hi
 = 
	`Êo‹
(
outmax
 * 
tmp
 + 
vi
->
maxout_tŸÆ
);

9959 i‡(
is_hi
 > 
outmax
) is_hi = outmax;

9963 
is_hi
 = 
outmax
;

9965 i‡(!(
od
 < 
is_lo
 || od > 
is_hi
))

9967 i‡(
ícoded_îr‹
 < 
vi
->
ouéog
)

9968  
i
;

9970 
∑ss
 = "within 8 bitÜimits:\n";

9977 
is_lo
 = 
es_lo
, 
is_hi
 = 
es_hi
;

9984 
size_t
 
pos
 = 0;

9988 
¥ecisi⁄
 = (
outmax
 >= 1000 ? 6 : 3);

9989 
u£_öput
=1, 
u£_background
=0, 
do_compo£
=0;

9990 
msg
[256];

9992 i‡(
∑ss
 != 0)

9993 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "\n\t");

9998 
do_background
)

10000 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


10001 
PNG_BACKGROUND_GAMMA_SCREEN
:

10002 
PNG_BACKGROUND_GAMMA_FILE
:

10003 
PNG_BACKGROUND_GAMMA_UNIQUE
:

10004 
u£_background
 = (
Æpha
 >= 0 &&álpha < 1);

10006 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


10008 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_STANDARD
:

10009 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_BROKEN
:

10010 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_OPTIMIZED
:

10012 
do_compo£
 = (
Æpha
 > 0 &&álpha < 1);

10013 
u£_öput
 = (
Æpha
 != 0);

10021 i‡(
compo£
 !
do_compo£
)

10022 
	`≤g_îr‹
(
vi
->
µ
, "internalÉrror (compose)");

10025 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
«me
);

10026 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "(");

10027 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
id
);

10028 i‡(
u£_öput
 || 
∑ss
 != 0 )

10030 i‡(
isbô
 !
id
)

10033 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, ", sbit(");

10034 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
vi
->
sbô
);

10035 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "): ");

10036 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
isbô
);

10038 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "/");

10040 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
vi
->
sbô_max
);

10042 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, ")");

10047 i‡(
compo£
 || 
∑ss
 != 0)

10054 i‡(
u£_öput
 || 
∑ss
 != 0)

10056 i‡(
vi
->
fûe_övî£
 > 0)

10058 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "^");

10059 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
vi
->
fûe_övî£
, 2);

10063 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "[linear]");

10065 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "*(alpha)");

10066 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
Æpha
, 
¥ecisi⁄
);

10073 i‡(
u£_background
)

10075 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
u£_öput
 ? "+" : " ");

10076 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "(background)");

10077 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
background
, 
¥ecisi⁄
);

10078 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "*");

10079 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 1-
Æpha
, 
¥ecisi⁄
);

10087 i‡(
compo£
 || 
Æpha
 < 0 || 
∑ss
 != 0)

10089 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos,

10090 
∑ss
 != 0 ? " =\n\t" : " = ");

10091 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
öput_ßm∂e
, 
¥ecisi⁄
);

10092 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, " (libpng: ");

10093 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
ouçut
, 
¥ecisi⁄
);

10094 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, ")");

10097 i‡(
ouçut_is_ícoded
)

10099 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, " ^");

10100 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
vi
->
s¸ìn_övî£
, 2);

10101 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "(to screen) =");

10105 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, " [screen isÜinear] =");

10108 i‡((!
compo£
 && 
Æpha
 >0Ë|| 
∑ss
 != 0)

10110 i‡(
∑ss
 != 0)

10111 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "\n\t[overall:");

10118 i‡(
vi
->
gamma_c‹ª˘i⁄
 > 0)

10120 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, " ^");

10121 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
vi
->
gamma_c‹ª˘i⁄
, 2);

10122 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "(gamma correction) =");

10126 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos,

10129 i‡(
∑ss
 != 0)

10130 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "]");

10136 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, 
∑ss
 != 0 ? "\n\t" : " ");

10137 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
is_lo
, 1);

10138 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, " < ");

10139 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
ícoded_ßm∂e
, 1);

10140 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, " (libpng: ");

10141 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
od
);

10142 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, ")");

10143 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "/");

10144 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
outmax
);

10145 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, " < ");

10146 
pos
 = 
	`ß„ˇtd
(
msg
,  msg,Öos, 
is_hi
, 1);

10148 i‡(
∑ss
 == 0)

10150 #ifde‡
PNG_WARNINGS_SUPPORTED


10151 
	`≤g_w¨nög
(
vi
->
µ
, 
msg
);

10153 
	`°‹e_w¨nög
(
vi
->
µ
, 
msg
);

10158 
	`°‹e_vîbo£
(&
vi
->
dp
->
pm
->
this
, vi->
µ
, 
∑ss
, 
msg
);

10163  
i
;

10164 
	}
}

10167 
	$gamma_image_vÆid©e
(
gamma_di•œy
 *
dp
, 
≤g_c⁄°_°ru˘p
 
µ
,

10168 
≤g_öf›
 
pi
)

10171 c⁄° 
≤g_°‹e
* c⁄° 
ps
 = 
dp
->
this
.ps;

10172 
≤g_byã
 
ö_˘
 = 
dp
->
this
.
cﬁour_ty≥
;

10173 
≤g_byã
 
ö_bd
 = 
dp
->
this
.
bô_dïth
;

10174 
≤g_uöt_32
 
w
 = 
dp
->
this
.w;

10175 
≤g_uöt_32
 
h
 = 
dp
->
this
.h;

10176 c⁄° 
size_t
 
cbRow
 = 
dp
->
this
.cbRow;

10177 
≤g_byã
 
out_˘
 = 
	`≤g_gë_cﬁ‹_ty≥
(
µ
, 
pi
);

10178 
≤g_byã
 
out_bd
 = 
	`≤g_gë_bô_dïth
(
µ
, 
pi
);

10219 
ßm∂es_≥r_pixñ
 = (
out_˘
 & 2U) ? 3U : 1U;

10220 
¥o˚ssög
;

10221 
≤g_uöt_32
 
y
;

10222 c⁄° 
°‹e_∑Àâe_íåy
 *
ö_∑Àâe
 = 
dp
->
this
.
∑Àâe
;

10223 
ö_is_å™•¨ít
 = 
dp
->
this
.
is_å™•¨ít
;

10224 
¥o˚ss_tRNS
;

10225 
out_≈Æëã
 = -1;

10226 
out_is_å™•¨ít
 = 0;

10227 
°‹e_∑Àâe
 
out_∑Àâe
;

10228 
vÆid©e_öfo
 
vi
;

10231 
	`°‹e_image_check
(
dp
->
this
.
ps
, 
µ
, 0);

10236 
	`öô_vÆid©e_öfo
(&
vi
, 
dp
, 
µ
, 
ö_˘
==3?8:
ö_bd
, 
out_˘
==3?8:
out_bd
);

10238 
¥o˚ssög
 = (
vi
.
gamma_c‹ª˘i⁄
 > 0 && !
dp
->
thªshﬁd_ã°
)

10239 || 
ö_bd
 !
out_bd
 || 
ö_˘
 !
out_˘
 || 
vi
.
do_background
;

10240 
¥o˚ss_tRNS
 = 
dp
->
this
.
has_tRNS
 && 
vi
.
do_background
;

10249 i‡(
ö_˘
 =3 && 
out_˘
 == 3)

10250 
¥o˚ssög
 = 0;

10252 i‡(
¥o˚ssög
 && 
out_˘
 == 3)

10253 
out_is_å™•¨ít
 = 
	`ªad_∑Àâe
(
out_∑Àâe
, &
out_≈Æëã
, 
µ
, 
pi
);

10255 
y
=0; y<
h
; ++y)

10257 
≤g_c⁄°_byãp
 
pRow
 = 
	`°‹e_image_row
(
ps
, 
µ
, 0, 
y
);

10258 
≤g_byã
 
°d
[
STANDARD_ROWMAX
];

10260 
	`å™sf‹m_row
(
µ
, 
°d
, 
ö_˘
, 
ö_bd
, 
y
);

10262 i‡(
¥o˚ssög
)

10264 
x
;

10266 
x
=0; x<
w
; ++x)

10268 
Æpha
 = 1;

10271 
ö_ödex
 =

10272 
ö_˘
 =3 ? 
	`ßm∂e
(
°d
, 3, 
ö_bd
, 
x
, 0, 0, 0) : 256;

10273 
out_ödex
 =

10274 
out_˘
 =3 ? 
	`ßm∂e
(
°d
, 3, 
out_bd
, 
x
, 0, 0, 0) : 256;

10279 i‡((
ö_˘
 & 
PNG_COLOR_MASK_ALPHA
) != 0 ||

10280 (
ö_˘
 =3 && 
ö_is_å™•¨ít
))

10282 
öput_Æpha
 = 
ö_˘
 == 3 ?

10283 
dp
->
this
.
∑Àâe
[
ö_ödex
].
Æpha
 :

10284 
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 
ßm∂es_≥r_pixñ
, 0, 0);

10286 
ouçut_Æpha
 = 65536 ;

10288 i‡(
out_˘
 == 3)

10290 i‡(
out_is_å™•¨ít
)

10291 
ouçut_Æpha
 = 
out_∑Àâe
[
out_ödex
].
Æpha
;

10294 i‡((
out_˘
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

10295 
ouçut_Æpha
 = 
	`ßm∂e
(
pRow
, 
out_˘
, 
out_bd
, 
x
,

10296 
ßm∂es_≥r_pixñ
, 0, 0);

10298 i‡(
ouçut_Æpha
 != 65536)

10299 
Æpha
 = 
	`gamma_comp⁄ít_vÆid©e
("Æpha", &
vi
, 
öput_Æpha
,

10300 
ouçut_Æpha
, -1 , 0 );

10307 
Æpha
 = 
öput_Æpha
 >> 
vi
.
isbô_shi·
;

10308 
Æpha
 /
vi
.
sbô_max
;

10312 i‡(
¥o˚ss_tRNS
)

10318 
ö_˘
)

10321 i‡(
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 0, 0, 0) ==

10322 
dp
->
this
.
å™•¨ít
.
ªd
)

10323 
Æpha
 = 0;

10327 i‡(
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 0, 0, 0) ==

10328 
dp
->
this
.
å™•¨ít
.
ªd
 &&

10329 
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 1, 0, 0) ==

10330 
dp
->
this
.
å™•¨ít
.
gªí
 &&

10331 
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 2, 0, 0) ==

10332 
dp
->
this
.
å™•¨ít
.
blue
)

10333 
Æpha
 = 0;

10342 i‡((
ö_˘
 & 
PNG_COLOR_MASK_COLOR
) == 0)

10343 ()
	`gamma_comp⁄ít_vÆid©e
("gøy", &
vi
,

10344 
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 0, 0, 0),

10345 
	`ßm∂e
(
pRow
, 
out_˘
, 
out_bd
, 
x
, 0, 0, 0),

10346 
Æpha
 , 
vi
.
background_ªd
);

10349 ()
	`gamma_comp⁄ít_vÆid©e
("ªd", &
vi
,

10350 
ö_˘
 =3 ? 
ö_∑Àâe
[
ö_ödex
].
ªd
 :

10351 
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 0, 0, 0),

10352 
out_˘
 =3 ? 
out_∑Àâe
[
out_ödex
].
ªd
 :

10353 
	`ßm∂e
(
pRow
, 
out_˘
, 
out_bd
, 
x
, 0, 0, 0),

10354 
Æpha
 , 
vi
.
background_ªd
);

10356 ()
	`gamma_comp⁄ít_vÆid©e
("gªí", &
vi
,

10357 
ö_˘
 =3 ? 
ö_∑Àâe
[
ö_ödex
].
gªí
 :

10358 
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 1, 0, 0),

10359 
out_˘
 =3 ? 
out_∑Àâe
[
out_ödex
].
gªí
 :

10360 
	`ßm∂e
(
pRow
, 
out_˘
, 
out_bd
, 
x
, 1, 0, 0),

10361 
Æpha
 , 
vi
.
background_gªí
);

10363 ()
	`gamma_comp⁄ít_vÆid©e
("blue", &
vi
,

10364 
ö_˘
 =3 ? 
ö_∑Àâe
[
ö_ödex
].
blue
 :

10365 
	`ßm∂e
(
°d
, 
ö_˘
, 
ö_bd
, 
x
, 2, 0, 0),

10366 
out_˘
 =3 ? 
out_∑Àâe
[
out_ödex
].
blue
 :

10367 
	`ßm∂e
(
pRow
, 
out_˘
, 
out_bd
, 
x
, 2, 0, 0),

10368 
Æpha
 , 
vi
.
background_blue
);

10373 i‡(
	`memcmp
(
°d
, 
pRow
, 
cbRow
) != 0)

10375 
msg
[64];

10378 
	`•rötf
(
msg
, "gamma: belowÅhresholdÑow %lu changed",

10379 ()
y
);

10381 
	`≤g_îr‹
(
µ
, 
msg
);

10385 
dp
->
this
.
ps
->
vÆid©ed
 = 1;

10386 
	}
}

10388 
PNGCBAPI


10389 
	$gamma_íd
(
≤g_°ru˘p
 
µIn
, 
≤g_öf›
 
pi
)

10391 
≤g_c⁄°_°ru˘p
 
µ
 = 
µIn
;

10392 
gamma_di•œy
 *
dp
 = 
	`voidˇ°
(gamma_di•œy*, 
	`≤g_gë_¥ogªssive_±r
(
µ
));

10394 i‡(!
dp
->
this
.
•ìd
)

10395 
	`gamma_image_vÆid©e
(
dp
, 
µ
, 
pi
);

10397 
dp
->
this
.
ps
->
vÆid©ed
 = 1;

10398 
	}
}

10407 
	$gamma_ã°
(
≤g_modifõr
 *
pmIn
, 
≤g_byã
 
cﬁour_ty≥In
,

10408 
≤g_byã
 
bô_dïthIn
, 
∑Àâe_numbîIn
,

10409 
öãæa˚_ty≥In
,

10410 c⁄° 
fûe_gammaIn
, c⁄° 
s¸ìn_gammaIn
,

10411 
≤g_byã
 
sbôIn
, 
thªshﬁd_ã°In
,

10412 c⁄° *
«me
,

10413 
u£_öput_¥ecisi⁄In
, 
sˇÀ16In
,

10414 
ex∑nd16In
, 
do_backgroundIn
,

10415 c⁄° 
≤g_cﬁ‹_16
 *
bkgd_cﬁ‹In
, 
bkgd_gammaIn
)

10417 
gamma_di•œy
 
d
;

10418 
	`c⁄ãxt
(&
pmIn
->
this
, 
Áu…
);

10420 
	`gamma_di•œy_öô
(&
d
, 
pmIn
, 
	`FILEID
(
cﬁour_ty≥In
, 
bô_dïthIn
,

10421 
∑Àâe_numbîIn
, 
öãæa˚_ty≥In
, 0, 0, 0),

10422 
fûe_gammaIn
, 
s¸ìn_gammaIn
, 
sbôIn
,

10423 
thªshﬁd_ã°In
, 
u£_öput_¥ecisi⁄In
, 
sˇÀ16In
,

10424 
ex∑nd16In
, 
do_backgroundIn
, 
bkgd_cﬁ‹In
, 
bkgd_gammaIn
);

10426 
Try


10428 
≤g_°ru˘p
 
µ
;

10429 
≤g_öf›
 
pi
;

10430 
gama_modifiˇti⁄
 
gama_mod
;

10431 
§gb_modifiˇti⁄
 
§gb_mod
;

10432 
sbô_modifiˇti⁄
 
sbô_mod
;

10435 
d
.
pm
->
ícodög_cou¡î
 = 0;

10436 
	`modifõr_£t_ícodög
(
d
.
pm
);

10437 
d
.
pm
->
cuºít_gamma
 = d.
fûe_gamma
;

10442 
d
.
pm
->
modifiˇti⁄s
 = 
NULL
;

10443 
	`gama_modifiˇti⁄_öô
(&
gama_mod
, 
d
.
pm
, d.
fûe_gamma
);

10444 
	`§gb_modifiˇti⁄_öô
(&
§gb_mod
, 
d
.
pm
, 127 );

10445 i‡(
d
.
sbô
 > 0)

10446 
	`sbô_modifiˇti⁄_öô
(&
sbô_mod
, 
d
.
pm
, d.
sbô
);

10448 
	`modifiˇti⁄_ª£t
(
d
.
pm
->
modifiˇti⁄s
);

10451 
µ
 = 
	`£t_modifõr_f‹_ªad
(
d
.
pm
, &
pi
, d.
this
.
id
, 
«me
);

10452 
	`°™d¨d_∑Àâe_öô
(&
d
.
this
);

10455 i‡(
d
.
pm
->
this
.
¥ogªssive
)

10458 
	`≤g_£t_¥ogªssive_ªad_‚
(
µ
, &
d
, 
gamma_öfo
, 
¥ogªssive_row
,

10459 
gamma_íd
);

10462 
	`modifõr_¥ogªssive_ªad
(
d
.
pm
, 
µ
, 
pi
);

10467 
	`≤g_£t_ªad_‚
(
µ
, 
d
.
pm
, 
modifõr_ªad
);

10470 
	`≤g_ªad_öfo
(
µ
, 
pi
);

10473 
	`gamma_öfo_imp
(&
d
, 
µ
, 
pi
);

10475 
	`£quítül_row
(&
d
.
this
, 
µ
, 
pi
, -1, 0);

10477 i‡(!
d
.
this
.
•ìd
)

10478 
	`gamma_image_vÆid©e
(&
d
, 
µ
, 
pi
);

10480 
d
.
this
.
ps
->
vÆid©ed
 = 1;

10483 
	`modifõr_ª£t
(
d
.
pm
);

10485 i‡(
d
.
pm
->
log
 && !d.
thªshﬁd_ã°
 && !d.
this
.
•ìd
)

10486 
	`Ârötf
(
°dîr
, "%d bit %s %s: maxÉrror %f (%.2g, %2g%%)\n",

10487 
d
.
this
.
bô_dïth
, 
cﬁour_ty≥s
[d.this.
cﬁour_ty≥
], 
«me
,

10488 
d
.
maxîrout
, d.
maxîøbs
, 100*d.
maxîΩc
);

10491 i‡(
d
.
this
.
cﬁour_ty≥
 == 0 || d.this.colour_type == 4)

10493 
d
.
this
.
bô_dïth
)

10499 i‡(
d
.
maxîrout
 > d.
pm
->
îr‹_gøy_2
)

10500 
d
.
pm
->
îr‹_gøy_2
 = d.
maxîrout
;

10505 i‡(
d
.
maxîrout
 > d.
pm
->
îr‹_gøy_4
)

10506 
d
.
pm
->
îr‹_gøy_4
 = d.
maxîrout
;

10511 i‡(
d
.
maxîrout
 > d.
pm
->
îr‹_gøy_8
)

10512 
d
.
pm
->
îr‹_gøy_8
 = d.
maxîrout
;

10517 i‡(
d
.
maxîrout
 > d.
pm
->
îr‹_gøy_16
)

10518 
d
.
pm
->
îr‹_gøy_16
 = d.
maxîrout
;

10523 
	`≤g_îr‹
(
µ
, "bad bit depth (internal: 1)");

10527 i‡(
d
.
this
.
cﬁour_ty≥
 == 2 || d.this.colour_type == 6)

10529 
d
.
this
.
bô_dïth
)

10533 i‡(
d
.
maxîrout
 > d.
pm
->
îr‹_cﬁ‹_8
)

10534 
d
.
pm
->
îr‹_cﬁ‹_8
 = d.
maxîrout
;

10540 i‡(
d
.
maxîrout
 > d.
pm
->
îr‹_cﬁ‹_16
)

10541 
d
.
pm
->
îr‹_cﬁ‹_16
 = d.
maxîrout
;

10546 
	`≤g_îr‹
(
µ
, "bad bit depth (internal: 2)");

10550 i‡(
d
.
this
.
cﬁour_ty≥
 == 3)

10552 i‡(
d
.
maxîrout
 > d.
pm
->
îr‹_ödexed
)

10553 
d
.
pm
->
îr‹_ödexed
 = d.
maxîrout
;

10557 
	`C©ch
(
Áu…
)

10558 
	`modifõr_ª£t
(
	`voidˇ°
(
≤g_modifõr
*,(*)
Áu…
));

10559 
	}
}

10561 
	$gamma_thªshﬁd_ã°
(
≤g_modifõr
 *
pm
, 
≤g_byã
 
cﬁour_ty≥
,

10562 
≤g_byã
 
bô_dïth
, 
öãæa˚_ty≥
, 
fûe_gamma
,

10563 
s¸ìn_gamma
)

10565 
size_t
 
pos
 = 0;

10566 
«me
[64];

10567 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "threshold ");

10568 
pos
 = 
	`ß„ˇtd
(
«me
, Çame,Öos, 
fûe_gamma
, 3);

10569 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "/");

10570 
pos
 = 
	`ß„ˇtd
(
«me
, Çame,Öos, 
s¸ìn_gamma
, 3);

10572 ()
	`gamma_ã°
(
pm
, 
cﬁour_ty≥
, 
bô_dïth
, 0 , 
öãæa˚_ty≥
,

10573 
fûe_gamma
, 
s¸ìn_gamma
, 0 , 1 , 
«me
,

10577 
	}
}

10580 
	$≥rf‹m_gamma_thªshﬁd_ã°s
(
≤g_modifõr
 *
pm
)

10582 
≤g_byã
 
cﬁour_ty≥
 = 0;

10583 
≤g_byã
 
bô_dïth
 = 0;

10584 
∑Àâe_numbî
 = 0;

10593 
	`√xt_f‹m©
(&
cﬁour_ty≥
, &
bô_dïth
, &
∑Àâe_numbî
,

10594 
pm
->
ã°_lbg_gamma_thªshﬁd
,Öm->
ã°_tRNS
))

10595 i‡(
∑Àâe_numbî
 < 2)

10597 
ã°_gamma
 = 1.0;

10598 
ã°_gamma
 >= .4)

10603 
	`gamma_thªshﬁd_ã°
(
pm
, 
cﬁour_ty≥
, 
bô_dïth
,Öm->
öãæa˚_ty≥
,

10604 
ã°_gamma
, 1/test_gamma);

10605 
ã°_gamma
 *= .95;

10609 
	`gamma_thªshﬁd_ã°
(
pm
, 
cﬁour_ty≥
, 
bô_dïth
,Öm->
öãæa˚_ty≥
,

10612 i‡(
	`Áû
(
pm
))

10615 
	}
}

10617 
	$gamma_å™sf‹m_ã°
(
≤g_modifõr
 *
pm
,

10618 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
,

10619 
∑Àâe_numbî
,

10620 
öãæa˚_ty≥
, c⁄° 
fûe_gamma
,

10621 c⁄° 
s¸ìn_gamma
, 
≤g_byã
 
sbô
,

10622 
u£_öput_¥ecisi⁄
, 
sˇÀ16
)

10624 
size_t
 
pos
 = 0;

10625 
«me
[64];

10627 i‡(
sbô
 !
bô_dïth
 && sbit != 0)

10629 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "sbit(");

10630 
pos
 = 
	`ß„ˇä
(
«me
, Çame,Öos, 
sbô
);

10631 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, ") ");

10635 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "gamma ");

10637 i‡(
sˇÀ16
)

10638 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "16to8 ");

10640 
pos
 = 
	`ß„ˇtd
(
«me
, Çame,Öos, 
fûe_gamma
, 3);

10641 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "->");

10642 
pos
 = 
	`ß„ˇtd
(
«me
, Çame,Öos, 
s¸ìn_gamma
, 3);

10644 
	`gamma_ã°
(
pm
, 
cﬁour_ty≥
, 
bô_dïth
, 
∑Àâe_numbî
, 
öãæa˚_ty≥
,

10645 
fûe_gamma
, 
s¸ìn_gamma
, 
sbô
, 0, 
«me
, 
u£_öput_¥ecisi⁄
,

10646 
sˇÀ16
, 
pm
->
ã°_gamma_ex∑nd16
, 0 , 0, 0);

10647 
	}
}

10649 
	$≥rf‹m_gamma_å™sf‹m_ã°s
(
≤g_modifõr
 *
pm
)

10651 
≤g_byã
 
cﬁour_ty≥
 = 0;

10652 
≤g_byã
 
bô_dïth
 = 0;

10653 
∑Àâe_numbî
 = 0;

10655 
	`√xt_f‹m©
(&
cﬁour_ty≥
, &
bô_dïth
, &
∑Àâe_numbî
,

10656 
pm
->
ã°_lbg_gamma_å™sf‹m
,Öm->
ã°_tRNS
))

10658 
i
, 
j
;

10660 
i
=0; i<
pm
->
ngamma_ã°s
; ++i)

10662 
j
=0; j<
pm
->
ngamma_ã°s
; ++j)

10664 i‡(
i
 !
j
)

10666 
	`gamma_å™sf‹m_ã°
(
pm
, 
cﬁour_ty≥
, 
bô_dïth
, 
∑Àâe_numbî
,

10667 
pm
->
öãæa˚_ty≥
, 1/pm->
gammas
[
i
],Öm->gammas[
j
],

10668 0 , 
pm
->
u£_öput_¥ecisi⁄
, 0 );

10670 i‡(
	`Áû
(
pm
))

10676 
	}
}

10678 
	$≥rf‹m_gamma_sbô_ã°s
(
≤g_modifõr
 *
pm
)

10680 
≤g_byã
 
sbô
;

10686 
sbô
=
pm
->
sbôlow
; sbô<(1<<
READ_BDHI
); ++sbit)

10688 
≤g_byã
 
cﬁour_ty≥
 = 0, 
bô_dïth
 = 0;

10689 
≈Æëã
 = 0;

10691 
	`√xt_f‹m©
(&
cﬁour_ty≥
, &
bô_dïth
, &
≈Æëã
,

10692 
pm
->
ã°_lbg_gamma_sbô
,Öm->
ã°_tRNS
))

10693 i‡((
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) == 0 &&

10694 ((
cﬁour_ty≥
 =3 && 
sbô
 < 8) ||

10695 (
cﬁour_ty≥
 !3 && 
sbô
 < 
bô_dïth
)))

10697 
i
;

10699 
i
=0; i<
pm
->
ngamma_ã°s
; ++i)

10701 
j
;

10703 
j
=0; j<
pm
->
ngamma_ã°s
; ++j)

10705 i‡(
i
 !
j
)

10707 
	`gamma_å™sf‹m_ã°
(
pm
, 
cﬁour_ty≥
, 
bô_dïth
, 
≈Æëã
,

10708 
pm
->
öãæa˚_ty≥
, 1/pm->
gammas
[
i
],Öm->gammas[
j
],

10709 
sbô
, 
pm
->
u£_öput_¥ecisi⁄_sbô
, 0 );

10711 i‡(
	`Áû
(
pm
))

10718 
	}
}

10724 #ifde‡
DO_16BIT


10725 
	$≥rf‹m_gamma_sˇÀ16_ã°s
(
≤g_modifõr
 *
pm
)

10727 #i‚de‡
PNG_MAX_GAMMA_8


10728 
	#PNG_MAX_GAMMA_8
 11

	)

10730 #i‡
deföed
 
PNG_MAX_GAMMA_8
 || 
PNG_LIBPNG_VER
 < 10700

10731 
	#SBIT_16_TO_8
 
PNG_MAX_GAMMA_8


	)

10733 
	#SBIT_16_TO_8
 16

	)

10743 
i
, 
j
;

10744 
i
=0; i<
pm
->
ngamma_ã°s
; ++i)

10746 
j
=0; j<
pm
->
ngamma_ã°s
; ++j)

10748 i‡(
i
 !
j
 &&

10749 
	`Ábs
(
pm
->
gammas
[
j
]/pm->gammas[
i
]-1Ë>
PNG_GAMMA_THRESHOLD
)

10751 
	`gamma_å™sf‹m_ã°
(
pm
, 0, 16, 0,Öm->
öãæa˚_ty≥
,

10752 1/
pm
->
gammas
[
i
],Öm->gammas[
j
], 
SBIT_16_TO_8
,

10753 
pm
->
u£_öput_¥ecisi⁄_16to8
, 1 );

10755 i‡(
	`Áû
(
pm
))

10758 
	`gamma_å™sf‹m_ã°
(
pm
, 2, 16, 0,Öm->
öãæa˚_ty≥
,

10759 1/
pm
->
gammas
[
i
],Öm->gammas[
j
], 
SBIT_16_TO_8
,

10760 
pm
->
u£_öput_¥ecisi⁄_16to8
, 1 );

10762 i‡(
	`Áû
(
pm
))

10765 
	`gamma_å™sf‹m_ã°
(
pm
, 4, 16, 0,Öm->
öãæa˚_ty≥
,

10766 1/
pm
->
gammas
[
i
],Öm->gammas[
j
], 
SBIT_16_TO_8
,

10767 
pm
->
u£_öput_¥ecisi⁄_16to8
, 1 );

10769 i‡(
	`Áû
(
pm
))

10772 
	`gamma_å™sf‹m_ã°
(
pm
, 6, 16, 0,Öm->
öãæa˚_ty≥
,

10773 1/
pm
->
gammas
[
i
],Öm->gammas[
j
], 
SBIT_16_TO_8
,

10774 
pm
->
u£_öput_¥ecisi⁄_16to8
, 1 );

10776 i‡(
	`Áû
(
pm
))

10781 
	}
}

10784 #i‡
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) ||\

10785 
	$deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
)

10786 
	$gamma_composôi⁄_ã°
(
≤g_modifõr
 *
pm
,

10787 
≤g_byã
 
cﬁour_ty≥
,Öng_byã 
bô_dïth
,

10788 
∑Àâe_numbî
,

10789 
öãæa˚_ty≥
, c⁄° 
fûe_gamma
,

10790 c⁄° 
s¸ìn_gamma
,

10791 
u£_öput_¥ecisi⁄
, 
do_background
,

10792 
ex∑nd_16
)

10794 
size_t
 
pos
 = 0;

10795 
≤g_c⁄°_ch¨p
 
ba£
;

10796 
bg
;

10797 
«me
[128];

10798 
≤g_cﬁ‹_16
 
background
;

10801 
do_background
)

10804 
ba£
 = "";

10805 
bg
 = 4;

10807 
PNG_BACKGROUND_GAMMA_SCREEN
:

10808 
ba£
 = " bckg(Screen):";

10809 
bg
 = 1/
s¸ìn_gamma
;

10811 
PNG_BACKGROUND_GAMMA_FILE
:

10812 
ba£
 = " bckg(File):";

10813 
bg
 = 
fûe_gamma
;

10815 
PNG_BACKGROUND_GAMMA_UNIQUE
:

10816 
ba£
 = " bckg(Unique):";

10821 
bg
 = (
fûe_gamma
 + 
s¸ìn_gamma
) / 3;

10823 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


10824 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_PNG
:

10825 
ba£
 = "álpha(PNG)";

10826 
bg
 = 4;

10828 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_STANDARD
:

10829 
ba£
 = "álpha(Porter-Duff)";

10830 
bg
 = 4;

10832 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_OPTIMIZED
:

10833 
ba£
 = "álpha(Optimized)";

10834 
bg
 = 4;

10836 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_BROKEN
:

10837 
ba£
 = "álpha(Broken)";

10838 
bg
 = 4;

10846 i‡(
ex∑nd_16
 || 
bô_dïth
 == 16)

10848 
≤g_uöt_32
 
r
 = 
	`øndom_32
();

10850 
background
.
ªd
 = (
≤g_uöt_16
)
r
;

10851 
background
.
gªí
 = (
≤g_uöt_16
)(
r
 >> 16);

10852 
r
 = 
	`øndom_32
();

10853 
background
.
blue
 = (
≤g_uöt_16
)
r
;

10854 
background
.
gøy
 = (
≤g_uöt_16
)(
r
 >> 16);

10862 #i‡
DIGITIZE


10863 i‡(
ex∑nd_16
 && (
do_background
 =
PNG_BACKGROUND_GAMMA_UNIQUE
 ||

10864 
do_background
 =
PNG_BACKGROUND_GAMMA_FILE
) &&

10865 
	`Ábs
(
bg
*
s¸ìn_gamma
-1Ë> 
PNG_GAMMA_THRESHOLD
)

10871 
background
.
ªd
 = (
≤g_uöt_16
)((background.red >> 8) * 257);

10872 
background
.
gªí
 = (
≤g_uöt_16
)((background.green >> 8) * 257);

10873 
background
.
blue
 = (
≤g_uöt_16
)((background.blue >> 8) * 257);

10874 
background
.
gøy
 = (
≤g_uöt_16
)((background.gray >> 8) * 257);

10881 
≤g_uöt_32
 
r
 = 
	`øndom_32
();

10883 
background
.
ªd
 = (
≤g_byã
)
r
;

10884 
background
.
gªí
 = (
≤g_byã
)(
r
 >> 8);

10885 
background
.
blue
 = (
≤g_byã
)(
r
 >> 16);

10886 
background
.
gøy
 = (
≤g_byã
)(
r
 >> 24);

10889 
background
.
ödex
 = 193;

10891 i‡(!(
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
))

10898 i‡(
bô_dïth
 < 8)

10899 
background
.
gøy
 &(
≤g_uöt_16
)((1U << 
bô_dïth
)-1);

10904 
background
.
ªd
 = background.
gªí
 = background.
blue
 = background.
gøy
;

10907 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "gamma ");

10908 
pos
 = 
	`ß„ˇtd
(
«me
, Çame,Öos, 
fûe_gamma
, 3);

10909 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "->");

10910 
pos
 = 
	`ß„ˇtd
(
«me
, Çame,Öos, 
s¸ìn_gamma
, 3);

10912 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, 
ba£
);

10913 i‡(
do_background
 < 
ALPHA_MODE_OFFSET
)

10916 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, "(");

10919 i‡(
cﬁour_ty≥
 & 
PNG_COLOR_MASK_COLOR
)

10921 
pos
 = 
	`ß„ˇä
(
«me
, Çame,Öos, 
background
.
ªd
);

10922 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, ",");

10923 
pos
 = 
	`ß„ˇä
(
«me
, Çame,Öos, 
background
.
gªí
);

10924 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, ",");

10925 
pos
 = 
	`ß„ˇä
(
«me
, Çame,Öos, 
background
.
blue
);

10928 
pos
 = 
	`ß„ˇä
(
«me
, Çame,Öos, 
background
.
gøy
);

10929 
pos
 = 
	`ß„ˇt
(
«me
, Çame,Öos, ")^");

10930 
pos
 = 
	`ß„ˇtd
(
«me
, Çame,Öos, 
bg
, 3);

10933 
	`gamma_ã°
(
pm
, 
cﬁour_ty≥
, 
bô_dïth
, 
∑Àâe_numbî
, 
öãæa˚_ty≥
,

10934 
fûe_gamma
, 
s¸ìn_gamma
, 0 , 0, 
«me
, 
u£_öput_¥ecisi⁄
,

10935 0 , 
ex∑nd_16
, 
do_background
, &
background
, 
bg
);

10936 
	}
}

10940 
	$≥rf‹m_gamma_composôi⁄_ã°s
(
≤g_modifõr
 *
pm
, 
do_background
,

10941 
ex∑nd_16
)

10943 
≤g_byã
 
cﬁour_ty≥
 = 0;

10944 
≤g_byã
 
bô_dïth
 = 0;

10945 
∑Àâe_numbî
 = 0;

10953 
	`√xt_f‹m©
(&
cﬁour_ty≥
, &
bô_dïth
, &
∑Àâe_numbî
,

10954 
pm
->
ã°_lbg_gamma_composôi⁄
,Öm->
ã°_tRNS
))

10955 i‡((
cﬁour_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0

10958 || 
cﬁour_ty≥
 == 3

10960 || (
cﬁour_ty≥
 !3 && 
∑Àâe_numbî
 != 0))

10962 
i
, 
j
;

10965 
i
=0; i<
pm
->
ngamma_ã°s
; ++i)

10967 
j
=0; j<
pm
->
ngamma_ã°s
; ++j)

10969 
	`gamma_composôi⁄_ã°
(
pm
, 
cﬁour_ty≥
, 
bô_dïth
, 
∑Àâe_numbî
,

10970 
pm
->
öãæa˚_ty≥
, 1/pm->
gammas
[
i
],Öm->gammas[
j
],

10971 
pm
->
u£_öput_¥ecisi⁄
, 
do_background
, 
ex∑nd_16
);

10973 i‡(
	`Áû
(
pm
))

10978 
	}
}

10982 
	$öô_gamma_îr‹s
(
≤g_modifõr
 *
pm
)

10985 
pm
->
îr‹_gøy_2
 =Öm->
îr‹_gøy_4
 =Öm->
îr‹_gøy_8
 = -1.;

10986 
pm
->
îr‹_cﬁ‹_8
 = -1.;

10987 
pm
->
îr‹_ödexed
 = -1.;

10988 
pm
->
îr‹_gøy_16
 =Öm->
îr‹_cﬁ‹_16
 = -1.;

10989 
	}
}

10992 
	$¥öt_⁄e
(c⁄° *
Àadî
, 
îr
)

10994 i‡(
îr
 != -1.)

10995 
	`¥ötf
(" %†%.5f\n", 
Àadî
, 
îr
);

10996 
	}
}

10999 
	$summ¨ize_gamma_îr‹s
(
≤g_modifõr
 *
pm
, 
≤g_c⁄°_ch¨p
 
who
, 
low_bô_dïth
,

11000 
ödexed
)

11002 
	`fÊush
(
°dîr
);

11004 i‡(
who
)

11005 
	`¥ötf
("\nGamm®c‹ª˘i⁄ wôh %s:\n", 
who
);

11008 
	`¥ötf
("\nBasic gamma correction:\n");

11010 i‡(
low_bô_dïth
)

11012 
	`¥öt_⁄e
(" 2 bô gøy: ", 
pm
->
îr‹_gøy_2
);

11013 
	`¥öt_⁄e
(" 4 bô gøy: ", 
pm
->
îr‹_gøy_4
);

11014 
	`¥öt_⁄e
(" 8 bô gøy: ", 
pm
->
îr‹_gøy_8
);

11015 
	`¥öt_⁄e
(" 8 bô cﬁ‹:", 
pm
->
îr‹_cﬁ‹_8
);

11016 i‡(
ödexed
)

11017 
	`¥öt_⁄e
(" indexed: ", 
pm
->
îr‹_ödexed
);

11020 
	`¥öt_⁄e
("16 bô gøy: ", 
pm
->
îr‹_gøy_16
);

11021 
	`¥öt_⁄e
("16 bô cﬁ‹:", 
pm
->
îr‹_cﬁ‹_16
);

11023 
	`fÊush
(
°dout
);

11024 
	}
}

11027 
	$≥rf‹m_gamma_ã°
(
≤g_modifõr
 *
pm
, 
summ¨y
)

11031 
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 =

11032 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
;

11033 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


11034 
maxout8
 = 
pm
->maxout8;

11038 i‡(!
pm
->
this
.
•ìd
 &&Öm->
ã°_gamma_thªshﬁd
)

11040 
	`≥rf‹m_gamma_thªshﬁd_ã°s
(
pm
);

11042 i‡(
	`Áû
(
pm
))

11047 i‡(
pm
->
ã°_gamma_å™sf‹m
)

11049 i‡(
summ¨y
)

11051 
	`fÊush
(
°dîr
);

11052 
	`¥ötf
("Gamma correctionÉrror summary\n\n");

11053 
	`¥ötf
("TheÖrinted value isÅhe maximumÉrror inÅheÖixel values\n");

11054 
	`¥ötf
("calculated byÅheÜibpng gamma correction code. TheÉrror\n");

11055 
	`¥ötf
("is calculatedásÅhe difference betweenÅhe outputÖixel\n");

11056 
	`¥ötf
("value (alwaysán integer)ándÅhe ideal value fromÅhe\n");

11057 
	`¥ötf
("libpng specification (typicallyÇotán integer).\n\n");

11059 
	`¥ötf
("ExpectÅhis valueÅo beÜessÅhan .5 for 8 bit formats,\n");

11060 
	`¥ötf
("lessÅhan 1 for formats with fewerÅhan 8 bitsándá small\n");

11061 
	`¥ötf
("number (typicallyÜessÅhan 5) forÅhe 16 bit formats.\n");

11062 
	`¥ötf
("ForÖerformanceÑeasonsÅhe value for 16 bit formats\n");

11063 
	`¥ötf
("increases whenÅhe image file includesán sBIT chunk.\n");

11064 
	`fÊush
(
°dout
);

11067 
	`öô_gamma_îr‹s
(
pm
);

11071 i‡(
pm
->
ã°_gamma_ex∑nd16
)

11072 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 1;

11073 
	`≥rf‹m_gamma_å™sf‹m_ã°s
(
pm
);

11074 i‡(!
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
)

11075 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 0;

11077 i‡(
summ¨y
)

11078 
	`summ¨ize_gamma_îr‹s
(
pm
, 
NULL
 , 1 , 1 );

11080 i‡(
	`Áû
(
pm
))

11085 i‡(
pm
->
ã°_gamma_sbô
)

11087 
	`öô_gamma_îr‹s
(
pm
);

11088 
	`≥rf‹m_gamma_sbô_ã°s
(
pm
);

11090 i‡(
summ¨y
)

11091 
	`summ¨ize_gamma_îr‹s
(
pm
, "sBIT",Öm->
sbôlow
 < 8U, 1 );

11093 i‡(
	`Áû
(
pm
))

11097 #ifde‡
DO_16BIT


11098 i‡(
pm
->
ã°_gamma_sˇÀ16
)

11101 
	`öô_gamma_îr‹s
(
pm
);

11102 
	`≥rf‹m_gamma_sˇÀ16_ã°s
(
pm
);

11104 i‡(
summ¨y
)

11106 
	`fÊush
(
°dîr
);

11107 
	`¥ötf
("\nGamma correction with 16Åo 8 bitÑeduction:\n");

11108 
	`¥ötf
(" 16 bô gøy: %.5f\n", 
pm
->
îr‹_gøy_16
);

11109 
	`¥ötf
(" 16 bô cﬁ‹: %.5f\n", 
pm
->
îr‹_cﬁ‹_16
);

11110 
	`fÊush
(
°dout
);

11113 i‡(
	`Áû
(
pm
))

11118 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


11119 i‡(
pm
->
ã°_gamma_background
)

11121 
	`öô_gamma_îr‹s
(
pm
);

11126 i‡(
pm
->
ã°_gamma_ex∑nd16
)

11128 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 1;

11129 
pm
->
maxout8
 = .499;

11131 
	`≥rf‹m_gamma_composôi⁄_ã°s
(
pm
, 
PNG_BACKGROUND_GAMMA_UNIQUE
,

11132 
pm
->
ã°_gamma_ex∑nd16
);

11133 i‡(!
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
)

11134 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 0;

11135 
pm
->
maxout8
 = maxout8;

11137 i‡(
summ¨y
)

11138 
	`summ¨ize_gamma_îr‹s
(
pm
, "background", 1, 0 );

11140 i‡(
	`Áû
(
pm
))

11145 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


11146 i‡(
pm
->
ã°_gamma_Æpha_mode
)

11148 
do_background
;

11150 
	`öô_gamma_îr‹s
(
pm
);

11155 i‡(
pm
->
ã°_gamma_ex∑nd16
)

11156 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 1;

11157 
do_background
 = 
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_STANDARD
;

11158 
do_background
 <
ALPHA_MODE_OFFSET
 + 
PNG_ALPHA_BROKEN
 && !
	`Áû
(
pm
);

11159 ++
do_background
)

11160 
	`≥rf‹m_gamma_composôi⁄_ã°s
(
pm
, 
do_background
,

11161 
pm
->
ã°_gamma_ex∑nd16
);

11162 i‡(!
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
)

11163 
pm
->
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 0;

11165 i‡(
summ¨y
)

11166 
	`summ¨ize_gamma_îr‹s
(
pm
, "alpha mode", 1, 0 );

11168 i‡(
	`Áû
(
pm
))

11172 
	}
}

11183 
≤g_byã
 
	gadam7
[8][8] =

11199 
≤g_uöt_32


11200 
	$≤g_∑ss_°¨t_row
(
∑ss
)

11202 
x
, 
y
;

11203 ++
∑ss
;

11204 
y
=0; y<8; ++y)

11205 
x
=0; x<8; ++x)

11206 i‡(
adam7
[
y
][
x
] =
∑ss
)

11207  
y
;

11209 
	}
}

11211 
≤g_uöt_32


11212 
	$≤g_∑ss_°¨t_cﬁ
(
∑ss
)

11214 
x
, 
y
;

11215 ++
∑ss
;

11216 
x
=0; x<8; ++x)

11217 
y
=0; y<8; ++y)

11218 i‡(
adam7
[
y
][
x
] =
∑ss
)

11219  
x
;

11221 
	}
}

11224 
	$≤g_∑ss_row_shi·
(
∑ss
)

11226 
x
, 
y
, 
ba£
=(-1), 
öc
=8;

11227 ++
∑ss
;

11228 
y
=0; y<8; ++y)

11230 
x
=0; x<8; ++x)

11232 i‡(
adam7
[
y
][
x
] =
∑ss
)

11234 i‡(
ba£
 == (-1))

11235 
ba£
 = 
y
;

11236 i‡(
ba£
 =
y
)

11238 i‡(
öc
 =
y
-
ba£
)

11239 
ba£
=
y
;

11240 i‡(
öc
 == 8)

11241 
öc
 = 
y
-
ba£
, base=y;

11242 i‡(
öc
 !
y
-
ba£
)

11248 i‡(
ba£
 == (-1))  0xfe;

11251 
öc
)

11260  (
öc
 << 8) + 0xfd;

11261 
	}
}

11264 
	$≤g_∑ss_cﬁ_shi·
(
∑ss
)

11266 
x
, 
y
, 
ba£
=(-1), 
öc
=8;

11267 ++
∑ss
;

11268 
x
=0; x<8; ++x)

11270 
y
=0; y<8; ++y)

11272 i‡(
adam7
[
y
][
x
] =
∑ss
)

11274 i‡(
ba£
 == (-1))

11275 
ba£
 = 
x
;

11276 i‡(
ba£
 =
x
)

11278 i‡(
öc
 =
x
-
ba£
)

11279 
ba£
=
x
;

11280 i‡(
öc
 == 8)

11281 
öc
 = 
x
-
ba£
, base=x;

11282 i‡(
öc
 !
x
-
ba£
)

11288 i‡(
ba£
 == (-1))  0xfe;

11291 
öc
)

11301  (
öc
 << 8) + 0xfd;

11302 
	}
}

11304 
≤g_uöt_32


11305 
	$≤g_row_‰om_∑ss_row
(
≤g_uöt_32
 
yIn
, 
∑ss
)

11308 
∑ss
)

11310 0:  
yIn
 * 8;

11311 1:  
yIn
 * 8;

11312 2:  
yIn
 * 8 + 4;

11313 3:  
yIn
 * 4;

11314 4:  
yIn
 * 4 + 2;

11315 5:  
yIn
 * 2;

11316 6:  
yIn
 * 2 + 1;

11321 
	}
}

11323 
≤g_uöt_32


11324 
	$≤g_cﬁ_‰om_∑ss_cﬁ
(
≤g_uöt_32
 
xIn
, 
∑ss
)

11327 
∑ss
)

11329 0:  
xIn
 * 8;

11330 1:  
xIn
 * 8 + 4;

11331 2:  
xIn
 * 4;

11332 3:  
xIn
 * 4 + 2;

11333 4:  
xIn
 * 2;

11334 5:  
xIn
 * 2 + 1;

11335 6:  
xIn
;

11340 
	}
}

11343 
	$≤g_row_ö_öãæa˚_∑ss
(
≤g_uöt_32
 
y
, 
∑ss
)

11346 
x
;

11347 
y
 &= 7;

11348 ++
∑ss
;

11349 
x
=0; x<8; ++x)

11350 i‡(
adam7
[
y
][
x
] =
∑ss
)

11354 
	}
}

11357 
	$≤g_cﬁ_ö_öãæa˚_∑ss
(
≤g_uöt_32
 
x
, 
∑ss
)

11360 
y
;

11361 
x
 &= 7;

11362 ++
∑ss
;

11363 
y
=0; y<8; ++y)

11364 i‡(
adam7
[
y
][
x
] =
∑ss
)

11368 
	}
}

11370 
≤g_uöt_32


11371 
	$≤g_∑ss_rows
(
≤g_uöt_32
 
height
, 
∑ss
)

11373 
≤g_uöt_32
 
tûes
 = 
height
>>3;

11374 
≤g_uöt_32
 
rows
 = 0;

11375 
x
, 
y
;

11377 
height
 &= 7;

11378 ++
∑ss
;

11379 
y
=0; y<8; ++y)

11381 
x
=0; x<8; ++x)

11383 i‡(
adam7
[
y
][
x
] =
∑ss
)

11385 
rows
 +
tûes
;

11386 i‡(
y
 < 
height
Ë++
rows
;

11392  
rows
;

11393 
	}
}

11395 
≤g_uöt_32


11396 
	$≤g_∑ss_cﬁs
(
≤g_uöt_32
 
width
, 
∑ss
)

11398 
≤g_uöt_32
 
tûes
 = 
width
>>3;

11399 
≤g_uöt_32
 
cﬁs
 = 0;

11400 
x
, 
y
;

11402 
width
 &= 7;

11403 ++
∑ss
;

11404 
x
=0; x<8; ++x)

11406 
y
=0; y<8; ++y)

11408 i‡(
adam7
[
y
][
x
] =
∑ss
)

11410 
cﬁs
 +
tûes
;

11411 i‡(
x
 < 
width
Ë++
cﬁs
;

11417  
cﬁs
;

11418 
	}
}

11421 
	$≥rf‹m_öãæa˚_ma¸o_vÆid©i⁄
()

11430 
∑ss
;

11432 
∑ss
=0;Öass<7; ++pass)

11434 
≤g_uöt_32
 
m
, 
f
, 
v
;

11436 
m
 = 
	`PNG_PASS_START_ROW
(
∑ss
);

11437 
f
 = 
	`≤g_∑ss_°¨t_row
(
∑ss
);

11438 i‡(
m
 !
f
)

11440 
	`Ârötf
(
°dîr
, "PNG_PASS_START_ROW(%dË%u !%x\n", 
∑ss
, 
m
, 
f
);

11441 
	`exô
(99);

11444 
m
 = 
	`PNG_PASS_START_COL
(
∑ss
);

11445 
f
 = 
	`≤g_∑ss_°¨t_cﬁ
(
∑ss
);

11446 i‡(
m
 !
f
)

11448 
	`Ârötf
(
°dîr
, "PNG_PASS_START_COL(%dË%u !%x\n", 
∑ss
, 
m
, 
f
);

11449 
	`exô
(99);

11452 
m
 = 
	`PNG_PASS_ROW_SHIFT
(
∑ss
);

11453 
f
 = 
	`≤g_∑ss_row_shi·
(
∑ss
);

11454 i‡(
m
 !
f
)

11456 
	`Ârötf
(
°dîr
, "PNG_PASS_ROW_SHIFT(%dË%u !%x\n", 
∑ss
, 
m
, 
f
);

11457 
	`exô
(99);

11460 
m
 = 
	`PNG_PASS_COL_SHIFT
(
∑ss
);

11461 
f
 = 
	`≤g_∑ss_cﬁ_shi·
(
∑ss
);

11462 i‡(
m
 !
f
)

11464 
	`Ârötf
(
°dîr
, "PNG_PASS_COL_SHIFT(%dË%u !%x\n", 
∑ss
, 
m
, 
f
);

11465 
	`exô
(99);

11477 
v
=0;;)

11487 i‡(
v
 < 
	`≤g_∑ss_rows
(0xFFFFFFFFU, 
∑ss
))

11489 
m
 = 
	`PNG_ROW_FROM_PASS_ROW
(
v
, 
∑ss
);

11490 
f
 = 
	`≤g_row_‰om_∑ss_row
(
v
, 
∑ss
);

11491 i‡(
m
 !
f
)

11493 
	`Ârötf
(
°dîr
, "PNG_ROW_FROM_PASS_ROW(%u, %d) = %u != %x\n",

11494 
v
, 
∑ss
, 
m
, 
f
);

11495 
	`exô
(99);

11499 i‡(
v
 < 
	`≤g_∑ss_cﬁs
(0xFFFFFFFFU, 
∑ss
))

11501 
m
 = 
	`PNG_COL_FROM_PASS_COL
(
v
, 
∑ss
);

11502 
f
 = 
	`≤g_cﬁ_‰om_∑ss_cﬁ
(
v
, 
∑ss
);

11503 i‡(
m
 !
f
)

11505 
	`Ârötf
(
°dîr
, "PNG_COL_FROM_PASS_COL(%u, %d) = %u != %x\n",

11506 
v
, 
∑ss
, 
m
, 
f
);

11507 
	`exô
(99);

11511 
m
 = 
	`PNG_ROW_IN_INTERLACE_PASS
(
v
, 
∑ss
);

11512 
f
 = 
	`≤g_row_ö_öãæa˚_∑ss
(
v
, 
∑ss
);

11513 i‡(
m
 !
f
)

11515 
	`Ârötf
(
°dîr
, "PNG_ROW_IN_INTERLACE_PASS(%u, %d) = %u != %x\n",

11516 
v
, 
∑ss
, 
m
, 
f
);

11517 
	`exô
(99);

11520 
m
 = 
	`PNG_COL_IN_INTERLACE_PASS
(
v
, 
∑ss
);

11521 
f
 = 
	`≤g_cﬁ_ö_öãæa˚_∑ss
(
v
, 
∑ss
);

11522 i‡(
m
 !
f
)

11524 
	`Ârötf
(
°dîr
, "PNG_COL_IN_INTERLACE_PASS(%u, %d) = %u != %x\n",

11525 
v
, 
∑ss
, 
m
, 
f
);

11526 
	`exô
(99);

11530 ++
v
;

11531 
m
 = 
	`PNG_PASS_ROWS
(
v
, 
∑ss
);

11532 
f
 = 
	`≤g_∑ss_rows
(
v
, 
∑ss
);

11533 i‡(
m
 !
f
)

11535 
	`Ârötf
(
°dîr
, "PNG_PASS_ROWS(%u, %d) = %u != %x\n",

11536 
v
, 
∑ss
, 
m
, 
f
);

11537 
	`exô
(99);

11540 
m
 = 
	`PNG_PASS_COLS
(
v
, 
∑ss
);

11541 
f
 = 
	`≤g_∑ss_cﬁs
(
v
, 
∑ss
);

11542 i‡(
m
 !
f
)

11544 
	`Ârötf
(
°dîr
, "PNG_PASS_COLS(%u, %d) = %u != %x\n",

11545 
v
, 
∑ss
, 
m
, 
f
);

11546 
	`exô
(99);

11552 i‡(
v
 > 1024)

11554 i‡(
v
 =
PNG_UINT_31_MAX
)

11557 
v
 = (v << 1) ^ v;

11558 i‡(
v
 >
PNG_UINT_31_MAX
)

11559 
v
 = 
PNG_UINT_31_MAX
-1;

11563 
	}
}

11576 c⁄° 
cﬁ‹_ícodög
 
	gã°_ícodögs
[] =

11612 
≤g_modifõr
 
	gpm
;

11614 
	$sig«l_h™dÀr
(
signum
)

11617 
size_t
 
pos
 = 0;

11618 
msg
[64];

11620 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "caught signal: ");

11622 
signum
)

11624 
SIGABRT
:

11625 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "abort");

11628 
SIGFPE
:

11629 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "floatingÖointÉxception");

11632 
SIGILL
:

11633 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "illegal instruction");

11636 
SIGINT
:

11637 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "interrupt");

11640 
SIGSEGV
:

11641 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "invalid memoryáccess");

11644 
SIGTERM
:

11645 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "terminationÑequest");

11649 
pos
 = 
	`ß„ˇt
(
msg
,  msg,Öos, "unknown ");

11650 
pos
 = 
	`ß„ˇä
(
msg
,  msg,Öos, 
signum
);

11654 
	`°‹e_log
(&
pm
.
this
, 
NULL
 , 
msg
, 1 );

11659 i‡(
signum
 !
SIGTERM
)

11661 
ex˚±i⁄_c⁄ãxt
 *
the_ex˚±i⁄_c⁄ãxt
 =

11662 &
pm
.
this
.
ex˚±i⁄_c⁄ãxt
;

11664 
Throw
 &
pm
.
this
;

11668 
	`exô
(1);

11669 
	}
}

11672 
	$maö
(
¨gc
, **
¨gv
)

11674 
summ¨y
 = 1;

11675 
mem°©s
 = 0;

11678 c⁄° *
touch
 = 
NULL
;

11686 
gammas
[]={2.2, 1.0, 2.2/1.45, 1.8, 1.5, 2.4, 2.5, 2.62, 2.9};

11689 
size_t
 
˝
 = 0;

11690 
comm™d
[1024];

11692 
	`™⁄_c⁄ãxt
(&
pm
.
this
);

11694 
	`gnu_vﬁ©ûe
(
summ¨y
)

11695 
	`gnu_vﬁ©ûe
(
mem°©s
)

11696 
	`gnu_vﬁ©ûe
(
touch
)

11699 
	`sig«l
(
SIGABRT
, 
sig«l_h™dÀr
);

11700 
	`sig«l
(
SIGFPE
, 
sig«l_h™dÀr
);

11701 
	`sig«l
(
SIGILL
, 
sig«l_h™dÀr
);

11702 
	`sig«l
(
SIGINT
, 
sig«l_h™dÀr
);

11703 
	`sig«l
(
SIGSEGV
, 
sig«l_h™dÀr
);

11704 
	`sig«l
(
SIGTERM
, 
sig«l_h™dÀr
);

11706 #ifde‡
HAVE_FEENABLEEXCEPT


11711 
	`„íabÀex˚±
(
FE_DIVBYZERO
 | 
FE_INVALID
 | 
FE_OVERFLOW
);

11714 
	`modifõr_öô
(&
pm
);

11721 
	`°‹e_ísuª_image
(&
pm
.
this
, 
NULL
, 2, 
TRANSFORM_ROWMAX
, 
TRANSFORM_HEIGHTMAX
);

11724 
˝
 = 
	`ß„ˇt
(
comm™d
,  command, cp, "pngvalid");

11727 
pm
.
this
.
åót_w¨nögs_as_îr‹s
 = 1;

11733 
pm
.
assume_16_bô_ˇlcuœti⁄s
 = 
PNG_LIBPNG_VER
 >= 10700;

11740 
pm
.
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 1U;

11743 
pm
.
gammas
 = gammas;

11744 
pm
.
ngammas
 = 
	`ARRAY_SIZE
(
gammas
);

11745 
pm
.
ngamma_ã°s
 = 0;

11750 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


11751 
pm
.
ã°_tRNS
 = 1;

11753 
pm
.
ã°_lbg
 = 
PNG_LIBPNG_VER
 >= 10600;

11754 
pm
.
ã°_lbg_gamma_thªshﬁd
 = 1;

11755 
pm
.
ã°_lbg_gamma_å™sf‹m
 = 
PNG_LIBPNG_VER
 >= 10600;

11756 
pm
.
ã°_lbg_gamma_sbô
 = 1;

11757 
pm
.
ã°_lbg_gamma_composôi⁄
 = 
PNG_LIBPNG_VER
 >= 10700;

11760 
pm
.
ícodögs
 = 
ã°_ícodögs
;

11761 
pm
.
√ncodögs
 = 
	`ARRAY_SIZE
(
ã°_ícodögs
);

11763 #i‡
PNG_LIBPNG_VER
 < 10700

11764 
pm
.
sbôlow
 = 8U;

11766 
pm
.
sbôlow
 = 1U;

11776 
pm
.
u£_öput_¥ecisi⁄_16to8
 = 1U;

11777 
pm
.
u£_öput_¥ecisi⁄_sbô
 = 1U;

11786 
pm
.
maxout8
 = .1;

11787 
pm
.
maxabs8
 = .00005;

11788 
pm
.
maxˇlc8
 = 1./255;

11789 
pm
.
maxpc8
 = .499;

11790 
pm
.
maxout16
 = .499;

11791 
pm
.
maxabs16
 = .00005;

11792 
pm
.
maxˇlc16
 =1./65535;

11793 #i‡
PNG_LIBPNG_VER
 < 10700

11794 
pm
.
maxˇlcG
 = 1./((1<<
PNG_MAX_GAMMA_8
)-1);

11796 
pm
.
maxˇlcG
 = 1./((1<<16)-1);

11807 
pm
.
maxpc16
 = .005;

11810 --
¨gc
 >= 1)

11812 
ˇtm‹e
 = 0;

11815 
˝
 = 
	`ß„ˇt
(
comm™d
,  command, cp, " ");

11816 
˝
 = 
	`ß„ˇt
(
comm™d
,  comm™d, cp, *++
¨gv
);

11818 i‡(
	`°rcmp
(*
¨gv
, "-v") == 0)

11819 
pm
.
this
.
vîbo£
 = 1;

11821 i‡(
	`°rcmp
(*
¨gv
, "-l") == 0)

11822 
pm
.
log
 = 1;

11824 i‡(
	`°rcmp
(*
¨gv
, "-q") == 0)

11825 
summ¨y
 = 
pm
.
this
.
vîbo£
 =Öm.
log
 = 0;

11827 i‡(
	`°rcmp
(*
¨gv
, "-w") == 0 ||

11828 
	`°rcmp
(*
¨gv
, "--strict") == 0)

11829 
pm
.
this
.
åót_w¨nögs_as_îr‹s
 = 1;

11831 i‡(
	`°rcmp
(*
¨gv
, "--nostrict") == 0)

11832 
pm
.
this
.
åót_w¨nögs_as_îr‹s
 = 0;

11834 i‡(
	`°rcmp
(*
¨gv
, "--speed") == 0)

11835 
pm
.
this
.
•ìd
 = 1,Öm.
ngamma_ã°s
 =Öm.
ngammas
,Öm.
ã°_°™d¨d
 = 0,

11836 
summ¨y
 = 0;

11838 i‡(
	`°rcmp
(*
¨gv
, "--memory") == 0)

11839 
mem°©s
 = 1;

11841 i‡(
	`°rcmp
(*
¨gv
, "--size") == 0)

11842 
pm
.
ã°_size
 = 1;

11844 i‡(
	`°rcmp
(*
¨gv
, "--nosize") == 0)

11845 
pm
.
ã°_size
 = 0;

11847 i‡(
	`°rcmp
(*
¨gv
, "--standard") == 0)

11848 
pm
.
ã°_°™d¨d
 = 1;

11850 i‡(
	`°rcmp
(*
¨gv
, "--nostandard") == 0)

11851 
pm
.
ã°_°™d¨d
 = 0;

11853 i‡(
	`°rcmp
(*
¨gv
, "--transform") == 0)

11854 
pm
.
ã°_å™sf‹m
 = 1;

11856 i‡(
	`°rcmp
(*
¨gv
, "--notransform") == 0)

11857 
pm
.
ã°_å™sf‹m
 = 0;

11859 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


11860 i‡(
	`°∫cmp
(*
¨gv
, "--transform-disable=",

11863 
pm
.
ã°_å™sf‹m
 = 1;

11864 
	`å™sf‹m_dißbÀ
(*
¨gv
 +  "--transform-disable");

11867 i‡(
	`°∫cmp
(*
¨gv
, "--transform-enable=",

11870 
pm
.
ã°_å™sf‹m
 = 1;

11871 
	`å™sf‹m_íabÀ
(*
¨gv
 +  "--transform-enable");

11875 i‡(
	`°rcmp
(*
¨gv
, "--gamma") == 0)

11878 
pm
.
ngamma_ã°s
 = 2U;

11879 
pm
.
ã°_gamma_thªshﬁd
 = 1;

11880 
pm
.
ã°_gamma_å™sf‹m
 = 1;

11881 
pm
.
ã°_gamma_sbô
 = 1;

11882 
pm
.
ã°_gamma_sˇÀ16
 = 1;

11883 
pm
.
ã°_gamma_background
 = 1;

11884 
pm
.
ã°_gamma_Æpha_mode
 = 1;

11887 i‡(
	`°rcmp
(*
¨gv
, "--nogamma") == 0)

11888 
pm
.
ngamma_ã°s
 = 0;

11890 i‡(
	`°rcmp
(*
¨gv
, "--gamma-threshold") == 0)

11891 
pm
.
ngamma_ã°s
 = 2U,Öm.
ã°_gamma_thªshﬁd
 = 1;

11893 i‡(
	`°rcmp
(*
¨gv
, "--nogamma-threshold") == 0)

11894 
pm
.
ã°_gamma_thªshﬁd
 = 0;

11896 i‡(
	`°rcmp
(*
¨gv
, "--gamma-transform") == 0)

11897 
pm
.
ngamma_ã°s
 = 2U,Öm.
ã°_gamma_å™sf‹m
 = 1;

11899 i‡(
	`°rcmp
(*
¨gv
, "--nogamma-transform") == 0)

11900 
pm
.
ã°_gamma_å™sf‹m
 = 0;

11902 i‡(
	`°rcmp
(*
¨gv
, "--gamma-sbit") == 0)

11903 
pm
.
ngamma_ã°s
 = 2U,Öm.
ã°_gamma_sbô
 = 1;

11905 i‡(
	`°rcmp
(*
¨gv
, "--nogamma-sbit") == 0)

11906 
pm
.
ã°_gamma_sbô
 = 0;

11908 i‡(
	`°rcmp
(*
¨gv
, "--gamma-16-to-8") == 0)

11909 
pm
.
ngamma_ã°s
 = 2U,Öm.
ã°_gamma_sˇÀ16
 = 1;

11911 i‡(
	`°rcmp
(*
¨gv
, "--nogamma-16-to-8") == 0)

11912 
pm
.
ã°_gamma_sˇÀ16
 = 0;

11914 i‡(
	`°rcmp
(*
¨gv
, "--gamma-background") == 0)

11915 
pm
.
ngamma_ã°s
 = 2U,Öm.
ã°_gamma_background
 = 1;

11917 i‡(
	`°rcmp
(*
¨gv
, "--nogamma-background") == 0)

11918 
pm
.
ã°_gamma_background
 = 0;

11920 i‡(
	`°rcmp
(*
¨gv
, "--gamma-alpha-mode") == 0)

11921 
pm
.
ngamma_ã°s
 = 2U,Öm.
ã°_gamma_Æpha_mode
 = 1;

11923 i‡(
	`°rcmp
(*
¨gv
, "--nogamma-alpha-mode") == 0)

11924 
pm
.
ã°_gamma_Æpha_mode
 = 0;

11926 i‡(
	`°rcmp
(*
¨gv
, "--expand16") == 0)

11927 
pm
.
ã°_gamma_ex∑nd16
 = 1;

11929 i‡(
	`°rcmp
(*
¨gv
, "--noexpand16") == 0)

11930 
pm
.
ã°_gamma_ex∑nd16
 = 0;

11932 i‡(
	`°rcmp
(*
¨gv
, "--low-depth-gray") == 0)

11933 
pm
.
ã°_lbg
 =Öm.
ã°_lbg_gamma_thªshﬁd
 =

11934 
pm
.
ã°_lbg_gamma_å™sf‹m
 =Öm.
ã°_lbg_gamma_sbô
 =

11935 
pm
.
ã°_lbg_gamma_composôi⁄
 = 1;

11937 i‡(
	`°rcmp
(*
¨gv
, "--nolow-depth-gray") == 0)

11938 
pm
.
ã°_lbg
 =Öm.
ã°_lbg_gamma_thªshﬁd
 =

11939 
pm
.
ã°_lbg_gamma_å™sf‹m
 =Öm.
ã°_lbg_gamma_sbô
 =

11940 
pm
.
ã°_lbg_gamma_composôi⁄
 = 0;

11942 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


11943 i‡(
	`°rcmp
(*
¨gv
, "--tRNS") == 0)

11944 
pm
.
ã°_tRNS
 = 1;

11947 i‡(
	`°rcmp
(*
¨gv
, "--notRNS") == 0)

11948 
pm
.
ã°_tRNS
 = 0;

11950 i‡(
	`°rcmp
(*
¨gv
, "--more-gammas") == 0)

11951 
pm
.
ngamma_ã°s
 = 3U;

11953 i‡(
	`°rcmp
(*
¨gv
, "--all-gammas") == 0)

11954 
pm
.
ngamma_ã°s
 =Öm.
ngammas
;

11956 i‡(
	`°rcmp
(*
¨gv
, "--progressive-read") == 0)

11957 
pm
.
this
.
¥ogªssive
 = 1;

11959 i‡(
	`°rcmp
(*
¨gv
, "--use-update-info") == 0)

11960 ++
pm
.
u£_upd©e_öfo
;

11962 i‡(
	`°rcmp
(*
¨gv
, "--interlace") == 0)

11964 #i‡
CAN_WRITE_INTERLACE


11965 
pm
.
öãæa˚_ty≥
 = 
PNG_INTERLACE_ADAM7
;

11967 
	`Ârötf
(
°dîr
, "pngvalid:Ço write interlace support\n");

11968  
SKIP
;

11972 i‡(
	`°rcmp
(*
¨gv
, "--use-input-precision") == 0)

11973 
pm
.
u£_öput_¥ecisi⁄
 = 1U;

11975 i‡(
	`°rcmp
(*
¨gv
, "--use-calculation-precision") == 0)

11976 
pm
.
u£_öput_¥ecisi⁄
 = 0;

11978 i‡(
	`°rcmp
(*
¨gv
, "--calculations-use-input-precision") == 0)

11979 
pm
.
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 = 1U;

11981 i‡(
	`°rcmp
(*
¨gv
, "--assume-16-bit-calculations") == 0)

11982 
pm
.
assume_16_bô_ˇlcuœti⁄s
 = 1U;

11984 i‡(
	`°rcmp
(*
¨gv
, "--calculations-follow-bit-depth") == 0)

11985 
pm
.
ˇlcuœti⁄s_u£_öput_¥ecisi⁄
 =

11986 
pm
.
assume_16_bô_ˇlcuœti⁄s
 = 0;

11988 i‡(
	`°rcmp
(*
¨gv
, "--exhaustive") == 0)

11989 
pm
.
ã°_exhau°ive
 = 1;

11991 i‡(
¨gc
 > 1 && 
	`°rcmp
(*
¨gv
, "--sbitlow") == 0)

11992 --
¨gc
, 
pm
.
sbôlow
 = (
≤g_byã
)
	`©oi
(*++
¨gv
), 
ˇtm‹e
 = 1;

11994 i‡(
¨gc
 > 1 && 
	`°rcmp
(*
¨gv
, "--touch") == 0)

11995 --
¨gc
, 
touch
 = *++
¨gv
, 
ˇtm‹e
 = 1;

11997 i‡(
¨gc
 > 1 && 
	`°∫cmp
(*
¨gv
, "--max", 5) == 0)

11999 --
¨gc
;

12001 i‡(
	`°rcmp
(5+*
¨gv
, "abs8") == 0)

12002 
pm
.
maxabs8
 = 
	`©of
(*++
¨gv
);

12004 i‡(
	`°rcmp
(5+*
¨gv
, "abs16") == 0)

12005 
pm
.
maxabs16
 = 
	`©of
(*++
¨gv
);

12007 i‡(
	`°rcmp
(5+*
¨gv
, "calc8") == 0)

12008 
pm
.
maxˇlc8
 = 
	`©of
(*++
¨gv
);

12010 i‡(
	`°rcmp
(5+*
¨gv
, "calc16") == 0)

12011 
pm
.
maxˇlc16
 = 
	`©of
(*++
¨gv
);

12013 i‡(
	`°rcmp
(5+*
¨gv
, "out8") == 0)

12014 
pm
.
maxout8
 = 
	`©of
(*++
¨gv
);

12016 i‡(
	`°rcmp
(5+*
¨gv
, "out16") == 0)

12017 
pm
.
maxout16
 = 
	`©of
(*++
¨gv
);

12019 i‡(
	`°rcmp
(5+*
¨gv
, "pc8") == 0)

12020 
pm
.
maxpc8
 = 
	`©of
(*++
¨gv
);

12022 i‡(
	`°rcmp
(5+*
¨gv
, "pc16") == 0)

12023 
pm
.
maxpc16
 = 
	`©of
(*++
¨gv
);

12027 
	`Ârötf
(
°dîr
, "≤gvÆid: %s: unknow¿'max' o±i⁄\n", *
¨gv
);

12028 
	`exô
(99);

12031 
ˇtm‹e
 = 1;

12034 i‡(
	`°rcmp
(*
¨gv
, "--log8") == 0)

12035 --
¨gc
, 
pm
.
log8
 = 
	`©of
(*++
¨gv
), 
ˇtm‹e
 = 1;

12037 i‡(
	`°rcmp
(*
¨gv
, "--log16") == 0)

12038 --
¨gc
, 
pm
.
log16
 = 
	`©of
(*++
¨gv
), 
ˇtm‹e
 = 1;

12040 #ifde‡
PNG_SET_OPTION_SUPPORTED


12041 i‡(
	`°∫cmp
(*
¨gv
, "--option=", 9) == 0)

12044 c⁄° *
¨g
 = 9+*
¨gv
;

12045 
›ti⁄
=0, 
£âög
=0;

12047 #ifde‡
PNG_ARM_NEON


12048 i‡(
	`°∫cmp
(
¨g
, "arm-neon:", 9) == 0)

12049 
›ti⁄
 = 
PNG_ARM_NEON
, 
¨g
 += 9;

12053 #ifde‡
PNG_EXTENSIONS


12054 i‡(
	`°∫cmp
(
¨g
, "extensions:", 11) == 0)

12055 
›ti⁄
 = 
PNG_EXTENSIONS
, 
¨g
 += 11;

12059 #ifde‡
PNG_MAXIMUM_INFLATE_WINDOW


12060 i‡(
	`°∫cmp
(
¨g
, "max-inflate-window:", 19) == 0)

12061 
›ti⁄
 = 
PNG_MAXIMUM_INFLATE_WINDOW
, 
¨g
 += 19;

12066 
	`Ârötf
(
°dîr
, "≤gvÆid: %s: %s: unknow¿›ti⁄\n", *
¨gv
, 
¨g
);

12067 
	`exô
(99);

12070 i‡(
	`°rcmp
(
¨g
, "off") == 0)

12071 
£âög
 = 
PNG_OPTION_OFF
;

12073 i‡(
	`°rcmp
(
¨g
, "on") == 0)

12074 
£âög
 = 
PNG_OPTION_ON
;

12078 
	`Ârötf
(
°dîr
,

12080 *
¨gv
, 
¨g
);

12081 
	`exô
(99);

12084 
pm
.
this
.
›ti⁄s
[pm.this.
n›ti⁄s
].
›ti⁄
 = option;

12085 
pm
.
this
.
›ti⁄s
[pm.this.
n›ti⁄s
++].
£âög
 = setting;

12091 
	`Ârötf
(
°dîr
, "≤gvÆid: %s: unknow¿¨gumít\n", *
¨gv
);

12092 
	`exô
(99);

12095 i‡(
ˇtm‹e
)

12097 
˝
 = 
	`ß„ˇt
(
comm™d
,  command, cp, " ");

12098 
˝
 = 
	`ß„ˇt
(
comm™d
,  comm™d, cp, *
¨gv
);

12105 i‡(
pm
.
ã°_°™d¨d
 =0 &&Öm.
ã°_size
 =0 &&Öm.
ã°_å™sf‹m
 == 0 &&

12106 
pm
.
ngamma_ã°s
 == 0)

12113 
pm
.
ã°_°™d¨d
 = 1;

12114 
pm
.
ã°_size
 = 1;

12115 
pm
.
ã°_å™sf‹m
 = 1;

12116 
pm
.
ngamma_ã°s
 = 2U;

12119 i‡(
pm
.
ngamma_ã°s
 > 0 &&

12120 
pm
.
ã°_gamma_thªshﬁd
 =0 &&Öm.
ã°_gamma_å™sf‹m
 == 0 &&

12121 
pm
.
ã°_gamma_sbô
 =0 &&Öm.
ã°_gamma_sˇÀ16
 == 0 &&

12122 
pm
.
ã°_gamma_background
 =0 &&Öm.
ã°_gamma_Æpha_mode
 == 0)

12124 
pm
.
ã°_gamma_thªshﬁd
 = 1;

12125 
pm
.
ã°_gamma_å™sf‹m
 = 1;

12126 
pm
.
ã°_gamma_sbô
 = 1;

12127 
pm
.
ã°_gamma_sˇÀ16
 = 1;

12128 
pm
.
ã°_gamma_background
 = 1;

12129 
pm
.
ã°_gamma_Æpha_mode
 = 1;

12132 i‡(
pm
.
ngamma_ã°s
 == 0)

12135 
pm
.
ã°_gamma_thªshﬁd
 = 0;

12136 
pm
.
ã°_gamma_å™sf‹m
 = 0;

12137 
pm
.
ã°_gamma_sbô
 = 0;

12138 
pm
.
ã°_gamma_sˇÀ16
 = 0;

12139 
pm
.
ã°_gamma_background
 = 0;

12140 
pm
.
ã°_gamma_Æpha_mode
 = 0;

12143 
Try


12146 
	`make_å™sf‹m_images
(&
pm
);

12149 i‡(
pm
.
ã°_°™d¨d
)

12151 
	`≥rf‹m_öãæa˚_ma¸o_vÆid©i⁄
();

12152 
	`≥rf‹m_f‹m©tög_ã°
(&
pm
.
this
);

12153 #ifde‡
PNG_READ_SUPPORTED


12154 
	`≥rf‹m_°™d¨d_ã°
(&
pm
);

12156 
	`≥rf‹m_îr‹_ã°
(&
pm
);

12160 i‡(
pm
.
ã°_size
)

12162 
	`make_size_images
(&
pm
.
this
);

12163 #ifde‡
PNG_READ_SUPPORTED


12164 
	`≥rf‹m_size_ã°
(&
pm
);

12168 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


12170 i‡(
pm
.
ã°_å™sf‹m
)

12171 
	`≥rf‹m_å™sf‹m_ã°
(&
pm
);

12174 #ifde‡
PNG_READ_GAMMA_SUPPORTED


12175 i‡(
pm
.
ngamma_ã°s
 > 0)

12176 
	`≥rf‹m_gamma_ã°
(&
pm
, 
summ¨y
);

12180 
C©ch_™⁄ymous


12182 
	`Ârötf
(
°dîr
, "pngvalid:Åestáborted (probably failed in cleanup)\n");

12183 i‡(!
pm
.
this
.
vîbo£
)

12185 i‡(
pm
.
this
.
îr‹
[0] != 0)

12186 
	`Ârötf
(
°dîr
, "≤gvÆid: fú°Éº‹: %s\n", 
pm
.
this
.
îr‹
);

12188 
	`Ârötf
(
°dîr
, "pngvalid:Ñun with -vÅo see what happened\n");

12190 
	`exô
(1);

12193 i‡(
summ¨y
)

12195 
	`¥ötf
("%s: %s (%sÖointárithmetic)\n",

12196 (
pm
.
this
.
√º‹s
 || (pm.this.
åót_w¨nögs_as_îr‹s
 &&

12197 
pm
.
this
.
nw¨nögs
)) ? "FAIL" : "PASS",

12198 
comm™d
,

12199 #i‡
	`deföed
(
PNG_FLOATING_ARITHMETIC_SUPPORTED
Ë|| 
PNG_LIBPNG_VER
 < 10500

12207 i‡(
mem°©s
)

12209 
	`¥ötf
("Allocated memory statistics (in bytes):\n"

12212 ()
pm
.
this
.
ªad_mem‹y_poﬁ
.
max_max
,

12213 ()
pm
.
this
.
ªad_mem‹y_poﬁ
.
max_limô
,

12214 ()
pm
.
this
.
ªad_mem‹y_poﬁ
.
max_tŸÆ
,

12215 ()
pm
.
this
.
wrôe_mem‹y_poﬁ
.
max_max
,

12216 ()
pm
.
this
.
wrôe_mem‹y_poﬁ
.
max_limô
,

12217 ()
pm
.
this
.
wrôe_mem‹y_poﬁ
.
max_tŸÆ
);

12223 
	`°‹e_dñëe
(&
pm
.
this
);

12228 i‡(
pm
.
this
.
√º‹s
 || (pm.this.
åót_w¨nögs_as_îr‹s
 &&

12229 
pm
.
this
.
nw¨nögs
))

12231 i‡(!
pm
.
this
.
vîbo£
)

12232 
	`Ârötf
(
°dîr
, "≤gvÆid: %s\n", 
pm
.
this
.
îr‹
);

12234 
	`Ârötf
(
°dîr
, "≤gvÆid: %dÉº‹s, %d w¨nögs\n", 
pm
.
this
.
√º‹s
,

12235 
pm
.
this
.
nw¨nögs
);

12237 
	`exô
(1);

12241 i‡(
touch
 !
NULL
)

12243 
FILE
 *
fsuc˚ss
 = 
	`f›í
(
touch
, "wt");

12245 i‡(
fsuc˚ss
 !
NULL
)

12247 
îr‹
 = 0;

12248 
	`Ârötf
(
fsuc˚ss
, "PNG validation succeeded\n");

12249 
	`fÊush
(
fsuc˚ss
);

12250 
îr‹
 = 
	`„º‹
(
fsuc˚ss
);

12252 i‡(
	`f˛o£
(
fsuc˚ss
Ë|| 
îr‹
)

12254 
	`Ârötf
(
°dîr
, "%s: wrôêÁûed\n", 
touch
);

12255 
	`exô
(1);

12261 
	`Ârötf
(
°dîr
, "%s: o≥¿Áûed\n", 
touch
);

12262 
	`exô
(1);

12268 
	`UNUSED
(
Áû
)

12270 
	}
}

12272 
	$maö
()

12274 
	`Ârötf
(
°dîr
,

12277  
SKIP
;

12278 
	}
}

	@contrib/libtests/readpng.c

16 
	~<°dlib.h
>

17 
	~<°dio.h
>

18 
	~<°rög.h
>

20 #i‡
deföed
(
HAVE_CONFIG_H
Ë&& !deföed(
PNG_NO_CONFIG_H
)

21 
	~<c⁄fig.h
>

27 #ifde‡
PNG_FREESTANDING_TESTS


28 
	~<≤g.h
>

30 
	~"../../≤g.h
"

34 
	$ªad_≤g
(
FILE
 *
Â
)

36 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
,0,0,0);

37 
≤g_öf›
 
öfo_±r
 = 
NULL
;

38 
≤g_byãp
 
row
 = 
NULL
, 
di•œy
 = NULL;

40 i‡(
≤g_±r
 =
NULL
)

43 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
)))

45 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

46 i‡(
row
 !
NULL
Ë
	`‰ì
(row);

47 i‡(
di•œy
 !
NULL
Ë
	`‰ì
(display);

51 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

53 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

54 i‡(
öfo_±r
 =
NULL
)

55 
	`≤g_îr‹
(
≤g_±r
, "OOMállocating info structure");

57 
	`≤g_£t_kìp_unknown_chunks
(
≤g_±r
, 
PNG_HANDLE_CHUNK_ALWAYS
, 
NULL
, 0);

59 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

62 
size_t
 
rowbyãs
 = 
	`≤g_gë_rowbyãs
(
≤g_±r
, 
öfo_±r
);

65 
row
 = 
	`mÆloc
(
rowbyãs
);

66 
di•œy
 = 
	`mÆloc
(
rowbyãs
);

68 i‡(
row
 =
NULL
 || 
di•œy
 == NULL)

69 
	`≤g_îr‹
(
≤g_±r
, "OOMállocatingÑow buffers");

72 
≤g_uöt_32
 
height
 = 
	`≤g_gë_image_height
(
≤g_±r
, 
öfo_±r
);

73 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


74 
∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

76 
∑s£s
 = 
	`≤g_gë_öãæa˚_ty≥
(
≤g_±r
, 
öfo_±r
) ==

77 
PNG_INTERLACE_ADAM7
 ? 
PNG_INTERLACE_ADAM7_PASSES
 : 1;

79 
∑ss
;

81 
	`≤g_°¨t_ªad_image
(
≤g_±r
);

83 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass)

85 
≤g_uöt_32
 
y
 = 
height
;

87 #i‚de‡
PNG_READ_INTERLACING_SUPPORTED


88 i‡(
∑s£s
 =
PNG_INTERLACE_ADAM7_PASSES
)

89 
y
 = 
	`PNG_PASS_ROWS
(y, 
∑ss
);

95 
y
-- > 0)

96 
	`≤g_ªad_row
(
≤g_±r
, 
row
, 
di•œy
);

102 
	`≤g_ªad_íd
(
≤g_±r
, 
öfo_±r
);

103 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

104 
	`‰ì
(
row
);

105 
	`‰ì
(
di•œy
);

107 
	}
}

110 
	$maö
()

113  !
	`ªad_≤g
(
°dö
);

114 
	}
}

	@contrib/libtests/tarith.c

19 
	#_POSIX_SOURCE
 1

	)

20 
	#_ISOC99_SOURCE
 1

	)

25 
	~<m©h.h
>

26 
	~<°dlib.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<as£π.h
>

31 
	~"../../≤g¥iv.h
"

33 
	#≤g_îr‹
 
≤g_w¨nög


	)

35 
	$≤g_w¨nög
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
)

37 
	`Ârötf
(
°dîr
, "vÆid©i⁄: %s\n", 
msg
);

38 
	}
}

40 
	#≤g_fixed_îr‹
 
≤g_fixed_w¨nög


	)

42 
	$≤g_fixed_w¨nög
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
)

44 
	`Ârötf
(
°dîr
, "ovîÊow in: %s\n", 
msg
);

45 
	}
}

47 
	#≤g_£t_îr‹_‚
(
µ
, 
ï
, 
eÂ
, 
wÂ
Ë(()0)

	)

48 
	#≤g_mÆloc
(
µ
, 
s
Ë
	`mÆloc
(s)

	)

49 
	#≤g_mÆloc_w¨n
(
µ
, 
s
Ë
	`mÆloc
(s)

	)

50 
	#≤g_mÆloc_ba£
(
µ
, 
s
Ë
	`mÆloc
(s)

	)

51 
	#≤g_ˇŒoc
(
µ
, 
s
Ë
	`ˇŒoc
(1, (s))

	)

52 
	#≤g_‰ì
(
µ
, 
s
Ë
	`‰ì
(s)

	)

54 
	#≤g_ß„ˇt
(
b
, 
sb
, 
pos
, 
°r
Ë’os)

	)

55 
	#≤g_f‹m©_numbî
(
°¨t
, 
íd
, 
f‹m©
, 
numbî
Ë(°¨t)

	)

57 
	#¸c32
(
¸c
, 
µ
, 
s
Ë(¸c)

	)

58 
	#öÊ©eRe£t
(
zs
Ë
Z_OK


	)

60 
	#≤g_¸óã_°ru˘
(
ty≥
Ë(0)

	)

61 
	#≤g_de°roy_°ru˘
(
µ
Ë(()0)

	)

62 
	#≤g_¸óã_°ru˘_2
(
ty≥
, 
m
, 
mm
Ë(0)

	)

63 
	#≤g_de°roy_°ru˘_2
(
µ
, 
f
, 
mm
Ë(()0)

	)

65 #unde‡
PNG_SIMPLIFIED_READ_SUPPORTED


66 #unde‡
PNG_SIMPLIFIED_WRITE_SUPPORTED


67 #unde‡
PNG_USER_MEM_SUPPORTED


69 
	~"../../≤g.c
"

72 
	gvîbo£
 = 0;

74 
	$vÆid©i⁄_ascii_to_Â
(
cou¡
, 
¨gc
, **
¨gv
)

76 
showÆl
 = 0;

77 
max_îr‹
=2;

78 
max_îr‹_abs
=17;

79 
max
 = 0;

80 
max_abs
 = 0;

81 
ã°
 = 0;

82 
¥ecisi⁄
 = 5;

83 
n⁄föôe
 = 0;

84 
föôe
 = 0;

85 
ok
 = 0;

86 
Áûcou¡
 = 0;

87 
mö‹¨ôh
 = 0;

89 --
¨gc
 > 0)

91 i‡(
	`°rcmp
(*++
¨gv
, "-a") == 0)

92 
showÆl
 = 1;

93 i‡(
	`°rcmp
(*
¨gv
, "-e"Ë=0 && 
¨gc
 > 0)

95 --
¨gc
;

96 
max_îr‹
 = 
	`©of
(*++
¨gv
);

98 i‡(
	`°rcmp
(*
¨gv
, "-E"Ë=0 && 
¨gc
 > 0)

100 --
¨gc
;

101 
max_îr‹_abs
 = 
	`©of
(*++
¨gv
);

105 
	`Ârötf
(
°dîr
, "unknow¿¨gumíà%s\n", *
¨gv
);

112 
size_t
 
ödex
;

113 
°©e
, 
Áûed
 = 0;

114 
buf„r
[64];

116 i‡(
	`isföôe
(
ã°
))

117 ++
föôe
;

119 ++
n⁄föôe
;

121 i‡(
vîbo£
)

122 
	`Ârötf
(
°dîr
, "%.*g %d\n", 
DBL_DIG
, 
ã°
, 
¥ecisi⁄
);

125 
	`mem£t
(
buf„r
, 71,  buffer);

127 
	`≤g_ascii_‰om_Â
(0, 
buf„r
, 
¥ecisi⁄
+10, 
ã°
,Örecision);

132 i‡(
buf„r
[
¥ecisi⁄
+7] != 71)

134 
	`Ârötf
(
°dîr
, "%g[%d] -> '%s'[%lu] buffer overflow\n",

135 
ã°
, 
¥ecisi⁄
, 
buf„r
, ()
	`°æí
(buffer));

136 
Áûed
 = 1;

142 
°©e
 = 0;

143 
ödex
 = 0;

144 i‡(!
	`isföôe
(
ã°
))

147 i‡(
ã°
 >0 && 
	`°rcmp
(
buf„r
, "inf") ||

148 
ã°
 < 0 && 
	`°rcmp
(
buf„r
, "-inf"))

150 
	`Ârötf
(
°dîr
, "%g[%d] -> '%s' butÉxpected 'inf'\n",

151 
ã°
, 
¥ecisi⁄
, 
buf„r
);

152 
Áûed
 = 1;

155 i‡(!
	`≤g_check_Â_numbî
(
buf„r
, 
¥ecisi⁄
+10, &
°©e
, &
ödex
) ||

156 
buf„r
[
ödex
] != 0)

158 
	`Ârötf
(
°dîr
, "%g[%d] -> '%s' but has bad format ('%c')\n",

159 
ã°
, 
¥ecisi⁄
, 
buf„r
, buf„r[
ödex
]);

160 
Áûed
 = 1;

162 i‡(
	`PNG_FP_IS_NEGATIVE
(
°©e
Ë&& !(
ã°
 < 0))

164 
	`Ârötf
(
°dîr
, "%g[%d] -> '%s' butÇegative valueÇot soÑeported\n",

165 
ã°
, 
¥ecisi⁄
, 
buf„r
);

166 
Áûed
 = 1;

167 
	`as£π
(!
	`PNG_FP_IS_ZERO
(
°©e
));

168 
	`as£π
(!
	`PNG_FP_IS_POSITIVE
(
°©e
));

170 i‡(
	`PNG_FP_IS_ZERO
(
°©e
Ë&& !(
ã°
 == 0))

172 
	`Ârötf
(
°dîr
, "%g[%d] -> '%s' but zero valueÇot soÑeported\n",

173 
ã°
, 
¥ecisi⁄
, 
buf„r
);

174 
Áûed
 = 1;

175 
	`as£π
(!
	`PNG_FP_IS_NEGATIVE
(
°©e
));

176 
	`as£π
(!
	`PNG_FP_IS_POSITIVE
(
°©e
));

178 i‡(
	`PNG_FP_IS_POSITIVE
(
°©e
Ë&& !(
ã°
 > 0))

180 
	`Ârötf
(
°dîr
, "%g[%d] -> '%s' butÖositive valueÇot soÑeported\n",

181 
ã°
, 
¥ecisi⁄
, 
buf„r
);

182 
Áûed
 = 1;

183 
	`as£π
(!
	`PNG_FP_IS_NEGATIVE
(
°©e
));

184 
	`as£π
(!
	`PNG_FP_IS_ZERO
(
°©e
));

189 
out
 = 
	`©of
(
buf„r
);

190 
ch™ge
 = 
	`Ábs
((
out
 - 
ã°
)/test);

191 
Ælow
 = .5 / 
	`pow
(10,

192 (
¥ecisi⁄
 >
DBL_DIG
) ? DBL_DIG-1 :Örecision-1);

201 i‡(
ch™ge
 >
Ælow
 && (
	`isföôe
(
out
) ||

202 
	`Ábs
(
ã°
/
DBL_MAX
Ë<1-
Ælow
))

204 
≥r˚¡
 = (
¥ecisi⁄
 >
DBL_DIG
Ë? 
max_îr‹_abs
 : 
max_îr‹
;

205 
Ælowp
 = (
ch™ge
-
Ælow
)*100/allow;

207 i‡(
¥ecisi⁄
 >
DBL_DIG
)

209 i‡(
max_abs
 < 
Ælowp
) max_abs =állowp;

214 i‡(
max
 < 
Ælowp
) max =állowp;

217 i‡(
showÆl
 || 
Ælowp
 >
≥r˚¡
)

219 
	`Ârötf
(
°dîr
,

221 
DBL_DIG
, 
ã°
, 
¥ecisi⁄
, 
buf„r
, DBL_DIG, 
out
, 
ch™ge
, 
Ælow
,

222 ()
	`round
(
Ælowp
));

223 
Áûed
 = 1;

226 ++
mö‹¨ôh
;

230 i‡(
Áûed
)

231 ++
Áûcou¡
;

233 ++
ok
;

235 
skù
:

237 
¥ecisi⁄
 = 
	`ønd
();

238 i‡(
¥ecisi⁄
 & 1Ë
ã°
 = -test;

239 
¥ecisi⁄
 >>= 1;

242 i‡(
ã°
 =0 || !
	`isföôe
(test))

243 
ã°
 = 
¥ecisi⁄
+1;

247 
exp⁄ít
 = 
¥ecisi⁄
 % (
DBL_MAX_EXP
 - 
DBL_MIN_EXP
) + DBL_MIN_EXP;

248 
tmp
;

249 
ã°
 = 
	`‰exp
—e° * 
	`ønd
(), &
tmp
);

250 
ã°
 = 
	`ldexp
—e°, 
exp⁄ít
);

251 
¥ecisi⁄
 >>= 8;

257 
¥ecisi⁄
 = (precision & 0x1f) + 1;

259 --
cou¡
);

261 
	`¥ötf
("Tested %d finite values, %dÇon-finite, %d OK (%d failed) "

263 
föôe
, 
n⁄föôe
, 
ok
, 
Áûcou¡
, 
mö‹¨ôh
);

264 
	`¥ötf
(" Eº‹ wôh >=%d digôÖªcisi⁄ %.2f%%\n", 
DBL_DIG
, 
max_abs
);

265 
	`¥ötf
(" Eº‹ wôh < %d digôÖªcisi⁄ %.2f%%\n", 
DBL_DIG
, 
max
);

268 
	}
}

277 
	echeckÂ_°©e


279 
	m°¨t
, 
	m‰a˘i⁄
, 
	mexp⁄ít
, 
	m°©es


280 } 
	tcheckÂ_°©e
;

283 c⁄° 
	gn⁄e
[] = "";

284 c⁄° 
	ghexdigôs
[16] = "0123456789ABCDEF";

288 c⁄° *
	m°¨t
;

289 c⁄° *
	míd
;

290 c⁄° *
	mã°s
;

292 
	g°©e_ch¨a˘îs
[
°©es
] =

295  { 
n⁄e
, "eE", "+-.E#0147" },

296  { "+-", 
n⁄e
, "+-.eE^0258" }

301 
	mnumbî
[1024];

302 
	mlimô
;

303 
	mvîbo£
;

304 
	m˘imes
;

305 
	mcmûli⁄s
;

306 
	mcövÆid
;

307 
	m˙ﬂc˚±
;

309 
	tcheckÂ_comm™d
;

313 
	m˙umbî
;

314 
checkÂ_°©e
 
	mcheck_°©e
;

315 
	m©_°¨t
;

316 
	mcdigôs_ö_°©e
;

317 
	mlimô
;

318 
	m°©e
;

319 
	mis_√g©ive
;

320 
	mis_zîo
;

321 
	mnumbî_was_vÆid
;

323 
	tcheckÂ_c⁄åﬁ
;

325 
check_Æl_ch¨a˘îs
(
checkÂ_comm™d
 *
co
, 
checkÂ_c⁄åﬁ
 
c
);

327 
check_some_ch¨a˘îs
(
checkÂ_comm™d
 *
co
, 
checkÂ_c⁄åﬁ
 
c
,

328 c⁄° *
ã°s
);

330 
	$check_⁄e_ch¨a˘î
(
checkÂ_comm™d
 *
co
, 
checkÂ_c⁄åﬁ
 
c
, 
ch
)

334 
size_t
 
ödex
 = 0;

335 c⁄° 
ã°
 = ()
ch
;

336 
numbî_is_vÆid
 = 
	`≤g_check_Â_numbî
(&
ã°
, 1, &
c
.
°©e
, &
ödex
);

337 
ch¨a˘î_ac˚±ed
 = (
ödex
 == 1);

339 i‡(
c
.
check_°©e
 !
exp⁄ít
 && 
	`isdigô
(
ch
) && ch != '0')

340 
c
.
is_zîo
 = 0;

342 i‡(
c
.
check_°©e
 =
°¨t
 && c.
©_°¨t
 && 
ch
 == '-')

343 
c
.
is_√g©ive
 = 1;

345 i‡(
	`i•röt
(
ch
))

346 
co
->
numbî
[
c
.
˙umbî
++] = ()
ch
;

349 
co
->
numbî
[
c
.
˙umbî
++] = '<';

350 
co
->
numbî
[
c
.
˙umbî
++] = 
hexdigôs
[(
ch
 >> 4) & 0xf];

351 
co
->
numbî
[
c
.
˙umbî
++] = 
hexdigôs
[
ch
 & 0xf];

352 
co
->
numbî
[
c
.
˙umbî
++] = '>';

354 
co
->
numbî
[
c
.
˙umbî
] = 0;

356 i‡(
co
->
vîbo£
 > 1)

357 
	`Ârötf
(
°dîr
, "%s\n", 
co
->
numbî
);

359 i‡(++(
co
->
˘imes
) == 1000000)

361 i‡(
co
->
vîbo£
 == 1)

362 
	`Âutc
('.', 
°dîr
);

363 
co
->
˘imes
 = 0;

364 ++(
co
->
cmûli⁄s
);

367 i‡(!
numbî_is_vÆid
)

368 ++(
co
->
cövÆid
);

370 i‡(!
ch¨a˘î_ac˚±ed
)

371 ++(
co
->
˙ﬂc˚±
);

374 i‡(
ödex
 != 0 && index != 1)

376 
	`Ârötf
(
°dîr
, "%s:Ñead beyondÉnd of string (%lu)\n",

377 
co
->
numbî
, ()
ödex
);

384 i‡(
	`PNG_FP_IS_NEGATIVE
(
c
.
°©e
) !=

385 (
numbî_is_vÆid
 && !
c
.
is_zîo
 && c.
is_√g©ive
))

387 
	`Ârötf
(
°dîr
, "%s:Çeg©ivêwhí iài†nŸ\n", 
co
->
numbî
);

391 i‡(
	`PNG_FP_IS_ZERO
(
c
.
°©e
Ë!(
numbî_is_vÆid
 && c.
is_zîo
))

393 
	`Ârötf
(
°dîr
, "%s: zîÿwhí iài†nŸ\n", 
co
->
numbî
);

397 i‡(
	`PNG_FP_IS_POSITIVE
(
c
.
°©e
) !=

398 (
numbî_is_vÆid
 && !
c
.
is_zîo
 && !c.
is_√g©ive
))

400 
	`Ârötf
(
°dîr
, "%s:Öosôivêwhí iài†nŸ\n", 
co
->
numbî
);

405 i‡(
	`isdigô
(
ch
))

407 i‡(!
ch¨a˘î_ac˚±ed
)

409 
	`Ârötf
(
°dîr
, "%s: digô '%c'ÇŸác˚±ed\n", 
co
->
numbî
, 
ch
);

413 i‡(!
numbî_is_vÆid
)

415 
	`Ârötf
(
°dîr
, "%s: sawá digit (%c) butÇumberÇot valid\n",

416 
co
->
numbî
, 
ch
);

420 ++
c
.
cdigôs_ö_°©e
;

421 
c
.
©_°¨t
 = 0;

422 
c
.
numbî_was_vÆid
 = 1;

428 i‡(
c
.
cdigôs_ö_°©e
 < 1)

429  
	`check_Æl_ch¨a˘îs
(
co
, 
c
);

432  
	`check_some_ch¨a˘îs
(
co
, 
c
,

433 
°©e_ch¨a˘îs
[
c
.
check_°©e
].
ã°s
);

437 i‡(((
ch
 ='+' || ch ='-'Ë&& 
c
.
check_°©e
 !
‰a˘i⁄
 &&

438 
c
.
©_°¨t
) ||

439 (
ch
 ='.' && 
c
.
check_°©e
 =
°¨t
) ||

440 ((
ch
 ='e' || ch ='E'Ë&& 
c
.
numbî_was_vÆid
 &&

441 
c
.
check_°©e
 !
exp⁄ít
))

443 i‡(!
ch¨a˘î_ac˚±ed
)

445 
	`Ârötf
(
°dîr
, "%s: ch¨a˘î '%c'ÇŸác˚±ed\n", 
co
->
numbî
, 
ch
);

450 i‡(
numbî_is_vÆid
 && (
c
.
check_°©e
 !
°¨t
 || 
ch
 != '.'))

452 
	`Ârötf
(
°dîr
, "%s: sawáÇon-digit (%c) butÇumber valid\n",

453 
co
->
numbî
, 
ch
);

457 
c
.
numbî_was_vÆid
 = 
numbî_is_vÆid
;

463 i‡(
c
.
check_°©e
 =
°¨t
 && 
ch
 == '.')

465 
c
.
check_°©e
 = 
‰a˘i⁄
;

466 
c
.
©_°¨t
 = !
numbî_is_vÆid
;

467 
c
.
cdigôs_ö_°©e
 = 0;

468 
c
.
limô
 = 
co
->limit;

469  
	`check_Æl_ch¨a˘îs
(
co
, 
c
);

472 i‡(
c
.
check_°©e
 < 
exp⁄ít
 && (
ch
 == 'e' || ch == 'E'))

474 
c
.
check_°©e
 = 
exp⁄ít
;

475 
c
.
©_°¨t
 = 1;

476 
c
.
cdigôs_ö_°©e
 = 0;

477 
c
.
limô
 = 
co
->limit;

478  
	`check_Æl_ch¨a˘îs
(
co
, 
c
);

484 i‡(
ch
 != '-' && ch != '+')

486 
	`Ârötf
(
°dîr
, "checkfp: internalÉrror (1)\n");

490 
c
.
©_°¨t
 = 0;

491  
	`check_Æl_ch¨a˘îs
(
co
, 
c
);

498 i‡(
ch¨a˘î_ac˚±ed
)

500 
	`Ârötf
(
°dîr
, "%s: ch¨a˘î '%c' [0x%.2x]ác˚±ed\n", 
co
->
numbî
,

501 
ch
, ch);

505 i‡(
numbî_is_vÆid
 !
c
.
numbî_was_vÆid
)

507 
	`Ârötf
(
°dîr
,

509 
co
->
numbî
, 
ch
, ch);

520 
	}
}

522 
	$check_Æl_ch¨a˘îs
(
checkÂ_comm™d
 *
co
, 
checkÂ_c⁄åﬁ
 
c
)

524 
ch
;

526 i‡(
c
.
˙umbî
+4 <  
co
->
numbî
)

528 
ch
=0; ch<256; ++ch)

530 i‡(!
	`check_⁄e_ch¨a˘î
(
co
, 
c
, 
ch
))

536 
	}
}

538 
	$check_some_ch¨a˘îs
(
checkÂ_comm™d
 *
co
, 
checkÂ_c⁄åﬁ
 
c
,

539 c⁄° *
ã°s
)

541 
i
;

543 --(
c
.
limô
);

545 i‡(
c
.
˙umbî
+4 <  
co
->
numbî
 && c.
limô
 >= 0)

547 i‡(
c
.
limô
 > 0)

549 
i
=0; 
ã°s
[i]; ++i)

551 i‡(!
	`check_⁄e_ch¨a˘î
(
co
, 
c
, 
ã°s
[
i
]))

558  
	`check_Æl_ch¨a˘îs
(
co
, 
c
);

562 
	}
}

564 
	$vÆid©i⁄_checkÂ
(
cou¡
, 
¨gc
, **
¨gv
)

566 
ªsu…
;

567 
checkÂ_comm™d
 
comm™d
;

568 
checkÂ_c⁄åﬁ
 
c⁄åﬁ
;

570 
comm™d
.
numbî
[0] = 0;

571 
comm™d
.
limô
 = 3;

572 
comm™d
.
vîbo£
 = verbose;

573 
comm™d
.
˘imes
 = 0;

574 
comm™d
.
cmûli⁄s
 = 0;

575 
comm™d
.
cövÆid
 = 0;

576 
comm™d
.
˙ﬂc˚±
 = 0;

578 --
¨gc
 > 0)

580 ++
¨gv
;

581 i‡(
¨gc
 > 1 && 
	`°rcmp
(*
¨gv
, "-l") == 0)

583 --
¨gc
;

584 
comm™d
.
limô
 = 
	`©oi
(*++
¨gv
);

589 
	`Ârötf
(
°dîr
, "unknow¿¨gumíà%s\n", *
¨gv
);

594 
c⁄åﬁ
.
˙umbî
 = 0;

595 
c⁄åﬁ
.
check_°©e
 = 
°¨t
;

596 
c⁄åﬁ
.
©_°¨t
 = 1;

597 
c⁄åﬁ
.
cdigôs_ö_°©e
 = 0;

598 
c⁄åﬁ
.
limô
 = 
comm™d
.limit;

599 
c⁄åﬁ
.
°©e
 = 0;

600 
c⁄åﬁ
.
is_√g©ive
 = 0;

601 
c⁄åﬁ
.
is_zîo
 = 1;

602 
c⁄åﬁ
.
numbî_was_vÆid
 = 0;

604 
ªsu…
 = 
	`check_Æl_ch¨a˘îs
(&
comm™d
, 
c⁄åﬁ
);

606 
	`¥ötf
("checkfp: %s: checked %d,%.3d,%.3d,%.3d strings (%d invalid)\n",

607 
ªsu…
 ? "∑ss" : "FAIL", 
comm™d
.
cmûli⁄s
 / 1000,

608 
comm™d
.
cmûli⁄s
 % 1000, comm™d.
˘imes
 / 1000, command.ctimes % 1000,

609 
comm™d
.
cövÆid
);

611  
ªsu…
;

612 
	}
}

614 
	$vÆid©i⁄_muldiv
(
cou¡
, 
¨gc
, **
¨gv
)

616 
ã°ed
 = 0;

617 
ovîÊow
 = 0;

618 
îr‹
 = 0;

619 
îr‹64
 = 0;

620 
∑s£d
 = 0;

621 
øndbôs
 = 0;

622 
≤g_uöt_32
 
øndbuf„r
;

623 
≤g_fixed_poöt
 
a
;

624 
≤g_öt_32
 
times
, 
div
;

626 --
¨gc
 > 0)

628 
	`Ârötf
(
°dîr
, "unknow¿¨gumíà%s\n", *++
¨gv
);

633 
øndbuf„r
 = 
RAND_MAX
;

634 
øndbuf„r
 !0Ë++
øndbôs
,Ñandbuffer >>= 1;

635 
	`¥ötf
("UsögÑ™domÇumbî gíî©‹Åh© make†%d bôs\n", 
øndbôs
);

636 
div
=0; div<32; div +
øndbôs
)

637 
øndbuf„r
 = (øndbuf„∏<< 
øndbôs
Ë^ 
	`ønd
();

639 
a
 = 0;

640 
times
 = 
div
 = 0;

643 
≤g_fixed_poöt
 
ªsu…
;

648 
Â
, 
Âround
;

649 
hi
, 
lo
;

650 
ok
;

656 
u1
, 
u2
;

657 
n
 = 0;

658 i‡(
a
 < 0Ë
u1
 = -a, 
n
 = 1; u1 =á;

659 i‡(
times
 < 0Ë
u2
 = -times, 
n
 = !n; u2 =Åimes;

660 
	`≤g_64bô_¥odu˘
(
u1
, 
u2
, &
hi
, &
lo
);

661 i‡(
n
)

664 
lo
 = ((~lo) + 1) & 0xffffffff;

665 
hi
 = ~hi;

666 i‡(
lo
 =0Ë++
hi
;

670 
Â
 = 
a
;

671 
Â
 *
times
;

672 i‡((
Â
 & 0xffffffffË!
lo
 || ((Â >> 32Ë& 0xffffffffË!
hi
)

674 
	`Ârötf
(
°dîr
, "png_64bit_product %d * %d -> %lx|%.8lxÇot %llx\n",

675 
a
, 
times
, 
hi
, 
lo
, 
Â
);

676 ++
îr‹64
;

679 i‡(
div
 != 0)

682 i‡((
Â
 < 0Ë!(
div
 < 0))

683 
Â
 -
div
/2;

685 
Â
 +
div
/2;

687 
Â
 /
div
;

688 
Âround
 = 
Â
;

690 
ok
 = 
Âround
 <
PNG_UINT_31_MAX
 &&

691 
Âround
 >-1-()
PNG_UINT_31_MAX
;

692 i‡(!
ok
Ë++
ovîÊow
;

695 
ok
 = 0, ++
ovîÊow
, 
Âround
 = 
Â
 ;

697 i‡(
vîbo£
)

698 
	`Ârötf
(
°dîr
, "TEST %d * %d / %d -> %lld (%s)\n",

699 
a
, 
times
, 
div
, 
Â
, 
ok
 ? "ok" : "overflow");

701 ++
ã°ed
;

702 i‡(
	`≤g_muldiv
(&
ªsu…
, 
a
, 
times
, 
div
Ë!
ok
)

704 ++
îr‹
;

705 i‡(
ok
)

706 
	`Ârötf
(
°dîr
, "%d * %d / %d -> overflow (expected %lld)\n",

707 
a
, 
times
, 
div
, 
Â
);

709 
	`Ârötf
(
°dîr
, "%d * %d / %d -> %d (expected overflow %lld)\n",

710 
a
, 
times
, 
div
, 
ªsu…
, 
Â
);

712 i‡(
ok
 && 
ªsu…
 !
Âround
)

714 ++
îr‹
;

715 
	`Ârötf
(
°dîr
, "%d * %d / %d -> %dÇot %lld\n",

716 
a
, 
times
, 
div
, 
ªsu…
, 
Â
);

719 ++
∑s£d
;

725 
a
 +
times
;

726 
times
 +
div
;

727 
div
 = 
øndbuf„r
;

728 
øndbuf„r
 = (øndbuf„∏<< 
øndbôs
Ë^ 
	`ønd
();

730 --
cou¡
 > 0);

732 
	`¥ötf
("%dÅests including %d overflows, %dÖassed, %d failed "

733 "(%d 64-bôÉº‹s)\n", 
ã°ed
, 
ovîÊow
, 
∑s£d
, 
îr‹
, 
îr‹64
);

735 
	}
}

740 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


741 
	#LN2
 .000010576586617430806112933839

	)

742 
	#L2INV
 94548.46219969910586572651

	)

745 
≤g_uöt_32
 
	$≤g_log8bô
(
x
)

747 i‡(
x
 > 0)

748  (
≤g_uöt_32
)
	`Êo‹
(.5-
	`log
(
x
/255.)*
L2INV
);

751 
	}
}

753 
≤g_uöt_32
 
	$≤g_log16bô
(
≤g_uöt_32
 
x
)

755 i‡(
x
 > 0)

756  (
≤g_uöt_32
)
	`Êo‹
(.5-
	`log
(
x
/65535.)*
L2INV
);

759 
	}
}

761 
≤g_uöt_32
 
	$≤g_exp
(
≤g_uöt_32
 
x
)

763  (
≤g_uöt_32
)
	`Êo‹
(.5 + 
	`exp
(
x
 * -
LN2
) * 0xffffffffU);

764 
	}
}

766 
≤g_byã
 
	$≤g_exp8bô
(
≤g_uöt_32
 
log
)

768  (
≤g_byã
)
	`Êo‹
(.5 + 
	`exp
(
log
 * -
LN2
) * 255);

769 
	}
}

771 
≤g_uöt_16
 
	$≤g_exp16bô
(
≤g_uöt_32
 
log
)

773  (
≤g_uöt_16
)
	`Êo‹
(.5 + 
	`exp
(
log
 * -
LN2
) * 65535);

774 
	}
}

777 
	$vÆid©i⁄_gamma
(
¨gc
, **
¨gv
)

779 
gamma
[9] = { 2.2, 1.8, 1.52, 1.45, 1., 1/1.45, 1/1.52, 1/1.8, 1/2.2 };

780 
maxîr
;

781 
i
, 
sûít
=0, 
⁄lygamma
=0;

784 --
¨gc
 > 0)

785 i‡(
	`°rcmp
(*++
¨gv
, "-s") == 0)

786 
sûít
 = 1;

787 i‡(
	`°rcmp
(*
¨gv
, "-g") == 0)

788 
⁄lygamma
 = 1;

791 
	`Ârötf
(
°dîr
, "unknow¿¨gumíà%s\n", *
¨gv
);

795 i‡(!
⁄lygamma
)

798 
maxîr
 = 0;

799 
i
=0; i<256; ++i)

801 
c‹ª˘
 = -
	`log
(
i
/255.)/log(2.)*65536;

802 
îr‹
 = 
	`≤g_log8bô
(
i
Ë- 
c‹ª˘
;

804 i‡(
i
 !0 && 
	`Ábs
(
îr‹
Ë> 
maxîr
)

805 
maxîr
 = 
	`Ábs
(
îr‹
);

807 i‡(
i
 =0 && 
	`≤g_log8bô
(i) != 0xffffffff ||

808 
i
 !0 && 
	`≤g_log8bô
(iË!
	`Êo‹
(
c‹ª˘
+.5))

810 
	`Ârötf
(
°dîr
, "8-bitÜogÉrror: %d: got %u,Éxpected %f\n",

811 
i
, 
	`≤g_log8bô
(i), 
c‹ª˘
);

815 i‡(!
sûít
)

816 
	`¥ötf
("maximum 8-bôÜogÉº‹ = %f\n", 
maxîr
);

818 
maxîr
 = 0;

819 
i
=0; i<65536; ++i)

821 
c‹ª˘
 = -
	`log
(
i
/65535.)/log(2.)*65536;

822 
îr‹
 = 
	`≤g_log16bô
(
i
Ë- 
c‹ª˘
;

824 i‡(
i
 !0 && 
	`Ábs
(
îr‹
Ë> 
maxîr
)

825 
maxîr
 = 
	`Ábs
(
îr‹
);

827 i‡(
i
 =0 && 
	`≤g_log16bô
(i) != 0xffffffff ||

828 
i
 !0 && 
	`≤g_log16bô
(iË!
	`Êo‹
(
c‹ª˘
+.5))

830 i‡(
îr‹
 > .68)

832 
	`Ârötf
(
°dîr
,

834 
i
, 
	`≤g_log16bô
(i), 
c‹ª˘
, 
îr‹
);

839 i‡(!
sûít
)

840 
	`¥ötf
("maximum 16-bôÜogÉº‹ = %f\n", 
maxîr
);

843 
maxîr
 = 0;

844 
i
=0; i<=0xfffff; ++i)

846 
c‹ª˘
 = 
	`exp
(-
i
/65536. * 
	`log
(2.)) * (65536. * 65536);

847 
îr‹
 = 
	`≤g_exp
(
i
Ë- 
c‹ª˘
;

849 i‡(
	`Ábs
(
îr‹
Ë> 
maxîr
)

850 
maxîr
 = 
	`Ábs
(
îr‹
);

851 i‡(
	`Ábs
(
îr‹
) > 1883)

853 
	`Ârötf
(
°dîr
,

855 
i
, 
	`≤g_exp
(i), 
c‹ª˘
, 
îr‹
);

859 i‡(!
sûít
)

860 
	`¥ötf
("maximum 32-bôÉx∞îr‹ = %f\n", 
maxîr
);

862 
maxîr
 = 0;

863 
i
=0; i<=0xfffff; ++i)

865 
c‹ª˘
 = 
	`exp
(-
i
/65536. * 
	`log
(2.)) * 255;

866 
îr‹
 = 
	`≤g_exp8bô
(
i
Ë- 
c‹ª˘
;

868 i‡(
	`Ábs
(
îr‹
Ë> 
maxîr
)

869 
maxîr
 = 
	`Ábs
(
îr‹
);

870 i‡(
	`Ábs
(
îr‹
) > .50002)

872 
	`Ârötf
(
°dîr
,

874 
i
, 
	`≤g_exp8bô
(i), 
c‹ª˘
, 
îr‹
);

878 i‡(!
sûít
)

879 
	`¥ötf
("maximum 8-bôÉx∞îr‹ = %f\n", 
maxîr
);

881 
maxîr
 = 0;

882 
i
=0; i<=0xfffff; ++i)

884 
c‹ª˘
 = 
	`exp
(-
i
/65536. * 
	`log
(2.)) * 65535;

885 
îr‹
 = 
	`≤g_exp16bô
(
i
Ë- 
c‹ª˘
;

887 i‡(
	`Ábs
(
îr‹
Ë> 
maxîr
)

888 
maxîr
 = 
	`Ábs
(
îr‹
);

889 i‡(
	`Ábs
(
îr‹
) > .524)

891 
	`Ârötf
(
°dîr
,

893 
i
, 
	`≤g_exp16bô
(i), 
c‹ª˘
, 
îr‹
);

897 i‡(!
sûít
)

898 
	`¥ötf
("maximum 16-bôÉx∞îr‹ = %f\n", 
maxîr
);

902 
i
=0; i<9; ++i)

904 
j
;

905 
g
 = 
gamma
[
i
];

906 
≤g_fixed_poöt
 
gÂ
 = 
	`Êo‹
(
g
 * 
PNG_FP_1
 + .5);

908 i‡(!
sûít
)

909 
	`¥ötf
("Te° gamm®%f\n", 
g
);

911 
maxîr
 = 0;

912 
j
=0; j<256; ++j)

914 
c‹ª˘
 = 
	`pow
(
j
/255., 
g
) * 255;

915 
≤g_byã
 
out
 = 
	`≤g_gamma_8bô_c‹ª˘
(
j
, 
gÂ
);

916 
îr‹
 = 
out
 - 
c‹ª˘
;

918 i‡(
	`Ábs
(
îr‹
Ë> 
maxîr
)

919 
maxîr
 = 
	`Ábs
(
îr‹
);

920 i‡(
out
 !
	`Êo‹
(
c‹ª˘
+.5))

922 
	`Ârötf
(
°dîr
, "8bit %d ^ %f: got %dÉxpected %fÉrror %f\n",

923 
j
, 
g
, 
out
, 
c‹ª˘
, 
îr‹
);

927 i‡(!
sûít
)

928 
	`¥ötf
("gamm®%f: maximum 8-bôÉº‹ %f\n", 
g
, 
maxîr
);

930 
maxîr
 = 0;

931 
j
=0; j<65536; ++j)

933 
c‹ª˘
 = 
	`pow
(
j
/65535., 
g
) * 65535;

934 
≤g_uöt_16
 
out
 = 
	`≤g_gamma_16bô_c‹ª˘
(
j
, 
gÂ
);

935 
îr‹
 = 
out
 - 
c‹ª˘
;

937 i‡(
	`Ábs
(
îr‹
Ë> 
maxîr
)

938 
maxîr
 = 
	`Ábs
(
îr‹
);

939 i‡(
	`Ábs
(
îr‹
) > 1.62)

941 
	`Ârötf
(
°dîr
, "16bit %d ^ %f: got %dÉxpected %fÉrror %f\n",

942 
j
, 
g
, 
out
, 
c‹ª˘
, 
îr‹
);

946 i‡(!
sûít
)

947 
	`¥ötf
("gamm®%f: maximum 16-bôÉº‹ %f\n", 
g
, 
maxîr
);

951 
	}
}

965 
	#COUNT
 1000000000

	)

967 
	$maö
(
¨gc
, **
¨gv
)

969 
cou¡
 = 
COUNT
;

971 
¨gc
 > 1)

973 i‡(
¨gc
 > 2 && 
	`°rcmp
(
¨gv
[1], "-c") == 0)

975 
cou¡
 = 
	`©oi
(
¨gv
[2]);

976 
¨gc
 -= 2;

977 
¨gv
 += 2;

980 i‡(
	`°rcmp
(
¨gv
[1], "-v") == 0)

982 ++
vîbo£
;

983 --
¨gc
;

984 ++
¨gv
;

991 i‡(
cou¡
 > 0 && 
¨gc
 > 1)

993 i‡(
	`°rcmp
(
¨gv
[1], "ascii") == 0)

994  
	`vÆid©i⁄_ascii_to_Â
(
cou¡
, 
¨gc
-1, 
¨gv
+1);

995 i‡(
	`°rcmp
(
¨gv
[1], "checkfp") == 0)

996  
	`vÆid©i⁄_checkÂ
(
cou¡
, 
¨gc
-1, 
¨gv
+1);

997 i‡(
	`°rcmp
(
¨gv
[1], "muldiv") == 0)

998  
	`vÆid©i⁄_muldiv
(
cou¡
, 
¨gc
-1, 
¨gv
+1);

999 i‡(
	`°rcmp
(
¨gv
[1], "gamma") == 0)

1000  
	`vÆid©i⁄_gamma
(
¨gc
-1, 
¨gv
+1);

1004 
	`Ârötf
(
°dîr
,

1006 
	`Ârötf
(
°dîr
, "árguments:áscii [-a (allÑesults)] [-eÉrror%%]\n");

1007 
	`Ârötf
(
°dîr
, " checkfp [-l max-number-chars]\n");

1008 
	`Ârötf
(
°dîr
, " muldiv\n");

1009 
	`Ârötf
(
°dîr
, " gamma -s (silent) -g (only gamma;ÇoÜog)\n");

1011 
	}
}

	@contrib/libtests/timepng.c

16 
	#_POSIX_C_SOURCE
 199309L

	)

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

22 
	~<limôs.h
>

24 
	~<time.h
>

26 #i‡
deföed
(
HAVE_CONFIG_H
Ë&& !deföed(
PNG_NO_CONFIG_H
)

27 
	~<c⁄fig.h
>

33 #ifde‡
PNG_FREESTANDING_TESTS


34 
	~<≤g.h
>

36 
	~"../../≤g.h
"

40 #ifde‡
__˝lu•lus


41 
	#voidˇ°
(
ty≥
, 
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

43 
	#voidˇ°
(
ty≥
, 
vÆue
Ë(vÆue)

	)

54 #i‡
deföed
 (
CLOCK_PROCESS_CPUTIME_ID
Ë&& deföed(
PNG_STDIO_SUPPORTED
) &&\

55 
deföed
(
PNG_EASY_ACCESS_SUPPORTED
) &&\

56 (
	gPNG_LIBPNG_VER
 >10700 ? 
	$deföed
(
PNG_READ_PNG_SUPPORTED
) :\

57 
	`deföed
 (
PNG_SEQUENTIAL_READ_SUPPORTED
) &&\

58 
	$deföed
(
PNG_INFO_IMAGE_SUPPORTED
))

62 
FILE
 *
öput
;

63 
FILE
 *
ouçut
;

64 } 
	tio_d©a
;

66 
	`PNG_CALLBACK
(, 
ªad_™d_c›y
,

67 (
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf„r
, 
size_t
 
cb
))

69 
io_d©a
 *
io
 = (io_d©a*)
	`≤g_gë_io_±r
(
≤g_±r
);

71 i‡(
	`‰ód
(
buf„r
, 
cb
, 1, 
io
->
öput
) != 1)

72 
	`≤g_îr‹
(
≤g_±r
, 
	`°ªº‹
(
î∫o
));

74 i‡(
	`fwrôe
(
buf„r
, 
cb
, 1, 
io
->
ouçut
) != 1)

76 
	`≥º‹
("temporary file");

77 
	`Ârötf
(
°dîr
, "temporary file PNG write failed\n");

78 
	`exô
(1);

80 
	}
}

82 
	$ªad_by_row
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo_±r
,

83 
FILE
 *
wrôe_±r
, FILE *
ªad_±r
)

88 
≤g_byãp
 
row
 = 
NULL
, 
di•œy
 = NULL;

89 
io_d©a
 
io_c›y
;

91 i‡(
wrôe_±r
 !
NULL
)

94 
io_c›y
.
öput
 = 
ªad_±r
;

95 
io_c›y
.
ouçut
 = 
wrôe_±r
;

96 
	`≤g_£t_ªad_‚
(
≤g_±r
, &
io_c›y
, 
ªad_™d_c›y
);

99 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

102 
size_t
 
rowbyãs
 = 
	`≤g_gë_rowbyãs
(
≤g_±r
, 
öfo_±r
);

104 
row
 = 
	`voidˇ°
(
≤g_byãp
,
	`mÆloc
(
rowbyãs
));

105 
di•œy
 = 
	`voidˇ°
(
≤g_byãp
,
	`mÆloc
(
rowbyãs
));

107 i‡(
row
 =
NULL
 || 
di•œy
 == NULL)

108 
	`≤g_îr‹
(
≤g_±r
, "OOMállocatingÑow buffers");

111 
≤g_uöt_32
 
height
 = 
	`≤g_gë_image_height
(
≤g_±r
, 
öfo_±r
);

112 
∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

113 
∑ss
;

115 
	`≤g_°¨t_ªad_image
(
≤g_±r
);

117 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass)

119 
≤g_uöt_32
 
y
 = 
height
;

125 
y
-- > 0)

126 
	`≤g_ªad_row
(
≤g_±r
, 
row
, 
di•œy
);

132 
	`≤g_ªad_íd
(
≤g_±r
, 
öfo_±r
);

135 
	`‰ì
(
row
);

136 
	`‰ì
(
di•œy
);

137 
	}
}

139 
PNG_CALLBACK
(, 
no_w¨nögs
, (
≤g_°ru˘p
 
≤g_±r
,

140 
≤g_c⁄°_ch¨p
 
w¨nög
))

142 ()
	g≤g_±r
;

143 ()
	gw¨nög
;

146 
	$ªad_≤g
(
FILE
 *
Â
, 
≤g_öt_32
 
å™sf‹ms
, FILE *
wrôe_fûe
)

148 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
,0,0,

149 
no_w¨nögs
);

150 
≤g_öf›
 
öfo_±r
 = 
NULL
;

152 i‡(
≤g_±r
 =
NULL
)

155 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
)))

157 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

161 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


162 
	`≤g_£t_bíign_îr‹s
(
≤g_±r
, 1 );

164 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

166 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

168 i‡(
öfo_±r
 =
NULL
)

169 
	`≤g_îr‹
(
≤g_±r
, "OOMállocating info structure");

171 i‡(
å™sf‹ms
 < 0)

172 
	`ªad_by_row
(
≤g_±r
, 
öfo_±r
, 
wrôe_fûe
, 
Â
);

175 
	`≤g_ªad_≤g
(
≤g_±r
, 
öfo_±r
, 
å™sf‹ms
, 
NULL
 );

177 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

179 
	}
}

181 
	$mytime
(
time•ec
 *
t
)

184 i‡(!
	`˛ock_gëtime
(
CLOCK_PROCESS_CPUTIME_ID
, 
t
))

187 
	`≥º‹
("CLOCK_PROCESS_CPUTIME_ID");

188 
	`Ârötf
(
°dîr
, "timepng: couldÇot getÅheÅime\n");

190 
	}
}

192 
	$≥rf‹m_⁄e_ã°
(
FILE
 *
Â
, 
nfûes
, 
≤g_öt_32
 
å™sf‹ms
)

194 
i
;

195 
time•ec
 
bef‹e
, 
a·î
;

198 
	`ªwöd
(
Â
);

200 i‡(
	`mytime
(&
bef‹e
))

202 
i
=0; i<
nfûes
; ++i)

204 i‡(
	`ªad_≤g
(
Â
, 
å™sf‹ms
, 
NULL
 ))

206 i‡(
	`„º‹
(
Â
))

208 
	`≥º‹
("temporary file");

209 
	`Ârötf
(
°dîr
, "fûê%d:Éº‹Ñódög PNG d©a\n", 
i
);

216 
	`≥º‹
("temporary file");

217 
	`Ârötf
(
°dîr
, "fûê%d:Éº‹ fromÜib≤g\n", 
i
);

226 i‡(
	`mytime
(&
a·î
))

231 
s
 = 
a·î
.
tv_£c
 - 
bef‹e
.tv_sec;

232 
ns
 = 
a·î
.
tv_n£c
 - 
bef‹e
.tv_nsec;

234 i‡(
ns
 < 0)

236 --
s
;

237 
ns
 += 1000000000;

239 i‡(
ns
 < 0)

241 
	`Ârötf
(
°dîr
, "timepng: bad clock from kernel\n");

246 
	`¥ötf
("%lu.%.9ld\n", 
s
, 
ns
);

247 
	`fÊush
(
°dout
);

248 i‡(
	`„º‹
(
°dout
))

250 
	`Ârötf
(
°dîr
, "timepng:Érror writing output\n");

260 
	}
}

262 
	$add_⁄e_fûe
(
FILE
 *
Â
, *
«me
)

264 
FILE
 *
ù
 = 
	`f›í
(
«me
, "rb");

266 i‡(
ù
 !
NULL
)

271 
ok
 = 0;

272 
Âos_t
 
pos
;

274 i‡(
	`fgëpos
(
Â
, &
pos
))

277 
	`≥º‹
("temporary file");

278 
	`Ârötf
(
°dîr
, "temporary file fgetposÉrror\n");

279 
	`exô
(1);

282 i‡(
	`ªad_≤g
(
ù
, -1 , 
Â
 ))

284 i‡(
	`„º‹
(
ù
))

286 
	`≥º‹
(
«me
);

287 
	`Ârötf
(
°dîr
, "%s:ÑódÉº‹\n", 
«me
);

291 
ok
 = 1;

295 
	`Ârötf
(
°dîr
, "%s: fûênŸádded\n", 
«me
);

297 ()
	`f˛o£
(
ù
);

300 i‡(
	`„º‹
(
Â
))

302 
	`≥º‹
("temporary file");

303 
	`Ârötf
(
°dîr
, "temporary file writeÉrror\n");

304 
	`exô
(1);

307 i‡(
ok
)

314 i‡(
	`f£ços
(
Â
, &
pos
))

316 
	`≥º‹
("temporary file");

317 
	`Ârötf
(
°dîr
, "temporary file fsetposÉrror\n");

318 
	`exô
(1);

325 
	`≥º‹
(
«me
);

326 
	`Ârötf
(
°dîr
, "%s: o≥¿Áûed\n", 
«me
);

330 
	}
}

333 
	$ußge
(
FILE
 *
Â
)

335 i‡(
Â
 !
NULL
Ë
	`f˛o£
(fp);

337 
	`Ârötf
(
°dîr
,

349  );
	`Ârötf
(
°dîr
,

359 
	`exô
(99);

360 
	}
}

362 
	$maö
(
¨gc
, **
¨gv
)

364 
ok
 = 0;

365 
îr
 = 0;

366 
nfûes
 = 0;

367 
å™sf‹ms
 = -1;

368 c⁄° *
as£mbly
 = 
NULL
;

369 
FILE
 *
Â
;

371 i‡(
¨gc
 > 2 && 
	`°rcmp
(
¨gv
[1], "--assemble") == 0)

374 
as£mbly
 = 
¨gv
[2];

375 
Â
 = 
	`f›í
(
as£mbly
, "wb");

376 i‡(
Â
 =
NULL
)

378 
	`≥º‹
(
as£mbly
);

379 
	`Ârötf
(
°dîr
, "timepng --assemble %s: couldÇot open for write\n",

380 
as£mbly
);

381 
	`ußge
(
NULL
);

384 
¨gv
 += 2;

385 
¨gc
 -= 2;

388 i‡(
¨gc
 > 3 && 
	`°rcmp
(
¨gv
[1], "--dissemble") == 0)

390 
Â
 = 
	`f›í
(
¨gv
[2], "rb");

392 i‡(
Â
 =
NULL
)

394 
	`≥º‹
(
¨gv
[2]);

395 
	`Ârötf
(
°dîr
, "timepng --dissemble %s: couldÇot open forÑead\n",

396 
¨gv
[2]);

397 
	`ußge
(
NULL
);

400 
nfûes
 = 
	`©oi
(
¨gv
[3]);

401 i‡(
nfûes
 <= 0)

403 
	`Ârötf
(
°dîr
,

405 
¨gv
[3]);

406 
	`exô
(99);

408 #ifde‡
__COVERITY__


411 
nfûes
 &
PNG_UINT_31_MAX
;

415 
¨gv
 += 3;

416 
¨gc
 -= 3;

421 #i‚de‡
__COVERITY__


422 
Â
 = 
	`tmpfûe
();

439 
tmpfûe
[] = "timepng-XXXXXX";

440 
fûedes
;

441 
	`umask
(0177);

442 
fûedes
 = 
	`mk°emp
(
tmpfûe
);

443 i‡(
fûedes
 < 0)

444 
Â
 = 
NULL
;

447 
Â
 = 
	`fd›í
(
fûedes
,"w+");

451 (Ë
	`u∆ök
(
tmpfûe
);

455 i‡(
Â
 =
NULL
)

457 
	`≥º‹
("tmpfile");

458 
	`Ârötf
(
°dîr
, "timepng: couldÇot openÅheÅemporary file\n");

459 
	`exô
(1);

464 
¨gc
 > 1 && 
¨gv
[1][0] == '-' &&árgv[1][1] == '-')

466 c⁄° *
›t
 = *++
¨gv
 + 2;

468 --
¨gc
;

473 i‡(
å™sf‹ms
 == -1)

474 
å™sf‹ms
 = 
PNG_TRANSFORM_IDENTITY
;

476 i‡(
	`°rcmp
(
›t
, "by-image") == 0)

481 
	#OPT
(
«me
Ëi‡(
	`°rcmp
(
›t
, #name) == 0)\

482 
å™sf‹ms
 |
PNG_TRANSFORM_
 ## 
«me


	)

484 
	`OPT
(
STRIP_16
);

485 
	`OPT
(
STRIP_ALPHA
);

486 
	`OPT
(
PACKING
);

487 
	`OPT
(
PACKSWAP
);

488 
	`OPT
(
EXPAND
);

489 
	`OPT
(
INVERT_MONO
);

490 
	`OPT
(
SHIFT
);

491 
	`OPT
(
BGR
);

492 
	`OPT
(
SWAP_ALPHA
);

493 
	`OPT
(
SWAP_ENDIAN
);

494 
	`OPT
(
INVERT_ALPHA
);

495 
	`OPT
(
STRIP_FILLER
);

496 
	`OPT
(
STRIP_FILLER_BEFORE
);

497 
	`OPT
(
STRIP_FILLER_AFTER
);

498 
	`OPT
(
GRAY_TO_RGB
);

499 
	`OPT
(
EXPAND_16
);

500 
	`OPT
(
SCALE_16
);

504 
	`Ârötf
(
°dîr
, "timïng %s: uƒecognizedÅønsf‹m\n", 
›t
);

505 
	`ußge
(
Â
);

510 i‡(
¨gc
 > 1 && 
nfûes
 > 0)

511 
	`ußge
(
Â
);

513 i‡(
¨gc
 > 1)

515 
i
;

517 
i
=1; i<
¨gc
; ++i)

519 i‡(
nfûes
 =
INT_MAX
)

521 
	`Ârötf
(
°dîr
, "%s: skù≥d,Åoÿm™y fûes\n", 
¨gv
[
i
]);

525 i‡(
	`add_⁄e_fûe
(
Â
, 
¨gv
[
i
]))

526 ++
nfûes
;

530 i‡(
nfûes
 == 0)

532 
fûíame
[
FILENAME_MAX
+1];

534 
	`fgës
(
fûíame
, 
FILENAME_MAX
+1, 
°dö
))

536 
size_t
 
Àn
 = 
	`°æí
(
fûíame
);

538 i‡(
fûíame
[
Àn
-1] == '\n')

540 
fûíame
[
Àn
-1] = 0;

541 i‡(
nfûes
 =
INT_MAX
)

543 
	`Ârötf
(
°dîr
, "%s: skù≥d,Åoÿm™y fûes\n", 
fûíame
);

547 i‡(
	`add_⁄e_fûe
(
Â
, 
fûíame
))

548 ++
nfûes
;

553 
	`Ârötf
(
°dîr
, "timepng: fileÇameÅooÜong: ...%s\n",

554 
fûíame
+
Àn
-32);

555 
îr
 = 1;

560 i‡(
	`„º‹
(
°dö
))

562 
	`Ârötf
(
°dîr
, "timepng: stdin:ÑeadÉrror\n");

563 
îr
 = 1;

568 i‡(!
îr
)

570 i‡(
nfûes
 > 0)

572 i‡(
as£mbly
 !
NULL
)

574 i‡(
	`fÊush
(
Â
Ë&& !
	`„º‹
(ÂË&& 
	`f˛o£
(fp))

576 
	`≥º‹
(
as£mbly
);

577 
	`Ârötf
(
°dîr
, "%s: clo£ faûed\n", 
as£mbly
);

582 
	`¥ötf
("%†%d\n", 
as£mbly
, 
nfûes
);

583 
	`fÊush
(
°dout
);

584 
ok
 = !
	`„º‹
(
°dout
);

590 
ok
 = 
	`≥rf‹m_⁄e_ã°
(
Â
, 
nfûes
, 
å™sf‹ms
);

591 ()
	`f˛o£
(
Â
);

596 
	`ußge
(
Â
);

600 ()
	`f˛o£
(
Â
);

603  
ok
 == 0;

604 
	}
}

606 
	$maö
(Ë{  77; 
	}
}

	@contrib/mips-msa/linux.c

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°dlib.h
>

29 
	$≤g_have_mß
(
≤g_°ru˘p
 
≤g_±r
)

31 
FILE
 *
f
 = 
	`f›í
("/proc/cpuinfo", "rb");

33 *
°rög
 = "msa";

34 
w‹d
[10];

36 i‡(
f
 !
NULL
)

38 !
	`„of
(
f
))

40 
ch
 = 
	`fgëc
(
f
);

41 
i
 = 0;

43 !(
ch
 <= 32))

45 
w‹d
[
i
++] = 
ch
;

46 
ch
 = 
	`fgëc
(
f
);

49 
vÆ
 = 
	`°rcmp
(
°rög
, 
w‹d
);

51 i‡(
vÆ
 == 0) {

52 
	`f˛o£
(
f
);

56 
i
 = 0;

57 
	`mem£t
(
w‹d
, 0, 10);

60 
	`f˛o£
(
f
);

62 #ifde‡
PNG_WARNINGS_SUPPORTED


64 
	`≤g_w¨nög
(
≤g_±r
, "/proc/cpuinfo open failed");

67 
	}
}

	@contrib/oss-fuzz/libpng_read_fuzzer.cc

18 
	~<°ddef.h
>

19 
	~<°döt.h
>

20 
	~<°rög.h
>

22 
	~<ve˘‹
>

24 
	#PNG_INTERNAL


	)

25 
	~"≤g.h
"

27 
	#PNG_CLEANUP
 \

28 if(
≤g_h™dÀr
.
≤g_±r
) \

30 i‡(
≤g_h™dÀr
.
row_±r
) \

31 
	`≤g_‰ì
(
≤g_h™dÀr
.
≤g_±r
,Öng_h™dÀr.
row_±r
); \

32 i‡(
≤g_h™dÀr
.
íd_öfo_±r
) \

33 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_h™dÀr
.
≤g_±r
, &≤g_h™dÀr.
öfo_±r
,\

34 &
≤g_h™dÀr
.
íd_öfo_±r
); \

35 i‡(
≤g_h™dÀr
.
öfo_±r
) \

36 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_h™dÀr
.
≤g_±r
, &≤g_h™dÀr.
öfo_±r
,\

37 
nuŒ±r
); \

39 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_h™dÀr
.
≤g_±r
, 
nuŒ±r
,Çullptr); \

40 
≤g_h™dÀr
.
≤g_±r
 = 
nuŒ±r
; \

41 
≤g_h™dÀr
.
row_±r
 = 
nuŒ±r
; \

42 
≤g_h™dÀr
.
öfo_±r
 = 
nuŒ±r
; \

43 
≤g_h™dÀr
.
íd_öfo_±r
 = 
nuŒ±r
; \

44 }

	)

46 
	sBufSèã
 {

47 c⁄° 
uöt8_t
* 
	md©a
;

48 
size_t
 
	mbyãs_À·
;

51 
	sPngObje˘H™dÀr
 {

52 
≤g_öf›
 
	möfo_±r
 = 
nuŒ±r
;

53 
≤g_°ru˘p
 
	m≤g_±r
 = 
nuŒ±r
;

54 
≤g_öf›
 
	míd_öfo_±r
 = 
nuŒ±r
;

55 
≤g_voidp
 
	mrow_±r
 = 
nuŒ±r
;

56 
BufSèã
* 
	mbuf_°©e
 = 
nuŒ±r
;

58 ~
PngObje˘H™dÀr
() {

59 i‡(
	mrow_±r
)

60 
≤g_‰ì
(
≤g_±r
, 
row_±r
);

61 i‡(
	míd_öfo_±r
)

62 
≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, &
íd_öfo_±r
);

63 i‡(
	möfo_±r
)

64 
≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
nuŒ±r
);

66 
≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
nuŒ±r
,Çullptr);

67 
dñëe
 
	mbuf_°©e
;

71 
	$u£r_ªad_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
) {

72 
BufSèã
* 
buf_°©e
 = 
°©ic_ˇ°
<BufSèã*>(
	`≤g_gë_io_±r
(
≤g_±r
));

73 i‡(
Àngth
 > 
buf_°©e
->
byãs_À·
) {

74 
	`≤g_îr‹
(
≤g_±r
, "readÉrror");

76 
	`mem˝y
(
d©a
, 
buf_°©e
->d©a, 
Àngth
);

77 
buf_°©e
->
byãs_À·
 -
Àngth
;

78 
buf_°©e
->
d©a
 +
Àngth
;

79 
	}
}

81 * 
	$limôed_mÆloc
(
≤g_°ru˘p
, 
≤g_Æloc_size_t
 
size
) {

87 i‡(
size
 > 8000000)

88  
nuŒ±r
;

90  
	`mÆloc
(
size
);

91 
	}
}

93 
	$deÁu…_‰ì
(
≤g_°ru˘p
, 
≤g_voidp
 
±r
) {

94  
	`‰ì
(
±r
);

95 
	}
}

97 c⁄° 
	gkPngHódîSize
 = 8;

102 "C" 
	$LLVMFuzzîTe°O√I≈ut
(c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
size
) {

103 i‡(
size
 < 
kPngHódîSize
) {

107 
°d
::
ve˘‹
<> 
	`v
(
d©a
, d©®+ 
size
);

108 i‡(
	`≤g_sig_cmp
(
v
.
	`d©a
(), 0, 
kPngHódîSize
)) {

113 
PngObje˘H™dÀr
 
≤g_h™dÀr
;

114 
≤g_h™dÀr
.
≤g_±r
 = 
nuŒ±r
;

115 
≤g_h™dÀr
.
row_±r
 = 
nuŒ±r
;

116 
≤g_h™dÀr
.
öfo_±r
 = 
nuŒ±r
;

117 
≤g_h™dÀr
.
íd_öfo_±r
 = 
nuŒ±r
;

119 
≤g_h™dÀr
.
≤g_±r
 = 
≤g_¸óã_ªad_°ru˘


120 (
PNG_LIBPNG_VER_STRING
, 
nuŒ±r
,Çullptr,Çullptr);

121 i‡(!
≤g_h™dÀr
.
≤g_±r
) {

125 
≤g_h™dÀr
.
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
’ng_h™dÀr.
≤g_±r
);

126 i‡(!
≤g_h™dÀr
.
öfo_±r
) {

127 
PNG_CLEANUP


131 
≤g_h™dÀr
.
íd_öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
’ng_h™dÀr.
≤g_±r
);

132 i‡(!
≤g_h™dÀr
.
íd_öfo_±r
) {

133 
PNG_CLEANUP


138 
	`≤g_£t_mem_‚
(
≤g_h™dÀr
.
≤g_±r
, 
nuŒ±r
, 
limôed_mÆloc
, 
deÁu…_‰ì
);

140 
	`≤g_£t_¸c_a˘i⁄
(
≤g_h™dÀr
.
≤g_±r
, 
PNG_CRC_QUIET_USE
, PNG_CRC_QUIET_USE);

141 #ifde‡
PNG_IGNORE_ADLER32


142 
	`≤g_£t_›ti⁄
(
≤g_h™dÀr
.
≤g_±r
, 
PNG_IGNORE_ADLER32
, 
PNG_OPTION_ON
);

146 
≤g_h™dÀr
.
buf_°©e
 = 
√w
 
	`BufSèã
();

147 
≤g_h™dÀr
.
buf_°©e
->
d©a
 = d©®+ 
kPngHódîSize
;

148 
≤g_h™dÀr
.
buf_°©e
->
byãs_À·
 = 
size
 - 
kPngHódîSize
;

149 
	`≤g_£t_ªad_‚
(
≤g_h™dÀr
.
≤g_±r
,Öng_h™dÀr.
buf_°©e
, 
u£r_ªad_d©a
);

150 
	`≤g_£t_sig_byãs
(
≤g_h™dÀr
.
≤g_±r
, 
kPngHódîSize
);

152 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_h™dÀr
.
≤g_±r
))) {

153 
PNG_CLEANUP


158 
	`≤g_ªad_öfo
(
≤g_h™dÀr
.
≤g_±r
,Öng_h™dÀr.
öfo_±r
);

161 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_h™dÀr
.
≤g_±r
))) {

162 
PNG_CLEANUP


166 
≤g_uöt_32
 
width
, 
height
;

167 
bô_dïth
, 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
;

168 
fûãr_ty≥
;

170 i‡(!
	`≤g_gë_IHDR
(
≤g_h™dÀr
.
≤g_±r
,Öng_h™dÀr.
öfo_±r
, &
width
,

171 &
height
, &
bô_dïth
, &
cﬁ‹_ty≥
, &
öãæa˚_ty≥
,

172 &
com¥essi⁄_ty≥
, &
fûãr_ty≥
)) {

173 
PNG_CLEANUP


178 i‡(
width
 && 
height
 > 100000000 / width) {

179 
PNG_CLEANUP


184 
	`≤g_£t_gøy_to_rgb
(
≤g_h™dÀr
.
≤g_±r
);

185 
	`≤g_£t_ex∑nd
(
≤g_h™dÀr
.
≤g_±r
);

186 
	`≤g_£t_∑ckög
(
≤g_h™dÀr
.
≤g_±r
);

187 
	`≤g_£t_sˇÀ_16
(
≤g_h™dÀr
.
≤g_±r
);

188 
	`≤g_£t_tRNS_to_Æpha
(
≤g_h™dÀr
.
≤g_±r
);

190 
∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_h™dÀr
.
≤g_±r
);

192 
	`≤g_ªad_upd©e_öfo
(
≤g_h™dÀr
.
≤g_±r
,Öng_h™dÀr.
öfo_±r
);

194 
≤g_h™dÀr
.
row_±r
 = 
	`≤g_mÆloc
(

195 
≤g_h™dÀr
.
≤g_±r
, 
	`≤g_gë_rowbyãs
(png_handler.png_ptr,

196 
≤g_h™dÀr
.
öfo_±r
));

198 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass) {

199 
≤g_uöt_32
 
y
 = 0; y < 
height
; ++y) {

200 
	`≤g_ªad_row
(
≤g_h™dÀr
.
≤g_±r
,

201 
°©ic_ˇ°
<
≤g_byãp
>(
≤g_h™dÀr
.
row_±r
), 
nuŒ±r
);

205 
	`≤g_ªad_íd
(
≤g_h™dÀr
.
≤g_±r
,Öng_h™dÀr.
íd_öfo_±r
);

207 
PNG_CLEANUP


209 
	}
}

	@contrib/pngminim/decoder/pngusr.h

12 #i‚de‡
MINRDPNGCONF_H


13 
	#MINRDPNGCONF_H


	)

21 
	#PNG_ALIGN_TYPE
 
PNG_ALIGN_NONE


	)

	@contrib/pngminim/encoder/pngusr.h

12 #i‚de‡
MINWRPNGCONF_H


13 
	#MINWRPNGCONF_H


	)

21 
	#PNG_ALIGN_TYPE
 
PNG_ALIGN_NONE


	)

	@contrib/pngminim/preader/pngusr.h

12 #i‚de‡
MINPRDPNGCONF_H


13 
	#MINPRDPNGCONF_H


	)

21 
	#PNG_ALIGN_TYPE
 
PNG_ALIGN_NONE


	)

	@contrib/pngminus/png2pnm.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<f˙é.h
>

13 #i‚de‡
BOOL


14 
	#BOOL
 

	)

16 #i‚de‡
TRUE


17 
	#TRUE
 (
BOOL
Ë1

	)

19 #i‚de‡
FALSE


20 
	#FALSE
 (
BOOL
Ë0

	)

24 #i‚de‡
PNG_DEBUG


25 
	#PNG_DEBUG
 0

	)

28 
	~"≤g.h
"

32 
maö
 (
¨gc
, *
¨gv
[]);

33 
ußge
 ();

34 
BOOL
 
≤g2≤m
 (
FILE
 *
≤g_fûe
, FILE *
≤m_fûe
, FILE *
Æpha_fûe
,

35 
BOOL
 
øw
, BOOL 
Æpha
);

41 
	$maö
 (
¨gc
, *
¨gv
[])

43 
FILE
 *
Â_rd
 = 
°dö
;

44 
FILE
 *
Â_wr
 = 
°dout
;

45 
FILE
 *
Â_Æ
 = 
NULL
;

46 
BOOL
 
øw
 = 
TRUE
;

47 
BOOL
 
Æpha
 = 
FALSE
;

48 
¨gi
;

50 
¨gi
 = 1;árgò< 
¨gc
;árgi++)

52 i‡(
¨gv
[
¨gi
][0] == '-')

54 
¨gv
[
¨gi
][1])

57 
øw
 = 
FALSE
;

60 
øw
 = 
TRUE
;

63 
Æpha
 = 
TRUE
;

64 
¨gi
++;

65 i‡((
Â_Æ
 = 
	`f›í
 (
¨gv
[
¨gi
], "wb")Ë=
NULL
)

67 
	`Ârötf
 (
°dîr
, "PNM2PNG\n");

68 
	`Ârötf
 (
°dîr
, "Error: cannot createálpha-channel file %s\n",

69 
¨gv
[
¨gi
]);

70 
	`exô
 (1);

75 
	`ußge
 ();

76 
	`exô
 (0);

79 
	`Ârötf
 (
°dîr
, "PNG2PNM\n");

80 
	`Ârötf
 (
°dîr
, "Eº‹: unknow¿›ti⁄ %s\n", 
¨gv
[
¨gi
]);

81 
	`ußge
 ();

82 
	`exô
 (1);

86 i‡(
Â_rd
 =
°dö
)

88 i‡((
Â_rd
 = 
	`f›í
 (
¨gv
[
¨gi
], "rb")Ë=
NULL
)

90 
	`Ârötf
 (
°dîr
, "PNG2PNM\n");

91 
	`Ârötf
 (
°dîr
, "Eº‹: fûê%†d€†nŸÉxi°\n", 
¨gv
[
¨gi
]);

92 
	`exô
 (1);

95 i‡(
Â_wr
 =
°dout
)

97 i‡((
Â_wr
 = 
	`f›í
 (
¨gv
[
¨gi
], "wb")Ë=
NULL
)

99 
	`Ârötf
 (
°dîr
, "PNG2PNM\n");

100 
	`Ârötf
 (
°dîr
, "Eº‹: c™nŸ cª©êfûê%s\n", 
¨gv
[
¨gi
]);

101 
	`exô
 (1);

106 
	`Ârötf
 (
°dîr
, "PNG2PNM\n");

107 
	`Ârötf
 (
°dîr
, "Error:Åoo manyÖarameters\n");

108 
	`ußge
 ();

109 
	`exô
 (1);

113 #i‡
	`deföed
(
O_BINARY
) && (O_BINARY != 0)

115 i‡(
Â_rd
 =
°dö
)

116 
	`£tmode
 (
	`fûío
 (
°dö
), 
O_BINARY
);

117 i‡((
øw
Ë&& (
Â_wr
 =
°dout
))

118 
	`£tmode
 (
	`fûío
 (
°dout
), 
O_BINARY
);

122 i‡(
	`≤g2≤m
 (
Â_rd
, 
Â_wr
, 
Â_Æ
, 
øw
, 
Æpha
Ë=
FALSE
)

124 
	`Ârötf
 (
°dîr
, "PNG2PNM\n");

125 
	`Ârötf
 (
°dîr
, "Error: unsuccessful conversion of PNG-image\n");

126 
	`exô
 (1);

130 
	`f˛o£
 (
Â_rd
);

132 
	`f˛o£
 (
Â_wr
);

134 i‡(
Æpha
)

135 
	`f˛o£
 (
Â_Æ
);

138 
	}
}

144 
	$ußge
 ()

146 
	`Ârötf
 (
°dîr
, "PNG2PNM\n");

147 
	`Ârötf
 (
°dîr
, " by Willem van Schaik, 1999\n");

148 
	`Ârötf
 (
°dîr
, "Usage:Öng2pnm [options] <file>.png [<file>.pnm]\n");

149 
	`Ârötf
 (
°dîr
, " or: ... |Öng2pnm [options]\n");

150 
	`Ârötf
 (
°dîr
, "Options:\n");

151 
	`Ârötf
 (
°dîr
,

153 
	`Ârötf
 (
°dîr
, " -n[oraw] writeÖnm-file ináscii format (P1/P2/P3)\n");

154 
	`Ârötf
 (
°dîr
,

156 
	`Ârötf
 (
°dîr
, " -h | -?ÖrintÅhis help-information\n");

157 
	}
}

163 
BOOL
 
	$≤g2≤m
 (
FILE
 *
≤g_fûe
, FILE *
≤m_fûe
, FILE *
Æpha_fûe
,

164 
BOOL
 
øw
, BOOL 
Æpha
)

166 
≤g_°ru˘
 *
≤g_±r
 = 
NULL
;

167 
≤g_öfo
 *
öfo_±r
 = 
NULL
;

168 
≤g_byã
 
buf
[8];

169 
≤g_byã
 *
≤g_pixñs
 = 
NULL
;

170 
≤g_byã
 **
row_poöãrs
 = 
NULL
;

171 
≤g_byã
 *
pix_±r
 = 
NULL
;

172 
≤g_uöt_32
 
row_byãs
;

174 
≤g_uöt_32
 
width
;

175 
≤g_uöt_32
 
height
;

176 
bô_dïth
;

177 
ch™√ls
;

178 
cﬁ‹_ty≥
;

179 
Æpha_¥e£¡
;

180 
row
, 
cﬁ
;

181 
ªt
;

182 
i
;

183 
dï_16
;

186 
ªt
 = 
	`‰ód
 (
buf
, 1, 8, 
≤g_fûe
);

187 i‡(
ªt
 != 8)

188  
FALSE
;

190 
ªt
 = 
	`≤g_sig_cmp
 (
buf
, 0, 8);

191 i‡(
ªt
 != 0)

192  
FALSE
;

196 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
 (
	`≤g_gë_lib≤g_vî
(
NULL
),

197 
NULL
, NULL, NULL);

198 i‡(!
≤g_±r
)

199  
FALSE
;

201 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
 (
≤g_±r
);

202 i‡(!
öfo_±r
)

204 
	`≤g_de°roy_ªad_°ru˘
 (&
≤g_±r
, 
NULL
, NULL);

205  
FALSE
;

208 i‡(
	`£tjmp
 (
	`≤g_jmpbuf
 (
≤g_±r
)))

210 
	`≤g_de°roy_ªad_°ru˘
 (&
≤g_±r
, &
öfo_±r
, 
NULL
);

211  
FALSE
;

215 
	`≤g_öô_io
 (
≤g_±r
, 
≤g_fûe
);

216 
	`≤g_£t_sig_byãs
 (
≤g_±r
, 8);

219 
	`≤g_ªad_öfo
 (
≤g_±r
, 
öfo_±r
);

222 
	`≤g_gë_IHDR
 (
≤g_±r
, 
öfo_±r
, &
width
, &
height
, &
bô_dïth
, &
cﬁ‹_ty≥
,

223 
NULL
, NULL, NULL);

228 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

229 
	`≤g_£t_ex∑nd
 (
≤g_±r
);

231 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 && 
bô_dïth
 < 8)

232 
	`≤g_£t_ex∑nd
 (
≤g_±r
);

234 i‡(
	`≤g_gë_vÆid
 (
≤g_±r
, 
öfo_±r
, 
PNG_INFO_tRNS
))

235 
	`≤g_£t_ex∑nd
 (
≤g_±r
);

237 #ifde‡
NJET


239 i‡(
bô_dïth
 == 16)

240 
	`≤g_£t_°rù_16
 (
≤g_±r
);

242 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 ||

243 
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

244 
	`≤g_£t_gøy_to_rgb
 (
≤g_±r
);

246 i‡(
	`≤g_gë_gAMA
 (
≤g_±r
, 
öfo_±r
, &
fûe_gamma
))

247 
	`≤g_£t_gamma
 (
≤g_±r
, (Ë2.2, 
fûe_gamma
);

253 
	`≤g_ªad_upd©e_öfo
 (
≤g_±r
, 
öfo_±r
);

256 
	`≤g_gë_IHDR
 (
≤g_±r
, 
öfo_±r
, &
width
, &
height
, &
bô_dïth
, &
cﬁ‹_ty≥
,

257 
NULL
, NULL, NULL);

260 i‡(
bô_dïth
 == 16)

262 
øw
 = 
FALSE
;

263 #i‡
	`deföed
(
O_BINARY
) && (O_BINARY != 0)

264 
	`£tmode
 (
	`fûío
 (
≤m_fûe
), 
O_BINARY
);

269 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

270 
ch™√ls
 = 1;

271 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

272 
ch™√ls
 = 2;

273 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

274 
ch™√ls
 = 3;

275 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

276 
ch™√ls
 = 4;

278 
ch™√ls
 = 0;

279 
Æpha_¥e£¡
 = (
ch™√ls
 - 1) % 2;

282 i‡(
Æpha
 && !
Æpha_¥e£¡
)

284 
	`Ârötf
 (
°dîr
, "PNG2PNM\n");

285 
	`Ârötf
 (
°dîr
, "Error: PNG-file doesn't containálpha channel\n");

286 
	`exô
 (1);

290 
row_byãs
 = 
	`≤g_gë_rowbyãs
 (
≤g_±r
, 
öfo_±r
);

292 i‡((
row_byãs
 == 0) ||

293 ((
size_t
Ë
height
 > (size_tË(-1Ë/ (size_tË
row_byãs
))

296 
	`≤g_de°roy_ªad_°ru˘
 (&
≤g_±r
, &
öfo_±r
, 
NULL
);

297  
FALSE
;

299 i‡((
≤g_pixñs
 = (
≤g_byã
 *)

300 
	`mÆloc
 ((
size_t
Ë
row_byãs
 * (size_tË
height
)Ë=
NULL
)

302 
	`≤g_de°roy_ªad_°ru˘
 (&
≤g_±r
, &
öfo_±r
, 
NULL
);

303  
FALSE
;

306 i‡((
row_poöãrs
 = (
≤g_byã
 **)

307 
	`mÆloc
 ((
size_t
Ë
height
 *  (
≤g_byã
 *))Ë=
NULL
)

309 
	`≤g_de°roy_ªad_°ru˘
 (&
≤g_±r
, &
öfo_±r
, 
NULL
);

310 
	`‰ì
 (
≤g_pixñs
);

311  
FALSE
;

315 
i
 = 0; i < ((Ë
height
); i++)

316 
row_poöãrs
[
i
] = 
≤g_pixñs
 + i * 
row_byãs
;

319 
	`≤g_ªad_image
 (
≤g_±r
, 
row_poöãrs
);

322 
	`≤g_ªad_íd
 (
≤g_±r
, 
öfo_±r
);

325 
	`≤g_de°roy_ªad_°ru˘
 (&
≤g_±r
, &
öfo_±r
, 
NULL
);

329 i‡((
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
) ||

330 (
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
))

332 
	`Ârötf
 (
≤m_fûe
, "%s\n", (
øw
) ? "P5" : "P2");

333 
	`Ârötf
 (
≤m_fûe
, "%d %d\n", (Ë
width
, (Ë
height
);

334 
	`Ârötf
 (
≤m_fûe
, "%ld\n", ((1L << (Ë
bô_dïth
) - 1L));

336 i‡((
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
) ||

337 (
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
))

339 
	`Ârötf
 (
≤m_fûe
, "%s\n", (
øw
) ? "P6" : "P3");

340 
	`Ârötf
 (
≤m_fûe
, "%d %d\n", (Ë
width
, (Ë
height
);

341 
	`Ârötf
 (
≤m_fûe
, "%ld\n", ((1L << (Ë
bô_dïth
) - 1L));

346 i‡((
Æpha
) &&

347 ((
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
) ||

348 (
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)))

350 
	`Ârötf
 (
Æpha_fûe
, "%s\n", (
øw
) ? "P5" : "P2");

351 
	`Ârötf
 (
Æpha_fûe
, "%d %d\n", (Ë
width
, (Ë
height
);

352 
	`Ârötf
 (
Æpha_fûe
, "%ld\n", ((1L << (Ë
bô_dïth
) - 1L));

356 
pix_±r
 = 
≤g_pixñs
;

358 
row
 = 0;Ñow < (Ë
height
;Ñow++)

360 
cﬁ
 = 0; cﬁ < (Ë
width
; col++)

362 
i
 = 0; i < (
ch™√ls
 - 
Æpha_¥e£¡
); i++)

364 i‡(
øw
)

366 
	`Âutc
 ((Ë*
pix_±r
++, 
≤m_fûe
);

370 i‡(
bô_dïth
 == 16)

372 
dï_16
 = (Ë*
pix_±r
++;

373 
	`Ârötf
 (
≤m_fûe
, "%ld ", (
dï_16
 << 8Ë+ ((Ë*
pix_±r
++));

377 
	`Ârötf
 (
≤m_fûe
, "%ld ", (Ë*
pix_±r
++);

381 i‡(
Æpha_¥e£¡
)

383 i‡(!
Æpha
)

385 
pix_±r
++;

386 i‡(
bô_dïth
 == 16)

387 
pix_±r
++;

391 i‡(
øw
)

393 
	`Âutc
 ((Ë*
pix_±r
++, 
Æpha_fûe
);

397 i‡(
bô_dïth
 == 16)

399 
dï_16
 = (Ë*
pix_±r
++;

400 
	`Ârötf
 (
Æpha_fûe
, "%ld ", (
dï_16
 << 8Ë+ (Ë*
pix_±r
++);

404 
	`Ârötf
 (
Æpha_fûe
, "%ld ", (Ë*
pix_±r
++);

410 i‡(!
øw
)

411 i‡(
cﬁ
 % 4 == 3)

412 
	`Ârötf
 (
≤m_fûe
, "\n");

415 i‡(!
øw
)

416 i‡(
cﬁ
 % 4 != 0)

417 
	`Ârötf
 (
≤m_fûe
, "\n");

420 i‡(
row_poöãrs
 !
NULL
)

421 
	`‰ì
 (
row_poöãrs
);

422 i‡(
≤g_pixñs
 !
NULL
)

423 
	`‰ì
 (
≤g_pixñs
);

425  
TRUE
;

427 
	}
}

	@contrib/pngminus/pnm2png.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<f˙é.h
>

13 #i‚de‡
BOOL


14 
	#BOOL
 

	)

16 #i‚de‡
TRUE


17 
	#TRUE
 (
BOOL
Ë1

	)

19 #i‚de‡
FALSE


20 
	#FALSE
 (
BOOL
Ë0

	)

24 #i‚de‡
PNG_DEBUG


25 
	#PNG_DEBUG
 0

	)

28 
	~"≤g.h
"

32 
maö
 (
¨gc
, *
¨gv
[]);

33 
ußge
 ();

34 
BOOL
 
≤m2≤g
 (
FILE
 *
≤m_fûe
, FILE *
≤g_fûe
, FILE *
Æpha_fûe
,

35 
BOOL
 
öãæa˚
, BOOL 
Æpha
);

36 
gë_tokí
 (
FILE
 *
≤m_fûe
, *
tokí_buf
, 
size_t
 
tokí_buf_size
);

37 
≤g_uöt_32
 
gë_d©a
 (
FILE
 *
≤m_fûe
, 
dïth
);

38 
≤g_uöt_32
 
gë_vÆue
 (
FILE
 *
≤m_fûe
, 
dïth
);

44 
	$maö
 (
¨gc
, *
¨gv
[])

46 
FILE
 *
Â_rd
 = 
°dö
;

47 
FILE
 *
Â_Æ
 = 
NULL
;

48 
FILE
 *
Â_wr
 = 
°dout
;

49 
BOOL
 
öãæa˚
 = 
FALSE
;

50 
BOOL
 
Æpha
 = 
FALSE
;

51 
¨gi
;

53 
¨gi
 = 1;árgò< 
¨gc
;árgi++)

55 i‡(
¨gv
[
¨gi
][0] == '-')

57 
¨gv
[
¨gi
][1])

60 
öãæa˚
 = 
TRUE
;

63 
Æpha
 = 
TRUE
;

64 
¨gi
++;

65 i‡((
Â_Æ
 = 
	`f›í
 (
¨gv
[
¨gi
], "rb")Ë=
NULL
)

67 
	`Ârötf
 (
°dîr
, "PNM2PNG\n");

68 
	`Ârötf
 (
°dîr
, "Error:álpha-channel file %s doesÇotÉxist\n",

69 
¨gv
[
¨gi
]);

70 
	`exô
 (1);

75 
	`ußge
 ();

76 
	`exô
 (0);

79 
	`Ârötf
 (
°dîr
, "PNM2PNG\n");

80 
	`Ârötf
 (
°dîr
, "Eº‹: unknow¿›ti⁄ %s\n", 
¨gv
[
¨gi
]);

81 
	`ußge
 ();

82 
	`exô
 (1);

86 i‡(
Â_rd
 =
°dö
)

88 i‡((
Â_rd
 = 
	`f›í
 (
¨gv
[
¨gi
], "rb")Ë=
NULL
)

90 
	`Ârötf
 (
°dîr
, "PNM2PNG\n");

91 
	`Ârötf
 (
°dîr
, "Eº‹: fûê%†d€†nŸÉxi°\n", 
¨gv
[
¨gi
]);

92 
	`exô
 (1);

95 i‡(
Â_wr
 =
°dout
)

97 i‡((
Â_wr
 = 
	`f›í
 (
¨gv
[
¨gi
], "wb")Ë=
NULL
)

99 
	`Ârötf
 (
°dîr
, "PNM2PNG\n");

100 
	`Ârötf
 (
°dîr
, "Eº‹: c™nŸ cª©êPNG-fûê%s\n", 
¨gv
[
¨gi
]);

101 
	`exô
 (1);

106 
	`Ârötf
 (
°dîr
, "PNM2PNG\n");

107 
	`Ârötf
 (
°dîr
, "Error:Åoo manyÖarameters\n");

108 
	`ußge
 ();

109 
	`exô
 (1);

113 #i‡
	`deföed
(
O_BINARY
) && (O_BINARY != 0)

117 i‡(
Â_rd
 =
°dö
)

118 
	`£tmode
 (
	`fûío
 (
°dö
), 
O_BINARY
);

119 i‡(
Â_wr
 =
°dout
)

120 
	`£tmode
 (
	`fûío
 (
°dout
), 
O_BINARY
);

124 i‡(
	`≤m2≤g
 (
Â_rd
, 
Â_wr
, 
Â_Æ
, 
öãæa˚
, 
Æpha
Ë=
FALSE
)

126 
	`Ârötf
 (
°dîr
, "PNM2PNG\n");

127 
	`Ârötf
 (
°dîr
, "Error: unsuccessful convertingÅo PNG-image\n");

128 
	`exô
 (1);

132 
	`f˛o£
 (
Â_rd
);

134 
	`f˛o£
 (
Â_wr
);

136 i‡(
Æpha
)

137 
	`f˛o£
 (
Â_Æ
);

140 
	}
}

146 
	$ußge
 ()

148 
	`Ârötf
 (
°dîr
, "PNM2PNG\n");

149 
	`Ârötf
 (
°dîr
, " by Willem van Schaik, 1999\n");

150 
	`Ârötf
 (
°dîr
, "Usage:Önm2png [options] <file>.<pnm> [<file>.png]\n");

151 
	`Ârötf
 (
°dîr
, " or: ... |Önm2png [options]\n");

152 
	`Ârötf
 (
°dîr
, "Options:\n");

153 
	`Ârötf
 (
°dîr
, " -i[nterlace] writeÖng-file with interlacing on\n");

154 
	`Ârötf
 (
°dîr
,

156 
	`Ârötf
 (
°dîr
, " -h | -?ÖrintÅhis help-information\n");

157 
	}
}

163 
BOOL
 
	$≤m2≤g
 (
FILE
 *
≤m_fûe
, FILE *
≤g_fûe
, FILE *
Æpha_fûe
,

164 
BOOL
 
öãæa˚
, BOOL 
Æpha
)

166 
≤g_°ru˘
 *
≤g_±r
 = 
NULL
;

167 
≤g_öfo
 *
öfo_±r
 = 
NULL
;

168 
≤g_byã
 *
≤g_pixñs
 = 
NULL
;

169 
≤g_byã
 **
row_poöãrs
 = 
NULL
;

170 
≤g_byã
 *
pix_±r
 = 
NULL
;

171 vﬁ©ûê
≤g_uöt_32
 
row_byãs
;

173 
ty≥_tokí
[16];

174 
width_tokí
[16];

175 
height_tokí
[16];

176 
maxvÆ_tokí
[16];

177 vﬁ©ûê
cﬁ‹_ty≥
 = 1;

178 
ul_width
 = 0, 
ul_Æpha_width
 = 0;

179 
ul_height
 = 0, 
ul_Æpha_height
 = 0;

180 
ul_maxvÆ
 = 0;

181 vﬁ©ûê
≤g_uöt_32
 
width
 = 0, 
height
 = 0;

182 vﬁ©ûê
≤g_uöt_32
 
Æpha_width
 = 0, 
Æpha_height
 = 0;

183 
≤g_uöt_32
 
maxvÆ
;

184 vﬁ©ûê
bô_dïth
 = 0;

185 
ch™√ls
 = 0;

186 
Æpha_dïth
 = 0;

187 
Æpha_¥e£¡
 = 0;

188 
row
, 
cﬁ
;

189 
BOOL
 
øw
, 
Æpha_øw
 = 
FALSE
;

190 #i‡
	`deföed
(
PNG_WRITE_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

191 
BOOL
 
∑cked_bôm≠
 = 
FALSE
;

193 
≤g_uöt_32
 
tmp16
;

194 
i
;

198 
	`gë_tokí
 (
≤m_fûe
, 
ty≥_tokí
,  (type_token));

199 i‡(
ty≥_tokí
[0] != 'P')

201  
FALSE
;

203 i‡((
ty≥_tokí
[1] == '1') || (type_token[1] == '4'))

205 #i‡
	`deföed
(
PNG_WRITE_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

206 
øw
 = (
ty≥_tokí
[1] == '4');

207 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_GRAY
;

208 
	`gë_tokí
 (
≤m_fûe
, 
width_tokí
,  (width_token));

209 
	`ssˇnf
 (
width_tokí
, "%lu", &
ul_width
);

210 
width
 = (
≤g_uöt_32
Ë
ul_width
;

211 
	`gë_tokí
 (
≤m_fûe
, 
height_tokí
,  (height_token));

212 
	`ssˇnf
 (
height_tokí
, "%lu", &
ul_height
);

213 
height
 = (
≤g_uöt_32
Ë
ul_height
;

214 
bô_dïth
 = 1;

215 
∑cked_bôm≠
 = 
TRUE
;

217 
	`Ârötf
 (
°dîr
, "PNM2PNG built without PNG_WRITE_INVERT_SUPPORTEDánd\n");

218 
	`Ârötf
 (
°dîr
, "PNG_WRITE_PACK_SUPPORTED can'tÑead PBM (P1,P4) files\n");

219  
FALSE
;

222 i‡((
ty≥_tokí
[1] == '2') || (type_token[1] == '5'))

224 
øw
 = (
ty≥_tokí
[1] == '5');

225 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_GRAY
;

226 
	`gë_tokí
 (
≤m_fûe
, 
width_tokí
,  (width_token));

227 
	`ssˇnf
 (
width_tokí
, "%lu", &
ul_width
);

228 
width
 = (
≤g_uöt_32
Ë
ul_width
;

229 
	`gë_tokí
 (
≤m_fûe
, 
height_tokí
,  (height_token));

230 
	`ssˇnf
 (
height_tokí
, "%lu", &
ul_height
);

231 
height
 = (
≤g_uöt_32
Ë
ul_height
;

232 
	`gë_tokí
 (
≤m_fûe
, 
maxvÆ_tokí
,  (maxval_token));

233 
	`ssˇnf
 (
maxvÆ_tokí
, "%lu", &
ul_maxvÆ
);

234 
maxvÆ
 = (
≤g_uöt_32
Ë
ul_maxvÆ
;

236 i‡(
maxvÆ
 <= 1)

237 
bô_dïth
 = 1;

238 i‡(
maxvÆ
 <= 3)

239 
bô_dïth
 = 2;

240 i‡(
maxvÆ
 <= 15)

241 
bô_dïth
 = 4;

242 i‡(
maxvÆ
 <= 255)

243 
bô_dïth
 = 8;

244 i‡(
maxvÆ
 <= 65535U)

245 
bô_dïth
 = 16;

247  
FALSE
;

249 i‡((
ty≥_tokí
[1] == '3') || (type_token[1] == '6'))

251 
øw
 = (
ty≥_tokí
[1] == '6');

252 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

253 
	`gë_tokí
 (
≤m_fûe
, 
width_tokí
,  (width_token));

254 
	`ssˇnf
 (
width_tokí
, "%lu", &
ul_width
);

255 
width
 = (
≤g_uöt_32
Ë
ul_width
;

256 
	`gë_tokí
 (
≤m_fûe
, 
height_tokí
,  (height_token));

257 
	`ssˇnf
 (
height_tokí
, "%lu", &
ul_height
);

258 
height
 = (
≤g_uöt_32
Ë
ul_height
;

259 
	`gë_tokí
 (
≤m_fûe
, 
maxvÆ_tokí
,  (maxval_token));

260 
	`ssˇnf
 (
maxvÆ_tokí
, "%lu", &
ul_maxvÆ
);

261 
maxvÆ
 = (
≤g_uöt_32
Ë
ul_maxvÆ
;

262 i‡(
maxvÆ
 <= 1)

263 
bô_dïth
 = 1;

264 i‡(
maxvÆ
 <= 3)

265 
bô_dïth
 = 2;

266 i‡(
maxvÆ
 <= 15)

267 
bô_dïth
 = 4;

268 i‡(
maxvÆ
 <= 255)

269 
bô_dïth
 = 8;

270 i‡(
maxvÆ
 <= 65535U)

271 
bô_dïth
 = 16;

273  
FALSE
;

277  
FALSE
;

282 i‡(
Æpha
)

284 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

285 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_GRAY_ALPHA
;

286 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

287 
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB_ALPHA
;

289 
	`gë_tokí
 (
Æpha_fûe
, 
ty≥_tokí
,  (type_token));

290 i‡(
ty≥_tokí
[0] != 'P')

292  
FALSE
;

294 i‡((
ty≥_tokí
[1] == '2') || (type_token[1] == '5'))

296 
Æpha_øw
 = (
ty≥_tokí
[1] == '5');

297 
	`gë_tokí
 (
Æpha_fûe
, 
width_tokí
,  (width_token));

298 
	`ssˇnf
 (
width_tokí
, "%lu", &
ul_Æpha_width
);

299 
Æpha_width
 = (
≤g_uöt_32
Ë
ul_Æpha_width
;

300 i‡(
Æpha_width
 !
width
)

301  
FALSE
;

302 
	`gë_tokí
 (
Æpha_fûe
, 
height_tokí
,  (height_token));

303 
	`ssˇnf
 (
height_tokí
, "%lu", &
ul_Æpha_height
);

304 
Æpha_height
 = (
≤g_uöt_32
Ë
ul_Æpha_height
;

305 i‡(
Æpha_height
 !
height
)

306  
FALSE
;

307 
	`gë_tokí
 (
Æpha_fûe
, 
maxvÆ_tokí
,  (maxval_token));

308 
	`ssˇnf
 (
maxvÆ_tokí
, "%lu", &
ul_maxvÆ
);

309 
maxvÆ
 = (
≤g_uöt_32
Ë
ul_maxvÆ
;

310 i‡(
maxvÆ
 <= 1)

311 
Æpha_dïth
 = 1;

312 i‡(
maxvÆ
 <= 3)

313 
Æpha_dïth
 = 2;

314 i‡(
maxvÆ
 <= 15)

315 
Æpha_dïth
 = 4;

316 i‡(
maxvÆ
 <= 255)

317 
Æpha_dïth
 = 8;

318 i‡(
maxvÆ
 <= 65535U)

319 
Æpha_dïth
 = 16;

321  
FALSE
;

322 i‡(
Æpha_dïth
 !
bô_dïth
)

323  
FALSE
;

327  
FALSE
;

332 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

333 
ch™√ls
 = 1;

334 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

335 
ch™√ls
 = 2;

336 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

337 
ch™√ls
 = 3;

338 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

339 
ch™√ls
 = 4;

342 
ch™√ls
 = 0;

345 
Æpha_¥e£¡
 = (
ch™√ls
 - 1) % 2;

347 #i‡
	`deföed
(
PNG_WRITE_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

348 i‡(
∑cked_bôm≠
)

351 
row_byãs
 = (
width
 * 
ch™√ls
 * 
bô_dïth
 + 7) / 8;

357 
row_byãs
 = 
width
 * 
ch™√ls
 * ((
bô_dïth
 <= 8) ? 1 : 2);

360 i‡((
row_byãs
 == 0) ||

361 ((
size_t
Ë
height
 > (size_tË(-1Ë/ (size_tË
row_byãs
))

364  
FALSE
;

366 i‡((
≤g_pixñs
 = (
≤g_byã
 *)

367 
	`mÆloc
 ((
size_t
Ë
row_byãs
 * (size_tË
height
)Ë=
NULL
)

370  
FALSE
;

374 
pix_±r
 = 
≤g_pixñs
;

376 
row
 = 0;Ñow < (Ë
height
;Ñow++)

378 #i‡
	`deföed
(
PNG_WRITE_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

379 i‡(
∑cked_bôm≠
)

381 
i
 = 0; i < (Ë
row_byãs
; i++)

384 *
pix_±r
++ = 
	`gë_d©a
 (
≤m_fûe
, 8);

390 
cﬁ
 = 0; cﬁ < (Ë
width
; col++)

392 
i
 = 0; i < (
ch™√ls
 - 
Æpha_¥e£¡
); i++)

394 i‡(
øw
)

396 *
pix_±r
++ = 
	`gë_d©a
 (
≤m_fûe
, 
bô_dïth
);

400 i‡(
bô_dïth
 <= 8)

402 *
pix_±r
++ = 
	`gë_vÆue
 (
≤m_fûe
, 
bô_dïth
);

406 
tmp16
 = 
	`gë_vÆue
 (
≤m_fûe
, 
bô_dïth
);

407 *
pix_±r
 = (
≤g_byã
Ë((
tmp16
 >> 8) & 0xFF);

408 
pix_±r
++;

409 *
pix_±r
 = (
≤g_byã
Ë(
tmp16
 & 0xFF);

410 
pix_±r
++;

415 i‡(
Æpha
)

417 i‡(
Æpha_øw
)

419 *
pix_±r
++ = 
	`gë_d©a
 (
Æpha_fûe
, 
Æpha_dïth
);

423 i‡(
Æpha_dïth
 <= 8)

425 *
pix_±r
++ = 
	`gë_vÆue
 (
Æpha_fûe
, 
bô_dïth
);

429 
tmp16
 = 
	`gë_vÆue
 (
Æpha_fûe
, 
bô_dïth
);

430 *
pix_±r
++ = (
≤g_byã
Ë((
tmp16
 >> 8) & 0xFF);

431 *
pix_±r
++ = (
≤g_byã
Ë(
tmp16
 & 0xFF);

440 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
 (
	`≤g_gë_lib≤g_vî
(
NULL
),

441 
NULL
, NULL, NULL);

442 i‡(!
≤g_±r
)

444 
	`‰ì
 (
≤g_pixñs
);

445  
FALSE
;

447 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
 (
≤g_±r
);

448 i‡(!
öfo_±r
)

450 
	`≤g_de°roy_wrôe_°ru˘
 (&
≤g_±r
, 
NULL
);

451 
	`‰ì
 (
≤g_pixñs
);

452  
FALSE
;

455 #i‡
	`deföed
(
PNG_WRITE_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

456 i‡(
∑cked_bôm≠
 =
TRUE
)

458 
	`≤g_£t_∑ckög
 (
≤g_±r
);

459 
	`≤g_£t_övît_m⁄o
 (
≤g_±r
);

463 i‡(
	`£tjmp
 (
	`≤g_jmpbuf
 (
≤g_±r
)))

465 
	`≤g_de°roy_wrôe_°ru˘
 (&
≤g_±r
, &
öfo_±r
);

466 
	`‰ì
 (
≤g_pixñs
);

467  
FALSE
;

471 
	`≤g_öô_io
 (
≤g_±r
, 
≤g_fûe
);

474 
	`≤g_£t_IHDR
 (
≤g_±r
, 
öfo_±r
, 
width
, 
height
, 
bô_dïth
, 
cﬁ‹_ty≥
,

475 (!
öãæa˚
Ë? 
PNG_INTERLACE_NONE
 : 
PNG_INTERLACE_ADAM7
,

476 
PNG_COMPRESSION_TYPE_BASE
, 
PNG_FILTER_TYPE_BASE
);

479 
	`≤g_wrôe_öfo
 (
≤g_±r
, 
öfo_±r
);

482 i‡(
row_poöãrs
 =
NULL
)

484 i‡((
row_poöãrs
 = (
≤g_byã
 **)

485 
	`mÆloc
 (
height
 *  (
≤g_byã
 *))Ë=
NULL
)

487 
	`≤g_de°roy_wrôe_°ru˘
 (&
≤g_±r
, &
öfo_±r
);

488 
	`‰ì
 (
≤g_pixñs
);

489  
FALSE
;

494 
i
 = 0; i < (Ë
height
; i++)

495 
row_poöãrs
[
i
] = 
≤g_pixñs
 + i * 
row_byãs
;

498 
	`≤g_wrôe_image
 (
≤g_±r
, 
row_poöãrs
);

501 
	`≤g_wrôe_íd
 (
≤g_±r
, 
öfo_±r
);

504 
	`≤g_de°roy_wrôe_°ru˘
 (&
≤g_±r
, &
öfo_±r
);

506 i‡(
row_poöãrs
 !
NULL
)

507 
	`‰ì
 (
row_poöãrs
);

508 i‡(
≤g_pixñs
 !
NULL
)

509 
	`‰ì
 (
≤g_pixñs
);

511  
TRUE
;

512 
	}
}

518 
	$gë_tokí
 (
FILE
 *
≤m_fûe
, *
tokí_buf
, 
size_t
 
tokí_buf_size
)

520 
size_t
 
i
 = 0;

521 
ªt
;

526 
ªt
 = 
	`fgëc
 (
≤m_fûe
);

527 i‡(
ªt
 == '#')

532 
ªt
 = 
	`fgëc
 (
≤m_fûe
);

534 (
ªt
 !'\n'Ë&& (ªà!'\r'Ë&& (ªà!
EOF
));

536 i‡(
ªt
 =
EOF
) ;

537 
tokí_buf
[
i
] = (Ë
ªt
;

539 (
ªt
 == '\n') || (ret == '\r') || (ret == ' '));

544 
ªt
 = 
	`fgëc
 (
≤m_fûe
);

545 i‡(
ªt
 =
EOF
) ;

546 i‡(++
i
 =
tokí_buf_size
 - 1) ;

547 
tokí_buf
[
i
] = (Ë
ªt
;

549 (
ªt
 != '\n') && (ret != '\r') && (ret != ' '));

551 
tokí_buf
[
i
] = '\0';

554 
	}
}

562 
≤g_uöt_32
 
	$gë_d©a
 (
FILE
 *
≤m_fûe
, 
dïth
)

564 
bôs_À·
 = 0;

565 
ﬁd_vÆue
 = 0;

566 
mask
 = 0;

567 
i
;

568 
≤g_uöt_32
 
ªt_vÆue
;

570 i‡(
mask
 == 0)

571 
i
 = 0; i < 
dïth
; i++)

572 
mask
 = (mask >> 1) | 0x80;

574 i‡(
bôs_À·
 <= 0)

576 
ﬁd_vÆue
 = 
	`fgëc
 (
≤m_fûe
);

577 
bôs_À·
 = 8;

580 
ªt_vÆue
 = 
ﬁd_vÆue
 & 
mask
;

581 
i
 = 1; i < (8 / 
dïth
); i++)

582 
ªt_vÆue
 =Ñë_vÆuê|| (ªt_vÆuê>> 
dïth
);

584 
ﬁd_vÆue
 = (ﬁd_vÆuê<< 
dïth
) & 0xFF;

585 
bôs_À·
 -
dïth
;

587  
ªt_vÆue
;

588 
	}
}

595 
≤g_uöt_32
 
	$gë_vÆue
 (
FILE
 *
≤m_fûe
, 
dïth
)

597 
≤g_uöt_32
 
mask
 = 0;

598 
tokí
[16];

599 
ul_ªt_vÆue
;

600 
≤g_uöt_32
 
ªt_vÆue
;

601 
i
 = 0;

603 i‡(
mask
 == 0)

604 
i
 = 0; i < 
dïth
; i++)

605 
mask
 = (mask << 1) | 0x01;

607 
	`gë_tokí
 (
≤m_fûe
, 
tokí
,  (token));

608 
	`ssˇnf
 (
tokí
, "%lu", &
ul_ªt_vÆue
);

609 
ªt_vÆue
 = (
≤g_uöt_32
Ë
ul_ªt_vÆue
;

611 
ªt_vÆue
 &
mask
;

613 i‡(
dïth
 < 8)

614 
i
 = 0; i < (8 / 
dïth
); i++)

615 
ªt_vÆue
 = (ªt_vÆuê<< 
dïth
) ||Ñet_value;

617  
ªt_vÆue
;

618 
	}
}

	@contrib/powerpc-vsx/linux.c

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~"≤g.h
"

26 #i‚de‡
MAXLINE


27 
	#MAXLINE
 1024

	)

31 
	$≤g_have_vsx
(
≤g_°ru˘p
 
≤g_±r
)

33 
FILE
 *
f
;

35 c⁄° *
°rög
 = "altivec supported";

36 
öput
[
MAXLINE
];

37 *
tokí
 = 
NULL
;

39 
	`PNG_UNUSED
(
≤g_±r
)

41 
f
 = 
	`f›í
("/proc/cpuinfo", "r");

42 i‡(
f
 !
NULL
)

44 
	`mem£t
(
öput
,0,
MAXLINE
);

45 
	`fgës
(
öput
,
MAXLINE
,
f
Ë!
NULL
)

47 
tokí
 = 
	`°r°r
(
öput
,
°rög
);

48 if(
tokí
 !
NULL
)

52 #ifde‡
PNG_WARNINGS_SUPPORTED


54 
	`≤g_w¨nög
(
≤g_±r
, "/proc/cpuinfo open failed");

57 
	}
}

	@contrib/powerpc-vsx/linux_aux.c

20 
	~"sys/auxv.h
"

21 
	~"≤g.h
"

24 
	$≤g_have_vsx
(
≤g_°ru˘p
 
≤g_±r
)

26 
auxv
 = 
	`gëauxvÆ
(
AT_HWCAP
);

28 
	`PNG_UNUSED
(
≤g_±r
)

30 if(
auxv
 & (
PPC_FEATURE_HAS_ALTIVEC
|
PPC_FEATURE_HAS_VSX
))

34 
	}
}

	@contrib/tools/checksum-icc.c

14 
	~<°dio.h
>

16 
	~<zlib.h
>

19 
	$ªad_⁄e_fûe
(
FILE
 *
ù
, c⁄° *
«me
)

21 
uL⁄g
 
Àngth
 = 0;

22 
uL⁄g
 
a32
 = 
	`adÀr32
(0, 
NULL
, 0);

23 
uL⁄g
 
c32
 = 
	`¸c32
(0, 
NULL
, 0);

24 
Byã
 
hódî
[132];

28 
ch
 = 
	`gëc
(
ù
);

29 
Byã
 
b
;

31 i‡(
ch
 =
EOF
) ;

33 
b
 = (
Byã
)
ch
;

35 i‡(
Àngth
 <  
hódî
)

36 
hódî
[
Àngth
] = 
b
;

38 ++
Àngth
;

39 
a32
 = 
	`adÀr32
◊32, &
b
, 1);

40 
c32
 = 
	`¸c32
(c32, &
b
, 1);

43 i‡(
	`„º‹
(
ù
))

47 
	`¥ötf
("PNG_ICC_CHECKSUM(0x%8.8lx, 0x%8.8lx,\n PNG_MD5("

51 ()
a32
, ()
c32
,

52 
hódî
[84], header[85], header[86], header[87],

53 
hódî
[88], header[89], header[90], header[91],

54 
hódî
[92], header[93], header[94], header[95],

55 
hódî
[96], header[97], header[98], header[99],

56 
	#u16
(
x
Ë(
hódî
[x] * 256 + hódî[x+1])

	)

57 
	#u32
(
x
Ë(
	`u16
(xË* 65536 + u16(x+2))

	)

58 
	`u32
(64), 
	`u16
(24), u16(26), u16(28), u16(30), u16(32), u16(34),

59 ()
Àngth
, 
«me
);

62 
	}
}

64 
	$maö
(
¨gc
, **
¨gv
)

66 
îr
 = 0;

68 
	`¥ötf
("/*ádler32, crc32, MD5[16], intent, date,Üength, file-name */\n");

70 i‡(
¨gc
 > 1)

72 
i
;

74 
i
=1; i<
¨gc
; ++i)

76 
FILE
 *
ù
 = 
	`f›í
(
¨gv
[
i
], "rb");

78 i‡(
ù
 =
NULL
 || !
	`ªad_⁄e_fûe
(ù, 
¨gv
[
i
]))

80 
îr
 = 1;

81 
	`≥º‹
(
¨gv
[
i
]);

82 
	`Ârötf
(
°dîr
, "%s:ÑódÉº‹\n", 
¨gv
[
i
]);

83 
	`¥ötf
("/* ERROR: %†*/\n", 
¨gv
[
i
]);

86 ()
	`f˛o£
(
ù
);

92 i‡(!
	`ªad_⁄e_fûe
(
°dö
, "-"))

94 
îr
 = 1;

95 
	`≥º‹
("stdin");

96 
	`Ârötf
(
°dîr
, "stdin:ÑeadÉrror\n");

97 
	`¥ötf
("/* ERROR: stdin */\n");

101  
îr
;

102 
	}
}

	@contrib/tools/cvtcolor.c

13 
	#_ISOC99_SOURCE
 1

	)

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<m©h.h
>

18 
	~<°dio.h
>

20 
	~<„nv.h
>

22 
	~"sRGB.h
"

25 
	$ußge
(c⁄° *
¥og
)

27 
	`Ârötf
(
°dîr
,

29 
¥og
,Örog);

30 
	`exô
(1);

31 
	}
}

34 
	$comp⁄ít
(c⁄° *
¥og
, c⁄° *
¨g
, 
issRGB
)

36 *
ï
;

37 
c
 = 
	`°πoul
(
¨g
, &
ï
, 0);

39 i‡(
ï
 <
¨g
 || *ï || 
c
 > 65535 || (
issRGB
 && c > 255))

41 
	`Ârötf
(
°dîr
, "%s: %s: invÆid comp⁄íàvÆuê(%lu)\n", 
¥og
, 
¨g
, 
c
);

42 
	`ußge
(
¥og
);

45  
c
;

46 
	}
}

49 
	$maö
(
¨gc
, c⁄° **
¨gv
)

51 c⁄° *
¥og
 = *
¨gv
++;

52 
to_löór
 = 0, 
to_gøy
 = 0, 
to_cﬁ‹
 = 0;

53 
ch™√ls
 = 0;

54 
c
[4];

60 
	`„£åound
(
FE_TONEAREST
);

62 
c
[3] = c[2] = c[1] = c[0] = 0;

64 --
¨gc
 > 0 && **
¨gv
 == '-')

66 c⁄° *
¨g
 = 1+*
¨gv
++;

68 i‡(
	`°rcmp
(
¨g
, "sRGB") == 0)

69 
to_löór
 = 0;

71 i‡(
	`°rcmp
(
¨g
, "linear") == 0)

72 
to_löór
 = 1;

74 i‡(
	`°rcmp
(
¨g
, "gray") == 0)

75 
to_gøy
 = 1, 
to_cﬁ‹
 = 0;

77 i‡(
	`°rcmp
(
¨g
, "color") == 0)

78 
to_gøy
 = 0, 
to_cﬁ‹
 = 1;

81 
	`ußge
(
¥og
);

84 
¨gc
)

87 
	`ußge
(
¥og
);

91 
c
[3] = 
	`comp⁄ít
(
¥og
, 
¨gv
[3], 
to_löór
);

92 ++
ch™√ls
;

94 
c
[2] = 
	`comp⁄ít
(
¥og
, 
¨gv
[2], 
to_löór
);

95 ++
ch™√ls
;

97 
c
[1] = 
	`comp⁄ít
(
¥og
, 
¨gv
[1], 
to_löór
);

98 ++
ch™√ls
;

100 
c
[0] = 
	`comp⁄ít
(
¥og
, 
¨gv
[0], 
to_löór
);

101 ++
ch™√ls
;

105 i‡(
to_löór
)

107 
i
;

108 
comp⁄íts
 = 
ch™√ls
;

110 i‡((
comp⁄íts
 & 1) == 0)

111 --
comp⁄íts
;

113 
i
=0; i<
comp⁄íts
; ++iË
c
[i] = 
	`löór_‰om_sRGB
(c[i] / 255);

114 i‡(
comp⁄íts
 < 
ch™√ls
)

115 
c
[
comp⁄íts
] = c[components] / 255;

120 
i
;

121 
i
=0; i<4; ++iË
c
[i] /= 65535;

123 i‡((
ch™√ls
 & 1) == 0)

125 
Æpha
 = 
c
[
ch™√ls
-1];

127 i‡(
Æpha
 > 0)

128 
i
=0; i<
ch™√ls
-1; ++iË
c
[i] /
Æpha
;

130 
i
=0; i<
ch™√ls
-1; ++iË
c
[i] = 1;

134 i‡(
to_gøy
)

136 i‡(
ch™√ls
 < 3)

138 
	`Ârötf
(
°dîr
, "%s:Åoo few channels (%d) for -gray\n",

139 
¥og
, 
ch™√ls
);

140 
	`ußge
(
¥og
);

143 
c
[0] = 
	`Y‰omRGB
(c[0], c[1], c[2]);

144 
ch™√ls
 -= 2;

147 i‡(
to_cﬁ‹
)

149 i‡(
ch™√ls
 > 2)

151 
	`Ârötf
(
°dîr
, "%s:Åoo many channels (%d) for -color\n",

152 
¥og
, 
ch™√ls
);

153 
	`ußge
(
¥og
);

156 
c
[3] = c[1];

157 
c
[2] = c[1] = c[0];

160 i‡(
to_löór
)

162 
i
;

163 i‡((
ch™√ls
 & 1) == 0)

165 
Æpha
 = 
c
[
ch™√ls
-1];

166 
i
=0; i<
ch™√ls
-1; ++iË
c
[i] *
Æpha
;

169 
i
=0; i<
ch™√ls
; ++iË
c
[i] = 
	`√¨byöt
(c[i] * 65535);

174 
i
 = (
ch™√ls
+1)&~1;

175 --
i
 >= 0)

176 
c
[
i
] = 
	`sRGB_‰om_löór
(c[i]);

178 
i
=0; i<
ch™√ls
; ++iË
c
[i] = 
	`√¨byöt
(c[i] * 255);

182 
i
;

183 
i
=0; i<
ch™√ls
; ++iË
	`¥ötf
(" %g", 
c
[i]);

185 
	`¥ötf
("\n");

188 
	}
}

	@contrib/tools/genpng.c

72 
	~<°ddef.h
>

73 
	~<°dlib.h
>

74 
	~<°rög.h
>

75 
	~<°dio.h
>

76 
	~<m©h.h
>

81 
	~"../../≤g.h
"

83 #i‡
deföed
(
PNG_SIMPLIFIED_WRITE_SUPPORTED
Ë&& deföed(
PNG_STDIO_SUPPORTED
)

85 c⁄° 
	scﬁ‹


87 c⁄° *
	m«me
;

88 
	mªd
;

89 
	mgªí
;

90 
	mblue
;

91 } 
	gcﬁ‹s
[] =

109 
	#cﬁ‹_cou¡
 (( 
cﬁ‹s
)/( cﬁ‹s[0]))

	)

111 c⁄° 
cﬁ‹
 *

112 
	$cﬁ‹_of
(c⁄° *
¨g
)

114 
icﬁ‹
 = 
cﬁ‹_cou¡
;

116 --
icﬁ‹
 >= 0)

118 i‡(
	`°rcmp
(
cﬁ‹s
[
icﬁ‹
].
«me
, 
¨g
) == 0)

119  
cﬁ‹s
+
icﬁ‹
;

122 
	`Ârötf
(
°dîr
, "gí≤g: invÆid cﬁ‹ %s\n", 
¨g
);

123 
	`exô
(1);

124 
	}
}

127 
	$width_of
(c⁄° *
¨g
)

129 i‡(
	`°rcmp
(
¨g
, "filled") == 0)

134 *
ï
 = 
NULL
;

135 
w
 = 
	`°πod
(
¨g
, &
ï
);

137 i‡(
ï
 !
NULL
 && *ï =0 && 
w
 > 0)

138  
w
;

141 
	`Ârötf
(
°dîr
, "gí≤g: invÆidÜöêwidth %s\n", 
¨g
);

142 
	`exô
(1);

143 
	}
}

146 
	$co‹dö©e_of
(c⁄° *
¨g
)

148 *
ï
 = 
NULL
;

149 
w
 = 
	`°πod
(
¨g
, &
ï
);

151 i‡(
ï
 !
NULL
 && *ep == 0)

152  
w
;

154 
	`Ârötf
(
°dîr
, "gí≤g: invÆid co‹dö©êvÆuê%s\n", 
¨g
);

155 
	`exô
(1);

156 
	}
}

158 
	g¨g
;

160 (*
	tsh≠e_‚_±r
)(c⁄° 
	t¨g
 *¨g, 
	tx
, 
	ty
);

171 
	#OUTSIDE
 (-1)

	)

172 
	#INSIDE
 (1)

	)

174 
	s¨g


176 c⁄° 
cﬁ‹
 *color;

177 
sh≠e_‚_±r
 
öside_‚
;

178 
sh≠e_‚_±r
 
check_‚
;

179 
width
;

180 
x1
, 
y1
, 
x2
, 
y2
;

231 
sˇÀ
=10

232 
su≥r
=8

233 
deföe
 
	$bicubic
(
x
) {

234 i‡(
x
 <= 1)  (1.5*x - 2.5)*x*x + 1;

235 i‡(
x
 < 2)  (((2.5 - 0.5*x)*x - 4)*x + 2);

237 
	}
}

238 
deföe
 
	$sum
(
x
) {

239 autÿ
s
;

240 
s
 = 0;

241 
x
 < 2*
su≥r
) {

242 
s
 = s + 
	`bicubic
(
x
/
su≥r
);

243 
x
 = x + 1;

245  
s
;

246 
	}
}

247 
deföe
 
	$ªsu…s
(
x
) {

248 autÿ
b
, 
s
;

249 
b
 = 
	`bicubic
(
x
/
su≥r
);

250 
s
 = 
	`sum
(
x
);

252 
¥öt
 " /*", 
x
, "*/ { ", 
b
, ", ", 
s
, " }";

254 
	}
}

255 
	gx
=0

256 
x
<2*
su≥r
) {

257 
x
 = x + 
ªsu…s
(x)

258 i‡(
x
 < 2*
su≥r
Ë
¥öt
 ","

259 
¥öt
 "\n"

261 
	gquô


264 
	#BICUBIC1
(
x
Ë ((1.5*(x)* - 2.5)*(x)*(xË+ 1)

	)

265 
	#BICUBIC2
(
x
Ë (((2.5 - 0.5*(x))*(xË- 4)*(xË+ 2)

	)

266 
	#FILTER_WEIGHT
 9

	)

267 
	#FILTER_WIDTH
 2

	)

268 
	#FILTER_STEPS
 8

	)

270 
	gbicubic
[16][2] =

295 
	$Æpha_ˇlc
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

301 
¨g
->
	`check_‚
◊rg, 
x
, 
y
))

303 
OUTSIDE
:

306 
INSIDE
:

311 
dy
;

312 
Æpha
 = 0;

314 
	#FILTER_D
 (
FILTER_WIDTH
*
FILTER_STEPS
-1)

	)

315 
dy
=-
FILTER_D
; dy<=FILTER_D; ++dy)

317 
wy
 = 
bicubic
[
	`abs
(
dy
)][0];

319 i‡(
wy
 != 0)

321 
Æphay
 = 0;

322 
dx
;

324 
dx
=-
FILTER_D
; dx<=FILTER_D; ++dx)

326 
wx
 = 
bicubic
[
	`abs
(
dx
)][0];

328 i‡(
wx
 !0 && 
¨g
->
	`öside_‚
◊rg, 
x
+
dx
/16, 
y
+
dy
/16))

329 
Æphay
 +
wx
;

332 
Æpha
 +
wy
 * 
Æphay
;

337  
Æpha
 / (
FILTER_WEIGHT
*FILTER_WEIGHT);

340 
	}
}

348 
	$squ¨e_check
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
)

362  ((
x
<
x1
Ë^ (x<
x2
)Ë& ((
y
<
y1
Ë^ (y<
y2
));

363 
	}
}

366 
	$öside_squ¨e_fûÀd
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

368  
	`squ¨e_check
(
x
, 
y
, 
¨g
->
x1
,árg->
y1
,árg->
x2
,árg->
y2
);

369 
	}
}

372 
	$squ¨e_check_löe
(c⁄° 
¨g
 *¨g, 
x
, 
y
, 
w
)

386 
cx
 = (
¨g
->
x1
+¨g->
x2
)/2;

387 
wx
 = 
	`Ábs
(
¨g
->
x1
-¨g->
x2
)/2;

388 
cy
 = (
¨g
->
y1
+¨g->
y2
)/2;

389 
wy
 = 
	`Ábs
(
¨g
->
y1
-¨g->
y2
)/2;

391 i‡(
	`squ¨e_check
(
x
, 
y
, 
cx
-
wx
-
w
, 
cy
-
wy
-w, cx+wx+w, cy+wy+w))

396 
wx
 -
w
;

397 
wy
 -
w
;

398 i‡(
wx
 > 0 && 
wy
 > 0 && 
	`squ¨e_check
(
x
, 
y
, 
cx
-wx, 
cy
-wy, cx+wx, cy+wy))

399  
INSIDE
;

404  
OUTSIDE
;

405 
	}
}

408 
	$check_squ¨e_fûÀd
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

415  
	`squ¨e_check_löe
(
¨g
, 
x
, 
y
, 
FILTER_WIDTH
);

416 
	}
}

419 
	$öside_squ¨e
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

424  
	`squ¨e_check_löe
(
¨g
, 
x
, 
y
,árg->
width
/2) == 0;

425 
	}
}

428 
	$check_squ¨e
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

432 
w
 = 
¨g
->
width
/2;

434 i‡(
	`squ¨e_check_löe
(
¨g
, 
x
, 
y
, 
w
+
FILTER_WIDTH
) == 0)

439 
w
 -
FILTER_WIDTH
;

441 i‡(
w
 > 0 && 
	`squ¨e_check_löe
(
¨g
, 
x
, 
y
, w) == 0)

442  
INSIDE
;

449  
OUTSIDE
;

450 
	}
}

460 
	$cú˛e_check
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
)

462 i‡(
	`squ¨e_check
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
))

465 c⁄° 
cx
 = (
x1
 + 
x2
)/2;

466 c⁄° 
cy
 = (
y1
 + 
y2
)/2;

467 c⁄° 
dx
 = 
x1
 - 
x2
;

468 c⁄° 
dy
 = 
y1
 - 
y2
;

470 
x
 = (x - 
cx
)/
dx
;

471 
y
 = (y - 
cy
)/
dy
;

476  
x
*x+
y
*y < .25;

480 
	}
}

483 
	$öside_cú˛e_fûÀd
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

485  
	`cú˛e_check
(
x
, 
y
, 
¨g
->
x1
,árg->
y1
,árg->
x2
,árg->
y2
);

486 
	}
}

489 
	$cú˛e_check_löe
(c⁄° 
¨g
 *¨g, 
x
, 
y
, 
w
)

495 
cx
 = (
¨g
->
x1
+¨g->
x2
)/2;

496 
wx
 = 
	`Ábs
(
¨g
->
x1
-¨g->
x2
)/2;

497 
cy
 = (
¨g
->
y1
+¨g->
y2
)/2;

498 
wy
 = 
	`Ábs
(
¨g
->
y1
-¨g->
y2
)/2;

500 i‡(
	`cú˛e_check
(
x
, 
y
, 
cx
-
wx
-
w
, 
cy
-
wy
-w, cx+wx+w, cy+wy+w))

505 
wx
 -
w
;

506 
wy
 -
w
;

507 i‡(
wx
 > 0 && 
wy
 > 0 && 
	`cú˛e_check
(
x
, 
y
, 
cx
-wx, 
cy
-wy, cx+wx, cy+wy))

508  
INSIDE
;

513  
OUTSIDE
;

514 
	}
}

517 
	$check_cú˛e_fûÀd
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

519  
	`cú˛e_check_löe
(
¨g
, 
x
, 
y
, 
FILTER_WIDTH
);

520 
	}
}

523 
	$öside_cú˛e
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

525  
	`cú˛e_check_löe
(
¨g
, 
x
, 
y
,árg->
width
/2) == 0;

526 
	}
}

529 
	$check_cú˛e
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

532 
w
 = 
¨g
->
width
/2;

534 i‡(
	`cú˛e_check_löe
(
¨g
, 
x
, 
y
, 
w
+
FILTER_WIDTH
) == 0)

536 
w
 -
FILTER_WIDTH
;

538 i‡(
w
 > 0 && 
	`cú˛e_check_löe
(
¨g
, 
x
, 
y
, w) == 0)

539  
INSIDE
;

546  
OUTSIDE
;

547 
	}
}

554 
	$löe_check
(
x
, 
y
, 
x1
, 
y1
, 
x2
, 
y2
,

555 
w
, 
ex∑nd
)

558 
lx
 = 
x2
 - 
x1
;

559 
ly
 = 
y2
 - 
y1
;

560 
Àn2
 = 
lx
*lx + 
ly
*ly;

561 
¸oss
, 
dŸ
;

563 
x
 -
x1
;

564 
y
 -
y1
;

571 
¸oss
 = 
x
 * 
ly
 - 
y
 * 
lx
;

579 i‡(
¸oss
*¸os†>(
w
+
ex∑nd
)*(w+ex∑nd)*
Àn2
)

587 
dŸ
 = 
lx
 * 
x
 + 
ly
 * 
y
;

597  
dŸ
 > -
ex∑nd
 && dŸ < 
Àn2
+expand;

598 
	}
}

601 
	$öside_löe
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

603  
	`löe_check
(
x
, 
y
, 
¨g
->
x1
,árg->
y1
,árg->
x2
,árg->
y2
,árg->
width
/2, 0);

604 
	}
}

607 
	$check_löe
(c⁄° 
¨g
 *¨g, 
x
, 
y
)

612 i‡(
	`löe_check
(
x
, 
y
, 
¨g
->
x1
,árg->
y1
,árg->
x2
,árg->
y2
,árg->
width
/2,

613 
FILTER_WIDTH
))

618 i‡(
¨g
->
width
 > 2*
FILTER_WIDTH
 &&

619 
	`löe_check
(
x
, 
y
, 
¨g
->
x1
,árg->
y1
,árg->
x2
,árg->
y2
,árg->
width
/2,

620 -
FILTER_WIDTH
))

621  
INSIDE
;

626  
OUTSIDE
;

627 
	}
}

631 c⁄° *
	m«me
;

632 
sh≠e_‚_±r
 
	mfun˘i⁄
[2 ][2];

633 
	#FN_INSIDE
 0

	)

634 
	#FN_CHECK
 1

	)

635 } 
	gsh≠e_defs
[] =

638 { { 
öside_squ¨e_fûÀd
, 
check_squ¨e_fûÀd
 },

639 { 
öside_squ¨e
, 
check_squ¨e
 } }

642 { { 
öside_cú˛e_fûÀd
, 
check_cú˛e_fûÀd
 },

643 { 
öside_cú˛e
, 
check_cú˛e
 } }

646 { { 
NULL
, NULL },

647 { 
öside_löe
, 
check_löe
 } }

651 
	#sh≠e_cou¡
 (( 
sh≠e_defs
)/( sh≠e_defs[0]))

	)

653 
sh≠e_‚_±r


654 
	$sh≠e_of
(c⁄° *
¨g
, 
width
, 
f
)

656 
i
;

658 
i
=0; i<
sh≠e_cou¡
; ++iËi‡(
	`°rcmp
(
sh≠e_defs
[i].
«me
, 
¨g
) == 0)

660 
sh≠e_‚_±r
 
‚
 = 
sh≠e_defs
[
i
].
fun˘i⁄
[
width
 !0][
f
];

662 i‡(
‚
 !
NULL
)

663  
‚
;

665 
	`Ârötf
(
°dîr
, "genpng: %s %sÇot supported\n",

666 
width
 =0 ? "fûÀd" : "unfûÀd", 
¨g
);

667 
	`exô
(1);

670 
	`Ârötf
(
°dîr
, "gí≤g: %s:ÇŸá vÆid sh≠ê«me\n", 
¨g
);

671 
	`exô
(1);

672 
	}
}

675 
	$∑r£_¨g
(
¨g
 *¨g, c⁄° **
¨gv
 )

678 
¨g
->
cﬁ‹
 = 
	`cﬁ‹_of
(
¨gv
[0]);

679 
¨g
->
width
 = 
	`width_of
(
¨gv
[1]);

680 
¨g
->
öside_‚
 = 
	`sh≠e_of
(
¨gv
[2],árg->
width
, 
FN_INSIDE
);

681 
¨g
->
check_‚
 = 
	`sh≠e_of
(
¨gv
[2],árg->
width
, 
FN_CHECK
);

682 
¨g
->
x1
 = 
	`co‹dö©e_of
(
¨gv
[3]);

683 
¨g
->
y1
 = 
	`co‹dö©e_of
(
¨gv
[4]);

684 
¨g
->
x2
 = 
	`co‹dö©e_of
(
¨gv
[5]);

685 
¨g
->
y2
 = 
	`co‹dö©e_of
(
¨gv
[6]);

686 
	}
}

688 
≤g_uöt_32


689 
	$ªad_wh
(c⁄° *
«me
, c⁄° *
°r
)

692 *
ï
 = 
NULL
;

693 
ul
 = 
	`°πoul
(
°r
, &
ï
, 10);

695 i‡(
ï
 !
NULL
 && *ï =0 && 
ul
 > 0 && ul <= 0x7fffffff)

696  (
≤g_uöt_32
Ë
ul
;

698 
	`Ârötf
(
°dîr
, "gí≤g: %s: invÆidÇumbî %s\n", 
«me
, 
°r
);

699 
	`exô
(1);

700 
	}
}

703 
	$pixñ
(
≤g_uöt_16p
 
p
, 
¨g
 *
¨gs
, 
«rgs
, 
x
, 
y
)

708 
r
=0, 
g
=0, 
b
=0, 
a
=0;

710 --
«rgs
 >0 && 
a
 != 1)

715 c⁄° 
Æpha
 = 
	`Æpha_ˇlc
(
¨gs
+
«rgs
, 
x
, 
y
Ë* (1-
a
);

717 
r
 +
Æpha
 * 
¨gs
[
«rgs
].
cﬁ‹
->
ªd
;

718 
g
 +
Æpha
 * 
¨gs
[
«rgs
].
cﬁ‹
->
gªí
;

719 
b
 +
Æpha
 * 
¨gs
[
«rgs
].
cﬁ‹
->
blue
;

720 
a
 +
Æpha
;

726 i‡(
a
 > 0)

728 i‡(
a
 > 1)

730 i‡(
r
 > 1)Ñ = 1;

731 i‡(
g
 > 1) g = 1;

732 i‡(
b
 > 1) b = 1;

733 
a
 = 1;

737 
p
[0] = (
≤g_uöt_16
Ë
	`round
(
r
 * 65535);

738 
p
[1] = (
≤g_uöt_16
Ë
	`round
(
g
 * 65535);

739 
p
[2] = (
≤g_uöt_16
Ë
	`round
(
b
 * 65535);

740 
p
[3] = (
≤g_uöt_16
Ë
	`round
(
a
 * 65535);

744 
p
[3] =Ö[2] =Ö[1] =Ö[0] = 0;

745 
	}
}

748 
	$maö
(
¨gc
, c⁄° **
¨gv
)

750 
c⁄vît_to_8bô
 = 0;

753 i‡(
¨gc
 > 1 && 
	`°rcmp
(
¨gv
[1], "--8bit") == 0)

754 --
¨gc
, ++
¨gv
, 
c⁄vît_to_8bô
 = 1;

756 i‡(
¨gc
 >= 3)

758 
≤g_uöt_16p
 
buf„r
;

759 
nsh≠es
;

760 
≤g_image
 
image
;

761 
	#max_sh≠es
 256

	)

762 
¨g
 
¨g_li°
[
max_sh≠es
];

767 
	`mem£t
(&
image
, 0,  image);

768 
image
.
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

769 
image
.
›aque
 = 
NULL
;

770 
image
.
width
 = 
	`ªad_wh
("width", 
¨gv
[1]);

771 
image
.
height
 = 
	`ªad_wh
("height", 
¨gv
[2]);

772 
image
.
f‹m©
 = 
PNG_FORMAT_LINEAR_RGB_ALPHA
;

773 
image
.
Êags
 = 0;

774 
image
.
cﬁ‹m≠_íåõs
 = 0;

777 
nsh≠es
=0; 3+7*“sh≠es+1Ë<
¨gc
 &&Çsh≠e†< 
max_sh≠es
;

778 ++
nsh≠es
)

779 
	`∑r£_¨g
(
¨g_li°
+
nsh≠es
, 
¨gv
+3+7*nshapes);

781 i‡(3+7*
nsh≠es
 !
¨gc
)

783 
	`Ârötf
(
°dîr
, "gí≤g: %s:Åoÿm™yárgumíts\n", 
¨gv
[3+7*
nsh≠es
]);

794 i‡(
image
.
height
 > ((
size_t
)(-1))/(8*image.
width
)) {

795 
	`Ârötf
(
°dîr
, "genpng: image buffer would beÅoo big");

801 
buf„r
 = 
	`mÆloc
(
	`PNG_IMAGE_SIZE
(
image
));

803 i‡(
buf„r
 !
NULL
)

805 
≤g_uöt_32
 
y
;

808 
y
=0; y<
image
.
height
; ++y)

810 
≤g_uöt_32
 
x
;

813 
x
=0; x<
image
.
width
; ++x)

814 
	`pixñ
(
buf„r
 + 4*(
x
 + 
y
*
image
.
width
), 
¨g_li°
, 
nsh≠es
, x, y);

818 i‡(
	`≤g_image_wrôe_to_°dio
(&
image
, 
°dout
, 
c⁄vît_to_8bô
,

819 
buf„r
, 0 , 
NULL
 ))

821 
	`‰ì
(
buf„r
);

826 
	`Ârötf
(
°dîr
, "gí≤g: wrôê°dout: %s\n", 
image
.
mesßge
);

828 
	`‰ì
(
buf„r
);

832 
	`Ârötf
(
°dîr
, "genpng: out of memory: %lu bytes\n",

833 ()
	`PNG_IMAGE_SIZE
(
image
));

839 
	`Ârötf
(
°dîr
, "genpng: usage: genpng [--8bit] width height {shape}\n"

880 
	}
}

	@contrib/tools/makesRGB.c

17 
	#_C99_SOURCE
 1

	)

18 
	~<°dio.h
>

19 
	~<m©h.h
>

20 
	~<°dlib.h
>

25 
	~"../../≤g¥iv.h
"

27 
	~"sRGB.h
"

32 
	#≤g_sRGB_èbÀ
 
sRGB_èbÀ


	)

33 
	#≤g_sRGB_ba£
 
sRGB_ba£


	)

34 
	#≤g_sRGB_dñè
 
sRGB_dñè


	)

36 
≤g_uöt_16
 
	g≤g_sRGB_èbÀ
[256];

37 
≤g_uöt_16
 
	g≤g_sRGB_ba£
[512];

38 
≤g_byã
 
	g≤g_sRGB_dñè
[512];

40 c⁄° 
	gmax_öput
 = 255*65535;

43 
	$fsRGB
(
l
)

45  
	`sRGB_‰om_löór
(
l
/
max_öput
);

46 
	}
}

49 
	$sRGB
(
i
)

51  
	`fsRGB
(
i
);

52 
	}
}

55 
	$fövsRGB
(
i
)

57  65535 * 
	`löór_‰om_sRGB
(
i
/255.);

58 
	}
}

60 
≤g_uöt_16


61 
	$övsRGB
(
i
)

63 
x
 = 
	`√¨byöt
(
	`fövsRGB
(
i
));

65 i‡(
x
 > 65535)

67 
	`Ârötf
(
°dîr
, "övsRGB(%uËovîÊow†tÿ%u\n", 
i
, 
x
);

68 
	`exô
(1);

71  (
≤g_uöt_16
)
x
;

72 
	}
}

75 
	$maö
(
¨gc
, **
¨gv
)

77 
i
, 
i16
, 
iba£
;

78 
mö_îr‹
 = 0;

79 
max_îr‹
 = 0;

80 
mö_îr‹16
 = 0;

81 
max_îr‹16
 = 0;

82 
adju°
;

83 
adju°_lo
 = 0.4, 
adju°_hi
 = 0.6, 
adju°_mid
 = 0.5;

84 
ec_lo
 = 0, 
ec_hi
 = 0, 
ec_mid
 = 0;

85 
îr‹_cou¡
 = 0;

86 
îr‹_cou¡16
 = 0;

87 
ã°_⁄ly
 = 0;

89 i‡(
¨gc
 > 1)

90 
ã°_⁄ly
 = 
	`°rcmp
("--ã°", 
¨gv
[1]) == 0;

93 
i
=0; i<256; ++i)

95 
≤g_sRGB_èbÀ
[
i
] = 
	`övsRGB
(i);

103 i‡(
ec_lo
 == 0)

104 
adju°
 = 
adju°_lo
;

106 i‡(
ec_hi
 == 0)

107 
adju°
 = 
adju°_hi
;

109 i‡(
ec_mid
 == 0)

110 
adju°
 = 
adju°_mid
;

112 i‡(
ec_mid
 < 
ec_hi
)

113 
adju°
 = (
adju°_mid
 + 
adju°_hi
)/2;

115 i‡(
ec_mid
 < 
ec_lo
)

116 
adju°
 = (
adju°_mid
 + 
adju°_lo
)/2;

120 
	`Ârötf
(
°dîr
, "nŸÑóched: %u .. %u .. %u\n", 
ec_lo
, 
ec_mid
, 
ec_hi
);

121 
	`exô
(1);

125 
i
=0; i<=511; ++i)

127 
lo
 = 255 * 
	`sRGB
(
i
 << 15);

128 
hi
 = 255 * 
	`sRGB
((
i
+1) << 15);

129 
ˇlc
;

131 
ˇlc
 = 
	`√¨byöt
((
lo
+
adju°
) * 256);

132 i‡(
ˇlc
 > 65535)

134 
	`Ârötf
(
°dîr
, "èbÀ[%d][0]: ovîÊow %08x (%d)\n", 
i
, 
ˇlc
,

135 
ˇlc
);

136 
	`exô
(1);

138 
≤g_sRGB_ba£
[
i
] = 
ˇlc
;

140 
ˇlc
 = 
	`√¨byöt
((
hi
-
lo
) * 32);

141 i‡(
ˇlc
 > 255)

143 
	`Ârötf
(
°dîr
, "èbÀ[%d][1]: ovîÊow %08x (%d)\n", 
i
, 
ˇlc
,

144 
ˇlc
);

145 
	`exô
(1);

147 
≤g_sRGB_dñè
[
i
] = 
ˇlc
;

151 
îr‹_cou¡16
 = 0;

152 
i16
=0; i16 <= 65535; ++i16)

154 
i
 = 255*
i16
;

155 
õxa˘
 = 
	`√¨byöt
(255*
	`sRGB
(
i
));

156 
iˇlc
 = 
	`PNG_sRGB_FROM_LINEAR
(
i
);

158 i‡(
iˇlc
 !
õxa˘
)

159 ++
îr‹_cou¡16
;

163 i‡(
ec_lo
 == 0)

164 
ec_lo
 = 
îr‹_cou¡16
;

166 i‡(
ec_hi
 == 0)

167 
ec_hi
 = 
îr‹_cou¡16
;

169 i‡(
ec_mid
 == 0)

171 
ec_mid
 = 
îr‹_cou¡16
;

172 
	`¥ötf
("/* inôü»îr‹ cou¡s: %u .. %u .. %u */\n", 
ec_lo
, 
ec_mid
,

173 
ec_hi
);

176 i‡(
îr‹_cou¡16
 < 
ec_mid
)

178 
	`¥ötf
("/*ádju° (mid ): %f: %u -> %u */\n", 
adju°
, 
ec_mid
,

179 
îr‹_cou¡16
);

180 
ec_mid
 = 
îr‹_cou¡16
;

181 
adju°_mid
 = 
adju°
;

184 i‡(
adju°
 < 
adju°_mid
 && 
îr‹_cou¡16
 < 
ec_lo
)

186 
	`¥ötf
("/*ádju° (low ): %f: %u -> %u */\n", 
adju°
, 
ec_lo
,

187 
îr‹_cou¡16
);

188 
ec_lo
 = 
îr‹_cou¡16
;

189 
adju°_lo
 = 
adju°
;

192 i‡(
adju°
 > 
adju°_mid
 && 
îr‹_cou¡16
 < 
ec_hi
)

194 
	`¥ötf
("/*ádju° (high): %f: %u -> %u */\n", 
adju°
, 
ec_hi
,

195 
îr‹_cou¡16
);

196 
ec_hi
 = 
îr‹_cou¡16
;

197 
adju°_hi
 = 
adju°
;

202 
adju°
 = 
adju°_mid
;

203 
	`¥ötf
("/*ádju°: %f: %u */\n", 
adju°
, 
ec_mid
);

211 
iba£
=0; ibase<65536; ibase+=128)

213 
≤g_uöt_16
 
ba£
 = 
≤g_sRGB_ba£
[
iba£
 >> 7], 
åyba£
 = ba£, 
ob
=base;

214 
≤g_byã
 
dñè
 = 
≤g_sRGB_dñè
[
iba£
 >> 7], 
åydñè
 = dñè, 
od
=delta;

215 
ecba£
 = 0, 
eco
;

219 
≤g_sRGB_ba£
[
iba£
 >> 7] = 
åyba£
;

220 
≤g_sRGB_dñè
[
iba£
 >> 7] = 
åydñè
;

223 
îr‹_cou¡16
 = 0;

224 
i16
=
iba£
; i16 < ibase+128; ++i16)

226 
i
 = 255*
i16
;

227 
õxa˘
 = 
	`√¨byöt
(255*
	`sRGB
(
i
));

228 
iˇlc
 = 
	`PNG_sRGB_FROM_LINEAR
(
i
);

230 i‡(
iˇlc
 !
õxa˘
)

231 ++
îr‹_cou¡16
;

234 i‡(
îr‹_cou¡16
 == 0)

237 i‡(
ecba£
 == 0)

239 
eco
 = 
ecba£
 = 
îr‹_cou¡16
;

240 ++
åyba£
;

243 i‡(
îr‹_cou¡16
 < 
ecba£
)

245 i‡(
åyba£
 > 
ba£
)

247 
ba£
 = 
åyba£
;

248 ++
åyba£
;

250 i‡(
åyba£
 < 
ba£
)

252 
ba£
 = 
åyba£
;

253 --
åyba£
;

255 i‡(
åydñè
 > 
dñè
)

257 
dñè
 = 
åydñè
;

258 ++
åydñè
;

260 i‡(
åydñè
 < 
dñè
)

262 
dñè
 = 
åydñè
;

263 --
åydñè
;

267 
	`Ârötf
(
°dîr
, "makesRGB: impossible\n");

268 
	`exô
(1);

270 
ecba£
 = 
îr‹_cou¡16
;

275 i‡(
åyba£
 > 
ba£
)

276 
åyba£
 = 
ba£
-1;

277 i‡(
åyba£
 < 
ba£
)

279 
åyba£
 = 
ba£
;

280 ++
åydñè
;

282 i‡(
åydñè
 > 
dñè
)

283 
åydñè
 = 
dñè
-1;

284 i‡(
åydñè
 < 
dñè
)

289 
≤g_sRGB_ba£
[
iba£
 >> 7] = 
ba£
;

290 
≤g_sRGB_dñè
[
iba£
 >> 7] = 
dñè
;

291 i‡(
ba£
 !
ob
 || 
dñè
 !
od
)

293 
	`¥ötf
("/*Åable[%u]={%u,%u} -> {%u,%u} %u -> %uÉrrors */\n",

294 
iba£
>>7, 
ob
, 
od
, 
ba£
, 
dñè
, 
eco
, 
ecba£
);

297 
	`¥ötf
("/*ÅabÀ[%u]={%u,%u} %uÉº‹†*/\n", 
iba£
>>7, 
ob
, 
od
,

298 
ecba£
);

302 
mö_îr‹
 = -.4999;

303 
max_îr‹
 = .4999;

304 
îr‹_cou¡
 = 0;

306 
i
=0; i <
max_öput
; ++i)

308 
õxa˘
 = 
	`√¨byöt
(255*
	`sRGB
(
i
));

309 
iˇlc
 = 
	`PNG_sRGB_FROM_LINEAR
(
i
);

311 i‡(
iˇlc
 !
õxa˘
)

313 
îr
 = 255*
	`sRGB
(
i
Ë- 
iˇlc
;

315 i‡(
îr
 > (
max_îr‹
+.001Ë||Éº < (
mö_îr‹
-.001))

317 
	`¥ötf
(

319 
i
, 
õxa˘
, 
iˇlc
, 
≤g_sRGB_ba£
[i>>15],

320 
≤g_sRGB_dñè
[
i
>>15], 
îr
);

323 ++
îr‹_cou¡
;

324 i‡(
îr
 > 
max_îr‹
)

325 
max_îr‹
 = 
îr
;

326 i‡(
îr
 < 
mö_îr‹
)

327 
mö_îr‹
 = 
îr
;

334 
îr‹_cou¡16
 = 0;

335 
max_îr‹16
 = 0;

336 
mö_îr‹16
 = 0;

337 
i16
=0; i16 <= 65535; ++i16)

339 
i
 = 255*
i16
;

340 
õxa˘
 = 
	`√¨byöt
(255*
	`sRGB
(
i
));

341 
iˇlc
 = 
	`PNG_sRGB_FROM_LINEAR
(
i
);

343 i‡(
iˇlc
 !
õxa˘
)

345 
îr
 = 255*
	`sRGB
(
i
Ë- 
iˇlc
;

347 ++
îr‹_cou¡16
;

348 i‡(
îr
 > 
max_îr‹16
)

349 
max_îr‹16
 = 
îr
;

350 i‡(
îr
 < 
mö_îr‹16
)

351 
mö_îr‹16
 = 
îr
;

353 i‡(
	`abs
(
iˇlc
 - 
õxa˘
) > 1)

354 
	`¥ötf
(

356 
i16
, 
õxa˘
, 
iˇlc
, 
≤g_sRGB_ba£
[
i
>>15],

357 
≤g_sRGB_dñè
[
i
>>15], 
îr
);

362 
i16
=0; i16 <= 255; ++i16)

364 
i
 = 255 * 
≤g_sRGB_èbÀ
[
i16
];

365 
õxa˘
 = 
	`√¨byöt
(255*
	`sRGB
(
i
));

366 
iˇlc
 = 
	`PNG_sRGB_FROM_LINEAR
(
i
);

368 i‡(
i16
 !
õxa˘
)

370 
	`Ârötf
(
°dîr
, "8-bôÑoundögÉº‹: %d -> %d\n", 
i16
, 
õxa˘
);

371 
	`exô
(1);

374 i‡(
iˇlc
 !
i16
)

376 
föv
 = 
	`fövsRGB
(
i16
);

378 
	`¥ötf
("/* 8-bitÑoundtripÉrror: %d -> %f -> %d(%f) */\n",

379 
i16
, 
föv
, 
iˇlc
, 
	`fsRGB
(255*finv));

384 
	`¥ötf
("/*Érror: %g - %g, %u (%g%%) ofÑeadings inexact */\n",

385 
mö_îr‹
, 
max_îr‹
, 
îr‹_cou¡
, (100.*îr‹_cou¡)/
max_öput
);

386 
	`¥ötf
("/* 16-bitÉrror: %g - %g, %u (%g%%) ofÑeadings inexact */\n",

387 
mö_îr‹16
, 
max_îr‹16
, 
îr‹_cou¡16
, (100.*error_count16)/65535);

389 i‡(!
ã°_⁄ly
)

391 
	`¥ötf
("constÖng_uint_16Öng_sRGB_table[256] =\n{\n ");

392 
i
=0; i<255; )

396 
	`¥ötf
("%d,", 
≤g_sRGB_èbÀ
[
i
++]);

398 (
i
 & 0x7) != 0 && i<255);

399 i‡(
i
<255Ë
	`¥ötf
("\n ");

401 
	`¥ötf
("%d\n};\n\n", 
≤g_sRGB_èbÀ
[
i
]);

404 
	`¥ötf
("constÖng_uint_16Öng_sRGB_base[512] =\n{\n ");

405 
i
=0; i<511; )

409 
	`¥ötf
("%d,", 
≤g_sRGB_ba£
[
i
++]);

411 (
i
 & 0x7) != 0 && i<511);

412 i‡(
i
<511Ë
	`¥ötf
("\n ");

414 
	`¥ötf
("%d\n};\n\n", 
≤g_sRGB_ba£
[
i
]);

416 
	`¥ötf
("constÖng_byteÖng_sRGB_delta[512] =\n{\n ");

417 
i
=0; i<511; )

421 
	`¥ötf
("%d,", 
≤g_sRGB_dñè
[
i
++]);

423 (
i
 & 0xf) != 0 && i<511);

424 i‡(
i
<511Ë
	`¥ötf
("\n ");

426 
	`¥ötf
("%d\n};\n\n", 
≤g_sRGB_dñè
[
i
]);

430 
	}
}

	@contrib/tools/png-fix-itxt.c

32 
	~<°dio.h
>

33 
	~<zlib.h
>

35 
	#MAX_LENGTH
 500000

	)

38 
	#GETBREAK
 
öch¨
=
	`gëch¨
(); \

39 
c
=(
öch¨
 & 0xffU);\

40 i‡(
öch¨
 !
c
Ë

	)

42 
	$maö
()

44 
i
;

45 
buf
[
MAX_LENGTH
];

46 
¸c
;

47 
c
;

48 
öch¨
;

51 
i
=8; i; i--)

53 
GETBREAK
;

54 
	`putch¨
(
c
);

57 i‡(
öch¨
 =
c
)

61 
Àngth
;

62 
GETBREAK
; 
buf
[0] = 
c
; 
Àngth
 = c;Üength <<= 8;

63 
GETBREAK
; 
buf
[1] = 
c
; 
Àngth
 += c;Üength <<= 8;

64 
GETBREAK
; 
buf
[2] = 
c
; 
Àngth
 += c;Üength <<= 8;

65 
GETBREAK
; 
buf
[3] = 
c
; 
Àngth
 += c;

68 
GETBREAK
; 
buf
[4] = 
c
;

69 
GETBREAK
; 
buf
[5] = 
c
;

70 
GETBREAK
; 
buf
[6] = 
c
;

71 
GETBREAK
; 
buf
[7] = 
c
;

75 i‡(
buf
[4] == 105 && buf[5] == 84 && buf[6] == 88 && buf[7] == 116)

77 i‡(
Àngth
 >
MAX_LENGTH
-12)

81 
¸c
 = 
	`¸c32
(0, 
Z_NULL
, 0);

84 
i
=8; i < 
Àngth
 + 12; i++)

86 
GETBREAK
; 
buf
[
i
] = 
c
;

89 i‡(
öch¨
 !
c
)

93 
¸c
 = 
	`¸c32
(¸c, 
buf
+4, (
uI¡
)
Àngth
+4);

98 i‡(((
¸c
 >> 24Ë& 0xffUË=
buf
[
Àngth
+8] &&

99 ((
¸c
 >> 16Ë& 0xffUË=
buf
[
Àngth
+9] &&

100 ((
¸c
 >> 8Ë& 0xffUË=
buf
[
Àngth
+10] &&

101 ((
¸c
 ) & 0xffUË=
buf
[
Àngth
+11])

104 
Àngth
++;

106 i‡(
Àngth
 >
MAX_LENGTH
-12)

109 
GETBREAK
;

110 
buf
[
Àngth
+11] = 
c
;

113 
¸c
 = 
	`¸c32
(¸c, 
buf
+7+
Àngth
, 1);

116 i‡(
öch¨
 !
c
)

120 
buf
[0] = ()((
Àngth
 >> 24) & 0xffU);

121 
buf
[1] = ()((
Àngth
 >> 16) & 0xffU);

122 
buf
[2] = ()((
Àngth
 >> 8) & 0xffU);

123 
buf
[3] = ()((
Àngth
 ) & 0xffU);

126 
i
=0; i<
Àngth
+12; i++)

127 
	`putch¨
(
buf
[
i
]);

132 i‡(
öch¨
 !
c
)

136 
i
=0; i<8; i++)

137 
	`putch¨
(
buf
[
i
]);

140 
i
=8; i< 
Àngth
+12; i++)

142 
GETBREAK
;

143 
	`putch¨
(
c
);

146 i‡(
öch¨
 !
c
)

152 i‡(
buf
[4] == 73 && buf[5] == 69 && buf[6] == 78 && buf[7] == 68)

156 i‡(
öch¨
 !
c
)

159 i‡(
buf
[4] == 73 && buf[5] == 69 && buf[6] == 78 && buf[7] == 68)

164 
	}
}

	@contrib/tools/pngcp.c

18 
	~"≤glibc⁄f.h
"

20 #ifde‡
PNG_PNGCP_TIMING_SUPPORTED


33 
	#_POSIX_C_SOURCE
 199309L

	)

35 
	#_POSIX_SOURCE
 1

	)

38 #i‡
deföed
(
HAVE_CONFIG_H
Ë&& !deföed(
PNG_NO_CONFIG_H
)

39 
	~<c⁄fig.h
>

42 
	~<°dio.h
>

47 #ifde‡
PNG_FREESTANDING_TESTS


48 
	~<≤g.h
>

50 
	~"../../≤g.h
"

53 #i‡
PNG_LIBPNG_VER
 < 10700

55 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


56 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


57 
	#PNG_READ_PNG_SUPPORTED


	)

59 #ifde‡
PNG_WRITE_SUPPORTED


60 
	#PNG_WRITE_PNG_SUPPORTED


	)

65 #i‡(
deföed
(
PNG_READ_PNG_SUPPORTED
)Ë&& (deföed(
PNG_WRITE_PNG_SUPPORTED
))

66 
	~<°d¨g.h
>

67 
	~<°dlib.h
>

68 
	~<°rög.h
>

69 
	~<î∫o.h
>

70 
	~<limôs.h
>

71 
	~<as£π.h
>

73 
	~<uni°d.h
>

74 
	~<sys/°©.h
>

76 
	~<zlib.h
>

78 #i‚de‡
PNG_SETJMP_SUPPORTED


79 
	~<£tjmp.h
>

82 #ifde‡
__˝lu•lus


83 
	#voidˇ°
(
ty≥
, 
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

85 
	#voidˇ°
(
ty≥
, 
vÆue
Ë(vÆue)

	)

88 #ifde‡
__GNUC__


93 
	#gv
 vﬁ©ûe

	)

95 
	#gv


	)

106 #ifde‡
PNG_PNGCP_TIMING_SUPPORTED


107 
	~<time.h
>

108 #i‚de‡
CLOCK_PROCESS_CPUTIME_ID


110 #unde‡
PNG_PNGCP_TIMING_SUPPORTED


119 
	mVERBOSE
,

120 
	mINFORMATION
,

121 
	mWARNINGS
,

122 
	mLIBPNG_WARNING
,

123 
	mAPP_WARNING
,

124 
	mERRORS
,

125 
	mAPP_FAIL
,

126 
	mLIBPNG_ERROR
,

127 
	mLIBPNG_BUG
,

128 
	mAPP_ERROR
,

129 
	mQUIET
,

130 
	mUSER_ERROR
,

131 
	mINTERNAL_ERROR


132 } 
	tîr‹_Àvñ
;

133 
	#LEVEL_MASK
 0x‡

	)

135 
	#STRICT
 0x010

	)

136 
	#LOG
 0x020

	)

137 
	#CONTINUE
 0x040

	)

138 
	#SIZES
 0x080

	)

139 
	#SEARCH
 0x100

	)

140 
	#NOWRITE
 0x200

	)

141 #ifde‡
PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED


142 
	#IGNORE_INDEX
 0x400

	)

143 #ifde‡
PNG_GET_PALETTE_MAX_SUPPORTED


144 
	#FIX_INDEX
 0x800

	)

147 
	#OPTION
 0x80000000

	)

148 
	#LIST
 0x80000001

	)

154 
	#RESULT_STRICT
(
r
Ë((‘Ë& ~((1U<<
WARNINGS
)-1)Ë=0)

	)

155 
	#RESULT_RELAXED
(
r
Ë((‘Ë& ~((1U<<
ERRORS
)-1)Ë=0)

	)

158 c⁄° 
	gønge_lo
[] = "low";

159 c⁄° 
	gønge_hi
[] = "high";

160 c⁄° 
	gÆl
[] = "all";

161 
	#RANGE
(
lo
,
hi
Ë{ 
ønge_lo
,Üÿ}, { 
ønge_hi
, hò}

	)

162 
	svÆue_li°


164 c⁄° *
	m«me
;

165 
	mvÆue
;

166 } 
	tvÆue_li°
;

168 c⁄° 
	gvÆue_li°


169 #ifde‡
PNG_SW_COMPRESS_≤g_Àvñ


170 
	gvl_com¥essi⁄
[] =

176 { "low-mem‹y", 
PNG_COMPRESSION_LOW_MEMORY
 },

177 { "high-•ìd", 
PNG_COMPRESSION_HIGH_SPEED
 },

178 { "high-ªad-•ìd", 
PNG_COMPRESSION_HIGH_READ_SPEED
 },

179 { "low", 
PNG_COMPRESSION_LOW
 },

180 { "medium", 
PNG_COMPRESSION_MEDIUM
 },

181 { "ﬁd", 
PNG_COMPRESSION_COMPAT
 },

182 { "high", 
PNG_COMPRESSION_HIGH
 },

183 { 
Æl
, 0 }

187 #i‡
deföed
(
PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED
) ||\

188 
	$deföed
(
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED
)

189 
vl_°øãgy
[] =

192 { "huffm™", 
Z_HUFFMAN_ONLY
 },

193 { "RLE", 
Z_RLE
 },

194 { "fixed", 
Z_FIXED
 },

195 { "fûãªd", 
Z_FILTERED
 },

196 { "deÁu…", 
Z_DEFAULT_STRATEGY
 },

197 { 
Æl
, 0 }

198 
	}
},

199 #ifde‡
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


200 
	gvl_wödowBôs_ãxt
[] =

202 { "deÁu…", 
MAX_WBITS
 },

204 
RANGE
(8, 
MAX_WBITS
 ),

205 { 
Æl
, 0 }

208 
	gvl_Àvñ
[] =

210 { "deÁu…", 
Z_DEFAULT_COMPRESSION
 },

211 { "n⁄e", 
Z_NO_COMPRESSION
 },

212 { "•ìd", 
Z_BEST_SPEED
 },

213 { "be°", 
Z_BEST_COMPRESSION
 },

214 { "0", 
Z_NO_COMPRESSION
 },

215 
RANGE
(1, 9),

216 { 
Æl
, 0 }

218 
	gvl_memLevñ
[] =

220 { "max", 
MAX_MEM_LEVEL
 },

227 
RANGE
(6, 
MAX_MEM_LEVEL
 ),

228 { 
Æl
, 0 }

231 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


232 
	gvl_fûãr
[] =

234 { 
Æl
, 
PNG_ALL_FILTERS
 },

235 { "off", 
PNG_NO_FILTERS
 },

236 { "n⁄e", 
PNG_FILTER_NONE
 },

237 { "sub", 
PNG_FILTER_SUB
 },

238 { "up", 
PNG_FILTER_UP
 },

239 { "avg", 
PNG_FILTER_AVG
 },

240 { "∑ëh", 
PNG_FILTER_PAETH
 }

243 #ifde‡
PNG_PNGCP_TIMING_SUPPORTED


244 
	#PNGCP_TIME_READ
 1

	)

245 
	#PNGCP_TIME_WRITE
 2

	)

246 
	gvl_time
[] =

248 { "bŸh", 
PNGCP_TIME_READ
+
PNGCP_TIME_WRITE
 },

250 { "ªad", 
PNGCP_TIME_READ
 },

251 { "wrôe", 
PNGCP_TIME_WRITE
 }

254 
	gvl_IDAT_size
[] =

258 
RANGE
(1, 0x7FFFFFFF)

260 #i‚de‡
PNG_SW_IDAT_size


262 
	#≤g_£t_IDAT_size
(
p
,
v
Ë
	`≤g_£t_com¥essi⁄_buf„r_size
’, v)

	)

264 
	#SL
 8

	)

265 
	gvl_log_dïth
[] = { { "⁄", 1 }, { "off", 0 }, 
RANGE
(0, 
SL
) },

266 
	gvl_⁄_off
[] = { { "on", 1 }, { "off", 0 } };

268 #ifde‡
PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED


269 
vÆue_li°


270 
	gvl_wödowBôs_IDAT
[] =

272 { "deÁu…", 
MAX_WBITS
 },

274 
RANGE
(8, 
MAX_WBITS
),

275 { 
Æl
, 0 }

279 
	s›ti⁄


281 c⁄° *
	m«me
;

282 
≤g_uöt_32
 
	m›t
;

283 
≤g_byã
 
	m£¨ch
;

284 
≤g_byã
 
	mvÆue_cou¡
;

285 c⁄° 
vÆue_li°
 *
	mvÆues
;

286 } 
	t›ti⁄
;

288 c⁄° 
›ti⁄
 
	g›ti⁄s
[] =

291 
	#S
(
n
,
v
Ë{ #n, v, 0, 2, 
vl_⁄_off
 },

	)

292 
S
(
vîbo£
, 
VERBOSE
)

293 
S
(
w¨nögs
, 
WARNINGS
)

294 
S
(
îr‹s
, 
ERRORS
)

295 
S
(
quõt
, 
QUIET
)

296 
S
(
°ri˘
, 
STRICT
)

297 
S
(
log
, 
LOG
)

298 
S
(, 
CONTINUE
)

299 
S
(
sizes
, 
SIZES
)

300 
S
(
£¨ch
, 
SEARCH
)

301 
S
(
nowrôe
, 
NOWRITE
)

302 #ifde‡
IGNORE_INDEX


303 
S
(
ign‹e
-
∑Àâe
-
ödex
, 
IGNORE_INDEX
)

305 #ifde‡
FIX_INDEX


306 
S
(
fix
-
∑Àâe
-
ödex
, 
FIX_INDEX
)

308 #unde‡
S


311 
	#VLNAME
(
«me
Ë
vl_
 ## 
	)
name

312 
	#VLSIZE
(
«me
Ë
	`voidˇ°
(
≤g_byã
,\

313 ( 
	`VLNAME
(
«me
))/( VLNAME“ame)[0]))

	)

314 
	#VL
(
⁄ame
, 
«me
, 
ty≥
, 
£¨ch
)\

315 { 
⁄ame
, 
ty≥
, 
£¨ch
, 
	`VLSIZE
(
«me
), 
	`VLNAME
“ameË},

	)

316 
	#VLO
(
⁄ame
, 
«me
, 
£¨ch
Ë
	`VL
(⁄ame,Çame, 
OPTION
, sórch)

	)

318 #ifde‡
PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED


319 
	#VLCIDAT
(
«me
Ë
	`VLO
(#«me,Çame, 1 )

	)

320 #ifde‡
PNG_SW_COMPRESS_Àvñ


321 
	#VLCiCCP
(
«me
Ë
	`VLO
("ICC-¥ofûe-" #«me,Çame, 0 )

	)

323 
	#VLCiCCP
(
«me
)

	)

326 
	#VLCIDAT
(
«me
)

	)

327 
	#VLCiCCP
(
«me
)

	)

330 #ifde‡
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


331 
	#VLCzTXt
(
«me
Ë
	`VLO
("ãxt-" #«me,Çame, 0 )

	)

333 
	#VLCzTXt
(
«me
)

	)

336 
	#VLC
(
«me
Ë
	`VLCIDAT
“ameË
	`VLCiCCP
“ameË
	`VLCzTXt
“ame)

	)

338 #ifde‡
PNG_SW_COMPRESS_≤g_Àvñ


342 
VLO
("com¥essi⁄", 
com¥essi⁄
, 0)

343 
VLO
("ãxt-com¥essi⁄", 
com¥essi⁄
, 0)

344 
VLO
("ICC-¥ofûe-com¥essi⁄", 
com¥essi⁄
, 0)

346 
VLC
(
°øãgy
)

347 
VLO
("wödowBôs", 
wödowBôs_IDAT
, 1)

348 #ifde‡
PNG_SW_COMPRESS_wödowBôs


349 
VLO
("ICC-¥ofûe-wödowBôs", 
wödowBôs_ãxt
 , 0)

351 
VLO
("ãxt-wödowBôs", 
wödowBôs_ãxt
, 0)

352 
VLC
(
Àvñ
)

353 
VLC
(
memLevñ
)

354 
VLO
("IDAT-size", 
IDAT_size
, 0)

355 
VLO
("log-dïth", 
log_dïth
, 0)

357 #unde‡
VLO


360 
	#VLL
(
«me
, 
£¨ch
Ë
	`VL
(#«me,Çame, 
LIST
, sórch)

	)

361 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


362 
VLL
(
fûãr
, 0)

364 #ifde‡
PNG_PNGCP_TIMING_SUPPORTED


365 
VLL
(
time
, 0)

367 #unde‡
VLL


368 #unde‡
VL


371 #ifde‡
__˝lu•lus


372 c⁄° 
size_t
 
›ti⁄_cou¡
(( 
›ti⁄s
)/( options[0]));

374 
	#›ti⁄_cou¡
 (( 
›ti⁄s
)/( o±i⁄s[0]))

	)

378 
	$˘s
(
˘
)

380 
˘
)

382 
PNG_COLOR_TYPE_PALETTE
:  "P";

383 
PNG_COLOR_TYPE_GRAY
:  "G";

384 
PNG_COLOR_TYPE_GRAY_ALPHA
:  "GA";

385 
PNG_COLOR_TYPE_RGB
:  "RGB";

386 
PNG_COLOR_TYPE_RGB_ALPHA
:  "RGBA";

389 
	}
}

391 
	sdi•œy


393 
jmp_buf
 
	mîr‹_ªtu∫
;

394 
	mîr£t
;

396 c⁄° *
	m›î©i⁄
;

397 c⁄° *
	mfûíame
;

398 c⁄° *
	mouçut_fûe
;

401 
FILE
 *
	mÂ
;

406 
≤g_Æloc_size_t
 
	mªad_size
;

407 
≤g_°ru˘p
 
	mªad_µ
;

408 
≤g_öf›
 
	mù
;

409 #i‡
PNG_LIBPNG_VER
 < 10700 && 
deföed
 
PNG_TEXT_SUPPORTED


410 
≤g_ãxç
 
	mãxt_±r
;

411 
	mnum_ãxt
;

412 
	mãxt_°ashed
;

415 #ifde‡
PNG_PNGCP_TIMING_SUPPORTED


416 
time•ec
 
	mªad_time
;

417 
time•ec
 
	mªad_time_tŸÆ
;

418 
time•ec
 
	mwrôe_time
;

419 
time•ec
 
	mwrôe_time_tŸÆ
;

423 
	#MAX_SIZE
 ((
≤g_Æloc_size_t
)(-1))

	)

424 
≤g_Æloc_size_t
 
	mwrôe_size
;

425 
≤g_Æloc_size_t
 
	mbe°_size
;

426 
≤g_°ru˘p
 
	mwrôe_µ
;

429 
≤g_Æloc_size_t
 
	msize
;

430 
≤g_uöt_32
 
	mw
;

431 
≤g_uöt_32
 
	mh
;

432 
	mbµ
;

433 
≤g_byã
 
	m˘
;

434 
	mno_w¨nögs
;

435 
	mmö_wödowBôs
;

438 
≤g_uöt_32
 
	mªsu…s
;

439 
≤g_uöt_32
 
	m›ti⁄s
;

440 
≤g_byã
 
	míåy
[
›ti⁄_cou¡
];

443 
	mvÆue
[
›ti⁄_cou¡
];

449 
	mc•
;

450 
	mn•
;

455 
	mt•
;

459 
	m›t_°rög_°¨t
;

463 
	s°ack


465 
≤g_Æloc_size_t
 
	mbe°_size
;

466 
≤g_Æloc_size_t
 
	mlo_size
;

467 
≤g_Æloc_size_t
 
	mhi_size
;

468 
	mlo
, 
	mhi
;

469 
	mbe°_vÆ
;

470 
	m›t_°rög_íd
;

471 
≤g_byã
 
	m›t
;

472 
≤g_byã
 
	míåy
;

473 
≤g_byã
 
	míd
;

474 } 
	m°ack
[
SL
];

475 
	mcuº
[32*
SL
];

476 
	mbe°
[32*
SL
];

478 
	m«mebuf
[
FILENAME_MAX
];

482 
	$di•œy_öô
(
di•œy
 *
dp
)

488 
	`mem£t
(
dp
, 0,  *dp);

489 
dp
->
›î©i⁄
 = "internalÉrror";

490 
dp
->
fûíame
 = "commandÜine";

491 
dp
->
ouçut_fûe
 = "no output file";

492 
dp
->
›ti⁄s
 = 
WARNINGS
;

493 
dp
->
Â
 = 
NULL
;

494 
dp
->
ªad_µ
 = 
NULL
;

495 
dp
->
ù
 = 
NULL
;

496 
dp
->
wrôe_µ
 = 
NULL
;

497 
dp
->
mö_wödowBôs
 = -1;

498 #i‡
PNG_LIBPNG_VER
 < 10700 && 
deföed
 
PNG_TEXT_SUPPORTED


499 
dp
->
ãxt_±r
 = 
NULL
;

500 
dp
->
num_ãxt
 = 0;

501 
dp
->
ãxt_°ashed
 = 0;

503 
	}
}

506 
	$di•œy_˛ón_ªad
(
di•œy
 *
dp
)

508 i‡(
dp
->
ªad_µ
 !
NULL
)

509 
	`≤g_de°roy_ªad_°ru˘
(&
dp
->
ªad_µ
, 
NULL
, NULL);

511 i‡(
dp
->
Â
 !
NULL
)

513 
FILE
 *
Â
 = 
dp
->fp;

514 
dp
->
Â
 = 
NULL
;

515 ()
	`f˛o£
(
Â
);

517 
	}
}

520 
	$di•œy_˛ón_wrôe
(
di•œy
 *
dp
)

522 i‡(
dp
->
Â
 !
NULL
)

524 
FILE
 *
Â
 = 
dp
->fp;

525 
dp
->
Â
 = 
NULL
;

526 ()
	`f˛o£
(
Â
);

529 i‡(
dp
->
wrôe_µ
 !
NULL
)

530 
	`≤g_de°roy_wrôe_°ru˘
(&
dp
->
wrôe_µ
, dp->
t•
 > 0 ? 
NULL
 : &dp->
ù
);

531 
	}
}

534 
	$di•œy_˛ón
(
di•œy
 *
dp
)

536 
	`di•œy_˛ón_ªad
(
dp
);

537 
	`di•œy_˛ón_wrôe
(
dp
);

538 
dp
->
ouçut_fûe
 = 
NULL
;

540 #i‡
PNG_LIBPNG_VER
 < 10700 && 
deföed
 
PNG_TEXT_SUPPORTED


544 i‡(
dp
->
ãxt_°ashed
)

546 
dp
->
ãxt_°ashed
 = 0;

547 
dp
->
num_ãxt
 = 0;

548 
	`‰ì
(
dp
->
ãxt_±r
);

549 
dp
->
ãxt_±r
 = 
NULL
;

554 
dp
->
ªsu…s
 = 0;

555 
	}
}

558 
	$di•œy_de°roy
(
di•œy
 *
dp
)

561 
	`di•œy_˛ón
(
dp
);

562 
	}
}

564 
di•œy
 *

565 
	$gë_dp
(
≤g_°ru˘p
 
µ
)

568 
di•œy
 *
dp
 = (di•œy*)
	`≤g_gë_îr‹_±r
(
µ
);

570 i‡(
dp
 =
NULL
)

572 
	`Ârötf
(
°dîr
, "pngcp: internalÉrror (no display)\n");

573 
	`exô
(99);

576  
dp
;

577 
	}
}

580 #ifde‡
__GNUC__


581 
	#VGATTR
 
	`__©åibuã__
((
	`__f‹m©__
 (
__¥ötf__
,3,4)))

	)

586 
	#VGATTR


	)

588 
VGATTR


589 
	$di•œy_log
(
di•œy
 *
dp
, 
îr‹_Àvñ
 
Àvñ
, c⁄° *
fmt
, ...)

594 
dp
->
ªsu…s
 |1U << 
Àvñ
;

596 i‡(
Àvñ
 > (
îr‹_Àvñ
)(
dp
->
›ti⁄s
 & 
LEVEL_MASK
))

598 c⁄° *
Õ
;

599 
va_li°
 
≠
;

601 
Àvñ
)

603 
INFORMATION
: 
Õ
 = "information"; ;

604 
LIBPNG_WARNING
: 
Õ
 = "warning(libpng)"; ;

605 
APP_WARNING
: 
Õ
 = "warning(pngcp)"; ;

606 
APP_FAIL
: 
Õ
 = "error(continuable)"; ;

607 
LIBPNG_ERROR
: 
Õ
 = "error(libpng)"; ;

608 
LIBPNG_BUG
: 
Õ
 = "bug(libpng)"; ;

609 
APP_ERROR
: 
Õ
 = "error(pngcp)"; ;

610 
USER_ERROR
: 
Õ
 = "error(user)"; ;

612 
INTERNAL_ERROR
:

613 
VERBOSE
: 
WARNINGS
: 
ERRORS
: 
QUIET
:

614 : 
Õ
 = "bug(pngcp)"; ;

617 
	`Ârötf
(
°dîr
, "%s: %s: %s",

618 
dp
->
fûíame
 !
NULL
 ? dp->fûíamê: "<°dö>", 
Õ
, dp->
›î©i⁄
);

620 
	`Ârötf
(
°dîr
, ": ");

622 
	`va_°¨t
(
≠
, 
fmt
);

623 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

624 
	`va_íd
(
≠
);

626 
	`Âutc
('\n', 
°dîr
);

631 i‡(
Àvñ
 > 
APP_FAIL
 || (Àvñ > 
ERRORS
 && !(
dp
->
›ti⁄s
 & 
CONTINUE
)))

633 i‡(
dp
->
îr£t
)

634 
	`l⁄gjmp
(
dp
->
îr‹_ªtu∫
, 
Àvñ
);

637 
	`exô
(99);

639 
	}
}

641 #i‡
PNG_LIBPNG_VER
 < 10700 && 
deföed
 
PNG_TEXT_SUPPORTED


643 
	$ãxt_°ash
(
di•œy
 *
dp
)

663 
≤g_ãxç
 
chunks
 = 
NULL
;

665 
dp
->
num_ãxt
 = 
	`≤g_gë_ãxt
(dp->
wrôe_µ
, dp->
ù
, &
chunks
, 
NULL
);

667 i‡(
dp
->
num_ãxt
 > 0)

669 
dp
->
ãxt_±r
 = 
	`voidˇ°
(
≤g_ãxç
, 
	`mÆloc
(dp->
num_ãxt
 *  *
chunks
));

671 i‡(
dp
->
ãxt_±r
 =
NULL
)

672 
	`di•œy_log
(
dp
, 
APP_ERROR
, "text chunks: stash malloc failed");

675 
	`mem˝y
(
dp
->
ãxt_±r
, 
chunks
, dp->
num_ãxt
 *  *chunks);

678 
dp
->
ãxt_°ashed
 = 1;

679 
	}
}

681 
	#ãxt_°ash
(
dp
Ëi‡(!dp->
ãxt_°ashed
Ë
	`ãxt_°ash
(dp)

	)

684 
	$ãxt_ª°‹e
(
di•œy
 *
dp
)

687 i‡(
dp
->
ãxt_±r
 !
NULL
)

688 
	`≤g_£t_ãxt
(
dp
->
wrôe_µ
, dp->
ù
, dp->
ãxt_±r
, dp->
num_ãxt
);

689 
	}
}

691 
	#ãxt_ª°‹e
(
dp
Ëi‡(dp->
ãxt_°ashed
Ë
	`ãxt_ª°‹e
(dp)

	)

694 
	#ãxt_°ash
(
dp
Ë(()0)

	)

695 
	#ãxt_ª°‹e
(
dp
Ë(()0)

	)

711 
≤g_byã


712 
	$›ti⁄_ödex
(
di•œy
 *
dp
, c⁄° *
›t
, 
size_t
 
Àn
)

718 
≤g_byã
 
j
;

720 
j
=0; j<
›ti⁄_cou¡
; ++j)

721 i‡(
	`°∫cmp
(
›ti⁄s
[
j
].
«me
, 
›t
, 
Àn
) == 0 && options[j].name[len] == 0)

722  
j
;

727 
	`di•œy_log
(
dp
, dp->
îr£t
 ? 
INTERNAL_ERROR
 : 
USER_ERROR
,

728 "%.*s: unknow¿›ti⁄", (Ë
Àn
, 
›t
);

729 
	`ab‹t
();

730 
	}
}

733 
	#OPTIND
(
dp
, 
«me
Ë
	`›ti⁄_ödex
(dp, #«me, ( #«me)-1)

	)

736 
	$gë_›ti⁄
(
di•œy
 *
dp
, c⁄° *
›t
, *
vÆue
)

738 
≤g_byã
 
i
 = 
	`›ti⁄_ödex
(
dp
, 
›t
, 
	`°æí
(opt));

740 i‡(
dp
->
íåy
[
i
])

742 *
vÆue
 = 
dp
->vÆue[
i
];

748 
	}
}

751 
	$£t_›t_°rög_
(
di•œy
 *
dp
, 
•
, 
≤g_byã
 
›t
,

752 c⁄° *
íåy_«me
)

755 
off£t
, 
add
;

757 i‡(
•
 > 0)

758 
off£t
 = 
dp
->
°ack
[
•
-1].
›t_°rög_íd
;

761 
off£t
 = 
dp
->
›t_°rög_°¨t
;

763 i‡(
íåy_«me
 =
ønge_lo
)

764 
add
 = 
	`•rötf
(
dp
->
cuº
+
off£t
, " --%s=%d", 
›ti⁄s
[
›t
].
«me
,

765 
dp
->
vÆue
[
›t
]);

768 
add
 = 
	`•rötf
(
dp
->
cuº
+
off£t
, " --%s=%s", 
›ti⁄s
[
›t
].
«me
, 
íåy_«me
);

770 i‡(
add
 < 0)

771 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
, "sprintf failed");

773 
	`as£π
(
off£t
+
add
 < (Ë 
dp
->
cuº
);

774  
off£t
+
add
;

775 
	}
}

778 
	$£t_›t_°rög
(
di•œy
 *
dp
, 
•
)

781 
dp
->
°ack
[
•
].
›t_°rög_íd
 = 
	`£t_›t_°rög_
(dp, sp, dp->°ack[•].
›t
,

782 
›ti⁄s
[
dp
->
°ack
[
•
].
›t
].
vÆues
[dp->°ack[•].
íåy
].
«me
);

783 
	}
}

786 
	$ªc‹d_›t
(
di•œy
 *
dp
, 
≤g_byã
 
›t
, c⁄° *
íåy_«me
)

792 
•
 = 
dp
->
c•
;

794 i‡(
•
 >
dp
->
t•
)

800 
off£t
 = 
	`£t_›t_°rög_
(
dp
, 
•
, 
›t
, 
íåy_«me
);

802 i‡(
•
 > 0)

803 
dp
->
°ack
[
•
-1].
›t_°rög_íd
 = 
off£t
;

806 
dp
->
›t_°rög_°¨t
 = 
off£t
;

810 
	}
}

813 
	$›t_li°_íd
(
di•œy
 *
dp
, 
≤g_byã
 
›t
,Öng_byã 
íåy
)

815 i‡(
›ti⁄s
[
›t
].
vÆues
[
íåy
].
«me
 =
ønge_lo
)

816  
íåy
+1U >
›ti⁄s
[
›t
].
vÆue_cou¡
 ||

817 
›ti⁄s
[
›t
].
vÆues
[
íåy
+1U].
«me
 !
ønge_hi
 ||

818 
›ti⁄s
[
›t
].
vÆues
[
íåy
+1U].
vÆue
 <
dp
->value[opt] ;

821  
íåy
+1U >
›ti⁄s
[
›t
].
vÆue_cou¡
 ||

822 
›ti⁄s
[
›t
].
vÆues
[
íåy
+1U].
«me
 =
Æl
 ;

823 
	}
}

826 
	$push_›t
(
di•œy
 *
dp
, 
•
, 
≤g_byã
 
›t
, 
£¨ch
)

832 
≤g_byã
 
íåy
;

833 c⁄° *
íåy_«me
;

835 
	`as£π
(
•
 =
dp
->
t•
 && s∞< 
SL
);

840 
íåy
 = 
›ti⁄s
[
›t
].
vÆue_cou¡
;

841 
	`as£π
(
íåy
 > 0U);

845 
íåy_«me
 = 
›ti⁄s
[
›t
].
vÆues
[--
íåy
].
«me
;

846 i‡(
íåy_«me
 =
ønge_lo
)

849 
íåy
 > 0U);

851 
dp
->
t•
 = 
•
+1U;

852 
dp
->
°ack
[
•
].
be°_size
 =

853 
dp
->
°ack
[
•
].
lo_size
 =

854 
dp
->
°ack
[
•
].
hi_size
 = 
MAX_SIZE
;

856 i‡(
£¨ch
 && 
íåy_«me
 =
ønge_lo
)

858 
dp
->
°ack
[
•
].
lo
 = 
›ti⁄s
[
›t
].
vÆues
[
íåy
].
vÆue
;

860 
	`as£π
(
íåy
+1 < 
›ti⁄s
[
›t
].
vÆue_cou¡
 &&

861 
›ti⁄s
[
›t
].
vÆues
[
íåy
+1].
«me
 =
ønge_hi
);

862 
dp
->
°ack
[
•
].
hi
 = 
›ti⁄s
[
›t
].
vÆues
[
íåy
+1].
vÆue
;

868 
dp
->
°ack
[
•
].
lo
 = 
INT_MAX
;

869 
dp
->
°ack
[
•
].
hi
 = 
INT_MIN
;

872 
dp
->
°ack
[
•
].
›t
 = opt;

873 
dp
->
°ack
[
•
].
íåy
 =Éntry;

874 
dp
->
°ack
[
•
].
be°_vÆ
 = dp->
vÆue
[
›t
] = 
›ti⁄s
[›t].
vÆues
[
íåy
].value;

876 
	`£t_›t_°rög
(
dp
, 
•
);

881 i‡(
	`›t_li°_íd
(
dp
, 
›t
, 
íåy
))

883 
dp
->
°ack
[
•
].
íd
 = 1;

887 i‡(
›t
 !
dp
->
mö_wödowBôs
)

888 
	`di•œy_log
(
dp
, 
APP_WARNING
, "%s: onlyÅesting one value",

889 
›ti⁄s
[
›t
].
«me
);

894 
dp
->
°ack
[
•
].
íd
 = 0;

895 
dp
->
n•
 = dp->
t•
;

902 
	`ãxt_°ash
(
dp
);

903 
	}
}

906 
	$√xt_›t
(
di•œy
 *
dp
, 
•
)

914 
£¨ch
 = 0;

915 
≤g_byã
 
íåy
, 
›t
;

916 c⁄° *
íåy_«me
;

919 
	`as£π
(
•
+1U =
dp
->
t•
 && !dp->
°ack
[•].
íd
);

921 
›t
 = 
dp
->
°ack
[
•
].opt;

922 
íåy
 = 
dp
->
°ack
[
•
].entry;

923 
	`as£π
(
íåy
+1U < 
›ti⁄s
[
›t
].
vÆue_cou¡
);

924 
íåy_«me
 = 
›ti⁄s
[
›t
].
vÆues
[
íåy
].
«me
;

925 
	`as£π
(
íåy_«me
 !
NULL
);

930 i‡(
íåy_«me
 =
ønge_lo
)

936 i‡(
dp
->
°ack
[
•
].
lo
 > dp->°ack[•].
hi
)

937 
dp
->
vÆue
[
›t
]++;

942 
≤g_Æloc_size_t
 
be°_size
 = 
dp
->
°ack
[
•
].best_size;

943 
lo
 = 
dp
->
°ack
[
•
].lo;

944 
hi
 = 
dp
->
°ack
[
•
].hi;

945 
vÆ
 = 
dp
->
vÆue
[
›t
];

947 
£¨ch
 = 1;

948 
	`as£π
(
be°_size
 < 
MAX_SIZE
);

950 i‡(
vÆ
 =
lo
)

953 
dp
->
°ack
[
•
].
lo_size
 = 
be°_size
;

954 
	`as£π
(
hi
 > 
vÆ
);

956 i‡(
hi
 =
vÆ
+1)

957 
dp
->
°ack
[
•
].
íd
 = 1;

959 
vÆ
 = 
hi
;

962 i‡(
vÆ
 =
hi
)

964 
dp
->
°ack
[
•
].
hi_size
 = 
be°_size
;

965 
	`as£π
(
vÆ
 > 
lo
+1);

967 i‡(
vÆ
 =
lo
+2)

968 
dp
->
°ack
[
•
].
íd
 = 1;

970 
vÆ
 = (
lo
 + val)/2;

975 
≤g_Æloc_size_t
 
lo_size
 = 
dp
->
°ack
[
•
].lo_size;

976 
≤g_Æloc_size_t
 
hi_size
 = 
dp
->
°ack
[
•
].hi_size;

979 
	`as£π
(
lo_size
 < 
MAX_SIZE
 && 
hi_size
 < MAX_SIZE);

984 i‡(
vÆ
 < 
lo
)

987 
dp
->
°ack
[
•
].
lo
 = 
vÆ
;

988 
dp
->
°ack
[
•
].
lo_size
 = 
be°_size
;

989 
vÆ
 = 
lo
;

990 
be°_size
 = 
lo_size
;

991 
lo
 = 
dp
->
°ack
[
•
].lo;

992 
lo_size
 = 
dp
->
°ack
[
•
].lo_size;

995 i‡(
vÆ
 > 
hi
)

998 
dp
->
°ack
[
•
].
hi
 = 
vÆ
;

999 
dp
->
°ack
[
•
].
hi_size
 = 
be°_size
;

1000 
vÆ
 = 
hi
;

1001 
be°_size
 = 
hi_size
;

1002 
hi
 = 
dp
->
°ack
[
•
].hi;

1003 
hi_size
 = 
dp
->
°ack
[
•
].hi_size;

1007 
	`as£π
(
lo
 < 
vÆ
 && vÆ < 
hi
);

1012 i‡(
hi
 =
lo
+3)

1017 
vÆ
 = 
lo
 + ((val ==Üo+1) ? 2 : 1);

1018 
	`as£π
(
lo
 < 
vÆ
 && vÆ < 
hi
);

1019 
dp
->
°ack
[
•
].
íd
 = 1;

1030 
	`as£π
(
hi
 > 
lo
+3);

1032 i‡(
lo_size
 <
be°_size
 && be°_sizê<
hi_size
)

1039 i‡(
vÆ
 =
lo
+1)

1041 ++
vÆ
;

1042 
dp
->
°ack
[
•
].
íd
 = 1;

1047 
dp
->
°ack
[
•
].
hi
 = hò
vÆ
;

1048 
dp
->
°ack
[
•
].
hi_size
 = 
be°_size
;

1049 
vÆ
 = (
lo
 + val) / 2;

1053 i‡(
lo_size
 >
be°_size
 && be°_sizê>
hi_size
)

1059 i‡(
vÆ
 =
hi
-1)

1061 --
vÆ
;

1062 
dp
->
°ack
[
•
].
íd
 = 1;

1067 
dp
->
°ack
[
•
].
lo
 =Üÿ
vÆ
;

1068 
dp
->
°ack
[
•
].
lo_size
 = 
be°_size
;

1069 
vÆ
 = (vÆ + 
hi
) / 2;

1088 i‡(
lo_size
 <
hi_size
)

1090 
dp
->
°ack
[
•
].
hi
 = 
vÆ
;

1091 
dp
->
°ack
[
•
].
hi_size
 = 
be°_size
;

1092 
vÆ
 = --
hi
;

1097 
dp
->
°ack
[
•
].
lo
 = 
vÆ
;

1098 
dp
->
°ack
[
•
].
lo_size
 = 
be°_size
;

1099 
vÆ
 = ++
lo
;

1105 
	`as£π
(
hi
 > 
lo
+1);

1106 i‡(
hi
 <
lo
+2)

1107 
dp
->
°ack
[
•
].
íd
 = 1;

1111 
	`as£π
(
vÆ
 !
dp
->
°ack
[
•
].
be°_vÆ
);

1112 
dp
->
vÆue
[
›t
] = 
vÆ
;

1113 
dp
->
°ack
[
•
].
be°_size
 = 
MAX_SIZE
;

1120 
dp
->
vÆue
[
›t
] = 
›ti⁄s
[›t].
vÆues
[++
íåy
].value;

1121 
dp
->
°ack
[
•
].
íåy
 =Éntry;

1124 
	`£t_›t_°rög
(
dp
, 
•
);

1126 i‡(!
£¨ch
 && 
	`›t_li°_íd
(
dp
, 
›t
, 
íåy
))

1127 
dp
->
°ack
[
•
].
íd
 = 1;

1129 i‡(!
dp
->
°ack
[
•
].
íd
)

1130 
dp
->
n•
 = dp->
t•
;

1131 
	}
}

1134 
	$com∑ª_›ti⁄
(c⁄° 
di•œy
 *
dp
, 
•
)

1136 
›t
 = 
dp
->
°ack
[
•
].opt;

1141 i‡(
dp
->
°ack
[
•
].
be°_vÆ
 < dp->
vÆue
[
›t
])

1147 i‡(
dp
->
°ack
[
•
].
be°_vÆ
 > dp->
vÆue
[
›t
])

1149 i‡(
dp
->
°ack
[
•
].
lo
 <dp->°ack[•].
hi
 )

1158 
	}
}

1161 
	$adv™˚_›t
(
di•œy
 *
dp
, 
≤g_byã
 
›t
, 
£¨ch
)

1163 
•
 = 
dp
->
c•
++;

1165 
	`as£π
(
•
 >
dp
->
n•
);

1186 i‡(
•
 >
dp
->
t•
)

1188 
	`push_›t
(
dp
, 
•
, 
›t
, 
£¨ch
);

1194 
ªt
 = 0;

1201 
	`as£π
(
dp
->
wrôe_size
 > 0U && dp->wrôe_sizê< 
MAX_SIZE
);

1203 i‡(
dp
->
°ack
[
•
].
be°_size
 > dp->
wrôe_size
 ||

1204 (
dp
->
°ack
[
•
].
be°_size
 =dp->
wrôe_size
 &&

1205 
	`com∑ª_›ti⁄
(
dp
, 
•
) > 0))

1207 
dp
->
°ack
[
•
].
be°_size
 = dp->
wrôe_size
;

1208 
dp
->
°ack
[
•
].
be°_vÆ
 = dp->
vÆue
[
›t
];

1211 i‡(
•
+1U >
dp
->
t•
)

1213 
	`√xt_›t
(
dp
, 
•
);

1214 
ªt
 = 1;

1217 i‡(!
dp
->
°ack
[
•
].
íd
)

1218 
dp
->
n•
 = 
•
+1U;

1220  
ªt
;

1222 
	}
}

1225 
	$gëÆl›ts_
(
di•œy
 *
dp
, 
≤g_byã
 
›t
, *
vÆue
, 
ªc‹d
)

1229 i‡(
dp
->
íåy
[
›t
])

1235 c⁄° *
íåy_«me
 = 
›ti⁄s
[
›t
].
vÆues
[
dp
->
íåy
[›t]-1].
«me
;

1237 i‡(
íåy_«me
 =
Æl
)

1238 ()
	`adv™˚_›t
(
dp
, 
›t
, 0 );

1240 i‡(
ªc‹d
)

1241 
	`ªc‹d_›t
(
dp
, 
›t
, 
íåy_«me
);

1243 *
vÆue
 = 
dp
->vÆue[
›t
];

1249 
	}
}

1252 
	$gëÆl›ts
(
di•œy
 *
dp
, c⁄° *
›t_°r
, *
vÆue
)

1254  
	`gëÆl›ts_
(
dp
, 
	`›ti⁄_ödex
(dp, 
›t_°r
, 
	`°æí
(›t_°r)), 
vÆue
, 0);

1255 
	}
}

1258 
	$gë£¨ch›ts
(
di•œy
 *
dp
, c⁄° *
›t_°r
, *
vÆue
)

1261 
≤g_byã
 
i°øt
;

1262 
≤g_byã
 
›t
 = 
	`›ti⁄_ödex
(
dp
, 
›t_°r
, 
	`°æí
(opt_str));

1263 
ªc‹d
 = 
›ti⁄s
[
›t
].
£¨ch
;

1264 c⁄° *
íåy_«me
;

1269 i‡(
	`gëÆl›ts_
(
dp
, 
›t
, 
vÆue
, 
ªc‹d
))

1272 i‡(!
ªc‹d
)

1276 
i°øt
 = 
	`OPTIND
(
dp
, 
°øãgy
);

1277 
íåy_«me
 = 
ønge_lo
;

1279 i‡(
›t
 =
i°øt
)

1280 ()
	`adv™˚_›t
(
dp
, 
›t
, 0 ), 
ªc‹d
=0;

1282 i‡(
›t
 =
	`OPTIND
(
dp
, 
Àvñ
))

1285 i‡(
dp
->
vÆue
[
i°øt
] =
Z_RLE
 || dp->vÆue[i°øt] =
Z_HUFFMAN_ONLY
)

1286 
dp
->
vÆue
[
›t
] = 1;

1289 ()
	`adv™˚_›t
(
dp
, 
›t
, 1 ), 
ªc‹d
=0;

1292 i‡(
›t
 =
	`OPTIND
(
dp
, 
wödowBôs
))

1299 i‡(
dp
->
vÆue
[
i°øt
] =
Z_HUFFMAN_ONLY
)

1300 
dp
->
vÆue
[
›t
] = 8;

1302 i‡(
dp
->
vÆue
[
i°øt
] =
Z_RLE
)

1303 
dp
->
vÆue
[
›t
] = 9;

1306 ()
	`adv™˚_›t
(
dp
, 
›t
, 1 ), 
ªc‹d
=0;

1309 i‡(
›t
 =
	`OPTIND
(
dp
, 
memLevñ
))

1312 ()
	`adv™˚_›t
(
dp
, 
›t
, 0 ), 
ªc‹d
=0;

1314 
dp
->
vÆue
[
›t
] = 
MAX_MEM_LEVEL
;

1319 
	`as£π
(0=="reached");

1321 i‡(
ªc‹d
)

1322 
	`ªc‹d_›t
(
dp
, 
›t
, 
íåy_«me
);

1325 *
vÆue
 = 
dp
->vÆue[
›t
];

1327 
	}
}

1330 
	$föd_vÆ
(
di•œy
 *
dp
, 
≤g_byã
 
›t
, c⁄° *
°r
, 
size_t
 
Àn
)

1336 
æo
 = 
INT_MAX
, 
rhi
 = 
INT_MIN
;

1337 
≤g_byã
 
j
, 
ú™ge
 = 0;

1339 
j
=1U; j<=
›ti⁄s
[
›t
].
vÆue_cou¡
; ++j)

1341 i‡(
	`°∫cmp
(
›ti⁄s
[
›t
].
vÆues
[
j
-1U].
«me
, 
°r
, 
Àn
) == 0 &&

1342 
›ti⁄s
[
›t
].
vÆues
[
j
-1U].
«me
[
Àn
] == 0)

1344 
dp
->
íåy
[
›t
] = 
j
;

1345  
›ti⁄s
[
›t
].
vÆues
[
j
-1U].
vÆue
;

1347 i‡(
›ti⁄s
[
›t
].
vÆues
[
j
-1U].
«me
 =
ønge_lo
)

1348 
æo
 = 
›ti⁄s
[
›t
].
vÆues
[
j
-1U].
vÆue
, 
ú™ge
 = j;

1349 i‡(
›ti⁄s
[
›t
].
vÆues
[
j
-1U].
«me
 =
ønge_hi
)

1350 
rhi
 = 
›ti⁄s
[
›t
].
vÆues
[
j
-1U].
vÆue
;

1354 i‡(
ú™ge
 > 0)

1356 *
ï
 = 
NULL
;

1357 
l
 = 
	`°πﬁ
(
°r
, &
ï
, 0);

1359 i‡(
ï
 =
°r
+
Àn
 && 
l
 >
æo
 &&Ü <
rhi
)

1361 
dp
->
íåy
[
›t
] = 
ú™ge
;

1362  (Ë
l
;

1366 
	`di•œy_log
(
dp
, dp->
îr£t
 ? 
INTERNAL_ERROR
 : 
USER_ERROR
,

1367 "%s: unknow¿vÆuê£âög '%.*s'", 
›ti⁄s
[
›t
].
«me
,

1368 (Ë
Àn
, 
°r
);

1369 
	`ab‹t
();

1370 
	}
}

1373 
	$›t_check
(
di•œy
 *
dp
, c⁄° *
¨g
)

1375 
	`as£π
(
dp
->
îr£t
 == 0);

1377 i‡(
¨g
 !
NULL
 &&árg[0] == '-' &&árg[1] == '-')

1379 
i
 = 0, 
√g©e
 = (
	`°∫cmp
(
¨g
+2, "no-", 3Ë=0), 
vÆ
;

1380 
≤g_byã
 
j
;

1382 i‡(
√g©e
)

1383 
¨g
 += 5;

1386 
¨g
 += 2;

1389 
¨g
[
i
] != 0 &&árg[i] != '=') ++i;

1394 
j
 = 
	`›ti⁄_ödex
(
dp
, 
¨g
, 
i
);

1397 i‡(
¨g
[
i
] == 0)

1399 
vÆ
 = 
›ti⁄s
[
j
].
vÆues
[
√g©e
].
vÆue
;

1400 
dp
->
íåy
[
j
] = (
≤g_byã
Ë(
√g©e
 + 1U);

1405 c⁄° *
li°
 = 
¨g
 + (
i
+1);

1410 i‡(
›ti⁄s
[
j
].
›t
 !
LIST
)

1413 
vÆ
 = 
	`föd_vÆ
(
dp
, 
j
, 
li°
, 
	`°æí
(list));

1415 i‡(
√g©e
)

1417 i‡(
›ti⁄s
[
j
].
›t
 < 
OPTION
)

1418 
vÆ
 = !val;

1422 
	`di•œy_log
(
dp
, 
USER_ERROR
,

1423 "%.*s: o±i⁄˜rg c™nŸ bê√g©ed", 
i
, 
¨g
);

1424 
	`ab‹t
();

1436 i‡(
√g©e
)

1437 
vÆ
 = 
›ti⁄s
[
j
].
vÆues
[0].
vÆue
;

1440 
vÆ
 = 0;

1442 *
li°
 != 0)

1447 
v
, 
iv
;

1449 
iv
 = 0;

1450 
li°
[++
iv
] != 0 &&Üist[iv] != ',') {}

1452 
v
 = 
	`föd_vÆ
(
dp
, 
j
, 
li°
, 
iv
);

1454 i‡(
√g©e
)

1455 
vÆ
 &~
v
;

1458 
vÆ
 |
v
;

1460 
li°
 +
iv
;

1461 i‡(*
li°
 != 0)

1462 ++
li°
;

1468 
dp
->
vÆue
[
j
] = 
vÆ
;

1470 i‡(
›ti⁄s
[
j
].
›t
 < 
LEVEL_MASK
)

1473 i‡(
vÆ
)

1474 
dp
->
›ti⁄s
 = (dp->›ti⁄†& ~
LEVEL_MASK
Ë| o±i⁄s[
j
].
›t
;

1477 
	`di•œy_log
(
dp
, 
USER_ERROR
,

1479 
i
, 
¨g
);

1482 i‡(
›ti⁄s
[
j
].
›t
 < 
OPTION
)

1484 i‡(
vÆ
)

1485 
dp
->
›ti⁄s
 |›ti⁄s[
j
].
›t
;

1488 
dp
->
›ti⁄s
 &~›ti⁄s[
j
].
›t
;

1496 
	}
}

1498 #ifde‡
PNG_PNGCP_TIMING_SUPPORTED


1500 
	$£t_timî
(
di•œy
 *
dp
, 
time•ec
 *
timî
)

1503 i‡(
	`˛ock_gëtime
(
CLOCK_PROCESS_CPUTIME_ID
, 
timî
))

1505 
	`di•œy_log
(
dp
, 
APP_ERROR
,

1506 "CLOCK_PROCESS_CPUTIME_ID: %s:Åimög dißbÀd\n", 
	`°ªº‹
(
î∫o
));

1507 
dp
->
vÆue
[
	`OPTIND
(dp,
time
)] = 0;

1509 
	}
}

1512 
	$°¨t_timî
(
di•œy
 *
dp
, 
wh©
)

1514 i‡((
dp
->
vÆue
[
	`OPTIND
(dp,
time
)] & 
wh©
) != 0)

1515 
	`£t_timî
(
dp
, 
wh©
 =
PNGCP_TIME_READ
 ? &dp->
ªad_time
 : &dp->
wrôe_time
);

1516 
	}
}

1519 
	$íd_timî
(
di•œy
 *
dp
, 
wh©
)

1521 i‡((
dp
->
vÆue
[
	`OPTIND
(dp,
time
)] & 
wh©
) != 0)

1523 
time•ec
 
t
, 
tmp
;

1525 
	`£t_timî
(
dp
, &
t
);

1527 i‡(
wh©
 =
PNGCP_TIME_READ
)

1528 
tmp
 = 
dp
->
ªad_time
;

1531 
tmp
 = 
dp
->
wrôe_time
;

1533 
t
.
tv_£c
 -
tmp
.tv_sec;

1534 
t
.
tv_n£c
 -
tmp
.tv_nsec;

1536 i‡(
t
.
tv_n£c
 < 0)

1538 --(
t
.
tv_£c
);

1539 
t
.
tv_n£c
 += 1000000000L;

1542 i‡(
wh©
 =
PNGCP_TIME_READ
)

1543 
dp
->
ªad_time
 = 
t
, 
tmp
 = dp->
ªad_time_tŸÆ
;

1546 
dp
->
wrôe_time
 = 
t
, 
tmp
 = dp->
wrôe_time_tŸÆ
;

1548 
tmp
.
tv_£c
 +
t
.tv_sec;

1549 
tmp
.
tv_n£c
 +
t
.tv_nsec;

1551 i‡(
tmp
.
tv_n£c
 >= 1000000000L)

1553 ++(
tmp
.
tv_£c
);

1554 
tmp
.
tv_n£c
 -= 1000000000L;

1557 i‡(
wh©
 =
PNGCP_TIME_READ
)

1558 
dp
->
ªad_time_tŸÆ
 = 
tmp
;

1561 
dp
->
wrôe_time_tŸÆ
 = 
tmp
;

1563 
	}
}

1566 
	$¥öt_time
(c⁄° *
wh©
, 
time•ec
 
t
)

1568 
	`¥ötf
("%†%.2lu.%.9ld", 
wh©
, ()
t
.
tv_£c
,Å.
tv_n£c
);

1569 
	}
}

1571 
	#°¨t_timî
(
dp
, 
wh©
Ë(()0)

	)

1572 
	#íd_timî
(
dp
, 
wh©
Ë(()0)

	)

1579 
	$checkdú
(c⁄° *
∑th«me
)

1581 
°©
 
buf
;

1582  
	`°©
(
∑th«me
, &
buf
Ë=0 && 
	`S_ISDIR
(buf.
°_mode
);

1583 
	}
}

1591 
	$isdú
(
di•œy
 *
dp
, c⁄° *
∑th«me
)

1593 i‡(
∑th«me
 =
NULL
)

1596 i‡(
∑th«me
[0] == 0)

1601 
°©
 
buf
;

1602 
ªt
 = 
	`°©
(
∑th«me
, &
buf
);

1604 i‡(
ªt
 == 0)

1606 i‡(
	`S_ISDIR
(
buf
.
°_mode
))

1610 i‡(
	`ac˚ss
(
∑th«me
, 
W_OK
) != 0)

1611 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s: c™nŸ bêwrôã¿(%s)", 
∑th«me
,

1612 
	`°ªº‹
(
î∫o
));

1620 i‡(
î∫o
 !
ENOENT
)

1621 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s: invalid outputÇame (%s)",

1622 
∑th«me
, 
	`°ªº‹
(
î∫o
));

1627 
	}
}

1630 
	$makíame
(
di•œy
 *
dp
, c⁄° *
dú
, c⁄° *
öfûe
)

1633 
dp
->
«mebuf
[0] = 0;

1635 i‡(
dú
 =
NULL
 || 
öfûe
 == NULL)

1636 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
, "NULLÇameÅo makename");

1640 
size_t
 
dsize
 = 
	`°æí
(
dú
);

1642 i‡(
dsize
 <( 
dp
->
«mebuf
)-2)

1644 
size_t
 
isize
 = 
	`°æí
(
öfûe
);

1645 
size_t
 
i°¨t
 = 
isize
-1;

1648 i‡(
öfûe
[
i°¨t
] == '/')

1649 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
, "infile withÅrailing /");

1651 
	`mem˝y
(
dp
->
«mebuf
, 
dú
, 
dsize
);

1652 i‡(
dsize
 > 0 && 
dp
->
«mebuf
[dsize-1] != '/')

1653 
dp
->
«mebuf
[
dsize
++] = '/';

1656 
i°¨t
 > 0 && 
öfûe
[istart-1] != '/')

1657 --
i°¨t
;

1659 
isize
 -
i°¨t
;

1660 
öfûe
 +
i°¨t
;

1662 i‡(
dsize
+
isize
 < ( 
dp
->
«mebuf
))

1664 
	`mem˝y
(
dp
->
«mebuf
+
dsize
, 
öfûe
, 
isize
+1);

1666 i‡(
	`isdú
(
dp
, dp->
«mebuf
))

1667 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s: output file isá directory",

1668 
dp
->
«mebuf
);

1673 
dp
->
«mebuf
[
dsize
] = 0;

1674 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s%s: output fileÇameÅooÜong",

1675 
dp
->
«mebuf
, 
öfûe
);

1680 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s: ouçuàdúe˘‹yÇamêtoÿl⁄g", 
dú
);

1682 
	}
}

1685 
PNGCBAPI


1686 
	$di•œy_w¨nög
(
≤g_°ru˘p
 
µ
, 
≤g_c⁄°_ch¨p
 
w¨nög
)

1688 
di•œy
 *
dp
 = 
	`gë_dp
(
µ
);

1691 i‡(!
dp
->
no_w¨nögs
)

1692 
	`di•œy_log
(
	`gë_dp
(
µ
), 
LIBPNG_WARNING
, "%s", 
w¨nög
);

1693 
	}
}

1695 
PNGCBAPI


1696 
	$di•œy_îr‹
(
≤g_°ru˘p
 
µ
, 
≤g_c⁄°_ch¨p
 
îr‹
)

1698 
di•œy
 *
dp
 = 
	`gë_dp
(
µ
);

1700 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "%s", 
îr‹
);

1701 
	}
}

1704 
	$di•œy_°¨t_ªad
(
di•œy
 *
dp
, c⁄° *
fûíame
)

1706 i‡(
fûíame
 !
NULL
)

1708 
dp
->
fûíame
 = filename;

1709 
dp
->
Â
 = 
	`f›í
(
fûíame
, "rb");

1714 
dp
->
fûíame
 = "<stdin>";

1715 
dp
->
Â
 = 
°dö
;

1718 
dp
->
w
 = dp->
h
 = 0U;

1719 
dp
->
bµ
 = 0U;

1720 
dp
->
size
 = 0U;

1721 
dp
->
ªad_size
 = 0U;

1723 i‡(
dp
->
Â
 =
NULL
)

1724 
	`di•œy_log
(
dp
, 
USER_ERROR
, "fûê›í faûed (%s)", 
	`°ªº‹
(
î∫o
));

1725 
	}
}

1727 
PNGCBAPI


1728 
	$ªad_fun˘i⁄
(
≤g_°ru˘p
 
µ
, 
≤g_byãp
 
d©a
, 
size_t
 
size
)

1730 
di•œy
 *
dp
 = 
	`gë_dp
(
µ
);

1732 i‡(
size
 =0U || 
	`‰ód
(
d©a
, size, 1U, 
dp
->
Â
) == 1U)

1733 
dp
->
ªad_size
 +
size
;

1737 i‡(
	`„of
(
dp
->
Â
))

1738 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "PNG fileÅruncated");

1740 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "PNG fileÑead failed (%s)",

1741 
	`°ªº‹
(
î∫o
));

1743 
	}
}

1746 
	$ªad_≤g
(
di•œy
 *
dp
, c⁄° *
fûíame
)

1748 
	`di•œy_˛ón_ªad
(
dp
);

1749 
	`di•œy_°¨t_ªad
(
dp
, 
fûíame
);

1751 
dp
->
ªad_µ
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, dp,

1752 
di•œy_îr‹
, 
di•œy_w¨nög
);

1753 i‡(
dp
->
ªad_µ
 =
NULL
)

1754 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "failedÅo createÑead struct");

1756 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


1757 
	`≤g_£t_bíign_îr‹s
(
dp
->
ªad_µ
, 1 );

1760 #ifde‡
FIX_INDEX


1761 i‡((
dp
->
›ti⁄s
 & 
FIX_INDEX
) != 0)

1762 
	`≤g_£t_check_f‹_övÆid_ödex
(
dp
->
ªad_µ
, 1 );

1763 #ifde‡
IGNORE_INDEX


1767 #ifde‡
IGNORE_INDEX


1768 i‡((
dp
->
›ti⁄s
 & 
IGNORE_INDEX
) != 0)

1769 
	`≤g_£t_check_f‹_övÆid_ödex
(
dp
->
ªad_µ
, -1 );

1775 
dp
->
ù
 = 
	`≤g_¸óã_öfo_°ru˘
(dp->
ªad_µ
);

1776 i‡(
dp
->
ù
 =
NULL
)

1777 
	`≤g_îr‹
(
dp
->
ªad_µ
, "failedÅo create info struct");

1780 
	`≤g_£t_ªad_‚
(
dp
->
ªad_µ
, dp, 
ªad_fun˘i⁄
);

1782 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1783 
	`≤g_£t_kìp_unknown_chunks
(
dp
->
ªad_µ
, 
PNG_HANDLE_CHUNK_ALWAYS
, 
NULL
,

1787 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


1789 
	`≤g_£t_u£r_limôs
(
dp
->
ªad_µ
, 0x7fffffff, 0x7fffffff);

1793 
	`°¨t_timî
(
dp
, 
PNGCP_TIME_READ
);

1794 
	`≤g_ªad_≤g
(
dp
->
ªad_µ
, dp->
ù
, 0U , 
NULL
 );

1795 
	`íd_timî
(
dp
, 
PNGCP_TIME_READ
);

1796 
dp
->
w
 = 
	`≤g_gë_image_width
(dp->
ªad_µ
, dp->
ù
);

1797 
dp
->
h
 = 
	`≤g_gë_image_height
(dp->
ªad_µ
, dp->
ù
);

1798 
dp
->
˘
 = 
	`≤g_gë_cﬁ‹_ty≥
(dp->
ªad_µ
, dp->
ù
);

1799 
dp
->
bµ
 = 
	`≤g_gë_bô_dïth
(dp->
ªad_µ
, dp->
ù
) *

1800 
	`≤g_gë_ch™√ls
(
dp
->
ªad_µ
, dp->
ù
);

1806 
≤g_Æloc_size_t
 
rb
 = 
	`≤g_gë_rowbyãs
(
dp
->
ªad_µ
, dp->
ù
);

1808 i‡(
rb
 == 0)

1809 
	`≤g_îr‹
(
dp
->
ªad_µ
, "invalidÑow byte count fromÜibpng");

1812 i‡((
MAX_SIZE
-
dp
->
h
)/
rb
 < dp->h)

1813 
	`≤g_îr‹
(
dp
->
ªad_µ
, "imageÅooÜarge");

1815 
dp
->
size
 = 
rb
 * dp->
h
 + dp->h ;

1818 #ifde‡
FIX_INDEX


1819 i‡(
dp
->
˘
 =
PNG_COLOR_TYPE_PALETTE
 && (dp->
›ti⁄s
 & 
FIX_INDEX
) != 0)

1821 
max
 = 
	`≤g_gë_∑Àâe_max
(
dp
->
ªad_µ
, dp->
ù
);

1822 
≤g_cﬁ‹p
 
∑Àâe
 = 
NULL
;

1823 
num
 = -1;

1825 i‡(
	`≤g_gë_PLTE
(
dp
->
ªad_µ
, dp->
ù
, &
∑Àâe
, &
num
Ë!
PNG_INFO_PLTE


1826 || 
max
 < 0 || 
num
 <0 || 
∑Àâe
 =
NULL
)

1827 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "invalidÖng_get_PLTEÑesult");

1829 i‡(
max
 >
num
)

1832 
i
;

1833 
≤g_cﬁ‹
 
√w∑l
[256];

1835 
i
=0; i<
num
; ++i)

1836 
√w∑l
[
i
] = 
∑Àâe
[i];

1839 ; 
i
<=
max
; ++i)

1841 
√w∑l
[
i
].
ªd
 = 0xbe;

1842 
√w∑l
[
i
].
gªí
 = 0xad;

1843 
√w∑l
[
i
].
blue
 = 0xed;

1846 
	`≤g_£t_PLTE
(
dp
->
ªad_µ
, dp->
ù
, 
√w∑l
, 
i
);

1851 
	`di•œy_˛ón_ªad
(
dp
);

1852 
dp
->
›î©i⁄
 = "none";

1853 
	}
}

1856 
	$di•œy_°¨t_wrôe
(
di•œy
 *
dp
, c⁄° *
fûíame
)

1858 
	`as£π
(
dp
->
Â
 =
NULL
);

1860 i‡((
dp
->
›ti⁄s
 & 
NOWRITE
) != 0)

1861 
dp
->
ouçut_fûe
 = "<no write>";

1865 i‡(
fûíame
 !
NULL
)

1867 
dp
->
ouçut_fûe
 = 
fûíame
;

1868 
dp
->
Â
 = 
	`f›í
(
fûíame
, "wb");

1873 
dp
->
ouçut_fûe
 = "<stdout>";

1874 
dp
->
Â
 = 
°dout
;

1877 i‡(
dp
->
Â
 =
NULL
)

1878 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s: file open failed (%s)",

1879 
dp
->
ouçut_fûe
, 
	`°ªº‹
(
î∫o
));

1881 
	}
}

1883 
PNGCBAPI


1884 
	$wrôe_fun˘i⁄
(
≤g_°ru˘p
 
µ
, 
≤g_byãp
 
d©a
, 
size_t
 
size
)

1886 
di•œy
 *
dp
 = 
	`gë_dp
(
µ
);

1891 i‡(
dp
->
Â
 =
NULL
 || 
	`fwrôe
(
d©a
, 
size
, 1U, dp->fp) == 1U)

1893 
dp
->
wrôe_size
 +
size
;

1894 i‡(
dp
->
wrôe_size
 < 
size
 || dp->wrôe_sizê=
MAX_SIZE
)

1895 
	`≤g_îr‹
(
µ
, "IDAT size overflow");

1899 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s: PNG file write failed (%s)",

1900 
dp
->
ouçut_fûe
, 
	`°ªº‹
(
î∫o
));

1901 
	}
}

1910 
	#SET_COMPRESSION
\

1911 
	`SET
(
°øãgy
, strategy);\

1912 
	`SET
(
wödowBôs
, 
wödow_bôs
);\

1913 
	`SET
(
Àvñ
,Üevel);\

1914 
	`SET
(
memLevñ
, 
mem_Àvñ
);

	)

1916 #ifde‡
PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED


1918 
	$£¨ch_com¥essi⁄
(
di•œy
 *
dp
)

1921 
vÆ
;

1923 
	#SET
(
«me
, 
func
Ëi‡(
	`gë£¨ch›ts
(
dp
, #«me, &
vÆ
))\

1924 
≤g_£t_com¥essi⁄_
 ## 
	`func
(
dp
->
wrôe_µ
, 
vÆ
);

	)

1925 
SET_COMPRESSION


1926 #unde‡
SET


1927 
	}
}

1930 
	$£t_com¥essi⁄
(
di•œy
 *
dp
)

1932 
vÆ
;

1934 
	#SET
(
«me
, 
func
Ëi‡(
	`gëÆl›ts
(
dp
, #«me, &
vÆ
))\

1935 
≤g_£t_com¥essi⁄_
 ## 
	`func
(
dp
->
wrôe_µ
, 
vÆ
);

	)

1936 
SET_COMPRESSION


1937 #unde‡
SET


1938 
	}
}

1940 #ifde‡
PNG_SW_COMPRESS_Àvñ


1942 
	$£t_ICC_¥ofûe_com¥essi⁄
(
di•œy
 *
dp
)

1944 
vÆ
;

1946 
	#SET
(
«me
, 
func
Ëi‡(
	`gëÆl›ts
(
dp
, "ICC-¥ofûe-" #«me, &
vÆ
))\

1947 
≤g_£t_ICC_¥ofûe_com¥essi⁄_
 ## 
	`func
(
dp
->
wrôe_µ
, 
vÆ
);

	)

1948 
SET_COMPRESSION


1949 #unde‡
SET


1950 
	}
}

1952 
	#£t_ICC_¥ofûe_com¥essi⁄
(
dp
Ë(()0)

	)

1955 
	#£¨ch_com¥essi⁄
(
dp
Ë(()0)

	)

1956 
	#£t_com¥essi⁄
(
dp
Ë(()0)

	)

1957 
	#£t_ICC_¥ofûe_com¥essi⁄
(
dp
Ë(()0)

	)

1960 #ifde‡
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


1962 
	$£t_ãxt_com¥essi⁄
(
di•œy
 *
dp
)

1964 
vÆ
;

1966 
	#SET
(
«me
, 
func
Ëi‡(
	`gëÆl›ts
(
dp
, "ãxt-" #«me, &
vÆ
))\

1967 
≤g_£t_ãxt_com¥essi⁄_
 ## 
	`func
(
dp
->
wrôe_µ
, 
vÆ
);

	)

1968 
SET_COMPRESSION


1969 #unde‡
SET


1970 
	}
}

1972 
	#£t_ãxt_com¥essi⁄
(
dp
Ë(()0)

	)

1976 
	$wrôe_≤g
(
di•œy
 *
dp
, c⁄° *
de°«me
)

1978 
	`di•œy_˛ón_wrôe
(
dp
);

1979 
	`di•œy_°¨t_wrôe
(
dp
, 
de°«me
);

1981 
dp
->
wrôe_µ
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
, dp,

1982 
di•œy_îr‹
, 
di•œy_w¨nög
);

1984 i‡(
dp
->
wrôe_µ
 =
NULL
)

1985 
	`di•œy_log
(
dp
, 
LIBPNG_ERROR
, "failedÅo create writeÖng_struct");

1987 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


1988 
	`≤g_£t_bíign_îr‹s
(
dp
->
wrôe_µ
, 1 );

1991 
	`≤g_£t_wrôe_‚
(
dp
->
wrôe_µ
, dp, 
wrôe_fun˘i⁄
, 
NULL
 );

1993 #ifde‡
IGNORE_INDEX


1994 i‡((
dp
->
›ti⁄s
 & 
IGNORE_INDEX
) != 0)

1995 
	`≤g_£t_check_f‹_övÆid_ödex
(
dp
->
wrôe_µ
, -1 );

2002 
	`ãxt_ª°‹e
(
dp
);

2004 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


2005 
	`≤g_£t_kìp_unknown_chunks
(
dp
->
wrôe_µ
, 
PNG_HANDLE_CHUNK_ALWAYS
, 
NULL
,

2009 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2011 
	`≤g_£t_u£r_limôs
(
dp
->
wrôe_µ
, 0x7fffffff, 0x7fffffff);

2016 
dp
->
t•
 = dp->
n•
;

2017 
dp
->
n•
 = dp->
c•
 = 0;

2018 #ifde‡
PNG_SW_COMPRESS_≤g_Àvñ


2020 
vÆ
;

2025 i‡(
	`gëÆl›ts
(
dp
, "com¥essi⁄", &
vÆ
))

2026 
	`≤g_£t_com¥essi⁄
(
dp
->
wrôe_µ
, 
vÆ
);

2028 i‡(
	`gëÆl›ts
(
dp
, "ICC-¥ofûe-com¥essi⁄", &
vÆ
))

2029 
	`≤g_£t_ICC_¥ofûe_com¥essi⁄
(
dp
->
wrôe_µ
, 
vÆ
);

2031 i‡(
	`gëÆl›ts
(
dp
, "ãxt-com¥essi⁄", &
vÆ
))

2032 
	`≤g_£t_ãxt_com¥essi⁄
(
dp
->
wrôe_µ
, 
vÆ
);

2035 i‡(
dp
->
›ti⁄s
 & 
SEARCH
)

2036 
	`£¨ch_com¥essi⁄
(
dp
);

2038 
	`£t_com¥essi⁄
(
dp
);

2039 
	`£t_ICC_¥ofûe_com¥essi⁄
(
dp
);

2040 
	`£t_ãxt_com¥essi⁄
(
dp
);

2043 
vÆ
;

2046 i‡(
	`gë_›ti⁄
(
dp
, "IDAT-size", &
vÆ
))

2047 
	`≤g_£t_IDAT_size
(
dp
->
wrôe_µ
, 
vÆ
);

2051 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


2053 
vÆ
;

2055 i‡(
	`gë_›ti⁄
(
dp
, "fûãr", &
vÆ
))

2056 
	`≤g_£t_fûãr
(
dp
->
wrôe_µ
, 
PNG_FILTER_TYPE_BASE
, 
vÆ
);

2061 
dp
->
wrôe_size
 = 0U;

2062 
	`°¨t_timî
(
dp
, 
PNGCP_TIME_WRITE
);

2063 
	`≤g_wrôe_≤g
(
dp
->
wrôe_µ
, dp->
ù
, 0U , 
NULL
 );

2064 
	`íd_timî
(
dp
, 
PNGCP_TIME_WRITE
);

2067 i‡(
dp
->
Â
 !
NULL
)

2069 
FILE
 *
Â
 = 
dp
->fp;

2070 
dp
->
Â
 = 
NULL
;

2071 i‡(
	`f˛o£
(
Â
))

2072 
	`di•œy_log
(
dp
, 
APP_ERROR
, "%s: write failed (%s)",

2073 
de°«me
 =
NULL
 ? "°dout" : de°«me, 
	`°ªº‹
(
î∫o
));

2079 
	`di•œy_˛ón_wrôe
(
dp
);

2080 
dp
->
›î©i⁄
 = "none";

2081 
	}
}

2084 
	$£t_wödowBôs_hi
(
di•œy
 *
dp
)

2089 
wb
 = 
MAX_WBITS
;

2090 
i
 = 
	`VLSIZE
(
wödowBôs_IDAT
);

2092 
wb
 > 8 && 
dp
->
size
 <= 1U<<(wb-1)) --wb;

2094 --
i
 >0Ëi‡(
	`VLNAME
(
wödowBôs_IDAT
)[i].
«me
 =
ønge_hi
) ;

2096 
	`as£π
(
i
 > 1);

2097 
	`VLNAME
(
wödowBôs_IDAT
)[
i
].
vÆue
 = 
wb
;

2099 
	`as£π
(
	`VLNAME
(
wödowBôs_IDAT
)[--
i
].
«me
 =
ønge_lo
);

2100 
	`VLNAME
(
wödowBôs_IDAT
)[
i
].
vÆue
 = 
wb
 > 8 ? 9 : 8;

2106 i‡(
wb
 == 8)

2107 
dp
->
mö_wödowBôs
 = 
	`OPTIND
(dp, 
wödowBôs
);

2108 
	}
}

2111 
	$bëãr_›ti⁄s
(c⁄° 
di•œy
 *
dp
)

2127 
•
;

2129 
•
=0; sp<
dp
->
c•
; ++sp)

2131 
c
 = 
	`com∑ª_›ti⁄
(
dp
, 
•
);

2133 i‡(
c
 < 0)

2136 i‡(
c
 > 0)

2140 
	`as£π
(0 && "unreached");

2141 
	}
}

2144 
	$¥öt_£¨ch_ªsu…s
(
di•œy
 *
dp
)

2146 
	`as£π
(
dp
->
fûíame
 !
NULL
);

2147 
	`¥ötf
("%s [%ld x %ld %d bpp %s, %lu bytes] %lu -> %lu with '%s'\n",

2148 
dp
->
fûíame
, ()dp->
w
, ()dp->
h
, dp->
bµ
,

2149 
	`˘s
(
dp
->
˘
), ()dp->
size
, ()dp->
ªad_size
,

2150 ()
dp
->
be°_size
, dp->
be°
);

2151 
	`fÊush
(
°dout
);

2152 
	}
}

2155 
	$log_£¨ch
(
di•œy
 *
dp
, 
log_dïth
)

2158 i‡(
dp
->
n•
 <
log_dïth
)

2160 
	`¥öt_£¨ch_ªsu…s
(
dp
);

2162 
dp
->
be°_size
 = 
MAX_SIZE
;

2164 
	}
}

2167 
	$˝_⁄e_fûe
(
di•œy
 *
dp
, c⁄° *
fûíame
, c⁄° *
de°«me
)

2169 
log_dïth
;

2171 
dp
->
fûíame
 = filename;

2172 
dp
->
›î©i⁄
 = "read";

2173 
dp
->
no_w¨nögs
 = 0;

2176 i‡(
fûíame
 !
NULL
 && 
	`ac˚ss
(fûíame, 
R_OK
) != 0)

2177 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s: invalid fileÇame (%s)",

2178 
fûíame
, 
	`°ªº‹
(
î∫o
));

2180 
	`ªad_≤g
(
dp
, 
fûíame
);

2183 
dp
->
›î©i⁄
 = "write";

2186 
	`£t_wödowBôs_hi
(
dp
);

2190 
vÆ
;

2192 i‡(
	`gë_›ti⁄
(
dp
, "log-dïth", &
vÆ
) && val >= 0)

2193 
log_dïth
 = (Ë
vÆ
;

2196 
log_dïth
 = 0U;

2199 i‡(
de°«me
 !
NULL
)

2201 i‡(
	`isdú
(
dp
, 
de°«me
))

2203 
	`makíame
(
dp
, 
de°«me
, 
fûíame
);

2204 
de°«me
 = 
dp
->
«mebuf
;

2207 i‡(
	`ac˚ss
(
de°«me
, 
W_OK
Ë!0 && 
î∫o
 !
ENOENT
)

2208 
	`di•œy_log
(
dp
, 
USER_ERROR
, "%s: invÆid ouçuà«mê(%s)", 
de°«me
,

2209 
	`°ªº‹
(
î∫o
));

2212 
dp
->
n•
 = 0;

2213 
dp
->
cuº
[0] = 0;

2214 
dp
->
›t_°rög_°¨t
 = 0;

2215 
dp
->
be°
[0] = 0;

2216 
dp
->
be°_size
 = 
MAX_SIZE
;

2217 
	`wrôe_≤g
(
dp
, 
de°«me
);

2220 
	`°r˝y
(
dp
->
be°
, dp->
cuº
);

2221 
dp
->
be°_size
 = dp->
wrôe_size
;

2223 i‡(
dp
->
n•
 > 0)

2225 *
tm≤ame
, 
tmpbuf
[( 
dp
->
«mebuf
) + 4];

2226 
	`as£π
(
dp
->
cuº
[0] =' ' && dp->
t•
 > 0);

2229 
	`log_£¨ch
(
dp
, 
log_dïth
);

2230 
dp
->
no_w¨nögs
 = 1;

2233 i‡(
de°«me
 !
NULL
)

2235 
	`°r˝y
(
tmpbuf
, 
de°«me
);

2236 
	`°rˇt
(
tmpbuf
, ".tmp");

2237 
tm≤ame
 = 
tmpbuf
;

2241 
tm≤ame
 = 
NULL
;

2246 
	`wrôe_≤g
(
dp
, 
tm≤ame
);

2251 
	`as£π
(
dp
->
c•
 > 0);

2253 i‡(
dp
->
wrôe_size
 < dp->
be°_size
 ||

2254 (
dp
->
wrôe_size
 =dp->
be°_size
 && 
	`bëãr_›ti⁄s
(dp)))

2256 i‡(
de°«me
 !
NULL
 && 
	`ª«me
(
tm≤ame
, destname) != 0)

2257 
	`di•œy_log
(
dp
, 
APP_ERROR
, "ª«mê%†%†Áûed (%s)", 
tm≤ame
,

2258 
de°«me
, 
	`°ªº‹
(
î∫o
));

2260 
	`°r˝y
(
dp
->
be°
, dp->
cuº
);

2261 
dp
->
be°_size
 = dp->
wrôe_size
;

2264 i‡(
tm≤ame
 !
NULL
 && 
	`u∆ök
(tmpname) != 0)

2265 
	`di•œy_log
(
dp
, 
APP_WARNING
, "u∆ök %†Áûed (%s)", 
tm≤ame
,

2266 
	`°ªº‹
(
î∫o
));

2268 
	`log_£¨ch
(
dp
, 
log_dïth
);

2270 
dp
->
n•
 > 0);

2273 
dp
->
wrôe_size
 = dp->
be°_size
;

2275 
	}
}

2278 
	$˝≤g
(
di•œy
 *
dp
, c⁄° *
fûe
, c⁄° *
gv
 
de°
)

2283 
ªt
 = 
	`£tjmp
(
dp
->
îr‹_ªtu∫
);

2285 i‡(
ªt
 == 0)

2287 
dp
->
îr£t
 = 1;

2288 
	`˝_⁄e_fûe
(
dp
, 
fûe
, 
de°
);

2289 
dp
->
îr£t
 = 0;

2295 
dp
->
îr£t
 = 0;

2297 i‡(
ªt
 < 
ERRORS
)

2298 
	`di•œy_log
(
dp
, 
INTERNAL_ERROR
, "u√x≥˘edÑëu∫ codê%d", 
ªt
);

2300  
ªt
;

2302 
	}
}

2305 
	$maö
(
¨gc
, **
¨gv
)

2308 
›ti⁄_íd
;

2309 
di•œy
 
d
;

2311 
	`di•œy_öô
(&
d
);

2313 
d
.
›î©i⁄
 = "options";

2314 
›ti⁄_íd
 = 1;

2315 
›ti⁄_íd
 < 
¨gc
 && 
	`›t_check
(&
d
, 
¨gv
[option_end]);

2316 ++
›ti⁄_íd
)

2323 i‡(!(
d
.
›ti⁄s
 & 
NOWRITE
Ë&& 
›ti⁄_íd
+2 < 
¨gc
 && !
	`checkdú
(
¨gv
[argc-1]))

2325 
	`Ârötf
(
°dîr
,

2327 
¨gv
[
¨gc
-1]);

2332 
îr‹s
 = 0;

2333 
i
 = 
›ti⁄_íd
;

2337 
d
.
›î©i⁄
 = "files";

2340 c⁄° *
öfûe
 = 
NULL
;

2341 c⁄° *
outfûe
 = 
NULL
;

2342 
ªt
;

2344 i‡(
i
 < 
¨gc
)

2346 
öfûe
 = 
¨gv
[
i
++];

2347 i‡(!(
d
.
›ti⁄s
 & 
NOWRITE
Ë&& 
i
 < 
¨gc
)

2348 
outfûe
 = 
¨gv
[
¨gc
-1];

2351 
ªt
 = 
	`˝≤g
(&
d
, 
öfûe
, 
outfûe
);

2353 i‡(
ªt
)

2355 i‡(
ªt
 > 
QUIET
)

2361 i‡(
d
.
be°
[0] != 0)

2366 i‡(
d
.
be°_size
 < 
MAX_SIZE
)

2367 
	`¥öt_£¨ch_ªsu…s
(&
d
);

2370 i‡(
d
.
›ti⁄s
 & 
SIZES
)

2372 
	`¥ötf
("%s [%ld x %ld %d bpp %s, %lu bytes] %lu -> %lu [0x%lx]\n",

2373 
öfûe
, ()
d
.
w
, ()d.
h
, d.
bµ
,

2374 
	`˘s
(
d
.
˘
), ()d.
size
, ()d.
ªad_size
,

2375 ()
d
.
wrôe_size
, ()d.
ªsu…s
);

2376 
	`fÊush
(
°dout
);

2382 
∑ss
 = (
d
.
›ti⁄s
 & 
STRICT
) ?

2383 
	`RESULT_STRICT
(
d
.
ªsu…s
Ë: 
	`RESULT_RELAXED
(d.results);

2385 i‡(!
∑ss
)

2386 ++
îr‹s
;

2388 i‡(
d
.
›ti⁄s
 & 
LOG
)

2390 
j
;

2392 
	`¥ötf
("%s:Öng˝", 
∑ss
 ? "PASS" : "FAIL");

2394 
j
=1; j<
›ti⁄_íd
; ++j)

2395 
	`¥ötf
(" %s", 
¨gv
[
j
]);

2397 i‡(
öfûe
 !
NULL
)

2398 
	`¥ötf
(" %s", 
öfûe
);

2400 #ifde‡
PNG_PNGCP_TIMING_SUPPORTED


2402 i‡((
d
.
vÆue
[
	`OPTIND
(&d,
time
)] & 
PNGCP_TIME_READ
) != 0)

2403 
	`¥öt_time
("Ñód", 
d
.
ªad_time
);

2405 i‡((
d
.
vÆue
[
	`OPTIND
(&d,
time
)] & 
PNGCP_TIME_WRITE
) != 0)

2406 
	`¥öt_time
(" wrôe", 
d
.
wrôe_time
);

2409 
	`¥ötf
("\n");

2410 
	`fÊush
(
°dout
);

2414 
	`di•œy_˛ón
(&
d
);

2416 
i
+!(
d
.
›ti⁄s
 & 
NOWRITE
Ë< 
¨gc
);

2423 
	`di•œy_de°roy
(&
d
);

2425 #ifde‡
PNG_PNGCP_TIMING_SUPPORTED


2427 
ouçut
 = 0;

2429 i‡((
d
.
vÆue
[
	`OPTIND
(&d,
time
)] & 
PNGCP_TIME_READ
) != 0)

2430 
	`¥öt_time
("ªad", 
d
.
ªad_time_tŸÆ
), 
ouçut
 = 1;

2432 i‡((
d
.
vÆue
[
	`OPTIND
(&d,
time
)] & 
PNGCP_TIME_WRITE
) != 0)

2434 i‡(
ouçut
Ë
	`putch¨
(' ');

2435 
	`¥öt_time
("wrôe", 
d
.
wrôe_time_tŸÆ
);

2436 
ouçut
 = 1;

2439 i‡(
ouçut
Ë
	`putch¨
('\n');

2443  
îr‹s
 != 0;

2445 
	}
}

2448 
	$maö
()

2450 
	`Ârötf
(
°dîr
, "pngcp:Ço support forÖng_read/write_image\n");

2452 
	}
}

	@contrib/tools/pngfix.c

13 
	~<°dlib.h
>

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 
	~<˘y≥.h
>

17 
	~<limôs.h
>

18 
	~<î∫o.h
>

19 
	~<as£π.h
>

21 
	#im∂õs
(
x
,
y
Ë
	`as£π
(!(xË|| (y))

	)

23 #ifde‡
__GNUC__


31 
	#FIX_GCC
 vﬁ©ûe

	)

33 
	#FIX_GCC


	)

36 
	#PROGRAM_NAME
 "≤gfix"

	)

41 #ifde‡
PNG_FREESTANDING_TESTS


42 
	~<≤g.h
>

44 
	~"../../≤g.h
"

47 #i‡
PNG_LIBPNG_VER
 < 10603

51 #ifde‡
PNG_SETJMP_SUPPORTED


52 
	~<£tjmp.h
>

54 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë&& deföed(
PNG_EASY_ACCESS_SUPPORTED
) &&\

55 (
deföed
(
PNG_READ_DEINTERLACE_SUPPORTED
) ||\

56 
	$deföed
(
PNG_READ_INTERLACING_SUPPORTED
))

62 #i‚de‡
ZLIB_CONST


64 
	#ZLIB_CONST


	)

66 
	~<zlib.h
>

75 #i‡
ZLIB_VERNUM
 < 0x1260

76 
	#PNGZ_MSG_CAST
(
s
Ë
	`c⁄°ˇ°
(*,s)

	)

77 
	#PNGZ_INPUT_CAST
(
b
Ë
	`c⁄°ˇ°
(
≤g_byãp
,b)

	)

79 
	#PNGZ_MSG_CAST
(
s
Ë(s)

	)

80 
	#PNGZ_INPUT_CAST
(
b
Ë(b)

	)

83 #i‚de‡
PNG_MAXIMUM_INFLATE_WINDOW


87 #i‡
ZLIB_VERNUM
 >= 0x1240

90 #ifde‡
__˝lu•lus


91 
	#voidˇ°
(
ty≥
, 
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

92 
	#c⁄°ˇ°
(
ty≥
, 
vÆue
Ë
c⁄°_ˇ°
<ty≥>(vÆue)

	)

93 
	#Æignˇ°
(
ty≥
, 
vÆue
) \

94 
°©ic_ˇ°
<
ty≥
>(°©ic_ˇ°<*>(
vÆue
))

	)

95 
	#Æignˇ°c⁄°
(
ty≥
, 
vÆue
) \

96 
°©ic_ˇ°
<
ty≥
>(°©ic_ˇ°<c⁄° *>(
vÆue
))

	)

98 
	#voidˇ°
(
ty≥
, 
vÆue
Ë(vÆue)

	)

99 
	#c⁄°ˇ°
(
ty≥
, 
vÆue
Ë(—y≥)(vÆue))

	)

100 
	#Æignˇ°
(
ty≥
, 
vÆue
Ë((*)(vÆue))

	)

101 
	#Æignˇ°c⁄°
(
ty≥
, 
vÆue
Ë((c⁄° *)(vÆue))

	)

104 #i‡
PNG_LIBPNG_VER
 < 10700

106 
	#PNG_32b
(
b
,
s
Ë((
≤g_uöt_32
)(bË<< (s))

	)

107 
	#PNG_U32
(
b1
,
b2
,
b3
,
b4
) \

108 (
	`PNG_32b
(
b1
,24Ë| PNG_32b(
b2
,16Ë| PNG_32b(
b3
,8Ë| PNG_32b(
b4
,0))

	)

111 
	#≤g_IDAT
 
	`PNG_U32
–73, 68, 65, 84)

	)

112 
	#≤g_IEND
 
	`PNG_U32
–73, 69, 78, 68)

	)

113 
	#≤g_IHDR
 
	`PNG_U32
–73, 72, 68, 82)

	)

114 
	#≤g_PLTE
 
	`PNG_U32
–80, 76, 84, 69)

	)

115 
	#≤g_bKGD
 
	`PNG_U32
–98, 75, 71, 68)

	)

116 
	#≤g_cHRM
 
	`PNG_U32
–99, 72, 82, 77)

	)

117 
	#≤g_fRAc
 
	`PNG_U32
(102, 82, 65, 99Ë

	)

118 
	#≤g_gAMA
 
	`PNG_U32
(103, 65, 77, 65)

	)

119 
	#≤g_gIFg
 
	`PNG_U32
(103, 73, 70, 103)

	)

120 
	#≤g_gIFt
 
	`PNG_U32
(103, 73, 70, 116Ë

	)

121 
	#≤g_gIFx
 
	`PNG_U32
(103, 73, 70, 120)

	)

122 
	#≤g_hIST
 
	`PNG_U32
(104, 73, 83, 84)

	)

123 
	#≤g_iCCP
 
	`PNG_U32
(105, 67, 67, 80)

	)

124 
	#≤g_iTXt
 
	`PNG_U32
(105, 84, 88, 116)

	)

125 
	#≤g_oFFs
 
	`PNG_U32
(111, 70, 70, 115)

	)

126 
	#≤g_pCAL
 
	`PNG_U32
(112, 67, 65, 76)

	)

127 
	#≤g_pHYs
 
	`PNG_U32
(112, 72, 89, 115)

	)

128 
	#≤g_sBIT
 
	`PNG_U32
(115, 66, 73, 84)

	)

129 
	#≤g_sCAL
 
	`PNG_U32
(115, 67, 65, 76)

	)

130 
	#≤g_sPLT
 
	`PNG_U32
(115, 80, 76, 84)

	)

131 
	#≤g_sRGB
 
	`PNG_U32
(115, 82, 71, 66)

	)

132 
	#≤g_sTER
 
	`PNG_U32
(115, 84, 69, 82)

	)

133 
	#≤g_tEXt
 
	`PNG_U32
(116, 69, 88, 116)

	)

134 
	#≤g_tIME
 
	`PNG_U32
(116, 73, 77, 69)

	)

135 
	#≤g_tRNS
 
	`PNG_U32
(116, 82, 78, 83)

	)

136 
	#≤g_zTXt
 
	`PNG_U32
(122, 84, 88, 116)

	)

140 
	#sig1
 
	`PNG_U32
(137, 80, 78, 71)

	)

141 
	#sig2
 
	`PNG_U32
–13, 10, 26, 10)

	)

144 
	#CRITICAL
(
chunk
Ë(((chunkË& 
	`PNG_U32
(32,0,0,0)Ë=0)

	)

147 
	#SAFE_TO_COPY
(
chunk
Ë(((chunkË& 
	`PNG_U32
(0,0,0,32)Ë!0)

	)

150 #i‚de‡
PNG_ERROR_TEXT_SUPPORTED


151 
	#≤g_îr‹
(
a
,
b
Ë
	`≤g_îr
◊)

	)

159 
	#UNREACHED
 0

	)

173 
≤g_uöt_16
 
	tudigô
;

174 
≤g_uöt_16p
 
	tu¨b
;

175 
≤g_c⁄°_uöt_16p
 
	tu¨bc
;

177 
	#UDIGITS
(
unum
Ë(( unum)/( (
udigô
))

	)

183 
	$u¨b_£t
(
u¨b
 
ªsu…
, 
≤g_Æloc_size_t
 
vÆ
)

188 
ndigôs
 = 0;

190 
vÆ
 > 0)

192 
ªsu…
[
ndigôs
++] = (
≤g_uöt_16
)(
vÆ
 & 0xffff);

193 
vÆ
 >>= 16;

196  
ndigôs
;

197 
	}
}

200 
	$u¨b_c›y
(
u¨b
 
to
, u¨b 
‰om
, 
idigôs
)

203 
d
, 
odigôs
;

205 
d
=
odigôs
=0; d<
idigôs
; ++d)

206 i‡((
to
[
d
] = 
‰om
[d]) != 0)

207 
odigôs
 = 
d
+1;

209  
odigôs
;

210 
	}
}

213 
	$u¨b_öc
(
u¨b
 
num
, 
ö_digôs
, 
≤g_öt_32
 
add
)

221 
FIX_GCC
 
out_digôs
 = 0;

223 
out_digôs
 < 
ö_digôs
)

225 
add
 +
num
[
out_digôs
];

226 
num
[
out_digôs
++] = (
≤g_uöt_16
)(
add
 & 0xffff);

227 
add
 >>= 16;

230 
add
 != 0 &&ádd != (-1))

232 
num
[
out_digôs
++] = (
≤g_uöt_16
)(
add
 & 0xffff);

233 
add
 >>= 16;

236 i‡(
add
 == 0)

238 
out_digôs
 > 0 && 
num
[out_digits-1] == 0)

239 --
out_digôs
;

240  
out_digôs
;

245 
out_digôs
 > 1 && 
num
[out_digits-1] == 0xffff)

246 --
out_digôs
;

248  -
out_digôs
;

250 
	}
}

253 
	$u¨b_add32
(
u¨b
 
num
, 
ö_digôs
, 
≤g_uöt_32
 
add
)

256 i‡(
ö_digôs
 > 0)

258 
ö_digôs
 = 
	`u¨b_öc
(
num
, in_digôs, 
add
 & 0xffff);

259  
	`u¨b_öc
(
num
+1, 
ö_digôs
-1, 
add
 >> 16)+1;

262  
	`u¨b_£t
(
num
, 
add
);

263 
	}
}

266 
	$u¨b_mu…_digô
(
u¨b
 
acc
, 
a_digôs
, u¨b 
num
, 
FIX_GCC
 
n_digôs
,

267 
≤g_uöt_16
 
vÆ
)

283 i‡(
vÆ
 > 0 && 
n_digôs
 > 0)

285 
≤g_uöt_32
 
ˇºy
 = 0;

286 
out_digôs
 = 0;

288 
out_digôs
 < 
n_digôs
 || 
ˇºy
 > 0)

290 i‡(
out_digôs
 < 
a_digôs
)

291 
ˇºy
 +
acc
[
out_digôs
];

293 i‡(
out_digôs
 < 
n_digôs
)

294 
ˇºy
 +(
≤g_uöt_32
)
num
[
out_digôs
] * 
vÆ
;

296 
acc
[
out_digôs
++] = (
≤g_uöt_16
)(
ˇºy
 & 0xffff);

297 
ˇºy
 >>= 16;

303 i‡(
out_digôs
 > 
a_digôs
)

304  
out_digôs
;

307  
a_digôs
;

308 
	}
}

311 
	$u¨b_mu…32
(
u¨b
 
acc
, 
a_digôs
, u¨b 
num
, 
n_digôs
, 
≤g_uöt_32
 
vÆ
)

316 i‡(
n_digôs
 > 0 && 
vÆ
 > 0)

318 
a_digôs
 = 
	`u¨b_mu…_digô
(
acc
,á_digôs, 
num
, 
n_digôs
,

319 (
≤g_uöt_16
)(
vÆ
 & 0xffff));

321 
vÆ
 >>= 16;

322 i‡(
vÆ
 > 0)

323 
a_digôs
 = 
	`u¨b_mu…_digô
(
acc
+1,á_digôs-1, 
num
, 
n_digôs
,

324 (
≤g_uöt_16
)
vÆ
) + 1;

327 
	`as£π
(
a_digôs
 > 0);

330  
a_digôs
;

331 
	}
}

334 
	$u¨b_shi·
(
u¨b
 
öout
, 
ndigôs
, 
right_shi·
)

339 
FIX_GCC
 
i
 = 
ndigôs
;

340 
≤g_uöt_16
 
ˇºy
 = 0;

342 
	`as£π
(
right_shi·
 >= 1 &&Ñight_shift <= 15);

344 --
i
 >= 0)

346 
≤g_uöt_16
 
ãmp
 = (≤g_uöt_16)(
ˇºy
 | (
öout
[
i
] >> 
right_shi·
));

349 
ˇºy
 = (
≤g_uöt_16
)((
öout
[
i
] << (16-
right_shi·
)) & 0xffff);

351 
öout
[
i
] = 
ãmp
;

354 i‡(
i
 =
ndigôs
-1 && 
ãmp
 == 0)

355 
ndigôs
 = 
i
;

358  
ndigôs
;

359 
	}
}

362 
	$u¨b_cmp
(
u¨b
 
a
, 
adigôs
, u¨b 
b
, 
bdigôs
)

365 i‡(
adigôs
 < 
bdigôs
)

368 i‡(
adigôs
 > 
bdigôs
)

371 
adigôs
-- > 0)

372 i‡(
a
[
adigôs
] < 
b
[adigits])

375 i‡(
a
[
adigôs
] > 
b
[adigits])

379 
	}
}

383 
	$u¨b_eq32
(
u¨b
 
num
, 
digôs
, 
≤g_uöt_32
 
vÆ
)

386 
digôs
)

388 0:  
vÆ
 == 0;

389 1:  
vÆ
 =
num
[0];

390 2:  (
vÆ
 & 0xffffË=
num
[0] && (val >> 16) ==Çum[1];

393 
	}
}

397 
	$u¨b_¥ötx
(
u¨b
 
num
, 
digôs
, 
FILE
 *
out
)

400 
digôs
 > 0)

401 i‡(
num
[--
digôs
] > 0)

403 
	`Ârötf
(
out
, "0x%x", 
num
[
digôs
]);

405 
digôs
 > 0)

406 
	`Ârötf
(
out
, "%.4x", 
num
[--
digôs
]);

409 i‡(
digôs
 == 0)

410 
	`Âuts
("0x0", 
out
);

411 
	}
}

414 
	$u¨b_¥öt
(
u¨b
 
num
, 
digôs
, 
FILE
 *
out
)

424 i‡(
digôs
 *  (
udigô
) >  ())

425 
	`u¨b_¥ötx
(
num
, 
digôs
, 
out
);

429 
n
 = 0;

431 
digôs
 > 0)

432 
n
 = (¿<< 16Ë+ 
num
[--
digôs
];

434 
	`Ârötf
(
out
, "%lu", 
n
);

436 
	}
}

448 
	$make_øndom_byãs
(
≤g_uöt_32
* 
£ed
, * 
pv
, 
size_t
 
size
)

450 
≤g_uöt_32
 
u0
 = 
£ed
[0], 
u1
 = seed[1];

451 
≤g_byãp
 
byãs
 = 
	`voidˇ°
’ng_byãp, 
pv
);

456 
size_t
 
i
;

457 
i
=0; i<
size
; ++i)

460 
≤g_uöt_32
 
u
 = ((
u0
 >> (20-8)Ë^ ((
u1
 << 7) | (u0 >> (32-7)))) & 0xff;

461 
u1
 <<= 8;

462 
u1
 |
u0
 >> 24;

463 
u0
 <<= 8;

464 
u0
 |
u
;

465 *
byãs
++ = (
≤g_byã
)
u
;

468 
£ed
[0] = 
u0
;

469 
£ed
[1] = 
u1
;

470 
	}
}

474 
	$˛ór
(*
pv
, 
size_t
 
size
)

476 
≤g_uöt_32
 
˛ór_£ed
[2] = { 0x12345678, 0x9abcdef0 };

477 
	`make_øndom_byãs
(
˛ór_£ed
, 
pv
, 
size
);

478 
	}
}

480 
	#CLEAR
(
obje˘
Ë
	`˛ór
(&(obje˘),  (obje˘))

	)

488 
≤g_uöt_32
 
	g¸c_èbÀ
[256] =

548 
	#CRC_INIT
 0xffffffff

	)

550 
≤g_uöt_32


551 
	$¸c_⁄e_byã
(
≤g_uöt_32
 
¸c
, 
b
)

553  
¸c_èbÀ
[(
¸c
 ^ 
b
) & 0xff] ^ (crc >> 8);

554 
	}
}

556 
≤g_uöt_32


557 
	$¸c_öô_4
(
≤g_uöt_32
 
vÆue
)

566 
≤g_uöt_32
 
¸c
 = 
¸c_èbÀ
[(~
vÆue
 >> 24)] ^ 0xffffff;

568 
¸c
 = 
¸c_èbÀ
[(¸¯^ (
vÆue
 >> 16)) & 0xff] ^ (crc >> 8);

569 
¸c
 = 
¸c_èbÀ
[(¸¯^ (
vÆue
 >> 8)) & 0xff] ^ (crc >> 8);

570  
¸c_èbÀ
[(
¸c
 ^ 
vÆue
) & 0xff] ^ (crc >> 8);

571 
	}
}

574 
	$chunk_ty≥_vÆid
(
≤g_uöt_32
 
c
)

580 
≤g_uöt_32
 
t
;

586 
c
 &~
	`PNG_U32
(32,32,0,32);

587 
t
 = (
c
 & ~0x1f1f1f1f) ^ 0x40404040;

592 
c
 -
	`PNG_U32
(65,65,65,65);

593 
t
 |=
c
 ;

598 
c
 -
	`PNG_U32
(25,25,25,26);

599 
t
 |~
c
;

601  (
t
 & 0xe0e0e0e0) == 0;

602 
	}
}

611 
	sIDAT_li°


613 
IDAT_li°
 *
	m√xt
;

614 
	mÀngth
;

615 
	mcou¡
;

616 
	#IDAT_INIT_LENGTH
 16

	)

617 
≤g_uöt_32
 
	mÀngths
[
IDAT_INIT_LENGTH
];

621 
	$IDAT_li°_öô
(
IDAT_li°
 *
li°
)

623 
	`CLEAR
(*
li°
);

625 
li°
->
√xt
 = 
NULL
;

626 
li°
->
Àngth
 = 
IDAT_INIT_LENGTH
;

627 
	}
}

629 
size_t


630 
	$IDAT_li°_size
(
IDAT_li°
 *
li°
, 
Àngth
)

633 i‡(
li°
 !
NULL
)

634 
Àngth
 = 
li°
->length;

636   *
li°
 - Üi°->
Àngths
 +

637 
Àngth
 *  
li°
->
Àngths
[0];

638 
	}
}

641 
	$IDAT_li°_íd
(
IDAT_li°
 *IDAT_list)

643 
IDAT_li°
 *
li°
 = IDAT_li°->
√xt
;

645 
	`CLEAR
(*
IDAT_li°
);

647 
li°
 !
NULL
)

649 
IDAT_li°
 *
√xt
 = 
li°
->next;

651 
	`˛ór
(
li°
, 
	`IDAT_li°_size
(list, 0));

652 
	`‰ì
(
li°
);

653 
li°
 = 
√xt
;

655 
	}
}

657 
IDAT_li°
 *

658 
	$IDAT_li°_exãnd
(
IDAT_li°
 *
èû
)

661 
IDAT_li°
 *
√xt
 = 
èû
->next;

663 i‡(
√xt
 =
NULL
)

668 
Àngth
 = 2 * 
èû
->length;

670 i‡(
Àngth
 < 
èû
->length)

671 
Àngth
 = 
èû
->length;

673 
√xt
 = 
	`voidˇ°
(
IDAT_li°
*, 
	`mÆloc
(
	`IDAT_li°_size
(
NULL
, 
Àngth
)));

674 
	`CLEAR
(*
√xt
);

677 i‡(
√xt
 =
NULL
)

678  
NULL
;

680 
√xt
->√xà
NULL
;

681 
√xt
->
Àngth
 =Üength;

682 
èû
->
√xt
 =Çext;

685  
√xt
;

686 
	}
}

689 
	sglobÆ


692 
	mîr‹s
 :1;

693 
	mw¨nögs
 :1;

694 
	m›timize_zlib
 :1;

695 
	mquõt
 :2;

696 
	mvîbo£
 :3;

697 
	mskù
 :3;

698 
	#SKIP_NONE
 0

	)

699 
	#SKIP_BAD_CRC
 1

	)

700 
	#SKIP_UNSAFE
 2

	)

701 
	#SKIP_UNUSED
 3

	)

702 
	#SKIP_TRANSFORM
 4

	)

703 
	#SKIP_COLOR
 5

	)

704 
	#SKIP_ALL
 6

	)

706 
≤g_uöt_32
 
	mid©_max
;

708 
	m°©us_code
;

709 
	#TOO_FAR_BACK
 0x01

	)

710 
	#CRC_ERROR
 0x02

	)

711 
	#STREAM_ERROR
 0x04

	)

712 
	#TRUNCATED
 0x08

	)

713 
	#FILE_ERROR
 0x10

	)

714 
	#WRITE_ERROR
 0x20

	)

715 
	#INTERNAL_ERROR
 0x40

	)

718 
IDAT_li°
 
	mid©_ˇche
;

725 
	$globÆ_íd
(
globÆ
 *global)

728 
rc
;

730 
	`IDAT_li°_íd
(&
globÆ
->
id©_ˇche
);

731 
rc
 = 
globÆ
->
°©us_code
;

732 
	`CLEAR
(*
globÆ
);

733  
rc
;

734 
	}
}

737 
	$globÆ_öô
(
globÆ
 *global)

740 
	`CLEAR
(*
globÆ
);

743 
globÆ
->
îr‹s
 = 0;

744 
globÆ
->
w¨nögs
 = 0;

745 
globÆ
->
quõt
 = 0;

746 
globÆ
->
vîbo£
 = 0;

747 
globÆ
->
id©_max
 = 0;

748 
globÆ
->
›timize_zlib
 = 0;

749 
globÆ
->
skù
 = 
SKIP_NONE
;

750 
globÆ
->
°©us_code
 = 0;

752 
	`IDAT_li°_öô
(&
globÆ
->
id©_ˇche
);

753 
	}
}

756 
	$skù_chunk_ty≥
(c⁄° 
globÆ
 *globÆ, 
≤g_uöt_32
 
ty≥
)

763 i‡(
	`CRITICAL
(
ty≥
))

766 
ty≥
)

771 
≤g_tRNS
: 
≤g_sBIT
:

777 
≤g_gAMA
: 
≤g_sRGB
:

778 i‡(
globÆ
->
skù
 >
SKIP_ALL
)

786 
≤g_cHRM
: 
≤g_iCCP
:

787 i‡(
globÆ
->
skù
 >
SKIP_COLOR
)

795 
≤g_bKGD
:

796 i‡(
globÆ
->
skù
 >
SKIP_TRANSFORM
)

804 
≤g_fRAc
: 
≤g_gIFg
: 
≤g_gIFt
: 
≤g_gIFx
: 
≤g_hIST
:

805 
≤g_iTXt
: 
≤g_oFFs
: 
≤g_pCAL
: 
≤g_pHYs
: 
≤g_sCAL
:

806 
≤g_sPLT
: 
≤g_sTER
: 
≤g_tEXt
: 
≤g_tIME
: 
≤g_zTXt
:

807 i‡(
globÆ
->
skù
 >
SKIP_UNUSED
)

816 i‡(
	`SAFE_TO_COPY
(
ty≥
))

818 i‡(
globÆ
->
skù
 >
SKIP_UNUSED
)

822 i‡(
globÆ
->
skù
 >
SKIP_UNSAFE
)

827 
	}
}

830 
	gchunk
;

831 
	gIDAT
;

832 
	sfûe


835 
globÆ
 *
	mglobÆ
;

838 c⁄° * 
	mfûe_«me
;

839 c⁄° * 
	mout_«me
;

843 
	m°©us_code
;

844 
	mªad_î∫o
;

845 
	mwrôe_î∫o
;

848 
≤g_uöt_32
 
	mwidth
;

849 
≤g_uöt_32
 
	mheight
;

850 
≤g_byã
 
	mbô_dïth
;

851 
≤g_byã
 
	mcﬁ‹_ty≥
;

852 
≤g_byã
 
	mcom¥essi⁄_mëhod
;

853 
≤g_byã
 
	mfûãr_mëhod
;

854 
≤g_byã
 
	möãæa˚_mëhod
;

856 
udigô
 
	mimage_byãs
[5];

857 
	mimage_digôs
;

860 
FILE
 * 
	mfûe
;

861 
FILE
 * 
	mout
;

862 
jmp_buf
 
	mjmpbuf
;

873 
Âos_t
 
	md©a_pos
;

874 
≤g_uöt_32
 
	mÀngth
;

875 
≤g_uöt_32
 
	mty≥
;

876 
≤g_uöt_32
 
	m¸c
;

882 
≤g_uöt_32
 
	mªad_cou¡
;

883 
≤g_uöt_32
 
	mwrôe_cou¡
;

884 
	m°©e
;

885 
	#STATE_SIGNATURE
 0

	)

886 
	#STATE_CHUNKS
 1

	)

887 
	#STATE_IDAT
 2

	)

892 
chunk
 * 
	mchunk
;

893 
IDAT
 * 
	mid©
;

900 * 
	mÆloc_±r
;

901 (*
	mÆloc
)(
	mfûe
*,
	mid©
);

906 
	#LIBPNG_WARNING_CODE
 1

	)

907 
	#LIBPNG_ERROR_CODE
 2

	)

908 
	#ZLIB_ERROR_CODE
 3

	)

909 
	#INVALID_ERROR_CODE
 4

	)

910 
	#READ_ERROR_CODE
 5

	)

911 
	#WRITE_ERROR_CODE
 6

	)

912 
	#UNEXPECTED_ERROR_CODE
 7

	)

915 
	$emô_°rög
(c⁄° *
°r
, 
FILE
 *
out
)

920 ; *
°r
; ++str)

921 i‡(
	`isgøph
(
UCHAR_MAX
 & *
°r
))

922 
	`putc
(*
°r
, 
out
);

924 i‡(
	`is•a˚
(
UCHAR_MAX
 & *
°r
))

925 
	`putc
('_', 
out
);

928 
	`Ârötf
(
out
, "\\%.3o", *
°r
);

929 
	}
}

932 
	$°rcode
(
code
)

934 
code
)

936 
LIBPNG_WARNING_CODE
:  "warning";

937 
LIBPNG_ERROR_CODE
:  "libpng";

938 
ZLIB_ERROR_CODE
:  "zlib";

939 
INVALID_ERROR_CODE
:  "invalid";

940 
READ_ERROR_CODE
:  "read";

941 
WRITE_ERROR_CODE
:  "write";

942 
UNEXPECTED_ERROR_CODE
:  "unexpected";

945 
	}
}

948 
	$emô_îr‹
(
fûe
 *fûe, 
code
, c⁄° *
wh©
)

953 c⁄° *
ªas⁄
;

954 
îr
 = 0;

956 
code
)

958 
LIBPNG_WARNING_CODE
: 
ªas⁄
 = "libpng warning:"; ;

959 
LIBPNG_ERROR_CODE
: 
ªas⁄
 = "libpngÉrror:"; ;

960 
ZLIB_ERROR_CODE
: 
ªas⁄
 = "zlibÉrror:"; ;

961 
INVALID_ERROR_CODE
: 
ªas⁄
 = "invalid"; ;

962 
READ_ERROR_CODE
: 
ªas⁄
 = "read failure:";

963 
îr
 = 
fûe
->
ªad_î∫o
;

965 
WRITE_ERROR_CODE
: 
ªas⁄
 = "writeÉrror";

966 
îr
 = 
fûe
->
wrôe_î∫o
;

968 
UNEXPECTED_ERROR_CODE
: 
ªas⁄
 = "unexpectedÉrror:";

969 
îr
 = 
fûe
->
ªad_î∫o
;

970 i‡(
îr
 == 0)

971 
îr
 = 
fûe
->
wrôe_î∫o
;

973 : 
ªas⁄
 = "INVALID (internalÉrror):"; ;

976 i‡(
îr
 != 0)

977 
	`Ârötf
(
°dîr
, "%s: %†%†[%s]\n", 
fûe
->
fûe_«me
, 
ªas⁄
, 
wh©
,

978 
	`°ªº‹
(
îr
));

981 
	`Ârötf
(
°dîr
, "%s: %†%s\n", 
fûe
->
fûe_«me
, 
ªas⁄
, 
wh©
);

982 
	}
}

984 
chunk_íd
(
chunk
 **);

985 
IDAT_íd
(
IDAT
 **);

988 
	$fûe_íd
(
fûe
 *file)

990 
rc
;

995 i‡(
fûe
->
id©
 !
NULL
)

996 
	`IDAT_íd
(&
fûe
->
id©
);

998 i‡(
fûe
->
chunk
 !
NULL
)

999 
	`chunk_íd
(&
fûe
->
chunk
);

1001 
rc
 = 
fûe
->
°©us_code
;

1003 i‡(
fûe
->fûê!
NULL
)

1004 ()
	`f˛o£
(
fûe
->file);

1006 i‡(
fûe
->
out
 !
NULL
)

1011 i‡(
	`„º‹
(
fûe
->
out
Ë| 
	`fÊush
(fûe->outË| 
	`f˛o£
(file->out))

1013 
	`≥º‹
(
fûe
->
out_«me
);

1014 
	`emô_îr‹
(
fûe
, 
READ_ERROR_CODE
, "output writeÉrror");

1015 
rc
 |
WRITE_ERROR
;

1020 
fûe
->
globÆ
->
°©us_code
 |
rc
;

1022 
	`CLEAR
(*
fûe
);

1024  
rc
;

1025 
	}
}

1028 
	$fûe_öô
(
fûe
 *fûe, 
globÆ
 *globÆ, c⁄° *
fûe_«me
,

1029 c⁄° *
out_«me
, *
Æloc_±r
, (*
Æloc
)(
fûe
*,))

1035 
	`CLEAR
(*
fûe
);

1036 
fûe
->
globÆ
 = global;

1038 
fûe
->
fûe_«me
 = file_name;

1039 
fûe
->
out_«me
 = out_name;

1040 
fûe
->
°©us_code
 = 0;

1041 
fûe
->
ªad_î∫o
 = 0;

1042 
fûe
->
wrôe_î∫o
 = 0;

1044 
fûe
->fûê
NULL
;

1045 
fûe
->
out
 = 
NULL
;

1048 
fûe
->
ªad_cou¡
 = 0;

1049 
fûe
->
°©e
 = 
STATE_SIGNATURE
;

1051 
fûe
->
chunk
 = 
NULL
;

1052 
fûe
->
id©
 = 
NULL
;

1054 
fûe
->
Æloc_±r
 =álloc_ptr;

1055 
fûe
->
Æloc
 =álloc;

1058 
	`as£π
(
fûe_«me
 !
NULL
);

1059 
fûe
->fûê
	`f›í
(
fûe_«me
, "rb");

1061 i‡(
fûe
->fûê=
NULL
)

1063 
fûe
->
ªad_î∫o
 = 
î∫o
;

1064 
fûe
->
°©us_code
 |
FILE_ERROR
;

1066 
	`≥º‹
(
fûe_«me
);

1067  
FILE_ERROR
;

1070 i‡(
out_«me
 !
NULL
)

1072 
fûe
->
out
 = 
	`f›í
(
out_«me
, "wb");

1074 i‡(
fûe
->
out
 =
NULL
)

1076 
fûe
->
wrôe_î∫o
 = 
î∫o
;

1077 
fûe
->
°©us_code
 |
WRITE_ERROR
;

1078 
	`≥º‹
(
out_«me
);

1079  
WRITE_ERROR
;

1084 
	}
}

1087 
	$log_îr‹
(
fûe
 *fûe, 
code
, c⁄° *
wh©
)

1090 i‡(
fûe
->
globÆ
->
îr‹s
)

1091 
	`emô_îr‹
(
fûe
, 
code
, 
wh©
);

1092 
	}
}

1095 
	$ty≥_ch¨
(
≤g_uöt_32
 
v
)

1103 i‡(
v
 & 32)

1104  "!abcdefghijklmn›qr°uvwxyz56789"[(
v
-96)&31];

1107  "@ABCDEFGHIJKLMNOPQRSTUVWXYZ01234"[(
v
-64)&31];

1108 
	}
}

1111 
	$ty≥_«me
(
≤g_uöt_32
 
ty≥
, 
FILE
 *
out
)

1113 
	`putc
(
	`ty≥_ch¨
(
ty≥
 >> 24), 
out
);

1114 
	`putc
(
	`ty≥_ch¨
(
ty≥
 >> 16), 
out
);

1115 
	`putc
(
	`ty≥_ch¨
(
ty≥
 >> 8), 
out
);

1116 
	`putc
(
	`ty≥_ch¨
(
ty≥
 ), 
out
);

1117 
	}
}

1120 
	$ty≥_£p
(
FILE
 *
out
)

1122 
	`putc
(':', 
out
);

1123 
	`putc
(' ', 
out
);

1124 
	}
}

1126 
≤g_uöt_32
 
cuºít_ty≥
(
fûe
 *fûe, 
code
);

1128 
PNG_NORETURN
 

1129 
	$°›
(
fûe
 *fûe, 
code
, c⁄° *
wh©
)

1134 
	`log_îr‹
(
fûe
, 
code
, 
wh©
);

1149 i‡(
fûe
->
globÆ
->
quõt
 < 2)

1151 
≤g_uöt_32
 
ty≥
;

1153 i‡(
fûe
->
chunk
 !
NULL
)

1154 
ty≥
 = 
	`cuºít_ty≥
(
fûe
, 
code
);

1157 
ty≥
 = 
fûe
->type;

1159 i‡(
ty≥
)

1160 
	`ty≥_«me
(
ty≥
, 
°dout
);

1163 
	`Âuts
("HEAD", 
°dout
);

1165 
	`¥ötf
(" ERR %.2x %†", 
fûe
->
°©us_code
, 
	`°rcode
(
code
));

1169 
	`emô_°rög
(
	`°ªº‹
(
fûe
->
ªad_î∫o
), 
°dout
);

1170 
	`putc
(' ', 
°dout
);

1171 
	`emô_°rög
(
	`°ªº‹
(
fûe
->
wrôe_î∫o
), 
°dout
);

1172 
	`putc
(' ', 
°dout
);

1173 
	`emô_°rög
(
wh©
, 
°dout
);

1174 
	`putc
(' ', 
°dout
);

1175 
	`Âuts
(
fûe
->
fûe_«me
, 
°dout
);

1176 
	`putc
('\n', 
°dout
);

1179 
fûe
->
°©us_code
 |
FILE_ERROR
;

1180 
	`l⁄gjmp
(
fûe
->
jmpbuf
, 
code
);

1181 
	}
}

1183 
PNG_NORETURN
 

1184 
	$°›_övÆid
(
fûe
 *fûe, c⁄° *
wh©
)

1186 
	`°›
(
fûe
, 
INVALID_ERROR_CODE
, 
wh©
);

1187 
	}
}

1190 
	$ty≥_mesßge
(
fûe
 *fûe, 
≤g_uöt_32
 
ty≥
, c⁄° *
wh©
)

1193 i‡(
fûe
->
globÆ
->
îr‹s
)

1195 
	`Âuts
(
fûe
->
fûe_«me
, 
°dîr
);

1196 
	`ty≥_£p
(
°dîr
);

1197 
	`ty≥_«me
(
ty≥
, 
°dîr
);

1198 
	`ty≥_£p
(
°dîr
);

1199 
	`Âuts
(
wh©
, 
°dîr
);

1200 
	`putc
('\n', 
°dîr
);

1202 
	}
}

1208 
	$fûe_gëpos
(
fûe
 *fûe, 
Âos_t
 *
pos
)

1210 i‡(
	`fgëpos
(
fûe
->fûe, 
pos
))

1213 
	`≥º‹
(
fûe
->
fûe_«me
);

1214 
	`°›
(
fûe
, 
READ_ERROR_CODE
, "fgetpos");

1216 
	}
}

1219 
	$fûe_£ços
(
fûe
 *fûe, c⁄° 
Âos_t
 *
pos
)

1221 i‡(
	`f£ços
(
fûe
->fûe, 
pos
))

1223 
	`≥º‹
(
fûe
->
fûe_«me
);

1224 
	`°›
(
fûe
, 
READ_ERROR_CODE
, "fsetpos");

1226 
	}
}

1229 
	$gëpos
(
fûe
 *file)

1235 
	`fûe_gëpos
(
fûe
, &fûe->
d©a_pos
);

1236 
	}
}

1244 
	$ªad_byã
(
fûe
 *file)

1246 
ch
 = 
	`gëc
(
fûe
->file);

1248 i‡(
ch
 >= 0 && ch <= 255)

1250 ++(
fûe
->
ªad_cou¡
);

1251  
ch
;

1254 i‡(
ch
 !
EOF
)

1256 
fûe
->
°©us_code
 |
INTERNAL_ERROR
;

1257 
fûe
->
ªad_î∫o
 = 
ERANGE
;

1260 
	`emô_îr‹
(
fûe
, 
UNEXPECTED_ERROR_CODE
, "fileÑead");

1263 #ifde‡
EINTR


1264 i‡(
î∫o
 =
EINTR
)

1266 
î∫o
 = 0;

1267  
	`ªad_byã
(
fûe
);

1276 i‡(
	`„º‹
(
fûe
->file))

1277 
fûe
->
ªad_î∫o
 = 
î∫o
;

1279 i‡(
	`„of
(
fûe
->file))

1280 
fûe
->
ªad_î∫o
 = 0;

1283 
fûe
->
ªad_î∫o
 = 
EDOM
;

1290 
fûe
->
°©us_code
 |
TRUNCATED
;

1291  
EOF
;

1292 
	}
}

1294 
≤g_byã


1295 
	$ªªad_byã
(
fûe
 *file)

1300 
ch
 = 
	`gëc
(
fûe
->file);

1302 i‡(
î∫o
 != 0)

1303 
fûe
->
ªad_î∫o
 = 
î∫o
;

1305 i‡(
ch
 < 0 || ch > 255)

1306 
	`°›
(
fûe
, 
UNEXPECTED_ERROR_CODE
, "reread");

1308  (
≤g_byã
)
ch
;

1309 
	}
}

1311 
≤g_uöt_32


1312 
	$ªªad_4
(
fûe
 *file)

1315 
≤g_uöt_32
 
ªsu…
 = 0;

1316 
i
 = 0;

1318 ++
i
 <= 4)

1319 
ªsu…
 = (ªsu… << 8Ë+ 
	`ªªad_byã
(
fûe
);

1321  
ªsu…
;

1322 
	}
}

1325 
	$skù_12
(
fûe
 *file)

1331 i‡(
	`f£ek
(
fûe
->fûe, 12, 
SEEK_CUR
) != 0)

1333 i‡(
î∫o
 != 0)

1334 
fûe
->
ªad_î∫o
 = 
î∫o
;

1336 
	`°›
(
fûe
, 
UNEXPECTED_ERROR_CODE
, "reskip");

1338 
	}
}

1341 
	$wrôe_byã
(
fûe
 *fûe, 
b
)

1347 i‡(
fûe
->
out
 !
NULL
)

1349 i‡(
	`putc
(
b
, 
fûe
->
out
) != b)

1351 
fûe
->
wrôe_î∫o
 = 
î∫o
;

1352 
fûe
->
°©us_code
 |
WRITE_ERROR
;

1353 
	`°›
(
fûe
, 
WRITE_ERROR_CODE
, "write byte");

1357 ++(
fûe
->
wrôe_cou¡
);

1358 
	}
}

1362 
	$ªad_4
(
fûe
 *fûe, 
≤g_uöt_32
 *
pu
)

1367 
i
 = 0;

1368 
≤g_uöt_32
 
vÆ
 = 0;

1372 
ch
 = 
	`ªad_byã
(
fûe
);

1374 i‡(
ch
 =
EOF
)

1375  
i
;

1377 
vÆ
 = (vÆ << 8Ë+ 
ch
;

1378 } ++
i
 < 4);

1380 *
pu
 = 
vÆ
;

1381  
i
;

1382 
	}
}

1386 
	$¸c_ªad_m™y
(
fûe
 *fûe, 
≤g_uöt_32
 
Àngth
)

1391 i‡(
Àngth
 > 0)

1393 
≤g_uöt_32
 
¸c
 = 
fûe
->crc;

1397 
ch
 = 
	`ªad_byã
(
fûe
);

1399 i‡(
ch
 =
EOF
)

1402 
¸c
 = 
	`¸c_⁄e_byã
(¸c, 
ch
);

1404 --
Àngth
 > 0);

1406 
fûe
->
¸c
 = crc;

1410 
	}
}

1413 
	$ˇlc_image_size
(
fûe
 *file)

1418 
≤g_uöt_16
 
pd
 = 
fûe
->
bô_dïth
;

1420 
fûe
->
cﬁ‹_ty≥
)

1423 
	`°›_övÆid
(
fûe
, "IHDR: colourÅype");

1425 
övÆid_bô_dïth
:

1426 
	`°›_övÆid
(
fûe
, "IHDR: bit depth");

1429 i‡(
pd
 != 1 &&Öd != 2 &&Öd != 4 &&Öd != 8 &&Öd != 16)

1430 
övÆid_bô_dïth
;

1434 i‡(
pd
 != 1 &&Öd != 2 &&Öd != 4 &&Öd != 8)

1435 
övÆid_bô_dïth
;

1439 i‡(
pd
 != 8 &&Öd != 16)

1440 
övÆid_bô_dïth
;

1442 
pd
 = (
≤g_uöt_16
)(pd * 3);

1446 i‡(
pd
 != 8 &&Öd != 16)

1447 
övÆid_bô_dïth
;

1449 
pd
 = (
≤g_uöt_16
)(pd * 2);

1453 i‡(
pd
 != 8 &&Öd != 16)

1454 
övÆid_bô_dïth
;

1456 
pd
 = (
≤g_uöt_16
)(pd * 4);

1460 i‡(
fûe
->
width
 < 1 || file->width > 0x7fffffff)

1461 
	`°›_övÆid
(
fûe
, "IHDR: width");

1463 i‡(
fûe
->
height
 < 1 || file->height > 0x7fffffff)

1464 
	`°›_övÆid
(
fûe
, "IHDR: height");

1466 i‡(
fûe
->
com¥essi⁄_mëhod
 != 0)

1467 
	`°›_övÆid
(
fûe
, "IHDR: compression method");

1469 i‡(
fûe
->
fûãr_mëhod
 != 0)

1470 
	`°›_övÆid
(
fûe
, "IHDR: filter method");

1472 
fûe
->
öãæa˚_mëhod
)

1474 
PNG_INTERLACE_ADAM7
:

1479 
∑ss
;

1480 
image_digôs
 = 0;

1481 
udigô
 
row_width
[2], 
row_byãs
[3];

1483 
∑ss
=0;Öass<=6; ++pass)

1485 
≤g_uöt_32
 
pw
 = 
	`PNG_PASS_COLS
(
fûe
->
width
, 
∑ss
);

1487 i‡(
pw
 > 0)

1489 
digôs
;

1492 
digôs
 = 
	`u¨b_mu…_digô
(
row_byãs
, 
	`u¨b_£t
(row_bytes, 7),

1493 
row_width
, 
	`u¨b_£t
‘ow_width, 
pw
), 
pd
);

1494 
digôs
 = 
	`u¨b_shi·
(
row_byãs
, digits, 3);

1495 
digôs
 = 
	`u¨b_öc
(
row_byãs
, digits, 1);

1499 
image_digôs
 = 
	`u¨b_mu…32
(
fûe
->
image_byãs
, image_digits,

1500 
row_byãs
, 
digôs
,

1501 
	`PNG_PASS_ROWS
(
fûe
->
height
, 
∑ss
));

1505 
fûe
->
image_digôs
 = image_digits;

1509 
PNG_INTERLACE_NONE
:

1511 
digôs
;

1512 
udigô
 
row_width
[2], 
row_byãs
[3];

1515 
digôs
 = 
	`u¨b_mu…_digô
(
row_byãs
, 
	`u¨b_£t
(row_bytes, 7),

1516 
row_width
, 
	`u¨b_£t
‘ow_width, 
fûe
->
width
), 
pd
);

1517 
digôs
 = 
	`u¨b_shi·
(
row_byãs
, digits, 3);

1518 
digôs
 = 
	`u¨b_öc
(
row_byãs
, digits, 1);

1521 
fûe
->
image_digôs
 = 
	`u¨b_mu…32
(fûe->
image_byãs
, 0,

1522 
row_byãs
, 
digôs
, 
fûe
->
height
);

1527 
	`°›_övÆid
(
fûe
, "IHDR: interlace method");

1530 
	`as£π
(
fûe
->
image_digôs
 >= 1 && file->image_digits <= 5);

1532 
	}
}

1539 
	schunk


1542 
fûe
 * 
	mfûe
;

1543 
globÆ
 * 
	mglobÆ
;

1546 
udigô
 
	muncom¥es£d_byãs
[5];

1547 
	muncom¥es£d_digôs
;

1548 
udigô
 
	mcom¥es£d_byãs
[5];

1549 
	mcom¥es£d_digôs
;

1555 
Âos_t
 
	mchunk_d©a_pos
;

1556 
≤g_uöt_32
 
	mchunk_Àngth
;

1557 
≤g_uöt_32
 
	mchunk_ty≥
;

1560 
≤g_uöt_32
 
	mwrôe_¸c
;

1561 
≤g_uöt_32
 
	mªwrôe_off£t
;

1562 
	mªwrôe_Àngth
;

1563 
≤g_byã
 
	mªwrôe_buf„r
[2];

1567 
	$chunk_mesßge
(
chunk
 *chunk, c⁄° *
mesßge
)

1569 
	`ty≥_mesßge
(
chunk
->
fûe
, chunk->
chunk_ty≥
, 
mesßge
);

1570 
	}
}

1573 
	$chunk_íd
(
chunk
 **
chunk_v¨
)

1575 
chunk
 *chunk = *
chunk_v¨
;

1577 *
chunk_v¨
 = 
NULL
;

1578 
	`CLEAR
(*
chunk
);

1579 
	}
}

1582 
	$chunk_öô
(
chunk
 * c⁄° chunk, 
fûe
 * const file)

1590 
	`as£π
(
fûe
->
chunk
 =
NULL
);

1592 
	`CLEAR
(*
chunk
);

1594 
chunk
->
fûe
 = file;

1595 
chunk
->
globÆ
 = 
fûe
->global;

1597 
chunk
->
chunk_d©a_pos
 = 
fûe
->
d©a_pos
;

1598 
chunk
->
chunk_Àngth
 = 
fûe
->
Àngth
;

1599 
chunk
->
chunk_ty≥
 = 
fûe
->
ty≥
;

1604 
chunk
->
uncom¥es£d_digôs
 = 0;

1605 
chunk
->
com¥es£d_digôs
 = 0;

1607 
fûe
->
chunk
 = chunk;

1608 
	}
}

1610 
≤g_uöt_32


1611 
	$cuºít_ty≥
(
fûe
 *fûe, 
code
)

1619 i‡(
fûe
->
chunk
 !
NULL
)

1621 
≤g_uöt_32
 
ty≥
 = 
fûe
->
chunk
->
chunk_ty≥
;

1627 i‡(
code
 <
LIBPNG_ERROR_CODE
 && 
ty≥
 =
≤g_IDAT
 &&

1628 
fûe
->
wrôe_cou¡
 == 8)

1629 
ty≥
 = 0;

1631  
ty≥
;

1635  
fûe
->
ty≥
;

1636 
	}
}

1639 
	$£ços
(
chunk
 *chunk)

1645 
chunk
->
fûe
->
ªad_cou¡
 = 8;

1646 
	`fûe_£ços
(
chunk
->
fûe
, &chunk->
chunk_d©a_pos
);

1647 
	}
}

1660 
zlib_check
(
fûe
 *fûe, 
≤g_uöt_32
 
off£t
);

1663 
	$¥o˚ss_zTXt_iCCP
(
fûe
 *file)

1668 
chunk
 *chunk = 
fûe
->chunk;

1669 
≤g_uöt_32
 
Àngth
;

1670 
≤g_uöt_32
 
ödex
 = 0;

1672 
	`as£π
(
chunk
 !
NULL
 && 
fûe
->
id©
 == NULL);

1673 
Àngth
 = 
chunk
->
chunk_Àngth
;

1674 
	`£ços
(
chunk
);

1676 
Àngth
 >= 9)

1678 --
Àngth
;

1679 ++
ödex
;

1680 i‡(
	`ªªad_byã
(
fûe
) == 0)

1682 --
Àngth
;

1683 ++
ödex
;

1684 ()
	`ªªad_byã
(
fûe
);

1685  
	`zlib_check
(
fûe
, 
ödex
);

1689 
	`chunk_mesßge
(
chunk
, "too short");

1691 
	}
}

1694 
	$¥o˚ss_iTXt
(
fûe
 *file)

1697 
chunk
 *chunk = 
fûe
->chunk;

1698 
≤g_uöt_32
 
Àngth
;

1699 
≤g_uöt_32
 
ödex
 = 0;

1701 
	`as£π
(
chunk
 !
NULL
 && 
fûe
->
id©
 == NULL);

1702 
Àngth
 = 
chunk
->
chunk_Àngth
;

1703 
	`£ços
(
chunk
);

1705 
Àngth
 >= 5)

1707 --
Àngth
;

1708 ++
ödex
;

1709 i‡(
	`ªªad_byã
(
fûe
) == 0)

1711 --
Àngth
;

1712 ++
ödex
;

1713 i‡(
	`ªªad_byã
(
fûe
) == 0)

1716 --
Àngth
;

1717 ++
ödex
;

1718 ()
	`ªªad_byã
(
fûe
);

1721 
Àngth
 >= 9)

1723 --
Àngth
;

1724 ++
ödex
;

1725 i‡(
	`ªªad_byã
(
fûe
) == 0)

1728 
Àngth
 >= 8)

1730 --
Àngth
;

1731 ++
ödex
;

1732 i‡(
	`ªªad_byã
(
fûe
) == 0)

1733  
	`zlib_check
(
fûe
, 
ödex
);

1743 
	`log_îr‹
(
fûe
, 
INVALID_ERROR_CODE
, "iTXt chunkÜength");

1746 
	}
}

1749 
	sIDAT


1752 
fûe
 * 
	mfûe
;

1753 
globÆ
 * 
	mglobÆ
;

1756 
IDAT_li°
 *
	mid©_li°_hód
;

1757 
IDAT_li°
 *
	mid©_li°_èû
;

1760 
IDAT_li°
 *
	mid©_cur
;

1761 
	mid©_cou¡
;

1762 
≤g_uöt_32
 
	mid©_ödex
;

1763 
≤g_uöt_32
 
	mid©_Àngth
;

1771 
	$IDAT_íd
(
IDAT
 **
id©_v¨
)

1773 
IDAT
 *
id©
 = *
id©_v¨
;

1774 
fûe
 *fûê
id©
->file;

1776 *
id©_v¨
 = 
NULL
;

1778 
	`CLEAR
(*
id©
);

1780 
	`as£π
(
fûe
->
chunk
 !
NULL
);

1781 
	`chunk_íd
(&
fûe
->
chunk
);

1787 
fûe
->
°©e
 = 
STATE_CHUNKS
;

1788 
	}
}

1791 
	$IDAT_öô
(
IDAT
 * c⁄° 
id©
, 
fûe
 * const file)

1799 
	`as£π
(
fûe
->
chunk
 =
NULL
);

1800 
	`as£π
(
fûe
->
id©
 =
NULL
);

1802 
	`CLEAR
(*
id©
);

1804 
id©
->
fûe
 = file;

1805 
id©
->
globÆ
 = 
fûe
->global;

1810 
id©
->
globÆ
->
id©_ˇche
.
cou¡
 = 0;

1811 
id©
->
id©_li°_hód
 = id©->
id©_li°_èû
 = &id©->
globÆ
->
id©_ˇche
;

1816 
fûe
->
	`Æloc
(file, 0 );

1817 
	`as£π
(
fûe
->
chunk
 !
NULL
);

1822 
fûe
->
id©
 = idat;

1823 
	}
}

1825 
≤g_uöt_32


1826 
	$ªchunk_Àngth
(
IDAT
 *
id©
, 
°¨t
)

1831 
≤g_uöt_32
 
Àn
 = 
id©
->
globÆ
->
id©_max
;

1833 i‡(
Àn
 == 0)

1835 c⁄° 
IDAT_li°
 *
cur
;

1836 
cou¡
;

1838 i‡(
°¨t
)

1839  
id©
->
id©_Àngth
;

1844 
cur
 = 
id©
->
id©_cur
;

1845 
cou¡
 = 
id©
->
id©_cou¡
;

1847 
	`as£π
(
id©
->
id©_ödex
 =id©->
id©_Àngth
 &&

1848 
id©
->
id©_Àngth
 =
cur
->
Àngths
[
cou¡
]);

1851 i‡(++
cou¡
 < 
cur
->count)

1852  
cur
->
Àngths
[
cou¡
];

1855 
	`as£π
(
cur
 !
id©
->
id©_li°_èû
);

1856 
cur
 = cur->
√xt
;

1857 
	`as£π
(
cur
 !
NULL
 && cur->
cou¡
 > 0);

1858  
cur
->
Àngths
[0];

1866 
≤g_uöt_32
 
have
 = 
id©
->
id©_Àngth
 - id©->
id©_ödex
;

1868 i‡(
Àn
 > 
have
)

1870 
IDAT_li°
 *
cur
 = 
id©
->
id©_cur
;

1871 
j
 = 
id©
->
id©_cou¡
+1;

1879 
	`as£π
(
cur
 !
NULL
);

1884 ; 
j
 < 
cur
->
cou¡
; ++j)

1886 
have
 +
cur
->
Àngths
[
j
];

1887 i‡(
Àn
 <
have
)

1888  
Àn
;

1892 i‡(
cur
 =
id©
->
id©_li°_èû
)

1893  
have
;

1895 
cur
 = cur->
√xt
;

1896 
j
 = 0;

1899 
Àn
 > 
have
);

1902  
Àn
;

1904 
	}
}

1907 
	$¥o˚ss_IDAT
(
fûe
 *file)

1924 
IDAT_li°
 *
li°
;

1926 
	`as£π
(
fûe
->
id©
 !
NULL
 && fûe->
chunk
 != NULL);

1937 
li°
 = 
fûe
->
id©
->
id©_li°_èû
;

1939 i‡(
li°
->
cou¡
 =li°->
Àngth
)

1941 
li°
 = 
	`IDAT_li°_exãnd
(list);

1943 i‡(
li°
 =
NULL
)

1944 
	`°›
(
fûe
, 
READ_ERROR_CODE
, "out of memory");

1947 
li°
->
cou¡
 = 0;

1948 
fûe
->
id©
->
id©_li°_èû
 = 
li°
;

1952 
li°
->
Àngths
[÷i°->
cou¡
)++] = 
fûe
->
chunk
->
chunk_Àngth
;

1957 i‡(
fûe
->
ty≥
 =
≤g_IDAT
)

1965 
	`£ços
(
fûe
->
chunk
);

1967 i‡(
	`zlib_check
(
fûe
, 0))

1969 
IDAT
 *
id©
;

1970 
cmp
;

1975 
cmp
 = 
	`u¨b_cmp
(
fûe
->
image_byãs
, fûe->
image_digôs
,

1976 
fûe
->
chunk
->
uncom¥es£d_byãs
, fûe->chunk->
uncom¥es£d_digôs
);

1978 i‡(
cmp
 < 0)

1979 
	`ty≥_mesßge
(
fûe
, 
≤g_IDAT
, "extra uncompressed data");

1981 i‡(
cmp
 > 0)

1982 
	`°›
(
fûe
, 
LIBPNG_ERROR_CODE
, "IDAT: uncompressed dataÅoo small");

1988 
	`£ços
(
fûe
->
chunk
);

1990 
id©
 = 
fûe
->idat;

1991 
id©
->
id©_cur
 = id©->
id©_li°_hód
;

1992 
id©
->
id©_Àngth
 = id©->
id©_cur
->
Àngths
[0];

1993 
id©
->
id©_cou¡
 = 0;

1994 
id©
->
id©_ödex
 = 0;

1997 
fûe
->
chunk
->
chunk_Àngth
 = 
	`ªchunk_Àngth
(
id©
, 1 );

2000 
fûe
->
°©e
 = 
STATE_IDAT
;

2006 
	`°›
(
fûe
, 
ZLIB_ERROR_CODE
, "couldÇot uncompress IDAT");

2007 
	}
}

2010 
	szlib


2013 
IDAT
 * 
	mid©
;

2014 
chunk
 * 
	mchunk
;

2015 
fûe
 * 
	mfûe
;

2016 
globÆ
 *
	mglobÆ
;

2019 
≤g_uöt_32
 
	mªwrôe_off£t
;

2022 
udigô
 
	mcom¥es£d_byãs
[5];

2023 
	mcom¥es£d_digôs
;

2024 
udigô
 
	muncom¥es£d_byãs
[5];

2025 
	muncom¥es£d_digôs
;

2026 
	mfûe_bôs
;

2027 
	mok_bôs
;

2028 
	mcksum
;

2031 
z_°ªam
 
	mz
;

2032 
≤g_uöt_32
 
	mexåa_byãs
;

2033 
	m°©e
;

2034 
	mrc
;

2035 
	mwödow_bôs
;

2036 
≤g_byã
 
	mhódî
[2];

2040 
	$zlib_Êevñ
(
zlib
 *zlib)

2042 
zlib
->
hódî
[1] >> 6)

2048 : 
	`as£π
(
UNREACHED
);

2052 
	}
}

2055 
	$zlib_rc
(
zlib
 *zlib)

2058 
zlib
->
rc
)

2060 
Z_OK
:  "Z_OK";

2061 
Z_STREAM_END
:  "Z_STREAM_END";

2062 
Z_NEED_DICT
:  "Z_NEED_DICT";

2063 
Z_ERRNO
:  "Z_ERRNO";

2064 
Z_STREAM_ERROR
:  "Z_STREAM_ERROR";

2065 
Z_DATA_ERROR
:  "Z_DATA_ERROR";

2066 
Z_MEM_ERROR
:  "Z_MEM_ERROR";

2067 
Z_BUF_ERROR
:  "Z_BUF_ERROR";

2068 
Z_VERSION_ERROR
:  "Z_VERSION_ERROR";

2071 
	}
}

2074 
	$zlib_mesßge
(
zlib
 *zlib, 
u√x≥˘ed
)

2077 i‡(
zlib
->
globÆ
->
îr‹s
)

2079 c⁄° *
ªas⁄
 = 
zlib
->
z
.
msg
;

2081 i‡(
ªas⁄
 =
NULL
)

2082 
ªas⁄
 = "[no message]";

2084 
	`Âuts
(
zlib
->
fûe
->
fûe_«me
, 
°dîr
);

2085 
	`ty≥_£p
(
°dîr
);

2086 
	`ty≥_«me
(
zlib
->
chunk
->
chunk_ty≥
, 
°dîr
);

2087 
	`Ârötf
(
°dîr
, ": %szlibÉrror: %d (%s) (%s)\n",

2088 
u√x≥˘ed
 ? "u√x≥˘ed " : "", 
zlib
->
rc
, 
	`zlib_rc
(zlib), 
ªas⁄
);

2090 
	}
}

2093 
	$zlib_íd
(
zlib
 *zlib)

2098 i‡(!
zlib
->
globÆ
->
quõt
)

2100 i‡(
zlib
->
ok_bôs
 < 16)

2102 c⁄° *
ªas⁄
;

2104 i‡(
zlib
->
cksum
)

2105 
ªas⁄
 = "CHK";

2107 i‡(
zlib
->
ok_bôs
 > zlib->
fûe_bôs
)

2108 
ªas⁄
 = "TFB";

2110 i‡(
zlib
->
ok_bôs
 =zlib->
fûe_bôs
)

2111 
ªas⁄
 = "OK ";

2114 
ªas⁄
 = "OPT";

2120 
	`ty≥_«me
(
zlib
->
chunk
->
chunk_ty≥
, 
°dout
);

2121 
	`¥ötf
(" %†%†%d %d ", 
ªas⁄
, 
	`zlib_Êevñ
(
zlib
), zlib->
fûe_bôs
,

2122 
zlib
->
ok_bôs
);

2123 
	`u¨b_¥öt
(
zlib
->
com¥es£d_byãs
, zlib->
com¥es£d_digôs
, 
°dout
);

2124 
	`putc
(' ', 
°dout
);

2125 
	`u¨b_¥öt
(
zlib
->
uncom¥es£d_byãs
, zlib->
uncom¥es£d_digôs
,

2126 
°dout
);

2127 
	`putc
(' ', 
°dout
);

2128 
	`Âuts
(
zlib
->
fûe
->
fûe_«me
, 
°dout
);

2129 
	`putc
('\n', 
°dout
);

2145 
	`ty≥_«me
(
zlib
->
chunk
->
chunk_ty≥
, 
°dout
);

2146 
	`¥ötf
(" SKP %†%d %†", 
	`zlib_Êevñ
(
zlib
), zlib->
fûe_bôs
,

2147 
	`zlib_rc
(
zlib
));

2148 
	`u¨b_¥öt
(
zlib
->
com¥es£d_byãs
, zlib->
com¥es£d_digôs
, 
°dout
);

2149 
	`putc
(' ', 
°dout
);

2150 
	`emô_°rög
(
zlib
->
z
.
msg
 ? zlib->z.msg : "[no_mesßge]", 
°dout
);

2151 
	`putc
(' ', 
°dout
);

2152 
	`Âuts
(
zlib
->
fûe
->
fûe_«me
, 
°dout
);

2153 
	`putc
('\n', 
°dout
);

2157 i‡(
zlib
->
°©e
 >= 0)

2159 
zlib
->
rc
 = 
	`öÊ©eEnd
(&zlib->
z
);

2161 i‡(
zlib
->
rc
 !
Z_OK
)

2162 
	`zlib_mesßge
(
zlib
, 1 );

2165 
	`CLEAR
(*
zlib
);

2166 
	}
}

2169 
	$zlib_ª£t
(
zlib
 *zlib, 
wödow_bôs
)

2172 
	`as£π
(
zlib
->
°©e
 >= 0);

2174 
zlib
->
z
.
√xt_ö
 = 
Z_NULL
;

2175 
zlib
->
z
.
avaû_ö
 = 0;

2176 
zlib
->
z
.
√xt_out
 = 
Z_NULL
;

2177 
zlib
->
z
.
avaû_out
 = 0;

2179 
zlib
->
wödow_bôs
 = window_bits;

2180 
zlib
->
com¥es£d_digôs
 = 0;

2181 
zlib
->
uncom¥es£d_digôs
 = 0;

2183 
zlib
->
°©e
 = 0;

2184 
zlib
->
rc
 = 
	`öÊ©eRe£t2
(&zlib->
z
, 0);

2185 i‡(
zlib
->
rc
 !
Z_OK
)

2187 
	`zlib_mesßge
(
zlib
, 1 );

2192 
	}
}

2195 
	$zlib_öô
(
zlib
 *zlib, 
IDAT
 *
id©
, 
chunk
 *chunk,

2196 
wödow_bôs
, 
≤g_uöt_32
 
off£t
)

2199 
	`CLEAR
(*
zlib
);

2201 
zlib
->
id©
 = idat;

2202 
zlib
->
chunk
 = chunk;

2203 
zlib
->
fûe
 = 
chunk
->file;

2204 
zlib
->
globÆ
 = 
chunk
->global;

2205 
zlib
->
ªwrôe_off£t
 = 
off£t
;

2208 
zlib
->
z
.
√xt_ö
 = 
Z_NULL
;

2209 
zlib
->
z
.
avaû_ö
 = 0;

2210 
zlib
->
z
.
zÆloc
 = 
Z_NULL
;

2211 
zlib
->
z
.
z‰ì
 = 
Z_NULL
;

2212 
zlib
->
z
.
›aque
 = 
Z_NULL
;

2214 
zlib
->
°©e
 = -1;

2215 
zlib
->
wödow_bôs
 = window_bits;

2217 
zlib
->
com¥es£d_digôs
 = 0;

2218 
zlib
->
uncom¥es£d_digôs
 = 0;

2223 
zlib
->
fûe_bôs
 = 24;

2224 
zlib
->
ok_bôs
 = 16;

2225 
zlib
->
cksum
 = 0;

2230 
zlib
->
rc
 = 
	`öÊ©eInô2
(&zlib->
z
, 0);

2231 i‡(
zlib
->
rc
 !
Z_OK
)

2233 
	`zlib_mesßge
(
zlib
, 1 );

2239 
zlib
->
°©e
 = 0;

2242 
	}
}

2245 
	$max_wödow_bôs
(
u¨bc
 
size
, 
ndigôs
)

2248 
≤g_uöt_16
 
cb
;

2250 i‡(
ndigôs
 > 1)

2253 
cb
 = 
size
[0];

2255 i‡(
cb
 > 16384)  15;

2256 i‡(
cb
 > 8192)  14;

2257 i‡(
cb
 > 4096)  13;

2258 i‡(
cb
 > 2048)  12;

2259 i‡(
cb
 > 1024)  11;

2260 i‡(
cb
 > 512)  10;

2261 i‡(
cb
 > 256)  9;

2263 
	}
}

2266 
	$zlib_adv™˚
(
zlib
 *zlib, 
≤g_uöt_32
 
nbyãs
)

2277 
	#ZLIB_TOO_FAR_BACK
 (-1)

	)

2278 
	#ZLIB_OK
 0

	)

2279 
	#ZLIB_STREAM_END
 1

	)

2280 
	#ZLIB_FATAL
 2

	)

2282 
°©e
 = 
zlib
->state;

2283 
ídrc
 = 
ZLIB_OK
;

2284 
≤g_uöt_32
 
ö_byãs
 = 0;

2285 
fûe
 *fûê
zlib
->file;

2287 
	`as£π
(
°©e
 >= 0);

2289 
ö_byãs
 < 
nbyãs
 && 
ídrc
 =
ZLIB_OK
)

2291 
≤g_uöt_32
 
out_byãs
;

2292 
Êush
;

2293 
≤g_byã
 
bIn
 = 
	`ªªad_byã
(
fûe
);

2294 
≤g_byã
 
bOut
;

2296 
°©e
)

2300 
fûe_bôs
 = 8+(
bIn
 >> 4);

2301 
√w_bôs
 = 
zlib
->
wödow_bôs
;

2303 
zlib
->
fûe_bôs
 = file_bits;

2310 i‡(
√w_bôs
 == 0)

2311 
zlib
->
wödow_bôs
 = ((
fûe_bôs
 > 15) ? 15 : file_bits);

2313 i‡(
√w_bôs
 !
fûe_bôs
)

2314 
bIn
 = (
≤g_byã
)((bI¿& 0xfË+ ((
√w_bôs
-8) << 4));

2317 
zlib
->
hódî
[0] = 
bIn
;

2318 
zlib
->
°©e
 = state = 1;

2323 
b2
 = 
bIn
 & 0xe0;

2326 
b2
 +0x1‡- ((
zlib
->
hódî
[0] << 8) + b2) % 0x1f;

2329 i‡(
bIn
 !
b2
)

2334 i‡(
zlib
->
fûe_bôs
 =zlib->
wödow_bôs
)

2335 
zlib
->
cksum
 = 1;

2337 
bIn
 = (
≤g_byã
)
b2
;

2341 
zlib
->
hódî
[1] = 
bIn
;

2342 
zlib
->
°©e
 = state = 2;

2355 
zlib
->
z
.
√xt_ö
 = &
bIn
;

2356 
zlib
->
z
.
avaû_ö
 = 1;

2357 
zlib
->
z
.
√xt_out
 = &
bOut
;

2358 
zlib
->
z
.
avaû_out
 = 0;

2363 
Êush
 = 
Z_NO_FLUSH
;

2364 
out_byãs
 = 0;

2369 ;
ídrc
 =
ZLIB_OK
;

2370 
Êush
 = 
Z_SYNC_FLUSH
,

2371 
zlib
->
z
.
√xt_out
 = &
bOut
,

2372 
zlib
->
z
.
avaû_out
 = 1,

2373 ++
out_byãs
)

2375 
zlib
->
rc
 = 
	`öÊ©e
(&zlib->
z
, 
Êush
);

2376 
out_byãs
 -
zlib
->
z
.
avaû_out
;

2378 
zlib
->
rc
)

2380 
Z_BUF_ERROR
:

2381 i‡(
zlib
->
z
.
avaû_out
 == 0)

2384 i‡(
zlib
->
z
.
avaû_ö
 == 0)

2390 
	`zlib_mesßge
(
zlib
, 1 );

2391 
ídrc
 = 
ZLIB_FATAL
;

2394 
Z_OK
:

2396 
	`as£π
(
zlib
->
z
.
avaû_out
 =0 || zlib->z.
avaû_ö
 == 0);

2399 
Z_STREAM_END
:

2401 
zlib
->
°©e
 = 3;

2402 
ídrc
 = 
ZLIB_STREAM_END
;

2405 
Z_NEED_DICT
:

2406 
	`zlib_mesßge
(
zlib
, 0 );

2407 
ídrc
 = 
ZLIB_FATAL
;

2410 
Z_DATA_ERROR
:

2412 i‡(
zlib
->
z
.
msg
 !
NULL
 &&

2413 
	`°rcmp
(
zlib
->
z
.
msg
, "invalid distanceÅoo far back") == 0)

2415 
ídrc
 = 
ZLIB_TOO_FAR_BACK
;

2421 
	`zlib_mesßge
(
zlib
, 0 );

2422 
ídrc
 = 
ZLIB_FATAL
;

2433 
zlib
->
uncom¥es£d_digôs
 = 
	`u¨b_add32
(zlib->
uncom¥es£d_byãs
,

2434 
zlib
->
uncom¥es£d_digôs
, 
out_byãs
);

2440 
	`as£π
(
zlib
->
z
.
avaû_ö
 =0 || 
ídrc
 !
ZLIB_OK
);

2442 
ö_byãs
 +1 - 
zlib
->
z
.
avaû_ö
;

2445 
	`as£π
(
ö_byãs
 =
nbyãs
 || 
ídrc
 !
ZLIB_OK
);

2448 
zlib
->
com¥es£d_digôs
 = 
	`u¨b_add32
(zlib->
com¥es£d_byãs
,

2449 
zlib
->
com¥es£d_digôs
, 
ö_byãs
 - zlib->
z
.
avaû_ö
);

2454 i‡(
ídrc
 =
ZLIB_STREAM_END
 && 
zlib
->
wödow_bôs
 < zlib->
ok_bôs
)

2456 
chunk
 *chunk = 
zlib
->chunk;

2458 
chunk
->
uncom¥es£d_digôs
 = 
	`u¨b_c›y
(chunk->
uncom¥es£d_byãs
,

2459 
zlib
->
uncom¥es£d_byãs
, zlib->
uncom¥es£d_digôs
);

2460 
chunk
->
com¥es£d_digôs
 = 
	`u¨b_c›y
(chunk->
com¥es£d_byãs
,

2461 
zlib
->
com¥es£d_byãs
, zlib->
com¥es£d_digôs
);

2462 
chunk
->
ªwrôe_buf„r
[0] = 
zlib
->
hódî
[0];

2463 
chunk
->
ªwrôe_buf„r
[1] = 
zlib
->
hódî
[1];

2465 i‡(
zlib
->
wödow_bôs
 !zlib->
fûe_bôs
 || zlib->
cksum
)

2468 
chunk
->
ªwrôe_off£t
 = 
zlib
->rewrite_offset;

2469 
chunk
->
ªwrôe_Àngth
 = 2;

2474 
chunk
->
ªwrôe_off£t
 = 0;

2475 
chunk
->
ªwrôe_Àngth
 = 0;

2478 i‡(
ö_byãs
 < 
nbyãs
)

2479 
	`chunk_mesßge
(
chunk
, "extra compressed data");

2481 
zlib
->
exåa_byãs
 = 
nbyãs
 - 
ö_byãs
;

2482 
zlib
->
ok_bôs
 = zlib->
wödow_bôs
;

2485  
ídrc
;

2486 
	}
}

2489 
	$zlib_run
(
zlib
 *zlib)

2499 
zlib
->
exåa_byãs
 = 0;

2501 i‡(
zlib
->
id©
 !
NULL
)

2503 
IDAT_li°
 *
li°
 = 
zlib
->
id©
->
id©_li°_hód
;

2504 
IDAT_li°
 *
œ°
 = 
zlib
->
id©
->
id©_li°_èû
;

2505 
skù
 = 0;

2510 
	`as£π
(
zlib
->
ªwrôe_off£t
 == 0);

2517 
cou¡
 = 
li°
->count;

2518 
i
;

2520 
i
 = 0; i<
cou¡
; ++i)

2522 
rc
;

2524 i‡(
skù
 > 0)

2525 
	`skù_12
(
zlib
->
fûe
);

2527 
skù
 = 12;

2529 
rc
 = 
	`zlib_adv™˚
(
zlib
, 
li°
->
Àngths
[
i
]);

2531 
rc
)

2533 
ZLIB_OK
:

2536 
ZLIB_STREAM_END
:

2541 i‡(
zlib
->
globÆ
->
îr‹s
 && zlib->
exåa_byãs
 == 0)

2543 
IDAT_li°
 *
check
 = 
li°
;

2544 
j
 = 
i
+1, 
jcou¡
 = 
cou¡
;

2548 ; 
j
<
jcou¡
; ++j)

2549 i‡(
check
->
Àngths
[
j
] > 0)

2551 
	`chunk_mesßge
(
zlib
->
chunk
,

2553 
íd_check
;

2556 i‡(
check
 =
œ°
)

2559 
check
 = check->
√xt
;

2560 
jcou¡
 = 
check
->
cou¡
;

2561 
j
 = 0;

2565 
íd_check
:

2569 
li°
->
Àngths
[
i
] -
zlib
->
exåa_byãs
;

2570 
li°
->
cou¡
 = 
i
+1;

2571 
zlib
->
id©
->
id©_li°_èû
 = 
li°
;

2575  
rc
;

2580 i‡(
li°
 =
œ°
)

2581  
ZLIB_OK
;

2583 
li°
 =Üi°->
√xt
;

2589 
chunk
 *chunk = 
zlib
->chunk;

2590 
rc
;

2592 
	`as£π
(
zlib
->
ªwrôe_off£t
 < 
chunk
->
chunk_Àngth
);

2594 
rc
 = 
	`zlib_adv™˚
(
zlib
, 
chunk
->
chunk_Àngth
 - zlib->
ªwrôe_off£t
);

2601 
chunk
->
chunk_Àngth
 -
zlib
->
exåa_byãs
;

2602  
rc
;

2604 
	}
}

2607 
	$zlib_check
(
fûe
 *fûe, 
≤g_uöt_32
 
off£t
)

2621 
Âos_t
 
°¨t_pos
;

2622 
zlib
 zlib;

2625 
	`fûe_gëpos
(
fûe
, &
°¨t_pos
);

2628 i‡(
	`zlib_öô
(&
zlib
, 
fûe
->
id©
, fûe->
chunk
, 0 , 
off£t
))

2630 
mö_bôs
, 
max_bôs
, 
rc
;

2633 
rc
 = 
	`zlib_run
(&
zlib
);

2635 
rc
)

2637 
ZLIB_TOO_FAR_BACK
:

2639 
fûe
->
°©us_code
 |
TOO_FAR_BACK
;

2640 
mö_bôs
 = 
zlib
.
wödow_bôs
 + 1;

2641 
max_bôs
 = 15;

2644 
ZLIB_STREAM_END
:

2645 i‡(!
zlib
.
globÆ
->
›timize_zlib
 &&

2646 
zlib
.
wödow_bôs
 =zlib.
fûe_bôs
 && !zlib.
cksum
)

2651 
	`zlib_íd
(&
zlib
);

2655 
max_bôs
 = 
	`max_wödow_bôs
(
zlib
.
uncom¥es£d_byãs
,

2656 
zlib
.
uncom¥es£d_digôs
);

2657 i‡(
zlib
.
ok_bôs
 < 
max_bôs
)

2658 
max_bôs
 = 
zlib
.
ok_bôs
;

2659 
mö_bôs
 = 8;

2666 i‡(
zlib
.
cksum
)

2667 
	`chunk_mesßge
(
zlib
.
chunk
, "zlib checksum");

2671 
ZLIB_OK
:

2673 
zlib
.
z
.
msg
 = 
	`PNGZ_MSG_CAST
("[truncated]");

2674 
	`zlib_mesßge
(&
zlib
, 0 );

2681 
	`zlib_íd
(&
zlib
);

2689 
mö_bôs
 < 
max_bôs
 || max_bô†< 
zlib
.
ok_bôs
 )

2691 
ã°_bôs
 = (
mö_bôs
 + 
max_bôs
) >> 1;

2693 i‡(
	`zlib_ª£t
(&
zlib
, 
ã°_bôs
))

2695 
	`fûe_£ços
(
fûe
, &
°¨t_pos
);

2696 
rc
 = 
	`zlib_run
(&
zlib
);

2698 
rc
)

2700 
ZLIB_TOO_FAR_BACK
:

2701 
mö_bôs
 = 
ã°_bôs
+1;

2702 i‡(
mö_bôs
 > 
max_bôs
)

2708 
	`as£π
(
ã°_bôs
 == 15);

2711 i‡(
zlib
.
z
.
msg
 =
NULL
)

2712 
zlib
.
z
.
msg
 = 
	`PNGZ_MSG_CAST
(

2714 
	`zlib_mesßge
(&
zlib
, 0 );

2715 
	`zlib_íd
(&
zlib
);

2720 
ZLIB_STREAM_END
:

2721 
max_bôs
 = 
ã°_bôs
;

2729 
	`zlib_íd
(&
zlib
);

2736 
	`zlib_íd
(&
zlib
);

2742 
	`as£π
(
zlib
.
ok_bôs
 =
max_bôs
);

2743 
	`zlib_íd
(&
zlib
);

2749 
	`zlib_íd
(&
zlib
);

2752 
	}
}

2782 
ªad_chunk
(
fûe
 *file);

2784 
	$¥o˚ss_chunk
(
fûe
 *fûe, 
≤g_uöt_32
 
fûe_¸c
,Öng_uöt_32 
√xt_Àngth
,

2785 
≤g_uöt_32
 
√xt_ty≥
)

2794 
≤g_uöt_32
 
ty≥
 = 
fûe
->type;

2796 i‡(
fûe
->
globÆ
->
vîbo£
 > 1)

2798 
	`Âuts
(" ", 
°dîr
);

2799 
	`ty≥_«me
(
fûe
->
ty≥
, 
°dîr
);

2800 
	`Ârötf
(
°dîr
, " %lu 0x%.8x 0x%.8x\n", ()
fûe
->
Àngth
,

2801 
fûe
->
¸c
 ^ 0xffffffff, 
fûe_¸c
);

2808 i‡((
fûe
->
¸c
 ^ 0xffffffffË!
fûe_¸c
)

2815 
fûe
->
°©us_code
 |
CRC_ERROR
;

2818 i‡(
fûe
->
globÆ
->
skù
 !
SKIP_BAD_CRC
)

2819 
	`ty≥_mesßge
(
fûe
, 
ty≥
, "bad CRC");

2822 i‡(
	`CRITICAL
(
ty≥
))

2823 
	`°›
(
fûe
, 
READ_ERROR_CODE
, "bad CRC in critical chunk");

2827 
	`ty≥_mesßge
(
fûe
, 
ty≥
, "skipped: bad CRC");

2830 
skù_chunk
;

2838 i‡(
	`skù_chunk_ty≥
(
fûe
->
globÆ
, 
ty≥
))

2839 
skù_chunk
;

2846 i‡(
ty≥
 !
≤g_IDAT
)

2847 
fûe
->
	`Æloc
(file, 0 );

2849 i‡(
fûe
->
id©
 =
NULL
)

2850 
fûe
->
	`Æloc
(file, 1 );

2855 
	`as£π
(
fûe
->
chunk
 !
NULL
);

2856 
	`as£π
(
fûe
->
chunk
->
chunk_ty≥
 =
≤g_IDAT
);

2857 
fûe
->
chunk
->
chunk_Àngth
 = fûe->
Àngth
;

2865 
fûe
->
Àngth
 = 
√xt_Àngth
;

2866 
fûe
->
ty≥
 = 
√xt_ty≥
;

2867 
	`gëpos
(
fûe
);

2873 
fûe
->
chunk
->
ªwrôe_Àngth
 = 0;

2874 
fûe
->
chunk
->
ªwrôe_off£t
 = 0;

2875 
ty≥
)

2880 
≤g_IHDR
:

2886 
chunk
 *chunk = 
fûe
->chunk;

2888 i‡(
chunk
->
chunk_Àngth
 != 13)

2889 
	`°›_övÆid
(
fûe
, "IHDRÜength");

2892 
	`£ços
(
chunk
);

2893 
fûe
->
width
 = 
	`ªªad_4
(file);

2894 
fûe
->
height
 = 
	`ªªad_4
(file);

2895 
fûe
->
bô_dïth
 = 
	`ªªad_byã
(file);

2896 
fûe
->
cﬁ‹_ty≥
 = 
	`ªªad_byã
(file);

2897 
fûe
->
com¥essi⁄_mëhod
 = 
	`ªªad_byã
(file);

2898 
fûe
->
fûãr_mëhod
 = 
	`ªªad_byã
(file);

2899 
fûe
->
öãæa˚_mëhod
 = 
	`ªªad_byã
(file);

2904 
	`ˇlc_image_size
(
fûe
);

2909 
≤g_zTXt
: 
≤g_iCCP
:

2910 i‡(
	`¥o˚ss_zTXt_iCCP
(
fûe
))

2912 
	`chunk_íd
(&
fûe
->
chunk
);

2913 
	`fûe_£ços
(
fûe
, &fûe->
d©a_pos
);

2916 
≤g_iTXt
:

2917 i‡(
	`¥o˚ss_iTXt
(
fûe
))

2919 
	`chunk_íd
(&
fûe
->
chunk
);

2920 
	`fûe_£ços
(
fûe
, &fûe->
d©a_pos
);

2923 
≤g_IDAT
:

2924 i‡(
	`¥o˚ss_IDAT
(
fûe
))

2927 
	`as£π
(
√xt_ty≥
 =
≤g_IDAT
);

2938 
	`ªad_chunk
(
fûe
);

2944 
skù_chunk
:

2945 
fûe
->
Àngth
 = 
√xt_Àngth
;

2946 
fûe
->
ty≥
 = 
√xt_ty≥
;

2947 
	`gëpos
(
fûe
);

2948 
	`ªad_chunk
(
fûe
);

2949 
	}
}

2951 
≤g_uöt_32


2952 
	$gë32
(
≤g_byãp
 
buf„r
, 
off£t
)

2957 (
buf„r
[ 
off£t
 & 7] << 24) +

2958 (
buf„r
[(
off£t
+1) & 7] << 16) +

2959 (
buf„r
[(
off£t
+2) & 7] << 8) +

2960 (
buf„r
[(
off£t
+3) & 7] );

2961 
	}
}

2964 
	$sync_°ªam
(
fûe
 *file)

2969 
≤g_uöt_32
 
fûe_¸c
;

2971 
fûe
->
°©us_code
 |
STREAM_ERROR
;

2973 i‡(
fûe
->
globÆ
->
vîbo£
)

2975 
	`Âuts
(" SYNC ", 
°dîr
);

2976 
	`ty≥_«me
(
fûe
->
ty≥
, 
°dîr
);

2977 
	`putc
('\n', 
°dîr
);

2981 
	`fûe_£ços
(
fûe
, &fûe->
d©a_pos
);

2982 
fûe
->
ªad_cou¡
 = 8;

2984 i‡(
	`ªad_4
(
fûe
, &
fûe_¸c
) == 4)

2991 
≤g_uöt_32
 
Àngth
;

2992 
≤g_uöt_32
 
ty≥
 = 
fûe
->type;

2993 
≤g_uöt_32
 
¸c
 = 
	`¸c_öô_4
(
ty≥
);

2994 
≤g_byã
 
buf„r
[8];

2995 
ƒód
 = 0, 
nu£d
 = 0;

2997 
Àngth
=0;Üength <= 0x7fffffff; ++length)

2999 
ch
;

3001 i‡((
¸c
 ^ 0xffffffffË=
fûe_¸c
)

3006 i‡(
ty≥
 =
≤g_IEND
)

3008 
fûe
->
Àngth
 =Üength;

3009 
	`¥o˚ss_chunk
(
fûe
, 
fûe_¸c
, 0, 0);

3016 
ƒód
 < 8+
nu£d
)

3018 
ch
 = 
	`ªad_byã
(
fûe
);

3019 i‡(
ch
 =
EOF
)

3020 
åunˇãd
;

3021 
buf„r
[(
ƒód
++Ë& 7] = (
≤g_byã
)
ch
;

3025 
ƒód
 -
nu£d
 & ~7;

3026 
nu£d
 -=Çused & ~7;

3030 
≤g_uöt_32
 
√xt_Àngth
 = 
	`gë32
(
buf„r
, 
nu£d
);

3032 i‡(
√xt_Àngth
 < 0x7fffffff)

3034 
≤g_uöt_32
 
√xt_ty≥
 = 
	`gë32
(
buf„r
, 
nu£d
+4);

3036 i‡(
	`chunk_ty≥_vÆid
(
√xt_ty≥
))

3038 
fûe
->
ªad_cou¡
 -= 8;

3039 
	`¥o˚ss_chunk
(
fûe
, 
fûe_¸c
, 
√xt_Àngth
, 
√xt_ty≥
);

3057 i‡(
ƒód
 <
nu£d
)

3059 
ch
 = 
	`ªad_byã
(
fûe
);

3061 i‡(
ch
 =
EOF
)

3062 
åunˇãd
;

3066 
ch
 = 
buf„r
[(++
nu£d
) & 7];

3068 
¸c
 = 
	`¸c_⁄e_byã
(¸c, 
fûe_¸c
 >> 24);

3069 
fûe_¸c
 = (fûe_¸¯<< 8Ë+ 
ch
;

3077 
åunˇãd
:

3078 
	`°›
(
fûe
, 
READ_ERROR_CODE
, "damaged PNG stream");

3079 
	}
}

3082 
	$ªad_chunk
(
fûe
 *file)

3096 
≤g_uöt_32
 
Àngth
 = 
fûe
->length;

3097 
≤g_uöt_32
 
ty≥
 = 
fûe
->type;

3102 i‡(
ty≥
 == 0)

3103 
	`°›
(
fûe
, 
UNEXPECTED_ERROR_CODE
, "read beyond IEND");

3105 i‡(
fûe
->
globÆ
->
vîbo£
 > 2)

3107 
	`Âuts
(" ", 
°dîr
);

3108 
	`ty≥_«me
(
ty≥
, 
°dîr
);

3109 
	`Ârötf
(
°dîr
, " %lu\n", ()
Àngth
);

3116 
fûe
->
¸c
 = 
	`¸c_öô_4
(
ty≥
);

3117 i‡(
	`¸c_ªad_m™y
(
fûe
, 
Àngth
))

3119 
≤g_uöt_32
 
fûe_¸c
;

3120 
ƒód
 = 
	`ªad_4
(
fûe
, &
fûe_¸c
);

3122 i‡(
ƒód
 == 4)

3124 i‡(
ty≥
 !
≤g_IEND
)

3126 
≤g_uöt_32
 
√xt_Àngth
;

3128 
ƒód
 +
	`ªad_4
(
fûe
, &
√xt_Àngth
);

3129 i‡(
ƒód
 =8 && 
√xt_Àngth
 <= 0x7fffffff)

3131 
≤g_uöt_32
 
√xt_ty≥
;

3133 
ƒód
 +
	`ªad_4
(
fûe
, &
√xt_ty≥
);

3135 i‡(
ƒód
 =12 && 
	`chunk_ty≥_vÆid
(
√xt_ty≥
))

3140 
fûe
->
ªad_cou¡
 -= 8;

3141 
	`¥o˚ss_chunk
(
fûe
, 
fûe_¸c
, 
√xt_Àngth
, 
√xt_ty≥
);

3149 
	`¥o˚ss_chunk
(
fûe
, 
fûe_¸c
, 0, 0);

3162 
	`sync_°ªam
(
fûe
);

3163 
	}
}

3166 
fûe
 *
gë_c⁄åﬁ
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
);

3168 
PNGCBAPI


3169 
	$îr‹_h™dÀr
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
mesßge
)

3171 
	`°›
(
	`gë_c⁄åﬁ
(
≤g_±r
), 
LIBPNG_ERROR_CODE
, 
mesßge
);

3172 
	}
}

3174 
PNGCBAPI


3175 
	$w¨nög_h™dÀr
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
mesßge
)

3177 
fûe
 *fûê
	`gë_c⁄åﬁ
(
≤g_±r
);

3179 i‡(
fûe
->
globÆ
->
w¨nögs
)

3180 
	`emô_îr‹
(
fûe
, 
LIBPNG_WARNING_CODE
, 
mesßge
);

3181 
	}
}

3186 
PNGCBAPI


3187 
	$ªad_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf„r
, 
size_t
 
cou¡
)

3190 
fûe
 *fûê
	`gë_c⁄åﬁ
(
≤g_±r
);

3191 
≤g_uöt_32
 
ty≥
, 
Àngth
;

3192 
chunk
 *chunk;

3195 i‡(
cou¡
 == 0)

3196 
	`°›
(
fûe
, 
UNEXPECTED_ERROR_CODE
, "read callback for 0 bytes");

3203 i‡(
fûe
->
ªad_cou¡
 < 8)

3205 
	`as£π
(
fûe
->
ªad_cou¡
 == 0);

3206 
	`as£π
((
fûe
->
°©us_code
 & 
TRUNCATED
) == 0);

3208 ()
	`ªad_4
(
fûe
, &fûe->
Àngth
);

3210 i‡(
fûe
->
ªad_cou¡
 == 4)

3211 ()
	`ªad_4
(
fûe
, &fûe->
ty≥
);

3213 i‡(
fûe
->
ªad_cou¡
 < 8)

3215 
	`as£π
((
fûe
->
°©us_code
 & 
TRUNCATED
) != 0);

3216 
	`°›
(
fûe
, 
READ_ERROR_CODE
, "notá PNG (too short)");

3219 i‡(
fûe
->
°©e
 =
STATE_SIGNATURE
)

3221 i‡(
fûe
->
Àngth
 !
sig1
 || fûe->
ty≥
 !
sig2
)

3222 
	`°›
(
fûe
, 
LIBPNG_ERROR_CODE
, "notá PNG (signature)");

3227 
fûe
->
wrôe_cou¡
 = 0;

3232 
	`as£π
(
fûe
->
°©e
 =
STATE_CHUNKS
);

3237 i‡(
fûe
->
Àngth
 !13 || fûe->
ty≥
 !
≤g_IHDR
)

3238 
	`°›
(
fûe
, 
LIBPNG_ERROR_CODE
, "notá PNG (IHDR)");

3241 
	`gëpos
(
fûe
);

3248 
chunk
 = 
fûe
->chunk;

3250 i‡(
chunk
 !
NULL
)

3252 
Àngth
 = 
chunk
->
chunk_Àngth
;

3253 
ty≥
 = 
chunk
->
chunk_ty≥
;

3261 
Àngth
 = 
fûe
->length;

3262 
ty≥
 = 
fûe
->type;

3267 
≤g_uöt_32
 
b
;

3279 i‡(
fûe
->
°©e
 !
STATE_SIGNATURE
 && 
chunk
 =
NULL
)

3281 
	`as£π
(
fûe
->
ªad_cou¡
 == 8);

3282 
	`as£π
(
fûe
->
id©
 =
NULL
);

3283 
	`ªad_chunk
(
fûe
);

3284 
chunk
 = 
fûe
->chunk;

3285 
	`as£π
(
chunk
 !
NULL
);

3288 
Àngth
 = 
chunk
->
chunk_Àngth
;

3289 
ty≥
 = 
chunk
->
chunk_ty≥
;

3292 
fûe
->
wrôe_cou¡
 = 0;

3299 
fûe
->
wrôe_cou¡
)

3301 0: 
b
 = 
Àngth
 >> 24; ;

3302 1: 
b
 = 
Àngth
 >> 16; ;

3303 2: 
b
 = 
Àngth
 >> 8; ;

3304 3: 
b
 = 
Àngth
 ; ;

3306 4: 
b
 = 
ty≥
 >> 24; ;

3307 5: 
b
 = 
ty≥
 >> 16; ;

3308 6: 
b
 = 
ty≥
 >> 8; ;

3309 7: 
b
 = 
ty≥
 ; ;

3316 i‡(
fûe
->
°©e
 =
STATE_SIGNATURE
)

3322 
	`as£π
(
Àngth
 =
sig1
 && 
ty≥
 =
sig2
);

3323 
fûe
->
ªad_cou¡
 = 0;

3324 
fûe
->
°©e
 = 
STATE_CHUNKS
;

3325 
	`ªad_ˇŒback
(
≤g_±r
, 
buf„r
, 
cou¡
);

3331 
	`as£π
(
chunk
 !
NULL
);

3339 
chunk
->
wrôe_¸c
 = 
	`¸c_öô_4
(
ty≥
);

3340 i‡(
fûe
->
°©e
 !
STATE_IDAT
 && 
Àngth
 > 0)

3341 
	`£ços
(
chunk
);

3346 
	`as£π
(
chunk
 !
NULL
);

3351 
fûe
->
wrôe_cou¡
 - 
Àngth
)

3360 i‡(
fûe
->
°©e
 =
STATE_IDAT
)

3362 
IDAT
 *
id©
 = 
fûe
->idat;

3364 
	`as£π
(
id©
 !
NULL
);

3372 
id©
->
id©_ödex
 >id©->
id©_Àngth
)

3375 
IDAT_li°
 *
cur
 = 
id©
->
id©_cur
;

3377 
	`as£π
(
id©
->
id©_ödex
 =id©->
id©_Àngth
);

3378 
	`as£π
(
cur
 !
NULL
 && cur->
cou¡
 > 0);

3381 i‡(++(
id©
->
id©_cou¡
Ë>
cur
->
cou¡
)

3383 
	`as£π
(
id©
->
id©_cou¡
 =
cur
->
cou¡
);

3386 
cur
 = cur->
√xt
;

3391 i‡(
cur
 =
NULL
 || cur->
cou¡
 == 0)

3392 
	`°›
(
fûe
, 
UNEXPECTED_ERROR_CODE
,

3395 
id©
->
id©_cou¡
 = 0;

3396 
id©
->
id©_cur
 = 
cur
;

3399 
id©
->
id©_ödex
 = 0;

3403 
id©
->
id©_Àngth
 = 
cur
->
Àngths
[id©->
id©_cou¡
];

3406 
	`skù_12
(
fûe
);

3413 ++(
id©
->
id©_ödex
);

3417 
b
 = 
	`ªªad_byã
(
fûe
);

3420 i‡(
chunk
->
ªwrôe_Àngth
 > 0)

3422 i‡(
chunk
->
ªwrôe_off£t
 > 0)

3423 --(
chunk
->
ªwrôe_off£t
);

3427 
b
 = 
chunk
->
ªwrôe_buf„r
[0];

3428 
	`memmove
(
chunk
->
ªwrôe_buf„r
, chunk->rewrite_buffer+1,

3429 ( 
chunk
->
ªwrôe_buf„r
)-

3430 ( 
chunk
->
ªwrôe_buf„r
[0]));

3432 --(
chunk
->
ªwrôe_Àngth
);

3436 
chunk
->
wrôe_¸c
 = 
	`¸c_⁄e_byã
(chunk->wrôe_¸c, 
b
);

3445 8: 
b
 = 
chunk
->
wrôe_¸c
 >> 24; write_crc;

3446 9: 
b
 = 
chunk
->
wrôe_¸c
 >> 16; write_crc;

3447 10: 
b
 = 
chunk
->
wrôe_¸c
 >> 8; write_crc;

3450 
b
 = 
chunk
->
wrôe_¸c
;

3452 i‡(
fûe
->
globÆ
->
vîbo£
 > 2)

3454 
	`Âuts
(" ", 
°dîr
);

3455 
	`ty≥_«me
(
ty≥
, 
°dîr
);

3456 
	`Ârötf
(
°dîr
, " %lu 0x%.8x\n", ()
Àngth
,

3457 
chunk
->
wrôe_¸c
 ^ 0xffffffff);

3467 i‡(
fûe
->
°©e
 =
STATE_IDAT
 &&

3468 (
fûe
->
id©
->
id©_ödex
 < fûe->id©->
id©_Àngth
 ||

3469 1+
fûe
->
id©
->
id©_cou¡
 < fûe->id©->
id©_cur
->
cou¡
 ||

3470 
fûe
->
id©
->
id©_cur
 !fûe->id©->
id©_li°_èû
))

3475 
Àngth
 = 
chunk
->
chunk_Àngth
 =

3476 
	`ªchunk_Àngth
(
fûe
->
id©
, 0 );

3477 
	`as£π
(
ty≥
 =
≤g_IDAT
);

3478 
fûe
->
wrôe_cou¡
 = 0;

3479 --(
fûe
->
wrôe_cou¡
);

3487 i‡(
chunk
->
ªwrôe_Àngth
 > 0 || chunk->
ªwrôe_off£t
 > 0)

3488 
	`°›
(
fûe
, 
UNEXPECTED_ERROR_CODE
, "pendingÑewrite");

3494 
fûe
->
ªad_cou¡
 = 8;

3495 
	`fûe_£ços
(
fûe
, &fûe->
d©a_pos
);

3497 i‡(
fûe
->
id©
 =
NULL
)

3498 
	`chunk_íd
(&
fûe
->
chunk
);

3501 
	`IDAT_íd
(&
fûe
->
id©
);

3504 
wrôe_¸c
:

3505 
b
 ^= 0xff;

3512 
b
 &= 0xff;

3513 *
buf„r
++ = (
≤g_byã
)
b
;

3514 --
cou¡
;

3515 
	`wrôe_byã
(
fûe
, (
≤g_byã
)
b
);

3517 
cou¡
 > 0);

3518 
	}
}

3523 
	sc⁄åﬁ


3525 
fûe
 
	mfûe
;

3526 
chunk
 
	mchunk
;

3527 
IDAT
 
	mid©
;

3531 
	$c⁄åﬁ_íd
(
c⁄åﬁ
 *control)

3533  
	`fûe_íd
(&
c⁄åﬁ
->
fûe
);

3534 
	}
}

3536 
fûe
 *

3537 
	$gë_c⁄åﬁ
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

3542 
c⁄åﬁ
 *c⁄åﬁ = 
	`voidˇ°
(control*,

3543 
	`≤g_gë_îr‹_±r
(
≤g_±r
));

3544  &
c⁄åﬁ
->
fûe
;

3545 
	}
}

3548 
	$Æloˇã
(
fûe
 *fûe, 
Æloˇã_id©
)

3550 
c⁄åﬁ
 *c⁄åﬁ = 
	`voidˇ°
(c⁄åﬁ*, 
fûe
->
Æloc_±r
);

3552 i‡(
Æloˇã_id©
)

3554 
	`as£π
(
fûe
->
id©
 =
NULL
);

3555 
	`IDAT_öô
(&
c⁄åﬁ
->
id©
, 
fûe
);

3560 
	`as£π
(
fûe
->
chunk
 =
NULL
);

3561 
	`chunk_öô
(&
c⁄åﬁ
->
chunk
, 
fûe
);

3563 
	}
}

3566 
	$c⁄åﬁ_öô
(
c⁄åﬁ
 *c⁄åﬁ, 
globÆ
 *global,

3567 c⁄° *
fûe_«me
, c⁄° *
out_«me
)

3572  
	`fûe_öô
(&
c⁄åﬁ
->
fûe
, 
globÆ
, 
fûe_«me
, 
out_«me
, control,

3573 
Æloˇã
);

3574 
	}
}

3577 
	$ªad_≤g
(
c⁄åﬁ
 *control)

3582 
≤g_°ru˘p
 
≤g_±r
;

3583 
≤g_öf›
 
öfo_±r
 = 
NULL
;

3584 vﬁ©ûê
rc
;

3586 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
c⁄åﬁ
,

3587 
îr‹_h™dÀr
, 
w¨nög_h™dÀr
);

3589 i‡(
≤g_±r
 =
NULL
)

3592 
	`log_îr‹
(&
c⁄åﬁ
->
fûe
, 
LIBPNG_ERROR_CODE
, "OOMállocatingÖng_struct");

3593 
c⁄åﬁ
->
fûe
.
°©us_code
 |
INTERNAL_ERROR
;

3594  
LIBPNG_ERROR_CODE
;

3597 
rc
 = 
	`£tjmp
(
c⁄åﬁ
->
fûe
.
jmpbuf
);

3598 i‡(
rc
 == 0)

3600 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


3605 
	`≤g_£t_u£r_limôs
(
≤g_±r
, 0x7fffffff, 0x7fffffff);

3606 
	`≤g_£t_chunk_ˇche_max
(
≤g_±r
, 0);

3607 
	`≤g_£t_chunk_mÆloc_max
(
≤g_±r
, 0);

3610 
	`≤g_£t_ªad_‚
(
≤g_±r
, 
c⁄åﬁ
, 
ªad_ˇŒback
);

3612 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

3613 i‡(
öfo_±r
 =
NULL
)

3614 
	`≤g_îr‹
(
≤g_±r
, "OOMállocating info structure");

3616 i‡(
c⁄åﬁ
->
fûe
.
globÆ
->
vîbo£
)

3617 
	`Ârötf
(
°dîr
, " INFO\n");

3619 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

3622 
≤g_uöt_32
 
height
 = 
	`≤g_gë_image_height
(
≤g_±r
, 
öfo_±r
);

3623 
∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

3624 
∑ss
;

3626 
	`≤g_°¨t_ªad_image
(
≤g_±r
);

3628 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass)

3630 
≤g_uöt_32
 
y
 = 
height
;

3635 
y
-- > 0)

3636 
	`≤g_ªad_row
(
≤g_±r
, 
NULL
, NULL);

3640 i‡(
c⁄åﬁ
->
fûe
.
globÆ
->
vîbo£
)

3641 
	`Ârötf
(
°dîr
, " END\n");

3644 
	`≤g_ªad_íd
(
≤g_±r
, 
öfo_±r
);

3647 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

3648  
rc
;

3649 
	}
}

3652 
	$⁄e_fûe
(
globÆ
 *globÆ, c⁄° *
fûe_«me
, c⁄° *
out_«me
)

3654 
rc
;

3655 
c⁄åﬁ
 control;

3657 i‡(
globÆ
->
vîbo£
)

3658 
	`Ârötf
(
°dîr
, "FILE %†-> %s\n", 
fûe_«me
,

3659 
out_«me
 ? out_name : "<none>");

3664 
rc
 = 
	`c⁄åﬁ_öô
(&
c⁄åﬁ
, 
globÆ
, 
fûe_«me
, 
out_«me
);

3666 i‡(
rc
 == 0)

3667 
rc
 = 
	`ªad_≤g
(&
c⁄åﬁ
);

3669 
rc
 |
	`c⁄åﬁ_íd
(&
c⁄åﬁ
);

3671  
rc
;

3672 
	}
}

3675 
	$ußge
(c⁄° *
¥og
)

3678 
size_t
 
i
;

3679 c⁄° *
ußge_°rög
[] = {

3743 #ifde‡
PNG_MAXIMUM_INFLATE_WINDOW


3771 " " 
PROGRAM_NAME
 ":",

3844 
	`Ârötf
(
°dîr
, "Ußge: %†{[›ti⁄s]Öng-fûe}\n", 
¥og
);

3846 
i
=0; i < ( 
ußge_°rög
)/( usage_string[0]); ++i)

3848 i‡(
ußge_°rög
[
i
] != 0)

3849 
	`Âuts
(
ußge_°rög
[
i
], 
°dîr
);

3851 
	`Âutc
('\n', 
°dîr
);

3854 
	`exô
(255);

3855 
	}
}

3858 
	$maö
(
¨gc
, c⁄° **
¨gv
)

3860 
ãmp_«me
[
FILENAME_MAX
+1];

3861 c⁄° * 
¥og
 = *
¨gv
;

3862 c⁄° * 
outfûe
 = 
NULL
;

3863 c⁄° * 
suffix
 = 
NULL
;

3864 c⁄° * 
¥efix
 = 
NULL
;

3865 
d⁄e
 = 0;

3866 
globÆ
 global;

3868 
	`globÆ_öô
(&
globÆ
);

3870 --
¨gc
 > 0)

3872 ++
¨gv
;

3874 i‡(
	`°rcmp
(*
¨gv
, "--debug") == 0)

3877 
globÆ
.
îr‹s
 = globÆ.
w¨nögs
 = 1;

3878 
globÆ
.
quõt
 = 0;

3879 
globÆ
.
vîbo£
 = 7;

3882 i‡(
	`°∫cmp
(*
¨gv
, "--max=", 6) == 0)

3884 
globÆ
.
id©_max
 = (
≤g_uöt_32
)
	`©ﬁ
(6+*
¨gv
);

3886 i‡(
globÆ
.
skù
 < 
SKIP_UNSAFE
)

3887 
globÆ
.
skù
 = 
SKIP_UNSAFE
;

3890 i‡(
	`°rcmp
(*
¨gv
, "--max") == 0)

3892 
globÆ
.
id©_max
 = 0x7fffffff;

3894 i‡(
globÆ
.
skù
 < 
SKIP_UNSAFE
)

3895 
globÆ
.
skù
 = 
SKIP_UNSAFE
;

3898 i‡(
	`°rcmp
(*
¨gv
, "--optimize") == 0 || strcmp(*argv, "-o") == 0)

3899 
globÆ
.
›timize_zlib
 = 1;

3901 i‡(
	`°∫cmp
(*
¨gv
, "--out=", 6) == 0)

3902 
outfûe
 = 6+*
¨gv
;

3904 i‡(
	`°∫cmp
(*
¨gv
, "--suffix=", 9) == 0)

3905 
suffix
 = 9+*
¨gv
;

3907 i‡(
	`°∫cmp
(*
¨gv
, "--prefix=", 9) == 0)

3908 
¥efix
 = 9+*
¨gv
;

3910 i‡(
	`°rcmp
(*
¨gv
, "--strip=none") == 0)

3911 
globÆ
.
skù
 = 
SKIP_NONE
;

3913 i‡(
	`°rcmp
(*
¨gv
, "--strip=crc") == 0)

3914 
globÆ
.
skù
 = 
SKIP_BAD_CRC
;

3916 i‡(
	`°rcmp
(*
¨gv
, "--strip=unsafe") == 0)

3917 
globÆ
.
skù
 = 
SKIP_UNSAFE
;

3919 i‡(
	`°rcmp
(*
¨gv
, "--strip=unused") == 0)

3920 
globÆ
.
skù
 = 
SKIP_UNUSED
;

3922 i‡(
	`°rcmp
(*
¨gv
, "--strip=transform") == 0)

3923 
globÆ
.
skù
 = 
SKIP_TRANSFORM
;

3925 i‡(
	`°rcmp
(*
¨gv
, "--strip=color") == 0)

3926 
globÆ
.
skù
 = 
SKIP_COLOR
;

3928 i‡(
	`°rcmp
(*
¨gv
, "--strip=all") == 0)

3929 
globÆ
.
skù
 = 
SKIP_ALL
;

3931 i‡(
	`°rcmp
(*
¨gv
, "--errors") == 0 || strcmp(*argv, "-e") == 0)

3932 
globÆ
.
îr‹s
 = 1;

3934 i‡(
	`°rcmp
(*
¨gv
, "--warnings") == 0 || strcmp(*argv, "-w") == 0)

3935 
globÆ
.
w¨nögs
 = 1;

3937 i‡(
	`°rcmp
(*
¨gv
, "--quiet") == 0 || strcmp(*argv, "-q") == 0)

3939 i‡(
globÆ
.
quõt
)

3940 
globÆ
.
quõt
 = 2;

3943 
globÆ
.
quõt
 = 1;

3946 i‡(
	`°rcmp
(*
¨gv
, "--verbose") == 0 || strcmp(*argv, "-v") == 0)

3947 ++
globÆ
.
vîbo£
;

3951 #ifde‡
PNG_MAXIMUM_INFLATE_WINDOW


3952 i‡(
	`°rcmp
(*
¨gv
, "--test") == 0)

3953 ++
£t_›ti⁄
;

3957 i‡((*
¨gv
)[0] == '-')

3958 
	`ußge
(
¥og
);

3962 
size_t
 
ouéí
 = 
	`°æí
(*
¨gv
);

3964 i‡(
outfûe
 =
NULL
)

3967 i‡(
¥efix
 !
NULL
)

3969 
size_t
 
¥efixÀn
 = 
	`°æí
(
¥efix
);

3971 i‡(
¥efixÀn
+
ouéí
 > 
FILENAME_MAX
)

3973 
	`Ârötf
(
°dîr
, "%s: output fileÇameÅooÜong: %s%s%s\n",

3974 
¥og
, 
¥efix
, *
¨gv
, 
suffix
 ? suffix : "");

3975 
globÆ
.
°©us_code
 |
WRITE_ERROR
;

3979 
	`mem˝y
(
ãmp_«me
, 
¥efix
, 
¥efixÀn
);

3980 
	`mem˝y
(
ãmp_«me
+
¥efixÀn
, *
¨gv
, 
ouéí
);

3981 
ouéí
 +
¥efixÀn
;

3982 
outfûe
 = 
ãmp_«me
;

3985 i‡(
suffix
 !
NULL
)

3986 
	`mem˝y
(
ãmp_«me
, *
¨gv
, 
ouéí
);

3988 
ãmp_«me
[
ouéí
] = 0;

3990 i‡(
suffix
 !
NULL
)

3992 
size_t
 
suffixÀn
 = 
	`°æí
(
suffix
);

3994 i‡(
ouéí
+
suffixÀn
 > 
FILENAME_MAX
)

3996 
	`Ârötf
(
°dîr
, "%s: output fileÇameÅooÜong: %s%s\n",

3997 
¥og
, *
¨gv
, 
suffix
);

3998 
globÆ
.
°©us_code
 |
WRITE_ERROR
;

4002 
	`mem˝y
(
ãmp_«me
+
ouéí
, 
suffix
, 
suffixÀn
);

4003 
ouéí
 +
suffixÀn
;

4004 
ãmp_«me
[
ouéí
] = 0;

4005 
outfûe
 = 
ãmp_«me
;

4009 ()
	`⁄e_fûe
(&
globÆ
, *
¨gv
, 
outfûe
);

4010 ++
d⁄e
;

4011 
outfûe
 = 
NULL
;

4015 i‡(!
d⁄e
)

4016 
	`ußge
(
¥og
);

4018  
	`globÆ_íd
(&
globÆ
);

4019 
	}
}

4023 
	$maö
()

4025 
	`Ârötf
(
°dîr
,

4027 
ZLIB_VERNUM
);

4029 
	}
}

4035 
	$maö
()

4037 
	`Ârötf
(
°dîr
, "pngfix doesÇot work withoutÑead deinterlace support\n");

4039 
	}
}

4043 
	$maö
()

4045 
	`Ârötf
(
°dîr
, "pngfix doesÇot work without setjmp support\n");

4047 
	}
}

	@contrib/tools/sRGB.h

20 
	$sRGB_‰om_löór
(
l
)

22 i‡(
l
 <= 0.0031308)

23 
l
 *= 12.92;

26 
l
 = 1.055 * 
	`pow
(l, 1/2.4) - 0.055;

28  
l
;

29 
	}
}

32 
	$löór_‰om_sRGB
(
s
)

34 i‡(
s
 <= 0.04045)

35  
s
 / 12.92;

38  
	`pow
((
s
+0.055)/1.055, 2.4);

39 
	}
}

42 
	$Y‰omRGB
(
r
, 
g
, 
b
)

47  0.2126 * 
r
 + 0.7152 * 
g
 + 0.0722 * 
b
;

48 
	}
}

	@contrib/visupng/PngFile.c

12 
	~<wödows.h
>

13 
	~<commdlg.h
>

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<zlib.h
>

18 
	~"≤g.h
"

19 
	~"≤gfûe.h
"

20 
	~"˚x˚±.h
"

22 
deföe_ex˚±i⁄_ty≥
(const *);

23 
ex˚±i⁄_c⁄ãxt
 
the_ex˚±i⁄_c⁄ãxt
[1];

24 
ex˚±i⁄_c⁄ãxt
 
	gthe_ex˚±i⁄_c⁄ãxt
[1];

25 
≤g_c⁄°_ch¨p
 
	gmsg
;

27 
OPENFILENAME
 
	go‚
;

29 
≤g_°ru˘p
 
	g≤g_±r
 = 
NULL
;

30 
≤g_öf›
 
	göfo_±r
 = 
NULL
;

36 
	$≤g_˚x˚±_îr‹
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
msg
)

38 if(
≤g_±r
)

40 #ifde‡
PNG_CONSOLE_IO_SUPPORTED


41 
	`Ârötf
(
°dîr
, "lib≤gÉº‹: %s\n", 
msg
);

44 
Throw
 
msg
;

46 
	}
}

50 
	$PngFûeInôülize
 (
HWND
 
hwnd
)

52 
TCHAR
 
szFûãr
[] = 
	`TEXT
 ("PNG Files (*.PNG)\0*.png\0")

53 
	`TEXT
 ("All Files (*.*)\0*.*\0\0");

55 
o‚
.
lSåu˘Size
 =  (
OPENFILENAME
);

56 
o‚
.
hwndOw√r
 = 
hwnd
;

57 
o‚
.
hIn°™˚
 = 
NULL
;

58 
o‚
.
Õ°rFûãr
 = 
szFûãr
;

59 
o‚
.
Õ°rCu°omFûãr
 = 
NULL
;

60 
o‚
.
nMaxCu°Fûãr
 = 0;

61 
o‚
.
nFûãrIndex
 = 0;

62 
o‚
.
Õ°rFûe
 = 
NULL
;

63 
o‚
.
nMaxFûe
 = 
MAX_PATH
;

64 
o‚
.
Õ°rFûeTôÀ
 = 
NULL
;

65 
o‚
.
nMaxFûeTôÀ
 = 
MAX_PATH
;

66 
o‚
.
Õ°rInôülDú
 = 
NULL
;

67 
o‚
.
Õ°rTôÀ
 = 
NULL
;

68 
o‚
.
Fœgs
 = 0;

69 
o‚
.
nFûeOff£t
 = 0;

70 
o‚
.
nFûeExãnsi⁄
 = 0;

71 
o‚
.
Õ°rDefExt
 = 
	`TEXT
 ("png");

72 
o‚
.
lCu°D©a
 = 0;

73 
o‚
.
Õ‚Hook
 = 
NULL
;

74 
o‚
.
ÕTem∂©eName
 = 
NULL
;

75 
	}
}

77 
BOOL
 
	$PngFûeO≥nDlg
 (
HWND
 
hwnd
, 
PTSTR
 
p°rFûeName
, PTSTR 
p°rTôÀName
)

79 
o‚
.
hwndOw√r
 = 
hwnd
;

80 
o‚
.
Õ°rFûe
 = 
p°rFûeName
;

81 
o‚
.
Õ°rFûeTôÀ
 = 
p°rTôÀName
;

82 
o‚
.
Fœgs
 = 
OFN_HIDEREADONLY
;

84  
	`GëO≥nFûeName
 (&
o‚
);

85 
	}
}

87 
BOOL
 
	$PngFûeSaveDlg
 (
HWND
 
hwnd
, 
PTSTR
 
p°rFûeName
, PTSTR 
p°rTôÀName
)

89 
o‚
.
hwndOw√r
 = 
hwnd
;

90 
o‚
.
Õ°rFûe
 = 
p°rFûeName
;

91 
o‚
.
Õ°rFûeTôÀ
 = 
p°rTôÀName
;

92 
o‚
.
Fœgs
 = 
OFN_HIDEREADONLY
 | 
OFN_OVERWRITEPROMPT
;

94  
	`GëSaveFûeName
 (&
o‚
);

95 
	}
}

99 
BOOL
 
	$PngLﬂdImage
 (
PTSTR
 
p°rFûeName
, 
≤g_byã
 **
µbImageD©a
,

100 *
piWidth
, *
piHeight
, *
piCh™√ls
, 
≤g_cﬁ‹
 *
pBkgCﬁ‹
)

102 
FILE
 *
pfFûe
;

103 
≤g_byã
 
pbSig
[8];

104 
iBôDïth
;

105 
iCﬁ‹Ty≥
;

106 
dGamma
;

107 
≤g_cﬁ‹_16
 *
pBackground
;

108 
≤g_uöt_32
 
ulCh™√ls
;

109 
≤g_uöt_32
 
ulRowByãs
;

110 
≤g_byã
 *
pbImageD©a
 = *
µbImageD©a
;

111 
≤g_byã
 **
µbRowPoöãrs
 = 
NULL
;

112 
i
;

116 i‡(!
p°rFûeName
)

118 *
µbImageD©a
 = 
pbImageD©a
 = 
NULL
;

119  
FALSE
;

122 i‡(!(
pfFûe
 = 
	`f›í
(
p°rFûeName
, "rb")))

124 *
µbImageD©a
 = 
pbImageD©a
 = 
NULL
;

125  
FALSE
;

130 
	`‰ód
(
pbSig
, 1, 8, 
pfFûe
);

131 i‡(
	`≤g_sig_cmp
(
pbSig
, 0, 8))

133 *
µbImageD©a
 = 
pbImageD©a
 = 
NULL
;

134  
FALSE
;

139 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
,

140 (
≤g_îr‹_±r
)
≤g_˚x˚±_îr‹
, (≤g_îr‹_±r)
NULL
);

141 i‡(!
≤g_±r
)

143 *
µbImageD©a
 = 
pbImageD©a
 = 
NULL
;

144  
FALSE
;

147 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

148 i‡(!
öfo_±r
)

150 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
NULL
, NULL);

151 *
µbImageD©a
 = 
pbImageD©a
 = 
NULL
;

152  
FALSE
;

155 
Try


160 #ifde‡
PNG_STDIO_SUPPORTED


161 
	`≤g_öô_io
(
≤g_±r
, 
pfFûe
);

163 
	`≤g_£t_ªad_‚
(
≤g_±r
, (
≤g_voidp
)
pfFûe
, 
≤g_ªad_d©a
);

166 
	`≤g_£t_sig_byãs
(
≤g_±r
, 8);

170 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

174 
	`≤g_gë_IHDR
(
≤g_±r
, 
öfo_±r
, 
piWidth
, 
piHeight
, &
iBôDïth
,

175 &
iCﬁ‹Ty≥
, 
NULL
, NULL, NULL);

180 #ifde‡
PNG_READ_16_TO_8_SUPPORTED


181 i‡(
iBôDïth
 == 16)

182 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


183 
	`≤g_£t_sˇÀ_16
(
≤g_±r
);

185 
	`≤g_£t_°rù_16
(
≤g_±r
);

188 i‡(
iCﬁ‹Ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

189 
	`≤g_£t_ex∑nd
(
≤g_±r
);

190 i‡(
iBôDïth
 < 8)

191 
	`≤g_£t_ex∑nd
(
≤g_±r
);

192 i‡(
	`≤g_gë_vÆid
(
≤g_±r
, 
öfo_±r
, 
PNG_INFO_tRNS
))

193 
	`≤g_£t_ex∑nd
(
≤g_±r
);

194 i‡(
iCﬁ‹Ty≥
 =
PNG_COLOR_TYPE_GRAY
 ||

195 
iCﬁ‹Ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

196 
	`≤g_£t_gøy_to_rgb
(
≤g_±r
);

199 i‡(
	`≤g_gë_bKGD
(
≤g_±r
, 
öfo_±r
, &
pBackground
))

201 
	`≤g_£t_background
(
≤g_±r
, 
pBackground
, 
PNG_BACKGROUND_GAMMA_FILE
, 1, 1.0);

202 
pBkgCﬁ‹
->
ªd
 = (
byã
Ë
pBackground
->red;

203 
pBkgCﬁ‹
->
gªí
 = (
byã
Ë
pBackground
->green;

204 
pBkgCﬁ‹
->
blue
 = (
byã
Ë
pBackground
->blue;

208 
pBkgCﬁ‹
 = 
NULL
;

212 i‡(
	`≤g_gë_gAMA
(
≤g_±r
, 
öfo_±r
, &
dGamma
))

213 
	`≤g_£t_gamma
(
≤g_±r
, (Ë2.2, 
dGamma
);

217 
	`≤g_ªad_upd©e_öfo
(
≤g_±r
, 
öfo_±r
);

221 
	`≤g_gë_IHDR
(
≤g_±r
, 
öfo_±r
, 
piWidth
, 
piHeight
, &
iBôDïth
,

222 &
iCﬁ‹Ty≥
, 
NULL
, NULL, NULL);

227 
ulRowByãs
 = 
	`≤g_gë_rowbyãs
(
≤g_±r
, 
öfo_±r
);

228 
ulCh™√ls
 = 
	`≤g_gë_ch™√ls
(
≤g_±r
, 
öfo_±r
);

230 *
piCh™√ls
 = 
ulCh™√ls
;

234 i‡(
pbImageD©a
)

236 
	`‰ì
 (
pbImageD©a
);

237 
pbImageD©a
 = 
NULL
;

239 i‡((*
piHeight
Ë> ((
size_t
)(-1))/
ulRowByãs
) {

241 
	`≤g_îr‹
(
≤g_±r
, "Visual PNG: image isÅoo big");

243 i‡((
pbImageD©a
 = (
≤g_byã
 *Ë
	`mÆloc
(
ulRowByãs
 * (*
piHeight
)

244 * (
≤g_byã
))Ë=
NULL
)

246 
	`≤g_îr‹
(
≤g_±r
, "Visual PNG: out of memory");

248 *
µbImageD©a
 = 
pbImageD©a
;

252 i‡((
µbRowPoöãrs
 = (
≤g_byãµ
Ë
	`mÆloc
((*
piHeight
)

253 * (
≤g_byãp
))Ë=
NULL
)

255 
	`≤g_îr‹
(
≤g_±r
, "Visual PNG: out of memory");

260 
i
 = 0; i < (*
piHeight
); i++)

261 
µbRowPoöãrs
[
i
] = 
pbImageD©a
 + i * 
ulRowByãs
;

265 
	`≤g_ªad_image
(
≤g_±r
, 
µbRowPoöãrs
);

269 
	`≤g_ªad_íd
(
≤g_±r
, 
NULL
);

273 
	`‰ì
 (
µbRowPoöãrs
);

274 
µbRowPoöãrs
 = 
NULL
;

279 
	`C©ch
 (
msg
)

281 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

283 *
µbImageD©a
 = 
pbImageD©a
 = 
NULL
;

285 if(
µbRowPoöãrs
)

286 
	`‰ì
 (
µbRowPoöãrs
);

288 
	`f˛o£
(
pfFûe
);

290  
FALSE
;

293 
	`f˛o£
 (
pfFûe
);

295  
TRUE
;

299 
BOOL
 
	`PngSaveImage
 (
PTSTR
 
p°rFûeName
, 
≤g_byã
 *
pDiD©a
,

300 
iWidth
, 
iHeight
, 
≤g_cﬁ‹
 
bkgCﬁ‹
)

302 c⁄° 
ciBôDïth
 = 8;

303 c⁄° 
ciCh™√ls
 = 3;

305 
FILE
 *
pfFûe
;

306 
≤g_uöt_32
 
ulRowByãs
;

307 
≤g_byã
 **
µbRowPoöãrs
 = 
NULL
;

308 
i
;

312 i‡(!
p°rFûeName
)

313  
FALSE
;

315 i‡(!(
pfFûe
 = 
	`f›í
(
p°rFûeName
, "wb")))

316  
FALSE
;

320 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
,

321 (
≤g_îr‹_±r
)
≤g_˚x˚±_îr‹
, (≤g_îr‹_±r)
NULL
);

322 i‡(!
≤g_±r
)

324 
	`f˛o£
(
pfFûe
);

325  
FALSE
;

328 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

329 i‡(!
öfo_±r
) {

330 
	`f˛o£
(
pfFûe
);

331 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, (
≤g_öf›p
Ë
NULL
);

332  
FALSE
;

335 
Try


339 #ifde‡
PNG_STDIO_SUPPORTED


340 
	`≤g_öô_io
(
≤g_±r
, 
pfFûe
);

342 
	`≤g_£t_wrôe_‚
(
≤g_±r
, (
≤g_voidp
)
pfFûe
, 
≤g_wrôe_d©a
, 
≤g_Êush
);

347 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
iWidth
, 
iHeight
, 
ciBôDïth
,

348 
PNG_COLOR_TYPE_RGB
, 
PNG_INTERLACE_NONE
, 
PNG_COMPRESSION_TYPE_BASE
,

349 
PNG_FILTER_TYPE_BASE
);

353 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

357 
	`≤g_£t_bgr
(
≤g_±r
);

361 
ulRowByãs
 = 
iWidth
 * 
ciCh™√ls
;

365 i‡((
µbRowPoöãrs
 = (
≤g_byãµ
Ë
	`mÆloc
(
iHeight
 * (
≤g_byãp
))Ë=
NULL
)

366 
Throw
 "Visualpng: Out of memory";

370 
i
 = 0; i < 
iHeight
; i++)

371 
µbRowPoöãrs
[
i
] = 
pDiD©a
 + i * (((
ulRowByãs
 + 3) >> 2) << 2);

375 
	`≤g_wrôe_image
 (
≤g_±r
, 
µbRowPoöãrs
);

379 
	`≤g_wrôe_íd
(
≤g_±r
, 
öfo_±r
);

383 
	`‰ì
 (
µbRowPoöãrs
);

384 
µbRowPoöãrs
 = 
NULL
;

388 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, (
≤g_öf›p
Ë
NULL
);

393 
	`C©ch
 (
msg
)

395 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, (
≤g_öf›p
Ë
NULL
);

397 if(
µbRowPoöãrs
)

398 
	`‰ì
 (
µbRowPoöãrs
);

400 
	`f˛o£
(
pfFûe
);

402  
FALSE
;

405 
	`f˛o£
 (
pfFûe
);

407  
TRUE
;

410 #i‚de‡
PNG_STDIO_SUPPORTED


413 
	`≤g_ªad_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
)

415 
size_t
 
check
;

420 
check
 = 
	`‰ód
(
d©a
, 1, 
Àngth
, (
FILE
 *)
≤g_±r
->
io_±r
);

422 i‡(
check
 !
Àngth
)

424 
	`≤g_îr‹
(
≤g_±r
, "Read Error");

429 
	`≤g_wrôe_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
)

431 
≤g_uöt_32
 
check
;

433 
check
 = 
	`fwrôe
(
d©a
, 1, 
Àngth
, (
FILE
 *)(
≤g_±r
->
io_±r
));

434 i‡(
check
 !
Àngth
)

436 
	`≤g_îr‹
(
≤g_±r
, "Write Error");

441 
	`≤g_Êush
(
≤g_°ru˘p
 
≤g_±r
)

443 
FILE
 *
io_±r
;

444 
io_±r
 = (
FILE
 *)
	`CVT_PTR
((
≤g_±r
->io_ptr));

445 i‡(
io_±r
 !
NULL
)

446 
	`fÊush
(
io_±r
);

	@contrib/visupng/PngFile.h

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<wödows.h
>

16 
PngFûeInôülize
 (
HWND
 
hwnd
) ;

17 
BOOL
 
PngFûeO≥nDlg
 (
HWND
 
hwnd
, 
PTSTR
 
p°rFûeName
, PTSTR 
p°rTôÀName
) ;

18 
BOOL
 
PngFûeSaveDlg
 (
HWND
 
hwnd
, 
PTSTR
 
p°rFûeName
, PTSTR 
p°rTôÀName
) ;

20 
BOOL
 
PngLﬂdImage
 (
PTSTR
 
p°rFûeName
, 
≤g_byã
 **
µbImageD©a
,

21 *
piWidth
, *
piHeight
, *
piCh™√ls
, 
≤g_cﬁ‹
 *
pBkgCﬁ‹
);

22 
BOOL
 
PngSaveImage
 (
PTSTR
 
p°rFûeName
, 
≤g_byã
 *
pDiD©a
,

23 
iWidth
, 
iHeight
, 
≤g_cﬁ‹
 
BkgCﬁ‹
);

25 #i‚de‡
PNG_STDIO_SUPPORTED


26 
≤g_ªad_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
);

27 
≤g_wrôe_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
);

28 
≤g_Êush
(
≤g_°ru˘p
 
≤g_±r
);

	@contrib/visupng/VisualPng.c

16 
	#PROGNAME
 "VisuÆPng"

	)

17 
	#LONGNAME
 "Wö32 Võwî f‹ PNG-fûes"

	)

18 
	#VERSION
 "1.0 o‡2000 Ju√ 07"

	)

22 
	#MARGIN
 8

	)

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<wödows.h
>

30 
	~<zlib.h
>

34 
	~"≤g.h
"

35 
	~"≤gfûe.h
"

36 
	~"ªsour˚.h
"

42 
LRESULT
 
CALLBACK
 
WndProc
 (
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
);

43 
BOOL
 
CALLBACK
 
AboutDlgProc
 (
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
) ;

45 
BOOL
 
CíãrAbout
 (
HWND
 
hwndChûd
, HWND 
hwndP¨ít
);

47 
BOOL
 
BuûdPngLi°
 (
PTSTR
 
p°rP©hName
, 
TCHAR
 **
µFûeLi°
, *
pFûeCou¡
,

48 *
pFûeIndex
);

50 
BOOL
 
SórchPngLi°
 (
TCHAR
 *
pFûeLi°
, 
FûeCou¡
, *
pFûeIndex
,

51 
PTSTR
 
p°rPªvName
, PTSTR 
p°rNextName
);

53 
BOOL
 
LﬂdImageFûe
(
HWND
 
hwnd
, 
PTSTR
 
p°rP©hName
,

54 
≤g_byã
 **
µbImage
, *
pxImgSize
, *
pyImgSize
, *
piCh™√ls
,

55 
≤g_cﬁ‹
 *
pBkgCﬁ‹
);

57 
BOOL
 
Di•œyImage
 (
HWND
 
hwnd
, 
BYTE
 **
µDib
,

58 
BYTE
 **
µDiD©a
, 
cxWöSize
, 
cyWöSize
,

59 
BYTE
 *
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
,

60 
BOOL
 
bSåëched
);

62 
BOOL
 
InôBôm≠
 (

63 
BYTE
 *
pDiD©a
, 
cxWöSize
, 
cyWöSize
);

65 
BOOL
 
FûlBôm≠
 (

66 
BYTE
 *
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

67 
BYTE
 *
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
,

68 
BOOL
 
bSåëched
);

72 *
	gszProgName
 = 
PROGNAME
;

73 *
	gszAµName
 = 
LONGNAME
;

74 *
	gszIc⁄Name
 = 
PROGNAME
;

75 
	gszCmdFûeName
 [
MAX_PATH
];

79 
WINAPI
 
	$WöMaö
 (
HINSTANCE
 
hIn°™˚
, HINSTANCE 
hPªvIn°™˚
,

80 
PSTR
 
szCmdLöe
, 
iCmdShow
)

82 
HACCEL
 
hAc˚l
;

83 
HWND
 
hwnd
;

84 
MSG
 
msg
;

85 
WNDCLASS
 
wnd˛ass
;

86 
ixB‹dîs
, 
iyB‹dîs
;

88 
wnd˛ass
.
°yÀ
 = 
CS_HREDRAW
 | 
CS_VREDRAW
;

89 
wnd˛ass
.
Õ‚WndProc
 = 
WndProc
;

90 
wnd˛ass
.
cbClsExåa
 = 0;

91 
wnd˛ass
.
cbWndExåa
 = 0;

92 
wnd˛ass
.
hIn°™˚
 = hInstance;

93 
wnd˛ass
.
hIc⁄
 = 
	`LﬂdIc⁄
 (
hIn°™˚
, 
szIc⁄Name
) ;

94 
wnd˛ass
.
hCurs‹
 = 
	`LﬂdCurs‹
 (
NULL
, 
IDC_ARROW
);

95 
wnd˛ass
.
hbrBackground
 = 
NULL
;

96 
wnd˛ass
.
ÕszMíuName
 = 
szProgName
;

97 
wnd˛ass
.
ÕszCœssName
 = 
szProgName
;

99 i‡(!
	`Regi°îCœss
 (&
wnd˛ass
))

101 
	`MesßgeBox
 (
NULL
, 
	`TEXT
 ("Error:ÅhisÖrogramÑequires Windows NT!"),

102 
szProgName
, 
MB_ICONERROR
);

107 i‡((
szCmdLöe
 !
NULL
) && (*szCmdLine != '\0'))

108 i‡(
szCmdLöe
[0] == '"')

109 
	`°∫˝y
 (
szCmdFûeName
, 
szCmdLöe
 + 1, 
	`°æí
(szCmdLine) - 2);

111 
	`°r˝y
 (
szCmdFûeName
, 
szCmdLöe
);

113 
	`°r˝y
 (
szCmdFûeName
, "");

116 
ixB‹dîs
 = 2 * (
	`GëSy°emMërics
 (
SM_CXBORDER
) +

117 
	`GëSy°emMërics
 (
SM_CXDLGFRAME
));

118 
iyB‹dîs
 = 2 * (
	`GëSy°emMërics
 (
SM_CYBORDER
) +

119 
	`GëSy°emMërics
 (
SM_CYDLGFRAME
)) +

120 
	`GëSy°emMërics
 (
SM_CYCAPTION
) +

121 
	`GëSy°emMërics
 (
SM_CYMENUSIZE
) +

124 
hwnd
 = 
	`Cª©eWödow
 (
szProgName
, 
szAµName
,

125 
WS_OVERLAPPEDWINDOW
,

126 
CW_USEDEFAULT
, CW_USEDEFAULT,

127 512 + 2 * 
MARGIN
 + 
ixB‹dîs
, 384 + 2 * MARGIN + 
iyB‹dîs
,

129 
NULL
, NULL, 
hIn°™˚
, NULL);

131 
	`ShowWödow
 (
hwnd
, 
iCmdShow
);

132 
	`Upd©eWödow
 (
hwnd
);

134 
hAc˚l
 = 
	`LﬂdAc˚Àøt‹s
 (
hIn°™˚
, 
szProgName
);

136 
	`GëMesßge
 (&
msg
, 
NULL
, 0, 0))

138 i‡(!
	`Tøn¶©eAc˚Àøt‹
 (
hwnd
, 
hAc˚l
, &
msg
))

140 
	`Tøn¶©eMesßge
 (&
msg
);

141 
	`Di•©chMesßge
 (&
msg
);

144  
msg
.
wP¨am
;

145 
	}
}

147 
LRESULT
 
CALLBACK
 
	$WndProc
 (
HWND
 
hwnd
, 
UINT
 
mesßge
, 
WPARAM
 
wP¨am
,

148 
LPARAM
 
lP¨am
)

150 
HINSTANCE
 
hIn°™˚
 ;

151 
HDC
 
hdc
;

152 
PAINTSTRUCT
 
ps
;

153 
HMENU
 
hMíu
;

155 
BITMAPFILEHEADER
 *
pbmfh
;

156 
BITMAPINFOHEADER
 *
pbmih
;

157 
BYTE
 *
pbImage
;

158 
cxWöSize
, 
cyWöSize
;

159 
cxImgSize
, 
cyImgSize
;

160 
cImgCh™√ls
;

161 
≤g_cﬁ‹
 
bkgCﬁ‹
 = {127, 127, 127};

163 
BOOL
 
bSåëched
 = 
TRUE
;

165 
BYTE
 *
pDib
 = 
NULL
;

166 
BYTE
 *
pDiD©a
 = 
NULL
;

168 
TCHAR
 
szImgP©hName
 [
MAX_PATH
];

169 
TCHAR
 
szTôÀName
 [
MAX_PATH
];

171 
TCHAR
 *
pPngFûeLi°
 = 
NULL
;

172 
iPngFûeCou¡
;

173 
iPngFûeIndex
;

175 
BOOL
 
bOk
;

177 
mesßge
)

179 
WM_CREATE
:

180 
hIn°™˚
 = ((
LPCREATESTRUCT
Ë
lP¨am
)->hInstance ;

181 
	`PngFûeInôülize
 (
hwnd
);

183 
	`°r˝y
 (
szImgP©hName
, "");

187 i‡(
szCmdFûeName
[0] != '\0')

189 
	`°r˝y
 (
szImgP©hName
, 
szCmdFûeName
);

194 
	`BuûdPngLi°
 (
szImgP©hName
, &
pPngFûeLi°
, &
iPngFûeCou¡
,

195 &
iPngFûeIndex
);

199 i‡(!
	`LﬂdImageFûe
 (
hwnd
, 
szImgP©hName
,

200 &
pbImage
, &
cxImgSize
, &
cyImgSize
, &
cImgCh™√ls
, &
bkgCﬁ‹
))

205 
	`InvÆid©eRe˘
 (
hwnd
, 
NULL
, 
TRUE
);

209 
	`Di•œyImage
 (
hwnd
, &
pDib
, &
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

210 
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
, 
bSåëched
);

215 
WM_SIZE
:

216 
cxWöSize
 = 
	`LOWORD
 (
lP¨am
);

217 
cyWöSize
 = 
	`HIWORD
 (
lP¨am
);

221 
	`InvÆid©eRe˘
 (
hwnd
, 
NULL
, 
TRUE
);

225 
	`Di•œyImage
 (
hwnd
, &
pDib
, &
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

226 
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
, 
bSåëched
);

230 
WM_INITMENUPOPUP
:

231 
hMíu
 = 
	`GëMíu
 (
hwnd
);

233 i‡(
pbImage
)

234 
	`E«bÀMíuIãm
 (
hMíu
, 
IDM_FILE_SAVE
, 
MF_ENABLED
);

236 
	`E«bÀMíuIãm
 (
hMíu
, 
IDM_FILE_SAVE
, 
MF_GRAYED
);

240 
WM_COMMAND
:

241 
hMíu
 = 
	`GëMíu
 (
hwnd
);

243 
	`LOWORD
 (
wP¨am
))

245 
IDM_FILE_OPEN
:

249 i‡(!
	`PngFûeO≥nDlg
 (
hwnd
, 
szImgP©hName
, 
szTôÀName
))

255 
	`BuûdPngLi°
 (
szImgP©hName
, &
pPngFûeLi°
, &
iPngFûeCou¡
,

256 &
iPngFûeIndex
);

260 i‡(!
	`LﬂdImageFûe
 (
hwnd
, 
szImgP©hName
,

261 &
pbImage
, &
cxImgSize
, &
cyImgSize
, &
cImgCh™√ls
, &
bkgCﬁ‹
))

266 
	`InvÆid©eRe˘
 (
hwnd
, 
NULL
, 
TRUE
);

270 
	`Di•œyImage
 (
hwnd
, &
pDib
, &
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

271 
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
, 
bSåëched
);

275 
IDM_FILE_SAVE
:

279 i‡(!
	`PngFûeSaveDlg
 (
hwnd
, 
szImgP©hName
, 
szTôÀName
))

284 
	`SëCurs‹
 (
	`LﬂdCurs‹
 (
NULL
, 
IDC_WAIT
));

285 
	`ShowCurs‹
 (
TRUE
);

287 
bOk
 = 
	`PngSaveImage
 (
szImgP©hName
, 
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

288 
bkgCﬁ‹
);

290 
	`ShowCurs‹
 (
FALSE
);

291 
	`SëCurs‹
 (
	`LﬂdCurs‹
 (
NULL
, 
IDC_ARROW
));

293 i‡(!
bOk
)

294 
	`MesßgeBox
 (
hwnd
, 
	`TEXT
 ("Error in savingÅhe PNG image"),

295 
szProgName
, 
MB_ICONEXCLAMATION
 | 
MB_OK
);

298 
IDM_FILE_NEXT
:

302 i‡(
	`SórchPngLi°
 (
pPngFûeLi°
, 
iPngFûeCou¡
, &
iPngFûeIndex
,

303 
NULL
, 
szImgP©hName
))

305 i‡(
	`°rcmp
 (
szImgP©hName
, "") == 0)

310 i‡(!
	`LﬂdImageFûe
 (
hwnd
, 
szImgP©hName
, &
pbImage
,

311 &
cxImgSize
, &
cyImgSize
, &
cImgCh™√ls
, &
bkgCﬁ‹
))

316 
	`InvÆid©eRe˘
 (
hwnd
, 
NULL
, 
TRUE
);

320 
	`Di•œyImage
 (
hwnd
, &
pDib
, &
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

321 
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
, 
bSåëched
);

326 
IDM_FILE_PREVIOUS
:

330 i‡(
	`SórchPngLi°
 (
pPngFûeLi°
, 
iPngFûeCou¡
, &
iPngFûeIndex
,

331 
szImgP©hName
, 
NULL
))

334 i‡(
	`°rcmp
 (
szImgP©hName
, "") == 0)

339 i‡(!
	`LﬂdImageFûe
 (
hwnd
, 
szImgP©hName
, &
pbImage
, &
cxImgSize
,

340 &
cyImgSize
, &
cImgCh™√ls
, &
bkgCﬁ‹
))

345 
	`InvÆid©eRe˘
 (
hwnd
, 
NULL
, 
TRUE
);

349 
	`Di•œyImage
 (
hwnd
, &
pDib
, &
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

350 
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
, 
bSåëched
);

355 
IDM_FILE_EXIT
:

361 i‡(
pDib
 !
NULL
)

363 
	`‰ì
 (
pDib
);

364 
pDib
 = 
NULL
;

369 i‡(
pPngFûeLi°
 !
NULL
)

371 
	`‰ì
 (
pPngFûeLi°
);

372 
pPngFûeLi°
 = 
NULL
;

377 
	`exô
 (0);

381 
IDM_OPTIONS_STRETCH
:

382 
bSåëched
 = !bStretched;

383 i‡(
bSåëched
)

384 
	`CheckMíuIãm
 (
hMíu
, 
IDM_OPTIONS_STRETCH
, 
MF_CHECKED
);

386 
	`CheckMíuIãm
 (
hMíu
, 
IDM_OPTIONS_STRETCH
, 
MF_UNCHECKED
);

390 
	`InvÆid©eRe˘
 (
hwnd
, 
NULL
, 
TRUE
);

394 
	`Di•œyImage
 (
hwnd
, &
pDib
, &
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

395 
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
, 
bSåëched
);

399 
IDM_HELP_ABOUT
:

400 
	`DülogBox
 (
hIn°™˚
, 
	`TEXT
 ("AboutBox"), 
hwnd
, 
AboutDlgProc
) ;

407 
WM_PAINT
:

408 
hdc
 = 
	`BegöPaöt
 (
hwnd
, &
ps
);

410 i‡(
pDib
)

411 
	`SëDIBôsToDevi˚
 (
hdc
, 0, 0, 
cxWöSize
, 
cyWöSize
, 0, 0,

412 0, 
cyWöSize
, 
pDiD©a
, (
BITMAPINFO
 *Ë
pDib
, 
DIB_RGB_COLORS
);

414 
	`EndPaöt
 (
hwnd
, &
ps
);

417 
WM_DESTROY
:

418 i‡(
pbmfh
)

420 
	`‰ì
 (
pbmfh
);

421 
pbmfh
 = 
NULL
;

424 
	`Po°QuôMesßge
 (0);

428  
	`DefWödowProc
 (
hwnd
, 
mesßge
, 
wP¨am
, 
lP¨am
);

429 
	}
}

431 
BOOL
 
CALLBACK
 
	$AboutDlgProc
 (
HWND
 
hDlg
, 
UINT
 
mesßge
,

432 
WPARAM
 
wP¨am
, 
LPARAM
 
lP¨am
)

434 
mesßge
)

436 
WM_INITDIALOG
 :

437 
	`ShowWödow
 (
hDlg
, 
SW_HIDE
);

438 
	`CíãrAbout
 (
hDlg
, 
	`GëWödow
 (hDlg, 
GW_OWNER
));

439 
	`ShowWödow
 (
hDlg
, 
SW_SHOW
);

440  
TRUE
 ;

442 
WM_COMMAND
 :

443 
	`LOWORD
 (
wP¨am
))

445 
IDOK
 :

446 
IDCANCEL
 :

447 
	`EndDülog
 (
hDlg
, 0) ;

448  
TRUE
 ;

452  
FALSE
 ;

453 
	}
}

459 
BOOL
 
	$CíãrAbout
 (
HWND
 
hwndChûd
, HWND 
hwndP¨ít
)

461 
RECT
 
rChûd
, 
rP¨ít
, 
rW‹kAªa
;

462 
wChûd
, 
hChûd
, 
wP¨ít
, 
hP¨ít
;

463 
xNew
, 
yNew
;

464 
BOOL
 
bResu…
;

467 
	`GëWödowRe˘
 (
hwndChûd
, &
rChûd
);

468 
wChûd
 = 
rChûd
.
right
 -ÑChûd.
À·
;

469 
hChûd
 = 
rChûd
.
bŸtom
 -ÑChûd.
t›
;

472 
	`GëWödowRe˘
 (
hwndP¨ít
, &
rP¨ít
);

473 
wP¨ít
 = 
rP¨ít
.
right
 -ÑP¨ít.
À·
;

474 
hP¨ít
 = 
rP¨ít
.
bŸtom
 -ÑP¨ít.
t›
;

477 
bResu…
 = 
	`Sy°emP¨amëîsInfo
(

478 
SPI_GETWORKAREA
,

479 (
RECT
),

480 &
rW‹kAªa
,

482 i‡(!
bResu…
) {

483 
rW‹kAªa
.
À·
 =ÑW‹kAªa.
t›
 = 0;

484 
rW‹kAªa
.
right
 = 
	`GëSy°emMërics
(
SM_CXSCREEN
);

485 
rW‹kAªa
.
bŸtom
 = 
	`GëSy°emMërics
(
SM_CYSCREEN
);

489 
xNew
 = 
rP¨ít
.
À·
 + ((
wP¨ít
 - 
wChûd
) /2);

490 i‡(
xNew
 < 
rW‹kAªa
.
À·
) {

491 
xNew
 = 
rW‹kAªa
.
À·
;

492 } i‡((
xNew
+
wChûd
Ë> 
rW‹kAªa
.
right
) {

493 
xNew
 = 
rW‹kAªa
.
right
 - 
wChûd
;

497 
yNew
 = 
rP¨ít
.
t›
 + ((
hP¨ít
 - 
hChûd
) /2);

498 i‡(
yNew
 < 
rW‹kAªa
.
t›
) {

499 
yNew
 = 
rW‹kAªa
.
t›
;

500 } i‡((
yNew
+
hChûd
Ë> 
rW‹kAªa
.
bŸtom
) {

501 
yNew
 = 
rW‹kAªa
.
bŸtom
 - 
hChûd
;

505  
	`SëWödowPos
 (
hwndChûd
, 
NULL
, 
xNew
, 
yNew
, 0, 0, 
SWP_NOSIZE
 |

506 
SWP_NOZORDER
);

507 
	}
}

513 
BOOL
 
	$BuûdPngLi°
 (
PTSTR
 
p°rP©hName
, 
TCHAR
 **
µFûeLi°
, *
pFûeCou¡
,

514 *
pFûeIndex
)

516 
TCHAR
 
szImgP©hName
 [
MAX_PATH
];

517 
TCHAR
 
szImgFûeName
 [
MAX_PATH
];

518 
TCHAR
 
szImgFödName
 [
MAX_PATH
];

520 
WIN32_FIND_DATA
 
född©a
;

521 
HANDLE
 
hFöd
;

523 
TCHAR
 
szTmp
 [
MAX_PATH
];

524 
BOOL
 
bOk
;

525 
i
, 
ii
;

526 
j
, 
jj
;

530 i‡(*
µFûeLi°
 !
NULL
)

532 
	`‰ì
 (*
µFûeLi°
);

533 *
µFûeLi°
 = 
NULL
;

538 
	`°r˝y
 (
szImgP©hName
, 
p°rP©hName
);

539 
	`°r˝y
 (
szImgFûeName
, 
	`°ºchr
 (
p°rP©hName
, '\\') + 1);

541 
	`°r˝y
 (
szImgFödName
, 
szImgP©hName
);

542 *(
	`°ºchr
 (
szImgFödName
, '\\') + 1) = '\0';

543 
	`°rˇt
 (
szImgFödName
, "*.png");

547 *
pFûeCou¡
 = 0;

549 
hFöd
 = 
	`FödFú°Fûe
(
szImgFödName
, &
född©a
);

550 
bOk
 = (
hFöd
 !(
HANDLE
) -1);

552 
bOk
)

554 *
pFûeCou¡
 += 1;

555 
bOk
 = 
	`FödNextFûe
(
hFöd
, &
född©a
);

557 
	`FödClo£
(
hFöd
);

561 *
µFûeLi°
 = (
TCHAR
 *Ë
	`mÆloc
 (*
pFûeCou¡
 * 
MAX_PATH
);

565 
hFöd
 = 
	`FödFú°Fûe
(
szImgFödName
, &
född©a
);

566 
bOk
 = (
hFöd
 !(
HANDLE
) -1);

568 
i
 = 0;

569 
ii
 = 0;

570 
bOk
)

572 
	`°r˝y
 (*
µFûeLi°
 + 
ii
, 
szImgP©hName
);

573 
	`°r˝y
 (
	`°ºchr
(*
µFûeLi°
 + 
ii
, '\\'Ë+ 1, 
född©a
.
cFûeName
);

575 i‡(
	`°rcmp
(
p°rP©hName
, *
µFûeLi°
 + 
ii
) == 0)

576 *
pFûeIndex
 = 
i
;

578 
ii
 +
MAX_PATH
;

579 
i
++;

581 
bOk
 = 
	`FödNextFûe
(
hFöd
, &
född©a
);

583 
	`FödClo£
(
hFöd
);

587 
i
 = 0; i < *
pFûeCou¡
 - 1; i++)

589 
ii
 = 
i
 * 
MAX_PATH
;

590 
j
 = 
i
+1; j < *
pFûeCou¡
; j++)

592 
jj
 = 
j
 * 
MAX_PATH
;

593 i‡(
	`°rcmp
 (*
µFûeLi°
 + 
ii
, *µFûeLi° + 
jj
) > 0)

595 
	`°r˝y
 (
szTmp
, *
µFûeLi°
 + 
jj
);

596 
	`°r˝y
 (*
µFûeLi°
 + 
jj
, *µFûeLi° + 
ii
);

597 
	`°r˝y
 (*
µFûeLi°
 + 
ii
, 
szTmp
);

601 i‡(*
pFûeIndex
 =
i
)

602 *
pFûeIndex
 = 
j
;

604 i‡(*
pFûeIndex
 =
j
)

605 *
pFûeIndex
 = 
i
;

610  
TRUE
;

611 
	}
}

618 
BOOL
 
	$SórchPngLi°
 (

619 
TCHAR
 *
pFûeLi°
, 
FûeCou¡
, *
pFûeIndex
,

620 
PTSTR
 
p°rPªvName
, PTSTR 
p°rNextName
)

622 i‡(
FûeCou¡
 > 0)

626 i‡(
p°rPªvName
 !
NULL
)

628 i‡(*
pFûeIndex
 > 0)

629 *
pFûeIndex
 -= 1;

631 *
pFûeIndex
 = 
FûeCou¡
 - 1;

633 
	`°r˝y
 (
p°rPªvName
, 
pFûeLi°
 + (*
pFûeIndex
 * 
MAX_PATH
));

638 i‡(
p°rNextName
 !
NULL
)

640 i‡(*
pFûeIndex
 < 
FûeCou¡
 - 1)

641 *
pFûeIndex
 += 1;

643 *
pFûeIndex
 = 0;

645 
	`°r˝y
 (
p°rNextName
, 
pFûeLi°
 + (*
pFûeIndex
 * 
MAX_PATH
));

648  
TRUE
;

652  
FALSE
;

654 
	}
}

661 
BOOL
 
	$LﬂdImageFûe
 (
HWND
 
hwnd
, 
PTSTR
 
p°rP©hName
,

662 
≤g_byã
 **
µbImage
, *
pxImgSize
, *
pyImgSize
,

663 *
piCh™√ls
, 
≤g_cﬁ‹
 *
pBkgCﬁ‹
)

665 
TCHAR
 
szTmp
 [
MAX_PATH
];

669 i‡(*
µbImage
)

671 
	`‰ì
 (*
µbImage
);

672 *
µbImage
 = 
NULL
;

677 
	`SëCurs‹
 (
	`LﬂdCurs‹
 (
NULL
, 
IDC_WAIT
));

678 
	`ShowCurs‹
 (
TRUE
);

680 
	`PngLﬂdImage
 (
p°rP©hName
, 
µbImage
, 
pxImgSize
, 
pyImgSize
, 
piCh™√ls
,

681 
pBkgCﬁ‹
);

683 
	`ShowCurs‹
 (
FALSE
);

684 
	`SëCurs‹
 (
	`LﬂdCurs‹
 (
NULL
, 
IDC_ARROW
));

686 i‡(*
µbImage
 !
NULL
)

688 
	`•rötf
 (
szTmp
, "VisuÆPng - %s", 
	`°ºchr
(
p°rP©hName
, '\\') + 1);

689 
	`SëWödowText
 (
hwnd
, 
szTmp
);

693 
	`MesßgeBox
 (
hwnd
, 
	`TEXT
 ("Error inÜoadingÅhe PNG image"),

694 
szProgName
, 
MB_ICONEXCLAMATION
 | 
MB_OK
);

695  
FALSE
;

698  
TRUE
;

699 
	}
}

705 
BOOL
 
	$Di•œyImage
 (
HWND
 
hwnd
, 
BYTE
 **
µDib
,

706 
BYTE
 **
µDiD©a
, 
cxWöSize
, 
cyWöSize
,

707 
BYTE
 *
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
,

708 
BOOL
 
bSåëched
)

710 
BYTE
 *
pDib
 = *
µDib
;

711 
BYTE
 *
pDiD©a
 = *
µDiD©a
;

713 
BITMAPINFOHEADER
 *
pbmih
;

714 
WORD
 
wDIRowByãs
;

715 
≤g_cﬁ‹
 
bkgBœck
 = {0, 0, 0};

716 
≤g_cﬁ‹
 
bkgGøy
 = {127, 127, 127};

717 
≤g_cﬁ‹
 
bkgWhôe
 = {255, 255, 255};

721 
wDIRowByãs
 = (
WORD
Ë((3 * 
cxWöSize
 + 3L) >> 2) << 2;

723 i‡(
pDib
)

725 
	`‰ì
 (
pDib
);

726 
pDib
 = 
NULL
;

729 i‡(
cyWöSize
 > ((
size_t
)(-1))/
wDIRowByãs
) {

731 
	`MesßgeBox
 (
hwnd
, 
	`TEXT
 ("Visual PNG: image isÅoo big");

733 i‡(!(
pDib
 = (
BYTE
 *Ë
	`mÆloc
 ((
BITMAPINFOHEADER
) +

734 
wDIRowByãs
 * 
cyWöSize
)))

736 
	`MesßgeBox
 (
hwnd
, 
	`TEXT
 ("Error in displayingÅhe PNG image"),

737 
szProgName
, 
MB_ICONEXCLAMATION
 | 
MB_OK
);

738 *
µDib
 = 
pDib
 = 
NULL
;

739  
FALSE
;

741 *
µDib
 = 
pDib
;

742 
	`mem£t
 (
pDib
, 0, (
BITMAPINFOHEADER
));

746 
pbmih
 = (
BITMAPINFOHEADER
 *Ë
pDib
;

747 
pbmih
->
biSize
 = (
BITMAPINFOHEADER
);

748 
pbmih
->
biWidth
 = 
cxWöSize
;

749 
pbmih
->
biHeight
 = -((Ë
cyWöSize
);

750 
pbmih
->
biPœ√s
 = 1;

751 
pbmih
->
biBôCou¡
 = 24;

752 
pbmih
->
biCom¥essi⁄
 = 0;

753 
pDiD©a
 = 
pDib
 + (
BITMAPINFOHEADER
);

754 *
µDiD©a
 = 
pDiD©a
;

758 
	`InôBôm≠
 (
pDiD©a
, 
cxWöSize
, 
cyWöSize
);

762 i‡(
pbImage
)

764 
	`FûlBôm≠
 (

765 
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

766 
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
,

767 
bSåëched
);

770  
TRUE
;

777 
BOOL
 
	`InôBôm≠
 (
BYTE
 *
pDiD©a
, 
cxWöSize
, 
cyWöSize
)

779 
BYTE
 *
d°
;

780 
x
, 
y
, 
cﬁ
;

784 
d°
 = 
pDiD©a
;

785 
y
 = 0; y < 
cyWöSize
; y++)

787 
cﬁ
 = 0;

788 
x
 = 0; x < 
cxWöSize
; x++)

791 *
d°
++ = 127;

792 *
d°
++ = 127;

793 *
d°
++ = 127;

794 
cﬁ
 += 3;

797 (
cﬁ
 % 4) != 0)

799 
d°
++;

800 
cﬁ
++;

804  
TRUE
;

811 
BOOL
 
	`FûlBôm≠
 (

812 
BYTE
 *
pDiD©a
, 
cxWöSize
, 
cyWöSize
,

813 
BYTE
 *
pbImage
, 
cxImgSize
, 
cyImgSize
, 
cImgCh™√ls
,

814 
BOOL
 
bSåëched
)

816 
BYTE
 *
pSåëchedImage
;

817 
BYTE
 *
pImg
;

818 
BYTE
 *
§c
, *
d°
;

819 
BYTE
 
r
, 
g
, 
b
, 
a
;

820 c⁄° 
cDICh™√ls
 = 3;

821 
WORD
 
wImgRowByãs
;

822 
WORD
 
wDIRowByãs
;

823 
cxNewSize
, 
cyNewSize
;

824 
cxImgPos
, 
cyImgPos
;

825 
xImg
, 
yImg
;

826 
xWö
, 
yWö
;

827 
xOld
, 
yOld
;

828 
xNew
, 
yNew
;

830 i‡(
bSåëched
)

832 
cxNewSize
 = 
cxWöSize
 - 2 * 
MARGIN
;

833 
cyNewSize
 = 
cyWöSize
 - 2 * 
MARGIN
;

841 i‡((
cyNewSize
 * 
cxImgSize
Ë> (
cyImgSize
 * 
cxNewSize
))

843 
cyNewSize
 = 
cxNewSize
 * 
cyImgSize
 / 
cxImgSize
;

844 
cxImgPos
 = 
MARGIN
;

845 
cyImgPos
 = (
cyWöSize
 - 
cyNewSize
) / 2;

849 
cxNewSize
 = 
cyNewSize
 * 
cxImgSize
 / 
cyImgSize
;

850 
cyImgPos
 = 
MARGIN
;

851 
cxImgPos
 = (
cxWöSize
 - 
cxNewSize
) / 2;

854 i‡(
cyNewSize
 > ((
size_t
)(-1))/(
cImgCh™√ls
 * 
cxNewSize
)) {

856 
	`MesßgeBox
 (
hwnd
, 
	`TEXT
 ("Visual PNG: stretched image isÅoo big");

858 
pSåëchedImage
 = 
	`mÆloc
 (
cImgCh™√ls
 * 
cxNewSize
 * 
cyNewSize
);

859 
pImg
 = 
pSåëchedImage
;

861 
yNew
 = 0; yNew < 
cyNewSize
; yNew++)

863 
yOld
 = 
yNew
 * 
cyImgSize
 / 
cyNewSize
;

864 
xNew
 = 0; xNew < 
cxNewSize
; xNew++)

866 
xOld
 = 
xNew
 * 
cxImgSize
 / 
cxNewSize
;

868 
r
 = *(
pbImage
 + 
cImgCh™√ls
 * ((
yOld
 * 
cxImgSize
Ë+ 
xOld
) + 0);

869 
g
 = *(
pbImage
 + 
cImgCh™√ls
 * ((
yOld
 * 
cxImgSize
Ë+ 
xOld
) + 1);

870 
b
 = *(
pbImage
 + 
cImgCh™√ls
 * ((
yOld
 * 
cxImgSize
Ë+ 
xOld
) + 2);

871 *
pImg
++ = 
r
;

872 *
pImg
++ = 
g
;

873 *
pImg
++ = 
b
;

874 i‡(
cImgCh™√ls
 == 4)

876 
a
 = *(
pbImage
 + 
cImgCh™√ls
 * ((
yOld
 * 
cxImgSize
Ë+ 
xOld
)

878 *
pImg
++ = 
a
;

885 
wImgRowByãs
 = 
cImgCh™√ls
 * 
cxNewSize
;

886 
wDIRowByãs
 = (
WORD
Ë((
cDICh™√ls
 * 
cxWöSize
 + 3L) >> 2) << 2;

890 
yImg
 = 0, 
yWö
 = 
cyImgPos
; yImg < 
cyNewSize
; yImg++, yWin++)

892 i‡(
yWö
 >
cyWöSize
 - 
cyImgPos
)

894 
§c
 = 
pSåëchedImage
 + 
yImg
 * 
wImgRowByãs
;

895 
d°
 = 
pDiD©a
 + 
yWö
 * 
wDIRowByãs
 + 
cxImgPos
 * 
cDICh™√ls
;

897 
xImg
 = 0, 
xWö
 = 
cxImgPos
; xImg < 
cxNewSize
; xImg++, xWin++)

899 i‡(
xWö
 >
cxWöSize
 - 
cxImgPos
)

901 
r
 = *
§c
++;

902 
g
 = *
§c
++;

903 
b
 = *
§c
++;

904 *
d°
++ = 
b
;

905 *
d°
++ = 
g
;

906 *
d°
++ = 
r
;

907 i‡(
cImgCh™√ls
 == 4)

909 
a
 = *
§c
++;

916 i‡(
pSåëchedImage
 !
NULL
)

918 
	`‰ì
 (
pSåëchedImage
);

919 
pSåëchedImage
 = 
NULL
;

930 
cxImgPos
 = (
cxWöSize
 - 
cxImgSize
) / 2;

931 
cyImgPos
 = (
cyWöSize
 - 
cyImgSize
) / 2;

935 i‡(
cxImgPos
 < 
MARGIN
)

936 
cxImgPos
 = 
MARGIN
;

937 i‡(
cyImgPos
 < 
MARGIN
)

938 
cyImgPos
 = 
MARGIN
;

942 
wImgRowByãs
 = 
cImgCh™√ls
 * 
cxImgSize
;

943 
wDIRowByãs
 = (
WORD
Ë((
cDICh™√ls
 * 
cxWöSize
 + 3L) >> 2) << 2;

947 
yImg
 = 0, 
yWö
 = 
cyImgPos
; yImg < 
cyImgSize
; yImg++, yWin++)

949 i‡(
yWö
 >
cyWöSize
 - 
MARGIN
)

951 
§c
 = 
pbImage
 + 
yImg
 * 
wImgRowByãs
;

952 
d°
 = 
pDiD©a
 + 
yWö
 * 
wDIRowByãs
 + 
cxImgPos
 * 
cDICh™√ls
;

954 
xImg
 = 0, 
xWö
 = 
cxImgPos
; xImg < 
cxImgSize
; xImg++, xWin++)

956 i‡(
xWö
 >
cxWöSize
 - 
MARGIN
)

958 
r
 = *
§c
++;

959 
g
 = *
§c
++;

960 
b
 = *
§c
++;

961 *
d°
++ = 
b
;

962 *
d°
++ = 
g
;

963 *
d°
++ = 
r
;

964 i‡(
cImgCh™√ls
 == 4)

966 
a
 = *
§c
++;

972  
TRUE
;

	@contrib/visupng/cexcept.h

190 #i‚de‡
CEXCEPT_H


191 
	#CEXCEPT_H


	)

194 
	~<£tjmp.h
>

196 
	#deföe_ex˚±i⁄_ty≥
(
ëy≥
) \

197 
	sex˚±i⁄_c⁄ãxt
 { \

198 
jmp_buf
 *
≥nv
; \

199 
ˇught
; \

200 vﬁ©ûê°ru˘ { 
ëy≥
 
ëmp
; } 
v
; \

201 }

	)

209 
	#öô_ex˚±i⁄_c⁄ãxt
(
ec
Ë(()(”c)->
≥nv
 = 0))

	)

211 
	#Try
 \

213 
jmp_buf
 *
ex˚±i⁄__¥ev
, 
ex˚±i⁄__ív
; \

214 
ex˚±i⁄__¥ev
 = 
the_ex˚±i⁄_c⁄ãxt
->
≥nv
; \

215 
the_ex˚±i⁄_c⁄ãxt
->
≥nv
 = &
ex˚±i⁄__ív
; \

216 i‡(
	`£tjmp
(
ex˚±i⁄__ív
) == 0) { \

217 do

	)

219 
	#ex˚±i⁄__ˇtch
(
a˘i⁄
) \

220 
the_ex˚±i⁄_c⁄ãxt
->
ˇught
 = 0, \

221 
the_ex˚±i⁄_c⁄ãxt
->
ˇught
); \

224 
the_ex˚±i⁄_c⁄ãxt
->
ˇught
 = 1; \

226 
the_ex˚±i⁄_c⁄ãxt
->
≥nv
 = 
ex˚±i⁄__¥ev
; \

228 i‡(!
the_ex˚±i⁄_c⁄ãxt
->
ˇught
 || 
a˘i⁄
) { } \

229 

	)

231 
	#C©ch
(
e
Ë
	`ex˚±i⁄__ˇtch
((”Ë
the_ex˚±i⁄_c⁄ãxt
->
v
.
ëmp
, 0))

	)

232 
	#C©ch_™⁄ymous
 
	`ex˚±i⁄__ˇtch
(0)

	)

243 
	#Throw
 \

244 ;; 
	`l⁄gjmp
(*
the_ex˚±i⁄_c⁄ãxt
->
≥nv
, 1)) \

245 
the_ex˚±i⁄_c⁄ãxt
->
v
.
ëmp
 =

	)

	@contrib/visupng/resource.h

5 
	#IDM_FILE_OPEN
 40001

	)

6 
	#IDM_FILE_SAVE
 40002

	)

7 
	#IDM_FILE_NEXT
 40003

	)

8 
	#IDM_FILE_PREVIOUS
 40004

	)

9 
	#IDM_FILE_EXIT
 40005

	)

10 
	#IDM_OPTIONS_BACKGROUND
 40006

	)

11 
	#IDM_OPTIONS_STRETCH
 40007

	)

12 
	#IDM_HELP_ABOUT
 40008

	)

16 #ifde‡
APSTUDIO_INVOKED


17 #i‚de‡
APSTUDIO_READONLY_SYMBOLS


18 
	#_APS_NEXT_RESOURCE_VALUE
 113

	)

19 
	#_APS_NEXT_COMMAND_VALUE
 40009

	)

20 
	#_APS_NEXT_CONTROL_VALUE
 1001

	)

21 
	#_APS_NEXT_SYMED_VALUE
 101

	)

	@example.c

40 
	~<°ddef.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<°dio.h
>

44 
	~<≤g.h
>

45 
	~<zlib.h
>

47 
	$maö
(
¨gc
, c⁄° **
¨gv
)

49 i‡(
¨gc
 == 3)

51 
≤g_image
 
image
;

54 
	`mem£t
(&
image
, 0, ( image));

55 
image
.
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

58 i‡(
	`≤g_image_begö_ªad_‰om_fûe
(&
image
, 
¨gv
[1]) != 0)

60 
≤g_byãp
 
buf„r
;

66 
image
.
f‹m©
 = 
PNG_FORMAT_RGBA
;

72 
buf„r
 = 
	`mÆloc
(
	`PNG_IMAGE_SIZE
(
image
));

101 i‡(
buf„r
 !
NULL
 &&

102 
	`≤g_image_föish_ªad
(&
image
, 
NULL
 , 
buf„r
,

103 0 , 
NULL
 ) != 0)

110 i‡(
	`≤g_image_wrôe_to_fûe
(&
image
, 
¨gv
[2], 0 ,

111 
buf„r
, 0 , 
NULL
 ) != 0)

114 
	`exô
(0);

124 i‡(
buf„r
 =
NULL
)

125 
	`≤g_image_‰ì
(&
image
);

127 
	`‰ì
(
buf„r
);

134 
	`Ârötf
(
°dîr
, "≤gt›ng:Éº‹: %s\n", 
image
.
mesßge
);

135 
	`exô
(1);

138 
	`Ârötf
(
°dîr
, "pngtopng: usage:Öngtopng input-file output-file\n");

139 
	`exô
(2);

140 
	}
}

216 
	~<≤g.h
>

224 #i‚de‡
≤g_jmpbuf


225 
	#≤g_jmpbuf
(
≤g_±r
Ë(’ng_±r)->
≤g_jmpbuf
)

	)

248 
	#PNG_BYTES_TO_CHECK
 4

	)

249 
	$check_if_≤g
(*
fûe_«me
, 
FILE
 **
Â
)

251 
buf
[
PNG_BYTES_TO_CHECK
];

254 i‡((*
Â
 = 
	`f›í
(
fûe_«me
, "rb")Ë=
NULL
)

258 i‡(
	`‰ód
(
buf
, 1, 
PNG_BYTES_TO_CHECK
, *
Â
) != PNG_BYTES_TO_CHECK)

264 (!
	`≤g_sig_cmp
(
buf
, 0, 
PNG_BYTES_TO_CHECK
));

265 
	}
}

273 #ifde‡
›í_fûe


274 
	$ªad_≤g
(*
fûe_«me
)

276 
≤g_°ru˘p
 
≤g_±r
;

277 
≤g_öf›
 
öfo_±r
;

278 
sig_ªad
 = 0;

279 
≤g_uöt_32
 
width
, 
height
;

280 
bô_dïth
, 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
;

281 
FILE
 *
Â
;

283 i‡((
Â
 = 
	`f›í
(
fûe_«me
, "rb")Ë=
NULL
)

284  (
ERROR
);

287 
	$ªad_≤g
(
FILE
 *
Â
, 
sig_ªad
)

289 
≤g_°ru˘p
 
≤g_±r
;

290 
≤g_öf›
 
öfo_±r
;

291 
≤g_uöt_32
 
width
, 
height
;

292 
bô_dïth
, 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
;

301 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
,

302 
≤g_voidp
 
u£r_îr‹_±r
, 
u£r_îr‹_‚
, 
u£r_w¨nög_‚
);

304 i‡(
≤g_±r
 =
NULL
)

306 
	`f˛o£
(
Â
);

307  (
ERROR
);

311 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

312 i‡(
öfo_±r
 =
NULL
)

314 
	`f˛o£
(
Â
);

315 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
NULL
, NULL);

316  (
ERROR
);

323 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
)))

326 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

327 
	`f˛o£
(
Â
);

329  (
ERROR
);

333 #ifde‡
°ªams


335 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

341 
	`≤g_£t_ªad_‚
(
≤g_±r
, (*)
u£r_io_±r
, 
u£r_ªad_‚
);

346 
	`≤g_£t_sig_byãs
(
≤g_±r
, 
sig_ªad
);

348 #ifde‡
hûevñ


356 
	`≤g_ªad_≤g
(
≤g_±r
, 
öfo_±r
, 
≤g_å™sf‹ms
, 
NULL
);

364 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

366 
	`≤g_gë_IHDR
(
≤g_±r
, 
öfo_±r
, &
width
, &
height
, &
bô_dïth
, &
cﬁ‹_ty≥
,

367 &
öãæa˚_ty≥
, 
NULL
, NULL);

379 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


380 
	`≤g_£t_sˇÀ_16
(
≤g_±r
);

382 
	`≤g_£t_°rù_16
(
≤g_±r
);

388 
	`≤g_£t_°rù_Æpha
(
≤g_±r
);

393 
	`≤g_£t_∑ckög
(
≤g_±r
);

398 
	`≤g_£t_∑cksw≠
(
≤g_±r
);

401 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

402 
	`≤g_£t_∑Àâe_to_rgb
(
≤g_±r
);

405 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 && 
bô_dïth
 < 8)

406 
	`≤g_£t_ex∑nd_gøy_1_2_4_to_8
(
≤g_±r
);

411 i‡(
	`≤g_gë_vÆid
(
≤g_±r
, 
öfo_±r
, 
PNG_INFO_tRNS
) != 0)

412 
	`≤g_£t_tRNS_to_Æpha
(
≤g_±r
);

420 
≤g_cﬁ‹_16
 
my_background
, *
image_background
;

422 i‡(
	`≤g_gë_bKGD
(
≤g_±r
, 
öfo_±r
, &
image_background
) != 0)

423 
	`≤g_£t_background
(
≤g_±r
, 
image_background
,

424 
PNG_BACKGROUND_GAMMA_FILE
, 1, 1.0);

426 
	`≤g_£t_background
(
≤g_±r
, &
my_background
,

427 
PNG_BACKGROUND_GAMMA_SCREEN
, 0, 1.0);

435 
s¸ìn_gamma
 = 
u£r
-
deföed
 screen_gamma;

437 i‡((
gamma_°r
 = 
	`gëív
("SCREEN_GAMMA")Ë!
NULL
)

438 
s¸ìn_gamma
 = 
	`©of
(
gamma_°r
);

442 
s¸ìn_gamma
 = 
PNG_DEFAULT_sRGB
;

444 
s¸ìn_gamma
 = 
PNG_GAMMA_MAC_18
 
‹
 1.0;

454 
öã¡
;

456 i‡(
	`≤g_gë_sRGB
(
≤g_±r
, 
öfo_±r
, &
öã¡
) != 0)

457 
	`≤g_£t_gamma
(
≤g_±r
, 
s¸ìn_gamma
, 
PNG_DEFAULT_sRGB
);

460 
image_gamma
;

461 i‡(
	`≤g_gë_gAMA
(
≤g_±r
, 
öfo_±r
, &
image_gamma
) != 0)

462 
	`≤g_£t_gamma
(
≤g_±r
, 
s¸ìn_gamma
, 
image_gamma
);

464 
	`≤g_£t_gamma
(
≤g_±r
, 
s¸ìn_gamma
, 0.45455);

467 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


471 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

473 
num_∑Àâe
;

474 
≤g_cﬁ‹p
 
∑Àâe
;

480 
≤g_cﬁ‹
 
°d_cﬁ‹_cube
[
MAX_SCREEN_COLORS
];

481 
	`≤g_£t_qu™tize
(
≤g_±r
, 
°d_cﬁ‹_cube
, 
MAX_SCREEN_COLORS
,

482 
MAX_SCREEN_COLORS
, 
NULL
, 0);

485 i‡(
	`≤g_gë_PLTE
(
≤g_±r
, 
öfo_±r
, &
∑Àâe
, &
num_∑Àâe
) != 0)

487 
≤g_uöt_16p
 
hi°ogøm
 = 
NULL
;

488 
	`≤g_gë_hIST
(
≤g_±r
, 
öfo_±r
, &
hi°ogøm
);

489 
	`≤g_£t_qu™tize
(
≤g_±r
, 
∑Àâe
, 
num_∑Àâe
,

490 
max_s¸ìn_cﬁ‹s
, 
hi°ogøm
, 0);

496 
	`≤g_£t_övît_m⁄o
(
≤g_±r
);

502 i‡(
	`≤g_gë_vÆid
(
≤g_±r
, 
öfo_±r
, 
PNG_INFO_sBIT
) != 0)

504 
≤g_cﬁ‹_8p
 
sig_bô_p
;

505 
	`≤g_gë_sBIT
(
≤g_±r
, 
öfo_±r
, &
sig_bô_p
);

506 
	`≤g_£t_shi·
(
≤g_±r
, 
sig_bô_p
);

510 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

511 
	`≤g_£t_bgr
(
≤g_±r
);

514 
	`≤g_£t_sw≠_Æpha
(
≤g_±r
);

517 
	`≤g_£t_sw≠
(
≤g_±r
);

520 
	`≤g_£t_fûÀr
(
≤g_±r
, 0xffff, 
PNG_FILLER_AFTER
);

522 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


527 
numbî_∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

529 
numbî_∑s£s
 = 1;

536 
	`≤g_ªad_upd©e_öfo
(
≤g_±r
, 
öfo_±r
);

539 
≤g_byãp
 
row_poöãrs
[
height
];

540 
row
 = 0;Ñow < 
height
;Ñow++)

541 
row_poöãrs
[
row
] = 
NULL
;

542 
row
 = 0;Ñow < 
height
;Ñow++)

543 
row_poöãrs
[
row
] = 
	`≤g_mÆloc
(
≤g_±r
, 
	`≤g_gë_rowbyãs
(png_ptr,

544 
öfo_±r
));

547 #ifde‡
ítúe


548 
	`≤g_ªad_image
(
≤g_±r
, 
row_poöãrs
);

552 
∑ss
 = 0;Öas†< 
numbî_∑s£s
;Öass++)

554 #ifde‡
sögÀ


555 
y
 = 0; y < 
height
; y++)

556 
	`≤g_ªad_rows
(
≤g_±r
, &
row_poöãrs
[
y
], 
NULL
, 1);

559 
y
 = 0; y < 
height
; y +
numbî_of_rows
)

561 #ifde‡
•¨kÀ


562 
	`≤g_ªad_rows
(
≤g_±r
, &
row_poöãrs
[
y
], 
NULL
,

563 
numbî_of_rows
);

565 
	`≤g_ªad_rows
(
≤g_±r
, 
NULL
, &
row_poöãrs
[
y
],

566 
numbî_of_rows
);

576 
	`≤g_ªad_íd
(
≤g_±r
, 
öfo_±r
);

582 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, &
öfo_±r
, 
NULL
);

585 
	`f˛o£
(
Â
);

588  (
OK
);

589 
	}
}

594 
	$öôülize_≤g_ªadî
(
≤g_°ru˘p
 *
≤g_±r
, 
≤g_öf›
 *
öfo_±r
)

602 *
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
,

603 
≤g_voidp
 
u£r_îr‹_±r
, 
u£r_îr‹_‚
, 
u£r_w¨nög_‚
);

604 i‡(*
≤g_±r
 =
NULL
)

606 *
öfo_±r
 = 
NULL
;

607  (
ERROR
);

609 *
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

610 i‡(*
öfo_±r
 =
NULL
)

612 
	`≤g_de°roy_ªad_°ru˘
(
≤g_±r
, 
öfo_±r
, 
NULL
);

613  (
ERROR
);

615 i‡(
	`£tjmp
(
	`≤g_jmpbuf
((*
≤g_±r
))))

617 
	`≤g_de°roy_ªad_°ru˘
(
≤g_±r
, 
öfo_±r
, 
NULL
);

618  (
ERROR
);

633 
	`≤g_£t_¥ogªssive_ªad_‚
(*
≤g_±r
, (*)
°ªam_d©a
,

634 
öfo_ˇŒback
, 
row_ˇŒback
, 
íd_ˇŒback
);

635  (
OK
);

636 
	}
}

639 
	$¥o˚ss_d©a
(
≤g_°ru˘p
 *
≤g_±r
, 
≤g_öf›
 *
öfo_±r
,

640 
≤g_byãp
 
buf„r
, 
≤g_uöt_32
 
Àngth
)

642 i‡(
	`£tjmp
(
	`≤g_jmpbuf
((*
≤g_±r
))))

645 
	`≤g_de°roy_ªad_°ru˘
(
≤g_±r
, 
öfo_±r
, 
NULL
);

646  (
ERROR
);

659 
	`≤g_¥o˚ss_d©a
(*
≤g_±r
, *
öfo_±r
, 
buf„r
, 
Àngth
);

660  (
OK
);

661 
	}
}

663 
	$öfo_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo
)

672 
	}
}

674 
	$row_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
√w_row
,

675 
≤g_uöt_32
 
row_num
, 
∑ss
)

694 
≤g_byãp
 
ﬁd_row
 = (’ng_byã∞*)
our_d©a
)[
row_num
];

696 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


700 i‡(
ﬁd_row
 !
NULL
 && 
√w_row
 != NULL)

701 
	`≤g_¥ogªssive_comböe_row
(
≤g_±r
, 
ﬁd_row
, 
√w_row
);

714 
	`≤g_¥ogªssive_comböe_row
(
≤g_±r
, 
ﬁd_row
, 
√w_row
);

724 
	}
}

726 
	$íd_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_öf›
 
öfo
)

737 
	}
}

740 
	$wrôe_≤g
(*
fûe_«me
 )

742 
FILE
 *
Â
;

743 
≤g_°ru˘p
 
≤g_±r
;

744 
≤g_öf›
 
öfo_±r
;

745 
≤g_cﬁ‹p
 
∑Àâe
;

748 
Â
 = 
	`f›í
(
fûe_«me
, "wb");

749 i‡(
Â
 =
NULL
)

750  (
ERROR
);

758 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
,

759 
≤g_voidp
 
u£r_îr‹_±r
, 
u£r_îr‹_‚
, 
u£r_w¨nög_‚
);

760 i‡(
≤g_±r
 =
NULL
)

762 
	`f˛o£
(
Â
);

763  (
ERROR
);

767 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

768 i‡(
öfo_±r
 =
NULL
)

770 
	`f˛o£
(
Â
);

771 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, 
NULL
);

772  (
ERROR
);

778 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
≤g_±r
)))

781 
	`f˛o£
(
Â
);

782 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

783  (
ERROR
);

788 #ifde‡
°ªams


790 
	`≤g_öô_io
(
≤g_±r
, 
Â
);

796 
	`≤g_£t_wrôe_‚
(
≤g_±r
, (*)
u£r_io_±r
, 
u£r_wrôe_‚
,

797 
u£r_IO_Êush_fun˘i⁄
);

801 #ifde‡
hûevñ


806 
	`≤g_wrôe_≤g
(
≤g_±r
, 
öfo_±r
, 
≤g_å™sf‹ms
, 
NULL
);

820 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
width
, 
height
, 
bô_dïth
,

821 
PNG_COLOR_TYPE_
???, 
PNG_INTERLACE_
????,

822 
PNG_COMPRESSION_TYPE_BASE
, 
PNG_FILTER_TYPE_BASE
);

825 
∑Àâe
 = (
≤g_cﬁ‹p
)
	`≤g_mÆloc
(
≤g_±r
,

826 
PNG_MAX_PALETTE_LENGTH
 * ( (
≤g_cﬁ‹
)));

828 
	`≤g_£t_PLTE
(
≤g_±r
, 
öfo_±r
, 
∑Àâe
, 
PNG_MAX_PALETTE_LENGTH
);

835 
≤g_cﬁ‹_8
 
sig_bô
;

838 
sig_bô
.
gøy
 = 
åue_bô_dïth
;

841 
sig_bô
.
ªd
 = 
åue_ªd_bô_dïth
;

842 
sig_bô
.
gªí
 = 
åue_gªí_bô_dïth
;

843 
sig_bô
.
blue
 = 
åue_blue_bô_dïth
;

846 
sig_bô
.
Æpha
 = 
åue_Æpha_bô_dïth
;

848 
	`≤g_£t_sBIT
(
≤g_±r
, 
öfo_±r
, &
sig_bô
);

853 
	`≤g_£t_gAMA
(
≤g_±r
, 
öfo_±r
, 
gamma
);

857 
≤g_ãxt
 
ãxt_±r
[3];

859 
key0
[] = "Title";

860 
ãxt0
[] = "Mona Lisa";

861 
ãxt_±r
[0].
key
 = 
key0
;

862 
ãxt_±r
[0].
ãxt
 = 
ãxt0
;

863 
ãxt_±r
[0].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

864 
ãxt_±r
[0].
ôxt_Àngth
 = 0;

865 
ãxt_±r
[0].
œng
 = 
NULL
;

866 
ãxt_±r
[0].
œng_key
 = 
NULL
;

868 
key1
[] = "Author";

869 
ãxt1
[] = "Leonardo DaVinci";

870 
ãxt_±r
[1].
key
 = 
key1
;

871 
ãxt_±r
[1].
ãxt
 = 
ãxt1
;

872 
ãxt_±r
[1].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

873 
ãxt_±r
[1].
ôxt_Àngth
 = 0;

874 
ãxt_±r
[1].
œng
 = 
NULL
;

875 
ãxt_±r
[1].
œng_key
 = 
NULL
;

877 
key2
[] = "Description";

878 
ãxt2
[] = "<longÅext>";

879 
ãxt_±r
[2].
key
 = 
key2
;

880 
ãxt_±r
[2].
ãxt
 = 
ãxt2
;

881 
ãxt_±r
[2].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_zTXt
;

882 
ãxt_±r
[2].
ôxt_Àngth
 = 0;

883 
ãxt_±r
[2].
œng
 = 
NULL
;

884 
ãxt_±r
[2].
œng_key
 = 
NULL
;

886 
	`≤g_£t_ãxt
(
wrôe_±r
, 
wrôe_öfo_±r
, 
ãxt_±r
, 3);

897 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

921 
	`≤g_£t_övît_m⁄o
(
≤g_±r
);

926 
	`≤g_£t_shi·
(
≤g_±r
, &
sig_bô
);

929 
	`≤g_£t_∑ckög
(
≤g_±r
);

932 
	`≤g_£t_sw≠_Æpha
(
≤g_±r
);

937 
	`≤g_£t_fûÀr
(
≤g_±r
, 0, 
PNG_FILLER_BEFORE
);

940 
	`≤g_£t_bgr
(
≤g_±r
);

943 
	`≤g_£t_sw≠
(
≤g_±r
);

946 
	`≤g_£t_∑cksw≠
(
≤g_±r
);

949 i‡(
öãæacög
 != 0)

950 
numbî_∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

952 
numbî_∑s£s
 = 1;

958 
≤g_uöt_32
 
k
, 
height
, 
width
;

963 i‡(
height
 > 
PNG_SIZE_MAX
 / (
width
 * 
byãs_≥r_pixñ
))

964 
	`≤g_îr‹
(
≤g_±r
, "Image data buffer would beÅooÜarge");

966 
≤g_byã
 
image
[
height
 * 
width
 * 
byãs_≥r_pixñ
];

967 
≤g_byãp
 
row_poöãrs
[
height
];

969 i‡(
height
 > 
PNG_UINT_32_MAX
 / ( (
≤g_byãp
)))

970 
	`≤g_îr‹
(
≤g_±r
, "Image isÅooÅallÅoÖrocess in memory");

973 
k
 = 0; k < 
height
; k++)

974 
row_poöãrs
[
k
] = 
image
 + k * 
width
 * 
byãs_≥r_pixñ
;

978 #ifde‡
ítúe


979 
	`≤g_wrôe_image
(
≤g_±r
, 
row_poöãrs
);

988 
∑ss
 = 0;Öas†< 
numbî_∑s£s
;Öass++)

991 
	`≤g_wrôe_rows
(
≤g_±r
, &
row_poöãrs
[
fú°_row
], 
numbî_of_rows
);

994 
y
 = 0; y < 
height
; y++)

995 
	`≤g_wrôe_rows
(
≤g_±r
, &
row_poöãrs
[
y
], 1);

1006 
	`≤g_wrôe_íd
(
≤g_±r
, 
öfo_±r
);

1015 
	`≤g_‰ì
(
≤g_±r
, 
∑Àâe
);

1016 
∑Àâe
 = 
NULL
;

1022 
	`≤g_‰ì
(
≤g_±r
, 
å™s
);

1023 
å™s
 = 
NULL
;

1032 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, &
öfo_±r
);

1035 
	`f˛o£
(
Â
);

1038  (
OK
);

1039 
	}
}

	@intel/filter_sse2_intrinsics.c

14 
	~"../≤g¥iv.h
"

16 #ifde‡
PNG_READ_SUPPORTED


18 #i‡
PNG_INTEL_SSE_IMPLEMENTATION
 > 0

20 
	~<immöåö.h
>

30 
__m128i
 
	$lﬂd4
(c⁄° * 
p
) {

31 
tmp
;

32 
	`mem˝y
(&
tmp
, 
p
, (tmp));

33  
	`_mm_cvtsi32_si128
(
tmp
);

34 
	}
}

36 
	$°‹e4
(* 
p
, 
__m128i
 
v
) {

37 
tmp
 = 
	`_mm_cvtsi128_si32
(
v
);

38 
	`mem˝y
(
p
, &
tmp
, ());

39 
	}
}

41 
__m128i
 
	$lﬂd3
(c⁄° * 
p
) {

42 
≤g_uöt_32
 
tmp
 = 0;

43 
	`mem˝y
(&
tmp
, 
p
, 3);

44  
	`_mm_cvtsi32_si128
(
tmp
);

45 
	}
}

47 
	$°‹e3
(* 
p
, 
__m128i
 
v
) {

48 
tmp
 = 
	`_mm_cvtsi128_si32
(
v
);

49 
	`mem˝y
(
p
, &
tmp
, 3);

50 
	}
}

52 
	$≤g_ªad_fûãr_row_sub3_s£2
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

53 
≤g_c⁄°_byãp
 
¥ev
)

59 
size_t
 
rb
;

61 
__m128i
 
a
, 
d
 = 
	`_mm_£tzîo_si128
();

63 
	`≤g_debug
(1, "inÖng_read_filter_row_sub3_sse2");

65 
rb
 = 
row_öfo
->
rowbyãs
;

66 
rb
 >= 4) {

67 
a
 = 
d
; d = 
	`lﬂd4
(
row
);

68 
d
 = 
	`_mm_add_ïi8
(d, 
a
);

69 
	`°‹e3
(
row
, 
d
);

71 
row
 += 3;

72 
rb
 -= 3;

74 i‡(
rb
 > 0) {

75 
a
 = 
d
; d = 
	`lﬂd3
(
row
);

76 
d
 = 
	`_mm_add_ïi8
(d, 
a
);

77 
	`°‹e3
(
row
, 
d
);

79 
row
 += 3;

80 
rb
 -= 3;

82 
	`PNG_UNUSED
(
¥ev
)

83 
	}
}

85 
	$≤g_ªad_fûãr_row_sub4_s£2
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

86 
≤g_c⁄°_byãp
 
¥ev
)

92 
size_t
 
rb
;

94 
__m128i
 
a
, 
d
 = 
	`_mm_£tzîo_si128
();

96 
	`≤g_debug
(1, "inÖng_read_filter_row_sub4_sse2");

98 
rb
 = 
row_öfo
->
rowbyãs
+4;

99 
rb
 > 4) {

100 
a
 = 
d
; d = 
	`lﬂd4
(
row
);

101 
d
 = 
	`_mm_add_ïi8
(d, 
a
);

102 
	`°‹e4
(
row
, 
d
);

104 
row
 += 4;

105 
rb
 -= 4;

107 
	`PNG_UNUSED
(
¥ev
)

108 
	}
}

110 
	$≤g_ªad_fûãr_row_avg3_s£2
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

111 
≤g_c⁄°_byãp
 
¥ev
)

119 
size_t
 
rb
;

121 c⁄° 
__m128i
 
zîo
 = 
	`_mm_£tzîo_si128
();

123 
__m128i
 
b
;

124 
__m128i
 
a
, 
d
 = 
zîo
;

126 
	`≤g_debug
(1, "inÖng_read_filter_row_avg3_sse2");

127 
rb
 = 
row_öfo
->
rowbyãs
;

128 
rb
 >= 4) {

129 
__m128i
 
avg
;

130 
b
 = 
	`lﬂd4
(
¥ev
);

131 
a
 = 
d
; d = 
	`lﬂd4
(
row
 );

134 
avg
 = 
	`_mm_avg_ïu8
(
a
,
b
);

136 
avg
 = 
	`_mm_sub_ïi8
◊vg, 
	`_mm_™d_si128
(
	`_mm_x‹_si128
(
a
,
b
),

137 
	`_mm_£t1_ïi8
(1)));

138 
d
 = 
	`_mm_add_ïi8
(d, 
avg
);

139 
	`°‹e3
(
row
, 
d
);

141 
¥ev
 += 3;

142 
row
 += 3;

143 
rb
 -= 3;

145 i‡(
rb
 > 0) {

146 
__m128i
 
avg
;

147 
b
 = 
	`lﬂd3
(
¥ev
);

148 
a
 = 
d
; d = 
	`lﬂd3
(
row
 );

151 
avg
 = 
	`_mm_avg_ïu8
(
a
,
b
);

153 
avg
 = 
	`_mm_sub_ïi8
◊vg, 
	`_mm_™d_si128
(
	`_mm_x‹_si128
(
a
,
b
),

154 
	`_mm_£t1_ïi8
(1)));

156 
d
 = 
	`_mm_add_ïi8
(d, 
avg
);

157 
	`°‹e3
(
row
, 
d
);

159 
¥ev
 += 3;

160 
row
 += 3;

161 
rb
 -= 3;

163 
	}
}

165 
	$≤g_ªad_fûãr_row_avg4_s£2
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

166 
≤g_c⁄°_byãp
 
¥ev
)

173 
size_t
 
rb
;

174 c⁄° 
__m128i
 
zîo
 = 
	`_mm_£tzîo_si128
();

175 
__m128i
 
b
;

176 
__m128i
 
a
, 
d
 = 
zîo
;

178 
	`≤g_debug
(1, "inÖng_read_filter_row_avg4_sse2");

180 
rb
 = 
row_öfo
->
rowbyãs
+4;

181 
rb
 > 4) {

182 
__m128i
 
avg
;

183 
b
 = 
	`lﬂd4
(
¥ev
);

184 
a
 = 
d
; d = 
	`lﬂd4
(
row
 );

187 
avg
 = 
	`_mm_avg_ïu8
(
a
,
b
);

189 
avg
 = 
	`_mm_sub_ïi8
◊vg, 
	`_mm_™d_si128
(
	`_mm_x‹_si128
(
a
,
b
),

190 
	`_mm_£t1_ïi8
(1)));

192 
d
 = 
	`_mm_add_ïi8
(d, 
avg
);

193 
	`°‹e4
(
row
, 
d
);

195 
¥ev
 += 4;

196 
row
 += 4;

197 
rb
 -= 4;

199 
	}
}

202 
__m128i
 
	$abs_i16
(
__m128i
 
x
) {

203 #i‡
PNG_INTEL_SSE_IMPLEMENTATION
 >= 2

204  
	`_mm_abs_ïi16
(
x
);

209 
__m128i
 
is_√g©ive
 = 
	`_mm_cm∂t_ïi16
(
x
, 
	`_mm_£tzîo_si128
());

212 
x
 = 
	`_mm_x‹_si128
(x, 
is_√g©ive
);

215 
x
 = 
	`_mm_sub_ïi16
(x, 
is_√g©ive
);

216  
x
;

218 
	}
}

221 
__m128i
 
	$if_thí_ñ£
(
__m128i
 
c
, __m128ò
t
, __m128ò
e
) {

222 #i‡
PNG_INTEL_SSE_IMPLEMENTATION
 >= 3

223  
	`_mm_bÀndv_ïi8
(
e
,
t
,
c
);

225  
	`_mm_‹_si128
(
	`_mm_™d_si128
(
c
, 
t
), 
	`_mm_™dnŸ_si128
(c, 
e
));

227 
	}
}

229 
	$≤g_ªad_fûãr_row_∑ëh3_s£2
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

230 
≤g_c⁄°_byãp
 
¥ev
)

245 
size_t
 
rb
;

246 c⁄° 
__m128i
 
zîo
 = 
	`_mm_£tzîo_si128
();

247 
__m128i
 
c
, 
b
 = 
zîo
,

248 
a
, 
d
 = 
zîo
;

250 
	`≤g_debug
(1, "inÖng_read_filter_row_paeth3_sse2");

252 
rb
 = 
row_öfo
->
rowbyãs
;

253 
rb
 >= 4) {

257 
__m128i
 
∑
,
pb
,
pc
,
smÆÀ°
,
√¨e°
;

258 
c
 = 
b
; b = 
	`_mm_u≈acklo_ïi8
(
	`lﬂd4
(
¥ev
), 
zîo
);

259 
a
 = 
d
; d = 
	`_mm_u≈acklo_ïi8
(
	`lﬂd4
(
row
 ), 
zîo
);

263 
∑
 = 
	`_mm_sub_ïi16
(
b
,
c
);

266 
pb
 = 
	`_mm_sub_ïi16
(
a
,
c
);

269 
pc
 = 
	`_mm_add_ïi16
(
∑
,
pb
);

271 
∑
 = 
	`abs_i16
(pa);

272 
pb
 = 
	`abs_i16
(pb);

273 
pc
 = 
	`abs_i16
(pc);

275 
smÆÀ°
 = 
	`_mm_mö_ïi16
(
pc
, _mm_mö_ïi16(
∑
, 
pb
));

278 
√¨e°
 = 
	`if_thí_ñ£
(
	`_mm_cm≥q_ïi16
(
smÆÀ°
, 
∑
), 
a
,

279 
	`if_thí_ñ£
(
	`_mm_cm≥q_ïi16
(
smÆÀ°
, 
pb
), 
b
,

280 
c
));

283 
d
 = 
	`_mm_add_ïi8
(d, 
√¨e°
);

284 
	`°‹e3
(
row
, 
	`_mm_∑ckus_ïi16
(
d
,d));

286 
¥ev
 += 3;

287 
row
 += 3;

288 
rb
 -= 3;

290 i‡(
rb
 > 0) {

294 
__m128i
 
∑
,
pb
,
pc
,
smÆÀ°
,
√¨e°
;

295 
c
 = 
b
; b = 
	`_mm_u≈acklo_ïi8
(
	`lﬂd3
(
¥ev
), 
zîo
);

296 
a
 = 
d
; d = 
	`_mm_u≈acklo_ïi8
(
	`lﬂd3
(
row
 ), 
zîo
);

299 
∑
 = 
	`_mm_sub_ïi16
(
b
,
c
);

302 
pb
 = 
	`_mm_sub_ïi16
(
a
,
c
);

305 
pc
 = 
	`_mm_add_ïi16
(
∑
,
pb
);

307 
∑
 = 
	`abs_i16
(pa);

308 
pb
 = 
	`abs_i16
(pb);

309 
pc
 = 
	`abs_i16
(pc);

311 
smÆÀ°
 = 
	`_mm_mö_ïi16
(
pc
, _mm_mö_ïi16(
∑
, 
pb
));

314 
√¨e°
 = 
	`if_thí_ñ£
(
	`_mm_cm≥q_ïi16
(
smÆÀ°
, 
∑
), 
a
,

315 
	`if_thí_ñ£
(
	`_mm_cm≥q_ïi16
(
smÆÀ°
, 
pb
), 
b
,

316 
c
));

319 
d
 = 
	`_mm_add_ïi8
(d, 
√¨e°
);

320 
	`°‹e3
(
row
, 
	`_mm_∑ckus_ïi16
(
d
,d));

322 
¥ev
 += 3;

323 
row
 += 3;

324 
rb
 -= 3;

326 
	}
}

328 
	$≤g_ªad_fûãr_row_∑ëh4_s£2
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

329 
≤g_c⁄°_byãp
 
¥ev
)

344 
size_t
 
rb
;

345 c⁄° 
__m128i
 
zîo
 = 
	`_mm_£tzîo_si128
();

346 
__m128i
 
∑
,
pb
,
pc
,
smÆÀ°
,
√¨e°
;

347 
__m128i
 
c
, 
b
 = 
zîo
,

348 
a
, 
d
 = 
zîo
;

350 
	`≤g_debug
(1, "inÖng_read_filter_row_paeth4_sse2");

352 
rb
 = 
row_öfo
->
rowbyãs
+4;

353 
rb
 > 4) {

357 
c
 = 
b
; b = 
	`_mm_u≈acklo_ïi8
(
	`lﬂd4
(
¥ev
), 
zîo
);

358 
a
 = 
d
; d = 
	`_mm_u≈acklo_ïi8
(
	`lﬂd4
(
row
 ), 
zîo
);

361 
∑
 = 
	`_mm_sub_ïi16
(
b
,
c
);

364 
pb
 = 
	`_mm_sub_ïi16
(
a
,
c
);

367 
pc
 = 
	`_mm_add_ïi16
(
∑
,
pb
);

369 
∑
 = 
	`abs_i16
(pa);

370 
pb
 = 
	`abs_i16
(pb);

371 
pc
 = 
	`abs_i16
(pc);

373 
smÆÀ°
 = 
	`_mm_mö_ïi16
(
pc
, _mm_mö_ïi16(
∑
, 
pb
));

376 
√¨e°
 = 
	`if_thí_ñ£
(
	`_mm_cm≥q_ïi16
(
smÆÀ°
, 
∑
), 
a
,

377 
	`if_thí_ñ£
(
	`_mm_cm≥q_ïi16
(
smÆÀ°
, 
pb
), 
b
,

378 
c
));

381 
d
 = 
	`_mm_add_ïi8
(d, 
√¨e°
);

382 
	`°‹e4
(
row
, 
	`_mm_∑ckus_ïi16
(
d
,d));

384 
¥ev
 += 4;

385 
row
 += 4;

386 
rb
 -= 4;

388 
	}
}

	@intel/intel_init.c

14 
	~"../≤g¥iv.h
"

16 #ifde‡
PNG_READ_SUPPORTED


17 #i‡
PNG_INTEL_SSE_IMPLEMENTATION
 > 0

20 
	$≤g_öô_fûãr_fun˘i⁄s_s£2
(
≤g_°ru˘p
 
µ
, 
bµ
)

30 
	`≤g_debug
(1, "inÖng_init_filter_functions_sse2");

31 i‡(
bµ
 == 3)

33 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub3_s£2
;

34 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg3_s£2
;

35 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] =

36 
≤g_ªad_fûãr_row_∑ëh3_s£2
;

38 i‡(
bµ
 == 4)

40 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub4_s£2
;

41 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg4_s£2
;

42 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] =

43 
≤g_ªad_fûãr_row_∑ëh4_s£2
;

49 
	}
}

	@mips/filter_msa_intrinsics.c

13 
	~<°dio.h
>

14 
	~<°döt.h
>

15 
	~"../≤g¥iv.h
"

17 #ifde‡
PNG_READ_SUPPORTED


20 #i‡
PNG_MIPS_MSA_IMPLEMENTATION
 == 1

22 
	~<mß.h
>

29 
	#≤g_±r
(
ty≥
,
poöãr
Ë
	`≤g_Æignˇ°
—y≥ *,poöãr)

	)

30 
	#≤g_±rc
(
ty≥
,
poöãr
Ë
	`≤g_Æignˇ°c⁄°
(c⁄°Åy≥ *,poöãr)

	)

37 
	#≤g_ldr
(
ty≥
,
poöãr
)\

38 (
ãmp_poöãr
 = 
	`≤g_±r
(
ty≥
,
poöãr
), *ãmp_poöãr)

	)

40 #i‡
PNG_MIPS_MSA_OPT
 > 0

42 #ifde‡
CLANG_BUILD


43 
	#MSA_SRLI_B
(
a
, 
b
Ë
	`__mß_§li_b
((
v16i8
Ëa, b)

	)

45 
	#LW
(
p§c
) \

47 
uöt8_t
 *
p§c_lw_m
 = (uöt8_à*Ë(
p§c
); \

48 
uöt32_t
 
vÆ_m
; \

50 
asm
 volatile ( \

53 : [
vÆ_m
] "=r" (val_m) \

54 : [
p§c_lw_m
] "m" (*psrc_lw_m) \

57 
vÆ_m
; \

58 } )

	)

60 
	#SH
(
vÆ
, 
pd°
) \

62 
uöt8_t
 *
pd°_sh_m
 = (uöt8_à*Ë(
pd°
); \

63 
uöt16_t
 
vÆ_m
 = (
vÆ
); \

65 
asm
 volatile ( \

68 : [
pd°_sh_m
] "=m" (*pdst_sh_m) \

69 : [
vÆ_m
] "r" (val_m) \

71 }

	)

73 
	#SW
(
vÆ
, 
pd°
) \

75 
uöt8_t
 *
pd°_sw_m
 = (uöt8_à*Ë(
pd°
); \

76 
uöt32_t
 
vÆ_m
 = (
vÆ
); \

78 
asm
 volatile ( \

81 : [
pd°_sw_m
] "=m" (*pdst_sw_m) \

82 : [
vÆ_m
] "r" (val_m) \

84 }

	)

86 #i‡(
__mùs
 == 64)

87 
	#SD
(
vÆ
, 
pd°
) \

89 
uöt8_t
 *
pd°_sd_m
 = (uöt8_à*Ë(
pd°
); \

90 
uöt64_t
 
vÆ_m
 = (
vÆ
); \

92 
asm
 volatile ( \

95 : [
pd°_sd_m
] "=m" (*pdst_sd_m) \

96 : [
vÆ_m
] "r" (val_m) \

98 }

	)

100 
	#SD
(
vÆ
, 
pd°
) \

102 
uöt8_t
 *
pd°_sd_m
 = (uöt8_à*Ë(
pd°
); \

103 
uöt32_t
 
vÆ0_m
, 
vÆ1_m
; \

105 
vÆ0_m
 = (
uöt32_t
Ë((
vÆ
) & 0x00000000FFFFFFFF); \

106 
vÆ1_m
 = (
uöt32_t
Ë(((
vÆ
) >> 32) & 0x00000000FFFFFFFF); \

108 
	`SW
(
vÆ0_m
, 
pd°_sd_m
); \

109 
	`SW
(
vÆ1_m
, 
pd°_sd_m
 + 4); \

110 }

	)

113 
	#MSA_SRLI_B
(
a
, 
b
Ë◊ >> b)

	)

115 #i‡(
__mùs_iß_ªv
 >= 6)

116 
	#LW
(
p§c
) \

118 
uöt8_t
 *
p§c_lw_m
 = (uöt8_à*Ë(
p§c
); \

119 
uöt32_t
 
vÆ_m
; \

121 
asm
 volatile ( \

124 : [
vÆ_m
] "=r" (val_m) \

125 : [
p§c_lw_m
] "m" (*psrc_lw_m) \

128 
vÆ_m
; \

129 } )

	)

131 
	#SH
(
vÆ
, 
pd°
) \

133 
uöt8_t
 *
pd°_sh_m
 = (uöt8_à*Ë(
pd°
); \

134 
uöt16_t
 
vÆ_m
 = (
vÆ
); \

136 
asm
 volatile ( \

139 : [
pd°_sh_m
] "=m" (*pdst_sh_m) \

140 : [
vÆ_m
] "r" (val_m) \

142 }

	)

144 
	#SW
(
vÆ
, 
pd°
) \

146 
uöt8_t
 *
pd°_sw_m
 = (uöt8_à*Ë(
pd°
); \

147 
uöt32_t
 
vÆ_m
 = (
vÆ
); \

149 
asm
 volatile ( \

152 : [
pd°_sw_m
] "=m" (*pdst_sw_m) \

153 : [
vÆ_m
] "r" (val_m) \

155 }

	)

157 #i‡(
__mùs
 == 64)

158 
	#SD
(
vÆ
, 
pd°
) \

160 
uöt8_t
 *
pd°_sd_m
 = (uöt8_à*Ë(
pd°
); \

161 
uöt64_t
 
vÆ_m
 = (
vÆ
); \

163 
asm
 volatile ( \

166 : [
pd°_sd_m
] "=m" (*pdst_sd_m) \

167 : [
vÆ_m
] "r" (val_m) \

169 }

	)

171 
	#SD
(
vÆ
, 
pd°
) \

173 
uöt8_t
 *
pd°_sd_m
 = (uöt8_à*Ë(
pd°
); \

174 
uöt32_t
 
vÆ0_m
, 
vÆ1_m
; \

176 
vÆ0_m
 = (
uöt32_t
Ë((
vÆ
) & 0x00000000FFFFFFFF); \

177 
vÆ1_m
 = (
uöt32_t
Ë(((
vÆ
) >> 32) & 0x00000000FFFFFFFF); \

179 
	`SW
(
vÆ0_m
, 
pd°_sd_m
); \

180 
	`SW
(
vÆ1_m
, 
pd°_sd_m
 + 4); \

181 }

	)

184 
	#LW
(
p§c
) \

186 
uöt8_t
 *
p§c_lw_m
 = (uöt8_à*Ë(
p§c
); \

187 
uöt32_t
 
vÆ_m
; \

189 
asm
 volatile ( \

192 : [
vÆ_m
] "=r" (val_m) \

193 : [
p§c_lw_m
] "m" (*psrc_lw_m) \

196 
vÆ_m
; \

197 } )

	)

199 
	#SH
(
vÆ
, 
pd°
) \

201 
uöt8_t
 *
pd°_sh_m
 = (uöt8_à*Ë(
pd°
); \

202 
uöt16_t
 
vÆ_m
 = (
vÆ
); \

204 
asm
 volatile ( \

207 : [
pd°_sh_m
] "=m" (*pdst_sh_m) \

208 : [
vÆ_m
] "r" (val_m) \

210 }

	)

212 
	#SW
(
vÆ
, 
pd°
) \

214 
uöt8_t
 *
pd°_sw_m
 = (uöt8_à*Ë(
pd°
); \

215 
uöt32_t
 
vÆ_m
 = (
vÆ
); \

217 
asm
 volatile ( \

220 : [
pd°_sw_m
] "=m" (*pdst_sw_m) \

221 : [
vÆ_m
] "r" (val_m) \

223 }

	)

225 
	#SD
(
vÆ
, 
pd°
) \

227 
uöt8_t
 *
pd°_sd_m
 = (uöt8_à*Ë(
pd°
); \

228 
uöt32_t
 
vÆ0_m
, 
vÆ1_m
; \

230 
vÆ0_m
 = (
uöt32_t
Ë((
vÆ
) & 0x00000000FFFFFFFF); \

231 
vÆ1_m
 = (
uöt32_t
Ë(((
vÆ
) >> 32) & 0x00000000FFFFFFFF); \

233 
	`SW
(
vÆ0_m
, 
pd°_sd_m
); \

234 
	`SW
(
vÆ1_m
, 
pd°_sd_m
 + 4); \

235 }

	)

237 
	#SW_ZERO
(
pd°
) \

239 
uöt8_t
 *
pd°_m
 = (uöt8_à*Ë(
pd°
); \

241 
asm
 volatile ( \

244 : [
pd°_m
] "=m" (*pdst_m) \

247 }

	)

251 
	#LD_B
(
RTYPE
, 
p§c
Ë*((RTYPE *Ë’§c))

	)

252 
	#LD_UB
(...Ë
	`LD_B
(
v16u8
, 
__VA_ARGS__
)

	)

253 
	#LD_B2
(
RTYPE
, 
p§c
, 
°ride
, 
out0
, 
out1
) \

255 
out0
 = 
	`LD_B
(
RTYPE
, (
p§c
)); \

256 
out1
 = 
	`LD_B
(
RTYPE
, (
p§c
Ë+ 
°ride
); \

257 }

	)

258 
	#LD_UB2
(...Ë
	`LD_B2
(
v16u8
, 
__VA_ARGS__
)

	)

259 
	#LD_B4
(
RTYPE
, 
p§c
, 
°ride
, 
out0
, 
out1
, 
out2
, 
out3
) \

261 
	`LD_B2
(
RTYPE
, (
p§c
), 
°ride
, 
out0
, 
out1
); \

262 
	`LD_B2
(
RTYPE
, (
p§c
Ë+ 2 * 
°ride
 , såide, 
out2
, 
out3
); \

263 }

	)

264 
	#LD_UB4
(...Ë
	`LD_B4
(
v16u8
, 
__VA_ARGS__
)

	)

266 
	#ST_B
(
RTYPE
, 
ö
, 
pd°
Ë*((RTYPE *Ë’d°)Ë(ö)

	)

267 
	#ST_UB
(...Ë
	`ST_B
(
v16u8
, 
__VA_ARGS__
)

	)

268 
	#ST_B2
(
RTYPE
, 
ö0
, 
ö1
, 
pd°
, 
°ride
) \

270 
	`ST_B
(
RTYPE
, 
ö0
, (
pd°
)); \

271 
	`ST_B
(
RTYPE
, 
ö1
, (
pd°
Ë+ 
°ride
); \

272 }

	)

273 
	#ST_UB2
(...Ë
	`ST_B2
(
v16u8
, 
__VA_ARGS__
)

	)

274 
	#ST_B4
(
RTYPE
, 
ö0
, 
ö1
, 
ö2
, 
ö3
, 
pd°
, 
°ride
) \

276 
	`ST_B2
(
RTYPE
, 
ö0
, 
ö1
, (
pd°
), 
°ride
); \

277 
	`ST_B2
(
RTYPE
, 
ö2
, 
ö3
, (
pd°
Ë+ 2 * 
°ride
, stride); \

278 }

	)

279 
	#ST_UB4
(...Ë
	`ST_B4
(
v16u8
, 
__VA_ARGS__
)

	)

281 
	#ADD2
(
ö0
, 
ö1
, 
ö2
, 
ö3
, 
out0
, 
out1
) \

283 
out0
 = 
ö0
 + 
ö1
; \

284 
out1
 = 
ö2
 + 
ö3
; \

285 }

	)

286 
	#ADD3
(
ö0
, 
ö1
, 
ö2
, 
ö3
, 
ö4
, 
ö5
, \

287 
out0
, 
out1
, 
out2
) \

289 
	`ADD2
(
ö0
, 
ö1
, 
ö2
, 
ö3
, 
out0
, 
out1
); \

290 
out2
 = 
ö4
 + 
ö5
; \

291 }

	)

292 
	#ADD4
(
ö0
, 
ö1
, 
ö2
, 
ö3
, 
ö4
, 
ö5
, 
ö6
, 
ö7
, \

293 
out0
, 
out1
, 
out2
, 
out3
) \

295 
	`ADD2
(
ö0
, 
ö1
, 
ö2
, 
ö3
, 
out0
, 
out1
); \

296 
	`ADD2
(
ö4
, 
ö5
, 
ö6
, 
ö7
, 
out2
, 
out3
); \

297 }

	)

299 
	#ILVR_B2
(
RTYPE
, 
ö0
, 
ö1
, 
ö2
, 
ö3
, 
out0
, 
out1
) \

301 
out0
 = (
RTYPE
Ë
	`__mß_ûvr_b
((
v16i8
Ë
ö0
, (v16i8Ë
ö1
); \

302 
out1
 = (
RTYPE
Ë
	`__mß_ûvr_b
((
v16i8
Ë
ö2
, (v16i8Ë
ö3
); \

303 }

	)

304 
	#ILVR_B2_SH
(...Ë
	`ILVR_B2
(
v8i16
, 
__VA_ARGS__
)

	)

306 
	#HSUB_UB2
(
RTYPE
, 
ö0
, 
ö1
, 
out0
, 
out1
) \

308 
out0
 = (
RTYPE
Ë
	`__mß_hsub_u_h
((
v16u8
Ë
ö0
, (v16u8) in0); \

309 
out1
 = (
RTYPE
Ë
	`__mß_hsub_u_h
((
v16u8
Ë
ö1
, (v16u8) in1); \

310 }

	)

311 
	#HSUB_UB2_SH
(...Ë
	`HSUB_UB2
(
v8i16
, 
__VA_ARGS__
)

	)

313 
	#SLDI_B2_0
(
RTYPE
, 
ö0
, 
ö1
, 
out0
, 
out1
, 
¶ide_vÆ
) \

315 
v16i8
 
zîo_m
 = { 0 }; \

316 
out0
 = (
RTYPE
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo_m
, (v16i8Ë
ö0
, 
¶ide_vÆ
); \

317 
out1
 = (
RTYPE
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo_m
, (v16i8Ë
ö1
, 
¶ide_vÆ
); \

318 }

	)

319 
	#SLDI_B2_0_UB
(...Ë
	`SLDI_B2_0
(
v16u8
, 
__VA_ARGS__
)

	)

321 
	#SLDI_B3_0
(
RTYPE
, 
ö0
, 
ö1
, 
ö2
, 
out0
, 
out1
, 
out2
, 
¶ide_vÆ
) \

323 
v16i8
 
zîo_m
 = { 0 }; \

324 
	`SLDI_B2_0
(
RTYPE
, 
ö0
, 
ö1
, 
out0
, 
out1
, 
¶ide_vÆ
); \

325 
out2
 = (
RTYPE
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo_m
, (v16i8Ë
ö2
, 
¶ide_vÆ
); \

326 }

	)

327 
	#SLDI_B3_0_UB
(...Ë
	`SLDI_B3_0
(
v16u8
, 
__VA_ARGS__
)

	)

329 
	#ILVEV_W2
(
RTYPE
, 
ö0
, 
ö1
, 
ö2
, 
ö3
, 
out0
, 
out1
) \

331 
out0
 = (
RTYPE
Ë
	`__mß_ûvev_w
((
v4i32
Ë
ö1
, (v4i32Ë
ö0
); \

332 
out1
 = (
RTYPE
Ë
	`__mß_ûvev_w
((
v4i32
Ë
ö3
, (v4i32Ë
ö2
); \

333 }

	)

334 
	#ILVEV_W2_UB
(...Ë
	`ILVEV_W2
(
v16u8
, 
__VA_ARGS__
)

	)

336 
	#ADD_ABS_H3
(
RTYPE
, 
ö0
, 
ö1
, 
ö2
, 
out0
, 
out1
, 
out2
) \

338 
RTYPE
 
zîo
 = {0}; \

340 
out0
 = 
	`__mß_add_a_h
((
v8i16
Ë
zîo
, 
ö0
); \

341 
out1
 = 
	`__mß_add_a_h
((
v8i16
Ë
zîo
, 
ö1
); \

342 
out2
 = 
	`__mß_add_a_h
((
v8i16
Ë
zîo
, 
ö2
); \

343 }

	)

344 
	#ADD_ABS_H3_SH
(...Ë
	`ADD_ABS_H3
(
v8i16
, 
__VA_ARGS__
)

	)

346 
	#VSHF_B2
(
RTYPE
, 
ö0
, 
ö1
, 
ö2
, 
ö3
, 
mask0
, 
mask1
, 
out0
, 
out1
) \

348 
out0
 = (
RTYPE
Ë
	`__mß_vshf_b
((
v16i8
Ë
mask0
, (v16i8Ë
ö1
, (v16i8Ë
ö0
); \

349 
out1
 = (
RTYPE
Ë
	`__mß_vshf_b
((
v16i8
Ë
mask1
, (v16i8Ë
ö3
, (v16i8Ë
ö2
); \

350 }

	)

351 
	#VSHF_B2_UB
(...Ë
	`VSHF_B2
(
v16u8
, 
__VA_ARGS__
)

	)

353 
	#CMP_AND_SELECT
(
öp0
, 
öp1
, 
öp2
, 
öp3
, 
öp4
, 
öp5
, 
out0
) \

355 
v8i16
 
_£l_h0
, 
_£l_h1
; \

356 
v16u8
 
_£l_b0
, 
_£l_b1
; \

357 
_£l_h0
 = (
v8i16
Ë
	`__mß_˛t_u_h
((
v8u16
Ë
öp1
, (v8u16Ë
öp0
); \

358 
_£l_b0
 = (
v16u8
Ë
	`__mß_pckev_b
((
v16i8
Ë
_£l_h0
, (v16i8) _sel_h0); \

359 
öp0
 = (
v8i16
Ë
	`__mß_bmnz_v
((
v16u8
Ëöp0, (v16u8Ë
öp1
, (v16u8Ë
_£l_h0
); \

360 
öp4
 = (
v16u8
Ë
	`__mß_bmnz_v
(
öp3
, i≈4, 
_£l_b0
); \

361 
_£l_h1
 = (
v8i16
Ë
	`__mß_˛t_u_h
((
v8u16
Ë
öp2
, (v8u16Ë
öp0
); \

362 
_£l_b1
 = (
v16u8
Ë
	`__mß_pckev_b
((
v16i8
Ë
_£l_h1
, (v16i8) _sel_h1); \

363 
öp4
 = (
v16u8
Ë
	`__mß_bmnz_v
(öp4, 
öp5
, 
_£l_b1
); \

364 
out0
 +
öp4
; \

365 }

	)

367 
	$≤g_ªad_fûãr_row_up_mß
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

368 
≤g_c⁄°_byãp
 
¥ev_row
)

370 
size_t
 
i
, 
˙t
, 
˙t16
, 
˙t32
;

371 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
;

372 
≤g_byãp
 
Ω
 = 
row
;

373 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

374 
v16u8
 
§c0
, 
§c1
, 
§c2
, 
§c3
, 
§c4
, 
§c5
, 
§c6
, 
§c7
;

376 
i
 = 0; i < (
i°›
 >> 6); i++)

378 
	`LD_UB4
(
Ω
, 16, 
§c0
, 
§c1
, 
§c2
, 
§c3
);

379 
	`LD_UB4
(
µ
, 16, 
§c4
, 
§c5
, 
§c6
, 
§c7
);

380 
µ
 += 64;

382 
	`ADD4
(
§c0
, 
§c4
, 
§c1
, 
§c5
, 
§c2
, 
§c6
, 
§c3
, 
§c7
,

383 
§c0
, 
§c1
, 
§c2
, 
§c3
);

385 
	`ST_UB4
(
§c0
, 
§c1
, 
§c2
, 
§c3
, 
Ω
, 16);

386 
Ω
 += 64;

389 i‡(
i°›
 & 0x3F)

391 
˙t32
 = 
i°›
 & 0x20;

392 
˙t16
 = 
i°›
 & 0x10;

393 
˙t
 = 
i°›
 & 0xF;

395 if(
˙t32
)

397 i‡(
˙t16
 && 
˙t
)

399 
	`LD_UB4
(
Ω
, 16, 
§c0
, 
§c1
, 
§c2
, 
§c3
);

400 
	`LD_UB4
(
µ
, 16, 
§c4
, 
§c5
, 
§c6
, 
§c7
);

402 
	`ADD4
(
§c0
, 
§c4
, 
§c1
, 
§c5
, 
§c2
, 
§c6
, 
§c3
, 
§c7
,

403 
§c0
, 
§c1
, 
§c2
, 
§c3
);

405 
	`ST_UB4
(
§c0
, 
§c1
, 
§c2
, 
§c3
, 
Ω
, 16);

406 
Ω
 += 64;

408 i‡(
˙t16
 || 
˙t
)

410 
	`LD_UB2
(
Ω
, 16, 
§c0
, 
§c1
);

411 
	`LD_UB2
(
µ
, 16, 
§c4
, 
§c5
);

412 
µ
 += 32;

413 
§c2
 = 
	`LD_UB
(
Ω
 + 32);

414 
§c6
 = 
	`LD_UB
(
µ
);

416 
	`ADD3
(
§c0
, 
§c4
, 
§c1
, 
§c5
, 
§c2
, 
§c6
, src0, src1, src2);

418 
	`ST_UB2
(
§c0
, 
§c1
, 
Ω
, 16);

419 
Ω
 += 32;

420 
	`ST_UB
(
§c2
, 
Ω
);

421 
Ω
 += 16;

425 
	`LD_UB2
(
Ω
, 16, 
§c0
, 
§c1
);

426 
	`LD_UB2
(
µ
, 16, 
§c4
, 
§c5
);

428 
	`ADD2
(
§c0
, 
§c4
, 
§c1
, 
§c5
, src0, src1);

430 
	`ST_UB2
(
§c0
, 
§c1
, 
Ω
, 16);

431 
Ω
 += 32;

434 i‡(
˙t16
 && 
˙t
)

436 
	`LD_UB2
(
Ω
, 16, 
§c0
, 
§c1
);

437 
	`LD_UB2
(
µ
, 16, 
§c4
, 
§c5
);

439 
	`ADD2
(
§c0
, 
§c4
, 
§c1
, 
§c5
, src0, src1);

441 
	`ST_UB2
(
§c0
, 
§c1
, 
Ω
, 16);

442 
Ω
 += 32;

444 i‡(
˙t16
 || 
˙t
)

446 
§c0
 = 
	`LD_UB
(
Ω
);

447 
§c4
 = 
	`LD_UB
(
µ
);

448 
µ
 += 16;

450 
§c0
 +
§c4
;

452 
	`ST_UB
(
§c0
, 
Ω
);

453 
Ω
 += 16;

456 
	}
}

458 
	$≤g_ªad_fûãr_row_sub4_mß
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

459 
≤g_c⁄°_byãp
 
¥ev_row
)

461 
size_t
 
cou¡
;

462 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
;

463 
≤g_byãp
 
§c
 = 
row
;

464 
≤g_byãp
 
nxt
 = 
row
 + 4;

465 
öt32_t
 
öp0
;

466 
v16u8
 
§c0
, 
§c1
, 
§c2
, 
§c3
, 
§c4
;

467 
v16u8
 
d°0
, 
d°1
;

468 
v16u8
 
zîo
 = { 0 };

470 
i°›
 -= 4;

472 
öp0
 = 
	`LW
(
§c
);

473 
§c
 += 4;

474 
§c0
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp0
);

476 
cou¡
 = 0; cou¡ < 
i°›
; count += 16)

478 
§c1
 = 
	`LD_UB
(
§c
);

479 
§c
 += 16;

481 
§c2
 = (
v16u8
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo
, (v16i8Ë
§c1
, 4);

482 
§c3
 = (
v16u8
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo
, (v16i8Ë
§c1
, 8);

483 
§c4
 = (
v16u8
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo
, (v16i8Ë
§c1
, 12);

484 
§c1
 +
§c0
;

485 
§c2
 +
§c1
;

486 
§c3
 +
§c2
;

487 
§c4
 +
§c3
;

488 
§c0
 = 
§c4
;

489 
	`ILVEV_W2_UB
(
§c1
, 
§c2
, 
§c3
, 
§c4
, 
d°0
, 
d°1
);

490 
d°0
 = (
v16u8
Ë
	`__mß_pckev_d
((
v2i64
Ë
d°1
, (v2i64) dst0);

492 
	`ST_UB
(
d°0
, 
nxt
);

493 
nxt
 += 16;

495 
	}
}

497 
	$≤g_ªad_fûãr_row_sub3_mß
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

498 
≤g_c⁄°_byãp
 
¥ev_row
)

500 
size_t
 
cou¡
;

501 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
;

502 
≤g_byãp
 
§c
 = 
row
;

503 
≤g_byãp
 
nxt
 = 
row
 + 3;

504 
öt64_t
 
out0
;

505 
öt32_t
 
öp0
, 
out1
;

506 
v16u8
 
§c0
, 
§c1
, 
§c2
, 
§c3
, 
§c4
, 
d°0
, 
d°1
;

507 
v16u8
 
zîo
 = { 0 };

508 
v16i8
 
mask0
 = { 0, 1, 2, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

509 
v16i8
 
mask1
 = { 0, 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 0, 0, 0, 0 };

511 
i°›
 -= 3;

513 
öp0
 = 
	`LW
(
§c
);

514 
§c
 += 3;

515 
§c0
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp0
);

517 
cou¡
 = 0; cou¡ < 
i°›
; count += 12)

519 
§c1
 = 
	`LD_UB
(
§c
);

520 
§c
 += 12;

522 
§c2
 = (
v16u8
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo
, (v16i8Ë
§c1
, 3);

523 
§c3
 = (
v16u8
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo
, (v16i8Ë
§c1
, 6);

524 
§c4
 = (
v16u8
Ë
	`__mß_¶di_b
((
v16i8
Ë
zîo
, (v16i8Ë
§c1
, 9);

525 
§c1
 +
§c0
;

526 
§c2
 +
§c1
;

527 
§c3
 +
§c2
;

528 
§c4
 +
§c3
;

529 
§c0
 = 
§c4
;

530 
	`VSHF_B2_UB
(
§c1
, 
§c2
, 
§c3
, 
§c4
, 
mask0
, mask0, 
d°0
, 
d°1
);

531 
d°0
 = (
v16u8
Ë
	`__mß_vshf_b
(
mask1
, (
v16i8
Ë
d°1
, (v16i8) dst0);

532 
out0
 = 
	`__mß_c›y_s_d
((
v2i64
Ë
d°0
, 0);

533 
out1
 = 
	`__mß_c›y_s_w
((
v4i32
Ë
d°0
, 2);

535 
	`SD
(
out0
, 
nxt
);

536 
nxt
 += 8;

537 
	`SW
(
out1
, 
nxt
);

538 
nxt
 += 4;

540 
	}
}

542 
	$≤g_ªad_fûãr_row_avg4_mß
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

543 
≤g_c⁄°_byãp
 
¥ev_row
)

545 
size_t
 
i
;

546 
≤g_byãp
 
§c
 = 
row
;

547 
≤g_byãp
 
nxt
 = 
row
;

548 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

549 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
 - 4;

550 
öt32_t
 
öp0
, 
öp1
, 
out0
;

551 
v16u8
 
§c0
, 
§c1
, 
§c2
, 
§c3
, 
§c4
, 
§c5
, 
§c6
, 
§c7
, 
§c8
, 
§c9
, 
d°0
, 
d°1
;

552 
v16u8
 
zîo
 = { 0 };

554 
öp0
 = 
	`LW
(
µ
);

555 
µ
 += 4;

556 
öp1
 = 
	`LW
(
§c
);

557 
§c
 += 4;

558 
§c0
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp0
);

559 
§c1
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp1
);

560 
§c0
 = (
v16u8
Ë
	`MSA_SRLI_B
(src0, 1);

561 
§c1
 +
§c0
;

562 
out0
 = 
	`__mß_c›y_s_w
((
v4i32
Ë
§c1
, 0);

563 
	`SW
(
out0
, 
nxt
);

564 
nxt
 += 4;

566 
i
 = 0; i < 
i°›
; i += 16)

568 
§c2
 = 
	`LD_UB
(
µ
);

569 
µ
 += 16;

570 
§c6
 = 
	`LD_UB
(
§c
);

571 
§c
 += 16;

573 
	`SLDI_B2_0_UB
(
§c2
, 
§c6
, 
§c3
, 
§c7
, 4);

574 
	`SLDI_B2_0_UB
(
§c2
, 
§c6
, 
§c4
, 
§c8
, 8);

575 
	`SLDI_B2_0_UB
(
§c2
, 
§c6
, 
§c5
, 
§c9
, 12);

576 
§c2
 = 
	`__mß_ave_u_b
(§c2, 
§c1
);

577 
§c6
 +
§c2
;

578 
§c3
 = 
	`__mß_ave_u_b
(§c3, 
§c6
);

579 
§c7
 +
§c3
;

580 
§c4
 = 
	`__mß_ave_u_b
(§c4, 
§c7
);

581 
§c8
 +
§c4
;

582 
§c5
 = 
	`__mß_ave_u_b
(§c5, 
§c8
);

583 
§c9
 +
§c5
;

584 
§c1
 = 
§c9
;

585 
	`ILVEV_W2_UB
(
§c6
, 
§c7
, 
§c8
, 
§c9
, 
d°0
, 
d°1
);

586 
d°0
 = (
v16u8
Ë
	`__mß_pckev_d
((
v2i64
Ë
d°1
, (v2i64) dst0);

588 
	`ST_UB
(
d°0
, 
nxt
);

589 
nxt
 += 16;

591 
	}
}

593 
	$≤g_ªad_fûãr_row_avg3_mß
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

594 
≤g_c⁄°_byãp
 
¥ev_row
)

596 
size_t
 
i
;

597 
≤g_byãp
 
§c
 = 
row
;

598 
≤g_byãp
 
nxt
 = 
row
;

599 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

600 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
 - 3;

601 
öt64_t
 
out0
;

602 
öt32_t
 
öp0
, 
öp1
, 
out1
;

603 
öt16_t
 
out2
;

604 
v16u8
 
§c0
, 
§c1
, 
§c2
, 
§c3
, 
§c4
, 
§c5
, 
§c6
, 
§c7
, 
§c8
, 
§c9
, 
d°0
, 
d°1
;

605 
v16u8
 
zîo
 = { 0 };

606 
v16i8
 
mask0
 = { 0, 1, 2, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

607 
v16i8
 
mask1
 = { 0, 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 0, 0, 0, 0 };

609 
öp0
 = 
	`LW
(
µ
);

610 
µ
 += 3;

611 
öp1
 = 
	`LW
(
§c
);

612 
§c
 += 3;

613 
§c0
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp0
);

614 
§c1
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp1
);

615 
§c0
 = (
v16u8
Ë
	`MSA_SRLI_B
(src0, 1);

616 
§c1
 +
§c0
;

617 
out2
 = 
	`__mß_c›y_s_h
((
v8i16
Ë
§c1
, 0);

618 
	`SH
(
out2
, 
nxt
);

619 
nxt
 += 2;

620 
nxt
[0] = 
§c1
[2];

621 
nxt
++;

623 
i
 = 0; i < 
i°›
; i += 12)

625 
§c2
 = 
	`LD_UB
(
µ
);

626 
µ
 += 12;

627 
§c6
 = 
	`LD_UB
(
§c
);

628 
§c
 += 12;

630 
	`SLDI_B2_0_UB
(
§c2
, 
§c6
, 
§c3
, 
§c7
, 3);

631 
	`SLDI_B2_0_UB
(
§c2
, 
§c6
, 
§c4
, 
§c8
, 6);

632 
	`SLDI_B2_0_UB
(
§c2
, 
§c6
, 
§c5
, 
§c9
, 9);

633 
§c2
 = 
	`__mß_ave_u_b
(§c2, 
§c1
);

634 
§c6
 +
§c2
;

635 
§c3
 = 
	`__mß_ave_u_b
(§c3, 
§c6
);

636 
§c7
 +
§c3
;

637 
§c4
 = 
	`__mß_ave_u_b
(§c4, 
§c7
);

638 
§c8
 +
§c4
;

639 
§c5
 = 
	`__mß_ave_u_b
(§c5, 
§c8
);

640 
§c9
 +
§c5
;

641 
§c1
 = 
§c9
;

642 
	`VSHF_B2_UB
(
§c6
, 
§c7
, 
§c8
, 
§c9
, 
mask0
, mask0, 
d°0
, 
d°1
);

643 
d°0
 = (
v16u8
Ë
	`__mß_vshf_b
(
mask1
, (
v16i8
Ë
d°1
, (v16i8) dst0);

644 
out0
 = 
	`__mß_c›y_s_d
((
v2i64
Ë
d°0
, 0);

645 
out1
 = 
	`__mß_c›y_s_w
((
v4i32
Ë
d°0
, 2);

647 
	`SD
(
out0
, 
nxt
);

648 
nxt
 += 8;

649 
	`SW
(
out1
, 
nxt
);

650 
nxt
 += 4;

652 
	}
}

654 
	$≤g_ªad_fûãr_row_∑ëh4_mß
(
≤g_row_öf›
 
row_öfo
,

655 
≤g_byãp
 
row
,

656 
≤g_c⁄°_byãp
 
¥ev_row
)

658 
öt32_t
 
cou¡
, 
Ω_íd
;

659 
≤g_byãp
 
nxt
;

660 
≤g_c⁄°_byãp
 
¥ev_nxt
;

661 
öt32_t
 
öp0
, 
öp1
, 
ªs0
;

662 
v16u8
 
§c0
, 
§c1
, 
§c2
, 
§c3
, 
§c4
, 
§c5
, 
§c6
, 
§c7
, 
§c8
, 
§c9
;

663 
v16u8
 
§c10
, 
§c11
, 
§c12
, 
§c13
, 
d°0
, 
d°1
;

664 
v8i16
 
vec0
, 
vec1
, 
vec2
;

665 
v16u8
 
zîo
 = { 0 };

667 
nxt
 = 
row
;

668 
¥ev_nxt
 = 
¥ev_row
;

670 
öp0
 = 
	`LW
(
nxt
);

671 
öp1
 = 
	`LW
(
¥ev_nxt
);

672 
¥ev_nxt
 += 4;

673 
§c0
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp0
);

674 
§c1
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp1
);

676 
§c1
 +
§c0
;

677 
ªs0
 = 
	`__mß_c›y_s_w
((
v4i32
Ë
§c1
, 0);

679 
	`SW
(
ªs0
, 
nxt
);

680 
nxt
 += 4;

683 
Ω_íd
 = 
row_öfo
->
rowbyãs
 - 4;

685 
cou¡
 = 0; cou¡ < 
Ω_íd
; count += 16)

687 
§c2
 = 
	`LD_UB
(
¥ev_nxt
);

688 
¥ev_nxt
 += 16;

689 
§c6
 = 
	`LD_UB
(
¥ev_row
);

690 
¥ev_row
 += 16;

691 
§c10
 = 
	`LD_UB
(
nxt
);

693 
	`SLDI_B3_0_UB
(
§c2
, 
§c6
, 
§c10
, 
§c3
, 
§c7
, 
§c11
, 4);

694 
	`SLDI_B3_0_UB
(
§c2
, 
§c6
, 
§c10
, 
§c4
, 
§c8
, 
§c12
, 8);

695 
	`SLDI_B3_0_UB
(
§c2
, 
§c6
, 
§c10
, 
§c5
, 
§c9
, 
§c13
, 12);

696 
	`ILVR_B2_SH
(
§c2
, 
§c6
, 
§c1
, src6, 
vec0
, 
vec1
);

697 
	`HSUB_UB2_SH
(
vec0
, 
vec1
, vec0, vec1);

698 
vec2
 = 
vec0
 + 
vec1
;

699 
	`ADD_ABS_H3_SH
(
vec0
, 
vec1
, 
vec2
, vec0, vec1, vec2);

700 
	`CMP_AND_SELECT
(
vec0
, 
vec1
, 
vec2
, 
§c1
, 
§c2
, 
§c6
, 
§c10
);

701 
	`ILVR_B2_SH
(
§c3
, 
§c7
, 
§c10
, src7, 
vec0
, 
vec1
);

702 
	`HSUB_UB2_SH
(
vec0
, 
vec1
, vec0, vec1);

703 
vec2
 = 
vec0
 + 
vec1
;

704 
	`ADD_ABS_H3_SH
(
vec0
, 
vec1
, 
vec2
, vec0, vec1, vec2);

705 
	`CMP_AND_SELECT
(
vec0
, 
vec1
, 
vec2
, 
§c10
, 
§c3
, 
§c7
, 
§c11
);

706 
	`ILVR_B2_SH
(
§c4
, 
§c8
, 
§c11
, src8, 
vec0
, 
vec1
);

707 
	`HSUB_UB2_SH
(
vec0
, 
vec1
, vec0, vec1);

708 
vec2
 = 
vec0
 + 
vec1
;

709 
	`ADD_ABS_H3_SH
(
vec0
, 
vec1
, 
vec2
, vec0, vec1, vec2);

710 
	`CMP_AND_SELECT
(
vec0
, 
vec1
, 
vec2
, 
§c11
, 
§c4
, 
§c8
, 
§c12
);

711 
	`ILVR_B2_SH
(
§c5
, 
§c9
, 
§c12
, src9, 
vec0
, 
vec1
);

712 
	`HSUB_UB2_SH
(
vec0
, 
vec1
, vec0, vec1);

713 
vec2
 = 
vec0
 + 
vec1
;

714 
	`ADD_ABS_H3_SH
(
vec0
, 
vec1
, 
vec2
, vec0, vec1, vec2);

715 
	`CMP_AND_SELECT
(
vec0
, 
vec1
, 
vec2
, 
§c12
, 
§c5
, 
§c9
, 
§c13
);

716 
§c1
 = 
§c13
;

717 
	`ILVEV_W2_UB
(
§c10
, 
§c11
, 
§c12
, 
§c1
, 
d°0
, 
d°1
);

718 
d°0
 = (
v16u8
Ë
	`__mß_pckev_d
((
v2i64
Ë
d°1
, (v2i64) dst0);

720 
	`ST_UB
(
d°0
, 
nxt
);

721 
nxt
 += 16;

723 
	}
}

725 
	$≤g_ªad_fûãr_row_∑ëh3_mß
(
≤g_row_öf›
 
row_öfo
,

726 
≤g_byãp
 
row
,

727 
≤g_c⁄°_byãp
 
¥ev_row
)

729 
öt32_t
 
cou¡
, 
Ω_íd
;

730 
≤g_byãp
 
nxt
;

731 
≤g_c⁄°_byãp
 
¥ev_nxt
;

732 
öt64_t
 
out0
;

733 
öt32_t
 
öp0
, 
öp1
, 
out1
;

734 
öt16_t
 
out2
;

735 
v16u8
 
§c0
, 
§c1
, 
§c2
, 
§c3
, 
§c4
, 
§c5
, 
§c6
, 
§c7
, 
§c8
, 
§c9
, 
d°0
, 
d°1
;

736 
v16u8
 
§c10
, 
§c11
, 
§c12
, 
§c13
;

737 
v8i16
 
vec0
, 
vec1
, 
vec2
;

738 
v16u8
 
zîo
 = { 0 };

739 
v16i8
 
mask0
 = { 0, 1, 2, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

740 
v16i8
 
mask1
 = { 0, 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 21, 0, 0, 0, 0 };

742 
nxt
 = 
row
;

743 
¥ev_nxt
 = 
¥ev_row
;

745 
öp0
 = 
	`LW
(
nxt
);

746 
öp1
 = 
	`LW
(
¥ev_nxt
);

747 
¥ev_nxt
 += 3;

748 
§c0
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp0
);

749 
§c1
 = (
v16u8
Ë
	`__mß_ö£π_w
((
v4i32
Ë
zîo
, 0, 
öp1
);

751 
§c1
 +
§c0
;

752 
out2
 = 
	`__mß_c›y_s_h
((
v8i16
Ë
§c1
, 0);

754 
	`SH
(
out2
, 
nxt
);

755 
nxt
 += 2;

756 
nxt
[0] = 
§c1
[2];

757 
nxt
++;

760 
Ω_íd
 = 
row_öfo
->
rowbyãs
 - 3;

762 
cou¡
 = 0; cou¡ < 
Ω_íd
; count += 12)

764 
§c2
 = 
	`LD_UB
(
¥ev_nxt
);

765 
¥ev_nxt
 += 12;

766 
§c6
 = 
	`LD_UB
(
¥ev_row
);

767 
¥ev_row
 += 12;

768 
§c10
 = 
	`LD_UB
(
nxt
);

770 
	`SLDI_B3_0_UB
(
§c2
, 
§c6
, 
§c10
, 
§c3
, 
§c7
, 
§c11
, 3);

771 
	`SLDI_B3_0_UB
(
§c2
, 
§c6
, 
§c10
, 
§c4
, 
§c8
, 
§c12
, 6);

772 
	`SLDI_B3_0_UB
(
§c2
, 
§c6
, 
§c10
, 
§c5
, 
§c9
, 
§c13
, 9);

773 
	`ILVR_B2_SH
(
§c2
, 
§c6
, 
§c1
, src6, 
vec0
, 
vec1
);

774 
	`HSUB_UB2_SH
(
vec0
, 
vec1
, vec0, vec1);

775 
vec2
 = 
vec0
 + 
vec1
;

776 
	`ADD_ABS_H3_SH
(
vec0
, 
vec1
, 
vec2
, vec0, vec1, vec2);

777 
	`CMP_AND_SELECT
(
vec0
, 
vec1
, 
vec2
, 
§c1
, 
§c2
, 
§c6
, 
§c10
);

778 
	`ILVR_B2_SH
(
§c3
, 
§c7
, 
§c10
, src7, 
vec0
, 
vec1
);

779 
	`HSUB_UB2_SH
(
vec0
, 
vec1
, vec0, vec1);

780 
vec2
 = 
vec0
 + 
vec1
;

781 
	`ADD_ABS_H3_SH
(
vec0
, 
vec1
, 
vec2
, vec0, vec1, vec2);

782 
	`CMP_AND_SELECT
(
vec0
, 
vec1
, 
vec2
, 
§c10
, 
§c3
, 
§c7
, 
§c11
);

783 
	`ILVR_B2_SH
(
§c4
, 
§c8
, 
§c11
, src8, 
vec0
, 
vec1
);

784 
	`HSUB_UB2_SH
(
vec0
, 
vec1
, vec0, vec1);

785 
vec2
 = 
vec0
 + 
vec1
;

786 
	`ADD_ABS_H3_SH
(
vec0
, 
vec1
, 
vec2
, vec0, vec1, vec2);

787 
	`CMP_AND_SELECT
(
vec0
, 
vec1
, 
vec2
, 
§c11
, 
§c4
, 
§c8
, 
§c12
);

788 
	`ILVR_B2_SH
(
§c5
, 
§c9
, 
§c12
, src9, 
vec0
, 
vec1
);

789 
	`HSUB_UB2_SH
(
vec0
, 
vec1
, vec0, vec1);

790 
vec2
 = 
vec0
 + 
vec1
;

791 
	`ADD_ABS_H3_SH
(
vec0
, 
vec1
, 
vec2
, vec0, vec1, vec2);

792 
	`CMP_AND_SELECT
(
vec0
, 
vec1
, 
vec2
, 
§c12
, 
§c5
, 
§c9
, 
§c13
);

793 
§c1
 = 
§c13
;

794 
	`VSHF_B2_UB
(
§c10
, 
§c11
, 
§c12
, 
§c13
, 
mask0
, mask0, 
d°0
, 
d°1
);

795 
d°0
 = (
v16u8
Ë
	`__mß_vshf_b
(
mask1
, (
v16i8
Ë
d°1
, (v16i8) dst0);

796 
out0
 = 
	`__mß_c›y_s_d
((
v2i64
Ë
d°0
, 0);

797 
out1
 = 
	`__mß_c›y_s_w
((
v4i32
Ë
d°0
, 2);

799 
	`SD
(
out0
, 
nxt
);

800 
nxt
 += 8;

801 
	`SW
(
out1
, 
nxt
);

802 
nxt
 += 4;

804 
	}
}

	@mips/mips_init.c

16 
	#_POSIX_SOURCE
 1

	)

18 
	~<°dio.h
>

19 
	~"../≤g¥iv.h
"

21 #ifde‡
PNG_READ_SUPPORTED


23 #i‡
PNG_MIPS_MSA_OPT
 > 0

24 #ifde‡
PNG_MIPS_MSA_CHECK_SUPPORTED


37 #i‚de‡
PNG_MIPS_MSA_FILE


38 #ifde‡
__löux__


39 
	#PNG_MIPS_MSA_FILE
 "c⁄åib/mùs-mß/löux.c"

	)

43 #ifde‡
PNG_MIPS_MSA_FILE


45 
	~<sig«l.h
>

46 
≤g_have_mß
(
≤g_°ru˘p
 
≤g_±r
);

47 #ö˛udê
PNG_MIPS_MSA_FILE


54 #i‚de‡
PNG_ALIGNED_MEMORY_SUPPORTED


59 
	$≤g_öô_fûãr_fun˘i⁄s_mß
(
≤g_°ru˘p
 
µ
, 
bµ
)

67 #ifde‡
PNG_MIPS_MSA_API_SUPPORTED


68 (
µ
->
›ti⁄s
 >> 
PNG_MIPS_MSA
) & 3)

70 
PNG_OPTION_UNSET
:

77 #ifde‡
PNG_MIPS_MSA_CHECK_SUPPORTED


79 vﬁ©ûê
sig_©omic_t
 
no_mß
 = -1;

81 i‡(
no_mß
 < 0)

82 
no_mß
 = !
	`≤g_have_mß
(
µ
);

84 i‡(
no_mß
)

87 #ifde‡
PNG_MIPS_MSA_API_SUPPORTED


92 #ifde‡
PNG_MIPS_MSA_API_SUPPORTED


96 
PNG_OPTION_ON
:

99 
	}
}

113 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_UP
-1] = 
≤g_ªad_fûãr_row_up_mß
;

115 i‡(
	gbµ
 == 3)

117 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub3_mß
;

118 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg3_mß
;

119 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] = 
≤g_ªad_fûãr_row_∑ëh3_mß
;

122 i‡(
	gbµ
 == 4)

124 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub4_mß
;

125 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg4_mß
;

126 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] = 
≤g_ªad_fûãr_row_∑ëh4_mß
;

	@png.c

14 
	~"≤g¥iv.h
"

17 
≤g_lib≤g_vîsi⁄_1_6_38_gô
 
	tYour_≤g_h_is_nŸ_vîsi⁄_1_6_38_gô
;

19 #ifde‡
__GNUC__


31 #i‡
__GNUC__
 =7 && 
__GNUC_MINOR__
 == 1

32 
	#GCC_STRICT_OVERFLOW
 1

	)

35 #i‚de‡
GCC_STRICT_OVERFLOW


36 
	#GCC_STRICT_OVERFLOW
 0

	)

45 #ifde‡
PNG_READ_SUPPORTED


46 
PNGAPI


47 
	$≤g_£t_sig_byãs
(
≤g_°ru˘Ω
 
≤g_±r
, 
num_byãs
)

49 
nb
 = ()
num_byãs
;

51 
	`≤g_debug
(1, "inÖng_set_sig_bytes");

53 i‡(
≤g_±r
 =
NULL
)

56 i‡(
num_byãs
 < 0)

57 
nb
 = 0;

59 i‡(
nb
 > 8)

60 
	`≤g_îr‹
(
≤g_±r
, "Too many bytes for PNG signature");

62 
≤g_±r
->
sig_byãs
 = (
≤g_byã
)
nb
;

63 
	}
}

73 
PNGAPI


74 
	$≤g_sig_cmp
(
≤g_c⁄°_byãp
 
sig
, 
size_t
 
°¨t
, size_à
num_to_check
)

76 
≤g_byã
 
≤g_sig«tuª
[8] = {137, 80, 78, 71, 13, 10, 26, 10};

78 i‡(
num_to_check
 > 8)

79 
num_to_check
 = 8;

81 i‡(
num_to_check
 < 1)

84 i‡(
°¨t
 > 7)

87 i‡(
°¨t
 + 
num_to_check
 > 8)

88 
num_to_check
 = 8 - 
°¨t
;

90  (()(
	`memcmp
(&
sig
[
°¨t
], &
≤g_sig«tuª
[°¨t], 
num_to_check
)));

91 
	}
}

95 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë|| deföed(
PNG_WRITE_SUPPORTED
)

97 
PNG_FUNCTION
(
voidpf
 ,

98 
≤g_zÆloc
,(
voidpf
 
≤g_±r
, 
uI¡
 
ôems
, uI¡ 
size
),
PNG_ALLOCATED
)

100 
≤g_Æloc_size_t
 
	gnum_byãs
 = 
size
;

102 i‡(
	g≤g_±r
 =
NULL
)

103  
NULL
;

105 i‡(
	gôems
 >(~(
≤g_Æloc_size_t
)0)/
size
)

107 
≤g_w¨nög
 (
≤g_voidˇ°
(
≤g_°ru˘Ω
, 
≤g_±r
),

109  
	gNULL
;

112 
	gnum_byãs
 *
ôems
;

113  
≤g_mÆloc_w¨n
(
≤g_voidˇ°
(
≤g_°ru˘Ω
, 
≤g_±r
), 
num_byãs
);

118 
	$≤g_z‰ì
(
voidpf
 
≤g_±r
, voidp‡
±r
)

120 
	`≤g_‰ì
(
	`≤g_voidˇ°
(
≤g_c⁄°_°ru˘Ω
,
≤g_±r
), 
±r
);

121 
	}
}

127 
	$≤g_ª£t_¸c
(
≤g_°ru˘Ω
 
≤g_±r
)

130 
≤g_±r
->
¸c
 = (
≤g_uöt_32
)
	`¸c32
(0, 
Z_NULL
, 0);

131 
	}
}

139 
	$≤g_ˇlcuœã_¸c
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
±r
, 
size_t
 
Àngth
)

141 
√ed_¸c
 = 1;

143 i‡(
	`PNG_CHUNK_ANCILLARY
(
≤g_±r
->
chunk_«me
) != 0)

145 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_ANCILLARY_MASK
) ==

146 (
PNG_FLAG_CRC_ANCILLARY_USE
 | 
PNG_FLAG_CRC_ANCILLARY_NOWARN
))

147 
√ed_¸c
 = 0;

152 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_CRITICAL_IGNORE
) != 0)

153 
√ed_¸c
 = 0;

161 i‡(
√ed_¸c
 !0 && 
Àngth
 > 0)

163 
uL⁄g
 
¸c
 = 
≤g_±r
->crc;

167 
uI¡
 
ß„_Àngth
 = (uI¡)
Àngth
;

168 #i‚de‡
__COVERITY__


169 i‡(
ß„_Àngth
 == 0)

170 
ß„_Àngth
 = (
uI¡
)-1;

173 
¸c
 = 
	`¸c32
(¸c, 
±r
, 
ß„_Àngth
);

179 
±r
 +
ß„_Àngth
;

180 
Àngth
 -
ß„_Àngth
;

182 
Àngth
 > 0);

185 
≤g_±r
->
¸c
 = (
≤g_uöt_32
)crc;

187 
	}
}

193 
	$≤g_u£r_vîsi⁄_check
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
)

200 i‡(
u£r_≤g_vî
 !
NULL
)

202 
i
 = -1;

203 
found_dŸs
 = 0;

207 
i
++;

208 i‡(
u£r_≤g_vî
[
i
] !
PNG_LIBPNG_VER_STRING
[i])

209 
≤g_±r
->
Êags
 |
PNG_FLAG_LIBRARY_MISMATCH
;

210 i‡(
u£r_≤g_vî
[
i
] == '.')

211 
found_dŸs
++;

212 } 
found_dŸs
 < 2 && 
u£r_≤g_vî
[
i
] != 0 &&

213 
PNG_LIBPNG_VER_STRING
[
i
] != 0);

217 
≤g_±r
->
Êags
 |
PNG_FLAG_LIBRARY_MISMATCH
;

219 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_LIBRARY_MISMATCH
) != 0)

221 #ifde‡
PNG_WARNINGS_SUPPORTED


222 
size_t
 
pos
 = 0;

223 
m
[128];

225 
pos
 = 
	`≤g_ß„ˇt
(
m
, ( m),Öos,

227 
pos
 = 
	`≤g_ß„ˇt
(
m
, ( m),Öos, 
u£r_≤g_vî
);

228 
pos
 = 
	`≤g_ß„ˇt
(
m
, ( m),Öos, " butÑunning with ");

229 
pos
 = 
	`≤g_ß„ˇt
(
m
, ( m),Öos, 
PNG_LIBPNG_VER_STRING
);

230 
	`PNG_UNUSED
(
pos
)

232 
	`≤g_w¨nög
(
≤g_±r
, 
m
);

235 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


236 
≤g_±r
->
Êags
 = 0;

244 
	}
}

249 
PNG_FUNCTION
(
≤g_°ru˘p
 ,

250 
≤g_¸óã_≤g_°ru˘
,(
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

251 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

252 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
),
PNG_ALLOCATED
)

254 
≤g_°ru˘
 
	g¸óã_°ru˘
;

255 #ifde‡
PNG_SETJMP_SUPPORTED


256 
jmp_buf
 
	g¸óã_jmp_buf
;

263 
mem£t
(&
¸óã_°ru˘
, 0, ( create_struct));

266 #ifde‡
PNG_USER_LIMITS_SUPPORTED


267 
	g¸óã_°ru˘
.
	gu£r_width_max
 = 
PNG_USER_WIDTH_MAX
;

268 
	g¸óã_°ru˘
.
	gu£r_height_max
 = 
PNG_USER_HEIGHT_MAX
;

270 #ifde‡
PNG_USER_CHUNK_CACHE_MAX


272 
	g¸óã_°ru˘
.
	gu£r_chunk_ˇche_max
 = 
PNG_USER_CHUNK_CACHE_MAX
;

275 #ifde‡
PNG_USER_CHUNK_MALLOC_MAX


279 
	g¸óã_°ru˘
.
	gu£r_chunk_mÆloc_max
 = 
PNG_USER_CHUNK_MALLOC_MAX
;

286 #ifde‡
PNG_USER_MEM_SUPPORTED


287 
≤g_£t_mem_‚
(&
¸óã_°ru˘
, 
mem_±r
, 
mÆloc_‚
, 
‰ì_‚
);

289 
PNG_UNUSED
(
mem_±r
)

290 
PNG_UNUSED
(
mÆloc_‚
)

291 
PNG_UNUSED
(
‰ì_‚
)

299 
≤g_£t_îr‹_‚
(&
¸óã_°ru˘
, 
îr‹_±r
, 
îr‹_‚
, 
w¨n_‚
);

301 #ifde‡
PNG_SETJMP_SUPPORTED


302 i‡(!
£tjmp
(
¸óã_jmp_buf
))

305 #ifde‡
PNG_SETJMP_SUPPORTED


311 
	g¸óã_°ru˘
.
	gjmp_buf_±r
 = &
¸óã_jmp_buf
;

312 
	g¸óã_°ru˘
.
	gjmp_buf_size
 = 0;

313 
	g¸óã_°ru˘
.
	gl⁄gjmp_‚
 = 
l⁄gjmp
;

317 i‡(
≤g_u£r_vîsi⁄_check
(&
¸óã_°ru˘
, 
u£r_≤g_vî
) != 0)

319 
≤g_°ru˘Ω
 
≤g_±r
 = 
≤g_voidˇ°
(png_structrp,

320 
≤g_mÆloc_w¨n
(&
¸óã_°ru˘
, ( *
≤g_±r
)));

322 i‡(
	g≤g_±r
 !
NULL
)

327 
¸óã_°ru˘
.
z°ªam
.
zÆloc
 = 
≤g_zÆloc
;

328 
	g¸óã_°ru˘
.
	gz°ªam
.
	gz‰ì
 = 
≤g_z‰ì
;

329 
	g¸óã_°ru˘
.
	gz°ªam
.
	g›aque
 = 
≤g_±r
;

331 #ifde‡
PNG_SETJMP_SUPPORTED


333 
	g¸óã_°ru˘
.
	gjmp_buf_±r
 = 
NULL
;

334 
	g¸óã_°ru˘
.
	gjmp_buf_size
 = 0;

335 
	g¸óã_°ru˘
.
	gl⁄gjmp_‚
 = 0;

338 *
	g≤g_±r
 = 
¸óã_°ru˘
;

341  
	g≤g_±r
;

349  
	gNULL
;

353 
PNG_FUNCTION
(
≤g_öf›
,
PNGAPI


354 
≤g_¸óã_öfo_°ru˘
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
),
PNG_ALLOCATED
)

356 
≤g_öf‹p
 
	göfo_±r
;

358 
≤g_debug
(1, "inÖng_create_info_struct");

360 i‡(
	g≤g_±r
 =
NULL
)

361  
NULL
;

368 
	göfo_±r
 = 
≤g_voidˇ°
(
≤g_öf‹p
, 
≤g_mÆloc_ba£
(
≤g_±r
,

369 ( *
öfo_±r
)));

371 i‡(
	göfo_±r
 !
NULL
)

372 
mem£t
(
öfo_±r
, 0, ( *info_ptr));

374  
	göfo_±r
;

385 
PNGAPI


386 
	$≤g_de°roy_öfo_°ru˘
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf›p
 
öfo_±r_±r
)

388 
≤g_öf‹p
 
öfo_±r
 = 
NULL
;

390 
	`≤g_debug
(1, "inÖng_destroy_info_struct");

392 i‡(
≤g_±r
 =
NULL
)

395 i‡(
öfo_±r_±r
 !
NULL
)

396 
öfo_±r
 = *
öfo_±r_±r
;

398 i‡(
öfo_±r
 !
NULL
)

406 *
öfo_±r_±r
 = 
NULL
;

408 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
, 
PNG_FREE_ALL
, -1);

409 
	`mem£t
(
öfo_±r
, 0, ( *info_ptr));

410 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
);

412 
	}
}

423 
PNG_FUNCTION
(,
PNGAPI


424 
≤g_öfo_öô_3
,(
≤g_öf›p
 
±r_±r
, 
size_t
 
≤g_öfo_°ru˘_size
),

425 
PNG_DEPRECATED
)

427 
≤g_öf‹p
 
	göfo_±r
 = *
±r_±r
;

429 
≤g_debug
(1, "inÖng_info_init_3");

431 i‡(
	göfo_±r
 =
NULL
)

434 i‡(( (
	g≤g_öfo
)Ë> 
	g≤g_öfo_°ru˘_size
)

436 *
	g±r_±r
 = 
NULL
;

438 
‰ì
(
öfo_±r
);

439 
	göfo_±r
 = 
≤g_voidˇ°
(
≤g_öf‹p
, 
≤g_mÆloc_ba£
(
NULL
,

440 ( *
öfo_±r
)));

441 i‡(
	göfo_±r
 =
NULL
)

443 *
	g±r_±r
 = 
öfo_±r
;

447 
mem£t
(
öfo_±r
, 0, ( *info_ptr));

451 
PNGAPI


452 
	$≤g_d©a_‰ìr
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

453 
‰ìr
, 
≤g_uöt_32
 
mask
)

455 
	`≤g_debug
(1, "inÖng_data_freer");

457 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

460 i‡(
‰ìr
 =
PNG_DESTROY_WILL_FREE_DATA
)

461 
öfo_±r
->
‰ì_me
 |
mask
;

463 i‡(
‰ìr
 =
PNG_USER_WILL_FREE_DATA
)

464 
öfo_±r
->
‰ì_me
 &~
mask
;

467 
	`≤g_îr‹
(
≤g_±r
, "Unknown freerÖarameter inÖng_data_freer");

468 
	}
}

470 
PNGAPI


471 
	$≤g_‰ì_d©a
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
mask
,

472 
num
)

474 
	`≤g_debug
(1, "inÖng_free_data");

476 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

479 #ifde‡
PNG_TEXT_SUPPORTED


481 i‡(
öfo_±r
->
ãxt
 !
NULL
 &&

482 ((
mask
 & 
PNG_FREE_TEXT
Ë& 
öfo_±r
->
‰ì_me
) != 0)

484 i‡(
num
 != -1)

486 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
ãxt
[
num
].
key
);

487 
öfo_±r
->
ãxt
[
num
].
key
 = 
NULL
;

492 
i
;

494 
i
 = 0; i < 
öfo_±r
->
num_ãxt
; i++)

495 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
ãxt
[
i
].
key
);

497 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
ãxt
);

498 
öfo_±r
->
ãxt
 = 
NULL
;

499 
öfo_±r
->
num_ãxt
 = 0;

500 
öfo_±r
->
max_ãxt
 = 0;

505 #ifde‡
PNG_tRNS_SUPPORTED


507 i‡(((
mask
 & 
PNG_FREE_TRNS
Ë& 
öfo_±r
->
‰ì_me
) != 0)

509 
öfo_±r
->
vÆid
 &~
PNG_INFO_tRNS
;

510 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
å™s_Æpha
);

511 
öfo_±r
->
å™s_Æpha
 = 
NULL
;

512 
öfo_±r
->
num_å™s
 = 0;

516 #ifde‡
PNG_sCAL_SUPPORTED


518 i‡(((
mask
 & 
PNG_FREE_SCAL
Ë& 
öfo_±r
->
‰ì_me
) != 0)

520 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
sˇl_s_width
);

521 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
sˇl_s_height
);

522 
öfo_±r
->
sˇl_s_width
 = 
NULL
;

523 
öfo_±r
->
sˇl_s_height
 = 
NULL
;

524 
öfo_±r
->
vÆid
 &~
PNG_INFO_sCAL
;

528 #ifde‡
PNG_pCAL_SUPPORTED


530 i‡(((
mask
 & 
PNG_FREE_PCAL
Ë& 
öfo_±r
->
‰ì_me
) != 0)

532 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
pˇl_puΩo£
);

533 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
pˇl_unôs
);

534 
öfo_±r
->
pˇl_puΩo£
 = 
NULL
;

535 
öfo_±r
->
pˇl_unôs
 = 
NULL
;

537 i‡(
öfo_±r
->
pˇl_∑øms
 !
NULL
)

539 
i
;

541 
i
 = 0; i < 
öfo_±r
->
pˇl_≈¨ams
; i++)

542 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
pˇl_∑øms
[
i
]);

544 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
pˇl_∑øms
);

545 
öfo_±r
->
pˇl_∑øms
 = 
NULL
;

547 
öfo_±r
->
vÆid
 &~
PNG_INFO_pCAL
;

551 #ifde‡
PNG_iCCP_SUPPORTED


553 i‡(((
mask
 & 
PNG_FREE_ICCP
Ë& 
öfo_±r
->
‰ì_me
) != 0)

555 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
ic˝_«me
);

556 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
ic˝_¥ofûe
);

557 
öfo_±r
->
ic˝_«me
 = 
NULL
;

558 
öfo_±r
->
ic˝_¥ofûe
 = 
NULL
;

559 
öfo_±r
->
vÆid
 &~
PNG_INFO_iCCP
;

563 #ifde‡
PNG_sPLT_SUPPORTED


565 i‡(
öfo_±r
->
•…_∑Àâes
 !
NULL
 &&

566 ((
mask
 & 
PNG_FREE_SPLT
Ë& 
öfo_±r
->
‰ì_me
) != 0)

568 i‡(
num
 != -1)

570 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
•…_∑Àâes
[
num
].
«me
);

571 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
•…_∑Àâes
[
num
].
íåõs
);

572 
öfo_±r
->
•…_∑Àâes
[
num
].
«me
 = 
NULL
;

573 
öfo_±r
->
•…_∑Àâes
[
num
].
íåõs
 = 
NULL
;

578 
i
;

580 
i
 = 0; i < 
öfo_±r
->
•…_∑Àâes_num
; i++)

582 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
•…_∑Àâes
[
i
].
«me
);

583 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
•…_∑Àâes
[
i
].
íåõs
);

586 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
•…_∑Àâes
);

587 
öfo_±r
->
•…_∑Àâes
 = 
NULL
;

588 
öfo_±r
->
•…_∑Àâes_num
 = 0;

589 
öfo_±r
->
vÆid
 &~
PNG_INFO_sPLT
;

594 #ifde‡
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


595 i‡(
öfo_±r
->
unknown_chunks
 !
NULL
 &&

596 ((
mask
 & 
PNG_FREE_UNKN
Ë& 
öfo_±r
->
‰ì_me
) != 0)

598 i‡(
num
 != -1)

600 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
unknown_chunks
[
num
].
d©a
);

601 
öfo_±r
->
unknown_chunks
[
num
].
d©a
 = 
NULL
;

606 
i
;

608 
i
 = 0; i < 
öfo_±r
->
unknown_chunks_num
; i++)

609 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
unknown_chunks
[
i
].
d©a
);

611 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
unknown_chunks
);

612 
öfo_±r
->
unknown_chunks
 = 
NULL
;

613 
öfo_±r
->
unknown_chunks_num
 = 0;

618 #ifde‡
PNG_eXIf_SUPPORTED


620 i‡(((
mask
 & 
PNG_FREE_EXIF
Ë& 
öfo_±r
->
‰ì_me
) != 0)

622 #ifde‡
PNG_READ_eXIf_SUPPORTED


623 i‡(
öfo_±r
->
eXIf_buf
)

625 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
eXIf_buf
);

626 
öfo_±r
->
eXIf_buf
 = 
NULL
;

629 i‡(
öfo_±r
->
exif
)

631 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
exif
);

632 
öfo_±r
->
exif
 = 
NULL
;

634 
öfo_±r
->
vÆid
 &~
PNG_INFO_eXIf
;

638 #ifde‡
PNG_hIST_SUPPORTED


640 i‡(((
mask
 & 
PNG_FREE_HIST
Ë& 
öfo_±r
->
‰ì_me
) != 0)

642 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
hi°
);

643 
öfo_±r
->
hi°
 = 
NULL
;

644 
öfo_±r
->
vÆid
 &~
PNG_INFO_hIST
;

649 i‡(((
mask
 & 
PNG_FREE_PLTE
Ë& 
öfo_±r
->
‰ì_me
) != 0)

651 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
∑Àâe
);

652 
öfo_±r
->
∑Àâe
 = 
NULL
;

653 
öfo_±r
->
vÆid
 &~
PNG_INFO_PLTE
;

654 
öfo_±r
->
num_∑Àâe
 = 0;

657 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


659 i‡(((
mask
 & 
PNG_FREE_ROWS
Ë& 
öfo_±r
->
‰ì_me
) != 0)

661 i‡(
öfo_±r
->
row_poöãrs
 !
NULL
)

663 
≤g_uöt_32
 
row
;

664 
row
 = 0;Ñow < 
öfo_±r
->
height
;Ñow++)

665 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
row_poöãrs
[
row
]);

667 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
row_poöãrs
);

668 
öfo_±r
->
row_poöãrs
 = 
NULL
;

670 
öfo_±r
->
vÆid
 &~
PNG_INFO_IDAT
;

674 i‡(
num
 != -1)

675 
mask
 &~
PNG_FREE_MUL
;

677 
öfo_±r
->
‰ì_me
 &~
mask
;

678 
	}
}

685 
≤g_voidp
 
PNGAPI


686 
	$≤g_gë_io_±r
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

688 i‡(
≤g_±r
 =
NULL
)

689  (
NULL
);

691  (
≤g_±r
->
io_±r
);

692 
	}
}

694 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë|| deföed(
PNG_WRITE_SUPPORTED
)

695 #ifde‡
PNG_STDIO_SUPPORTED


702 
PNGAPI


703 
	$≤g_öô_io
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_FILE_p
 
Â
)

705 
	`≤g_debug
(1, "inÖng_init_io");

707 i‡(
≤g_±r
 =
NULL
)

710 
≤g_±r
->
io_±r
 = (
≤g_voidp
)
Â
;

711 
	}
}

714 #ifde‡
PNG_SAVE_INT_32_SUPPORTED


725 
PNGAPI


726 
	$≤g_ßve_öt_32
(
≤g_byãp
 
buf
, 
≤g_öt_32
 
i
)

728 
	`≤g_ßve_uöt_32
(
buf
, (
≤g_uöt_32
)
i
);

729 
	}
}

732 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


736 
PNGAPI


737 
	$≤g_c⁄vît_to_rfc1123_buf„r
(
out
[29], 
≤g_c⁄°_timï
 
±ime
)

739 c⁄° 
sh‹t_m⁄ths
[12][4] =

743 i‡(
out
 =
NULL
)

746 i‡(
±ime
->
yór
 > 9999 ||

747 
±ime
->
m⁄th
 == 0 ||Ötime->month > 12 ||

748 
±ime
->
day
 == 0 ||Ötime->day > 31 ||

749 
±ime
->
hour
 > 23 ||Ötime->
möuã
 > 59 ||

750 
±ime
->
£c⁄d
 > 60)

754 
size_t
 
pos
 = 0;

755 
numbî_buf
[5];

757 
	#APPEND_STRING
(
°rög
Ë
pos
 = 
	`≤g_ß„ˇt
(
out
, 29,Öos, (°rög))

	)

758 
	#APPEND_NUMBER
(
f‹m©
, 
vÆue
)\

759 
	`APPEND_STRING
(
	`PNG_FORMAT_NUMBER
(
numbî_buf
, 
f‹m©
, (
vÆue
)))

	)

760 
	#APPEND
(
ch
Ëi‡(
pos
 < 28Ë
out
[pos++] = (ch)

	)

762 
	`APPEND_NUMBER
(
PNG_NUMBER_FORMAT_u
, ()
±ime
->
day
);

763 
	`APPEND
(' ');

764 
	`APPEND_STRING
(
sh‹t_m⁄ths
[(
±ime
->
m⁄th
 - 1)]);

765 
	`APPEND
(' ');

766 
	`APPEND_NUMBER
(
PNG_NUMBER_FORMAT_u
, 
±ime
->
yór
);

767 
	`APPEND
(' ');

768 
	`APPEND_NUMBER
(
PNG_NUMBER_FORMAT_02u
, ()
±ime
->
hour
);

769 
	`APPEND
(':');

770 
	`APPEND_NUMBER
(
PNG_NUMBER_FORMAT_02u
, ()
±ime
->
möuã
);

771 
	`APPEND
(':');

772 
	`APPEND_NUMBER
(
PNG_NUMBER_FORMAT_02u
, ()
±ime
->
£c⁄d
);

773 
	`APPEND_STRING
(" +0000");

774 
	`PNG_UNUSED
 (
pos
)

776 #unde‡
APPEND


777 #unde‡
APPEND_NUMBER


778 #unde‡
APPEND_STRING


782 
	}
}

784 #i‡
PNG_LIBPNG_VER
 < 10700

790 
≤g_c⁄°_ch¨p
 
PNGAPI


791 
	$≤g_c⁄vît_to_rfc1123
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_timï
 
±ime
)

793 i‡(
≤g_±r
 !
NULL
)

796 i‡(
	`≤g_c⁄vît_to_rfc1123_buf„r
(
≤g_±r
->
time_buf„r
, 
±ime
) == 0)

797 
	`≤g_w¨nög
(
≤g_±r
, "Ignoring invalidÅime value");

800  
≤g_±r
->
time_buf„r
;

803  
NULL
;

804 
	}
}

810 
≤g_c⁄°_ch¨p
 
PNGAPI


811 
	$≤g_gë_c›yright
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

813 
	`PNG_UNUSED
(
≤g_±r
)

814 #ifde‡
PNG_STRING_COPYRIGHT


815  
PNG_STRING_COPYRIGHT


817  
PNG_STRING_NEWLINE
 \

818 "lib≤g vîsi⁄ 1.6.38.gô" 
PNG_STRING_NEWLINE
 \

819 "C›yrighà(cË2018-2020 Cosmö Truè" 
PNG_STRING_NEWLINE
 \

821 
PNG_STRING_NEWLINE
 \

822 "C›yrighà(cË1996-1997 Andªa†Dûgî" 
PNG_STRING_NEWLINE
 \

824 
PNG_STRING_NEWLINE
;

826 
	}
}

836 
≤g_c⁄°_ch¨p
 
PNGAPI


837 
	$≤g_gë_lib≤g_vî
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

840  
	`≤g_gë_hódî_vî
(
≤g_±r
);

841 
	}
}

843 
≤g_c⁄°_ch¨p
 
PNGAPI


844 
	$≤g_gë_hódî_vî
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

847 
	`PNG_UNUSED
(
≤g_±r
)

848  
PNG_LIBPNG_VER_STRING
;

849 
	}
}

851 
≤g_c⁄°_ch¨p
 
PNGAPI


852 
	$≤g_gë_hódî_vîsi⁄
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

855 
	`PNG_UNUSED
(
≤g_±r
)

856 #ifde‡
__STDC__


857  
PNG_HEADER_VERSION_STRING


858 #i‚de‡
PNG_READ_SUPPORTED


861 
PNG_STRING_NEWLINE
;

863  
PNG_HEADER_VERSION_STRING
;

865 
	}
}

867 #ifde‡
PNG_BUILD_GRAYSCALE_PALETTE_SUPPORTED


874 
PNGAPI


875 
	$≤g_buûd_gøysˇÀ_∑Àâe
(
bô_dïth
, 
≤g_cﬁ‹p
 
∑Àâe
)

877 
num_∑Àâe
;

878 
cﬁ‹_öc
;

879 
i
;

880 
v
;

882 
	`≤g_debug
(1, "inÖng_do_build_grayscale_palette");

884 i‡(
∑Àâe
 =
NULL
)

887 
bô_dïth
)

890 
num_∑Àâe
 = 2;

891 
cﬁ‹_öc
 = 0xff;

895 
num_∑Àâe
 = 4;

896 
cﬁ‹_öc
 = 0x55;

900 
num_∑Àâe
 = 16;

901 
cﬁ‹_öc
 = 0x11;

905 
num_∑Àâe
 = 256;

906 
cﬁ‹_öc
 = 1;

910 
num_∑Àâe
 = 0;

911 
cﬁ‹_öc
 = 0;

915 
i
 = 0, 
v
 = 0; i < 
num_∑Àâe
; i++, v +
cﬁ‹_öc
)

917 
∑Àâe
[
i
].
ªd
 = (
≤g_byã
)(
v
 & 0xff);

918 
∑Àâe
[
i
].
gªí
 = (
≤g_byã
)(
v
 & 0xff);

919 
∑Àâe
[
i
].
blue
 = (
≤g_byã
)(
v
 & 0xff);

921 
	}
}

924 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


925 
PNGAPI


926 
	$≤g_h™dÀ_as_unknown
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
chunk_«me
)

929 
≤g_c⁄°_byãp
 
p
, 
p_íd
;

931 i‡(
≤g_±r
 =
NULL
 || 
chunk_«me
 =NULL ||Öng_±r->
num_chunk_li°
 == 0)

932  
PNG_HANDLE_CHUNK_AS_DEFAULT
;

934 
p_íd
 = 
≤g_±r
->
chunk_li°
;

935 
p
 = 
p_íd
 + 
≤g_±r
->
num_chunk_li°
*5;

943 
p
 -= 5;

945 i‡(
	`memcmp
(
chunk_«me
, 
p
, 4) == 0)

946  
p
[4];

948 
p
 > 
p_íd
);

955  
PNG_HANDLE_CHUNK_AS_DEFAULT
;

956 
	}
}

958 #i‡
deföed
(
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
) ||\

959 
	$deföed
(
PNG_HANDLE_AS_UNKNOWN_SUPPORTED
)

961 
	$≤g_chunk_unknown_h™dlög
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
chunk_«me
)

963 
≤g_byã
 
chunk_°rög
[5];

965 
	`PNG_CSTRING_FROM_CHUNK
(
chunk_°rög
, 
chunk_«me
);

966  
	`≤g_h™dÀ_as_unknown
(
≤g_±r
, 
chunk_°rög
);

967 
	}
}

971 #ifde‡
PNG_READ_SUPPORTED


973 
PNGAPI


974 
	$≤g_ª£t_z°ªam
(
≤g_°ru˘Ω
 
≤g_±r
)

976 i‡(
≤g_±r
 =
NULL
)

977  
Z_STREAM_ERROR
;

980  (
	`öÊ©eRe£t
(&
≤g_±r
->
z°ªam
));

981 
	}
}

985 
≤g_uöt_32
 
PNGAPI


986 
	$≤g_ac˚ss_vîsi⁄_numbî
()

989 ((
≤g_uöt_32
)
PNG_LIBPNG_VER
);

990 
	}
}

992 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë|| deföed(
PNG_WRITE_SUPPORTED
)

998 
	$≤g_z°ªam_îr‹
(
≤g_°ru˘Ω
 
≤g_±r
, 
ªt
)

1004 i‡(
≤g_±r
->
z°ªam
.
msg
 =
NULL
Ë
ªt
)

1007 
Z_OK
:

1008 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("unexpected zlibÑeturn code");

1011 
Z_STREAM_END
:

1013 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("unexpectedÉnd of LZ stream");

1016 
Z_NEED_DICT
:

1020 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("missing LZ dictionary");

1023 
Z_ERRNO
:

1025 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("zlib IOÉrror");

1028 
Z_STREAM_ERROR
:

1030 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("badÖarametersÅo zlib");

1033 
Z_DATA_ERROR
:

1034 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("damaged LZ stream");

1037 
Z_MEM_ERROR
:

1038 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("insufficient memory");

1041 
Z_BUF_ERROR
:

1045 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("truncated");

1048 
Z_VERSION_ERROR
:

1049 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("unsupported zlib version");

1052 
PNG_UNEXPECTED_ZLIB_RETURN
:

1058 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("unexpected zlibÑeturn");

1061 
	}
}

1068 #ifde‡
PNG_GAMMA_SUPPORTED


1070 
	$≤g_cﬁ‹•a˚_check_gamma
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1071 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
≤g_fixed_poöt
 
gAMA
, 
‰om
)

1082 
≤g_fixed_poöt
 
gã°
;

1084 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_HAVE_GAMMA
) != 0 &&

1085 (
	`≤g_muldiv
(&
gã°
, 
cﬁ‹•a˚
->
gamma
, 
PNG_FP_1
, 
gAMA
) == 0 ||

1086 
	`≤g_gamma_signifiˇ¡
(
gã°
) != 0))

1094 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_FROM_sRGB
Ë!0 || 
‰om
 == 2)

1096 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "gamma value doesÇot match sRGB",

1097 
PNG_CHUNK_ERROR
);

1099  
‰om
 == 2;

1104 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "gamma value doesÇot matchÜibpngÉstimate",

1105 
PNG_CHUNK_WARNING
);

1106  
‰om
 == 1;

1111 
	}
}

1114 
	$≤g_cﬁ‹•a˚_£t_gamma
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1115 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
≤g_fixed_poöt
 
gAMA
)

1128 
≤g_c⁄°_ch¨p
 
îrmsg
;

1130 i‡(
gAMA
 < 16 || gAMA > 625000000)

1131 
îrmsg
 = "gamma value out ofÑange";

1133 #ifde‡
PNG_READ_gAMA_SUPPORTED


1135 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0 &&

1136 (
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_FROM_gAMA
) != 0)

1137 
îrmsg
 = "duplicate";

1141 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_INVALID
) != 0)

1146 i‡(
	`≤g_cﬁ‹•a˚_check_gamma
(
≤g_±r
, 
cﬁ‹•a˚
, 
gAMA
,

1150 
cﬁ‹•a˚
->
gamma
 = 
gAMA
;

1151 
cﬁ‹•a˚
->
Êags
 |=

1152 (
PNG_COLORSPACE_HAVE_GAMMA
 | 
PNG_COLORSPACE_FROM_gAMA
);

1164 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_INVALID
;

1165 
	`≤g_chunk_ªp‹t
(
≤g_±r
, 
îrmsg
, 
PNG_CHUNK_WRITE_ERROR
);

1166 
	}
}

1169 
	$≤g_cﬁ‹•a˚_sync_öfo
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

1171 i‡((
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_INVALID
) != 0)

1174 
öfo_±r
->
vÆid
 &~(
PNG_INFO_gAMA
|
PNG_INFO_cHRM
|
PNG_INFO_sRGB
|

1175 
PNG_INFO_iCCP
);

1177 #ifde‡
PNG_COLORSPACE_SUPPORTED


1179 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
, 
PNG_FREE_ICCP
, -1 );

1181 
	`PNG_UNUSED
(
≤g_±r
)

1187 #ifde‡
PNG_COLORSPACE_SUPPORTED


1192 i‡((
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_MATCHES_sRGB
) != 0)

1193 
öfo_±r
->
vÆid
 |
PNG_INFO_sRGB
;

1196 
öfo_±r
->
vÆid
 &~
PNG_INFO_sRGB
;

1198 i‡((
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_ENDPOINTS
) != 0)

1199 
öfo_±r
->
vÆid
 |
PNG_INFO_cHRM
;

1202 
öfo_±r
->
vÆid
 &~
PNG_INFO_cHRM
;

1205 i‡((
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_GAMMA
) != 0)

1206 
öfo_±r
->
vÆid
 |
PNG_INFO_gAMA
;

1209 
öfo_±r
->
vÆid
 &~
PNG_INFO_gAMA
;

1211 
	}
}

1213 #ifde‡
PNG_READ_SUPPORTED


1215 
	$≤g_cﬁ‹•a˚_sync
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

1217 i‡(
öfo_±r
 =
NULL
)

1220 
öfo_±r
->
cﬁ‹•a˚
 = 
≤g_±r
->colorspace;

1221 
	`≤g_cﬁ‹•a˚_sync_öfo
(
≤g_±r
, 
öfo_±r
);

1222 
	}
}

1226 #ifde‡
PNG_COLORSPACE_SUPPORTED


1233 
	$≤g_xy_‰om_XYZ
(
≤g_xy
 *
xy
, c⁄° 
≤g_XYZ
 *
XYZ
)

1235 
≤g_öt_32
 
d
, 
dwhôe
, 
whôeX
, 
whôeY
;

1237 
d
 = 
XYZ
->
ªd_X
 + XYZ->
ªd_Y
 + XYZ->
ªd_Z
;

1238 i‡(
	`≤g_muldiv
(&
xy
->
ªdx
, 
XYZ
->
ªd_X
, 
PNG_FP_1
, 
d
) == 0)

1240 i‡(
	`≤g_muldiv
(&
xy
->
ªdy
, 
XYZ
->
ªd_Y
, 
PNG_FP_1
, 
d
) == 0)

1242 
dwhôe
 = 
d
;

1243 
whôeX
 = 
XYZ
->
ªd_X
;

1244 
whôeY
 = 
XYZ
->
ªd_Y
;

1246 
d
 = 
XYZ
->
gªí_X
 + XYZ->
gªí_Y
 + XYZ->
gªí_Z
;

1247 i‡(
	`≤g_muldiv
(&
xy
->
gªíx
, 
XYZ
->
gªí_X
, 
PNG_FP_1
, 
d
) == 0)

1249 i‡(
	`≤g_muldiv
(&
xy
->
gªíy
, 
XYZ
->
gªí_Y
, 
PNG_FP_1
, 
d
) == 0)

1251 
dwhôe
 +
d
;

1252 
whôeX
 +
XYZ
->
gªí_X
;

1253 
whôeY
 +
XYZ
->
gªí_Y
;

1255 
d
 = 
XYZ
->
blue_X
 + XYZ->
blue_Y
 + XYZ->
blue_Z
;

1256 i‡(
	`≤g_muldiv
(&
xy
->
bluex
, 
XYZ
->
blue_X
, 
PNG_FP_1
, 
d
) == 0)

1258 i‡(
	`≤g_muldiv
(&
xy
->
bluey
, 
XYZ
->
blue_Y
, 
PNG_FP_1
, 
d
) == 0)

1260 
dwhôe
 +
d
;

1261 
whôeX
 +
XYZ
->
blue_X
;

1262 
whôeY
 +
XYZ
->
blue_Y
;

1267 i‡(
	`≤g_muldiv
(&
xy
->
whôex
, 
whôeX
, 
PNG_FP_1
, 
dwhôe
) == 0)

1269 i‡(
	`≤g_muldiv
(&
xy
->
whôey
, 
whôeY
, 
PNG_FP_1
, 
dwhôe
) == 0)

1273 
	}
}

1276 
	$≤g_XYZ_‰om_xy
(
≤g_XYZ
 *
XYZ
, c⁄° 
≤g_xy
 *
xy
)

1278 
≤g_fixed_poöt
 
ªd_övî£
, 
gªí_övî£
, 
blue_sˇÀ
;

1279 
≤g_fixed_poöt
 
À·
, 
right
, 
díomö©‹
;

1286 i‡(
xy
->
ªdx
 < 0 || xy->ªdx > 
PNG_FP_1
)  1;

1287 i‡(
xy
->
ªdy
 < 0 || xy->ªdy > 
PNG_FP_1
-xy->
ªdx
)  1;

1288 i‡(
xy
->
gªíx
 < 0 || xy->gªíx > 
PNG_FP_1
)  1;

1289 i‡(
xy
->
gªíy
 < 0 || xy->gªíy > 
PNG_FP_1
-xy->
gªíx
)  1;

1290 i‡(
xy
->
bluex
 < 0 || xy->bluex > 
PNG_FP_1
)  1;

1291 i‡(
xy
->
bluey
 < 0 || xy->bluey > 
PNG_FP_1
-xy->
bluex
)  1;

1292 i‡(
xy
->
whôex
 < 0 || xy->whôex > 
PNG_FP_1
)  1;

1293 i‡(
xy
->
whôey
 < 5 || xy->whôey > 
PNG_FP_1
-xy->
whôex
)  1;

1474 i‡(
	`≤g_muldiv
(&
À·
, 
xy
->
gªíx
-xy->
bluex
, xy->
ªdy
 - xy->
bluey
, 7) == 0)

1476 i‡(
	`≤g_muldiv
(&
right
, 
xy
->
gªíy
-xy->
bluey
, xy->
ªdx
 - xy->
bluex
, 7) == 0)

1478 
díomö©‹
 = 
À·
 - 
right
;

1481 i‡(
	`≤g_muldiv
(&
À·
, 
xy
->
gªíx
-xy->
bluex
, xy->
whôey
-xy->
bluey
, 7) == 0)

1483 i‡(
	`≤g_muldiv
(&
right
, 
xy
->
gªíy
-xy->
bluey
, xy->
whôex
-xy->
bluex
, 7) == 0)

1491 i‡(
	`≤g_muldiv
(&
ªd_övî£
, 
xy
->
whôey
, 
díomö©‹
, 
À·
-
right
) == 0 ||

1492 
ªd_övî£
 <
xy
->
whôey
 )

1496 i‡(
	`≤g_muldiv
(&
À·
, 
xy
->
ªdy
-xy->
bluey
, xy->
whôex
-xy->
bluex
, 7) == 0)

1498 i‡(
	`≤g_muldiv
(&
right
, 
xy
->
ªdx
-xy->
bluex
, xy->
whôey
-xy->
bluey
, 7) == 0)

1500 i‡(
	`≤g_muldiv
(&
gªí_övî£
, 
xy
->
whôey
, 
díomö©‹
, 
À·
-
right
) == 0 ||

1501 
gªí_övî£
 <
xy
->
whôey
)

1507 
blue_sˇÀ
 = 
	`≤g_ªcùroˇl
(
xy
->
whôey
Ë-Öng_ªcùroˇl(
ªd_övî£
) -

1508 
	`≤g_ªcùroˇl
(
gªí_övî£
);

1509 i‡(
blue_sˇÀ
 <= 0)

1514 i‡(
	`≤g_muldiv
(&
XYZ
->
ªd_X
, 
xy
->
ªdx
, 
PNG_FP_1
, 
ªd_övî£
) == 0)

1516 i‡(
	`≤g_muldiv
(&
XYZ
->
ªd_Y
, 
xy
->
ªdy
, 
PNG_FP_1
, 
ªd_övî£
) == 0)

1518 i‡(
	`≤g_muldiv
(&
XYZ
->
ªd_Z
, 
PNG_FP_1
 - 
xy
->
ªdx
 - xy->
ªdy
, PNG_FP_1,

1519 
ªd_övî£
) == 0)

1522 i‡(
	`≤g_muldiv
(&
XYZ
->
gªí_X
, 
xy
->
gªíx
, 
PNG_FP_1
, 
gªí_övî£
) == 0)

1524 i‡(
	`≤g_muldiv
(&
XYZ
->
gªí_Y
, 
xy
->
gªíy
, 
PNG_FP_1
, 
gªí_övî£
) == 0)

1526 i‡(
	`≤g_muldiv
(&
XYZ
->
gªí_Z
, 
PNG_FP_1
 - 
xy
->
gªíx
 - xy->
gªíy
, PNG_FP_1,

1527 
gªí_övî£
) == 0)

1530 i‡(
	`≤g_muldiv
(&
XYZ
->
blue_X
, 
xy
->
bluex
, 
blue_sˇÀ
, 
PNG_FP_1
) == 0)

1532 i‡(
	`≤g_muldiv
(&
XYZ
->
blue_Y
, 
xy
->
bluey
, 
blue_sˇÀ
, 
PNG_FP_1
) == 0)

1534 i‡(
	`≤g_muldiv
(&
XYZ
->
blue_Z
, 
PNG_FP_1
 - 
xy
->
bluex
 - xy->
bluey
, 
blue_sˇÀ
,

1535 
PNG_FP_1
) == 0)

1539 
	}
}

1542 
	$≤g_XYZ_n‹mÆize
(
≤g_XYZ
 *
XYZ
)

1544 
≤g_öt_32
 
Y
;

1546 i‡(
XYZ
->
ªd_Y
 < 0 || XYZ->
gªí_Y
 < 0 || XYZ->
blue_Y
 < 0 ||

1547 
XYZ
->
ªd_X
 < 0 || XYZ->
gªí_X
 < 0 || XYZ->
blue_X
 < 0 ||

1548 
XYZ
->
ªd_Z
 < 0 || XYZ->
gªí_Z
 < 0 || XYZ->
blue_Z
 < 0)

1556 
Y
 = 
XYZ
->
ªd_Y
;

1557 i‡(0x7ffffff‡- 
Y
 < 
XYZ
->
gªí_X
)

1559 
Y
 +
XYZ
->
gªí_Y
;

1560 i‡(0x7ffffff‡- 
Y
 < 
XYZ
->
blue_X
)

1562 
Y
 +
XYZ
->
blue_Y
;

1564 i‡(
Y
 !
PNG_FP_1
)

1566 i‡(
	`≤g_muldiv
(&
XYZ
->
ªd_X
, XYZ->ªd_X, 
PNG_FP_1
, 
Y
) == 0)

1568 i‡(
	`≤g_muldiv
(&
XYZ
->
ªd_Y
, XYZ->ªd_Y, 
PNG_FP_1
, 
Y
) == 0)

1570 i‡(
	`≤g_muldiv
(&
XYZ
->
ªd_Z
, XYZ->ªd_Z, 
PNG_FP_1
, 
Y
) == 0)

1573 i‡(
	`≤g_muldiv
(&
XYZ
->
gªí_X
, XYZ->gªí_X, 
PNG_FP_1
, 
Y
) == 0)

1575 i‡(
	`≤g_muldiv
(&
XYZ
->
gªí_Y
, XYZ->gªí_Y, 
PNG_FP_1
, 
Y
) == 0)

1577 i‡(
	`≤g_muldiv
(&
XYZ
->
gªí_Z
, XYZ->gªí_Z, 
PNG_FP_1
, 
Y
) == 0)

1580 i‡(
	`≤g_muldiv
(&
XYZ
->
blue_X
, XYZ->blue_X, 
PNG_FP_1
, 
Y
) == 0)

1582 i‡(
	`≤g_muldiv
(&
XYZ
->
blue_Y
, XYZ->blue_Y, 
PNG_FP_1
, 
Y
) == 0)

1584 i‡(
	`≤g_muldiv
(&
XYZ
->
blue_Z
, XYZ->blue_Z, 
PNG_FP_1
, 
Y
) == 0)

1589 
	}
}

1592 
	$≤g_cﬁ‹•a˚_ídpoöts_m©ch
(c⁄° 
≤g_xy
 *
xy1
, c⁄°Öng_xy *
xy2
, 
dñè
)

1595 i‡(
	`PNG_OUT_OF_RANGE
(
xy1
->
whôex
, 
xy2
->whôex,
dñè
) ||

1596 
	`PNG_OUT_OF_RANGE
(
xy1
->
whôey
, 
xy2
->whôey,
dñè
) ||

1597 
	`PNG_OUT_OF_RANGE
(
xy1
->
ªdx
, 
xy2
->ªdx, 
dñè
) ||

1598 
	`PNG_OUT_OF_RANGE
(
xy1
->
ªdy
, 
xy2
->ªdy, 
dñè
) ||

1599 
	`PNG_OUT_OF_RANGE
(
xy1
->
gªíx
, 
xy2
->gªíx,
dñè
) ||

1600 
	`PNG_OUT_OF_RANGE
(
xy1
->
gªíy
, 
xy2
->gªíy,
dñè
) ||

1601 
	`PNG_OUT_OF_RANGE
(
xy1
->
bluex
, 
xy2
->bluex, 
dñè
) ||

1602 
	`PNG_OUT_OF_RANGE
(
xy1
->
bluey
, 
xy2
->bluey, 
dñè
))

1605 
	}
}

1618 
	$≤g_cﬁ‹•a˚_check_xy
(
≤g_XYZ
 *
XYZ
, c⁄° 
≤g_xy
 *
xy
)

1620 
ªsu…
;

1621 
≤g_xy
 
xy_ã°
;

1624 
ªsu…
 = 
	`≤g_XYZ_‰om_xy
(
XYZ
, 
xy
);

1625 i‡(
ªsu…
 != 0)

1626  
ªsu…
;

1628 
ªsu…
 = 
	`≤g_xy_‰om_XYZ
(&
xy_ã°
, 
XYZ
);

1629 i‡(
ªsu…
 != 0)

1630  
ªsu…
;

1632 i‡(
	`≤g_cﬁ‹•a˚_ídpoöts_m©ch
(
xy
, &
xy_ã°
,

1638 
	}
}

1644 
	$≤g_cﬁ‹•a˚_check_XYZ
(
≤g_xy
 *
xy
, 
≤g_XYZ
 *
XYZ
)

1646 
ªsu…
;

1647 
≤g_XYZ
 
XYZãmp
;

1649 
ªsu…
 = 
	`≤g_XYZ_n‹mÆize
(
XYZ
);

1650 i‡(
ªsu…
 != 0)

1651  
ªsu…
;

1653 
ªsu…
 = 
	`≤g_xy_‰om_XYZ
(
xy
, 
XYZ
);

1654 i‡(
ªsu…
 != 0)

1655  
ªsu…
;

1657 
XYZãmp
 = *
XYZ
;

1658  
	`≤g_cﬁ‹•a˚_check_xy
(&
XYZãmp
, 
xy
);

1659 
	}
}

1662 c⁄° 
≤g_xy
 
	gsRGB_xy
 =

1672 
	$≤g_cﬁ‹•a˚_£t_xy_™d_XYZ
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1673 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, c⁄° 
≤g_xy
 *
xy
, c⁄° 
≤g_XYZ
 *
XYZ
,

1674 
¥e„ºed
)

1676 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_INVALID
) != 0)

1683 i‡(
¥e„ºed
 < 2 &&

1684 (
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_HAVE_ENDPOINTS
) != 0)

1689 i‡(
	`≤g_cﬁ‹•a˚_ídpoöts_m©ch
(
xy
, &
cﬁ‹•a˚
->
íd_poöts_xy
,

1692 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_INVALID
;

1693 
	`≤g_bíign_îr‹
(
≤g_±r
, "inconsistent chromaticities");

1698 i‡(
¥e„ºed
 == 0)

1702 
cﬁ‹•a˚
->
íd_poöts_xy
 = *
xy
;

1703 
cﬁ‹•a˚
->
íd_poöts_XYZ
 = *
XYZ
;

1704 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_HAVE_ENDPOINTS
;

1709 i‡(
	`≤g_cﬁ‹•a˚_ídpoöts_m©ch
(
xy
, &
sRGB_xy
, 1000) != 0)

1710 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB
;

1713 
cﬁ‹•a˚
->
Êags
 &
	`PNG_COLORSPACE_CANCEL
(

1714 
PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB
);

1717 
	}
}

1720 
	$≤g_cﬁ‹•a˚_£t_chrom©icôõs
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1721 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, c⁄° 
≤g_xy
 *
xy
, 
¥e„ºed
)

1729 
≤g_XYZ
 
XYZ
;

1731 
	`≤g_cﬁ‹•a˚_check_xy
(&
XYZ
, 
xy
))

1734  
	`≤g_cﬁ‹•a˚_£t_xy_™d_XYZ
(
≤g_±r
, 
cﬁ‹•a˚
, 
xy
, &
XYZ
,

1735 
¥e„ºed
);

1741 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_INVALID
;

1742 
	`≤g_bíign_îr‹
(
≤g_±r
, "invalid chromaticities");

1749 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_INVALID
;

1750 
	`≤g_îr‹
(
≤g_±r
, "internalÉrror checking chromaticities");

1754 
	}
}

1757 
	$≤g_cﬁ‹•a˚_£t_ídpoöts
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1758 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, c⁄° 
≤g_XYZ
 *
XYZ_ö
, 
¥e„ºed
)

1760 
≤g_XYZ
 
XYZ
 = *
XYZ_ö
;

1761 
≤g_xy
 
xy
;

1763 
	`≤g_cﬁ‹•a˚_check_XYZ
(&
xy
, &
XYZ
))

1766  
	`≤g_cﬁ‹•a˚_£t_xy_™d_XYZ
(
≤g_±r
, 
cﬁ‹•a˚
, &
xy
, &
XYZ
,

1767 
¥e„ºed
);

1771 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_INVALID
;

1772 
	`≤g_bíign_îr‹
(
≤g_±r
, "invalidÉndÖoints");

1776 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_INVALID
;

1777 
	`≤g_îr‹
(
≤g_±r
, "internalÉrror checking chromaticities");

1781 
	}
}

1783 #i‡
deföed
(
PNG_sRGB_SUPPORTED
Ë|| deföed(
PNG_iCCP_SUPPORTED
)

1786 
	$≤g_icc_èg_ch¨
(
≤g_uöt_32
 
byã
)

1788 
byã
 &= 0xff;

1789 i‡(
byã
 >= 32 && byte <= 126)

1790  ()
byã
;

1793 
	}
}

1796 
	$≤g_icc_èg_«me
(*
«me
, 
≤g_uöt_32
 
èg
)

1798 
«me
[0] = '\'';

1799 
«me
[1] = 
	`≤g_icc_èg_ch¨
(
èg
 >> 24);

1800 
«me
[2] = 
	`≤g_icc_èg_ch¨
(
èg
 >> 16);

1801 
«me
[3] = 
	`≤g_icc_èg_ch¨
(
èg
 >> 8);

1802 
«me
[4] = 
	`≤g_icc_èg_ch¨
(
èg
 );

1803 
«me
[5] = '\'';

1804 
	}
}

1807 
	$is_ICC_sig«tuª_ch¨
(
≤g_Æloc_size_t
 
ô
)

1809  
ô
 == 32 || (it >= 48 && it <= 57) || (it >= 65 && it <= 90) ||

1810 (
ô
 >= 97 && it <= 122);

1811 
	}
}

1814 
	$is_ICC_sig«tuª
(
≤g_Æloc_size_t
 
ô
)

1816  
	`is_ICC_sig«tuª_ch¨
(
ô
 >> 24) &&

1817 
	`is_ICC_sig«tuª_ch¨
((
ô
 >> 16) & 0xff) &&

1818 
	`is_ICC_sig«tuª_ch¨
((
ô
 >> 8) & 0xff) &&

1819 
	`is_ICC_sig«tuª_ch¨
(
ô
 & 0xff);

1820 
	}
}

1823 
	$≤g_icc_¥ofûe_îr‹
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
,

1824 
≤g_c⁄°_ch¨p
 
«me
, 
≤g_Æloc_size_t
 
vÆue
,Öng_c⁄°_ch¨∞
ªas⁄
)

1826 
size_t
 
pos
;

1827 
mesßge
[196];

1829 i‡(
cﬁ‹•a˚
 !
NULL
)

1830 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_INVALID
;

1832 
pos
 = 
	`≤g_ß„ˇt
(
mesßge
, ( message), 0, "profile '");

1833 
pos
 = 
	`≤g_ß„ˇt
(
mesßge
,Öos+79,Öos, 
«me
);

1834 
pos
 = 
	`≤g_ß„ˇt
(
mesßge
, ( message),Öos, "': ");

1835 i‡(
	`is_ICC_sig«tuª
(
vÆue
) != 0)

1838 
	`≤g_icc_èg_«me
(
mesßge
+
pos
, (
≤g_uöt_32
)
vÆue
);

1839 
pos
 += 6;

1840 
mesßge
[
pos
++] = ':';

1841 
mesßge
[
pos
++] = ' ';

1843 #ifde‡
PNG_WARNINGS_SUPPORTED


1846 
numbî
[
PNG_NUMBER_BUFFER_SIZE
];

1848 
pos
 = 
	`≤g_ß„ˇt
(
mesßge
, ( message),Öos,

1849 
	`≤g_f‹m©_numbî
(
numbî
,Çumber+(Çumber),

1850 
PNG_NUMBER_FORMAT_x
, 
vÆue
));

1851 
pos
 = 
	`≤g_ß„ˇt
(
mesßge
, ( message),Öos, "h: ");

1855 
pos
 = 
	`≤g_ß„ˇt
(
mesßge
, ( mesßge),Öos, 
ªas⁄
);

1856 
	`PNG_UNUSED
(
pos
)

1863 
	`≤g_chunk_ªp‹t
(
≤g_±r
, 
mesßge
,

1864 (
cﬁ‹•a˚
 !
NULL
Ë? 
PNG_CHUNK_ERROR
 : 
PNG_CHUNK_WRITE_ERROR
);

1867 
	}
}

1870 #ifde‡
PNG_sRGB_SUPPORTED


1872 
	$≤g_cﬁ‹•a˚_£t_sRGB
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
,

1873 
öã¡
)

1887 c⁄° 
≤g_XYZ
 
sRGB_XYZ
 =

1896 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_INVALID
) != 0)

1908 i‡(
öã¡
 < 0 || i¡íà>
PNG_sRGB_INTENT_LAST
)

1909  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, "sRGB",

1910 (
≤g_Æloc_size_t
)
öã¡
, "invalid sRGBÑendering intent");

1912 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_HAVE_INTENT
) != 0 &&

1913 
cﬁ‹•a˚
->
ªndîög_öã¡
 !
öã¡
)

1914  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, "sRGB",

1915 (
≤g_Æloc_size_t
)
öã¡
, "inconsistentÑendering intents");

1917 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_FROM_sRGB
) != 0)

1919 
	`≤g_bíign_îr‹
(
≤g_±r
, "duplicate sRGB information ignored");

1926 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_HAVE_ENDPOINTS
) != 0 &&

1927 !
	`≤g_cﬁ‹•a˚_ídpoöts_m©ch
(&
sRGB_xy
, &
cﬁ‹•a˚
->
íd_poöts_xy
,

1929 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "cHRM chunk doesÇot match sRGB",

1930 
PNG_CHUNK_ERROR
);

1935 ()
	`≤g_cﬁ‹•a˚_check_gamma
(
≤g_±r
, 
cﬁ‹•a˚
, 
PNG_GAMMA_sRGB_INVERSE
,

1939 
cﬁ‹•a˚
->
ªndîög_öã¡
 = (
≤g_uöt_16
)
öã¡
;

1940 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_HAVE_INTENT
;

1943 
cﬁ‹•a˚
->
íd_poöts_xy
 = 
sRGB_xy
;

1944 
cﬁ‹•a˚
->
íd_poöts_XYZ
 = 
sRGB_XYZ
;

1945 
cﬁ‹•a˚
->
Êags
 |=

1946 (
PNG_COLORSPACE_HAVE_ENDPOINTS
|
PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB
);

1949 
cﬁ‹•a˚
->
gamma
 = 
PNG_GAMMA_sRGB_INVERSE
;

1950 
cﬁ‹•a˚
->
Êags
 |
PNG_COLORSPACE_HAVE_GAMMA
;

1953 
cﬁ‹•a˚
->
Êags
 |=

1954 (
PNG_COLORSPACE_MATCHES_sRGB
|
PNG_COLORSPACE_FROM_sRGB
);

1957 
	}
}

1960 #ifde‡
PNG_iCCP_SUPPORTED


1966 c⁄° 
≤g_byã
 
	gD50_nCIEXYZ
[12] =

1970 
	$icc_check_Àngth
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
,

1971 
≤g_c⁄°_ch¨p
 
«me
, 
≤g_uöt_32
 
¥ofûe_Àngth
)

1973 i‡(
¥ofûe_Àngth
 < 132)

1974  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
,

1977 
	}
}

1979 #ifde‡
PNG_READ_iCCP_SUPPORTED


1981 
	$≤g_icc_check_Àngth
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
,

1982 
≤g_c⁄°_ch¨p
 
«me
, 
≤g_uöt_32
 
¥ofûe_Àngth
)

1984 i‡(!
	`icc_check_Àngth
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
))

1993 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


1994 i‡(
≤g_±r
->
u£r_chunk_mÆloc_max
 > 0 &&

1995 
≤g_±r
->
u£r_chunk_mÆloc_max
 < 
¥ofûe_Àngth
)

1996  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
,

1998 #ñi‡
PNG_USER_CHUNK_MALLOC_MAX
 > 0

1999 i‡(
PNG_USER_CHUNK_MALLOC_MAX
 < 
¥ofûe_Àngth
)

2000  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
,

2004 i‡(
PNG_SIZE_MAX
 < 
¥ofûe_Àngth
)

2005  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
,

2010 
	}
}

2014 
	$≤g_icc_check_hódî
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
,

2015 
≤g_c⁄°_ch¨p
 
«me
, 
≤g_uöt_32
 
¥ofûe_Àngth
,

2016 
≤g_c⁄°_byãp
 
¥ofûe
 , 
cﬁ‹_ty≥
)

2018 
≤g_uöt_32
 
ãmp
;

2025 
ãmp
 = 
	`≤g_gë_uöt_32
(
¥ofûe
);

2026 i‡(
ãmp
 !
¥ofûe_Àngth
)

2027  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2030 
ãmp
 = (
≤g_uöt_32
Ë(*(
¥ofûe
+8));

2031 i‡(
ãmp
 > 3 && (
¥ofûe_Àngth
 & 3))

2032  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
,

2035 
ãmp
 = 
	`≤g_gë_uöt_32
(
¥ofûe
+128);

2036 i‡(
ãmp
 > 357913930 ||

2037 
¥ofûe_Àngth
 < 132+12*
ãmp
)

2038  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2044 
ãmp
 = 
	`≤g_gë_uöt_32
(
¥ofûe
+64);

2045 i‡(
ãmp
 >= 0xffff)

2046  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2052 i‡(
ãmp
 >
PNG_sRGB_INTENT_LAST
)

2053 ()
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
NULL
, 
«me
, 
ãmp
,

2068 
ãmp
 = 
	`≤g_gë_uöt_32
(
¥ofûe
+36);

2069 i‡(
ãmp
 != 0x61637370)

2070  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2080 i‡(
	`memcmp
(
¥ofûe
+68, 
D50_nCIEXYZ
, 12) != 0)

2081 ()
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
NULL
, 
«me
, 0 ,

2104 
ãmp
 = 
	`≤g_gë_uöt_32
(
¥ofûe
+16);

2105 
ãmp
)

2108 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) == 0)

2109  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2114 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

2115  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2120  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2133 
ãmp
 = 
	`≤g_gë_uöt_32
(
¥ofûe
+12);

2134 
ãmp
)

2145  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2155  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2163 ()
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
NULL
, 
«me
, 
ãmp
,

2173 ()
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
NULL
, 
«me
, 
ãmp
,

2181 
ãmp
 = 
	`≤g_gë_uöt_32
(
¥ofûe
+20);

2182 
ãmp
)

2189  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
ãmp
,

2194 
	}
}

2197 
	$≤g_icc_check_èg_èbÀ
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
,

2198 
≤g_c⁄°_ch¨p
 
«me
, 
≤g_uöt_32
 
¥ofûe_Àngth
,

2199 
≤g_c⁄°_byãp
 
¥ofûe
 )

2201 
≤g_uöt_32
 
èg_cou¡
 = 
	`≤g_gë_uöt_32
(
¥ofûe
+128);

2202 
≤g_uöt_32
 
ôag
;

2203 
≤g_c⁄°_byãp
 
èg
 = 
¥ofûe
+132;

2208 
ôag
=0; ièg < 
èg_cou¡
; ++ôag, 
èg
 += 12)

2210 
≤g_uöt_32
 
èg_id
 = 
	`≤g_gë_uöt_32
(
èg
+0);

2211 
≤g_uöt_32
 
èg_°¨t
 = 
	`≤g_gë_uöt_32
(
èg
+4);

2212 
≤g_uöt_32
 
èg_Àngth
 = 
	`≤g_gë_uöt_32
(
èg
+8);

2224 i‡(
èg_°¨t
 > 
¥ofûe_Àngth
 || 
èg_Àngth
 >Örofile_length -Åag_start)

2225  
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
èg_id
,

2228 i‡((
èg_°¨t
 & 3) != 0)

2234 ()
	`≤g_icc_¥ofûe_îr‹
(
≤g_±r
, 
NULL
, 
«me
, 
èg_id
,

2240 
	}
}

2242 #ifde‡
PNG_sRGB_SUPPORTED


2243 #i‡
PNG_sRGB_PROFILE_CHECKS
 >= 0

2247 
≤g_uöt_32
 
	madÀr
, 
	m¸c
, 
	mÀngth
;

2248 
≤g_uöt_32
 
	mmd5
[4];

2249 
≤g_byã
 
	mhave_md5
;

2250 
≤g_byã
 
	mis_brokí
;

2251 
≤g_uöt_16
 
	möã¡
;

2253 
	#PNG_MD5
(
a
,
b
,
c
,
d
Ë{á, b, c, d }, (a!=0)||(b!=0)||(c!=0)||(d!=0)

	)

2254 
	#PNG_ICC_CHECKSUM
(
adÀr
, 
¸c
, 
md5
, 
öã¡
, 
broke
, 
d©e
, 
Àngth
, 
‚ame
)\

2255 { 
adÀr
, 
¸c
, 
Àngth
, 
md5
, 
broke
, 
öã¡
 },

	)

2257 } 
	g≤g_sRGB_checks
[] =

2263 
PNG_ICC_CHECKSUM
(0x0a3fd9f6, 0x3b8772b9,

2264 
PNG_MD5
(0x29f83dde, 0xaff255ae, 0x7842fae4, 0xca83390d), 0, 0,

2268 
PNG_ICC_CHECKSUM
(0x4909e5e1, 0x427ebb21,

2269 
PNG_MD5
(0xc95bd637, 0xe95d8a3b, 0x0df38f99, 0xc1320389), 1, 0,

2272 
PNG_ICC_CHECKSUM
(0xfd2144a1, 0x306fd8ae,

2273 
PNG_MD5
(0xfc663378, 0x37e2886b, 0xfd72e983, 0x8228f1b8), 0, 0,

2277 
PNG_ICC_CHECKSUM
(0x209c35d2, 0xbbef7812,

2278 
PNG_MD5
(0x34562abf, 0x994ccd06, 0x6d2c5721, 0xd0d68c5d), 0, 0,

2286 
PNG_ICC_CHECKSUM
(0xa054d762, 0x5d5129ce,

2287 
PNG_MD5
(0x00000000, 0x00000000, 0x00000000, 0x00000000), 1, 0,

2297 
PNG_ICC_CHECKSUM
(0xf784f3fb, 0x182ea552,

2298 
PNG_MD5
(0x00000000, 0x00000000, 0x00000000, 0x00000000), 0, 1 ,

2301 
PNG_ICC_CHECKSUM
(0x0398f3fc, 0xf29e526d,

2302 
PNG_MD5
(0x00000000, 0x00000000, 0x00000000, 0x00000000), 1, 1 ,

2307 
	$≤g_com∑ª_ICC_¥ofûe_wôh_sRGB
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2308 
≤g_c⁄°_byãp
 
¥ofûe
, 
uL⁄g
 
adÀr
)

2318 
≤g_uöt_32
 
Àngth
 = 0;

2319 
≤g_uöt_32
 
öã¡
 = 0x10000;

2320 #i‡
PNG_sRGB_PROFILE_CHECKS
 > 1

2321 
uL⁄g
 
¸c
 = 0;

2323 
i
;

2325 #ifde‡
PNG_SET_OPTION_SUPPORTED


2327 i‡(((
≤g_±r
->
›ti⁄s
 >> 
PNG_SKIP_sRGB_CHECK_PROFILE
) & 3) ==

2328 
PNG_OPTION_ON
)

2332 
i
=0; i < ( 
≤g_sRGB_checks
) / (Öng_sRGB_checks[0]); ++i)

2334 i‡(
	`≤g_gë_uöt_32
(
¥ofûe
+84Ë=
≤g_sRGB_checks
[
i
].
md5
[0] &&

2335 
	`≤g_gë_uöt_32
(
¥ofûe
+88Ë=
≤g_sRGB_checks
[
i
].
md5
[1] &&

2336 
	`≤g_gë_uöt_32
(
¥ofûe
+92Ë=
≤g_sRGB_checks
[
i
].
md5
[2] &&

2337 
	`≤g_gë_uöt_32
(
¥ofûe
+96Ë=
≤g_sRGB_checks
[
i
].
md5
[3])

2343 #i‡
PNG_sRGB_PROFILE_CHECKS
 == 0

2344 i‡(
≤g_sRGB_checks
[
i
].
have_md5
 != 0)

2345  1+
≤g_sRGB_checks
[
i
].
is_brokí
;

2349 i‡(
Àngth
 == 0)

2351 
Àngth
 = 
	`≤g_gë_uöt_32
(
¥ofûe
);

2352 
öã¡
 = 
	`≤g_gë_uöt_32
(
¥ofûe
+64);

2356 i‡(
Àngth
 =(
≤g_uöt_32
Ë
≤g_sRGB_checks
[
i
].length &&

2357 
öã¡
 =(
≤g_uöt_32
Ë
≤g_sRGB_checks
[
i
].intent)

2360 i‡(
adÀr
 == 0)

2362 
adÀr
 = 
	`adÀr32
(0, 
NULL
, 0);

2363 
adÀr
 = 
	`adÀr32
◊dÀr, 
¥ofûe
, 
Àngth
);

2366 i‡(
adÀr
 =
≤g_sRGB_checks
[
i
].adler)

2372 #i‡
PNG_sRGB_PROFILE_CHECKS
 > 1

2373 i‡(
¸c
 == 0)

2375 
¸c
 = 
	`¸c32
(0, 
NULL
, 0);

2376 
¸c
 = 
	`¸c32
(¸c, 
¥ofûe
, 
Àngth
);

2381 i‡(
¸c
 =
≤g_sRGB_checks
[
i
].crc)

2384 i‡(
≤g_sRGB_checks
[
i
].
is_brokí
 != 0)

2391 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "known incorrect sRGBÖrofile",

2392 
PNG_CHUNK_ERROR
);

2399 i‡(
≤g_sRGB_checks
[
i
].
have_md5
 == 0)

2401 
	`≤g_chunk_ªp‹t
(
≤g_±r
,

2403 
PNG_CHUNK_WARNING
);

2406  1+
≤g_sRGB_checks
[
i
].
is_brokí
;

2410 #i‡
PNG_sRGB_PROFILE_CHECKS
 > 0

2415 
	`≤g_chunk_ªp‹t
(
≤g_±r
,

2417 
PNG_CHUNK_WARNING
);

2425 
	}
}

2428 
	$≤g_icc_£t_sRGB
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2429 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
≤g_c⁄°_byãp
 
¥ofûe
, 
uL⁄g
 
adÀr
)

2434 i‡(
	`≤g_com∑ª_ICC_¥ofûe_wôh_sRGB
(
≤g_±r
, 
¥ofûe
, 
adÀr
) != 0)

2435 ()
	`≤g_cﬁ‹•a˚_£t_sRGB
(
≤g_±r
, 
cﬁ‹•a˚
,

2436 (Ë
	`≤g_gë_uöt_32
(
¥ofûe
+64));

2437 
	}
}

2442 
	$≤g_cﬁ‹•a˚_£t_ICC
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
,

2443 
≤g_c⁄°_ch¨p
 
«me
, 
≤g_uöt_32
 
¥ofûe_Àngth
, 
≤g_c⁄°_byãp
 
¥ofûe
,

2444 
cﬁ‹_ty≥
)

2446 i‡((
cﬁ‹•a˚
->
Êags
 & 
PNG_COLORSPACE_INVALID
) != 0)

2449 i‡(
	`icc_check_Àngth
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
) != 0 &&

2450 
	`≤g_icc_check_hódî
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
, 
¥ofûe
,

2451 
cﬁ‹_ty≥
) != 0 &&

2452 
	`≤g_icc_check_èg_èbÀ
(
≤g_±r
, 
cﬁ‹•a˚
, 
«me
, 
¥ofûe_Àngth
,

2453 
¥ofûe
) != 0)

2455 #i‡
	`deföed
(
PNG_sRGB_SUPPORTED
Ë&& 
PNG_sRGB_PROFILE_CHECKS
 >= 0

2457 
	`≤g_icc_£t_sRGB
(
≤g_±r
, 
cﬁ‹•a˚
, 
¥ofûe
, 0);

2464 
	}
}

2467 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


2469 
	$≤g_cﬁ‹•a˚_£t_rgb_c€fficõ¡s
(
≤g_°ru˘Ω
 
≤g_±r
)

2472 i‡(
≤g_±r
->
rgb_to_gøy_c€fficõ¡s_£t
 == 0 &&

2473 (
≤g_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_ENDPOINTS
) != 0)

2478 
≤g_fixed_poöt
 
r
 = 
≤g_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
ªd_Y
;

2479 
≤g_fixed_poöt
 
g
 = 
≤g_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
gªí_Y
;

2480 
≤g_fixed_poöt
 
b
 = 
≤g_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
blue_Y
;

2481 
≤g_fixed_poöt
 
tŸÆ
 = 
r
+
g
+
b
;

2483 i‡(
tŸÆ
 > 0 &&

2484 
r
 >0 && 
	`≤g_muldiv
(&r,Ñ, 32768, 
tŸÆ
) &&Ñ >= 0 &&Ñ <= 32768 &&

2485 
g
 >0 && 
	`≤g_muldiv
(&g, g, 32768, 
tŸÆ
) && g >= 0 && g <= 32768 &&

2486 
b
 >0 && 
	`≤g_muldiv
(&b, b, 32768, 
tŸÆ
) && b >= 0 && b <= 32768 &&

2487 
r
+
g
+
b
 <= 32769)

2494 
add
 = 0;

2496 i‡(
r
+
g
+
b
 > 32768)

2497 
add
 = -1;

2498 i‡(
r
+
g
+
b
 < 32768)

2499 
add
 = 1;

2501 i‡(
add
 != 0)

2503 i‡(
g
 >
r
 && g >
b
)

2504 
g
 +
add
;

2505 i‡(
r
 >
g
 &&Ñ >
b
)

2506 
r
 +
add
;

2508 
b
 +
add
;

2512 i‡(
r
+
g
+
b
 != 32768)

2513 
	`≤g_îr‹
(
≤g_±r
,

2518 
≤g_±r
->
rgb_to_gøy_ªd_c€ff
 = (
≤g_uöt_16
)
r
;

2519 
≤g_±r
->
rgb_to_gøy_gªí_c€ff
 = (
≤g_uöt_16
)
g
;

2528 
	`≤g_îr‹
(
≤g_±r
, "internalÉrror handling cHRM->XYZ");

2530 
	}
}

2535 #ifde‡
__GNUC__


2538 
	$≤g_gt
(
size_t
 
a
, size_à
b
)

2540  
a
 > 
b
;

2541 
	}
}

2543 
	#≤g_gt
(
a
,
b
Ë(◊Ë> (b))

	)

2547 
	$≤g_check_IHDR
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2548 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

2549 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
,

2550 
fûãr_ty≥
)

2552 
îr‹
 = 0;

2555 i‡(
width
 == 0)

2557 
	`≤g_w¨nög
(
≤g_±r
, "Image width is zero in IHDR");

2558 
îr‹
 = 1;

2561 i‡(
width
 > 
PNG_UINT_31_MAX
)

2563 
	`≤g_w¨nög
(
≤g_±r
, "Invalid image width in IHDR");

2564 
îr‹
 = 1;

2567 i‡(
	`≤g_gt
(((
width
 + 7) & (~7U)),

2568 ((
PNG_SIZE_MAX


2585 
	`≤g_w¨nög
(
≤g_±r
, "Image width isÅooÜarge forÅhisárchitecture");

2586 
îr‹
 = 1;

2589 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2590 i‡(
width
 > 
≤g_±r
->
u£r_width_max
)

2592 i‡(
width
 > 
PNG_USER_WIDTH_MAX
)

2595 
	`≤g_w¨nög
(
≤g_±r
, "Image widthÉxceeds userÜimit in IHDR");

2596 
îr‹
 = 1;

2599 i‡(
height
 == 0)

2601 
	`≤g_w¨nög
(
≤g_±r
, "Image height is zero in IHDR");

2602 
îr‹
 = 1;

2605 i‡(
height
 > 
PNG_UINT_31_MAX
)

2607 
	`≤g_w¨nög
(
≤g_±r
, "Invalid image height in IHDR");

2608 
îr‹
 = 1;

2611 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2612 i‡(
height
 > 
≤g_±r
->
u£r_height_max
)

2614 i‡(
height
 > 
PNG_USER_HEIGHT_MAX
)

2617 
	`≤g_w¨nög
(
≤g_±r
, "Image heightÉxceeds userÜimit in IHDR");

2618 
îr‹
 = 1;

2622 i‡(
bô_dïth
 != 1 && bit_depth != 2 && bit_depth != 4 &&

2623 
bô_dïth
 != 8 && bit_depth != 16)

2625 
	`≤g_w¨nög
(
≤g_±r
, "Invalid bit depth in IHDR");

2626 
îr‹
 = 1;

2629 i‡(
cﬁ‹_ty≥
 < 0 || color_type == 1 ||

2630 
cﬁ‹_ty≥
 == 5 || color_type > 6)

2632 
	`≤g_w¨nög
(
≤g_±r
, "Invalid colorÅype in IHDR");

2633 
îr‹
 = 1;

2636 i‡(((
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
Ë&& 
bô_dïth
 > 8) ||

2637 ((
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

2638 
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
 ||

2639 
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
Ë&& 
bô_dïth
 < 8))

2641 
	`≤g_w¨nög
(
≤g_±r
, "Invalid colorÅype/bit depth combination in IHDR");

2642 
îr‹
 = 1;

2645 i‡(
öãæa˚_ty≥
 >
PNG_INTERLACE_LAST
)

2647 
	`≤g_w¨nög
(
≤g_±r
, "Unknown interlace method in IHDR");

2648 
îr‹
 = 1;

2651 i‡(
com¥essi⁄_ty≥
 !
PNG_COMPRESSION_TYPE_BASE
)

2653 
	`≤g_w¨nög
(
≤g_±r
, "Unknown compression method in IHDR");

2654 
îr‹
 = 1;

2657 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


2667 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_PNG_SIGNATURE
) != 0 &&

2668 
≤g_±r
->
mng_„©uªs_≥rmôãd
 != 0)

2669 
	`≤g_w¨nög
(
≤g_±r
, "MNG featuresáreÇotállowed iná PNG datastream");

2671 i‡(
fûãr_ty≥
 !
PNG_FILTER_TYPE_BASE
)

2673 i‡(!((
≤g_±r
->
mng_„©uªs_≥rmôãd
 & 
PNG_FLAG_MNG_FILTER_64
) != 0 &&

2674 (
fûãr_ty≥
 =
PNG_INTRAPIXEL_DIFFERENCING
) &&

2675 ((
≤g_±r
->
mode
 & 
PNG_HAVE_PNG_SIGNATURE
) == 0) &&

2676 (
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

2677 
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)))

2679 
	`≤g_w¨nög
(
≤g_±r
, "Unknown filter method in IHDR");

2680 
îr‹
 = 1;

2683 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_PNG_SIGNATURE
) != 0)

2685 
	`≤g_w¨nög
(
≤g_±r
, "Invalid filter method in IHDR");

2686 
îr‹
 = 1;

2691 i‡(
fûãr_ty≥
 !
PNG_FILTER_TYPE_BASE
)

2693 
	`≤g_w¨nög
(
≤g_±r
, "Unknown filter method in IHDR");

2694 
îr‹
 = 1;

2698 i‡(
îr‹
 == 1)

2699 
	`≤g_îr‹
(
≤g_±r
, "Invalid IHDR data");

2700 
	}
}

2702 #i‡
deföed
(
PNG_sCAL_SUPPORTED
Ë|| deföed(
PNG_pCAL_SUPPORTED
)

2708 
	#≤g_Â_add
(
°©e
, 
Êags
Ë((°©eË|(Êags))

	)

2709 
	#≤g_Â_£t
(
°©e
, 
vÆue
Ë((°©eË(vÆueË| ((°©eË& 
PNG_FP_STICKY
))

	)

2712 
	$≤g_check_Â_numbî
(
≤g_c⁄°_ch¨p
 
°rög
, 
size_t
 
size
, *
°©ï
,

2713 
≤g_size_ç
 
whîómi
)

2715 
°©e
 = *
°©ï
;

2716 
size_t
 
i
 = *
whîómi
;

2718 
i
 < 
size
)

2720 
ty≥
;

2722 
°rög
[
i
])

2724 43: 
ty≥
 = 
PNG_FP_SAW_SIGN
; ;

2725 45: 
ty≥
 = 
PNG_FP_SAW_SIGN
 + 
PNG_FP_NEGATIVE
; ;

2726 46: 
ty≥
 = 
PNG_FP_SAW_DOT
; ;

2727 48: 
ty≥
 = 
PNG_FP_SAW_DIGIT
; ;

2730 57: 
ty≥
 = 
PNG_FP_SAW_DIGIT
 + 
PNG_FP_NONZERO
; ;

2732 101: 
ty≥
 = 
PNG_FP_SAW_E
; ;

2733 : 
PNG_FP_End
;

2740 (
°©e
 & 
PNG_FP_STATE
Ë+ (
ty≥
 & 
PNG_FP_SAW_ANY
))

2742 
PNG_FP_INTEGER
 + 
PNG_FP_SAW_SIGN
:

2743 i‡((
°©e
 & 
PNG_FP_SAW_ANY
) != 0)

2744 
PNG_FP_End
;

2746 
	`≤g_Â_add
(
°©e
, 
ty≥
);

2749 
PNG_FP_INTEGER
 + 
PNG_FP_SAW_DOT
:

2751 i‡((
°©e
 & 
PNG_FP_SAW_DOT
) != 0)

2752 
PNG_FP_End
;

2754 i‡((
°©e
 & 
PNG_FP_SAW_DIGIT
) != 0)

2755 
	`≤g_Â_add
(
°©e
, 
ty≥
);

2758 
	`≤g_Â_£t
(
°©e
, 
PNG_FP_FRACTION
 | 
ty≥
);

2762 
PNG_FP_INTEGER
 + 
PNG_FP_SAW_DIGIT
:

2763 i‡((
°©e
 & 
PNG_FP_SAW_DOT
) != 0)

2764 
	`≤g_Â_£t
(
°©e
, 
PNG_FP_FRACTION
 | 
PNG_FP_SAW_DOT
);

2766 
	`≤g_Â_add
(
°©e
, 
ty≥
 | 
PNG_FP_WAS_VALID
);

2770 
PNG_FP_INTEGER
 + 
PNG_FP_SAW_E
:

2771 i‡((
°©e
 & 
PNG_FP_SAW_DIGIT
) == 0)

2772 
PNG_FP_End
;

2774 
	`≤g_Â_£t
(
°©e
, 
PNG_FP_EXPONENT
);

2784 
PNG_FP_FRACTION
 + 
PNG_FP_SAW_DIGIT
:

2785 
	`≤g_Â_add
(
°©e
, 
ty≥
 | 
PNG_FP_WAS_VALID
);

2788 
PNG_FP_FRACTION
 + 
PNG_FP_SAW_E
:

2793 i‡((
°©e
 & 
PNG_FP_SAW_DIGIT
) == 0)

2794 
PNG_FP_End
;

2796 
	`≤g_Â_£t
(
°©e
, 
PNG_FP_EXPONENT
);

2800 
PNG_FP_EXPONENT
 + 
PNG_FP_SAW_SIGN
:

2801 i‡((
°©e
 & 
PNG_FP_SAW_ANY
) != 0)

2802 
PNG_FP_End
;

2804 
	`≤g_Â_add
(
°©e
, 
PNG_FP_SAW_SIGN
);

2811 
PNG_FP_EXPONENT
 + 
PNG_FP_SAW_DIGIT
:

2812 
	`≤g_Â_add
(
°©e
, 
PNG_FP_SAW_DIGIT
 | 
PNG_FP_WAS_VALID
);

2819 : 
PNG_FP_End
;

2823 ++
i
;

2826 
PNG_FP_End
:

2830 *
°©ï
 = 
°©e
;

2831 *
whîómi
 = 
i
;

2833  (
°©e
 & 
PNG_FP_SAW_DIGIT
) != 0;

2834 
	}
}

2839 
	$≤g_check_Â_°rög
(
≤g_c⁄°_ch¨p
 
°rög
, 
size_t
 
size
)

2841 
°©e
=0;

2842 
size_t
 
ch¨_ödex
=0;

2844 i‡(
	`≤g_check_Â_numbî
(
°rög
, 
size
, &
°©e
, &
ch¨_ödex
) != 0 &&

2845 (
ch¨_ödex
 =
size
 || 
°rög
[char_index] == 0))

2846  
°©e
 ;

2849 
	}
}

2852 #ifde‡
PNG_sCAL_SUPPORTED


2853 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


2858 
	$≤g_pow10
(
powî
)

2860 
ªcù
 = 0;

2861 
d
 = 1;

2866 i‡(
powî
 < 0)

2868 i‡(
powî
 < 
DBL_MIN_10_EXP
)  0;

2869 
ªcù
 = 1; 
powî
 = -power;

2872 i‡(
powî
 > 0)

2875 
mu…
 = 10;

2878 i‡(
powî
 & 1Ë
d
 *
mu…
;

2879 
mu…
 *= mult;

2880 
powî
 >>= 1;

2882 
powî
 > 0);

2884 i‡(
ªcù
 !0Ë
d
 = 1/d;

2888  
d
;

2889 
	}
}

2894 #i‡
GCC_STRICT_OVERFLOW


2895 #¥agm®
GCC
 
dügno°ic
 
push


2900 #¥agm®
GCC
 
dügno°ic
 
w¨nög
 "-Wstrict-overflow=2"

2903 
	$≤g_ascii_‰om_Â
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_ch¨p
 
ascii
, 
size_t
 
size
,

2904 
Â
, 
¥ecisi⁄
)

2911 i‡(
¥ecisi⁄
 < 1)

2912 
¥ecisi⁄
 = 
DBL_DIG
;

2915 i‡(
¥ecisi⁄
 > 
DBL_DIG
+1)

2916 
¥ecisi⁄
 = 
DBL_DIG
+1;

2919 i‡(
size
 >
¥ecisi⁄
+5)

2921 i‡(
Â
 < 0)

2923 
Â
 = -fp;

2924 *
ascii
++ = 45;

2925 --
size
;

2928 i‡(
Â
 >
DBL_MIN
 && f∞<
DBL_MAX
)

2930 
exp_b10
;

2931 
ba£
;

2942 ()
	`‰exp
(
Â
, &
exp_b10
);

2944 
exp_b10
 = (exp_b10 * 77) >> 8;

2947 
ba£
 = 
	`≤g_pow10
(
exp_b10
);

2949 
ba£
 < 
DBL_MIN
 || ba£ < 
Â
)

2952 
ã°
 = 
	`≤g_pow10
(
exp_b10
+1);

2954 i‡(
ã°
 <
DBL_MAX
)

2956 ++
exp_b10
; 
ba£
 = 
ã°
;

2970 
Â
 /
ba£
;

2971 
Â
 >= 1)

2973 
Â
 /10; ++
exp_b10
;

2983 
czîo
, 
˛ód
, 
cdigôs
;

2984 
exp⁄ít
[10];

2989 i‡(
exp_b10
 < 0 &&Éxp_b10 > -3)

2991 
czîo
 = 0U-
exp_b10
;

2992 
exp_b10
 = 0;

2995 
czîo
 = 0;

3000 
˛ód
 = 
czîo
;

3001 
cdigôs
 = 0;

3005 
d
;

3007 
Â
 *= 10;

3013 i‡(
cdigôs
+
czîo
+1 < 
¥ecisi⁄
+
˛ód
)

3014 
Â
 = 
	`modf
(Â, &
d
);

3018 
d
 = 
	`Êo‹
(
Â
 + .5);

3020 i‡(
d
 > 9)

3023 i‡(
czîo
 > 0)

3025 --
czîo
; 
d
 = 1;

3026 i‡(
cdigôs
 =0Ë--
˛ód
;

3030 
cdigôs
 > 0 && 
d
 > 9)

3032 
ch
 = *--
ascii
;

3034 i‡(
exp_b10
 != (-1))

3035 ++
exp_b10
;

3037 i‡(
ch
 == 46)

3039 
ch
 = *--
ascii
; ++
size
;

3044 
exp_b10
 = 1;

3047 --
cdigôs
;

3048 
d
 = 
ch
 - 47;

3055 i‡(
d
 > 9)

3057 i‡(
exp_b10
 == (-1))

3063 
ch
 = *--
ascii
;

3065 i‡(
ch
 == 46)

3067 ++
size
; 
exp_b10
 = 1;

3075 ++
exp_b10
;

3078 
d
 = 1;

3082 
Â
 = 0;

3085 i‡(
d
 == 0)

3087 ++
czîo
;

3088 i‡(
cdigôs
 =0Ë++
˛ód
;

3093 
cdigôs
 +
czîo
 - 
˛ód
;

3094 
˛ód
 = 0;

3096 
czîo
 > 0)

3102 i‡(
exp_b10
 != (-1))

3104 i‡(
exp_b10
 == 0)

3106 *
ascii
++ = 46; --
size
;

3109 --
exp_b10
;

3111 *
ascii
++ = 48; --
czîo
;

3114 i‡(
exp_b10
 != (-1))

3116 i‡(
exp_b10
 == 0)

3118 *
ascii
++ = 46; --
size
;

3121 --
exp_b10
;

3123 *
ascii
++ = ()(48 + ()
d
); ++
cdigôs
;

3126 
cdigôs
+
czîo
 < 
¥ecisi⁄
+
˛ód
 && 
Â
 > 
DBL_MIN
);

3137 i‡(
exp_b10
 >= (-1) &&Éxp_b10 <= 2)

3146 
exp_b10
-- > 0Ë*
ascii
++ = 48;

3148 *
ascii
 = 0;

3162 
size
 -
cdigôs
;

3164 *
ascii
++ = 69; --
size
;

3171 
uexp_b10
;

3173 i‡(
exp_b10
 < 0)

3175 *
ascii
++ = 45; --
size
;

3176 
uexp_b10
 = 0U-
exp_b10
;

3180 
uexp_b10
 = 0U+
exp_b10
;

3182 
cdigôs
 = 0;

3184 
uexp_b10
 > 0)

3186 
exp⁄ít
[
cdigôs
++] = ()(48 + 
uexp_b10
 % 10);

3187 
uexp_b10
 /= 10;

3194 i‡(
size
 > 
cdigôs
)

3196 
cdigôs
 > 0Ë*
ascii
++ = 
exp⁄ít
[--cdigits];

3198 *
ascii
 = 0;

3204 i‡(!(
Â
 >
DBL_MIN
))

3206 *
ascii
++ = 48;

3207 *
ascii
 = 0;

3212 *
ascii
++ = 105;

3213 *
ascii
++ = 110;

3214 *
ascii
++ = 102;

3215 *
ascii
 = 0;

3221 
	`≤g_îr‹
(
≤g_±r
, "ASCII conversion bufferÅoo small");

3222 
	}
}

3223 #i‡
GCC_STRICT_OVERFLOW


3224 #¥agm®
GCC
 
dügno°ic
 
p›


3229 #ifde‡
PNG_FIXED_POINT_SUPPORTED


3233 
	$≤g_ascii_‰om_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_ch¨p
 
ascii
,

3234 
size_t
 
size
, 
≤g_fixed_poöt
 
Â
)

3239 i‡(
size
 > 12)

3241 
≤g_uöt_32
 
num
;

3244 i‡(
Â
 < 0)

3246 *
ascii
++ = 45; 
num
 = (
≤g_uöt_32
)(-
Â
);

3249 
num
 = (
≤g_uöt_32
)
Â
;

3251 i‡(
num
 <= 0x80000000)

3253 
ndigôs
 = 0, 
fú°
 = 16 ;

3254 
digôs
[10];

3256 
num
)

3259 
tmp
 = 
num
/10;

3260 
num
 -
tmp
*10;

3261 
digôs
[
ndigôs
++] = ()(48 + 
num
);

3265 i‡(
fú°
 =16 && 
num
 > 0)

3266 
fú°
 = 
ndigôs
;

3267 
num
 = 
tmp
;

3270 i‡(
ndigôs
 > 0)

3272 
ndigôs
 > 5Ë*
ascii
++ = 
digôs
[--ndigits];

3277 i‡(
fú°
 <= 5)

3279 
i
;

3280 *
ascii
++ = 46;

3284 
i
 = 5;

3285 
ndigôs
 < 
i
)

3287 *
ascii
++ = 48; --
i
;

3289 
ndigôs
 >
fú°
Ë*
ascii
++ = 
digôs
[--ndigits];

3294 *
ascii
++ = 48;

3297 *
ascii
 = 0;

3303 
	`≤g_îr‹
(
≤g_±r
, "ASCII conversion bufferÅoo small");

3304 
	}
}

3308 #i‡
deföed
(
PNG_FLOATING_POINT_SUPPORTED
) && \

3309 !
deföed
(
PNG_FIXED_POINT_MACRO_SUPPORTED
) && \

3310 (
deföed
(
PNG_gAMA_SUPPORTED
Ë|| deföed(
PNG_cHRM_SUPPORTED
) || \

3311 
deföed
(
PNG_sCAL_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
) || \

3312 
deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)) || \

3313 (
deföed
(
PNG_sCAL_SUPPORTED
) && \

3314 
	$deföed
(
PNG_FLOATING_ARITHMETIC_SUPPORTED
))

3315 
≤g_fixed_poöt


3316 
	$≤g_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
Â
, 
≤g_c⁄°_ch¨p
 
ãxt
)

3318 
r
 = 
	`Êo‹
(100000 * 
Â
 + .5);

3320 i‡(
r
 > 2147483647. ||Ñ < -2147483648.)

3321 
	`≤g_fixed_îr‹
(
≤g_±r
, 
ãxt
);

3323 #i‚de‡
PNG_ERROR_TEXT_SUPPORTED


3324 
	`PNG_UNUSED
(
ãxt
)

3327  (
≤g_fixed_poöt
)
r
;

3328 
	}
}

3331 #i‡
deföed
(
PNG_GAMMA_SUPPORTED
Ë|| deföed(
PNG_COLORSPACE_SUPPORTED
) ||\

3332 
deföed
(
PNG_INCH_CONVERSIONS_SUPPORTED
Ë|| 
	$deföed
(
PNG_READ_pHYs_SUPPORTED
)

3339 #i‡
GCC_STRICT_OVERFLOW


3345 #¥agm®
GCC
 
dügno°ic
 
push


3346 #¥agm®
GCC
 
dügno°ic
 
w¨nög
 "-Wstrict-overflow=2"

3349 
	$≤g_muldiv
(
≤g_fixed_poöt_p
 
ªs
, 
≤g_fixed_poöt
 
a
, 
≤g_öt_32
 
times
,

3350 
≤g_öt_32
 
divis‹
)

3353 i‡(
divis‹
 != 0)

3355 i‡(
a
 =0 || 
times
 == 0)

3357 *
ªs
 = 0;

3362 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


3363 
r
 = 
a
;

3364 
r
 *
times
;

3365 
r
 /
divis‹
;

3366 
r
 = 
	`Êo‹
(r+.5);

3369 i‡(
r
 <= 2147483647. &&Ñ >= -2147483648.)

3371 *
ªs
 = (
≤g_fixed_poöt
)
r
;

3375 
√g©ive
 = 0;

3376 
≤g_uöt_32
 
A
, 
T
, 
D
;

3377 
≤g_uöt_32
 
s16
, 
s32
, 
s00
;

3379 i‡(
a
 < 0)

3380 
√g©ive
 = 1, 
A
 = -
a
;

3382 
A
 = 
a
;

3384 i‡(
times
 < 0)

3385 
√g©ive
 = !√g©ive, 
T
 = -
times
;

3387 
T
 = 
times
;

3389 i‡(
divis‹
 < 0)

3390 
√g©ive
 = !√g©ive, 
D
 = -
divis‹
;

3392 
D
 = 
divis‹
;

3397 
s16
 = (
A
 >> 16Ë* (
T
 & 0xffff) +

3398 (
A
 & 0xffffË* (
T
 >> 16);

3402 
s32
 = (
A
 >> 16Ë* (
T
 >> 16Ë+ (
s16
 >> 16);

3403 
s00
 = (
A
 & 0xffffË* (
T
 & 0xffff);

3405 
s16
 = (s16 & 0xffff) << 16;

3406 
s00
 +
s16
;

3408 i‡(
s00
 < 
s16
)

3409 ++
s32
;

3411 i‡(
s32
 < 
D
)

3417 
bôshi·
 = 32;

3418 
≤g_fixed_poöt
 
ªsu…
 = 0;

3420 --
bôshi·
 >= 0)

3422 
≤g_uöt_32
 
d32
, 
d00
;

3424 i‡(
bôshi·
 > 0)

3425 
d32
 = 
D
 >> (32-
bôshi·
), 
d00
 = D << bitshift;

3428 
d32
 = 0, 
d00
 = 
D
;

3430 i‡(
s32
 > 
d32
)

3432 i‡(
s00
 < 
d00
Ë--
s32
;

3433 
s32
 -
d32
, 
s00
 -
d00
, 
ªsu…
 +1<<
bôshi·
;

3437 i‡(
s32
 =
d32
 && 
s00
 >
d00
)

3438 
s32
 = 0, 
s00
 -
d00
, 
ªsu…
 +1<<
bôshi·
;

3442 i‡(
s00
 >(
D
 >> 1))

3443 ++
ªsu…
;

3445 i‡(
√g©ive
 != 0)

3446 
ªsu…
 = -result;

3449 i‡((
√g©ive
 !0 && 
ªsu…
 <= 0) ||

3450 (
√g©ive
 =0 && 
ªsu…
 >= 0))

3452 *
ªs
 = 
ªsu…
;

3461 
	}
}

3462 #i‡
GCC_STRICT_OVERFLOW


3463 #¥agm®
GCC
 
dügno°ic
 
p›


3467 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_INCH_CONVERSIONS_SUPPORTED
)

3471 
≤g_fixed_poöt


3472 
	$≤g_muldiv_w¨n
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_fixed_poöt
 
a
, 
≤g_öt_32
 
times
,

3473 
≤g_öt_32
 
divis‹
)

3475 
≤g_fixed_poöt
 
ªsu…
;

3477 i‡(
	`≤g_muldiv
(&
ªsu…
, 
a
, 
times
, 
divis‹
) != 0)

3478  
ªsu…
;

3480 
	`≤g_w¨nög
(
≤g_±r
, "fixedÖoint overflow ignored");

3482 
	}
}

3485 #ifde‡
PNG_GAMMA_SUPPORTED


3487 
≤g_fixed_poöt


3488 
	$≤g_ªcùroˇl
(
≤g_fixed_poöt
 
a
)

3490 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


3491 
r
 = 
	`Êo‹
(1E10/
a
+.5);

3493 i‡(
r
 <= 2147483647. &&Ñ >= -2147483648.)

3494  (
≤g_fixed_poöt
)
r
;

3496 
≤g_fixed_poöt
 
ªs
;

3498 i‡(
	`≤g_muldiv
(&
ªs
, 100000, 100000, 
a
) != 0)

3499  
ªs
;

3503 
	}
}

3509 
	$≤g_gamma_signifiˇ¡
(
≤g_fixed_poöt
 
gamma_vÆ
)

3511  
gamma_vÆ
 < 
PNG_FP_1
 - 
PNG_GAMMA_THRESHOLD_FIXED
 ||

3512 
gamma_vÆ
 > 
PNG_FP_1
 + 
PNG_GAMMA_THRESHOLD_FIXED
;

3513 
	}
}

3516 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3517 #ifde‡
PNG_16BIT_SUPPORTED


3519 
≤g_fixed_poöt


3520 
	$≤g_¥odu˘2
(
≤g_fixed_poöt
 
a
,Öng_fixed_poöà
b
)

3523 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


3524 
r
 = 
a
 * 1E-5;

3525 
r
 *
b
;

3526 
r
 = 
	`Êo‹
(r+.5);

3528 i‡(
r
 <= 2147483647. &&Ñ >= -2147483648.)

3529  (
≤g_fixed_poöt
)
r
;

3531 
≤g_fixed_poöt
 
ªs
;

3533 i‡(
	`≤g_muldiv
(&
ªs
, 
a
, 
b
, 100000) != 0)

3534  
ªs
;

3538 
	}
}

3542 
≤g_fixed_poöt


3543 
	$≤g_ªcùroˇl2
(
≤g_fixed_poöt
 
a
,Öng_fixed_poöà
b
)

3546 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


3547 i‡(
a
 !0 && 
b
 != 0)

3549 
r
 = 1E15/
a
;

3550 
r
 /
b
;

3551 
r
 = 
	`Êo‹
(r+.5);

3553 i‡(
r
 <= 2147483647. &&Ñ >= -2147483648.)

3554  (
≤g_fixed_poöt
)
r
;

3562 
≤g_fixed_poöt
 
ªs
 = 
	`≤g_¥odu˘2
(
a
, 
b
);

3564 i‡(
ªs
 != 0)

3565  
	`≤g_ªcùroˇl
(
ªs
);

3569 
	}
}

3572 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3573 #i‚de‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


3591 c⁄° 
≤g_uöt_32


3592 
	g≤g_8bô_l2
[128] =

3638 
≤g_öt_32


3639 
	$≤g_log8bô
(
x
)

3641 
lg2
 = 0;

3648 i‡((
x
 &= 0xff) == 0)

3651 i‡((
x
 & 0xf0) == 0)

3652 
lg2
 = 4, 
x
 <<= 4;

3654 i‡((
x
 & 0xc0) == 0)

3655 
lg2
 +2, 
x
 <<= 2;

3657 i‡((
x
 & 0x80) == 0)

3658 
lg2
 +1, 
x
 <<= 1;

3661  (
≤g_öt_32
)((
lg2
 << 16Ë+ ((
≤g_8bô_l2
[
x
-128]+32768)>>16));

3662 
	}
}

3694 #ifde‡
PNG_16BIT_SUPPORTED


3695 
≤g_öt_32


3696 
	$≤g_log16bô
(
≤g_uöt_32
 
x
)

3698 
lg2
 = 0;

3701 i‡((
x
 &= 0xffff) == 0)

3704 i‡((
x
 & 0xff00) == 0)

3705 
lg2
 = 8, 
x
 <<= 8;

3707 i‡((
x
 & 0xf000) == 0)

3708 
lg2
 +4, 
x
 <<= 4;

3710 i‡((
x
 & 0xc000) == 0)

3711 
lg2
 +2, 
x
 <<= 2;

3713 i‡((
x
 & 0x8000) == 0)

3714 
lg2
 +1, 
x
 <<= 1;

3719 
lg2
 <<= 28;

3720 
lg2
 +(
≤g_8bô_l2
[(
x
>>8)-128]+8) >> 4;

3725 
x
 = ((x << 16) + (x >> 9)) / (x >> 8);

3734 
x
 -= 1U << 24;

3736 i‡(
x
 <= 65536U)

3737 
lg2
 +((23591U * (65536U-
x
)) + (1U << (16+6-12-1))) >> (16+6-12);

3740 
lg2
 -((23499U * (
x
-65536U)) + (1U << (16+6-12-1))) >> (16+6-12);

3743  (
≤g_öt_32
)((
lg2
 + 2048) >> 12);

3744 
	}
}

3761 c⁄° 
≤g_uöt_32


3762 
	g≤g_32bô_exp
[16] =

3772 
	gi
=11;i>=0;--i){ 
¥öt
 i, " ", (1 - 
e
(-(2^
i
)/65536*
l
(2))) * 2^(32-i), "\n"}

3787 
≤g_uöt_32


3788 
	$≤g_exp
(
≤g_fixed_poöt
 
x
)

3790 i‡(
x
 > 0 && x <= 0xfffff)

3793 
≤g_uöt_32
 
e
 = 
≤g_32bô_exp
[(
x
 >> 12) & 0x0f];

3801 i‡(
x
 & 0x800)

3802 
e
 -= (((e >> 16) * 44938U) + 16U) >> 5;

3804 i‡(
x
 & 0x400)

3805 
e
 -= (((e >> 16) * 45181U) + 32U) >> 6;

3807 i‡(
x
 & 0x200)

3808 
e
 -= (((e >> 16) * 45303U) + 64U) >> 7;

3810 i‡(
x
 & 0x100)

3811 
e
 -= (((e >> 16) * 45365U) + 128U) >> 8;

3813 i‡(
x
 & 0x080)

3814 
e
 -= (((e >> 16) * 45395U) + 256U) >> 9;

3816 i‡(
x
 & 0x040)

3817 
e
 -= (((e >> 16) * 45410U) + 512U) >> 10;

3820 
e
 -((” >> 16Ë* 355U * (
x
 & 0x3fU)) + 256U) >> 9;

3823 
e
 >>
x
 >> 16;

3824  
e
;

3828 i‡(
x
 <= 0)

3829  
≤g_32bô_exp
[0];

3833 
	}
}

3835 
≤g_byã


3836 
	$≤g_exp8bô
(
≤g_fixed_poöt
 
lg2
)

3839 
≤g_uöt_32
 
x
 = 
	`≤g_exp
(
lg2
);

3845 
x
 -= x >> 8;

3846  (
≤g_byã
)(((
x
 + 0x7fffffU) >> 24) & 0xff);

3847 
	}
}

3849 #ifde‡
PNG_16BIT_SUPPORTED


3850 
≤g_uöt_16


3851 
	$≤g_exp16bô
(
≤g_fixed_poöt
 
lg2
)

3854 
≤g_uöt_32
 
x
 = 
	`≤g_exp
(
lg2
);

3857 
x
 -= x >> 16;

3858  (
≤g_uöt_16
)((
x
 + 32767U) >> 16);

3859 
	}
}

3863 
≤g_byã


3864 
	$≤g_gamma_8bô_c‹ª˘
(
vÆue
, 
≤g_fixed_poöt
 
gamma_vÆ
)

3866 i‡(
vÆue
 > 0 && value < 255)

3868 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


3893 
r
 = 
	`Êo‹
(255*
	`pow
((Ë
vÆue
/255.,
gamma_vÆ
*.00001)+.5);

3894  (
≤g_byã
)
r
;

3896 
≤g_öt_32
 
lg2
 = 
	`≤g_log8bô
(
vÆue
);

3897 
≤g_fixed_poöt
 
ªs
;

3899 i‡(
	`≤g_muldiv
(&
ªs
, 
gamma_vÆ
, 
lg2
, 
PNG_FP_1
) != 0)

3900  
	`≤g_exp8bô
(
ªs
);

3903 
vÆue
 = 0;

3907  (
≤g_byã
)(
vÆue
 & 0xff);

3908 
	}
}

3910 #ifde‡
PNG_16BIT_SUPPORTED


3911 
≤g_uöt_16


3912 
	$≤g_gamma_16bô_c‹ª˘
(
vÆue
, 
≤g_fixed_poöt
 
gamma_vÆ
)

3914 i‡(
vÆue
 > 0 && value < 65535)

3916 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


3922 
r
 = 
	`Êo‹
(65535*
	`pow
((
≤g_öt_32
)
vÆue
/65535.,

3923 
gamma_vÆ
*.00001)+.5);

3924  (
≤g_uöt_16
)
r
;

3926 
≤g_öt_32
 
lg2
 = 
	`≤g_log16bô
(
vÆue
);

3927 
≤g_fixed_poöt
 
ªs
;

3929 i‡(
	`≤g_muldiv
(&
ªs
, 
gamma_vÆ
, 
lg2
, 
PNG_FP_1
) != 0)

3930  
	`≤g_exp16bô
(
ªs
);

3933 
vÆue
 = 0;

3937  (
≤g_uöt_16
)
vÆue
;

3938 
	}
}

3946 
≤g_uöt_16


3947 
	$≤g_gamma_c‹ª˘
(
≤g_°ru˘Ω
 
≤g_±r
, 
vÆue
,

3948 
≤g_fixed_poöt
 
gamma_vÆ
)

3950 i‡(
≤g_±r
->
bô_dïth
 == 8)

3951  
	`≤g_gamma_8bô_c‹ª˘
(
vÆue
, 
gamma_vÆ
);

3953 #ifde‡
PNG_16BIT_SUPPORTED


3955  
	`≤g_gamma_16bô_c‹ª˘
(
vÆue
, 
gamma_vÆ
);

3960 
	}
}

3962 #ifde‡
PNG_16BIT_SUPPORTED


3972 
	$≤g_buûd_16bô_èbÀ
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_16µ
 *
±abÀ
,

3973 
shi·
, 
≤g_fixed_poöt
 
gamma_vÆ
)

3976 
num
 = 1U << (8U - 
shi·
);

3977 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


3981 
fmax
 = 1.0 / (((
≤g_öt_32
)1 << (16U - 
shi·
)) - 1);

3983 
max
 = (1U << (16U - 
shi·
)) - 1U;

3984 
max_by_2
 = 1U << (15U - 
shi·
);

3985 
i
;

3987 
≤g_uöt_16µ
 
èbÀ
 = *
±abÀ
 =

3988 (
≤g_uöt_16µ
)
	`≤g_ˇŒoc
(
≤g_±r
, 
num
 * ( (
≤g_uöt_16p
)));

3990 
i
 = 0; i < 
num
; i++)

3992 
≤g_uöt_16p
 
sub_èbÀ
 = 
èbÀ
[
i
] =

3993 (
≤g_uöt_16p
)
	`≤g_mÆloc
(
≤g_±r
, 256 * ( (
≤g_uöt_16
)));

3998 i‡(
	`≤g_gamma_signifiˇ¡
(
gamma_vÆ
) != 0)

4008 
j
;

4009 
j
 = 0; j < 256; j++)

4011 
≤g_uöt_32
 
ig
 = (
j
 << (8-
shi·
)Ë+ 
i
;

4012 #ifde‡
PNG_FLOATING_ARITHMETIC_SUPPORTED


4017 
d
 = 
	`Êo‹
(65535.*
	`pow
(
ig
*
fmax
, 
gamma_vÆ
*.00001)+.5);

4018 
sub_èbÀ
[
j
] = (
≤g_uöt_16
)
d
;

4020 i‡(
shi·
 != 0)

4021 
ig
 = (ig * 65535U + 
max_by_2
)/
max
;

4023 
sub_èbÀ
[
j
] = 
	`≤g_gamma_16bô_c‹ª˘
(
ig
, 
gamma_vÆ
);

4030 
j
;

4032 
j
 = 0; j < 256; j++)

4034 
≤g_uöt_32
 
ig
 = (
j
 << (8-
shi·
)Ë+ 
i
;

4036 i‡(
shi·
 != 0)

4037 
ig
 = (ig * 65535U + 
max_by_2
)/
max
;

4039 
sub_èbÀ
[
j
] = (
≤g_uöt_16
)
ig
;

4043 
	}
}

4049 
	$≤g_buûd_16to8_èbÀ
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_16µ
 *
±abÀ
,

4050 
shi·
, 
≤g_fixed_poöt
 
gamma_vÆ
)

4052 
num
 = 1U << (8U - 
shi·
);

4053 
max
 = (1U << (16U - 
shi·
))-1U;

4054 
i
;

4055 
≤g_uöt_32
 
œ°
;

4057 
≤g_uöt_16µ
 
èbÀ
 = *
±abÀ
 =

4058 (
≤g_uöt_16µ
)
	`≤g_ˇŒoc
(
≤g_±r
, 
num
 * ( (
≤g_uöt_16p
)));

4064 
i
 = 0; i < 
num
; i++)

4065 
èbÀ
[
i
] = (
≤g_uöt_16p
)
	`≤g_mÆloc
(
≤g_±r
,

4066 256 * ( (
≤g_uöt_16
)));

4084 
œ°
 = 0;

4085 
i
 = 0; i < 255; ++i)

4088 
≤g_uöt_16
 
out
 = (≤g_uöt_16)(
i
 * 257U);

4091 
≤g_uöt_32
 
bound
 = 
	`≤g_gamma_16bô_c‹ª˘
(
out
+128U, 
gamma_vÆ
);

4094 
bound
 = (bound * 
max
 + 32768U)/65535U + 1U;

4096 
œ°
 < 
bound
)

4098 
èbÀ
[
œ°
 & (0xffU >> 
shi·
)][œ° >> (8U - shi·)] = 
out
;

4099 
œ°
++;

4104 
œ°
 < (
num
 << 8))

4106 
èbÀ
[
œ°
 & (0xf‡>> 
shi·
)][last >> (8U - shift)] = 65535U;

4107 
œ°
++;

4109 
	}
}

4117 
	$≤g_buûd_8bô_èbÀ
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
±abÀ
,

4118 
≤g_fixed_poöt
 
gamma_vÆ
)

4120 
i
;

4121 
≤g_byãp
 
èbÀ
 = *
±abÀ
 = (≤g_byãp)
	`≤g_mÆloc
(
≤g_±r
, 256);

4123 i‡(
	`≤g_gamma_signifiˇ¡
(
gamma_vÆ
) != 0)

4124 
i
=0; i<256; i++)

4125 
èbÀ
[
i
] = 
	`≤g_gamma_8bô_c‹ª˘
(i, 
gamma_vÆ
);

4128 
i
=0; i<256; ++i)

4129 
èbÀ
[
i
] = (
≤g_byã
)(i & 0xff);

4130 
	}
}

4136 
	$≤g_de°roy_gamma_èbÀ
(
≤g_°ru˘Ω
 
≤g_±r
)

4138 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_èbÀ
);

4139 
≤g_±r
->
gamma_èbÀ
 = 
NULL
;

4141 #ifde‡
PNG_16BIT_SUPPORTED


4142 i‡(
≤g_±r
->
gamma_16_èbÀ
 !
NULL
)

4144 
i
;

4145 
i°›
 = (1 << (8 - 
≤g_±r
->
gamma_shi·
));

4146 
i
 = 0; i < 
i°›
; i++)

4148 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_16_èbÀ
[
i
]);

4150 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_16_èbÀ
);

4151 
≤g_±r
->
gamma_16_èbÀ
 = 
NULL
;

4155 #i‡
	`deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) || \

4156 
	`deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
) || \

4157 
	`deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

4158 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_‰om_1
);

4159 
≤g_±r
->
gamma_‰om_1
 = 
NULL
;

4160 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_to_1
);

4161 
≤g_±r
->
gamma_to_1
 = 
NULL
;

4163 #ifde‡
PNG_16BIT_SUPPORTED


4164 i‡(
≤g_±r
->
gamma_16_‰om_1
 !
NULL
)

4166 
i
;

4167 
i°›
 = (1 << (8 - 
≤g_±r
->
gamma_shi·
));

4168 
i
 = 0; i < 
i°›
; i++)

4170 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_16_‰om_1
[
i
]);

4172 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_16_‰om_1
);

4173 
≤g_±r
->
gamma_16_‰om_1
 = 
NULL
;

4175 i‡(
≤g_±r
->
gamma_16_to_1
 !
NULL
)

4177 
i
;

4178 
i°›
 = (1 << (8 - 
≤g_±r
->
gamma_shi·
));

4179 
i
 = 0; i < 
i°›
; i++)

4181 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_16_to_1
[
i
]);

4183 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
gamma_16_to_1
);

4184 
≤g_±r
->
gamma_16_to_1
 = 
NULL
;

4188 
	}
}

4196 
	$≤g_buûd_gamma_èbÀ
(
≤g_°ru˘Ω
 
≤g_±r
, 
bô_dïth
)

4198 
	`≤g_debug
(1, "inÖng_build_gamma_table");

4206 i‡(
≤g_±r
->
gamma_èbÀ
 !
NULL
 ||Öng_±r->
gamma_16_èbÀ
 != NULL)

4208 
	`≤g_w¨nög
(
≤g_±r
, "gammaÅable beingÑebuilt");

4209 
	`≤g_de°roy_gamma_èbÀ
(
≤g_±r
);

4212 i‡(
bô_dïth
 <= 8)

4214 
	`≤g_buûd_8bô_èbÀ
(
≤g_±r
, &≤g_±r->
gamma_èbÀ
,

4215 
≤g_±r
->
s¸ìn_gamma
 > 0 ?

4216 
	`≤g_ªcùroˇl2
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
,

4217 
≤g_±r
->
s¸ìn_gamma
Ë: 
PNG_FP_1
);

4219 #i‡
	`deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) || \

4220 
	`deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
) || \

4221 
	`deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

4222 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & (
PNG_COMPOSE
 | 
PNG_RGB_TO_GRAY
)) != 0)

4224 
	`≤g_buûd_8bô_èbÀ
(
≤g_±r
, &≤g_±r->
gamma_to_1
,

4225 
	`≤g_ªcùroˇl
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
));

4227 
	`≤g_buûd_8bô_èbÀ
(
≤g_±r
, &≤g_±r->
gamma_‰om_1
,

4228 
≤g_±r
->
s¸ìn_gamma
 > 0 ?

4229 
	`≤g_ªcùroˇl
(
≤g_±r
->
s¸ìn_gamma
) :

4230 
≤g_±r
->
cﬁ‹•a˚
.
gamma
 );

4234 #ifde‡
PNG_16BIT_SUPPORTED


4237 
≤g_byã
 
shi·
, 
sig_bô
;

4239 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

4241 
sig_bô
 = 
≤g_±r
->sig_bô.
ªd
;

4243 i‡(
≤g_±r
->
sig_bô
.
gªí
 > sig_bit)

4244 
sig_bô
 = 
≤g_±r
->sig_bô.
gªí
;

4246 i‡(
≤g_±r
->
sig_bô
.
blue
 > sig_bit)

4247 
sig_bô
 = 
≤g_±r
->sig_bô.
blue
;

4250 
sig_bô
 = 
≤g_±r
->sig_bô.
gøy
;

4270 i‡(
sig_bô
 > 0 && sig_bit < 16U)

4272 
shi·
 = (
≤g_byã
)((16U - 
sig_bô
) & 0xff);

4275 
shi·
 = 0;

4277 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & (
PNG_16_TO_8
 | 
PNG_SCALE_16_TO_8
)) != 0)

4283 i‡(
shi·
 < (16U - 
PNG_MAX_GAMMA_8
))

4284 
shi·
 = (16U - 
PNG_MAX_GAMMA_8
);

4287 i‡(
shi·
 > 8U)

4288 
shi·
 = 8U;

4290 
≤g_±r
->
gamma_shi·
 = 
shi·
;

4297 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & (
PNG_16_TO_8
 | 
PNG_SCALE_16_TO_8
)) != 0)

4298 
	`≤g_buûd_16to8_èbÀ
(
≤g_±r
, &≤g_±r->
gamma_16_èbÀ
, 
shi·
,

4299 
≤g_±r
->
s¸ìn_gamma
 > 0 ? 
	`≤g_¥odu˘2
’ng_±r->
cﬁ‹•a˚
.
gamma
,

4300 
≤g_±r
->
s¸ìn_gamma
Ë: 
PNG_FP_1
);

4303 
	`≤g_buûd_16bô_èbÀ
(
≤g_±r
, &≤g_±r->
gamma_16_èbÀ
, 
shi·
,

4304 
≤g_±r
->
s¸ìn_gamma
 > 0 ? 
	`≤g_ªcùroˇl2
’ng_±r->
cﬁ‹•a˚
.
gamma
,

4305 
≤g_±r
->
s¸ìn_gamma
Ë: 
PNG_FP_1
);

4307 #i‡
	`deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) || \

4308 
	`deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
) || \

4309 
	`deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

4310 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & (
PNG_COMPOSE
 | 
PNG_RGB_TO_GRAY
)) != 0)

4312 
	`≤g_buûd_16bô_èbÀ
(
≤g_±r
, &≤g_±r->
gamma_16_to_1
, 
shi·
,

4313 
	`≤g_ªcùroˇl
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
));

4319 
	`≤g_buûd_16bô_èbÀ
(
≤g_±r
, &≤g_±r->
gamma_16_‰om_1
, 
shi·
,

4320 
≤g_±r
->
s¸ìn_gamma
 > 0 ? 
	`≤g_ªcùroˇl
(png_ptr->screen_gamma) :

4321 
≤g_±r
->
cﬁ‹•a˚
.
gamma
 );

4326 
	}
}

4330 #ifde‡
PNG_SET_OPTION_SUPPORTED


4331 
PNGAPI


4332 
	$≤g_£t_›ti⁄
(
≤g_°ru˘Ω
 
≤g_±r
, 
›ti⁄
, 
⁄off
)

4334 i‡(
≤g_±r
 !
NULL
 && 
›ti⁄
 >0 && o±i⁄ < 
PNG_OPTION_NEXT
 &&

4335 (
›ti⁄
 & 1) == 0)

4337 
≤g_uöt_32
 
mask
 = 3U << 
›ti⁄
;

4338 
≤g_uöt_32
 
£âög
 = (2U + (
⁄off
 !0)Ë<< 
›ti⁄
;

4339 
≤g_uöt_32
 
cuºít
 = 
≤g_±r
->
›ti⁄s
;

4341 
≤g_±r
->
›ti⁄s
 = (
≤g_uöt_32
)((
cuºít
 & ~
mask
Ë| 
£âög
);

4343  ()(
cuºít
 & 
mask
Ë>> 
›ti⁄
;

4346  
PNG_OPTION_INVALID
;

4347 
	}
}

4351 #i‡
deföed
(
PNG_SIMPLIFIED_READ_SUPPORTED
) ||\

4352 
	$deföed
(
PNG_SIMPLIFIED_WRITE_SUPPORTED
)

4371 #ifde‡
PNG_SIMPLIFIED_READ_SUPPORTED


4373 c⁄° 
≤g_uöt_16
 
≤g_sRGB_èbÀ
[256] =

4407 
	}
};

4413 c⁄° 
≤g_uöt_16
 
	g≤g_sRGB_ba£
[512] =

4481 c⁄° 
≤g_byã
 
	g≤g_sRGB_dñè
[512] =

4519 #i‡
deföed
(
PNG_SIMPLIFIED_READ_SUPPORTED
) ||\

4520 
	$deföed
(
PNG_SIMPLIFIED_WRITE_SUPPORTED
)

4522 
	$≤g_image_‰ì_fun˘i⁄
(
≤g_voidp
 
¨gumít
)

4524 
≤g_imagï
 
image
 = 
	`≤g_voidˇ°
’ng_imagï, 
¨gumít
);

4525 
≤g_c⁄åﬁp
 
˝
 = 
image
->
›aque
;

4526 
≤g_c⁄åﬁ
 
c
;

4531 i‡(
˝
->
≤g_±r
 =
NULL
)

4535 #ifde‡
PNG_STDIO_SUPPORTED


4536 i‡(
˝
->
ow√d_fûe
 != 0)

4538 
FILE
 *
Â
 = 
	`≤g_voidˇ°
(FILE*, 
˝
->
≤g_±r
->
io_±r
);

4539 
˝
->
ow√d_fûe
 = 0;

4542 i‡(
Â
 !
NULL
)

4544 
˝
->
≤g_±r
->
io_±r
 = 
NULL
;

4545 ()
	`f˛o£
(
Â
);

4555 
c
 = *
˝
;

4556 
image
->
›aque
 = &
c
;

4557 
	`≤g_‰ì
(
c
.
≤g_±r
, 
˝
);

4560 i‡(
c
.
f‹_wrôe
 != 0)

4562 #ifde‡
PNG_SIMPLIFIED_WRITE_SUPPORTED


4563 
	`≤g_de°roy_wrôe_°ru˘
(&
c
.
≤g_±r
, &c.
öfo_±r
);

4565 
	`≤g_îr‹
(
c
.
≤g_±r
, "simplified writeÇot supported");

4570 #ifde‡
PNG_SIMPLIFIED_READ_SUPPORTED


4571 
	`≤g_de°roy_ªad_°ru˘
(&
c
.
≤g_±r
, &c.
öfo_±r
, 
NULL
);

4573 
	`≤g_îr‹
(
c
.
≤g_±r
, "simplifiedÑeadÇot supported");

4579 
	}
}

4581 
PNGAPI


4582 
	$≤g_image_‰ì
(
≤g_imagï
 
image
)

4588 i‡(
image
 !
NULL
 && image->
›aque
 != NULL &&

4589 
image
->
›aque
->
îr‹_buf
 =
NULL
)

4591 
	`≤g_image_‰ì_fun˘i⁄
(
image
);

4592 
image
->
›aque
 = 
NULL
;

4594 
	}
}

4597 
	$≤g_image_îr‹
(
≤g_imagï
 
image
, 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)

4600 
	`≤g_ß„ˇt
(
image
->
mesßge
, ( image->mesßge), 0, 
îr‹_mesßge
);

4601 
image
->
w¨nög_‹_îr‹
 |
PNG_IMAGE_ERROR
;

4602 
	`≤g_image_‰ì
(
image
);

4604 
	}
}

	@png.h

266 #i‚de‡
PNG_H


267 
	#PNG_H


	)

281 
	#PNG_LIBPNG_VER_STRING
 "1.6.38.gô"

	)

282 
	#PNG_HEADER_VERSION_STRING
 "Üib≤g vîsi⁄ 1.6.38.gô\n"

	)

284 
	#PNG_LIBPNG_VER_SONUM
 16

	)

285 
	#PNG_LIBPNG_VER_DLLNUM
 16

	)

288 
	#PNG_LIBPNG_VER_MAJOR
 1

	)

289 
	#PNG_LIBPNG_VER_MINOR
 6

	)

290 
	#PNG_LIBPNG_VER_RELEASE
 38

	)

295 
	#PNG_LIBPNG_VER_BUILD
 1

	)

298 
	#PNG_LIBPNG_BUILD_ALPHA
 1

	)

299 
	#PNG_LIBPNG_BUILD_BETA
 2

	)

300 
	#PNG_LIBPNG_BUILD_RC
 3

	)

301 
	#PNG_LIBPNG_BUILD_STABLE
 4

	)

302 
	#PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK
 7

	)

305 
	#PNG_LIBPNG_BUILD_PATCH
 8

	)

307 
	#PNG_LIBPNG_BUILD_PRIVATE
 16

	)

309 
	#PNG_LIBPNG_BUILD_SPECIAL
 32

	)

312 
	#PNG_LIBPNG_BUILD_BASE_TYPE
 
PNG_LIBPNG_BUILD_BETA


	)

321 
	#PNG_LIBPNG_VER
 10638

	)

326 #i‚de‡
PNGLCONF_H


330 
	~"≤glibc⁄f.h
"

333 #i‚de‡
PNG_VERSION_INFO_ONLY


335 
	~"≤gc⁄f.h
"

352 #ifde‡
PNG_USER_PRIVATEBUILD


353 
	#PNG_LIBPNG_BUILD_TYPE
 \

354 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_PRIVATE
)

	)

356 #ifde‡
PNG_LIBPNG_SPECIALBUILD


357 
	#PNG_LIBPNG_BUILD_TYPE
 \

358 (
PNG_LIBPNG_BUILD_BASE_TYPE
 | 
PNG_LIBPNG_BUILD_SPECIAL
)

	)

360 
	#PNG_LIBPNG_BUILD_TYPE
 (
PNG_LIBPNG_BUILD_BASE_TYPE
)

	)

364 #i‚de‡
PNG_VERSION_INFO_ONLY


367 #ifde‡
__˝lu•lus


374 
	#≤g_lib≤g_vî
 
	`≤g_gë_hódî_vî
(
NULL
)

	)

431 * 
	t≤g_lib≤g_vîsi⁄_1_6_38_gô
;

439 
≤g_°ru˘_def
 
	t≤g_°ru˘
;

440 c⁄° 
	t≤g_°ru˘
 * 
	t≤g_c⁄°_°ru˘p
;

441 
≤g_°ru˘
 * 
	t≤g_°ru˘p
;

442 
≤g_°ru˘
 * * 
	t≤g_°ru˘µ
;

453 
≤g_öfo_def
 
	t≤g_öfo
;

454 
≤g_öfo
 * 
	t≤g_öf›
;

455 c⁄° 
	t≤g_öfo
 * 
	t≤g_c⁄°_öf›
;

456 
≤g_öfo
 * * 
	t≤g_öf›p
;

469 
≤g_°ru˘
 * 
	tPNG_RESTRICT
 
	t≤g_°ru˘Ω
;

470 c⁄° 
	t≤g_°ru˘
 * 
	tPNG_RESTRICT
 
	t≤g_c⁄°_°ru˘Ω
;

471 
≤g_öfo
 * 
	tPNG_RESTRICT
 
	t≤g_öf‹p
;

472 c⁄° 
	t≤g_öfo
 * 
	tPNG_RESTRICT
 
	t≤g_c⁄°_öf‹p
;

478 
	s≤g_cﬁ‹_°ru˘


480 
≤g_byã
 
ªd
;

481 
≤g_byã
 
gªí
;

482 
≤g_byã
 
blue
;

483 } 
	t≤g_cﬁ‹
;

484 
≤g_cﬁ‹
 * 
	t≤g_cﬁ‹p
;

485 c⁄° 
	t≤g_cﬁ‹
 * 
	t≤g_c⁄°_cﬁ‹p
;

486 
≤g_cﬁ‹
 * * 
	t≤g_cﬁ‹µ
;

488 
	s≤g_cﬁ‹_16_°ru˘


490 
≤g_byã
 
ödex
;

491 
≤g_uöt_16
 
ªd
;

492 
≤g_uöt_16
 
gªí
;

493 
≤g_uöt_16
 
blue
;

494 
≤g_uöt_16
 
gøy
;

495 } 
	t≤g_cﬁ‹_16
;

496 
≤g_cﬁ‹_16
 * 
	t≤g_cﬁ‹_16p
;

497 c⁄° 
	t≤g_cﬁ‹_16
 * 
	t≤g_c⁄°_cﬁ‹_16p
;

498 
≤g_cﬁ‹_16
 * * 
	t≤g_cﬁ‹_16µ
;

500 
	s≤g_cﬁ‹_8_°ru˘


502 
≤g_byã
 
ªd
;

503 
≤g_byã
 
gªí
;

504 
≤g_byã
 
blue
;

505 
≤g_byã
 
gøy
;

506 
≤g_byã
 
Æpha
;

507 } 
	t≤g_cﬁ‹_8
;

508 
≤g_cﬁ‹_8
 * 
	t≤g_cﬁ‹_8p
;

509 c⁄° 
	t≤g_cﬁ‹_8
 * 
	t≤g_c⁄°_cﬁ‹_8p
;

510 
≤g_cﬁ‹_8
 * * 
	t≤g_cﬁ‹_8µ
;

516 
	s≤g_sPLT_íåy_°ru˘


518 
≤g_uöt_16
 
ªd
;

519 
≤g_uöt_16
 
gªí
;

520 
≤g_uöt_16
 
blue
;

521 
≤g_uöt_16
 
Æpha
;

522 
≤g_uöt_16
 
‰equícy
;

523 } 
	t≤g_sPLT_íåy
;

524 
≤g_sPLT_íåy
 * 
	t≤g_sPLT_íåyp
;

525 c⁄° 
	t≤g_sPLT_íåy
 * 
	t≤g_c⁄°_sPLT_íåyp
;

526 
≤g_sPLT_íåy
 * * 
	t≤g_sPLT_íåyµ
;

533 
	s≤g_sPLT_°ru˘


535 
≤g_ch¨p
 
«me
;

536 
≤g_byã
 
dïth
;

537 
≤g_sPLT_íåyp
 
íåõs
;

538 
≤g_öt_32
 
√¡rõs
;

539 } 
	t≤g_sPLT_t
;

540 
≤g_sPLT_t
 * 
	t≤g_sPLT_ç
;

541 c⁄° 
	t≤g_sPLT_t
 * 
	t≤g_c⁄°_sPLT_ç
;

542 
≤g_sPLT_t
 * * 
	t≤g_sPLT_çp
;

544 #ifde‡
PNG_TEXT_SUPPORTED


562 
	s≤g_ãxt_°ru˘


564 
com¥essi⁄
;

569 
≤g_ch¨p
 
key
;

570 
≤g_ch¨p
 
ãxt
;

572 
size_t
 
ãxt_Àngth
;

573 
size_t
 
ôxt_Àngth
;

574 
≤g_ch¨p
 
œng
;

576 
≤g_ch¨p
 
œng_key
;

578 } 
	t≤g_ãxt
;

579 
≤g_ãxt
 * 
	t≤g_ãxç
;

580 c⁄° 
	t≤g_ãxt
 * 
	t≤g_c⁄°_ãxç
;

581 
≤g_ãxt
 * * 
	t≤g_ãxçp
;

586 
	#PNG_TEXT_COMPRESSION_NONE_WR
 -3

	)

587 
	#PNG_TEXT_COMPRESSION_zTXt_WR
 -2

	)

588 
	#PNG_TEXT_COMPRESSION_NONE
 -1

	)

589 
	#PNG_TEXT_COMPRESSION_zTXt
 0

	)

590 
	#PNG_ITXT_COMPRESSION_NONE
 1

	)

591 
	#PNG_ITXT_COMPRESSION_zTXt
 2

	)

592 
	#PNG_TEXT_COMPRESSION_LAST
 3

	)

600 
	s≤g_time_°ru˘


602 
≤g_uöt_16
 
yór
;

603 
≤g_byã
 
m⁄th
;

604 
≤g_byã
 
day
;

605 
≤g_byã
 
hour
;

606 
≤g_byã
 
möuã
;

607 
≤g_byã
 
£c⁄d
;

608 } 
	t≤g_time
;

609 
≤g_time
 * 
	t≤g_timï
;

610 c⁄° 
	t≤g_time
 * 
	t≤g_c⁄°_timï
;

611 
≤g_time
 * * 
	t≤g_timïp
;

613 #i‡
deföed
(
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
) ||\

614 
deföed
(
PNG_USER_CHUNKS_SUPPORTED
)

622 
	s≤g_unknown_chunk_t


624 
≤g_byã
 
«me
[5];

625 
≤g_byã
 *
d©a
;

626 
size_t
 
size
;

634 
≤g_byã
 
loˇti⁄
;

636 
	t≤g_unknown_chunk
;

638 
≤g_unknown_chunk
 * 
	t≤g_unknown_chunkp
;

639 c⁄° 
	t≤g_unknown_chunk
 * 
	t≤g_c⁄°_unknown_chunkp
;

640 
≤g_unknown_chunk
 * * 
	t≤g_unknown_chunkµ
;

644 
	#PNG_HAVE_IHDR
 0x01

	)

645 
	#PNG_HAVE_PLTE
 0x02

	)

646 
	#PNG_AFTER_IDAT
 0x08

	)

649 
	#PNG_UINT_31_MAX
 ((
≤g_uöt_32
)0x7fffffffL)

	)

650 
	#PNG_UINT_32_MAX
 ((
≤g_uöt_32
)(-1))

	)

651 
	#PNG_SIZE_MAX
 ((
size_t
)(-1))

	)

656 
	#PNG_FP_1
 100000

	)

657 
	#PNG_FP_HALF
 50000

	)

658 
	#PNG_FP_MAX
 ((
≤g_fixed_poöt
)0x7fffffffL)

	)

659 
	#PNG_FP_MIN
 (-
PNG_FP_MAX
)

	)

663 
	#PNG_COLOR_MASK_PALETTE
 1

	)

664 
	#PNG_COLOR_MASK_COLOR
 2

	)

665 
	#PNG_COLOR_MASK_ALPHA
 4

	)

668 
	#PNG_COLOR_TYPE_GRAY
 0

	)

669 
	#PNG_COLOR_TYPE_PALETTE
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_PALETTE
)

	)

670 
	#PNG_COLOR_TYPE_RGB
 (
PNG_COLOR_MASK_COLOR
)

	)

671 
	#PNG_COLOR_TYPE_RGB_ALPHA
 (
PNG_COLOR_MASK_COLOR
 | 
PNG_COLOR_MASK_ALPHA
)

	)

672 
	#PNG_COLOR_TYPE_GRAY_ALPHA
 (
PNG_COLOR_MASK_ALPHA
)

	)

674 
	#PNG_COLOR_TYPE_RGBA
 
PNG_COLOR_TYPE_RGB_ALPHA


	)

675 
	#PNG_COLOR_TYPE_GA
 
PNG_COLOR_TYPE_GRAY_ALPHA


	)

678 
	#PNG_COMPRESSION_TYPE_BASE
 0

	)

679 
	#PNG_COMPRESSION_TYPE_DEFAULT
 
PNG_COMPRESSION_TYPE_BASE


	)

682 
	#PNG_FILTER_TYPE_BASE
 0

	)

683 
	#PNG_INTRAPIXEL_DIFFERENCING
 64

	)

684 
	#PNG_FILTER_TYPE_DEFAULT
 
PNG_FILTER_TYPE_BASE


	)

687 
	#PNG_INTERLACE_NONE
 0

	)

688 
	#PNG_INTERLACE_ADAM7
 1

	)

689 
	#PNG_INTERLACE_LAST
 2

	)

692 
	#PNG_OFFSET_PIXEL
 0

	)

693 
	#PNG_OFFSET_MICROMETER
 1

	)

694 
	#PNG_OFFSET_LAST
 2

	)

697 
	#PNG_EQUATION_LINEAR
 0

	)

698 
	#PNG_EQUATION_BASE_E
 1

	)

699 
	#PNG_EQUATION_ARBITRARY
 2

	)

700 
	#PNG_EQUATION_HYPERBOLIC
 3

	)

701 
	#PNG_EQUATION_LAST
 4

	)

704 
	#PNG_SCALE_UNKNOWN
 0

	)

705 
	#PNG_SCALE_METER
 1

	)

706 
	#PNG_SCALE_RADIAN
 2

	)

707 
	#PNG_SCALE_LAST
 3

	)

710 
	#PNG_RESOLUTION_UNKNOWN
 0

	)

711 
	#PNG_RESOLUTION_METER
 1

	)

712 
	#PNG_RESOLUTION_LAST
 2

	)

715 
	#PNG_sRGB_INTENT_PERCEPTUAL
 0

	)

716 
	#PNG_sRGB_INTENT_RELATIVE
 1

	)

717 
	#PNG_sRGB_INTENT_SATURATION
 2

	)

718 
	#PNG_sRGB_INTENT_ABSOLUTE
 3

	)

719 
	#PNG_sRGB_INTENT_LAST
 4

	)

722 
	#PNG_KEYWORD_MAX_LENGTH
 79

	)

725 
	#PNG_MAX_PALETTE_LENGTH
 256

	)

732 
	#PNG_INFO_gAMA
 0x0001U

	)

733 
	#PNG_INFO_sBIT
 0x0002U

	)

734 
	#PNG_INFO_cHRM
 0x0004U

	)

735 
	#PNG_INFO_PLTE
 0x0008U

	)

736 
	#PNG_INFO_tRNS
 0x0010U

	)

737 
	#PNG_INFO_bKGD
 0x0020U

	)

738 
	#PNG_INFO_hIST
 0x0040U

	)

739 
	#PNG_INFO_pHYs
 0x0080U

	)

740 
	#PNG_INFO_oFFs
 0x0100U

	)

741 
	#PNG_INFO_tIME
 0x0200U

	)

742 
	#PNG_INFO_pCAL
 0x0400U

	)

743 
	#PNG_INFO_sRGB
 0x0800U

	)

744 
	#PNG_INFO_iCCP
 0x1000U

	)

745 
	#PNG_INFO_sPLT
 0x2000U

	)

746 
	#PNG_INFO_sCAL
 0x4000U

	)

747 
	#PNG_INFO_IDAT
 0x8000U

	)

748 
	#PNG_INFO_eXIf
 0x10000U

	)

754 
	s≤g_row_öfo_°ru˘


756 
≤g_uöt_32
 
width
;

757 
size_t
 
rowbyãs
;

758 
≤g_byã
 
cﬁ‹_ty≥
;

759 
≤g_byã
 
bô_dïth
;

760 
≤g_byã
 
ch™√ls
;

761 
≤g_byã
 
pixñ_dïth
;

762 } 
	t≤g_row_öfo
;

764 
≤g_row_öfo
 * 
	t≤g_row_öf›
;

765 
≤g_row_öfo
 * * 
	t≤g_row_öf›p
;

775 
PNG_CALLBACK
(, *
	t≤g_îr‹_±r
, (
	t≤g_°ru˘p
, 
	t≤g_c⁄°_ch¨p
));

776 
PNG_CALLBACK
(, *
	t≤g_rw_±r
, (
	t≤g_°ru˘p
, 
	t≤g_byãp
, 
	tsize_t
));

777 
PNG_CALLBACK
(, *
	t≤g_Êush_±r
, (
	t≤g_°ru˘p
));

778 
PNG_CALLBACK
(, *
	t≤g_ªad_°©us_±r
, (
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

780 
PNG_CALLBACK
(, *
	t≤g_wrôe_°©us_±r
, (
	t≤g_°ru˘p
, 
	t≤g_uöt_32
,

783 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


784 
PNG_CALLBACK
(, *
	t≤g_¥ogªssive_öfo_±r
, (
	t≤g_°ru˘p
, 
	t≤g_öf›
));

785 
PNG_CALLBACK
(, *
	t≤g_¥ogªssive_íd_±r
, (
	t≤g_°ru˘p
, 
	t≤g_öf›
));

797 
PNG_CALLBACK
(, *
	t≤g_¥ogªssive_row_±r
, (
	t≤g_°ru˘p
, 
	t≤g_byãp
,

798 
	t≤g_uöt_32
, ));

801 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

802 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

803 
PNG_CALLBACK
(, *
	t≤g_u£r_å™sf‹m_±r
, (
	t≤g_°ru˘p
, 
	t≤g_row_öf›
,

804 
	t≤g_byãp
));

807 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


808 
PNG_CALLBACK
(, *
	t≤g_u£r_chunk_±r
, (
	t≤g_°ru˘p
,

809 
	t≤g_unknown_chunkp
));

811 #ifde‡
PNG_UNKNOWN_CHUNKS_SUPPORTED


816 #ifde‡
PNG_SETJMP_SUPPORTED


828 
PNG_FUNCTION
(, (
PNGCAPI
 *
≤g_l⁄gjmp_±r
), 
PNGARG
((
jmp_buf
, )), );

832 
	#PNG_TRANSFORM_IDENTITY
 0x0000

	)

833 
	#PNG_TRANSFORM_STRIP_16
 0x0001

	)

834 
	#PNG_TRANSFORM_STRIP_ALPHA
 0x0002

	)

835 
	#PNG_TRANSFORM_PACKING
 0x0004

	)

836 
	#PNG_TRANSFORM_PACKSWAP
 0x0008

	)

837 
	#PNG_TRANSFORM_EXPAND
 0x0010

	)

838 
	#PNG_TRANSFORM_INVERT_MONO
 0x0020

	)

839 
	#PNG_TRANSFORM_SHIFT
 0x0040

	)

840 
	#PNG_TRANSFORM_BGR
 0x0080

	)

841 
	#PNG_TRANSFORM_SWAP_ALPHA
 0x0100

	)

842 
	#PNG_TRANSFORM_SWAP_ENDIAN
 0x0200

	)

843 
	#PNG_TRANSFORM_INVERT_ALPHA
 0x0400

	)

844 
	#PNG_TRANSFORM_STRIP_FILLER
 0x0800

	)

846 
	#PNG_TRANSFORM_STRIP_FILLER_BEFORE
 
PNG_TRANSFORM_STRIP_FILLER


	)

847 
	#PNG_TRANSFORM_STRIP_FILLER_AFTER
 0x1000

	)

849 
	#PNG_TRANSFORM_GRAY_TO_RGB
 0x2000

	)

851 
	#PNG_TRANSFORM_EXPAND_16
 0x4000

	)

852 #i‡
INT_MAX
 >= 0x8000

853 
	#PNG_TRANSFORM_SCALE_16
 0x8000

	)

857 
	#PNG_FLAG_MNG_EMPTY_PLTE
 0x01

	)

858 
	#PNG_FLAG_MNG_FILTER_64
 0x04

	)

859 
	#PNG_ALL_MNG_FEATURES
 0x05

	)

867 
PNG_CALLBACK
(
	t≤g_voidp
, *
	t≤g_mÆloc_±r
, (
	t≤g_°ru˘p
,

868 
	t≤g_Æloc_size_t
));

869 
PNG_CALLBACK
(, *
	t≤g_‰ì_±r
, (
	t≤g_°ru˘p
, 
	t≤g_voidp
));

901 
PNG_EXPORT
(1, 
≤g_uöt_32
, 
≤g_ac˚ss_vîsi⁄_numbî
, ());

906 
PNG_EXPORT
(2, , 
≤g_£t_sig_byãs
, (
≤g_°ru˘Ω
 
≤g_±r
, 
num_byãs
));

913 
PNG_EXPORT
(3, , 
≤g_sig_cmp
, (
≤g_c⁄°_byãp
 
sig
, 
size_t
 
°¨t
,

914 
size_t
 
num_to_check
));

919 
	#≤g_check_sig
(
sig
, 
n
Ë!
	`≤g_sig_cmp
((sig), 0, (n))

	)

922 
PNG_EXPORTA
(4, 
≤g_°ru˘p
, 
≤g_¸óã_ªad_°ru˘
,

923 (
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

924 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
),

925 
PNG_ALLOCATED
);

928 
PNG_EXPORTA
(5, 
≤g_°ru˘p
, 
≤g_¸óã_wrôe_°ru˘
,

929 (
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,

930 
≤g_îr‹_±r
 
w¨n_‚
),

931 
PNG_ALLOCATED
);

933 
PNG_EXPORT
(6, 
size_t
, 
≤g_gë_com¥essi⁄_buf„r_size
,

934 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

936 
PNG_EXPORT
(7, , 
≤g_£t_com¥essi⁄_buf„r_size
, (
≤g_°ru˘Ω
 
≤g_±r
,

937 
size_t
 
size
));

942 #ifde‡
PNG_SETJMP_SUPPORTED


950 
PNG_EXPORT
(8, 
jmp_buf
*, 
≤g_£t_l⁄gjmp_‚
, (
≤g_°ru˘Ω
 
≤g_±r
,

951 
≤g_l⁄gjmp_±r
 
l⁄gjmp_‚
, 
size_t
 
jmp_buf_size
));

952 
	#≤g_jmpbuf
(
≤g_±r
) \

953 (*
	`≤g_£t_l⁄gjmp_‚
((
≤g_±r
), 
l⁄gjmp
, ( (
jmp_buf
))))

	)

955 
	#≤g_jmpbuf
(
≤g_±r
) \

956 (
LIBPNG_WAS_COMPILED_WITH__PNG_NO_SETJMP
)

	)

963 
PNG_EXPORTA
(9, , 
≤g_l⁄gjmp
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
vÆ
),

964 
PNG_NORETURN
);

966 #ifde‡
PNG_READ_SUPPORTED


968 
PNG_EXPORTA
(10, , 
≤g_ª£t_z°ªam
, (
≤g_°ru˘Ω
 
≤g_±r
), 
PNG_DEPRECATED
);

972 #ifde‡
PNG_USER_MEM_SUPPORTED


973 
PNG_EXPORTA
(11, 
≤g_°ru˘p
, 
≤g_¸óã_ªad_°ru˘_2
,

974 (
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,

975 
≤g_îr‹_±r
 
w¨n_‚
,

976 
≤g_voidp
 
mem_±r
, 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
),

977 
PNG_ALLOCATED
);

978 
PNG_EXPORTA
(12, 
≤g_°ru˘p
, 
≤g_¸óã_wrôe_°ru˘_2
,

979 (
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,

980 
≤g_îr‹_±r
 
w¨n_‚
,

981 
≤g_voidp
 
mem_±r
, 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
),

982 
PNG_ALLOCATED
);

986 
PNG_EXPORT
(13, , 
≤g_wrôe_sig
, (
≤g_°ru˘Ω
 
≤g_±r
));

989 
PNG_EXPORT
(14, , 
≤g_wrôe_chunk
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp


990 
chunk_«me
, 
≤g_c⁄°_byãp
 
d©a
, 
size_t
 
Àngth
));

993 
PNG_EXPORT
(15, , 
≤g_wrôe_chunk_°¨t
, (
≤g_°ru˘Ω
 
≤g_±r
,

994 
≤g_c⁄°_byãp
 
chunk_«me
, 
≤g_uöt_32
 
Àngth
));

997 
PNG_EXPORT
(16, , 
≤g_wrôe_chunk_d©a
, (
≤g_°ru˘Ω
 
≤g_±r
,

998 
≤g_c⁄°_byãp
 
d©a
, 
size_t
 
Àngth
));

1001 
PNG_EXPORT
(17, , 
≤g_wrôe_chunk_íd
, (
≤g_°ru˘Ω
 
≤g_±r
));

1004 
PNG_EXPORTA
(18, 
≤g_öf›
, 
≤g_¸óã_öfo_°ru˘
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
),

1005 
PNG_ALLOCATED
);

1011 
PNG_EXPORTA
(19, , 
≤g_öfo_öô_3
, (
≤g_öf›p
 
öfo_±r
,

1012 
size_t
 
≤g_öfo_°ru˘_size
), 
PNG_DEPRECATED
);

1015 
PNG_EXPORT
(20, , 
≤g_wrôe_öfo_bef‹e_PLTE
,

1016 (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1017 
PNG_EXPORT
(21, , 
≤g_wrôe_öfo
,

1018 (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1020 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1022 
PNG_EXPORT
(22, , 
≤g_ªad_öfo
,

1023 (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
));

1026 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


1031 #i‡
PNG_LIBPNG_VER
 < 10700

1033 
PNG_EXPORTA
(23, 
≤g_c⁄°_ch¨p
, 
≤g_c⁄vît_to_rfc1123
, (
≤g_°ru˘Ω
 
≤g_±r
,

1034 
≤g_c⁄°_timï
 
±ime
),
PNG_DEPRECATED
);

1036 
PNG_EXPORT
(241, , 
≤g_c⁄vît_to_rfc1123_buf„r
, (
out
[29],

1037 
≤g_c⁄°_timï
 
±ime
));

1040 #ifde‡
PNG_CONVERT_tIME_SUPPORTED


1042 
PNG_EXPORT
(24, , 
≤g_c⁄vît_‰om_°ru˘_tm
, (
≤g_timï
 
±ime
,

1043 c⁄° 
tm
 * 
âime
));

1046 
PNG_EXPORT
(25, , 
≤g_c⁄vît_‰om_time_t
, (
≤g_timï
 
±ime
, 
time_t
 
âime
));

1049 #ifde‡
PNG_READ_EXPAND_SUPPORTED


1051 
PNG_EXPORT
(26, , 
≤g_£t_ex∑nd
, (
≤g_°ru˘Ω
 
≤g_±r
));

1052 
PNG_EXPORT
(27, , 
≤g_£t_ex∑nd_gøy_1_2_4_to_8
, (
≤g_°ru˘Ω
 
≤g_±r
));

1053 
PNG_EXPORT
(28, , 
≤g_£t_∑Àâe_to_rgb
, (
≤g_°ru˘Ω
 
≤g_±r
));

1054 
PNG_EXPORT
(29, , 
≤g_£t_tRNS_to_Æpha
, (
≤g_°ru˘Ω
 
≤g_±r
));

1057 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


1061 
PNG_EXPORT
(221, , 
≤g_£t_ex∑nd_16
, (
≤g_°ru˘Ω
 
≤g_±r
));

1064 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

1066 
PNG_EXPORT
(30, , 
≤g_£t_bgr
, (
≤g_°ru˘Ω
 
≤g_±r
));

1069 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


1071 
PNG_EXPORT
(31, , 
≤g_£t_gøy_to_rgb
, (
≤g_°ru˘Ω
 
≤g_±r
));

1074 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1076 
	#PNG_ERROR_ACTION_NONE
 1

	)

1077 
	#PNG_ERROR_ACTION_WARN
 2

	)

1078 
	#PNG_ERROR_ACTION_ERROR
 3

	)

1079 
	#PNG_RGB_TO_GRAY_DEFAULT
 (-1)

	)

1081 
PNG_FP_EXPORT
(32, , 
≤g_£t_rgb_to_gøy
, (
≤g_°ru˘Ω
 
≤g_±r
,

1082 
îr‹_a˘i⁄
, 
ªd
, 
gªí
))

1083 
PNG_FIXED_EXPORT
(33, , 
≤g_£t_rgb_to_gøy_fixed
, (
≤g_°ru˘Ω
 
≤g_±r
,

1084 
îr‹_a˘i⁄
, 
≤g_fixed_poöt
 
ªd
,Öng_fixed_poöà
gªí
))

1086 
PNG_EXPORT
(34, 
≤g_byã
, 
≤g_gë_rgb_to_gøy_°©us
, (
≤g_c⁄°_°ru˘Ω


1087 
≤g_±r
));

1090 #ifde‡
PNG_BUILD_GRAYSCALE_PALETTE_SUPPORTED


1091 
PNG_EXPORT
(35, , 
≤g_buûd_gøysˇÀ_∑Àâe
, (
bô_dïth
,

1092 
≤g_cﬁ‹p
 
∑Àâe
));

1095 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


1130 
	#PNG_ALPHA_PNG
 0

	)

1131 
	#PNG_ALPHA_STANDARD
 1

	)

1132 
	#PNG_ALPHA_ASSOCIATED
 1

	)

1133 
	#PNG_ALPHA_PREMULTIPLIED
 1

	)

1134 
	#PNG_ALPHA_OPTIMIZED
 2

	)

1135 
	#PNG_ALPHA_BROKEN
 3

	)

1137 
PNG_FP_EXPORT
(227, , 
≤g_£t_Æpha_mode
, (
≤g_°ru˘Ω
 
≤g_±r
, 
mode
,

1138 
ouçut_gamma
))

1139 
PNG_FIXED_EXPORT
(228, , 
≤g_£t_Æpha_mode_fixed
, (
≤g_°ru˘Ω
 
≤g_±r
,

1140 
mode
, 
≤g_fixed_poöt
 
ouçut_gamma
))

1143 #i‡
deföed
(
PNG_GAMMA_SUPPORTED
Ë|| deföed(
PNG_READ_ALPHA_MODE_SUPPORTED
)

1147 
	#PNG_DEFAULT_sRGB
 -1

	)

1148 
	#PNG_GAMMA_MAC_18
 -2

	)

1149 
	#PNG_GAMMA_sRGB
 220000

	)

1150 
	#PNG_GAMMA_LINEAR
 
PNG_FP_1


	)

1229 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


1230 
PNG_EXPORT
(36, , 
≤g_£t_°rù_Æpha
, (
≤g_°ru˘Ω
 
≤g_±r
));

1233 #i‡
deföed
(
PNG_READ_SWAP_ALPHA_SUPPORTED
) || \

1234 
deföed
(
PNG_WRITE_SWAP_ALPHA_SUPPORTED
)

1235 
PNG_EXPORT
(37, , 
≤g_£t_sw≠_Æpha
, (
≤g_°ru˘Ω
 
≤g_±r
));

1238 #i‡
deföed
(
PNG_READ_INVERT_ALPHA_SUPPORTED
) || \

1239 
deföed
(
PNG_WRITE_INVERT_ALPHA_SUPPORTED
)

1240 
PNG_EXPORT
(38, , 
≤g_£t_övît_Æpha
, (
≤g_°ru˘Ω
 
≤g_±r
));

1243 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

1245 
PNG_EXPORT
(39, , 
≤g_£t_fûÀr
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
fûÀr
,

1246 
Êags
));

1248 
	#PNG_FILLER_BEFORE
 0

	)

1249 
	#PNG_FILLER_AFTER
 1

	)

1251 
PNG_EXPORT
(40, , 
≤g_£t_add_Æpha
, (
≤g_°ru˘Ω
 
≤g_±r
,

1252 
≤g_uöt_32
 
fûÀr
, 
Êags
));

1255 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

1257 
PNG_EXPORT
(41, , 
≤g_£t_sw≠
, (
≤g_°ru˘Ω
 
≤g_±r
));

1260 #i‡
deföed
(
PNG_READ_PACK_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

1262 
PNG_EXPORT
(42, , 
≤g_£t_∑ckög
, (
≤g_°ru˘Ω
 
≤g_±r
));

1265 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
) || \

1266 
deföed
(
PNG_WRITE_PACKSWAP_SUPPORTED
)

1268 
PNG_EXPORT
(43, , 
≤g_£t_∑cksw≠
, (
≤g_°ru˘Ω
 
≤g_±r
));

1271 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

1273 
PNG_EXPORT
(44, , 
≤g_£t_shi·
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_cﬁ‹_8p


1274 
åue_bôs
));

1277 #i‡
deföed
(
PNG_READ_INTERLACING_SUPPORTED
) || \

1278 
deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

1285 
PNG_EXPORT
(45, , 
≤g_£t_öãæa˚_h™dlög
, (
≤g_°ru˘Ω
 
≤g_±r
));

1288 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

1290 
PNG_EXPORT
(46, , 
≤g_£t_övît_m⁄o
, (
≤g_°ru˘Ω
 
≤g_±r
));

1293 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1299 
PNG_FP_EXPORT
(47, , 
≤g_£t_background
, (
≤g_°ru˘Ω
 
≤g_±r
,

1300 
≤g_c⁄°_cﬁ‹_16p
 
background_cﬁ‹
, 
background_gamma_code
,

1301 
√ed_ex∑nd
, 
background_gamma
))

1302 
PNG_FIXED_EXPORT
(215, , 
≤g_£t_background_fixed
, (
≤g_°ru˘Ω
 
≤g_±r
,

1303 
≤g_c⁄°_cﬁ‹_16p
 
background_cﬁ‹
, 
background_gamma_code
,

1304 
√ed_ex∑nd
, 
≤g_fixed_poöt
 
background_gamma
))

1306 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1307 
	#PNG_BACKGROUND_GAMMA_UNKNOWN
 0

	)

1308 
	#PNG_BACKGROUND_GAMMA_SCREEN
 1

	)

1309 
	#PNG_BACKGROUND_GAMMA_FILE
 2

	)

1310 
	#PNG_BACKGROUND_GAMMA_UNIQUE
 3

	)

1313 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


1315 
PNG_EXPORT
(229, , 
≤g_£t_sˇÀ_16
, (
≤g_°ru˘Ω
 
≤g_±r
));

1318 #ifde‡
PNG_READ_STRIP_16_TO_8_SUPPORTED


1319 
	#PNG_READ_16_TO_8_SUPPORTED


	)

1321 
PNG_EXPORT
(48, , 
≤g_£t_°rù_16
, (
≤g_°ru˘Ω
 
≤g_±r
));

1324 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


1328 
PNG_EXPORT
(49, , 
≤g_£t_qu™tize
, (
≤g_°ru˘Ω
 
≤g_±r
,

1329 
≤g_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
, 
maximum_cﬁ‹s
,

1330 
≤g_c⁄°_uöt_16p
 
hi°ogøm
, 
fuŒ_qu™tize
));

1333 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1337 
	#PNG_GAMMA_THRESHOLD
 (
PNG_GAMMA_THRESHOLD_FIXED
*.00001)

	)

1350 
PNG_FP_EXPORT
(50, , 
≤g_£t_gamma
, (
≤g_°ru˘Ω
 
≤g_±r
,

1351 
s¸ìn_gamma
, 
ovîride_fûe_gamma
))

1352 
PNG_FIXED_EXPORT
(208, , 
≤g_£t_gamma_fixed
, (
≤g_°ru˘Ω
 
≤g_±r
,

1353 
≤g_fixed_poöt
 
s¸ìn_gamma
,Öng_fixed_poöà
ovîride_fûe_gamma
))

1356 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


1358 
PNG_EXPORT
(51, , 
≤g_£t_Êush
, (
≤g_°ru˘Ω
 
≤g_±r
, 
ƒows
));

1360 
PNG_EXPORT
(52, , 
≤g_wrôe_Êush
, (
≤g_°ru˘Ω
 
≤g_±r
));

1364 
PNG_EXPORT
(53, , 
≤g_°¨t_ªad_image
, (
≤g_°ru˘Ω
 
≤g_±r
));

1367 
PNG_EXPORT
(54, , 
≤g_ªad_upd©e_öfo
, (
≤g_°ru˘Ω
 
≤g_±r
,

1368 
≤g_öf‹p
 
öfo_±r
));

1370 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1372 
PNG_EXPORT
(55, , 
≤g_ªad_rows
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
row
,

1373 
≤g_byãµ
 
di•œy_row
, 
≤g_uöt_32
 
num_rows
));

1376 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1378 
PNG_EXPORT
(56, , 
≤g_ªad_row
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
row
,

1379 
≤g_byãp
 
di•œy_row
));

1382 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1384 
PNG_EXPORT
(57, , 
≤g_ªad_image
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
image
));

1388 
PNG_EXPORT
(58, , 
≤g_wrôe_row
, (
≤g_°ru˘Ω
 
≤g_±r
,

1389 
≤g_c⁄°_byãp
 
row
));

1396 
PNG_EXPORT
(59, , 
≤g_wrôe_rows
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
row
,

1397 
≤g_uöt_32
 
num_rows
));

1400 
PNG_EXPORT
(60, , 
≤g_wrôe_image
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
image
));

1403 
PNG_EXPORT
(61, , 
≤g_wrôe_íd
, (
≤g_°ru˘Ω
 
≤g_±r
,

1404 
≤g_öf‹p
 
öfo_±r
));

1406 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1408 
PNG_EXPORT
(62, , 
≤g_ªad_íd
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
));

1412 
PNG_EXPORT
(63, , 
≤g_de°roy_öfo_°ru˘
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1413 
≤g_öf›p
 
öfo_±r_±r
));

1416 
PNG_EXPORT
(64, , 
≤g_de°roy_ªad_°ru˘
, (
≤g_°ru˘µ
 
≤g_±r_±r
,

1417 
≤g_öf›p
 
öfo_±r_±r
,Öng_öf›∞
íd_öfo_±r_±r
));

1420 
PNG_EXPORT
(65, , 
≤g_de°roy_wrôe_°ru˘
, (
≤g_°ru˘µ
 
≤g_±r_±r
,

1421 
≤g_öf›p
 
öfo_±r_±r
));

1424 
PNG_EXPORT
(66, , 
≤g_£t_¸c_a˘i⁄
, (
≤g_°ru˘Ω
 
≤g_±r
, 
¸ô_a˘i⁄
,

1425 
™cû_a˘i⁄
));

1436 
	#PNG_CRC_DEFAULT
 0

	)

1437 
	#PNG_CRC_ERROR_QUIT
 1

	)

1438 
	#PNG_CRC_WARN_DISCARD
 2

	)

1439 
	#PNG_CRC_WARN_USE
 3

	)

1440 
	#PNG_CRC_QUIET_USE
 4

	)

1441 
	#PNG_CRC_NO_CHANGE
 5

	)

1443 #ifde‡
PNG_WRITE_SUPPORTED


1455 
PNG_EXPORT
(67, , 
≤g_£t_fûãr
, (
≤g_°ru˘Ω
 
≤g_±r
, 
mëhod
,

1456 
fûãrs
));

1464 
	#PNG_NO_FILTERS
 0x00

	)

1465 
	#PNG_FILTER_NONE
 0x08

	)

1466 
	#PNG_FILTER_SUB
 0x10

	)

1467 
	#PNG_FILTER_UP
 0x20

	)

1468 
	#PNG_FILTER_AVG
 0x40

	)

1469 
	#PNG_FILTER_PAETH
 0x80

	)

1470 
	#PNG_FAST_FILTERS
 (
PNG_FILTER_NONE
 | 
PNG_FILTER_SUB
 | 
PNG_FILTER_UP
)

	)

1471 
	#PNG_ALL_FILTERS
 (
PNG_FAST_FILTERS
 | 
PNG_FILTER_AVG
 | 
PNG_FILTER_PAETH
)

	)

1476 
	#PNG_FILTER_VALUE_NONE
 0

	)

1477 
	#PNG_FILTER_VALUE_SUB
 1

	)

1478 
	#PNG_FILTER_VALUE_UP
 2

	)

1479 
	#PNG_FILTER_VALUE_AVG
 3

	)

1480 
	#PNG_FILTER_VALUE_PAETH
 4

	)

1481 
	#PNG_FILTER_VALUE_LAST
 5

	)

1483 #ifde‡
PNG_WRITE_SUPPORTED


1484 #ifde‡
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


1485 
PNG_FP_EXPORT
(68, , 
≤g_£t_fûãr_heuri°ics
, (
≤g_°ru˘Ω
 
≤g_±r
,

1486 
heuri°ic_mëhod
, 
num_weights
, 
≤g_c⁄°_doubÀp
 
fûãr_weights
,

1487 
≤g_c⁄°_doubÀp
 
fûãr_co°s
))

1488 
PNG_FIXED_EXPORT
(209, , 
≤g_£t_fûãr_heuri°ics_fixed
,

1489 (
≤g_°ru˘Ω
 
≤g_±r
, 
heuri°ic_mëhod
, 
num_weights
,

1490 
≤g_c⁄°_fixed_poöt_p
 
fûãr_weights
,

1491 
≤g_c⁄°_fixed_poöt_p
 
fûãr_co°s
))

1495 
	#PNG_FILTER_HEURISTIC_DEFAULT
 0

	)

1496 
	#PNG_FILTER_HEURISTIC_UNWEIGHTED
 1

	)

1497 
	#PNG_FILTER_HEURISTIC_WEIGHTED
 2

	)

1498 
	#PNG_FILTER_HEURISTIC_LAST
 3

	)

1507 #ifde‡
PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED


1508 
PNG_EXPORT
(69, , 
≤g_£t_com¥essi⁄_Àvñ
, (
≤g_°ru˘Ω
 
≤g_±r
,

1509 
Àvñ
));

1511 
PNG_EXPORT
(70, , 
≤g_£t_com¥essi⁄_mem_Àvñ
, (
≤g_°ru˘Ω
 
≤g_±r
,

1512 
mem_Àvñ
));

1514 
PNG_EXPORT
(71, , 
≤g_£t_com¥essi⁄_°øãgy
, (
≤g_°ru˘Ω
 
≤g_±r
,

1515 
°øãgy
));

1520 
PNG_EXPORT
(72, , 
≤g_£t_com¥essi⁄_wödow_bôs
, (
≤g_°ru˘Ω
 
≤g_±r
,

1521 
wödow_bôs
));

1523 
PNG_EXPORT
(73, , 
≤g_£t_com¥essi⁄_mëhod
, (
≤g_°ru˘Ω
 
≤g_±r
,

1524 
mëhod
));

1527 #ifde‡
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


1529 
PNG_EXPORT
(222, , 
≤g_£t_ãxt_com¥essi⁄_Àvñ
, (
≤g_°ru˘Ω
 
≤g_±r
,

1530 
Àvñ
));

1532 
PNG_EXPORT
(223, , 
≤g_£t_ãxt_com¥essi⁄_mem_Àvñ
, (
≤g_°ru˘Ω
 
≤g_±r
,

1533 
mem_Àvñ
));

1535 
PNG_EXPORT
(224, , 
≤g_£t_ãxt_com¥essi⁄_°øãgy
, (
≤g_°ru˘Ω
 
≤g_±r
,

1536 
°øãgy
));

1541 
PNG_EXPORT
(225, , 
≤g_£t_ãxt_com¥essi⁄_wödow_bôs
,

1542 (
≤g_°ru˘Ω
 
≤g_±r
, 
wödow_bôs
));

1544 
PNG_EXPORT
(226, , 
≤g_£t_ãxt_com¥essi⁄_mëhod
, (
≤g_°ru˘Ω
 
≤g_±r
,

1545 
mëhod
));

1558 #ifde‡
PNG_STDIO_SUPPORTED


1560 
PNG_EXPORT
(74, , 
≤g_öô_io
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_FILE_p
 
Â
));

1571 
PNG_EXPORT
(75, , 
≤g_£t_îr‹_‚
, (
≤g_°ru˘Ω
 
≤g_±r
,

1572 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨nög_‚
));

1575 
PNG_EXPORT
(76, 
≤g_voidp
, 
≤g_gë_îr‹_±r
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

1587 
PNG_EXPORT
(77, , 
≤g_£t_wrôe_‚
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
io_±r
,

1588 
≤g_rw_±r
 
wrôe_d©a_‚
, 
≤g_Êush_±r
 
ouçut_Êush_‚
));

1591 
PNG_EXPORT
(78, , 
≤g_£t_ªad_‚
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
io_±r
,

1592 
≤g_rw_±r
 
ªad_d©a_‚
));

1595 
PNG_EXPORT
(79, 
≤g_voidp
, 
≤g_gë_io_±r
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

1597 
PNG_EXPORT
(80, , 
≤g_£t_ªad_°©us_‚
, (
≤g_°ru˘Ω
 
≤g_±r
,

1598 
≤g_ªad_°©us_±r
 
ªad_row_‚
));

1600 
PNG_EXPORT
(81, , 
≤g_£t_wrôe_°©us_‚
, (
≤g_°ru˘Ω
 
≤g_±r
,

1601 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
));

1603 #ifde‡
PNG_USER_MEM_SUPPORTED


1605 
PNG_EXPORT
(82, , 
≤g_£t_mem_‚
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
mem_±r
,

1606 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
));

1608 
PNG_EXPORT
(83, 
≤g_voidp
, 
≤g_gë_mem_±r
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

1611 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


1612 
PNG_EXPORT
(84, , 
≤g_£t_ªad_u£r_å™sf‹m_‚
, (
≤g_°ru˘Ω
 
≤g_±r
,

1613 
≤g_u£r_å™sf‹m_±r
 
ªad_u£r_å™sf‹m_‚
));

1616 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


1617 
PNG_EXPORT
(85, , 
≤g_£t_wrôe_u£r_å™sf‹m_‚
, (
≤g_°ru˘Ω
 
≤g_±r
,

1618 
≤g_u£r_å™sf‹m_±r
 
wrôe_u£r_å™sf‹m_‚
));

1621 #ifde‡
PNG_USER_TRANSFORM_PTR_SUPPORTED


1622 
PNG_EXPORT
(86, , 
≤g_£t_u£r_å™sf‹m_öfo
, (
≤g_°ru˘Ω
 
≤g_±r
,

1623 
≤g_voidp
 
u£r_å™sf‹m_±r
, 
u£r_å™sf‹m_dïth
,

1624 
u£r_å™sf‹m_ch™√ls
));

1626 
PNG_EXPORT
(87, 
≤g_voidp
, 
≤g_gë_u£r_å™sf‹m_±r
,

1627 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

1630 #ifde‡
PNG_USER_TRANSFORM_INFO_SUPPORTED


1642 
PNG_EXPORT
(217, 
≤g_uöt_32
, 
≤g_gë_cuºít_row_numbî
, (
≤g_c⁄°_°ru˘Ω
));

1643 
PNG_EXPORT
(218, 
≤g_byã
, 
≤g_gë_cuºít_∑ss_numbî
, (
≤g_c⁄°_°ru˘Ω
));

1646 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


1666 
PNG_EXPORT
(88, , 
≤g_£t_ªad_u£r_chunk_‚
, (
≤g_°ru˘Ω
 
≤g_±r
,

1667 
≤g_voidp
 
u£r_chunk_±r
, 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
));

1670 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


1671 
PNG_EXPORT
(89, 
≤g_voidp
, 
≤g_gë_u£r_chunk_±r
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

1674 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1678 
PNG_EXPORT
(90, , 
≤g_£t_¥ogªssive_ªad_‚
, (
≤g_°ru˘Ω
 
≤g_±r
,

1679 
≤g_voidp
 
¥ogªssive_±r
, 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
,

1680 
≤g_¥ogªssive_row_±r
 
row_‚
, 
≤g_¥ogªssive_íd_±r
 
íd_‚
));

1683 
PNG_EXPORT
(91, 
≤g_voidp
, 
≤g_gë_¥ogªssive_±r
,

1684 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

1687 
PNG_EXPORT
(92, , 
≤g_¥o˚ss_d©a
, (
≤g_°ru˘Ω
 
≤g_±r
,

1688 
≤g_öf‹p
 
öfo_±r
, 
≤g_byãp
 
buf„r
, 
size_t
 
buf„r_size
));

1697 
PNG_EXPORT
(219, 
size_t
, 
≤g_¥o˚ss_d©a_∑u£
, (
≤g_°ru˘Ω
, 
ßve
));

1705 
PNG_EXPORT
(220, 
≤g_uöt_32
, 
≤g_¥o˚ss_d©a_skù
, (
≤g_°ru˘Ω
));

1712 
PNG_EXPORT
(93, , 
≤g_¥ogªssive_comböe_row
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1713 
≤g_byãp
 
ﬁd_row
, 
≤g_c⁄°_byãp
 
√w_row
));

1716 
PNG_EXPORTA
(94, 
≤g_voidp
, 
≤g_mÆloc
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1717 
≤g_Æloc_size_t
 
size
), 
PNG_ALLOCATED
);

1719 
PNG_EXPORTA
(95, 
≤g_voidp
, 
≤g_ˇŒoc
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1720 
≤g_Æloc_size_t
 
size
), 
PNG_ALLOCATED
);

1723 
PNG_EXPORTA
(96, 
≤g_voidp
, 
≤g_mÆloc_w¨n
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1724 
≤g_Æloc_size_t
 
size
), 
PNG_ALLOCATED
);

1727 
PNG_EXPORT
(97, , 
≤g_‰ì
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
±r
));

1730 
PNG_EXPORT
(98, , 
≤g_‰ì_d©a
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1731 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
‰ì_me
, 
num
));

1740 
PNG_EXPORT
(99, , 
≤g_d©a_‰ìr
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1741 
≤g_öf‹p
 
öfo_±r
, 
‰ìr
, 
≤g_uöt_32
 
mask
));

1744 
	#PNG_DESTROY_WILL_FREE_DATA
 1

	)

1745 
	#PNG_SET_WILL_FREE_DATA
 1

	)

1746 
	#PNG_USER_WILL_FREE_DATA
 2

	)

1748 
	#PNG_FREE_HIST
 0x0008U

	)

1749 
	#PNG_FREE_ICCP
 0x0010U

	)

1750 
	#PNG_FREE_SPLT
 0x0020U

	)

1751 
	#PNG_FREE_ROWS
 0x0040U

	)

1752 
	#PNG_FREE_PCAL
 0x0080U

	)

1753 
	#PNG_FREE_SCAL
 0x0100U

	)

1754 #ifde‡
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


1755 
	#PNG_FREE_UNKN
 0x0200U

	)

1758 
	#PNG_FREE_PLTE
 0x1000U

	)

1759 
	#PNG_FREE_TRNS
 0x2000U

	)

1760 
	#PNG_FREE_TEXT
 0x4000U

	)

1761 
	#PNG_FREE_EXIF
 0x8000U

	)

1762 
	#PNG_FREE_ALL
 0xffffU

	)

1763 
	#PNG_FREE_MUL
 0x4220U

	)

1765 #ifde‡
PNG_USER_MEM_SUPPORTED


1766 
PNG_EXPORTA
(100, 
≤g_voidp
, 
≤g_mÆloc_deÁu…
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1767 
≤g_Æloc_size_t
 
size
), 
PNG_ALLOCATED
 
PNG_DEPRECATED
);

1768 
PNG_EXPORTA
(101, , 
≤g_‰ì_deÁu…
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1769 
≤g_voidp
 
±r
), 
PNG_DEPRECATED
);

1772 #ifde‡
PNG_ERROR_TEXT_SUPPORTED


1774 
PNG_EXPORTA
(102, , 
≤g_îr‹
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1775 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
), 
PNG_NORETURN
);

1778 
PNG_EXPORTA
(103, , 
≤g_chunk_îr‹
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1779 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
), 
PNG_NORETURN
);

1783 
PNG_EXPORTA
(104, , 
≤g_îr
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
), 
PNG_NORETURN
);

1784 
	#≤g_îr‹
(
s1
,
s2
Ë
	`≤g_îr
(s1)

	)

1785 
	#≤g_chunk_îr‹
(
s1
,
s2
Ë
	`≤g_îr
(s1)

	)

1788 #ifde‡
PNG_WARNINGS_SUPPORTED


1790 
PNG_EXPORT
(105, , 
≤g_w¨nög
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1791 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

1794 
PNG_EXPORT
(106, , 
≤g_chunk_w¨nög
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1795 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

1797 
	#≤g_w¨nög
(
s1
,
s2
Ë(()(s1))

	)

1798 
	#≤g_chunk_w¨nög
(
s1
,
s2
Ë(()(s1))

	)

1801 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


1804 
PNG_EXPORT
(107, , 
≤g_bíign_îr‹
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1805 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

1807 #ifde‡
PNG_READ_SUPPORTED


1809 
PNG_EXPORT
(108, , 
≤g_chunk_bíign_îr‹
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1810 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

1813 
PNG_EXPORT
(109, , 
≤g_£t_bíign_îr‹s
,

1814 (
≤g_°ru˘Ω
 
≤g_±r
, 
Ælowed
));

1816 #ifde‡
PNG_ALLOW_BENIGN_ERRORS


1817 
	#≤g_bíign_îr‹
 
≤g_w¨nög


	)

1818 
	#≤g_chunk_bíign_îr‹
 
≤g_chunk_w¨nög


	)

1820 
	#≤g_bíign_îr‹
 
≤g_îr‹


	)

1821 
	#≤g_chunk_bíign_îr‹
 
≤g_chunk_îr‹


	)

1838 
PNG_EXPORT
(110, 
≤g_uöt_32
, 
≤g_gë_vÆid
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1839 
≤g_c⁄°_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Êag
));

1842 
PNG_EXPORT
(111, 
size_t
, 
≤g_gë_rowbyãs
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1843 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1845 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


1849 
PNG_EXPORT
(112, 
≤g_byãµ
, 
≤g_gë_rows
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1850 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1855 
PNG_EXPORT
(113, , 
≤g_£t_rows
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1856 
≤g_öf‹p
 
öfo_±r
, 
≤g_byãµ
 
row_poöãrs
));

1860 
PNG_EXPORT
(114, 
≤g_byã
, 
≤g_gë_ch™√ls
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1861 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1863 #ifde‡
PNG_EASY_ACCESS_SUPPORTED


1865 
PNG_EXPORT
(115, 
≤g_uöt_32
, 
≤g_gë_image_width
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1866 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1869 
PNG_EXPORT
(116, 
≤g_uöt_32
, 
≤g_gë_image_height
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1870 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1873 
PNG_EXPORT
(117, 
≤g_byã
, 
≤g_gë_bô_dïth
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1874 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1877 
PNG_EXPORT
(118, 
≤g_byã
, 
≤g_gë_cﬁ‹_ty≥
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1878 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1881 
PNG_EXPORT
(119, 
≤g_byã
, 
≤g_gë_fûãr_ty≥
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1882 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1885 
PNG_EXPORT
(120, 
≤g_byã
, 
≤g_gë_öãæa˚_ty≥
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1886 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1889 
PNG_EXPORT
(121, 
≤g_byã
, 
≤g_gë_com¥essi⁄_ty≥
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1890 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1893 
PNG_EXPORT
(122, 
≤g_uöt_32
, 
≤g_gë_pixñs_≥r_mëî
,

1894 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1895 
PNG_EXPORT
(123, 
≤g_uöt_32
, 
≤g_gë_x_pixñs_≥r_mëî
,

1896 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1897 
PNG_EXPORT
(124, 
≤g_uöt_32
, 
≤g_gë_y_pixñs_≥r_mëî
,

1898 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1901 
PNG_FP_EXPORT
(125, , 
≤g_gë_pixñ_a•e˘_øtio
,

1902 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
))

1903 
PNG_FIXED_EXPORT
(210, 
≤g_fixed_poöt
, 
≤g_gë_pixñ_a•e˘_øtio_fixed
,

1904 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
))

1907 
PNG_EXPORT
(126, 
≤g_öt_32
, 
≤g_gë_x_off£t_pixñs
,

1908 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1909 
PNG_EXPORT
(127, 
≤g_öt_32
, 
≤g_gë_y_off£t_pixñs
,

1910 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1911 
PNG_EXPORT
(128, 
≤g_öt_32
, 
≤g_gë_x_off£t_mi¸⁄s
,

1912 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1913 
PNG_EXPORT
(129, 
≤g_öt_32
, 
≤g_gë_y_off£t_mi¸⁄s
,

1914 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1918 #ifde‡
PNG_READ_SUPPORTED


1920 
PNG_EXPORT
(130, 
≤g_c⁄°_byãp
, 
≤g_gë_sig«tuª
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1921 
≤g_c⁄°_öf‹p
 
öfo_±r
));

1924 #ifde‡
PNG_bKGD_SUPPORTED


1925 
PNG_EXPORT
(131, 
≤g_uöt_32
, 
≤g_gë_bKGD
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1926 
≤g_öf‹p
 
öfo_±r
, 
≤g_cﬁ‹_16p
 *
background
));

1929 #ifde‡
PNG_bKGD_SUPPORTED


1930 
PNG_EXPORT
(132, , 
≤g_£t_bKGD
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1931 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_cﬁ‹_16p
 
background
));

1934 #ifde‡
PNG_cHRM_SUPPORTED


1935 
PNG_FP_EXPORT
(133, 
≤g_uöt_32
, 
≤g_gë_cHRM
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1936 
≤g_c⁄°_öf‹p
 
öfo_±r
, *
whôe_x
, *
whôe_y
, *
ªd_x
,

1937 *
ªd_y
, *
gªí_x
, *
gªí_y
, *
blue_x
,

1938 *
blue_y
))

1939 
PNG_FP_EXPORT
(230, 
≤g_uöt_32
, 
≤g_gë_cHRM_XYZ
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1940 
≤g_c⁄°_öf‹p
 
öfo_±r
, *
ªd_X
, *
ªd_Y
, *
ªd_Z
,

1941 *
gªí_X
, *
gªí_Y
, *
gªí_Z
, *
blue_X
,

1942 *
blue_Y
, *
blue_Z
))

1943 
PNG_FIXED_EXPORT
(134, 
≤g_uöt_32
, 
≤g_gë_cHRM_fixed
,

1944 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

1945 
≤g_fixed_poöt
 *
öt_whôe_x
,Öng_fixed_poöà*
öt_whôe_y
,

1946 
≤g_fixed_poöt
 *
öt_ªd_x
,Öng_fixed_poöà*
öt_ªd_y
,

1947 
≤g_fixed_poöt
 *
öt_gªí_x
,Öng_fixed_poöà*
öt_gªí_y
,

1948 
≤g_fixed_poöt
 *
öt_blue_x
,Öng_fixed_poöà*
öt_blue_y
))

1949 
PNG_FIXED_EXPORT
(231, 
≤g_uöt_32
, 
≤g_gë_cHRM_XYZ_fixed
,

1950 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

1951 
≤g_fixed_poöt
 *
öt_ªd_X
,Öng_fixed_poöà*
öt_ªd_Y
,

1952 
≤g_fixed_poöt
 *
öt_ªd_Z
,Öng_fixed_poöà*
öt_gªí_X
,

1953 
≤g_fixed_poöt
 *
öt_gªí_Y
,Öng_fixed_poöà*
öt_gªí_Z
,

1954 
≤g_fixed_poöt
 *
öt_blue_X
,Öng_fixed_poöà*
öt_blue_Y
,

1955 
≤g_fixed_poöt
 *
öt_blue_Z
))

1958 #ifde‡
PNG_cHRM_SUPPORTED


1959 
PNG_FP_EXPORT
(135, , 
≤g_£t_cHRM
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1960 
≤g_öf‹p
 
öfo_±r
,

1961 
whôe_x
, 
whôe_y
, 
ªd_x
, 
ªd_y
, 
gªí_x
,

1962 
gªí_y
, 
blue_x
, 
blue_y
))

1963 
PNG_FP_EXPORT
(232, , 
≤g_£t_cHRM_XYZ
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1964 
≤g_öf‹p
 
öfo_±r
, 
ªd_X
, 
ªd_Y
, 
ªd_Z
,

1965 
gªí_X
, 
gªí_Y
, 
gªí_Z
, 
blue_X
,

1966 
blue_Y
, 
blue_Z
))

1967 
PNG_FIXED_EXPORT
(136, , 
≤g_£t_cHRM_fixed
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1968 
≤g_öf‹p
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_whôe_x
,

1969 
≤g_fixed_poöt
 
öt_whôe_y
,Öng_fixed_poöà
öt_ªd_x
,

1970 
≤g_fixed_poöt
 
öt_ªd_y
,Öng_fixed_poöà
öt_gªí_x
,

1971 
≤g_fixed_poöt
 
öt_gªí_y
,Öng_fixed_poöà
öt_blue_x
,

1972 
≤g_fixed_poöt
 
öt_blue_y
))

1973 
PNG_FIXED_EXPORT
(233, , 
≤g_£t_cHRM_XYZ_fixed
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1974 
≤g_öf‹p
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_ªd_X
,Öng_fixed_poöà
öt_ªd_Y
,

1975 
≤g_fixed_poöt
 
öt_ªd_Z
,Öng_fixed_poöà
öt_gªí_X
,

1976 
≤g_fixed_poöt
 
öt_gªí_Y
,Öng_fixed_poöà
öt_gªí_Z
,

1977 
≤g_fixed_poöt
 
öt_blue_X
,Öng_fixed_poöà
öt_blue_Y
,

1978 
≤g_fixed_poöt
 
öt_blue_Z
))

1981 #ifde‡
PNG_eXIf_SUPPORTED


1982 
PNG_EXPORT
(246, 
≤g_uöt_32
, 
≤g_gë_eXIf
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1983 
≤g_öf‹p
 
öfo_±r
, 
≤g_byãp
 *
exif
));

1984 
PNG_EXPORT
(247, , 
≤g_£t_eXIf
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1985 
≤g_öf‹p
 
öfo_±r
, 
≤g_byãp
 
exif
));

1987 
PNG_EXPORT
(248, 
≤g_uöt_32
, 
≤g_gë_eXIf_1
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1988 
≤g_c⁄°_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 *
num_exif
, 
≤g_byãp
 *
exif
));

1989 
PNG_EXPORT
(249, , 
≤g_£t_eXIf_1
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1990 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
num_exif
, 
≤g_byãp
 
exif
));

1993 #ifde‡
PNG_gAMA_SUPPORTED


1994 
PNG_FP_EXPORT
(137, 
≤g_uöt_32
, 
≤g_gë_gAMA
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1995 
≤g_c⁄°_öf‹p
 
öfo_±r
, *
fûe_gamma
))

1996 
PNG_FIXED_EXPORT
(138, 
≤g_uöt_32
, 
≤g_gë_gAMA_fixed
,

1997 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

1998 
≤g_fixed_poöt
 *
öt_fûe_gamma
))

2001 #ifde‡
PNG_gAMA_SUPPORTED


2002 
PNG_FP_EXPORT
(139, , 
≤g_£t_gAMA
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2003 
≤g_öf‹p
 
öfo_±r
, 
fûe_gamma
))

2004 
PNG_FIXED_EXPORT
(140, , 
≤g_£t_gAMA_fixed
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2005 
≤g_öf‹p
 
öfo_±r
, 
≤g_fixed_poöt
 
öt_fûe_gamma
))

2008 #ifde‡
PNG_hIST_SUPPORTED


2009 
PNG_EXPORT
(141, 
≤g_uöt_32
, 
≤g_gë_hIST
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2010 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_16p
 *
hi°
));

2011 
PNG_EXPORT
(142, , 
≤g_£t_hIST
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2012 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_uöt_16p
 
hi°
));

2015 
PNG_EXPORT
(143, 
≤g_uöt_32
, 
≤g_gë_IHDR
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2016 
≤g_c⁄°_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 *
width
,Öng_uöt_32 *
height
,

2017 *
bô_dïth
, *
cﬁ‹_ty≥
, *
öãæa˚_mëhod
,

2018 *
com¥essi⁄_mëhod
, *
fûãr_mëhod
));

2020 
PNG_EXPORT
(144, , 
≤g_£t_IHDR
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2021 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

2022 
cﬁ‹_ty≥
, 
öãæa˚_mëhod
, 
com¥essi⁄_mëhod
,

2023 
fûãr_mëhod
));

2025 #ifde‡
PNG_oFFs_SUPPORTED


2026 
PNG_EXPORT
(145, 
≤g_uöt_32
, 
≤g_gë_oFFs
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2027 
≤g_c⁄°_öf‹p
 
öfo_±r
, 
≤g_öt_32
 *
off£t_x
,Öng_öt_32 *
off£t_y
,

2028 *
unô_ty≥
));

2031 #ifde‡
PNG_oFFs_SUPPORTED


2032 
PNG_EXPORT
(146, , 
≤g_£t_oFFs
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2033 
≤g_öf‹p
 
öfo_±r
, 
≤g_öt_32
 
off£t_x
,Öng_öt_32 
off£t_y
,

2034 
unô_ty≥
));

2037 #ifde‡
PNG_pCAL_SUPPORTED


2038 
PNG_EXPORT
(147, 
≤g_uöt_32
, 
≤g_gë_pCAL
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2039 
≤g_öf‹p
 
öfo_±r
, 
≤g_ch¨p
 *
puΩo£
, 
≤g_öt_32
 *
X0
,

2040 
≤g_öt_32
 *
X1
, *
ty≥
, *
≈¨ams
, 
≤g_ch¨p
 *
unôs
,

2041 
≤g_ch¨µ
 *
∑øms
));

2044 #ifde‡
PNG_pCAL_SUPPORTED


2045 
PNG_EXPORT
(148, , 
≤g_£t_pCAL
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2046 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_ch¨p
 
puΩo£
, 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
,

2047 
ty≥
, 
≈¨ams
, 
≤g_c⁄°_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
));

2050 #ifde‡
PNG_pHYs_SUPPORTED


2051 
PNG_EXPORT
(149, 
≤g_uöt_32
, 
≤g_gë_pHYs
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2052 
≤g_c⁄°_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
,

2053 *
unô_ty≥
));

2056 #ifde‡
PNG_pHYs_SUPPORTED


2057 
PNG_EXPORT
(150, , 
≤g_£t_pHYs
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2058 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
ªs_x
,Öng_uöt_32 
ªs_y
, 
unô_ty≥
));

2061 
PNG_EXPORT
(151, 
≤g_uöt_32
, 
≤g_gë_PLTE
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2062 
≤g_öf‹p
 
öfo_±r
, 
≤g_cﬁ‹p
 *
∑Àâe
, *
num_∑Àâe
));

2064 
PNG_EXPORT
(152, , 
≤g_£t_PLTE
, (
≤g_°ru˘Ω
 
≤g_±r
,

2065 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
));

2067 #ifde‡
PNG_sBIT_SUPPORTED


2068 
PNG_EXPORT
(153, 
≤g_uöt_32
, 
≤g_gë_sBIT
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2069 
≤g_öf‹p
 
öfo_±r
, 
≤g_cﬁ‹_8p
 *
sig_bô
));

2072 #ifde‡
PNG_sBIT_SUPPORTED


2073 
PNG_EXPORT
(154, , 
≤g_£t_sBIT
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2074 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_cﬁ‹_8p
 
sig_bô
));

2077 #ifde‡
PNG_sRGB_SUPPORTED


2078 
PNG_EXPORT
(155, 
≤g_uöt_32
, 
≤g_gë_sRGB
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2079 
≤g_c⁄°_öf‹p
 
öfo_±r
, *
fûe_§gb_öã¡
));

2082 #ifde‡
PNG_sRGB_SUPPORTED


2083 
PNG_EXPORT
(156, , 
≤g_£t_sRGB
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2084 
≤g_öf‹p
 
öfo_±r
, 
§gb_öã¡
));

2085 
PNG_EXPORT
(157, , 
≤g_£t_sRGB_gAMA_™d_cHRM
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2086 
≤g_öf‹p
 
öfo_±r
, 
§gb_öã¡
));

2089 #ifde‡
PNG_iCCP_SUPPORTED


2090 
PNG_EXPORT
(158, 
≤g_uöt_32
, 
≤g_gë_iCCP
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2091 
≤g_öf‹p
 
öfo_±r
, 
≤g_ch¨µ
 
«me
, *
com¥essi⁄_ty≥
,

2092 
≤g_byãµ
 
¥ofûe
, 
≤g_uöt_32
 *
¥oÊí
));

2095 #ifde‡
PNG_iCCP_SUPPORTED


2096 
PNG_EXPORT
(159, , 
≤g_£t_iCCP
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2097 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

2098 
≤g_c⁄°_byãp
 
¥ofûe
, 
≤g_uöt_32
 
¥oÊí
));

2101 #ifde‡
PNG_sPLT_SUPPORTED


2102 
PNG_EXPORT
(160, , 
≤g_gë_sPLT
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2103 
≤g_öf‹p
 
öfo_±r
, 
≤g_sPLT_çp
 
íåõs
));

2106 #ifde‡
PNG_sPLT_SUPPORTED


2107 
PNG_EXPORT
(161, , 
≤g_£t_sPLT
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2108 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_sPLT_ç
 
íåõs
, 
√¡rõs
));

2111 #ifde‡
PNG_TEXT_SUPPORTED


2113 
PNG_EXPORT
(162, , 
≤g_gë_ãxt
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2114 
≤g_öf‹p
 
öfo_±r
, 
≤g_ãxç
 *
ãxt_±r
, *
num_ãxt
));

2124 #ifde‡
PNG_TEXT_SUPPORTED


2125 
PNG_EXPORT
(163, , 
≤g_£t_ãxt
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2126 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_ãxç
 
ãxt_±r
, 
num_ãxt
));

2129 #ifde‡
PNG_tIME_SUPPORTED


2130 
PNG_EXPORT
(164, 
≤g_uöt_32
, 
≤g_gë_tIME
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2131 
≤g_öf‹p
 
öfo_±r
, 
≤g_timï
 *
mod_time
));

2134 #ifde‡
PNG_tIME_SUPPORTED


2135 
PNG_EXPORT
(165, , 
≤g_£t_tIME
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2136 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_timï
 
mod_time
));

2139 #ifde‡
PNG_tRNS_SUPPORTED


2140 
PNG_EXPORT
(166, 
≤g_uöt_32
, 
≤g_gë_tRNS
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2141 
≤g_öf‹p
 
öfo_±r
, 
≤g_byãp
 *
å™s_Æpha
, *
num_å™s
,

2142 
≤g_cﬁ‹_16p
 *
å™s_cﬁ‹
));

2145 #ifde‡
PNG_tRNS_SUPPORTED


2146 
PNG_EXPORT
(167, , 
≤g_£t_tRNS
, (
≤g_°ru˘Ω
 
≤g_±r
,

2147 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_byãp
 
å™s_Æpha
, 
num_å™s
,

2148 
≤g_c⁄°_cﬁ‹_16p
 
å™s_cﬁ‹
));

2151 #ifde‡
PNG_sCAL_SUPPORTED


2152 
PNG_FP_EXPORT
(168, 
≤g_uöt_32
, 
≤g_gë_sCAL
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2153 
≤g_c⁄°_öf‹p
 
öfo_±r
, *
unô
, *
width
, *
height
))

2154 #i‡
deföed
(
PNG_FLOATING_ARITHMETIC_SUPPORTED
) || \

2155 
deföed
(
PNG_FLOATING_POINT_SUPPORTED
)

2161 
PNG_FIXED_EXPORT
(214, 
≤g_uöt_32
, 
≤g_gë_sCAL_fixed
,

2162 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
, *
unô
,

2163 
≤g_fixed_poöt
 *
width
,Öng_fixed_poöà*
height
))

2165 
PNG_EXPORT
(169, 
≤g_uöt_32
, 
≤g_gë_sCAL_s
,

2166 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
, *
unô
,

2167 
≤g_ch¨µ
 
swidth
,Öng_ch¨µ 
sheight
));

2169 
PNG_FP_EXPORT
(170, , 
≤g_£t_sCAL
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2170 
≤g_öf‹p
 
öfo_±r
, 
unô
, 
width
, 
height
))

2171 
PNG_FIXED_EXPORT
(213, , 
≤g_£t_sCAL_fixed
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2172 
≤g_öf‹p
 
öfo_±r
, 
unô
, 
≤g_fixed_poöt
 
width
,

2173 
≤g_fixed_poöt
 
height
))

2174 
PNG_EXPORT
(171, , 
≤g_£t_sCAL_s
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2175 
≤g_öf‹p
 
öfo_±r
, 
unô
,

2176 
≤g_c⁄°_ch¨p
 
swidth
,Öng_c⁄°_ch¨∞
sheight
));

2179 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


2278 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


2279 
PNG_EXPORT
(172, , 
≤g_£t_kìp_unknown_chunks
, (
≤g_°ru˘Ω
 
≤g_±r
,

2280 
kìp
, 
≤g_c⁄°_byãp
 
chunk_li°
, 
num_chunks
));

2287 
PNG_EXPORT
(173, , 
≤g_h™dÀ_as_unknown
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2288 
≤g_c⁄°_byãp
 
chunk_«me
));

2291 #ifde‡
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


2292 
PNG_EXPORT
(174, , 
≤g_£t_unknown_chunks
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2293 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_unknown_chunkp
 
unknowns
,

2294 
num_unknowns
));

2304 
PNG_EXPORT
(175, , 
≤g_£t_unknown_chunk_loˇti⁄
,

2305 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
chunk
, 
loˇti⁄
));

2307 
PNG_EXPORT
(176, , 
≤g_gë_unknown_chunks
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2308 
≤g_öf‹p
 
öfo_±r
, 
≤g_unknown_chunkµ
 
íåõs
));

2315 
PNG_EXPORT
(177, , 
≤g_£t_övÆid
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2316 
≤g_öf‹p
 
öfo_±r
, 
mask
));

2318 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


2320 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


2321 
PNG_EXPORT
(178, , 
≤g_ªad_≤g
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

2322 
å™sf‹ms
, 
≤g_voidp
 
∑øms
));

2324 #ifde‡
PNG_WRITE_SUPPORTED


2325 
PNG_EXPORT
(179, , 
≤g_wrôe_≤g
, (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

2326 
å™sf‹ms
, 
≤g_voidp
 
∑øms
));

2330 
PNG_EXPORT
(180, 
≤g_c⁄°_ch¨p
, 
≤g_gë_c›yright
,

2331 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2332 
PNG_EXPORT
(181, 
≤g_c⁄°_ch¨p
, 
≤g_gë_hódî_vî
,

2333 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2334 
PNG_EXPORT
(182, 
≤g_c⁄°_ch¨p
, 
≤g_gë_hódî_vîsi⁄
,

2335 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2336 
PNG_EXPORT
(183, 
≤g_c⁄°_ch¨p
, 
≤g_gë_lib≤g_vî
,

2337 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2339 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


2340 
PNG_EXPORT
(184, 
≤g_uöt_32
, 
≤g_≥rmô_mng_„©uªs
, (
≤g_°ru˘Ω
 
≤g_±r
,

2341 
≤g_uöt_32
 
mng_„©uªs_≥rmôãd
));

2345 
	#PNG_HANDLE_CHUNK_AS_DEFAULT
 0

	)

2346 
	#PNG_HANDLE_CHUNK_NEVER
 1

	)

2347 
	#PNG_HANDLE_CHUNK_IF_SAFE
 2

	)

2348 
	#PNG_HANDLE_CHUNK_ALWAYS
 3

	)

2349 
	#PNG_HANDLE_CHUNK_LAST
 4

	)

2354 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


2355 
PNG_EXPORT
(185, , 
≤g_£t_°rù_îr‹_numbîs
, (
≤g_°ru˘Ω
 
≤g_±r
,

2356 
≤g_uöt_32
 
°rù_mode
));

2360 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2361 
PNG_EXPORT
(186, , 
≤g_£t_u£r_limôs
, (
≤g_°ru˘Ω
 
≤g_±r
,

2362 
≤g_uöt_32
 
u£r_width_max
,Öng_uöt_32 
u£r_height_max
));

2363 
PNG_EXPORT
(187, 
≤g_uöt_32
, 
≤g_gë_u£r_width_max
,

2364 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2365 
PNG_EXPORT
(188, 
≤g_uöt_32
, 
≤g_gë_u£r_height_max
,

2366 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2368 
PNG_EXPORT
(189, , 
≤g_£t_chunk_ˇche_max
, (
≤g_°ru˘Ω
 
≤g_±r
,

2369 
≤g_uöt_32
 
u£r_chunk_ˇche_max
));

2370 
PNG_EXPORT
(190, 
≤g_uöt_32
, 
≤g_gë_chunk_ˇche_max
,

2371 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2373 
PNG_EXPORT
(191, , 
≤g_£t_chunk_mÆloc_max
, (
≤g_°ru˘Ω
 
≤g_±r
,

2374 
≤g_Æloc_size_t
 
u£r_chunk_ˇche_max
));

2375 
PNG_EXPORT
(192, 
≤g_Æloc_size_t
, 
≤g_gë_chunk_mÆloc_max
,

2376 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2379 #i‡
deföed
(
PNG_INCH_CONVERSIONS_SUPPORTED
)

2380 
PNG_EXPORT
(193, 
≤g_uöt_32
, 
≤g_gë_pixñs_≥r_öch
,

2381 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

2383 
PNG_EXPORT
(194, 
≤g_uöt_32
, 
≤g_gë_x_pixñs_≥r_öch
,

2384 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

2386 
PNG_EXPORT
(195, 
≤g_uöt_32
, 
≤g_gë_y_pixñs_≥r_öch
,

2387 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
));

2389 
PNG_FP_EXPORT
(196, , 
≤g_gë_x_off£t_öches
,

2390 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
))

2391 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2392 
PNG_FIXED_EXPORT
(211, 
≤g_fixed_poöt
, 
≤g_gë_x_off£t_öches_fixed
,

2393 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
))

2396 
PNG_FP_EXPORT
(197, , 
≤g_gë_y_off£t_öches
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2397 
≤g_c⁄°_öf‹p
 
öfo_±r
))

2398 #ifde‡
PNG_FIXED_POINT_SUPPORTED


2399 
PNG_FIXED_EXPORT
(212, 
≤g_fixed_poöt
, 
≤g_gë_y_off£t_öches_fixed
,

2400 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
))

2403 #ifde‡
PNG_pHYs_SUPPORTED


2404 
PNG_EXPORT
(198, 
≤g_uöt_32
, 
≤g_gë_pHYs_dpi
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2405 
≤g_c⁄°_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
,

2406 *
unô_ty≥
));

2411 #ifde‡
PNG_IO_STATE_SUPPORTED


2412 
PNG_EXPORT
(199, 
≤g_uöt_32
, 
≤g_gë_io_°©e
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2415 
PNG_REMOVED
(200, 
≤g_c⁄°_byãp
, 
≤g_gë_io_chunk_«me
, (
≤g_°ru˘Ω
 
≤g_±r
),

2416 
PNG_DEPRECATED
)

2418 
PNG_EXPORT
(216, 
≤g_uöt_32
, 
≤g_gë_io_chunk_ty≥
,

2419 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
));

2422 
	#PNG_IO_NONE
 0x0000

	)

2423 
	#PNG_IO_READING
 0x0001

	)

2424 
	#PNG_IO_WRITING
 0x0002

	)

2425 
	#PNG_IO_SIGNATURE
 0x0010

	)

2426 
	#PNG_IO_CHUNK_HDR
 0x0020

	)

2427 
	#PNG_IO_CHUNK_DATA
 0x0040

	)

2428 
	#PNG_IO_CHUNK_CRC
 0x0080

	)

2429 
	#PNG_IO_MASK_OP
 0x000‡

	)

2430 
	#PNG_IO_MASK_LOC
 0x00f0

	)

2437 
	#PNG_INTERLACE_ADAM7_PASSES
 7

	)

2443 
	#PNG_PASS_START_ROW
(
∑ss
Ë(((1&~’ass))<<(3-(’ass)>>1)))&7)

	)

2444 
	#PNG_PASS_START_COL
(
∑ss
Ë(((1& (∑ss))<<(3-((’ass)+1)>>1)))&7)

	)

2451 
	#PNG_PASS_ROW_OFFSET
(
∑ss
Ë(’ass)>2?(8>>((’ass)-1)>>1)):8)

	)

2452 
	#PNG_PASS_COL_OFFSET
(
∑ss
Ë(1<<((7-’ass))>>1))

	)

2458 
	#PNG_PASS_ROW_SHIFT
(
∑ss
Ë(’ass)>2?(8-’ass))>>1:3)

	)

2459 
	#PNG_PASS_COL_SHIFT
(
∑ss
Ë(’ass)>1?(7-’ass))>>1:3)

	)

2466 
	#PNG_PASS_ROWS
(
height
, 
∑ss
Ë(((height)+(((1<<
	`PNG_PASS_ROW_SHIFT
(pass))\

2467 -1)-
	`PNG_PASS_START_ROW
(
∑ss
)))>>
	`PNG_PASS_ROW_SHIFT
’ass))

	)

2468 
	#PNG_PASS_COLS
(
width
, 
∑ss
Ë(((width)+(((1<<
	`PNG_PASS_COL_SHIFT
(pass))\

2469 -1)-
	`PNG_PASS_START_COL
(
∑ss
)))>>
	`PNG_PASS_COL_SHIFT
’ass))

	)

2475 
	#PNG_ROW_FROM_PASS_ROW
(
y_ö
, 
∑ss
) \

2476 (((
y_ö
)<<
	`PNG_PASS_ROW_SHIFT
(
∑ss
))+
	`PNG_PASS_START_ROW
’ass))

	)

2477 
	#PNG_COL_FROM_PASS_COL
(
x_ö
, 
∑ss
) \

2478 (((
x_ö
)<<
	`PNG_PASS_COL_SHIFT
(
∑ss
))+
	`PNG_PASS_START_COL
’ass))

	)

2486 
	#PNG_PASS_MASK
(
∑ss
,
off
) ( \

2487 ((0x110145AF>>(((7-(
off
))-(
∑ss
))<<2)) & 0xF) | \

2488 ((0x01145AF0>>(((7-(
off
))-(
∑ss
))<<2)Ë& 0xF0))

	)

2490 
	#PNG_ROW_IN_INTERLACE_PASS
(
y
, 
∑ss
) \

2491 ((
	`PNG_PASS_MASK
(
∑ss
,0Ë>> ((
y
)&7)Ë& 1)

	)

2492 
	#PNG_COL_IN_INTERLACE_PASS
(
x
, 
∑ss
) \

2493 ((
	`PNG_PASS_MASK
(
∑ss
,1Ë>> ((
x
)&7)Ë& 1)

	)

2495 #ifde‡
PNG_READ_COMPOSITE_NODIV_SUPPORTED


2510 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2512 
≤g_uöt_16
 
ãmp
 = (≤g_uöt_16)(’ng_uöt_16)(
fg
) \

2513 * (
≤g_uöt_16
)(
Æpha
) \

2514 + (
≤g_uöt_16
)(
bg
)*(png_uint_16)(255 \

2515 - (
≤g_uöt_16
)(
Æpha
)) + 128); \

2516 (
composôe
Ë(
≤g_byã
)(((
ãmp
 + (temp >> 8)) >> 8) & 0xff); \

2517 }

	)

2519 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2521 
≤g_uöt_32
 
ãmp
 = (≤g_uöt_32)(’ng_uöt_32)(
fg
) \

2522 * (
≤g_uöt_32
)(
Æpha
) \

2523 + (
≤g_uöt_32
)(
bg
)*(65535 \

2524 - (
≤g_uöt_32
)(
Æpha
)) + 32768); \

2525 (
composôe
Ë(
≤g_uöt_16
)(0xfff‡& ((
ãmp
 + (temp >> 16)) >> 16)); \

2526 }

	)

2530 
	#≤g_composôe
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2531 (
composôe
) = \

2532 (
≤g_byã
)(0xf‡& (((
≤g_uöt_16
)(
fg
Ë* (≤g_uöt_16)(
Æpha
) + \

2533 (
≤g_uöt_16
)(
bg
Ë* (≤g_uöt_16)(255 - (≤g_uöt_16)(
Æpha
)) + \

2534 127Ë/ 255))

	)

2536 
	#≤g_composôe_16
(
composôe
, 
fg
, 
Æpha
, 
bg
) \

2537 (
composôe
) = \

2538 (
≤g_uöt_16
)(0xfff‡& (((
≤g_uöt_32
)(
fg
Ë* (≤g_uöt_32)(
Æpha
) + \

2539 (
≤g_uöt_32
)(
bg
)*’ng_uöt_32)(65535 - (≤g_uöt_32)(
Æpha
)) + \

2540 32767Ë/ 65535))

	)

2543 #ifde‡
PNG_READ_INT_FUNCTIONS_SUPPORTED


2544 
PNG_EXPORT
(201, 
≤g_uöt_32
, 
≤g_gë_uöt_32
, (
≤g_c⁄°_byãp
 
buf
));

2545 
PNG_EXPORT
(202, 
≤g_uöt_16
, 
≤g_gë_uöt_16
, (
≤g_c⁄°_byãp
 
buf
));

2546 
PNG_EXPORT
(203, 
≤g_öt_32
, 
≤g_gë_öt_32
, (
≤g_c⁄°_byãp
 
buf
));

2549 
PNG_EXPORT
(204, 
≤g_uöt_32
, 
≤g_gë_uöt_31
, (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

2550 
≤g_c⁄°_byãp
 
buf
));

2554 #ifde‡
PNG_WRITE_INT_FUNCTIONS_SUPPORTED


2555 
PNG_EXPORT
(205, , 
≤g_ßve_uöt_32
, (
≤g_byãp
 
buf
, 
≤g_uöt_32
 
i
));

2557 #ifde‡
PNG_SAVE_INT_32_SUPPORTED


2558 
PNG_EXPORT
(206, , 
≤g_ßve_öt_32
, (
≤g_byãp
 
buf
, 
≤g_öt_32
 
i
));

2565 #ifde‡
PNG_WRITE_INT_FUNCTIONS_SUPPORTED


2566 
PNG_EXPORT
(207, , 
≤g_ßve_uöt_16
, (
≤g_byãp
 
buf
, 
i
));

2570 #ifde‡
PNG_USE_READ_MACROS


2575 
	#PNG_gë_uöt_32
(
buf
) \

2576 (((
≤g_uöt_32
)(*(
buf
)) << 24) + \

2577 ((
≤g_uöt_32
)(*((
buf
) + 1)) << 16) + \

2578 ((
≤g_uöt_32
)(*((
buf
) + 2)) << 8) + \

2579 ((
≤g_uöt_32
)(*((
buf
Ë+ 3))))

	)

2584 
	#PNG_gë_uöt_16
(
buf
) \

2585 ((
≤g_uöt_16
) \

2586 ((()(*(
buf
)) << 8) + \

2587 (()(*((
buf
Ë+ 1)))))

	)

2589 
	#PNG_gë_öt_32
(
buf
) \

2590 ((
≤g_öt_32
)((*(
buf
) & 0x80) \

2591 ? -((
≤g_öt_32
)(((
	`≤g_gë_uöt_32
(
buf
)^0xffffffffU)+1U)&0x7fffffffU)) \

2592 : (
≤g_öt_32
)
	`≤g_gë_uöt_32
(
buf
)))

	)

2597 #i‚de‡
PNG_PREFIX


2598 
	#≤g_gë_uöt_32
(
buf
Ë
	`PNG_gë_uöt_32
(buf)

	)

2599 
	#≤g_gë_uöt_16
(
buf
Ë
	`PNG_gë_uöt_16
(buf)

	)

2600 
	#≤g_gë_öt_32
(
buf
Ë
	`PNG_gë_öt_32
(buf)

	)

2603 #ifde‡
PNG_PREFIX


2605 
	#PNG_gë_uöt_32
 (
≤g_gë_uöt_32
)

	)

2606 
	#PNG_gë_uöt_16
 (
≤g_gë_uöt_16
)

	)

2607 
	#PNG_gë_öt_32
 (
≤g_gë_öt_32
)

	)

2611 #ifde‡
PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED


2612 
PNG_EXPORT
(242, , 
≤g_£t_check_f‹_övÆid_ödex
,

2613 (
≤g_°ru˘Ω
 
≤g_±r
, 
Ælowed
));

2614 #ifde‡
PNG_GET_PALETTE_MAX_SUPPORTED


2615 
PNG_EXPORT
(243, , 
≤g_gë_∑Àâe_max
, (
≤g_c⁄°_°ru˘p
 
≤g_±r
,

2616 
≤g_c⁄°_öf›
 
öfo_±r
));

2666 #i‡
deföed
(
PNG_SIMPLIFIED_READ_SUPPORTED
) || \

2667 
deföed
(
PNG_SIMPLIFIED_WRITE_SUPPORTED
)

2669 
	#PNG_IMAGE_VERSION
 1

	)

2671 
≤g_c⁄åﬁ
 *
	t≤g_c⁄åﬁp
;

2674 
≤g_c⁄åﬁp
 
›aque
;

2675 
≤g_uöt_32
 
vîsi⁄
;

2676 
≤g_uöt_32
 
width
;

2677 
≤g_uöt_32
 
height
;

2678 
≤g_uöt_32
 
f‹m©
;

2679 
≤g_uöt_32
 
Êags
;

2680 
≤g_uöt_32
 
cﬁ‹m≠_íåõs
;

2692 
	#PNG_IMAGE_WARNING
 1

	)

2693 
	#PNG_IMAGE_ERROR
 2

	)

2703 
	#PNG_IMAGE_FAILED
(
≤g_˙ål
Ë(((’ng_˙ål).
w¨nög_‹_îr‹
)&0x03)>1)

	)

2705 
≤g_uöt_32
 
w¨nög_‹_îr‹
;

2707 
mesßge
[64];

2708 } 
	t≤g_image
, *
	t≤g_imagï
;

2778 
	#PNG_FORMAT_FLAG_ALPHA
 0x01U

	)

2779 
	#PNG_FORMAT_FLAG_COLOR
 0x02U

	)

2780 
	#PNG_FORMAT_FLAG_LINEAR
 0x04U

	)

2781 
	#PNG_FORMAT_FLAG_COLORMAP
 0x08U

	)

2783 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


2784 
	#PNG_FORMAT_FLAG_BGR
 0x10U

	)

2787 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


2788 
	#PNG_FORMAT_FLAG_AFIRST
 0x20U

	)

2791 
	#PNG_FORMAT_FLAG_ASSOCIATED_ALPHA
 0x40U

	)

2797 
	#PNG_FORMAT_GRAY
 0

	)

2798 
	#PNG_FORMAT_GA
 
PNG_FORMAT_FLAG_ALPHA


	)

2799 
	#PNG_FORMAT_AG
 (
PNG_FORMAT_GA
|
PNG_FORMAT_FLAG_AFIRST
)

	)

2800 
	#PNG_FORMAT_RGB
 
PNG_FORMAT_FLAG_COLOR


	)

2801 
	#PNG_FORMAT_BGR
 (
PNG_FORMAT_FLAG_COLOR
|
PNG_FORMAT_FLAG_BGR
)

	)

2802 
	#PNG_FORMAT_RGBA
 (
PNG_FORMAT_RGB
|
PNG_FORMAT_FLAG_ALPHA
)

	)

2803 
	#PNG_FORMAT_ARGB
 (
PNG_FORMAT_RGBA
|
PNG_FORMAT_FLAG_AFIRST
)

	)

2804 
	#PNG_FORMAT_BGRA
 (
PNG_FORMAT_BGR
|
PNG_FORMAT_FLAG_ALPHA
)

	)

2805 
	#PNG_FORMAT_ABGR
 (
PNG_FORMAT_BGRA
|
PNG_FORMAT_FLAG_AFIRST
)

	)

2810 
	#PNG_FORMAT_LINEAR_Y
 
PNG_FORMAT_FLAG_LINEAR


	)

2811 
	#PNG_FORMAT_LINEAR_Y_ALPHA
 (
PNG_FORMAT_FLAG_LINEAR
|
PNG_FORMAT_FLAG_ALPHA
)

	)

2812 
	#PNG_FORMAT_LINEAR_RGB
 (
PNG_FORMAT_FLAG_LINEAR
|
PNG_FORMAT_FLAG_COLOR
)

	)

2813 
	#PNG_FORMAT_LINEAR_RGB_ALPHA
 \

2814 (
PNG_FORMAT_FLAG_LINEAR
|
PNG_FORMAT_FLAG_COLOR
|
PNG_FORMAT_FLAG_ALPHA
)

	)

2821 
	#PNG_FORMAT_RGB_COLORMAP
 (
PNG_FORMAT_RGB
|
PNG_FORMAT_FLAG_COLORMAP
)

	)

2822 
	#PNG_FORMAT_BGR_COLORMAP
 (
PNG_FORMAT_BGR
|
PNG_FORMAT_FLAG_COLORMAP
)

	)

2823 
	#PNG_FORMAT_RGBA_COLORMAP
 (
PNG_FORMAT_RGBA
|
PNG_FORMAT_FLAG_COLORMAP
)

	)

2824 
	#PNG_FORMAT_ARGB_COLORMAP
 (
PNG_FORMAT_ARGB
|
PNG_FORMAT_FLAG_COLORMAP
)

	)

2825 
	#PNG_FORMAT_BGRA_COLORMAP
 (
PNG_FORMAT_BGRA
|
PNG_FORMAT_FLAG_COLORMAP
)

	)

2826 
	#PNG_FORMAT_ABGR_COLORMAP
 (
PNG_FORMAT_ABGR
|
PNG_FORMAT_FLAG_COLORMAP
)

	)

2846 
	#PNG_IMAGE_SAMPLE_CHANNELS
(
fmt
)\

2847 (((
fmt
)&(
PNG_FORMAT_FLAG_COLOR
|
PNG_FORMAT_FLAG_ALPHA
))+1)

	)

2850 
	#PNG_IMAGE_SAMPLE_COMPONENT_SIZE
(
fmt
)\

2851 ((((
fmt
Ë& 
PNG_FORMAT_FLAG_LINEAR
Ë>> 2)+1)

	)

2856 
	#PNG_IMAGE_SAMPLE_SIZE
(
fmt
)\

2857 (
	`PNG_IMAGE_SAMPLE_CHANNELS
(
fmt
Ë* 
	`PNG_IMAGE_SAMPLE_COMPONENT_SIZE
(fmt))

	)

2863 
	#PNG_IMAGE_MAXIMUM_COLORMAP_COMPONENTS
(
fmt
)\

2864 (
	`PNG_IMAGE_SAMPLE_CHANNELS
(
fmt
Ë* 256)

	)

2879 
	#PNG_IMAGE_PIXEL_
(
ã°
,
fmt
)\

2880 (((
fmt
)&
PNG_FORMAT_FLAG_COLORMAP
)?1:
	`ã°
(fmt))

	)

2882 
	#PNG_IMAGE_PIXEL_CHANNELS
(
fmt
)\

2883 
	`PNG_IMAGE_PIXEL_
(
PNG_IMAGE_SAMPLE_CHANNELS
,
fmt
)

	)

2888 
	#PNG_IMAGE_PIXEL_COMPONENT_SIZE
(
fmt
)\

2889 
	`PNG_IMAGE_PIXEL_
(
PNG_IMAGE_SAMPLE_COMPONENT_SIZE
,
fmt
)

	)

2894 
	#PNG_IMAGE_PIXEL_SIZE
(
fmt
Ë
	`PNG_IMAGE_PIXEL_
(
PNG_IMAGE_SAMPLE_SIZE
,fmt)

	)

2898 
	#PNG_IMAGE_ROW_STRIDE
(
image
)\

2899 (
	`PNG_IMAGE_PIXEL_CHANNELS
((
image
).
f‹m©
Ë* (image).
width
)

	)

2910 
	#PNG_IMAGE_BUFFER_SIZE
(
image
, 
row_°ride
)\

2911 (
	`PNG_IMAGE_PIXEL_COMPONENT_SIZE
((
image
).
f‹m©
)*(image).
height
*(
row_°ride
))

	)

2919 
	#PNG_IMAGE_SIZE
(
image
)\

2920 
	`PNG_IMAGE_BUFFER_SIZE
(
image
, 
	`PNG_IMAGE_ROW_STRIDE
(image))

	)

2925 
	#PNG_IMAGE_COLORMAP_SIZE
(
image
)\

2926 (
	`PNG_IMAGE_SAMPLE_SIZE
((
image
).
f‹m©
Ë* (image).
cﬁ‹m≠_íåõs
)

	)

2938 
	#PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB
 0x01

	)

2943 
	#PNG_IMAGE_FLAG_FAST
 0x02

	)

2954 
	#PNG_IMAGE_FLAG_16BIT_sRGB
 0x04

	)

2972 #ifde‡
PNG_SIMPLIFIED_READ_SUPPORTED


2979 #ifde‡
PNG_STDIO_SUPPORTED


2980 
PNG_EXPORT
(234, , 
≤g_image_begö_ªad_‰om_fûe
, (
≤g_imagï
 
image
,

2981 c⁄° *
fûe_«me
));

2986 
PNG_EXPORT
(235, , 
≤g_image_begö_ªad_‰om_°dio
, (
≤g_imagï
 
image
,

2987 
FILE
* 
fûe
));

2991 
PNG_EXPORT
(236, , 
≤g_image_begö_ªad_‰om_mem‹y
, (
≤g_imagï
 
image
,

2992 
≤g_c⁄°_voidp
 
mem‹y
, 
size_t
 
size
));

2995 
PNG_EXPORT
(237, , 
≤g_image_föish_ªad
, (
≤g_imagï
 
image
,

2996 
≤g_c⁄°_cﬁ‹p
 
background
, *
buf„r
, 
≤g_öt_32
 
row_°ride
,

2997 *
cﬁ‹m≠
));

3030 
PNG_EXPORT
(238, , 
≤g_image_‰ì
, (
≤g_imagï
 
image
));

3036 #ifde‡
PNG_SIMPLIFIED_WRITE_SUPPORTED


3053 #ifde‡
PNG_SIMPLIFIED_WRITE_STDIO_SUPPORTED


3054 
PNG_EXPORT
(239, , 
≤g_image_wrôe_to_fûe
, (
≤g_imagï
 
image
,

3055 c⁄° *
fûe
, 
c⁄vît_to_8bô
, c⁄° *
buf„r
,

3056 
≤g_öt_32
 
row_°ride
, c⁄° *
cﬁ‹m≠
));

3059 
PNG_EXPORT
(240, , 
≤g_image_wrôe_to_°dio
, (
≤g_imagï
 
image
, 
FILE
 *
fûe
,

3060 
c⁄vît_to_8_bô
, c⁄° *
buf„r
, 
≤g_öt_32
 
row_°ride
,

3061 c⁄° *
cﬁ‹m≠
));

3086 
PNG_EXPORT
(245, , 
≤g_image_wrôe_to_mem‹y
, (
≤g_imagï
 
image
, *
mem‹y
,

3087 
≤g_Æloc_size_t
 * 
PNG_RESTRICT
 
mem‹y_byãs
, 
c⁄vît_to_8_bô
,

3088 c⁄° *
buf„r
, 
≤g_öt_32
 
row_°ride
, c⁄° *
cﬁ‹m≠
));

3111 
	#≤g_image_wrôe_gë_mem‹y_size
(
image
, 
size
, 
c⁄vît_to_8_bô
, 
buf„r
,\

3112 
row_°ride
, 
cﬁ‹m≠
)\

3113 
	`≤g_image_wrôe_to_mem‹y
(&(
image
), 0, &(
size
), 
c⁄vît_to_8_bô
, 
buf„r
,\

3114 
row_°ride
, 
cﬁ‹m≠
)

	)

3130 
	#PNG_IMAGE_DATA_SIZE
(
image
Ë(
	`PNG_IMAGE_SIZE
(image)+(image).
height
)

	)

3140 #i‚de‡
PNG_ZLIB_MAX_SIZE


3141 
	#PNG_ZLIB_MAX_SIZE
(
b
Ë((b)+(((b)+7U)>>3)+(((b)+63U)>>6)+11U)

	)

3150 
	#PNG_IMAGE_COMPRESSED_SIZE_MAX
(
image
)\

3151 
	`PNG_ZLIB_MAX_SIZE
((
≤g_Æloc_size_t
)
	`PNG_IMAGE_DATA_SIZE
(
image
))

	)

3154 
	#PNG_IMAGE_PNG_SIZE_MAX_
(
image
, 
image_size
)\

3156 (((
image
).
f‹m©
&
PNG_FORMAT_FLAG_COLORMAP
)? \

3157 12U+3U*(
image
).
cﬁ‹m≠_íåõs
 +\

3158 (((
image
).
f‹m©
&
PNG_FORMAT_FLAG_ALPHA
)?\

3159 12U +(
image
).
cﬁ‹m≠_íåõs
:0U):0U)+\

3160 12U)+(12U*((
image_size
)/
PNG_ZBUF_SIZE
)Ë+(image_size))

	)

3167 
	#PNG_IMAGE_PNG_SIZE_MAX
(
image
)\

3168 
	`PNG_IMAGE_PNG_SIZE_MAX_
(
image
, 
	`PNG_IMAGE_COMPRESSED_SIZE_MAX
(image))

	)

3201 #ifde‡
PNG_SET_OPTION_SUPPORTED


3202 #ifde‡
PNG_ARM_NEON_API_SUPPORTED


3203 
	#PNG_ARM_NEON
 0

	)

3205 
	#PNG_MAXIMUM_INFLATE_WINDOW
 2

	)

3206 
	#PNG_SKIP_sRGB_CHECK_PROFILE
 4

	)

3207 #ifde‡
PNG_MIPS_MSA_API_SUPPORTED


3208 
	#PNG_MIPS_MSA
 6

	)

3210 
	#PNG_IGNORE_ADLER32
 8

	)

3211 #ifde‡
PNG_POWERPC_VSX_API_SUPPORTED


3212 
	#PNG_POWERPC_VSX
 10

	)

3214 
	#PNG_OPTION_NEXT
 12

	)

3217 
	#PNG_OPTION_UNSET
 0

	)

3218 
	#PNG_OPTION_INVALID
 1

	)

3219 
	#PNG_OPTION_OFF
 2

	)

3220 
	#PNG_OPTION_ON
 3

	)

3222 
PNG_EXPORT
(244, , 
≤g_£t_›ti⁄
, (
≤g_°ru˘Ω
 
≤g_±r
, 
›ti⁄
,

3223 
⁄off
));

3237 #ifde‡
PNG_EXPORT_LAST_ORDINAL


3238 
PNG_EXPORT_LAST_ORDINAL
(249);

3241 #ifde‡
__˝lu•lus


	@pngconf.h

21 #i‚de‡
PNGCONF_H


22 
	#PNGCONF_H


	)

24 #i‚de‡
PNG_BUILDING_SYMBOL_TABLE


31 
	~<limôs.h
>

32 
	~<°ddef.h
>

44 #ifde‡
PNG_STDIO_SUPPORTED


46 
	~<°dio.h
>

49 #ifde‡
PNG_SETJMP_SUPPORTED


51 
	~<£tjmp.h
>

54 #ifde‡
PNG_CONVERT_tIME_SUPPORTED


56 
	~<time.h
>

64 
	#PNG_CONST
 c⁄°

	)

72 #i‚de‡
PNG_READ_INT_FUNCTIONS_SUPPORTED


73 
	#PNG_USE_READ_MACROS


	)

75 #i‡!
deföed
(
PNG_NO_USE_READ_MACROS
Ë&& !deföed(
PNG_USE_READ_MACROS
)

76 #i‡
PNG_DEFAULT_READ_MACROS


77 
	#PNG_USE_READ_MACROS


	)

93 #i‚de‡
PNGARG


94 
	#PNGARG
(
¨gli°
Ë
	)
arglist

183 #i‡
deföed
(
_Wödows
Ë|| deföed(
_WINDOWS
Ë|| deföed(
WIN32
) ||\

184 
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| 
	$deföed
(
__CYGWIN__
)

190 #i‡
PNG_API_RULE
 == 2

196 
	#PNGCAPI
 
__w©ˇŒ


	)

199 #i‡
	`deföed
(
__GNUC__
Ë|| (deföed(
_MSC_VER
) && (_MSC_VER >= 800))

200 
	#PNGCAPI
 
__cde˛


	)

201 #i‡
PNG_API_RULE
 == 1

205 
	#PNGAPI
 
__°dˇŒ


	)

212 #i‚de‡
PNGCAPI


213 
	#PNGCAPI
 
_cde˛


	)

215 #i‡
PNG_API_RULE
 =1 && !
	`deföed
(
PNGAPI
)

216 
	#PNGAPI
 
_°dˇŒ


	)

222 #i‡
	`deföed
(
PNGAPI
Ë&& !deföed(
PNG_USER_PRIVATEBUILD
)

226 #i‡(
	`deföed
(
_MSC_VER
) && _MSC_VER < 800) ||\

227 (
	`deföed
(
__BORLANDC__
) && __BORLANDC__ < 0x500)

232 #i‚de‡
PNG_EXPORT_TYPE


233 
	#PNG_EXPORT_TYPE
(
ty≥
Ëty≥ 
PNG_IMPEXP


	)

235 
	#PNG_DLL_EXPORT
 
__exp‹t


	)

237 
	#PNG_DLL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

238 #i‚de‡
PNG_DLL_IMPORT


239 
	#PNG_DLL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

244 #i‡(
	`deföed
(
__IBMC__
Ë|| deföed(
__IBMCPP__
)Ë&& deföed(
__OS2__
)

245 
	#PNGAPI
 
_Sy°em


	)

254 #i‚de‡
PNGCAPI


255 
	#PNGCAPI


	)

257 #i‚de‡
PNGCBAPI


258 
	#PNGCBAPI
 
PNGCAPI


	)

260 #i‚de‡
PNGAPI


261 
	#PNGAPI
 
PNGCAPI


	)

268 #i‚de‡
PNG_IMPEXP


269 #i‡
	`deföed
(
PNG_USE_DLL
Ë&& deföed(
PNG_DLL_IMPORT
)

271 
	#PNG_IMPEXP
 
PNG_DLL_IMPORT


	)

274 #i‚de‡
PNG_IMPEXP


275 
	#PNG_IMPEXP


	)

286 #i‚de‡
PNG_FUNCTION


287 
	#PNG_FUNCTION
(
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
Ë©åibuã†ty≥Çamê
	)
args

290 #i‚de‡
PNG_EXPORT_TYPE


291 
	#PNG_EXPORT_TYPE
(
ty≥
Ë
PNG_IMPEXP
 
	)
type

299 #i‚de‡
PNG_EXPORTA


300 
	#PNG_EXPORTA
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
) \

301 
	`PNG_FUNCTION
(
	`PNG_EXPORT_TYPE
(
ty≥
), (
PNGAPI
 
«me
), 
	`PNGARG
(
¨gs
), \

302 
PNG_LINKAGE_API
 
©åibuãs
)

	)

308 
	#PNG_EMPTY


	)

310 
	#PNG_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
) \

311 
	`PNG_EXPORTA
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
, 
PNG_EMPTY
)

	)

314 #i‚de‡
PNG_REMOVED


315 
	#PNG_REMOVED
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)

	)

318 #i‚de‡
PNG_CALLBACK


319 
	#PNG_CALLBACK
(
ty≥
, 
«me
, 
¨gs
Ë
	`ty≥
 (
PNGCBAPI
ÇameË
	`PNGARG
◊rgs)

	)

329 #i‚de‡
PNG_NO_PEDANTIC_WARNINGS


330 #i‚de‡
PNG_PEDANTIC_WARNINGS_SUPPORTED


331 
	#PNG_PEDANTIC_WARNINGS_SUPPORTED


	)

335 #ifde‡
PNG_PEDANTIC_WARNINGS_SUPPORTED


342 #i‡
	`deföed
(
__˛™g__
Ë&& deföed(
__has_©åibuã
)

344 #i‡!
	`deföed
(
PNG_USE_RESULT
Ë&& 
	`__has_©åibuã
(
__w¨n_unu£d_ªsu…__
)

345 
	#PNG_USE_RESULT
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

347 #i‡!
	`deföed
(
PNG_NORETURN
Ë&& 
	`__has_©åibuã
(
__n‹ëu∫__
)

348 
	#PNG_NORETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

350 #i‡!
	`deföed
(
PNG_ALLOCATED
Ë&& 
	`__has_©åibuã
(
__mÆloc__
)

351 
	#PNG_ALLOCATED
 
	`__©åibuã__
((
__mÆloc__
))

	)

353 #i‡!
	`deföed
(
PNG_DEPRECATED
Ë&& 
	`__has_©åibuã
(
__dïªˇãd__
)

354 
	#PNG_DEPRECATED
 
	`__©åibuã__
((
__dïªˇãd__
))

	)

356 #i‡!
	`deföed
(
PNG_PRIVATE
)

357 #ifde‡
__has_exãnsi⁄


358 #i‡
	`__has_exãnsi⁄
(
©åibuã_u«vaûabÀ_wôh_mesßge
)

359 
	#PNG_PRIVATE
 
	`__©åibuã__
((
	`__u«vaûabÀ__
(\

360 "Thi†fun˘i⁄ i†nŸÉxp‹ãd byÜib≤g.")))

	)

364 #i‚de‡
PNG_RESTRICT


365 
	#PNG_RESTRICT
 
__ª°ri˘


	)

368 #ñi‡
	`deföed
(
__GNUC__
)

369 #i‚de‡
PNG_USE_RESULT


370 
	#PNG_USE_RESULT
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

372 #i‚de‡
PNG_NORETURN


373 
	#PNG_NORETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

375 #i‡
__GNUC__
 >= 3

376 #i‚de‡
PNG_ALLOCATED


377 
	#PNG_ALLOCATED
 
	`__©åibuã__
((
__mÆloc__
))

	)

379 #i‚de‡
PNG_DEPRECATED


380 
	#PNG_DEPRECATED
 
	`__©åibuã__
((
__dïªˇãd__
))

	)

382 #i‚de‡
PNG_PRIVATE


384 
	#PNG_PRIVATE
 \

385 
	`__©åibuã__
((
	`w¨nög
("Thi†fun˘i⁄ i†nŸÉxp‹ãd byÜib≤g.")))

	)

387 
	#PNG_PRIVATE
 \

388 
	`__©åibuã__
((
__dïªˇãd__
))

	)

391 #i‡((
__GNUC__
 > 3Ë|| !
	`deföed
(
__GNUC_MINOR__
) || (__GNUC_MINOR__ >= 1))

392 #i‚de‡
PNG_RESTRICT


393 
	#PNG_RESTRICT
 
__ª°ri˘


	)

398 #ñi‡
	`deföed
(
_MSC_VER
) && (_MSC_VER >= 1300)

399 #i‚de‡
PNG_USE_RESULT


400 
	#PNG_USE_RESULT


	)

402 #i‚de‡
PNG_NORETURN


403 
	#PNG_NORETURN
 
	`__de˛•ec
(
n‹ëu∫
)

	)

405 #i‚de‡
PNG_ALLOCATED


406 #i‡(
_MSC_VER
 >= 1400)

407 
	#PNG_ALLOCATED
 
	`__de˛•ec
(
ª°ri˘
)

	)

410 #i‚de‡
PNG_DEPRECATED


411 
	#PNG_DEPRECATED
 
	`__de˛•ec
(
dïªˇãd
)

	)

413 #i‚de‡
PNG_PRIVATE


414 
	#PNG_PRIVATE
 
	`__de˛•ec
(
dïªˇãd
)

	)

416 #i‚de‡
PNG_RESTRICT


417 #i‡(
_MSC_VER
 >= 1400)

418 
	#PNG_RESTRICT
 
__ª°ri˘


	)

422 #ñi‡
	`deföed
(
__WATCOMC__
)

423 #i‚de‡
PNG_RESTRICT


424 
	#PNG_RESTRICT
 
__ª°ri˘


	)

429 #i‚de‡
PNG_DEPRECATED


430 
	#PNG_DEPRECATED


	)

432 #i‚de‡
PNG_USE_RESULT


433 
	#PNG_USE_RESULT


	)

435 #i‚de‡
PNG_NORETURN


436 
	#PNG_NORETURN


	)

438 #i‚de‡
PNG_ALLOCATED


439 
	#PNG_ALLOCATED


	)

441 #i‚de‡
PNG_PRIVATE


442 
	#PNG_PRIVATE


	)

444 #i‚de‡
PNG_RESTRICT


445 
	#PNG_RESTRICT


	)

448 #i‚de‡
PNG_FP_EXPORT


449 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


450 
	#PNG_FP_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
)\

451 
	`PNG_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
);

	)

453 
	#PNG_FP_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
)

	)

456 #i‚de‡
PNG_FIXED_EXPORT


457 #ifde‡
PNG_FIXED_POINT_SUPPORTED


458 
	#PNG_FIXED_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
)\

459 
	`PNG_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
);

	)

461 
	#PNG_FIXED_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
)

	)

465 #i‚de‡
PNG_BUILDING_SYMBOL_TABLE


480 #i‡
CHAR_BIT
 =8 && 
UCHAR_MAX
 == 255

481 
	t≤g_byã
;

486 #i‡
INT_MIN
 =-32768 && 
INT_MAX
 == 32767

487 
	t≤g_öt_16
;

488 #ñi‡
SHRT_MIN
 =-32768 && 
SHRT_MAX
 == 32767

489 
	t≤g_öt_16
;

494 #i‡
UINT_MAX
 == 65535

495 
	t≤g_uöt_16
;

496 #ñi‡
USHRT_MAX
 == 65535

497 
	t≤g_uöt_16
;

502 #i‡
INT_MIN
 < -2147483646 && 
INT_MAX
 > 2147483646

503 
	t≤g_öt_32
;

504 #ñi‡
LONG_MIN
 < -2147483646 && 
LONG_MAX
 > 2147483646

505 
	t≤g_öt_32
;

510 #i‡
UINT_MAX
 > 4294967294U

511 
	t≤g_uöt_32
;

512 #ñi‡
ULONG_MAX
 > 4294967294U

513 
	t≤g_uöt_32
;

523 
size_t
 
	t≤g_size_t
;

524 
±rdiff_t
 
	t≤g_±rdiff_t
;

531 #i‚de‡
PNG_SMALL_SIZE_T


536 #i‡(
	`deföed
(
__TURBOC__
Ë&& !deföed(
__FLAT__
)) ||\

537 (
	`deföed
(
_MSC_VER
Ë&& 
	$deföed
(
MAXSEG_64K
))

538 
	#PNG_SMALL_SIZE_T


	)

554 #ifde‡
PNG_SMALL_SIZE_T


555 
≤g_uöt_32
 
	t≤g_Æloc_size_t
;

557 
size_t
 
	t≤g_Æloc_size_t
;

574 
≤g_öt_32
 
	t≤g_fixed_poöt
;

577 * 
	t≤g_voidp
;

578 c⁄° * 
	t≤g_c⁄°_voidp
;

579 
≤g_byã
 * 
	t≤g_byãp
;

580 c⁄° 
	t≤g_byã
 * 
	t≤g_c⁄°_byãp
;

581 
≤g_uöt_32
 * 
	t≤g_uöt_32p
;

582 c⁄° 
	t≤g_uöt_32
 * 
	t≤g_c⁄°_uöt_32p
;

583 
≤g_öt_32
 * 
	t≤g_öt_32p
;

584 c⁄° 
	t≤g_öt_32
 * 
	t≤g_c⁄°_öt_32p
;

585 
≤g_uöt_16
 * 
	t≤g_uöt_16p
;

586 c⁄° 
	t≤g_uöt_16
 * 
	t≤g_c⁄°_uöt_16p
;

587 
≤g_öt_16
 * 
	t≤g_öt_16p
;

588 c⁄° 
	t≤g_öt_16
 * 
	t≤g_c⁄°_öt_16p
;

589 * 
	t≤g_ch¨p
;

590 c⁄° * 
	t≤g_c⁄°_ch¨p
;

591 
≤g_fixed_poöt
 * 
	t≤g_fixed_poöt_p
;

592 c⁄° 
	t≤g_fixed_poöt
 * 
	t≤g_c⁄°_fixed_poöt_p
;

593 
size_t
 * 
	t≤g_size_ç
;

594 c⁄° 
	tsize_t
 * 
	t≤g_c⁄°_size_ç
;

596 #ifde‡
PNG_STDIO_SUPPORTED


597 
FILE
 * 
	t≤g_FILE_p
;

600 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


601 * 
	t≤g_doubÀp
;

602 c⁄° * 
	t≤g_c⁄°_doubÀp
;

606 
≤g_byã
 * * 
	t≤g_byãµ
;

607 
≤g_uöt_32
 * * 
	t≤g_uöt_32µ
;

608 
≤g_öt_32
 * * 
	t≤g_öt_32µ
;

609 
≤g_uöt_16
 * * 
	t≤g_uöt_16µ
;

610 
≤g_öt_16
 * * 
	t≤g_öt_16µ
;

611 c⁄° * * 
	t≤g_c⁄°_ch¨µ
;

612 * * 
	t≤g_ch¨µ
;

613 
≤g_fixed_poöt
 * * 
	t≤g_fixed_poöt_µ
;

614 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


615 * * 
	t≤g_doubÀµ
;

619 * * * 
	t≤g_ch¨µp
;

	@pngdebug.h

34 #i‚de‡
PNGDEBUG_H


35 
	#PNGDEBUG_H


	)

38 #i‚de‡
PNG_LITERAL_SHARP


39 
	#PNG_LITERAL_SHARP
 0x23

	)

41 #i‚de‡
PNG_LITERAL_LEFT_SQUARE_BRACKET


42 
	#PNG_LITERAL_LEFT_SQUARE_BRACKET
 0x5b

	)

44 #i‚de‡
PNG_LITERAL_RIGHT_SQUARE_BRACKET


45 
	#PNG_LITERAL_RIGHT_SQUARE_BRACKET
 0x5d

	)

47 #i‚de‡
PNG_STRING_NEWLINE


48 
	#PNG_STRING_NEWLINE
 "\n"

	)

51 #ifde‡
PNG_DEBUG


52 #i‡(
PNG_DEBUG
 > 0)

53 #i‡!
deföed
(
PNG_DEBUG_FILE
Ë&& deföed(
_MSC_VER
)

54 
	~<¸tdbg.h
>

55 #i‡(
PNG_DEBUG
 > 1)

56 #i‚de‡
_DEBUG


57 
	#_DEBUG


	)

59 #i‚de‡
≤g_debug


60 
	#≤g_debug
(
l
,
m
Ë
	`_RPT0
(
_CRT_WARN
,m 
PNG_STRING_NEWLINE
)

	)

62 #i‚de‡
≤g_debug1


63 
	#≤g_debug1
(
l
,
m
,
p1
Ë
	`_RPT1
(
_CRT_WARN
,m 
PNG_STRING_NEWLINE
,p1)

	)

65 #i‚de‡
≤g_debug2


66 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

67 
	`_RPT2
(
_CRT_WARN
,
m
 
PNG_STRING_NEWLINE
,
p1
,
p2
)

	)

71 #i‚de‡
PNG_STDIO_SUPPORTED


72 
	~<°dio.h
>

74 #i‚de‡
PNG_DEBUG_FILE


75 
	#PNG_DEBUG_FILE
 
°dîr


	)

78 #i‡(
PNG_DEBUG
 > 1)

79 #ifde‡
__STDC__


80 #i‚de‡
≤g_debug


81 
	#≤g_debug
(
l
,
m
) \

83 
num_èbs
=
l
; \

84 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s" 
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? " " : \

85 (
num_èbs
==2 ? " " : (num_tabs>2 ? " " : "")))); \

86 } 0)

	)

88 #i‚de‡
≤g_debug1


89 
	#≤g_debug1
(
l
,
m
,
p1
) \

91 
num_èbs
=
l
; \

92 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s" 
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? " " : \

93 (
num_èbs
==2 ? " " : (num_èbs>2 ? " " : ""))),
p1
); \

94 } 0)

	)

96 #i‚de‡
≤g_debug2


97 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

99 
num_èbs
=
l
; \

100 
	`Ârötf
(
PNG_DEBUG_FILE
,"%s" 
m
 
PNG_STRING_NEWLINE
,(
num_èbs
==1 ? " " : \

101 (
num_èbs
==2 ? " " : (num_èbs>2 ? " " : ""))),
p1
,
p2
);\

102 } 0)

	)

105 #i‚de‡
≤g_debug


106 
	#≤g_debug
(
l
,
m
) \

108 
num_èbs
=
l
; \

109 
f‹m©
[256]; \

110 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

111 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

112 
m
,
PNG_STRING_NEWLINE
); \

113 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
); \

114 } 0)

	)

116 #i‚de‡
≤g_debug1


117 
	#≤g_debug1
(
l
,
m
,
p1
) \

119 
num_èbs
=
l
; \

120 
f‹m©
[256]; \

121 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

122 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

123 
m
,
PNG_STRING_NEWLINE
); \

124 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
,
p1
); \

125 } 0)

	)

127 #i‚de‡
≤g_debug2


128 
	#≤g_debug2
(
l
,
m
,
p1
,
p2
) \

130 
num_èbs
=
l
; \

131 
f‹m©
[256]; \

132 
	`¢¥ötf
(
f‹m©
,256,"%s%s%s",(
num_èbs
==1 ? "\t" : \

133 (
num_èbs
==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))), \

134 
m
,
PNG_STRING_NEWLINE
); \

135 
	`Ârötf
(
PNG_DEBUG_FILE
,
f‹m©
,
p1
,
p2
); \

136 } 0)

	)

144 #i‚de‡
≤g_debug


145 
	#≤g_debug
(
l
, 
m
Ë(()0)

	)

147 #i‚de‡
≤g_debug1


148 
	#≤g_debug1
(
l
, 
m
, 
p1
Ë(()0)

	)

150 #i‚de‡
≤g_debug2


151 
	#≤g_debug2
(
l
, 
m
, 
p1
, 
p2
Ë(()0)

	)

	@pngerror.c

19 
	~"≤g¥iv.h
"

21 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë|| deföed(
PNG_WRITE_SUPPORTED
)

23 
PNG_FUNCTION
(, 
≤g_deÁu…_îr‹
,
PNGARG
((
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

24 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)),
PNG_NORETURN
);

26 #ifde‡
PNG_WARNINGS_SUPPORTED


28 
≤g_deÁu…_w¨nög
 
PNGARG
((
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

29 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
));

37 #ifde‡
PNG_ERROR_TEXT_SUPPORTED


38 
PNG_FUNCTION
(,
PNGAPI


39 
≤g_îr‹
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
),

40 
PNG_NORETURN
)

42 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


43 
	gmsg
[16];

44 i‡(
	g≤g_±r
 !
NULL
)

46 i‡((
≤g_±r
->
Êags
 &

47 (
PNG_FLAG_STRIP_ERROR_NUMBERS
|
PNG_FLAG_STRIP_ERROR_TEXT
)) != 0)

49 i‡(*
îr‹_mesßge
 =
PNG_LITERAL_SHARP
)

52 
off£t
;

53 
	goff£t
 = 1; offset<15; offset++)

54 i‡(
	gîr‹_mesßge
[
off£t
] == ' ')

57 i‡((
	g≤g_±r
->
	gÊags
 & 
	gPNG_FLAG_STRIP_ERROR_TEXT
) != 0)

59 
i
;

60 
	gi
 = 0; i < 
	goff£t
 - 1; i++)

61 
	gmsg
[
i
] = 
îr‹_mesßge
[i + 1];

62 
	gmsg
[
i
 - 1] = '\0';

63 
	gîr‹_mesßge
 = 
msg
;

67 
	gîr‹_mesßge
 +
off£t
;

72 i‡((
	g≤g_±r
->
	gÊags
 & 
	gPNG_FLAG_STRIP_ERROR_TEXT
) != 0)

74 
msg
[0] = '0';

75 
	gmsg
[1] = '\0';

76 
	gîr‹_mesßge
 = 
msg
;

82 i‡(
	g≤g_±r
 !
NULL
 && 
≤g_±r
->
îr‹_‚
 != NULL)

83 (*(
≤g_±r
->
îr‹_‚
))(
≤g_c⁄°ˇ°
(
≤g_°ru˘Ω
,png_ptr),

84 
	gîr‹_mesßge
);

88 
≤g_deÁu…_îr‹
(
≤g_±r
, 
îr‹_mesßge
);

91 
PNG_FUNCTION
(,
PNGAPI


92 
≤g_îr
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
),
PNG_NORETURN
)

99 i‡(
	g≤g_±r
 !
NULL
 && 
≤g_±r
->
îr‹_‚
 != NULL)

100 (*(
≤g_±r
->
îr‹_‚
))(
≤g_c⁄°ˇ°
(
≤g_°ru˘Ω
,png_ptr), "");

104 
≤g_deÁu…_îr‹
(
≤g_±r
, "");

111 
size_t


112 
	$≤g_ß„ˇt
(
≤g_ch¨p
 
buf„r
, 
size_t
 
bufsize
, size_à
pos
,

113 
≤g_c⁄°_ch¨p
 
°rög
)

115 i‡(
buf„r
 !
NULL
 && 
pos
 < 
bufsize
)

117 i‡(
°rög
 !
NULL
)

118 *
°rög
 !'\0' && 
pos
 < 
bufsize
-1)

119 
buf„r
[
pos
++] = *
°rög
++;

121 
buf„r
[
pos
] = '\0';

124  
pos
;

125 
	}
}

127 #i‡
deföed
(
PNG_WARNINGS_SUPPORTED
Ë|| deföed(
PNG_TIME_RFC1123_SUPPORTED
)

132 
≤g_ch¨p


133 
	$≤g_f‹m©_numbî
(
≤g_c⁄°_ch¨p
 
°¨t
, 
≤g_ch¨p
 
íd
, 
f‹m©
,

134 
≤g_Æloc_size_t
 
numbî
)

136 
cou¡
 = 0;

137 
möcou¡
 = 1;

138 
ouçut
 = 0;

140 *--
íd
 = '\0';

145 
íd
 > 
°¨t
 && (
numbî
 !0 || 
cou¡
 < 
möcou¡
))

148 c⁄° 
digôs
[] = "0123456789ABCDEF";

150 
f‹m©
)

152 
PNG_NUMBER_FORMAT_fixed
:

154 
möcou¡
 = 5;

155 i‡(
ouçut
 !0 || 
numbî
 % 10 != 0)

157 *--
íd
 = 
digôs
[
numbî
 % 10];

158 
ouçut
 = 1;

160 
numbî
 /= 10;

163 
PNG_NUMBER_FORMAT_02u
:

165 
möcou¡
 = 2;

168 
PNG_NUMBER_FORMAT_u
:

169 *--
íd
 = 
digôs
[
numbî
 % 10];

170 
numbî
 /= 10;

173 
PNG_NUMBER_FORMAT_02x
:

175 
möcou¡
 = 2;

178 
PNG_NUMBER_FORMAT_x
:

179 *--
íd
 = 
digôs
[
numbî
 & 0xf];

180 
numbî
 >>= 4;

184 
numbî
 = 0;

189 ++
cou¡
;

192 i‡((
f‹m©
 =
PNG_NUMBER_FORMAT_fixed
Ë&& (
cou¡
 =5Ë&& (
íd
 > 
°¨t
))

198 i‡(
ouçut
 != 0)

199 *--
íd
 = '.';

200 i‡(
numbî
 == 0)

201 *--
íd
 = '0';

205  
íd
;

206 
	}
}

209 #ifde‡
PNG_WARNINGS_SUPPORTED


215 
PNGAPI


216 
	$≤g_w¨nög
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
)

218 
off£t
 = 0;

219 i‡(
≤g_±r
 !
NULL
)

221 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


222 i‡((
≤g_±r
->
Êags
 &

223 (
PNG_FLAG_STRIP_ERROR_NUMBERS
|
PNG_FLAG_STRIP_ERROR_TEXT
)) != 0)

226 i‡(*
w¨nög_mesßge
 =
PNG_LITERAL_SHARP
)

228 
off£t
 = 1; offset < 15; offset++)

229 i‡(
w¨nög_mesßge
[
off£t
] == ' ')

234 i‡(
≤g_±r
 !
NULL
 &&Öng_±r->
w¨nög_‚
 != NULL)

235 (*(
≤g_±r
->
w¨nög_‚
))(
	`≤g_c⁄°ˇ°
(
≤g_°ru˘Ω
,png_ptr),

236 
w¨nög_mesßge
 + 
off£t
);

238 
	`≤g_deÁu…_w¨nög
(
≤g_±r
, 
w¨nög_mesßge
 + 
off£t
);

239 
	}
}

247 
	$≤g_w¨nög_∑ømëî
(
≤g_w¨nög_∑ømëîs
 
p
, 
numbî
,

248 
≤g_c⁄°_ch¨p
 
°rög
)

250 i‡(
numbî
 > 0 &&Çumbî <
PNG_WARNING_PARAMETER_COUNT
)

251 ()
	`≤g_ß„ˇt
(
p
[
numbî
-1], (Ö[numbî-1]), 0, 
°rög
);

252 
	}
}

255 
	$≤g_w¨nög_∑ømëî_unsig√d
(
≤g_w¨nög_∑ømëîs
 
p
, 
numbî
, 
f‹m©
,

256 
≤g_Æloc_size_t
 
vÆue
)

258 
buf„r
[
PNG_NUMBER_BUFFER_SIZE
];

259 
	`≤g_w¨nög_∑ømëî
(
p
, 
numbî
, 
	`PNG_FORMAT_NUMBER
(
buf„r
, 
f‹m©
, 
vÆue
));

260 
	}
}

263 
	$≤g_w¨nög_∑ømëî_sig√d
(
≤g_w¨nög_∑ømëîs
 
p
, 
numbî
, 
f‹m©
,

264 
≤g_öt_32
 
vÆue
)

266 
≤g_Æloc_size_t
 
u
;

267 
≤g_ch¨p
 
°r
;

268 
buf„r
[
PNG_NUMBER_BUFFER_SIZE
];

271 
u
 = (
≤g_Æloc_size_t
)
vÆue
;

272 i‡(
vÆue
 < 0)

273 
u
 = ~u + 1;

275 
°r
 = 
	`PNG_FORMAT_NUMBER
(
buf„r
, 
f‹m©
, 
u
);

277 i‡(
vÆue
 < 0 && 
°r
 > 
buf„r
)

278 *--
°r
 = '-';

280 
	`≤g_w¨nög_∑ømëî
(
p
, 
numbî
, 
°r
);

281 
	}
}

284 
	$≤g_f‹m©ãd_w¨nög
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_w¨nög_∑ømëîs
 
p
,

285 
≤g_c⁄°_ch¨p
 
mesßge
)

292 
size_t
 
i
 = 0;

293 
msg
[192];

301 
i
<( 
msg
)-1 && *
mesßge
 != '\0')

306 i‡(
p
 !
NULL
 && *
mesßge
 == '@' && message[1] != '\0')

308 
∑ømëî_ch¨
 = *++
mesßge
;

309 c⁄° 
vÆid_∑ømëîs
[] = "123456789";

310 
∑ømëî
 = 0;

315 
vÆid_∑ømëîs
[
∑ømëî
] !
∑ømëî_ch¨
 &&

316 
vÆid_∑ømëîs
[
∑ømëî
] != '\0')

317 ++
∑ømëî
;

320 i‡(
∑ømëî
 < 
PNG_WARNING_PARAMETER_COUNT
)

323 
≤g_c⁄°_ch¨p
 
∑rm
 = 
p
[
∑ømëî
];

324 
≤g_c⁄°_ch¨p
 
≥nd
 = 
p
[
∑ømëî
] + (Ö[parameter]);

330 
i
<( 
msg
)-1 && *
∑rm
 !'\0' &&Ö¨m < 
≥nd
)

331 
msg
[
i
++] = *
∑rm
++;

334 ++
mesßge
;

346 
msg
[
i
++] = *
mesßge
++;

350 
msg
[
i
] = '\0';

356 
	`≤g_w¨nög
(
≤g_±r
, 
msg
);

357 
	}
}

360 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


361 
PNGAPI


362 
	$≤g_bíign_îr‹
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)

364 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_BENIGN_ERRORS_WARN
) != 0)

366 #ifde‡
PNG_READ_SUPPORTED


367 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0 &&

368 
≤g_±r
->
chunk_«me
 != 0)

369 
	`≤g_chunk_w¨nög
(
≤g_±r
, 
îr‹_mesßge
);

372 
	`≤g_w¨nög
(
≤g_±r
, 
îr‹_mesßge
);

377 #ifde‡
PNG_READ_SUPPORTED


378 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0 &&

379 
≤g_±r
->
chunk_«me
 != 0)

380 
	`≤g_chunk_îr‹
(
≤g_±r
, 
îr‹_mesßge
);

383 
	`≤g_îr‹
(
≤g_±r
, 
îr‹_mesßge
);

386 #i‚de‡
PNG_ERROR_TEXT_SUPPORTED


387 
	`PNG_UNUSED
(
îr‹_mesßge
)

389 
	}
}

392 
	$≤g_≠p_w¨nög
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)

394 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_APP_WARNINGS_WARN
) != 0)

395 
	`≤g_w¨nög
(
≤g_±r
, 
îr‹_mesßge
);

397 
	`≤g_îr‹
(
≤g_±r
, 
îr‹_mesßge
);

399 #i‚de‡
PNG_ERROR_TEXT_SUPPORTED


400 
	`PNG_UNUSED
(
îr‹_mesßge
)

402 
	}
}

405 
	$≤g_≠p_îr‹
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
)

407 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_APP_ERRORS_WARN
) != 0)

408 
	`≤g_w¨nög
(
≤g_±r
, 
îr‹_mesßge
);

410 
	`≤g_îr‹
(
≤g_±r
, 
îr‹_mesßge
);

412 #i‚de‡
PNG_ERROR_TEXT_SUPPORTED


413 
	`PNG_UNUSED
(
îr‹_mesßge
)

415 
	}
}

418 
	#PNG_MAX_ERROR_TEXT
 196

	)

419 #i‡
deföed
(
PNG_WARNINGS_SUPPORTED
) || \

420 (
deföed
(
PNG_READ_SUPPORTED
Ë&& 
	$deföed
(
PNG_ERROR_TEXT_SUPPORTED
))

427 
	#i¢⁄Æpha
(
c
Ë((cË< 65 || (cË> 122 || ((cË> 90 && (cË< 97))

	)

428 c⁄° 
≤g_digô
[16] = {

431 
	}
};

434 
	$≤g_f‹m©_buf„r
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_ch¨p
 
buf„r
, 
≤g_c⁄°_ch¨p


435 
îr‹_mesßge
)

437 
≤g_uöt_32
 
chunk_«me
 = 
≤g_±r
->chunk_name;

438 
iout
 = 0, 
ishi·
 = 24;

440 
ishi·
 >= 0)

442 
c
 = ()(
chunk_«me
 >> 
ishi·
) & 0xff;

444 
ishi·
 -= 8;

445 i‡(
	`i¢⁄Æpha
(
c
) != 0)

447 
buf„r
[
iout
++] = 
PNG_LITERAL_LEFT_SQUARE_BRACKET
;

448 
buf„r
[
iout
++] = 
≤g_digô
[(
c
 & 0xf0) >> 4];

449 
buf„r
[
iout
++] = 
≤g_digô
[
c
 & 0x0f];

450 
buf„r
[
iout
++] = 
PNG_LITERAL_RIGHT_SQUARE_BRACKET
;

455 
buf„r
[
iout
++] = ()
c
;

459 i‡(
îr‹_mesßge
 =
NULL
)

460 
buf„r
[
iout
] = '\0';

464 
iö
 = 0;

466 
buf„r
[
iout
++] = ':';

467 
buf„r
[
iout
++] = ' ';

469 
iö
 < 
PNG_MAX_ERROR_TEXT
-1 && 
îr‹_mesßge
[iin] != '\0')

470 
buf„r
[
iout
++] = 
îr‹_mesßge
[
iö
++];

473 
buf„r
[
iout
] = '\0';

475 
	}
}

478 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë&& deföed(
PNG_ERROR_TEXT_SUPPORTED
)

479 
PNG_FUNCTION
(,
PNGAPI


480 
≤g_chunk_îr‹
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
),

481 
PNG_NORETURN
)

483 
	gmsg
[18+
PNG_MAX_ERROR_TEXT
];

484 i‡(
	g≤g_±r
 =
NULL
)

485 
≤g_îr‹
(
≤g_±r
, 
îr‹_mesßge
);

489 
≤g_f‹m©_buf„r
(
≤g_±r
, 
msg
, 
îr‹_mesßge
);

490 
≤g_îr‹
(
≤g_±r
, 
msg
);

495 #ifde‡
PNG_WARNINGS_SUPPORTED


496 
PNGAPI


497 
	$≤g_chunk_w¨nög
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
)

499 
msg
[18+
PNG_MAX_ERROR_TEXT
];

500 i‡(
≤g_±r
 =
NULL
)

501 
	`≤g_w¨nög
(
≤g_±r
, 
w¨nög_mesßge
);

505 
	`≤g_f‹m©_buf„r
(
≤g_±r
, 
msg
, 
w¨nög_mesßge
);

506 
	`≤g_w¨nög
(
≤g_±r
, 
msg
);

508 
	}
}

511 #ifde‡
PNG_READ_SUPPORTED


512 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


513 
PNGAPI


514 
	$≤g_chunk_bíign_îr‹
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p


515 
îr‹_mesßge
)

517 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_BENIGN_ERRORS_WARN
) != 0)

518 
	`≤g_chunk_w¨nög
(
≤g_±r
, 
îr‹_mesßge
);

521 
	`≤g_chunk_îr‹
(
≤g_±r
, 
îr‹_mesßge
);

523 #i‚de‡
PNG_ERROR_TEXT_SUPPORTED


524 
	`PNG_UNUSED
(
îr‹_mesßge
)

526 
	}
}

531 
	$≤g_chunk_ªp‹t
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
mesßge
, 
îr‹
)

533 #i‚de‡
PNG_WARNINGS_SUPPORTED


534 
	`PNG_UNUSED
(
mesßge
)

540 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& deföed(
PNG_WRITE_SUPPORTED
)

541 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0)

544 #ifde‡
PNG_READ_SUPPORTED


546 i‡(
îr‹
 < 
PNG_CHUNK_ERROR
)

547 
	`≤g_chunk_w¨nög
(
≤g_±r
, 
mesßge
);

550 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, 
mesßge
);

554 #i‡
	`deföed
(
PNG_READ_SUPPORTED
Ë&& deföed(
PNG_WRITE_SUPPORTED
)

555 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) == 0)

558 #ifde‡
PNG_WRITE_SUPPORTED


560 i‡(
îr‹
 < 
PNG_CHUNK_WRITE_ERROR
)

561 
	`≤g_≠p_w¨nög
(
≤g_±r
, 
mesßge
);

564 
	`≤g_≠p_îr‹
(
≤g_±r
, 
mesßge
);

567 
	}
}

569 #ifde‡
PNG_ERROR_TEXT_SUPPORTED


570 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


571 
PNG_FUNCTION
(,

572 
≤g_fixed_îr‹
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
«me
),
PNG_NORETURN
)

574 
	#fixed_mesßge
 "fixedÖoöàovîÊow i¿"

	)

575 
	#fixed_mesßge_ 
 (( 
fixed_mesßge
)-1)

	)

576 
	giö
;

577 
	gmsg
[
fixed_mesßge_ 
+
PNG_MAX_ERROR_TEXT
];

578 
mem˝y
(
msg
, 
fixed_mesßge
, 
fixed_mesßge_ 
);

579 
	giö
 = 0;

580 i‡(
	g«me
 !
NULL
)

581 
iö
 < (
PNG_MAX_ERROR_TEXT
-1Ë&& 
«me
[iin] != 0)

583 
msg
[
fixed_mesßge_ 
 + 
iö
] = 
«me
[iin];

584 ++
	giö
;

586 
	gmsg
[
fixed_mesßge_ 
 + 
iö
] = 0;

587 
≤g_îr‹
(
≤g_±r
, 
msg
);

592 #ifde‡
PNG_SETJMP_SUPPORTED


596 
jmp_buf
* 
PNGAPI


597 
	$≤g_£t_l⁄gjmp_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_l⁄gjmp_±r
 
l⁄gjmp_‚
,

598 
size_t
 
jmp_buf_size
)

610 i‡(
≤g_±r
 =
NULL
)

611  
NULL
;

613 i‡(
≤g_±r
->
jmp_buf_±r
 =
NULL
)

615 
≤g_±r
->
jmp_buf_size
 = 0;

617 i‡(
jmp_buf_size
 <( 
≤g_±r
->
jmp_buf_loˇl
))

618 
≤g_±r
->
jmp_buf_±r
 = &≤g_±r->
jmp_buf_loˇl
;

622 
≤g_±r
->
jmp_buf_±r
 = 
	`≤g_voidˇ°
(
jmp_buf
 *,

623 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
jmp_buf_size
));

625 i‡(
≤g_±r
->
jmp_buf_±r
 =
NULL
)

626  
NULL
;

628 
≤g_±r
->
jmp_buf_size
 = jmp_buf_size;

634 
size_t
 
size
 = 
≤g_±r
->
jmp_buf_size
;

636 i‡(
size
 == 0)

638 
size
 = ( 
≤g_±r
->
jmp_buf_loˇl
);

639 i‡(
≤g_±r
->
jmp_buf_±r
 !&≤g_±r->
jmp_buf_loˇl
)

646 
	`≤g_îr‹
(
≤g_±r
, "Libpng jmp_buf stillállocated");

651 i‡(
size
 !
jmp_buf_size
)

653 
	`≤g_w¨nög
(
≤g_±r
, "Application jmp_buf size changed");

654  
NULL
;

661 
≤g_±r
->
l⁄gjmp_‚
 =Üongjmp_fn;

662  
≤g_±r
->
jmp_buf_±r
;

663 
	}
}

666 
	$≤g_‰ì_jmpbuf
(
≤g_°ru˘Ω
 
≤g_±r
)

668 i‡(
≤g_±r
 !
NULL
)

670 
jmp_buf
 *
jb
 = 
≤g_±r
->
jmp_buf_±r
;

675 i‡(
jb
 !
NULL
 && 
≤g_±r
->
jmp_buf_size
 > 0)

682 i‡(
jb
 !&
≤g_±r
->
jmp_buf_loˇl
)

685 
jmp_buf
 
‰ì_jmp_buf
;

687 i‡(!
	`£tjmp
(
‰ì_jmp_buf
))

689 
≤g_±r
->
jmp_buf_±r
 = &
‰ì_jmp_buf
;

690 
≤g_±r
->
jmp_buf_size
 = 0;

691 
≤g_±r
->
l⁄gjmp_‚
 = 
l⁄gjmp
;

692 
	`≤g_‰ì
(
≤g_±r
, 
jb
);

698 
≤g_±r
->
jmp_buf_size
 = 0;

699 
≤g_±r
->
jmp_buf_±r
 = 
NULL
;

700 
≤g_±r
->
l⁄gjmp_‚
 = 0;

702 
	}
}

710 
PNG_FUNCTION
(,

711 
≤g_deÁu…_îr‹
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
),

712 
PNG_NORETURN
)

714 #ifde‡
PNG_CONSOLE_IO_SUPPORTED


715 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


717 i‡(
	gîr‹_mesßge
 !
NULL
 && *
îr‹_mesßge
 =
PNG_LITERAL_SHARP
)

720 
off£t
;

721 
	gîr‹_numbî
[16];

722 
	goff£t
 = 0; offset<15; offset++)

724 
	gîr‹_numbî
[
off£t
] = 
îr‹_mesßge
[offset + 1];

725 i‡(
	gîr‹_mesßge
[
off£t
] == ' ')

729 i‡((
	goff£t
 > 1) && (offset < 15))

731 
	gîr‹_numbî
[
off£t
 - 1] = '\0';

732 
Ârötf
(
°dîr
, "libpngÉrrorÇo. %s: %s",

733 
îr‹_numbî
, 
îr‹_mesßge
 + 
off£t
 + 1);

734 
Ârötf
(
°dîr
, 
PNG_STRING_NEWLINE
);

739 
Ârötf
(
°dîr
, "libpngÉrror: %s, offset=%d",

740 
îr‹_mesßge
, 
off£t
);

741 
Ârötf
(
°dîr
, 
PNG_STRING_NEWLINE
);

747 
Ârötf
(
°dîr
, "lib≤gÉº‹: %s", 
îr‹_mesßge
 ?Érror_message :

749 
Ârötf
(
°dîr
, 
PNG_STRING_NEWLINE
);

752 
PNG_UNUSED
(
îr‹_mesßge
)

754 
≤g_l⁄gjmp
(
≤g_±r
, 1);

757 
PNG_FUNCTION
(,
PNGAPI


758 
≤g_l⁄gjmp
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
vÆ
),
PNG_NORETURN
)

760 #ifde‡
PNG_SETJMP_SUPPORTED


761 i‡(
	g≤g_±r
 !
NULL
 && 
≤g_±r
->
l⁄gjmp_‚
 != NULL &&

762 
≤g_±r
->
jmp_buf_±r
 !
NULL
)

763 
≤g_±r
->
l⁄gjmp_‚
(*≤g_±r->
jmp_buf_±r
, 
vÆ
);

765 
PNG_UNUSED
(
≤g_±r
)

766 
PNG_UNUSED
(
vÆ
)

775 
PNG_ABORT
();

778 #ifde‡
PNG_WARNINGS_SUPPORTED


785 
	$≤g_deÁu…_w¨nög
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
)

787 #ifde‡
PNG_CONSOLE_IO_SUPPORTED


788 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


789 i‡(*
w¨nög_mesßge
 =
PNG_LITERAL_SHARP
)

791 
off£t
;

792 
w¨nög_numbî
[16];

793 
off£t
 = 0; offset < 15; offset++)

795 
w¨nög_numbî
[
off£t
] = 
w¨nög_mesßge
[offset + 1];

796 i‡(
w¨nög_mesßge
[
off£t
] == ' ')

800 i‡((
off£t
 > 1) && (offset < 15))

802 
w¨nög_numbî
[
off£t
 + 1] = '\0';

803 
	`Ârötf
(
°dîr
, "libpng warningÇo. %s: %s",

804 
w¨nög_numbî
, 
w¨nög_mesßge
 + 
off£t
);

805 
	`Ârötf
(
°dîr
, 
PNG_STRING_NEWLINE
);

810 
	`Ârötf
(
°dîr
, "libpng warning: %s",

811 
w¨nög_mesßge
);

812 
	`Ârötf
(
°dîr
, 
PNG_STRING_NEWLINE
);

819 
	`Ârötf
(
°dîr
, "lib≤g w¨nög: %s", 
w¨nög_mesßge
);

820 
	`Ârötf
(
°dîr
, 
PNG_STRING_NEWLINE
);

823 
	`PNG_UNUSED
(
w¨nög_mesßge
)

825 
	`PNG_UNUSED
(
≤g_±r
)

826 
	}
}

834 
PNGAPI


835 
	$≤g_£t_îr‹_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
îr‹_±r
,

836 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨nög_‚
)

838 i‡(
≤g_±r
 =
NULL
)

841 
≤g_±r
->
îr‹_±r
 =Érror_ptr;

842 
≤g_±r
->
îr‹_‚
 =Érror_fn;

843 #ifde‡
PNG_WARNINGS_SUPPORTED


844 
≤g_±r
->
w¨nög_‚
 = warning_fn;

846 
	`PNG_UNUSED
(
w¨nög_‚
)

848 
	}
}

855 
≤g_voidp
 
PNGAPI


856 
	$≤g_gë_îr‹_±r
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

858 i‡(
≤g_±r
 =
NULL
)

859  
NULL
;

861  ((
≤g_voidp
)
≤g_±r
->
îr‹_±r
);

862 
	}
}

865 #ifde‡
PNG_ERROR_NUMBERS_SUPPORTED


866 
PNGAPI


867 
	$≤g_£t_°rù_îr‹_numbîs
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
°rù_mode
)

869 i‡(
≤g_±r
 !
NULL
)

871 
≤g_±r
->
Êags
 &=

872 ((~(
PNG_FLAG_STRIP_ERROR_NUMBERS
 |

873 
PNG_FLAG_STRIP_ERROR_TEXT
))&
°rù_mode
);

875 
	}
}

878 #i‡
deföed
(
PNG_SIMPLIFIED_READ_SUPPORTED
) ||\

879 
	$deföed
(
PNG_SIMPLIFIED_WRITE_SUPPORTED
)

884 
	`PNG_FUNCTION
(, (
PNGCBAPI


885 
≤g_ß„_îr‹
),(
≤g_°ru˘p
 
≤g_n⁄c⁄°_±r
, 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
),

886 
PNG_NORETURN
)

888 
≤g_c⁄°_°ru˘Ω
 
≤g_±r
 = 
≤g_n⁄c⁄°_±r
;

889 
≤g_imagï
 
image
 = 
	`≤g_voidˇ°
’ng_imagï, 
≤g_±r
->
îr‹_±r
);

894 i‡(
image
 !
NULL
)

896 
	`≤g_ß„ˇt
(
image
->
mesßge
, ( image->mesßge), 0, 
îr‹_mesßge
);

897 
image
->
w¨nög_‹_îr‹
 |
PNG_IMAGE_ERROR
;

903 i‡(
image
->
›aque
 !
NULL
 && image->›aque->
îr‹_buf
 != NULL)

904 
	`l⁄gjmp
(
	`≤g_c⁄åﬁ_jmp_buf
(
image
->
›aque
), 1);

908 
size_t
 
pos
 = 
	`≤g_ß„ˇt
(
image
->
mesßge
, ( image->message), 0,

910 
	`≤g_ß„ˇt
(
image
->
mesßge
, ( image->mesßge), 
pos
,

911 
îr‹_mesßge
);

916 
	`ab‹t
();

917 
	}
}

919 #ifde‡
PNG_WARNINGS_SUPPORTED


920 
PNGCBAPI


921 
	$≤g_ß„_w¨nög
(
≤g_°ru˘p
 
≤g_n⁄c⁄°_±r
, 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
)

923 
≤g_c⁄°_°ru˘Ω
 
≤g_±r
 = 
≤g_n⁄c⁄°_±r
;

924 
≤g_imagï
 
image
 = 
	`≤g_voidˇ°
’ng_imagï, 
≤g_±r
->
îr‹_±r
);

927 i‡(
image
->
w¨nög_‹_îr‹
 == 0)

929 
	`≤g_ß„ˇt
(
image
->
mesßge
, ( image->mesßge), 0, 
w¨nög_mesßge
);

930 
image
->
w¨nög_‹_îr‹
 |
PNG_IMAGE_WARNING
;

932 
	}
}

936 
	$≤g_ß„_execuã
(
≤g_imagï
 
image_ö
, (*
fun˘i⁄
)(
≤g_voidp
),Öng_void∞
¨g
)

938 vﬁ©ûê
≤g_imagï
 
image
 = 
image_ö
;

939 vﬁ©ûê
ªsu…
;

940 vﬁ©ûê
≤g_voidp
 
ßved_îr‹_buf
;

941 
jmp_buf
 
ß„_jmpbuf
;

944 
ßved_îr‹_buf
 = 
image
->
›aque
->
îr‹_buf
;

945 
ªsu…
 = 
	`£tjmp
(
ß„_jmpbuf
) == 0;

947 i‡(
ªsu…
 != 0)

950 
image
->
›aque
->
îr‹_buf
 = 
ß„_jmpbuf
;

951 
ªsu…
 = 
	`fun˘i⁄
(
¨g
);

954 
image
->
›aque
->
îr‹_buf
 = 
ßved_îr‹_buf
;

957 i‡(
ªsu…
 == 0)

958 
	`≤g_image_‰ì
(
image
);

960  
ªsu…
;

961 
	}
}

	@pngget.c

15 
	~"≤g¥iv.h
"

17 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë|| deföed(
PNG_WRITE_SUPPORTED
)

19 
≤g_uöt_32
 
PNGAPI


20 
	$≤g_gë_vÆid
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

21 
≤g_uöt_32
 
Êag
)

23 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

24 (
öfo_±r
->
vÆid
 & 
Êag
);

27 
	}
}

29 
size_t
 
PNGAPI


30 
	$≤g_gë_rowbyãs
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

32 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

33 (
öfo_±r
->
rowbyãs
);

36 
	}
}

38 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


39 
≤g_byãµ
 
PNGAPI


40 
	$≤g_gë_rows
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

42 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

43 (
öfo_±r
->
row_poöãrs
);

46 
	}
}

49 #ifde‡
PNG_EASY_ACCESS_SUPPORTED


51 
≤g_uöt_32
 
PNGAPI


52 
	$≤g_gë_image_width
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

54 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

55  
öfo_±r
->
width
;

58 
	}
}

60 
≤g_uöt_32
 
PNGAPI


61 
	$≤g_gë_image_height
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

63 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

64  
öfo_±r
->
height
;

67 
	}
}

69 
≤g_byã
 
PNGAPI


70 
	$≤g_gë_bô_dïth
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

72 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

73  
öfo_±r
->
bô_dïth
;

76 
	}
}

78 
≤g_byã
 
PNGAPI


79 
	$≤g_gë_cﬁ‹_ty≥
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

81 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

82  
öfo_±r
->
cﬁ‹_ty≥
;

85 
	}
}

87 
≤g_byã
 
PNGAPI


88 
	$≤g_gë_fûãr_ty≥
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

90 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

91  
öfo_±r
->
fûãr_ty≥
;

94 
	}
}

96 
≤g_byã
 
PNGAPI


97 
	$≤g_gë_öãæa˚_ty≥
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

99 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

100  
öfo_±r
->
öãæa˚_ty≥
;

103 
	}
}

105 
≤g_byã
 
PNGAPI


106 
	$≤g_gë_com¥essi⁄_ty≥
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

108 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

109  
öfo_±r
->
com¥essi⁄_ty≥
;

112 
	}
}

114 
≤g_uöt_32
 
PNGAPI


115 
	$≤g_gë_x_pixñs_≥r_mëî
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p


116 
öfo_±r
)

118 #ifde‡
PNG_pHYs_SUPPORTED


119 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

120 (
öfo_±r
->
vÆid
 & 
PNG_INFO_pHYs
) != 0)

122 
	`≤g_debug1
(1, "in %sÑetrieval function",

125 i‡(
öfo_±r
->
phys_unô_ty≥
 =
PNG_RESOLUTION_METER
)

126  (
öfo_±r
->
x_pixñs_≥r_unô
);

129 
	`PNG_UNUSED
(
≤g_±r
)

130 
	`PNG_UNUSED
(
öfo_±r
)

134 
	}
}

136 
≤g_uöt_32
 
PNGAPI


137 
	$≤g_gë_y_pixñs_≥r_mëî
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p


138 
öfo_±r
)

140 #ifde‡
PNG_pHYs_SUPPORTED


141 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

142 (
öfo_±r
->
vÆid
 & 
PNG_INFO_pHYs
) != 0)

144 
	`≤g_debug1
(1, "in %sÑetrieval function",

147 i‡(
öfo_±r
->
phys_unô_ty≥
 =
PNG_RESOLUTION_METER
)

148  (
öfo_±r
->
y_pixñs_≥r_unô
);

151 
	`PNG_UNUSED
(
≤g_±r
)

152 
	`PNG_UNUSED
(
öfo_±r
)

156 
	}
}

158 
≤g_uöt_32
 
PNGAPI


159 
	$≤g_gë_pixñs_≥r_mëî
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

161 #ifde‡
PNG_pHYs_SUPPORTED


162 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

163 (
öfo_±r
->
vÆid
 & 
PNG_INFO_pHYs
) != 0)

165 
	`≤g_debug1
(1, "in %sÑetrieval function", "png_get_pixels_per_meter");

167 i‡(
öfo_±r
->
phys_unô_ty≥
 =
PNG_RESOLUTION_METER
 &&

168 
öfo_±r
->
x_pixñs_≥r_unô
 =öfo_±r->
y_pixñs_≥r_unô
)

169  (
öfo_±r
->
x_pixñs_≥r_unô
);

172 
	`PNG_UNUSED
(
≤g_±r
)

173 
	`PNG_UNUSED
(
öfo_±r
)

177 
	}
}

179 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


180 
PNGAPI


181 
	$≤g_gë_pixñ_a•e˘_øtio
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p


182 
öfo_±r
)

184 #ifde‡
PNG_READ_pHYs_SUPPORTED


185 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

186 (
öfo_±r
->
vÆid
 & 
PNG_INFO_pHYs
) != 0)

188 
	`≤g_debug1
(1, "in %sÑetrieval function", "png_get_aspect_ratio");

190 i‡(
öfo_±r
->
x_pixñs_≥r_unô
 != 0)

191  (()(()
öfo_±r
->
y_pixñs_≥r_unô


192 /()
öfo_±r
->
x_pixñs_≥r_unô
));

195 
	`PNG_UNUSED
(
≤g_±r
)

196 
	`PNG_UNUSED
(
öfo_±r
)

200 
	}
}

203 #ifde‡
PNG_FIXED_POINT_SUPPORTED


204 
≤g_fixed_poöt
 
PNGAPI


205 
	$≤g_gë_pixñ_a•e˘_øtio_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

206 
≤g_c⁄°_öf‹p
 
öfo_±r
)

208 #ifde‡
PNG_READ_pHYs_SUPPORTED


209 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

210 (
öfo_±r
->
vÆid
 & 
PNG_INFO_pHYs
) != 0 &&

211 
öfo_±r
->
x_pixñs_≥r_unô
 > 0 && info_±r->
y_pixñs_≥r_unô
 > 0 &&

212 
öfo_±r
->
x_pixñs_≥r_unô
 <
PNG_UINT_31_MAX
 &&

213 
öfo_±r
->
y_pixñs_≥r_unô
 <
PNG_UINT_31_MAX
)

215 
≤g_fixed_poöt
 
ªs
;

217 
	`≤g_debug1
(1, "in %sÑetrieval function", "png_get_aspect_ratio_fixed");

222 i‡(
	`≤g_muldiv
(&
ªs
, (
≤g_öt_32
)
öfo_±r
->
y_pixñs_≥r_unô
, 
PNG_FP_1
,

223 (
≤g_öt_32
)
öfo_±r
->
x_pixñs_≥r_unô
) != 0)

224  
ªs
;

227 
	`PNG_UNUSED
(
≤g_±r
)

228 
	`PNG_UNUSED
(
öfo_±r
)

232 
	}
}

235 
≤g_öt_32
 
PNGAPI


236 
	$≤g_gë_x_off£t_mi¸⁄s
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

238 #ifde‡
PNG_oFFs_SUPPORTED


239 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

240 (
öfo_±r
->
vÆid
 & 
PNG_INFO_oFFs
) != 0)

242 
	`≤g_debug1
(1, "in %sÑetrieval function", "png_get_x_offset_microns");

244 i‡(
öfo_±r
->
off£t_unô_ty≥
 =
PNG_OFFSET_MICROMETER
)

245  (
öfo_±r
->
x_off£t
);

248 
	`PNG_UNUSED
(
≤g_±r
)

249 
	`PNG_UNUSED
(
öfo_±r
)

253 
	}
}

255 
≤g_öt_32
 
PNGAPI


256 
	$≤g_gë_y_off£t_mi¸⁄s
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

258 #ifde‡
PNG_oFFs_SUPPORTED


259 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

260 (
öfo_±r
->
vÆid
 & 
PNG_INFO_oFFs
) != 0)

262 
	`≤g_debug1
(1, "in %sÑetrieval function", "png_get_y_offset_microns");

264 i‡(
öfo_±r
->
off£t_unô_ty≥
 =
PNG_OFFSET_MICROMETER
)

265  (
öfo_±r
->
y_off£t
);

268 
	`PNG_UNUSED
(
≤g_±r
)

269 
	`PNG_UNUSED
(
öfo_±r
)

273 
	}
}

275 
≤g_öt_32
 
PNGAPI


276 
	$≤g_gë_x_off£t_pixñs
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

278 #ifde‡
PNG_oFFs_SUPPORTED


279 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

280 (
öfo_±r
->
vÆid
 & 
PNG_INFO_oFFs
) != 0)

282 
	`≤g_debug1
(1, "in %sÑetrieval function", "png_get_x_offset_pixels");

284 i‡(
öfo_±r
->
off£t_unô_ty≥
 =
PNG_OFFSET_PIXEL
)

285  (
öfo_±r
->
x_off£t
);

288 
	`PNG_UNUSED
(
≤g_±r
)

289 
	`PNG_UNUSED
(
öfo_±r
)

293 
	}
}

295 
≤g_öt_32
 
PNGAPI


296 
	$≤g_gë_y_off£t_pixñs
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

298 #ifde‡
PNG_oFFs_SUPPORTED


299 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

300 (
öfo_±r
->
vÆid
 & 
PNG_INFO_oFFs
) != 0)

302 
	`≤g_debug1
(1, "in %sÑetrieval function", "png_get_y_offset_pixels");

304 i‡(
öfo_±r
->
off£t_unô_ty≥
 =
PNG_OFFSET_PIXEL
)

305  (
öfo_±r
->
y_off£t
);

308 
	`PNG_UNUSED
(
≤g_±r
)

309 
	`PNG_UNUSED
(
öfo_±r
)

313 
	}
}

315 #ifde‡
PNG_INCH_CONVERSIONS_SUPPORTED


316 
≤g_uöt_32


317 
	$µi_‰om_µm
(
≤g_uöt_32
 
µm
)

323 
≤g_uöt_32
 
t1001
, 
t1101
;

324 
µm
 >>= 1;

325 
t1001
 = 
µm
 + (ppm >> 3);

326 
t1101
 = 
t1001
 + (
µm
 >> 1);

327 
µm
 >>= 20;

328 
t1101
 +=Å1101 >> 15;

329 
t1001
 >>= 11;

330 
t1001
 +=Å1001 >> 12;

331 
µm
 +
t1001
;

332 
µm
 +
t1101
;

333  (
µm
 + 16) >> 5;

338 
≤g_fixed_poöt
 
ªsu…
;

339 i‡(
µm
 <
PNG_UINT_31_MAX
 && 
	`≤g_muldiv
(&
ªsu…
, (
≤g_öt_32
)ppm, 127,

341  (
≤g_uöt_32
)
ªsu…
;

346 
	}
}

348 
≤g_uöt_32
 
PNGAPI


349 
	$≤g_gë_pixñs_≥r_öch
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

351  
	`µi_‰om_µm
(
	`≤g_gë_pixñs_≥r_mëî
(
≤g_±r
, 
öfo_±r
));

352 
	}
}

354 
≤g_uöt_32
 
PNGAPI


355 
	$≤g_gë_x_pixñs_≥r_öch
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

357  
	`µi_‰om_µm
(
	`≤g_gë_x_pixñs_≥r_mëî
(
≤g_±r
, 
öfo_±r
));

358 
	}
}

360 
≤g_uöt_32
 
PNGAPI


361 
	$≤g_gë_y_pixñs_≥r_öch
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

363  
	`µi_‰om_µm
(
	`≤g_gë_y_pixñs_≥r_mëî
(
≤g_±r
, 
öfo_±r
));

364 
	}
}

366 #ifde‡
PNG_FIXED_POINT_SUPPORTED


367 
≤g_fixed_poöt


368 
	$≤g_fixed_öches_‰om_mi¸⁄s
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öt_32
 
mi¸⁄s
)

375  
	`≤g_muldiv_w¨n
(
≤g_±r
, 
mi¸⁄s
, 500, 127);

376 
	}
}

378 
≤g_fixed_poöt
 
PNGAPI


379 
	$≤g_gë_x_off£t_öches_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

380 
≤g_c⁄°_öf‹p
 
öfo_±r
)

382  
	`≤g_fixed_öches_‰om_mi¸⁄s
(
≤g_±r
,

383 
	`≤g_gë_x_off£t_mi¸⁄s
(
≤g_±r
, 
öfo_±r
));

384 
	}
}

387 #ifde‡
PNG_FIXED_POINT_SUPPORTED


388 
≤g_fixed_poöt
 
PNGAPI


389 
	$≤g_gë_y_off£t_öches_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

390 
≤g_c⁄°_öf‹p
 
öfo_±r
)

392  
	`≤g_fixed_öches_‰om_mi¸⁄s
(
≤g_±r
,

393 
	`≤g_gë_y_off£t_mi¸⁄s
(
≤g_±r
, 
öfo_±r
));

394 
	}
}

397 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


398 
PNGAPI


399 
	$≤g_gë_x_off£t_öches
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

404  ()(
	`≤g_gë_x_off£t_mi¸⁄s
(
≤g_±r
, 
öfo_±r
) * .00003937);

405 
	}
}

408 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


409 
PNGAPI


410 
	$≤g_gë_y_off£t_öches
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

415  ()(
	`≤g_gë_y_off£t_mi¸⁄s
(
≤g_±r
, 
öfo_±r
) * .00003937);

416 
	}
}

419 #ifde‡
PNG_pHYs_SUPPORTED


420 
≤g_uöt_32
 
PNGAPI


421 
	$≤g_gë_pHYs_dpi
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

422 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
)

424 
≤g_uöt_32
 
ªtvÆ
 = 0;

426 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

427 (
öfo_±r
->
vÆid
 & 
PNG_INFO_pHYs
) != 0)

429 
	`≤g_debug1
(1, "in %sÑetrieval function", "pHYs");

431 i‡(
ªs_x
 !
NULL
)

433 *
ªs_x
 = 
öfo_±r
->
x_pixñs_≥r_unô
;

434 
ªtvÆ
 |
PNG_INFO_pHYs
;

437 i‡(
ªs_y
 !
NULL
)

439 *
ªs_y
 = 
öfo_±r
->
y_pixñs_≥r_unô
;

440 
ªtvÆ
 |
PNG_INFO_pHYs
;

443 i‡(
unô_ty≥
 !
NULL
)

445 *
unô_ty≥
 = ()
öfo_±r
->
phys_unô_ty≥
;

446 
ªtvÆ
 |
PNG_INFO_pHYs
;

448 i‡(*
unô_ty≥
 == 1)

450 i‡(
ªs_x
 !
NULL
Ë*ªs_x = (
≤g_uöt_32
)(*res_x * .0254 + .50);

451 i‡(
ªs_y
 !
NULL
Ë*ªs_y = (
≤g_uöt_32
)(*res_y * .0254 + .50);

456  (
ªtvÆ
);

457 
	}
}

466 
≤g_byã
 
PNGAPI


467 
	$≤g_gë_ch™√ls
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

469 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

470 (
öfo_±r
->
ch™√ls
);

473 
	}
}

475 #ifde‡
PNG_READ_SUPPORTED


476 
≤g_c⁄°_byãp
 
PNGAPI


477 
	$≤g_gë_sig«tuª
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

479 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

480 (
öfo_±r
->
sig«tuª
);

482  (
NULL
);

483 
	}
}

486 #ifde‡
PNG_bKGD_SUPPORTED


487 
≤g_uöt_32
 
PNGAPI


488 
	$≤g_gë_bKGD
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

489 
≤g_cﬁ‹_16p
 *
background
)

491 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

492 (
öfo_±r
->
vÆid
 & 
PNG_INFO_bKGD
) != 0 &&

493 
background
 !
NULL
)

495 
	`≤g_debug1
(1, "in %sÑetrieval function", "bKGD");

497 *
background
 = &(
öfo_±r
->background);

498  (
PNG_INFO_bKGD
);

502 
	}
}

505 #ifde‡
PNG_cHRM_SUPPORTED


510 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


511 
≤g_uöt_32
 
PNGAPI


512 
	$≤g_gë_cHRM
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

513 *
whôe_x
, *
whôe_y
, *
ªd_x
, *
ªd_y
,

514 *
gªí_x
, *
gªí_y
, *
blue_x
, *
blue_y
)

522 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

523 (
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_ENDPOINTS
) != 0)

525 
	`≤g_debug1
(1, "in %sÑetrieval function", "cHRM");

527 i‡(
whôe_x
 !
NULL
)

528 *
whôe_x
 = 
	`≤g_Êﬂt
(
≤g_±r
,

529 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
whôex
, "cHRM white X");

530 i‡(
whôe_y
 !
NULL
)

531 *
whôe_y
 = 
	`≤g_Êﬂt
(
≤g_±r
,

532 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
whôey
, "cHRM white Y");

533 i‡(
ªd_x
 !
NULL
)

534 *
ªd_x
 = 
	`≤g_Êﬂt
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
ªdx
,

536 i‡(
ªd_y
 !
NULL
)

537 *
ªd_y
 = 
	`≤g_Êﬂt
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
ªdy
,

539 i‡(
gªí_x
 !
NULL
)

540 *
gªí_x
 = 
	`≤g_Êﬂt
(
≤g_±r
,

541 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
gªíx
, "cHRM green X");

542 i‡(
gªí_y
 !
NULL
)

543 *
gªí_y
 = 
	`≤g_Êﬂt
(
≤g_±r
,

544 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
gªíy
, "cHRM green Y");

545 i‡(
blue_x
 !
NULL
)

546 *
blue_x
 = 
	`≤g_Êﬂt
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
bluex
,

548 i‡(
blue_y
 !
NULL
)

549 *
blue_y
 = 
	`≤g_Êﬂt
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
bluey
,

551  (
PNG_INFO_cHRM
);

555 
	}
}

557 
≤g_uöt_32
 
PNGAPI


558 
	$≤g_gë_cHRM_XYZ
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

559 *
ªd_X
, *
ªd_Y
, *
ªd_Z
, *
gªí_X
,

560 *
gªí_Y
, *
gªí_Z
, *
blue_X
, *
blue_Y
,

561 *
blue_Z
)

563 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

564 (
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_ENDPOINTS
) != 0)

566 
	`≤g_debug1
(1, "in %sÑetrieval function", "cHRM_XYZ(float)");

568 i‡(
ªd_X
 !
NULL
)

569 *
ªd_X
 = 
	`≤g_Êﬂt
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.red_X,

571 i‡(
ªd_Y
 !
NULL
)

572 *
ªd_Y
 = 
	`≤g_Êﬂt
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.red_Y,

574 i‡(
ªd_Z
 !
NULL
)

575 *
ªd_Z
 = 
	`≤g_Êﬂt
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.red_Z,

577 i‡(
gªí_X
 !
NULL
)

578 *
gªí_X
 = 
	`≤g_Êﬂt
(
≤g_±r
,

579 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
gªí_X
, "cHRM green X");

580 i‡(
gªí_Y
 !
NULL
)

581 *
gªí_Y
 = 
	`≤g_Êﬂt
(
≤g_±r
,

582 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
gªí_Y
, "cHRM green Y");

583 i‡(
gªí_Z
 !
NULL
)

584 *
gªí_Z
 = 
	`≤g_Êﬂt
(
≤g_±r
,

585 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
gªí_Z
, "cHRM green Z");

586 i‡(
blue_X
 !
NULL
)

587 *
blue_X
 = 
	`≤g_Êﬂt
(
≤g_±r
,

588 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
blue_X
, "cHRM blue X");

589 i‡(
blue_Y
 !
NULL
)

590 *
blue_Y
 = 
	`≤g_Êﬂt
(
≤g_±r
,

591 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
blue_Y
, "cHRM blue Y");

592 i‡(
blue_Z
 !
NULL
)

593 *
blue_Z
 = 
	`≤g_Êﬂt
(
≤g_±r
,

594 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
blue_Z
, "cHRM blue Z");

595  (
PNG_INFO_cHRM
);

599 
	}
}

602 #ifde‡
PNG_FIXED_POINT_SUPPORTED


603 
≤g_uöt_32
 
PNGAPI


604 
	$≤g_gë_cHRM_XYZ_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

605 
≤g_fixed_poöt
 *
öt_ªd_X
,Öng_fixed_poöà*
öt_ªd_Y
,

606 
≤g_fixed_poöt
 *
öt_ªd_Z
,Öng_fixed_poöà*
öt_gªí_X
,

607 
≤g_fixed_poöt
 *
öt_gªí_Y
,Öng_fixed_poöà*
öt_gªí_Z
,

608 
≤g_fixed_poöt
 *
öt_blue_X
,Öng_fixed_poöà*
öt_blue_Y
,

609 
≤g_fixed_poöt
 *
öt_blue_Z
)

611 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

612 (
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_ENDPOINTS
) != 0)

614 
	`≤g_debug1
(1, "in %sÑetrieval function", "cHRM_XYZ");

616 i‡(
öt_ªd_X
 !
NULL
)

617 *
öt_ªd_X
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
ªd_X
;

618 i‡(
öt_ªd_Y
 !
NULL
)

619 *
öt_ªd_Y
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
ªd_Y
;

620 i‡(
öt_ªd_Z
 !
NULL
)

621 *
öt_ªd_Z
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
ªd_Z
;

622 i‡(
öt_gªí_X
 !
NULL
)

623 *
öt_gªí_X
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
gªí_X
;

624 i‡(
öt_gªí_Y
 !
NULL
)

625 *
öt_gªí_Y
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
gªí_Y
;

626 i‡(
öt_gªí_Z
 !
NULL
)

627 *
öt_gªí_Z
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
gªí_Z
;

628 i‡(
öt_blue_X
 !
NULL
)

629 *
öt_blue_X
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
blue_X
;

630 i‡(
öt_blue_Y
 !
NULL
)

631 *
öt_blue_Y
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
blue_Y
;

632 i‡(
öt_blue_Z
 !
NULL
)

633 *
öt_blue_Z
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_XYZ
.
blue_Z
;

634  (
PNG_INFO_cHRM
);

638 
	}
}

640 
≤g_uöt_32
 
PNGAPI


641 
	$≤g_gë_cHRM_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

642 
≤g_fixed_poöt
 *
whôe_x
,Öng_fixed_poöà*
whôe_y
,Öng_fixed_poöà*
ªd_x
,

643 
≤g_fixed_poöt
 *
ªd_y
,Öng_fixed_poöà*
gªí_x
,Öng_fixed_poöà*
gªí_y
,

644 
≤g_fixed_poöt
 *
blue_x
,Öng_fixed_poöà*
blue_y
)

646 
	`≤g_debug1
(1, "in %sÑetrieval function", "cHRM");

648 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

649 (
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_ENDPOINTS
) != 0)

651 i‡(
whôe_x
 !
NULL
)

652 *
whôe_x
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
whôex
;

653 i‡(
whôe_y
 !
NULL
)

654 *
whôe_y
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
whôey
;

655 i‡(
ªd_x
 !
NULL
)

656 *
ªd_x
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
ªdx
;

657 i‡(
ªd_y
 !
NULL
)

658 *
ªd_y
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
ªdy
;

659 i‡(
gªí_x
 !
NULL
)

660 *
gªí_x
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
gªíx
;

661 i‡(
gªí_y
 !
NULL
)

662 *
gªí_y
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
gªíy
;

663 i‡(
blue_x
 !
NULL
)

664 *
blue_x
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
bluex
;

665 i‡(
blue_y
 !
NULL
)

666 *
blue_y
 = 
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
.
bluey
;

667  (
PNG_INFO_cHRM
);

671 
	}
}

675 #ifde‡
PNG_gAMA_SUPPORTED


676 #ifde‡
PNG_FIXED_POINT_SUPPORTED


677 
≤g_uöt_32
 
PNGAPI


678 
	$≤g_gë_gAMA_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

679 
≤g_fixed_poöt
 *
fûe_gamma
)

681 
	`≤g_debug1
(1, "in %sÑetrieval function", "gAMA");

683 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

684 (
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_GAMMA
) != 0 &&

685 
fûe_gamma
 !
NULL
)

687 *
fûe_gamma
 = 
öfo_±r
->
cﬁ‹•a˚
.
gamma
;

688  (
PNG_INFO_gAMA
);

692 
	}
}

695 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


696 
≤g_uöt_32
 
PNGAPI


697 
	$≤g_gë_gAMA
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

698 *
fûe_gamma
)

700 
	`≤g_debug1
(1, "in %sÑetrieval function", "gAMA(float)");

702 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

703 (
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_GAMMA
) != 0 &&

704 
fûe_gamma
 !
NULL
)

706 *
fûe_gamma
 = 
	`≤g_Êﬂt
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
gamma
,

708  (
PNG_INFO_gAMA
);

712 
	}
}

716 #ifde‡
PNG_sRGB_SUPPORTED


717 
≤g_uöt_32
 
PNGAPI


718 
	$≤g_gë_sRGB
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

719 *
fûe_§gb_öã¡
)

721 
	`≤g_debug1
(1, "in %sÑetrieval function", "sRGB");

723 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

724 (
öfo_±r
->
vÆid
 & 
PNG_INFO_sRGB
Ë!0 && 
fûe_§gb_öã¡
 !
NULL
)

726 *
fûe_§gb_öã¡
 = 
öfo_±r
->
cﬁ‹•a˚
.
ªndîög_öã¡
;

727  (
PNG_INFO_sRGB
);

731 
	}
}

734 #ifde‡
PNG_iCCP_SUPPORTED


735 
≤g_uöt_32
 
PNGAPI


736 
	$≤g_gë_iCCP
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

737 
≤g_ch¨µ
 
«me
, *
com¥essi⁄_ty≥
,

738 
≤g_byãµ
 
¥ofûe
, 
≤g_uöt_32
 *
¥oÊí
)

740 
	`≤g_debug1
(1, "in %sÑetrieval function", "iCCP");

742 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

743 (
öfo_±r
->
vÆid
 & 
PNG_INFO_iCCP
) != 0 &&

744 
«me
 !
NULL
 && 
¥ofûe
 !NULL && 
¥oÊí
 != NULL)

746 *
«me
 = 
öfo_±r
->
ic˝_«me
;

747 *
¥ofûe
 = 
öfo_±r
->
ic˝_¥ofûe
;

748 *
¥oÊí
 = 
	`≤g_gë_uöt_32
(
öfo_±r
->
ic˝_¥ofûe
);

752 i‡(
com¥essi⁄_ty≥
 !
NULL
)

753 *
com¥essi⁄_ty≥
 = 
PNG_COMPRESSION_TYPE_BASE
;

754  (
PNG_INFO_iCCP
);

759 
	}
}

762 #ifde‡
PNG_sPLT_SUPPORTED


763 
PNGAPI


764 
	$≤g_gë_sPLT
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

765 
≤g_sPLT_çp
 
•Æëãs
)

767 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 !NULL && 
•Æëãs
 != NULL)

769 *
•Æëãs
 = 
öfo_±r
->
•…_∑Àâes
;

770  
öfo_±r
->
•…_∑Àâes_num
;

774 
	}
}

777 #ifde‡
PNG_eXIf_SUPPORTED


778 
≤g_uöt_32
 
PNGAPI


779 
	$≤g_gë_eXIf
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

780 
≤g_byãp
 *
exif
)

782 
	`≤g_w¨nög
(
≤g_±r
, "png_get_eXIf doesÇot work; useÖng_get_eXIf_1");

783 
	`PNG_UNUSED
(
öfo_±r
)

784 
	`PNG_UNUSED
(
exif
)

786 
	}
}

788 
≤g_uöt_32
 
PNGAPI


789 
	$≤g_gë_eXIf_1
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

790 
≤g_uöt_32
 *
num_exif
, 
≤g_byãp
 *
exif
)

792 
	`≤g_debug1
(1, "in %sÑetrieval function", "eXIf");

794 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

795 (
öfo_±r
->
vÆid
 & 
PNG_INFO_eXIf
Ë!0 && 
exif
 !
NULL
)

797 *
num_exif
 = 
öfo_±r
->num_exif;

798 *
exif
 = 
öfo_±r
->exif;

799  (
PNG_INFO_eXIf
);

803 
	}
}

806 #ifde‡
PNG_hIST_SUPPORTED


807 
≤g_uöt_32
 
PNGAPI


808 
	$≤g_gë_hIST
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

809 
≤g_uöt_16p
 *
hi°
)

811 
	`≤g_debug1
(1, "in %sÑetrieval function", "hIST");

813 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

814 (
öfo_±r
->
vÆid
 & 
PNG_INFO_hIST
Ë!0 && 
hi°
 !
NULL
)

816 *
hi°
 = 
öfo_±r
->hist;

817  (
PNG_INFO_hIST
);

821 
	}
}

824 
≤g_uöt_32
 
PNGAPI


825 
	$≤g_gë_IHDR
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

826 
≤g_uöt_32
 *
width
,Öng_uöt_32 *
height
, *
bô_dïth
,

827 *
cﬁ‹_ty≥
, *
öãæa˚_ty≥
, *
com¥essi⁄_ty≥
,

828 *
fûãr_ty≥
)

830 
	`≤g_debug1
(1, "in %sÑetrieval function", "IHDR");

832 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

835 i‡(
width
 !
NULL
)

836 *
width
 = 
öfo_±r
->width;

838 i‡(
height
 !
NULL
)

839 *
height
 = 
öfo_±r
->height;

841 i‡(
bô_dïth
 !
NULL
)

842 *
bô_dïth
 = 
öfo_±r
->bit_depth;

844 i‡(
cﬁ‹_ty≥
 !
NULL
)

845 *
cﬁ‹_ty≥
 = 
öfo_±r
->color_type;

847 i‡(
com¥essi⁄_ty≥
 !
NULL
)

848 *
com¥essi⁄_ty≥
 = 
öfo_±r
->compression_type;

850 i‡(
fûãr_ty≥
 !
NULL
)

851 *
fûãr_ty≥
 = 
öfo_±r
->filter_type;

853 i‡(
öãæa˚_ty≥
 !
NULL
)

854 *
öãæa˚_ty≥
 = 
öfo_±r
->interlace_type;

861 
	`≤g_check_IHDR
(
≤g_±r
, 
öfo_±r
->
width
, info_±r->
height
,

862 
öfo_±r
->
bô_dïth
, info_±r->
cﬁ‹_ty≥
, info_±r->
öãæa˚_ty≥
,

863 
öfo_±r
->
com¥essi⁄_ty≥
, info_±r->
fûãr_ty≥
);

866 
	}
}

868 #ifde‡
PNG_oFFs_SUPPORTED


869 
≤g_uöt_32
 
PNGAPI


870 
	$≤g_gë_oFFs
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

871 
≤g_öt_32
 *
off£t_x
,Öng_öt_32 *
off£t_y
, *
unô_ty≥
)

873 
	`≤g_debug1
(1, "in %sÑetrieval function", "oFFs");

875 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

876 (
öfo_±r
->
vÆid
 & 
PNG_INFO_oFFs
) != 0 &&

877 
off£t_x
 !
NULL
 && 
off£t_y
 !NULL && 
unô_ty≥
 != NULL)

879 *
off£t_x
 = 
öfo_±r
->
x_off£t
;

880 *
off£t_y
 = 
öfo_±r
->
y_off£t
;

881 *
unô_ty≥
 = ()
öfo_±r
->
off£t_unô_ty≥
;

882  (
PNG_INFO_oFFs
);

886 
	}
}

889 #ifde‡
PNG_pCAL_SUPPORTED


890 
≤g_uöt_32
 
PNGAPI


891 
	$≤g_gë_pCAL
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

892 
≤g_ch¨p
 *
puΩo£
, 
≤g_öt_32
 *
X0
,Öng_öt_32 *
X1
, *
ty≥
, *
≈¨ams
,

893 
≤g_ch¨p
 *
unôs
, 
≤g_ch¨µ
 *
∑øms
)

895 
	`≤g_debug1
(1, "in %sÑetrieval function", "pCAL");

897 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

898 (
öfo_±r
->
vÆid
 & 
PNG_INFO_pCAL
) != 0 &&

899 
puΩo£
 !
NULL
 && 
X0
 !NULL && 
X1
 !NULL && 
ty≥
 != NULL &&

900 
≈¨ams
 !
NULL
 && 
unôs
 !NULL && 
∑øms
 != NULL)

902 *
puΩo£
 = 
öfo_±r
->
pˇl_puΩo£
;

903 *
X0
 = 
öfo_±r
->
pˇl_X0
;

904 *
X1
 = 
öfo_±r
->
pˇl_X1
;

905 *
ty≥
 = ()
öfo_±r
->
pˇl_ty≥
;

906 *
≈¨ams
 = ()
öfo_±r
->
pˇl_≈¨ams
;

907 *
unôs
 = 
öfo_±r
->
pˇl_unôs
;

908 *
∑øms
 = 
öfo_±r
->
pˇl_∑øms
;

909  (
PNG_INFO_pCAL
);

913 
	}
}

916 #ifde‡
PNG_sCAL_SUPPORTED


917 #ifde‡
PNG_FIXED_POINT_SUPPORTED


918 #i‡
deföed
(
PNG_FLOATING_ARITHMETIC_SUPPORTED
) || \

919 
	$deföed
(
PNG_FLOATING_POINT_SUPPORTED
)

920 
≤g_uöt_32
 
PNGAPI


921 
	$≤g_gë_sCAL_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

922 *
unô
, 
≤g_fixed_poöt
 *
width
,Öng_fixed_poöà*
height
)

924 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

925 (
öfo_±r
->
vÆid
 & 
PNG_INFO_sCAL
) != 0)

927 *
unô
 = 
öfo_±r
->
sˇl_unô
;

932 *
width
 = 
	`≤g_fixed
(
≤g_±r
, 
	`©of
(
öfo_±r
->
sˇl_s_width
), "sCAL width");

933 *
height
 = 
	`≤g_fixed
(
≤g_±r
, 
	`©of
(
öfo_±r
->
sˇl_s_height
),

935  (
PNG_INFO_sCAL
);

939 
	}
}

942 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


943 
≤g_uöt_32
 
PNGAPI


944 
	$≤g_gë_sCAL
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

945 *
unô
, *
width
, *
height
)

947 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

948 (
öfo_±r
->
vÆid
 & 
PNG_INFO_sCAL
) != 0)

950 *
unô
 = 
öfo_±r
->
sˇl_unô
;

951 *
width
 = 
	`©of
(
öfo_±r
->
sˇl_s_width
);

952 *
height
 = 
	`©of
(
öfo_±r
->
sˇl_s_height
);

953  (
PNG_INFO_sCAL
);

957 
	}
}

959 
≤g_uöt_32
 
PNGAPI


960 
	$≤g_gë_sCAL_s
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

961 *
unô
, 
≤g_ch¨µ
 
width
,Öng_ch¨µ 
height
)

963 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

964 (
öfo_±r
->
vÆid
 & 
PNG_INFO_sCAL
) != 0)

966 *
unô
 = 
öfo_±r
->
sˇl_unô
;

967 *
width
 = 
öfo_±r
->
sˇl_s_width
;

968 *
height
 = 
öfo_±r
->
sˇl_s_height
;

969  (
PNG_INFO_sCAL
);

973 
	}
}

976 #ifde‡
PNG_pHYs_SUPPORTED


977 
≤g_uöt_32
 
PNGAPI


978 
	$≤g_gë_pHYs
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

979 
≤g_uöt_32
 *
ªs_x
,Öng_uöt_32 *
ªs_y
, *
unô_ty≥
)

981 
≤g_uöt_32
 
ªtvÆ
 = 0;

983 
	`≤g_debug1
(1, "in %sÑetrieval function", "pHYs");

985 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

986 (
öfo_±r
->
vÆid
 & 
PNG_INFO_pHYs
) != 0)

988 i‡(
ªs_x
 !
NULL
)

990 *
ªs_x
 = 
öfo_±r
->
x_pixñs_≥r_unô
;

991 
ªtvÆ
 |
PNG_INFO_pHYs
;

994 i‡(
ªs_y
 !
NULL
)

996 *
ªs_y
 = 
öfo_±r
->
y_pixñs_≥r_unô
;

997 
ªtvÆ
 |
PNG_INFO_pHYs
;

1000 i‡(
unô_ty≥
 !
NULL
)

1002 *
unô_ty≥
 = ()
öfo_±r
->
phys_unô_ty≥
;

1003 
ªtvÆ
 |
PNG_INFO_pHYs
;

1007  (
ªtvÆ
);

1008 
	}
}

1011 
≤g_uöt_32
 
PNGAPI


1012 
	$≤g_gë_PLTE
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1013 
≤g_cﬁ‹p
 *
∑Àâe
, *
num_∑Àâe
)

1015 
	`≤g_debug1
(1, "in %sÑetrieval function", "PLTE");

1017 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

1018 (
öfo_±r
->
vÆid
 & 
PNG_INFO_PLTE
Ë!0 && 
∑Àâe
 !
NULL
)

1020 *
∑Àâe
 = 
öfo_±r
->palette;

1021 *
num_∑Àâe
 = 
öfo_±r
->num_palette;

1022 
	`≤g_debug1
(3, "num_∑Àâê%d", *
num_∑Àâe
);

1023  (
PNG_INFO_PLTE
);

1027 
	}
}

1029 #ifde‡
PNG_sBIT_SUPPORTED


1030 
≤g_uöt_32
 
PNGAPI


1031 
	$≤g_gë_sBIT
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1032 
≤g_cﬁ‹_8p
 *
sig_bô
)

1034 
	`≤g_debug1
(1, "in %sÑetrieval function", "sBIT");

1036 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

1037 (
öfo_±r
->
vÆid
 & 
PNG_INFO_sBIT
Ë!0 && 
sig_bô
 !
NULL
)

1039 *
sig_bô
 = &(
öfo_±r
->sig_bit);

1040  (
PNG_INFO_sBIT
);

1044 
	}
}

1047 #ifde‡
PNG_TEXT_SUPPORTED


1048 
PNGAPI


1049 
	$≤g_gë_ãxt
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1050 
≤g_ãxç
 *
ãxt_±r
, *
num_ãxt
)

1052 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 !NULL && info_±r->
num_ãxt
 > 0)

1054 
	`≤g_debug1
(1, "in 0x%lxÑetrieval function",

1055 ()
≤g_±r
->
chunk_«me
);

1057 i‡(
ãxt_±r
 !
NULL
)

1058 *
ãxt_±r
 = 
öfo_±r
->
ãxt
;

1060 i‡(
num_ãxt
 !
NULL
)

1061 *
num_ãxt
 = 
öfo_±r
->num_text;

1063  
öfo_±r
->
num_ãxt
;

1066 i‡(
num_ãxt
 !
NULL
)

1067 *
num_ãxt
 = 0;

1070 
	}
}

1073 #ifde‡
PNG_tIME_SUPPORTED


1074 
≤g_uöt_32
 
PNGAPI


1075 
	$≤g_gë_tIME
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1076 
≤g_timï
 *
mod_time
)

1078 
	`≤g_debug1
(1, "in %sÑetrieval function", "tIME");

1080 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

1081 (
öfo_±r
->
vÆid
 & 
PNG_INFO_tIME
Ë!0 && 
mod_time
 !
NULL
)

1083 *
mod_time
 = &(
öfo_±r
->mod_time);

1084  (
PNG_INFO_tIME
);

1088 
	}
}

1091 #ifde‡
PNG_tRNS_SUPPORTED


1092 
≤g_uöt_32
 
PNGAPI


1093 
	$≤g_gë_tRNS
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1094 
≤g_byãp
 *
å™s_Æpha
, *
num_å™s
, 
≤g_cﬁ‹_16p
 *
å™s_cﬁ‹
)

1096 
≤g_uöt_32
 
ªtvÆ
 = 0;

1097 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL &&

1098 (
öfo_±r
->
vÆid
 & 
PNG_INFO_tRNS
) != 0)

1100 
	`≤g_debug1
(1, "in %sÑetrieval function", "tRNS");

1102 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1104 i‡(
å™s_Æpha
 !
NULL
)

1106 *
å™s_Æpha
 = 
öfo_±r
->trans_alpha;

1107 
ªtvÆ
 |
PNG_INFO_tRNS
;

1110 i‡(
å™s_cﬁ‹
 !
NULL
)

1111 *
å™s_cﬁ‹
 = &(
öfo_±r
->trans_color);

1116 i‡(
å™s_cﬁ‹
 !
NULL
)

1118 *
å™s_cﬁ‹
 = &(
öfo_±r
->trans_color);

1119 
ªtvÆ
 |
PNG_INFO_tRNS
;

1122 i‡(
å™s_Æpha
 !
NULL
)

1123 *
å™s_Æpha
 = 
NULL
;

1126 i‡(
num_å™s
 !
NULL
)

1128 *
num_å™s
 = 
öfo_±r
->num_trans;

1129 
ªtvÆ
 |
PNG_INFO_tRNS
;

1133  (
ªtvÆ
);

1134 
	}
}

1137 #ifde‡
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


1138 
PNGAPI


1139 
	$≤g_gë_unknown_chunks
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1140 
≤g_unknown_chunkµ
 
unknowns
)

1142 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 !NULL && 
unknowns
 != NULL)

1144 *
unknowns
 = 
öfo_±r
->
unknown_chunks
;

1145  
öfo_±r
->
unknown_chunks_num
;

1149 
	}
}

1152 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1153 
≤g_byã
 
PNGAPI


1154 
	$≤g_gë_rgb_to_gøy_°©us
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1156  (
≤g_byã
)(
≤g_±r
 ?Öng_±r->
rgb_to_gøy_°©us
 : 0);

1157 
	}
}

1160 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


1161 
≤g_voidp
 
PNGAPI


1162 
	$≤g_gë_u£r_chunk_±r
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1164  (
≤g_±r
 ?Öng_±r->
u£r_chunk_±r
 : 
NULL
);

1165 
	}
}

1168 
size_t
 
PNGAPI


1169 
	$≤g_gë_com¥essi⁄_buf„r_size
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1171 i‡(
≤g_±r
 =
NULL
)

1174 #ifde‡
PNG_WRITE_SUPPORTED


1175 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0)

1178 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1179  
≤g_±r
->
IDAT_ªad_size
;

1181  
PNG_IDAT_READ_SIZE
;

1185 #ifde‡
PNG_WRITE_SUPPORTED


1187  
≤g_±r
->
zbuf„r_size
;

1189 
	}
}

1191 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


1194 
≤g_uöt_32
 
PNGAPI


1195 
	$≤g_gë_u£r_width_max
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1197  (
≤g_±r
 ?Öng_±r->
u£r_width_max
 : 0);

1198 
	}
}

1200 
≤g_uöt_32
 
PNGAPI


1201 
	$≤g_gë_u£r_height_max
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1203  (
≤g_±r
 ?Öng_±r->
u£r_height_max
 : 0);

1204 
	}
}

1207 
≤g_uöt_32
 
PNGAPI


1208 
	$≤g_gë_chunk_ˇche_max
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1210  (
≤g_±r
 ?Öng_±r->
u£r_chunk_ˇche_max
 : 0);

1211 
	}
}

1214 
≤g_Æloc_size_t
 
PNGAPI


1215 
	$≤g_gë_chunk_mÆloc_max
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1217  (
≤g_±r
 ?Öng_±r->
u£r_chunk_mÆloc_max
 : 0);

1218 
	}
}

1222 #ifde‡
PNG_IO_STATE_SUPPORTED


1223 
≤g_uöt_32
 
PNGAPI


1224 
	$≤g_gë_io_°©e
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1226  
≤g_±r
->
io_°©e
;

1227 
	}
}

1229 
≤g_uöt_32
 
PNGAPI


1230 
	$≤g_gë_io_chunk_ty≥
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1232  
≤g_±r
->
chunk_«me
;

1233 
	}
}

1236 #ifde‡
PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED


1237 #ifde‡
PNG_GET_PALETTE_MAX_SUPPORTED


1238 
PNGAPI


1239 
	$≤g_gë_∑Àâe_max
(
≤g_c⁄°_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_öf›
 
öfo_±r
)

1241 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

1242  
≤g_±r
->
num_∑Àâe_max
;

1245 
	}
}

	@pnginfo.h

52 #i‚de‡
PNGINFO_H


53 
	#PNGINFO_H


	)

55 
	s≤g_öfo_def


58 
≤g_uöt_32
 
	mwidth
;

59 
≤g_uöt_32
 
	mheight
;

60 
≤g_uöt_32
 
	mvÆid
;

61 
size_t
 
	mrowbyãs
;

62 
≤g_cﬁ‹p
 
	m∑Àâe
;

63 
≤g_uöt_16
 
	mnum_∑Àâe
;

64 
≤g_uöt_16
 
	mnum_å™s
;

65 
≤g_byã
 
	mbô_dïth
;

66 
≤g_byã
 
	mcﬁ‹_ty≥
;

68 
≤g_byã
 
	mcom¥essi⁄_ty≥
;

69 
≤g_byã
 
	mfûãr_ty≥
;

70 
≤g_byã
 
	möãæa˚_ty≥
;

75 
≤g_byã
 
	mch™√ls
;

76 
≤g_byã
 
	mpixñ_dïth
;

77 
≤g_byã
 
	m•¨e_byã
;

79 #ifde‡
PNG_READ_SUPPORTED


81 
≤g_byã
 
	msig«tuª
[8];

90 #i‡
deföed
(
PNG_COLORSPACE_SUPPORTED
Ë|| deföed(
PNG_GAMMA_SUPPORTED
)

101 
≤g_cﬁ‹•a˚
 
	mcﬁ‹•a˚
;

104 #ifde‡
PNG_iCCP_SUPPORTED


106 
≤g_ch¨p
 
	mic˝_«me
;

107 
≤g_byãp
 
	mic˝_¥ofûe
;

108 
≤g_uöt_32
 
	mic˝_¥oÊí
;

111 #ifde‡
PNG_TEXT_SUPPORTED


120 
	mnum_ãxt
;

121 
	mmax_ãxt
;

122 
≤g_ãxç
 
	mãxt
;

125 #ifde‡
PNG_tIME_SUPPORTED


129 
≤g_time
 
	mmod_time
;

132 #ifde‡
PNG_sBIT_SUPPORTED


139 
≤g_cﬁ‹_8
 
	msig_bô
;

142 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_EXPAND_SUPPORTED
) || \

143 
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
)

153 
≤g_byãp
 
	må™s_Æpha
;

154 
≤g_cﬁ‹_16
 
	må™s_cﬁ‹
;

157 #i‡
deföed
(
PNG_bKGD_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

164 
≤g_cﬁ‹_16
 
	mbackground
;

167 #ifde‡
PNG_oFFs_SUPPORTED


173 
≤g_öt_32
 
	mx_off£t
;

174 
≤g_öt_32
 
	my_off£t
;

175 
≤g_byã
 
	moff£t_unô_ty≥
;

178 #ifde‡
PNG_pHYs_SUPPORTED


183 
≤g_uöt_32
 
	mx_pixñs_≥r_unô
;

184 
≤g_uöt_32
 
	my_pixñs_≥r_unô
;

185 
≤g_byã
 
	mphys_unô_ty≥
;

188 #ifde‡
PNG_eXIf_SUPPORTED


189 
	mnum_exif
;

190 
≤g_byãp
 
	mexif
;

191 #ifde‡
PNG_READ_eXIf_SUPPORTED


192 
≤g_byãp
 
	meXIf_buf
;

196 #ifde‡
PNG_hIST_SUPPORTED


203 
≤g_uöt_16p
 
	mhi°
;

206 #ifde‡
PNG_pCAL_SUPPORTED


218 
≤g_ch¨p
 
	mpˇl_puΩo£
;

219 
≤g_öt_32
 
	mpˇl_X0
;

220 
≤g_öt_32
 
	mpˇl_X1
;

221 
≤g_ch¨p
 
	mpˇl_unôs
;

222 
≤g_ch¨µ
 
	mpˇl_∑øms
;

223 
≤g_byã
 
	mpˇl_ty≥
;

224 
≤g_byã
 
	mpˇl_≈¨ams
;

228 
≤g_uöt_32
 
	m‰ì_me
;

230 #ifde‡
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


232 
≤g_unknown_chunkp
 
	munknown_chunks
;

237 
	munknown_chunks_num
;

240 #ifde‡
PNG_sPLT_SUPPORTED


242 
≤g_sPLT_ç
 
	m•…_∑Àâes
;

243 
	m•…_∑Àâes_num
;

246 #ifde‡
PNG_sCAL_SUPPORTED


254 
≤g_byã
 
	msˇl_unô
;

255 
≤g_ch¨p
 
	msˇl_s_width
;

256 
≤g_ch¨p
 
	msˇl_s_height
;

259 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


263 
≤g_byãµ
 
	mrow_poöãrs
;

	@pngmem.c

20 
	~"≤g¥iv.h
"

22 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë|| deföed(
PNG_WRITE_SUPPORTED
)

25 
	$≤g_de°roy_≤g_°ru˘
(
≤g_°ru˘Ω
 
≤g_±r
)

27 i‡(
≤g_±r
 !
NULL
)

32 
≤g_°ru˘
 
dummy_°ru˘
 = *
≤g_±r
;

33 
	`mem£t
(
≤g_±r
, 0, ( *png_ptr));

34 
	`≤g_‰ì
(&
dummy_°ru˘
, 
≤g_±r
);

36 #ifde‡
PNG_SETJMP_SUPPORTED


38 
	`≤g_‰ì_jmpbuf
(&
dummy_°ru˘
);

41 
	}
}

49 
PNG_FUNCTION
(
≤g_voidp
,
PNGAPI


50 
≤g_ˇŒoc
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_Æloc_size_t
 
size
),
PNG_ALLOCATED
)

52 
≤g_voidp
 
	gªt
;

54 
	gªt
 = 
≤g_mÆloc
(
≤g_±r
, 
size
);

56 i‡(
	gªt
 !
NULL
)

57 
mem£t
(
ªt
, 0, 
size
);

59  
	gªt
;

67 
PNG_FUNCTION
(
≤g_voidp
 ,

68 
≤g_mÆloc_ba£
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_Æloc_size_t
 
size
),

69 
PNG_ALLOCATED
)

76 #i‚de‡
PNG_USER_MEM_SUPPORTED


77 
PNG_UNUSED
(
≤g_±r
)

83 i‡(
	gsize
 > 0 && sizê<
PNG_SIZE_MAX


84 #ifde‡
PNG_MAX_MALLOC_64K


85 && 
size
 <= 65536U

89 #ifde‡
PNG_USER_MEM_SUPPORTED


90 i‡(
≤g_±r
 !
NULL
 &&Öng_±r->
mÆloc_‚
 != NULL)

91  
≤g_±r
->
mÆloc_‚
(
≤g_c⁄°ˇ°
(
≤g_°ru˘Ω
,≤g_±r), 
size
);

95  
mÆloc
((
size_t
)
size
);

99  
	gNULL
;

102 #i‡
deföed
(
PNG_TEXT_SUPPORTED
Ë|| deföed(
PNG_sPLT_SUPPORTED
) ||\

103 
	$deföed
(
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
)

108 
≤g_voidp


109 
	$≤g_mÆloc_¨øy_checked
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
√Àmíts
,

110 
size_t
 
ñemít_size
)

112 
≤g_Æloc_size_t
 
ªq
 = (≤g_Æloc_size_t)
√Àmíts
;

114 i‡(
ªq
 <
PNG_SIZE_MAX
/
ñemít_size
)

115  
	`≤g_mÆloc_ba£
(
≤g_±r
, 
ªq
 * 
ñemít_size
);

118  
NULL
;

119 
	}
}

121 
PNG_FUNCTION
(
≤g_voidp
 ,

122 
≤g_mÆloc_¨øy
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
√Àmíts
,

123 
size_t
 
ñemít_size
),
PNG_ALLOCATED
)

125 i‡(
	g√Àmíts
 <0 || 
ñemít_size
 == 0)

126 
≤g_îr‹
(
≤g_±r
, "internalÉrror:árrayálloc");

128  
≤g_mÆloc_¨øy_checked
(
≤g_±r
, 
√Àmíts
, 
ñemít_size
);

131 
PNG_FUNCTION
(
≤g_voidp
 ,

132 
≤g_ªÆloc_¨øy
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_voidp
 
ﬁd_¨øy
,

133 
ﬁd_ñemíts
, 
add_ñemíts
, 
size_t
 
ñemít_size
),
PNG_ALLOCATED
)

136 i‡(
	gadd_ñemíts
 <0 || 
ñemít_size
 =0 || 
ﬁd_ñemíts
 < 0 ||

137 (
ﬁd_¨øy
 =
NULL
 && 
ﬁd_ñemíts
 > 0))

138 
≤g_îr‹
(
≤g_±r
, "internalÉrror:árrayÑealloc");

143 i‡(
	gadd_ñemíts
 <
INT_MAX
 - 
ﬁd_ñemíts
)

145 
≤g_voidp
 
√w_¨øy
 = 
≤g_mÆloc_¨øy_checked
(
≤g_±r
,

146 
ﬁd_ñemíts
+
add_ñemíts
, 
ñemít_size
);

148 i‡(
	g√w_¨øy
 !
NULL
)

153 i‡(
ﬁd_ñemíts
 > 0)

154 
mem˝y
(
√w_¨øy
, 
ﬁd_¨øy
, 
ñemít_size
*()
ﬁd_ñemíts
);

156 
mem£t
((*)
√w_¨øy
 + 
ñemít_size
*()
ﬁd_ñemíts
, 0,

157 
ñemít_size
*()
add_ñemíts
);

159  
	g√w_¨øy
;

163  
	gNULL
;

171 
PNG_FUNCTION
(
≤g_voidp
,
PNGAPI


172 
≤g_mÆloc
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_Æloc_size_t
 
size
),
PNG_ALLOCATED
)

174 
≤g_voidp
 
	gªt
;

176 i‡(
	g≤g_±r
 =
NULL
)

177  
NULL
;

179 
	gªt
 = 
≤g_mÆloc_ba£
(
≤g_±r
, 
size
);

181 i‡(
	gªt
 =
NULL
)

182 
≤g_îr‹
(
≤g_±r
, "Out of memory");

184  
	gªt
;

187 #ifde‡
PNG_USER_MEM_SUPPORTED


188 
PNG_FUNCTION
(
≤g_voidp
,
PNGAPI


189 
≤g_mÆloc_deÁu…
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_Æloc_size_t
 
size
),

190 
PNG_ALLOCATED
 
PNG_DEPRECATED
)

192 
≤g_voidp
 
	gªt
;

194 i‡(
	g≤g_±r
 =
NULL
)

195  
NULL
;

198 
	gªt
 = 
≤g_mÆloc_ba£
(
NULL
 , 
size
);

200 i‡(
	gªt
 =
NULL
)

201 
≤g_îr‹
(
≤g_±r
, "Out of Memory");

203  
	gªt
;

211 
PNG_FUNCTION
(
≤g_voidp
,
PNGAPI


212 
≤g_mÆloc_w¨n
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_Æloc_size_t
 
size
),

213 
PNG_ALLOCATED
)

215 i‡(
	g≤g_±r
 !
NULL
)

217 
≤g_voidp
 
ªt
 = 
≤g_mÆloc_ba£
(
≤g_±r
, 
size
);

219 i‡(
	gªt
 !
NULL
)

220  
ªt
;

222 
≤g_w¨nög
(
≤g_±r
, "Out of memory");

225  
	gNULL
;

231 
PNGAPI


232 
	$≤g_‰ì
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
±r
)

234 i‡(
≤g_±r
 =
NULL
 || 
±r
 == NULL)

237 #ifde‡
PNG_USER_MEM_SUPPORTED


238 i‡(
≤g_±r
->
‰ì_‚
 !
NULL
)

239 
≤g_±r
->
	`‰ì_‚
(
	`≤g_c⁄°ˇ°
(
≤g_°ru˘Ω
,≤g_±r), 
±r
);

242 
	`≤g_‰ì_deÁu…
(
≤g_±r
, 
±r
);

243 
	}
}

245 
PNG_FUNCTION
(,
PNGAPI


246 
≤g_‰ì_deÁu…
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
±r
),
PNG_DEPRECATED
)

248 i‡(
	g≤g_±r
 =
NULL
 || 
±r
 == NULL)

252 
‰ì
(
±r
);

255 #ifde‡
PNG_USER_MEM_SUPPORTED


259 
PNGAPI


260 
	$≤g_£t_mem_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
mem_±r
, 
≤g_mÆloc_±r


261 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
)

263 i‡(
≤g_±r
 !
NULL
)

265 
≤g_±r
->
mem_±r
 = mem_ptr;

266 
≤g_±r
->
mÆloc_‚
 = malloc_fn;

267 
≤g_±r
->
‰ì_‚
 = free_fn;

269 
	}
}

275 
≤g_voidp
 
PNGAPI


276 
	$≤g_gë_mem_±r
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

278 i‡(
≤g_±r
 =
NULL
)

279  
NULL
;

281  
≤g_±r
->
mem_±r
;

282 
	}
}

	@pngpread.c

14 
	~"≤g¥iv.h
"

16 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


19 
	#PNG_READ_SIG_MODE
 0

	)

20 
	#PNG_READ_CHUNK_MODE
 1

	)

21 
	#PNG_READ_IDAT_MODE
 2

	)

22 
	#PNG_READ_tEXt_MODE
 4

	)

23 
	#PNG_READ_zTXt_MODE
 5

	)

24 
	#PNG_READ_DONE_MODE
 6

	)

25 
	#PNG_READ_iTXt_MODE
 7

	)

26 
	#PNG_ERROR_MODE
 8

	)

28 
	#PNG_PUSH_SAVE_BUFFER_IF_FULL
 \

29 i‡(
≤g_±r
->
push_Àngth
 + 4 >Öng_±r->
buf„r_size
) \

30 { 
	`≤g_push_ßve_buf„r
(
≤g_±r
); ; }

	)

31 
	#PNG_PUSH_SAVE_BUFFER_IF_LT
(
N
) \

32 i‡(
≤g_±r
->
buf„r_size
 < 
N
) \

33 { 
	`≤g_push_ßve_buf„r
(
≤g_±r
); ; }

	)

35 
PNGAPI


36 
	$≤g_¥o˚ss_d©a
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

37 
≤g_byãp
 
buf„r
, 
size_t
 
buf„r_size
)

39 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

42 
	`≤g_push_ª°‹e_buf„r
(
≤g_±r
, 
buf„r
, 
buf„r_size
);

44 
≤g_±r
->
buf„r_size
)

46 
	`≤g_¥o˚ss_some_d©a
(
≤g_±r
, 
öfo_±r
);

48 
	}
}

50 
size_t
 
PNGAPI


51 
	$≤g_¥o˚ss_d©a_∑u£
(
≤g_°ru˘Ω
 
≤g_±r
, 
ßve
)

53 i‡(
≤g_±r
 !
NULL
)

58 i‡(
ßve
 != 0)

59 
	`≤g_push_ßve_buf„r
(
≤g_±r
);

63 
size_t
 
ªmaöög
 = 
≤g_±r
->
buf„r_size
;

64 
≤g_±r
->
buf„r_size
 = 0;

69 i‡(
≤g_±r
->
ßve_buf„r_size
 < 
ªmaöög
)

70  
ªmaöög
 - 
≤g_±r
->
ßve_buf„r_size
;

75 
	}
}

77 
≤g_uöt_32
 
PNGAPI


78 
	$≤g_¥o˚ss_d©a_skù
(
≤g_°ru˘Ω
 
≤g_±r
)

85 
	`≤g_≠p_w¨nög
(
≤g_±r
,

88 
	}
}

94 
	$≤g_¥o˚ss_some_d©a
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

96 i‡(
≤g_±r
 =
NULL
)

99 
≤g_±r
->
¥o˚ss_mode
)

101 
PNG_READ_SIG_MODE
:

103 
	`≤g_push_ªad_sig
(
≤g_±r
, 
öfo_±r
);

107 
PNG_READ_CHUNK_MODE
:

109 
	`≤g_push_ªad_chunk
(
≤g_±r
, 
öfo_±r
);

113 
PNG_READ_IDAT_MODE
:

115 
	`≤g_push_ªad_IDAT
(
≤g_±r
);

121 
≤g_±r
->
buf„r_size
 = 0;

125 
	}
}

134 
	$≤g_push_ªad_sig
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

136 
size_t
 
num_checked
 = 
≤g_±r
->
sig_byãs
;

137 
size_t
 
num_to_check
 = 8 - 
num_checked
;

139 i‡(
≤g_±r
->
buf„r_size
 < 
num_to_check
)

141 
num_to_check
 = 
≤g_±r
->
buf„r_size
;

144 
	`≤g_push_fûl_buf„r
(
≤g_±r
, &(
öfo_±r
->
sig«tuª
[
num_checked
]),

145 
num_to_check
);

146 
≤g_±r
->
sig_byãs
 = (
≤g_byã
)’ng_±r->sig_byã†+ 
num_to_check
);

148 i‡(
	`≤g_sig_cmp
(
öfo_±r
->
sig«tuª
, 
num_checked
, 
num_to_check
))

150 i‡(
num_checked
 < 4 &&

151 
	`≤g_sig_cmp
(
öfo_±r
->
sig«tuª
, 
num_checked
, 
num_to_check
 - 4))

152 
	`≤g_îr‹
(
≤g_±r
, "Notá PNG file");

155 
	`≤g_îr‹
(
≤g_±r
, "PNG file corrupted by ASCII conversion");

159 i‡(
≤g_±r
->
sig_byãs
 >= 8)

161 
≤g_±r
->
¥o˚ss_mode
 = 
PNG_READ_CHUNK_MODE
;

164 
	}
}

167 
	$≤g_push_ªad_chunk
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

169 
≤g_uöt_32
 
chunk_«me
;

170 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


171 
kìp
;

180 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_CHUNK_HEADER
) == 0)

182 
≤g_byã
 
chunk_Àngth
[4];

183 
≤g_byã
 
chunk_èg
[4];

185 
	`PNG_PUSH_SAVE_BUFFER_IF_LT
(8)

186 
	`≤g_push_fûl_buf„r
(
≤g_±r
, 
chunk_Àngth
, 4);

187 
≤g_±r
->
push_Àngth
 = 
	`≤g_gë_uöt_31
’ng_±r, 
chunk_Àngth
);

188 
	`≤g_ª£t_¸c
(
≤g_±r
);

189 
	`≤g_¸c_ªad
(
≤g_±r
, 
chunk_èg
, 4);

190 
≤g_±r
->
chunk_«me
 = 
	`PNG_CHUNK_FROM_STRING
(
chunk_èg
);

191 
	`≤g_check_chunk_«me
(
≤g_±r
,Öng_±r->
chunk_«me
);

192 
	`≤g_check_chunk_Àngth
(
≤g_±r
,Öng_±r->
push_Àngth
);

193 
≤g_±r
->
mode
 |
PNG_HAVE_CHUNK_HEADER
;

196 
chunk_«me
 = 
≤g_±r
->chunk_name;

198 i‡(
chunk_«me
 =
≤g_IDAT
)

200 i‡((
≤g_±r
->
mode
 & 
PNG_AFTER_IDAT
) != 0)

201 
≤g_±r
->
mode
 |
PNG_HAVE_CHUNK_AFTER_IDAT
;

207 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

208 
	`≤g_îr‹
(
≤g_±r
, "Missing IHDR before IDAT");

210 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 &&

211 (
≤g_±r
->
mode
 & 
PNG_HAVE_PLTE
) == 0)

212 
	`≤g_îr‹
(
≤g_±r
, "Missing PLTE before IDAT");

214 
≤g_±r
->
¥o˚ss_mode
 = 
PNG_READ_IDAT_MODE
;

216 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

217 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_CHUNK_AFTER_IDAT
) == 0)

218 i‡(
≤g_±r
->
push_Àngth
 == 0)

221 
≤g_±r
->
mode
 |
PNG_HAVE_IDAT
;

223 i‡((
≤g_±r
->
mode
 & 
PNG_AFTER_IDAT
) != 0)

224 
	`≤g_bíign_îr‹
(
≤g_±r
, "Too many IDATs found");

227 i‡(
chunk_«me
 =
≤g_IHDR
)

229 i‡(
≤g_±r
->
push_Àngth
 != 13)

230 
	`≤g_îr‹
(
≤g_±r
, "Invalid IHDRÜength");

232 
PNG_PUSH_SAVE_BUFFER_IF_FULL


233 
	`≤g_h™dÀ_IHDR
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

236 i‡(
chunk_«me
 =
≤g_IEND
)

238 
PNG_PUSH_SAVE_BUFFER_IF_FULL


239 
	`≤g_h™dÀ_IEND
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

241 
≤g_±r
->
¥o˚ss_mode
 = 
PNG_READ_DONE_MODE
;

242 
	`≤g_push_have_íd
(
≤g_±r
, 
öfo_±r
);

245 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


246 i‡((
kìp
 = 
	`≤g_chunk_unknown_h™dlög
(
≤g_±r
, 
chunk_«me
)) != 0)

248 
PNG_PUSH_SAVE_BUFFER_IF_FULL


249 
	`≤g_h™dÀ_unknown
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
, 
kìp
);

251 i‡(
chunk_«me
 =
≤g_PLTE
)

252 
≤g_±r
->
mode
 |
PNG_HAVE_PLTE
;

256 i‡(
chunk_«me
 =
≤g_PLTE
)

258 
PNG_PUSH_SAVE_BUFFER_IF_FULL


259 
	`≤g_h™dÀ_PLTE
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

262 i‡(
chunk_«me
 =
≤g_IDAT
)

264 
≤g_±r
->
id©_size
 =Öng_±r->
push_Àngth
;

265 
≤g_±r
->
¥o˚ss_mode
 = 
PNG_READ_IDAT_MODE
;

266 
	`≤g_push_have_öfo
(
≤g_±r
, 
öfo_±r
);

267 
≤g_±r
->
z°ªam
.
avaû_out
 =

268 (
uI¡
Ë
	`PNG_ROWBYTES
(
≤g_±r
->
pixñ_dïth
,

269 
≤g_±r
->
iwidth
) + 1;

270 
≤g_±r
->
z°ªam
.
√xt_out
 =Öng_±r->
row_buf
;

274 #ifde‡
PNG_READ_gAMA_SUPPORTED


275 i‡(
≤g_±r
->
chunk_«me
 =
≤g_gAMA
)

277 
PNG_PUSH_SAVE_BUFFER_IF_FULL


278 
	`≤g_h™dÀ_gAMA
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

282 #ifde‡
PNG_READ_sBIT_SUPPORTED


283 i‡(
≤g_±r
->
chunk_«me
 =
≤g_sBIT
)

285 
PNG_PUSH_SAVE_BUFFER_IF_FULL


286 
	`≤g_h™dÀ_sBIT
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

290 #ifde‡
PNG_READ_cHRM_SUPPORTED


291 i‡(
≤g_±r
->
chunk_«me
 =
≤g_cHRM
)

293 
PNG_PUSH_SAVE_BUFFER_IF_FULL


294 
	`≤g_h™dÀ_cHRM
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

298 #ifde‡
PNG_READ_sRGB_SUPPORTED


299 i‡(
chunk_«me
 =
≤g_sRGB
)

301 
PNG_PUSH_SAVE_BUFFER_IF_FULL


302 
	`≤g_h™dÀ_sRGB
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

306 #ifde‡
PNG_READ_iCCP_SUPPORTED


307 i‡(
≤g_±r
->
chunk_«me
 =
≤g_iCCP
)

309 
PNG_PUSH_SAVE_BUFFER_IF_FULL


310 
	`≤g_h™dÀ_iCCP
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

314 #ifde‡
PNG_READ_sPLT_SUPPORTED


315 i‡(
chunk_«me
 =
≤g_sPLT
)

317 
PNG_PUSH_SAVE_BUFFER_IF_FULL


318 
	`≤g_h™dÀ_sPLT
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

322 #ifde‡
PNG_READ_tRNS_SUPPORTED


323 i‡(
chunk_«me
 =
≤g_tRNS
)

325 
PNG_PUSH_SAVE_BUFFER_IF_FULL


326 
	`≤g_h™dÀ_tRNS
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

330 #ifde‡
PNG_READ_bKGD_SUPPORTED


331 i‡(
chunk_«me
 =
≤g_bKGD
)

333 
PNG_PUSH_SAVE_BUFFER_IF_FULL


334 
	`≤g_h™dÀ_bKGD
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

338 #ifde‡
PNG_READ_hIST_SUPPORTED


339 i‡(
chunk_«me
 =
≤g_hIST
)

341 
PNG_PUSH_SAVE_BUFFER_IF_FULL


342 
	`≤g_h™dÀ_hIST
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

346 #ifde‡
PNG_READ_pHYs_SUPPORTED


347 i‡(
chunk_«me
 =
≤g_pHYs
)

349 
PNG_PUSH_SAVE_BUFFER_IF_FULL


350 
	`≤g_h™dÀ_pHYs
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

354 #ifde‡
PNG_READ_oFFs_SUPPORTED


355 i‡(
chunk_«me
 =
≤g_oFFs
)

357 
PNG_PUSH_SAVE_BUFFER_IF_FULL


358 
	`≤g_h™dÀ_oFFs
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

362 #ifde‡
PNG_READ_pCAL_SUPPORTED


363 i‡(
chunk_«me
 =
≤g_pCAL
)

365 
PNG_PUSH_SAVE_BUFFER_IF_FULL


366 
	`≤g_h™dÀ_pCAL
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

370 #ifde‡
PNG_READ_sCAL_SUPPORTED


371 i‡(
chunk_«me
 =
≤g_sCAL
)

373 
PNG_PUSH_SAVE_BUFFER_IF_FULL


374 
	`≤g_h™dÀ_sCAL
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

378 #ifde‡
PNG_READ_tIME_SUPPORTED


379 i‡(
chunk_«me
 =
≤g_tIME
)

381 
PNG_PUSH_SAVE_BUFFER_IF_FULL


382 
	`≤g_h™dÀ_tIME
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

386 #ifde‡
PNG_READ_tEXt_SUPPORTED


387 i‡(
chunk_«me
 =
≤g_tEXt
)

389 
PNG_PUSH_SAVE_BUFFER_IF_FULL


390 
	`≤g_h™dÀ_tEXt
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

394 #ifde‡
PNG_READ_zTXt_SUPPORTED


395 i‡(
chunk_«me
 =
≤g_zTXt
)

397 
PNG_PUSH_SAVE_BUFFER_IF_FULL


398 
	`≤g_h™dÀ_zTXt
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

402 #ifde‡
PNG_READ_iTXt_SUPPORTED


403 i‡(
chunk_«me
 =
≤g_iTXt
)

405 
PNG_PUSH_SAVE_BUFFER_IF_FULL


406 
	`≤g_h™dÀ_iTXt
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
);

412 
PNG_PUSH_SAVE_BUFFER_IF_FULL


413 
	`≤g_h™dÀ_unknown
(
≤g_±r
, 
öfo_±r
,Öng_±r->
push_Àngth
,

414 
PNG_HANDLE_CHUNK_AS_DEFAULT
);

417 
≤g_±r
->
mode
 &~
PNG_HAVE_CHUNK_HEADER
;

418 
	}
}

420 
PNGCBAPI


421 
	$≤g_push_fûl_buf„r
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
buf„r
, 
size_t
 
Àngth
)

423 
≤g_byãp
 
±r
;

425 i‡(
≤g_±r
 =
NULL
)

428 
±r
 = 
buf„r
;

429 i‡(
≤g_±r
->
ßve_buf„r_size
 != 0)

431 
size_t
 
ßve_size
;

433 i‡(
Àngth
 < 
≤g_±r
->
ßve_buf„r_size
)

434 
ßve_size
 = 
Àngth
;

437 
ßve_size
 = 
≤g_±r
->
ßve_buf„r_size
;

439 
	`mem˝y
(
±r
, 
≤g_±r
->
ßve_buf„r_±r
, 
ßve_size
);

440 
Àngth
 -
ßve_size
;

441 
±r
 +
ßve_size
;

442 
≤g_±r
->
buf„r_size
 -
ßve_size
;

443 
≤g_±r
->
ßve_buf„r_size
 -
ßve_size
;

444 
≤g_±r
->
ßve_buf„r_±r
 +
ßve_size
;

446 i‡(
Àngth
 !0 && 
≤g_±r
->
cuºít_buf„r_size
 != 0)

448 
size_t
 
ßve_size
;

450 i‡(
Àngth
 < 
≤g_±r
->
cuºít_buf„r_size
)

451 
ßve_size
 = 
Àngth
;

454 
ßve_size
 = 
≤g_±r
->
cuºít_buf„r_size
;

456 
	`mem˝y
(
±r
, 
≤g_±r
->
cuºít_buf„r_±r
, 
ßve_size
);

457 
≤g_±r
->
buf„r_size
 -
ßve_size
;

458 
≤g_±r
->
cuºít_buf„r_size
 -
ßve_size
;

459 
≤g_±r
->
cuºít_buf„r_±r
 +
ßve_size
;

461 
	}
}

464 
	$≤g_push_ßve_buf„r
(
≤g_°ru˘Ω
 
≤g_±r
)

466 i‡(
≤g_±r
->
ßve_buf„r_size
 != 0)

468 i‡(
≤g_±r
->
ßve_buf„r_±r
 !≤g_±r->
ßve_buf„r
)

470 
size_t
 
i
, 
i°›
;

471 
≤g_byãp
 
•
;

472 
≤g_byãp
 
dp
;

474 
i°›
 = 
≤g_±r
->
ßve_buf„r_size
;

475 
i
 = 0, 
•
 = 
≤g_±r
->
ßve_buf„r_±r
, 
dp
 =Öng_±r->
ßve_buf„r
;

476 
i
 < 
i°›
; i++, 
•
++, 
dp
++)

478 *
dp
 = *
•
;

482 i‡(
≤g_±r
->
ßve_buf„r_size
 +Öng_±r->
cuºít_buf„r_size
 >

483 
≤g_±r
->
ßve_buf„r_max
)

485 
size_t
 
√w_max
;

486 
≤g_byãp
 
ﬁd_buf„r
;

488 i‡(
≤g_±r
->
ßve_buf„r_size
 > 
PNG_SIZE_MAX
 -

489 (
≤g_±r
->
cuºít_buf„r_size
 + 256))

491 
	`≤g_îr‹
(
≤g_±r
, "Potential overflow of save_buffer");

494 
√w_max
 = 
≤g_±r
->
ßve_buf„r_size
 +Öng_±r->
cuºít_buf„r_size
 + 256;

495 
ﬁd_buf„r
 = 
≤g_±r
->
ßve_buf„r
;

496 
≤g_±r
->
ßve_buf„r
 = (
≤g_byãp
)
	`≤g_mÆloc_w¨n
(png_ptr,

497 (
size_t
)
√w_max
);

499 i‡(
≤g_±r
->
ßve_buf„r
 =
NULL
)

501 
	`≤g_‰ì
(
≤g_±r
, 
ﬁd_buf„r
);

502 
	`≤g_îr‹
(
≤g_±r
, "Insufficient memory for save_buffer");

505 i‡(
ﬁd_buf„r
)

506 
	`mem˝y
(
≤g_±r
->
ßve_buf„r
, 
ﬁd_buf„r
,Öng_±r->
ßve_buf„r_size
);

507 i‡(
≤g_±r
->
ßve_buf„r_size
)

508 
	`≤g_îr‹
(
≤g_±r
, "save_bufferÉrror");

509 
	`≤g_‰ì
(
≤g_±r
, 
ﬁd_buf„r
);

510 
≤g_±r
->
ßve_buf„r_max
 = 
√w_max
;

512 i‡(
≤g_±r
->
cuºít_buf„r_size
)

514 
	`mem˝y
(
≤g_±r
->
ßve_buf„r
 +Öng_±r->
ßve_buf„r_size
,

515 
≤g_±r
->
cuºít_buf„r_±r
,Öng_±r->
cuºít_buf„r_size
);

516 
≤g_±r
->
ßve_buf„r_size
 +≤g_±r->
cuºít_buf„r_size
;

517 
≤g_±r
->
cuºít_buf„r_size
 = 0;

519 
≤g_±r
->
ßve_buf„r_±r
 =Öng_±r->
ßve_buf„r
;

520 
≤g_±r
->
buf„r_size
 = 0;

521 
	}
}

524 
	$≤g_push_ª°‹e_buf„r
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
buf„r
,

525 
size_t
 
buf„r_Àngth
)

527 
≤g_±r
->
cuºít_buf„r
 = 
buf„r
;

528 
≤g_±r
->
cuºít_buf„r_size
 = 
buf„r_Àngth
;

529 
≤g_±r
->
buf„r_size
 = 
buf„r_Àngth
 +Öng_±r->
ßve_buf„r_size
;

530 
≤g_±r
->
cuºít_buf„r_±r
 =Öng_±r->
cuºít_buf„r
;

531 
	}
}

534 
	$≤g_push_ªad_IDAT
(
≤g_°ru˘Ω
 
≤g_±r
)

536 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_CHUNK_HEADER
) == 0)

538 
≤g_byã
 
chunk_Àngth
[4];

539 
≤g_byã
 
chunk_èg
[4];

542 
	`PNG_PUSH_SAVE_BUFFER_IF_LT
(8)

543 
	`≤g_push_fûl_buf„r
(
≤g_±r
, 
chunk_Àngth
, 4);

544 
≤g_±r
->
push_Àngth
 = 
	`≤g_gë_uöt_31
’ng_±r, 
chunk_Àngth
);

545 
	`≤g_ª£t_¸c
(
≤g_±r
);

546 
	`≤g_¸c_ªad
(
≤g_±r
, 
chunk_èg
, 4);

547 
≤g_±r
->
chunk_«me
 = 
	`PNG_CHUNK_FROM_STRING
(
chunk_èg
);

548 
≤g_±r
->
mode
 |
PNG_HAVE_CHUNK_HEADER
;

550 i‡(
≤g_±r
->
chunk_«me
 !
≤g_IDAT
)

552 
≤g_±r
->
¥o˚ss_mode
 = 
PNG_READ_CHUNK_MODE
;

554 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_ENDED
) == 0)

555 
	`≤g_îr‹
(
≤g_±r
, "NotÉnough compressed data");

560 
≤g_±r
->
id©_size
 =Öng_±r->
push_Àngth
;

563 i‡(
≤g_±r
->
id©_size
 !0 &&Öng_±r->
ßve_buf„r_size
 != 0)

565 
size_t
 
ßve_size
 = 
≤g_±r
->
ßve_buf„r_size
;

566 
≤g_uöt_32
 
id©_size
 = 
≤g_±r
->idat_size;

574 i‡(
id©_size
 < 
ßve_size
)

575 
ßve_size
 = (
size_t
)
id©_size
;

578 
id©_size
 = (
≤g_uöt_32
)
ßve_size
;

580 
	`≤g_ˇlcuœã_¸c
(
≤g_±r
,Öng_±r->
ßve_buf„r_±r
, 
ßve_size
);

582 
	`≤g_¥o˚ss_IDAT_d©a
(
≤g_±r
,Öng_±r->
ßve_buf„r_±r
, 
ßve_size
);

584 
≤g_±r
->
id©_size
 -= idat_size;

585 
≤g_±r
->
buf„r_size
 -
ßve_size
;

586 
≤g_±r
->
ßve_buf„r_size
 -
ßve_size
;

587 
≤g_±r
->
ßve_buf„r_±r
 +
ßve_size
;

590 i‡(
≤g_±r
->
id©_size
 !0 &&Öng_±r->
cuºít_buf„r_size
 != 0)

592 
size_t
 
ßve_size
 = 
≤g_±r
->
cuºít_buf„r_size
;

593 
≤g_uöt_32
 
id©_size
 = 
≤g_±r
->idat_size;

600 i‡(
id©_size
 < 
ßve_size
)

601 
ßve_size
 = (
size_t
)
id©_size
;

604 
id©_size
 = (
≤g_uöt_32
)
ßve_size
;

606 
	`≤g_ˇlcuœã_¸c
(
≤g_±r
,Öng_±r->
cuºít_buf„r_±r
, 
ßve_size
);

608 
	`≤g_¥o˚ss_IDAT_d©a
(
≤g_±r
,Öng_±r->
cuºít_buf„r_±r
, 
ßve_size
);

610 
≤g_±r
->
id©_size
 -= idat_size;

611 
≤g_±r
->
buf„r_size
 -
ßve_size
;

612 
≤g_±r
->
cuºít_buf„r_size
 -
ßve_size
;

613 
≤g_±r
->
cuºít_buf„r_±r
 +
ßve_size
;

616 i‡(
≤g_±r
->
id©_size
 == 0)

618 
	`PNG_PUSH_SAVE_BUFFER_IF_LT
(4)

619 
	`≤g_¸c_föish
(
≤g_±r
, 0);

620 
≤g_±r
->
mode
 &~
PNG_HAVE_CHUNK_HEADER
;

621 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

622 
≤g_±r
->
zow√r
 = 0;

624 
	}
}

627 
	$≤g_¥o˚ss_IDAT_d©a
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
buf„r
,

628 
size_t
 
buf„r_Àngth
)

631 i‡(!(
buf„r_Àngth
 > 0Ë|| 
buf„r
 =
NULL
)

632 
	`≤g_îr‹
(
≤g_±r
, "No IDAT data (internalÉrror)");

638 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
buf„r
;

640 
≤g_±r
->
z°ªam
.
avaû_ö
 = (
uI¡
)
buf„r_Àngth
;

645 
≤g_±r
->
z°ªam
.
avaû_ö
 > 0 &&

646 (
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_ENDED
) == 0)

648 
ªt
;

655 i‡(!(
≤g_±r
->
z°ªam
.
avaû_out
 > 0))

658 
≤g_±r
->
z°ªam
.
avaû_out
 = (
uI¡
)(
	`PNG_ROWBYTES
’ng_±r->
pixñ_dïth
,

659 
≤g_±r
->
iwidth
) + 1);

661 
≤g_±r
->
z°ªam
.
√xt_out
 =Öng_±r->
row_buf
;

671 
ªt
 = 
	`PNG_INFLATE
(
≤g_±r
, 
Z_SYNC_FLUSH
);

674 i‡(
ªt
 !
Z_OK
 &&Ñë !
Z_STREAM_END
)

677 
≤g_±r
->
Êags
 |
PNG_FLAG_ZSTREAM_ENDED
;

678 
≤g_±r
->
zow√r
 = 0;

683 i‡(
≤g_±r
->
row_numbî
 >≤g_±r->
num_rows
 ||

684 
≤g_±r
->
∑ss
 > 6)

685 
	`≤g_w¨nög
(
≤g_±r
, "Truncated compressed data in IDAT");

689 i‡(
ªt
 =
Z_DATA_ERROR
)

690 
	`≤g_bíign_îr‹
(
≤g_±r
, "IDAT: ADLER32 checksum mismatch");

692 
	`≤g_îr‹
(
≤g_±r
, "DecompressionÉrror in IDAT");

700 i‡(
≤g_±r
->
z°ªam
.
√xt_out
 !≤g_±r->
row_buf
)

706 i‡(
≤g_±r
->
row_numbî
 >≤g_±r->
num_rows
 ||

707 
≤g_±r
->
∑ss
 > 6)

710 
	`≤g_w¨nög
(
≤g_±r
, "Extra compressed data in IDAT");

711 
≤g_±r
->
Êags
 |
PNG_FLAG_ZSTREAM_ENDED
;

712 
≤g_±r
->
zow√r
 = 0;

721 i‡(
≤g_±r
->
z°ªam
.
avaû_out
 == 0)

722 
	`≤g_push_¥o˚ss_row
(
≤g_±r
);

726 i‡(
ªt
 =
Z_STREAM_END
)

727 
≤g_±r
->
Êags
 |
PNG_FLAG_ZSTREAM_ENDED
;

734 i‡(
≤g_±r
->
z°ªam
.
avaû_ö
 > 0)

735 
	`≤g_w¨nög
(
≤g_±r
, "Extra compression data in IDAT");

736 
	}
}

739 
	$≤g_push_¥o˚ss_row
(
≤g_°ru˘Ω
 
≤g_±r
)

742 
≤g_row_öfo
 
row_öfo
;

744 
row_öfo
.
width
 = 
≤g_±r
->
iwidth
;

745 
row_öfo
.
cﬁ‹_ty≥
 = 
≤g_±r
->color_type;

746 
row_öfo
.
bô_dïth
 = 
≤g_±r
->bit_depth;

747 
row_öfo
.
ch™√ls
 = 
≤g_±r
->channels;

748 
row_öfo
.
pixñ_dïth
 = 
≤g_±r
->pixel_depth;

749 
row_öfo
.
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo.
pixñ_dïth
,Ñow_öfo.
width
);

751 i‡(
≤g_±r
->
row_buf
[0] > 
PNG_FILTER_VALUE_NONE
)

753 i‡(
≤g_±r
->
row_buf
[0] < 
PNG_FILTER_VALUE_LAST
)

754 
	`≤g_ªad_fûãr_row
(
≤g_±r
, &
row_öfo
,Öng_±r->
row_buf
 + 1,

755 
≤g_±r
->
¥ev_row
 + 1,Öng_±r->
row_buf
[0]);

757 
	`≤g_îr‹
(
≤g_±r
, "badádaptive filter value");

765 
	`mem˝y
(
≤g_±r
->
¥ev_row
,Öng_±r->
row_buf
, 
row_öfo
.
rowbyãs
 + 1);

767 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


768 i‡(
≤g_±r
->
å™sf‹m©i⁄s
 != 0)

769 
	`≤g_do_ªad_å™sf‹m©i⁄s
(
≤g_±r
, &
row_öfo
);

773 i‡(
≤g_±r
->
å™sf‹med_pixñ_dïth
 == 0)

775 
≤g_±r
->
å™sf‹med_pixñ_dïth
 = 
row_öfo
.
pixñ_dïth
;

776 i‡(
row_öfo
.
pixñ_dïth
 > 
≤g_±r
->
maximum_pixñ_dïth
)

777 
	`≤g_îr‹
(
≤g_±r
, "progressiveÑow overflow");

780 i‡(
≤g_±r
->
å™sf‹med_pixñ_dïth
 !
row_öfo
.
pixñ_dïth
)

781 
	`≤g_îr‹
(
≤g_±r
, "internalÖrogressiveÑow size calculationÉrror");

784 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


786 i‡(
≤g_±r
->
öãæa˚d
 != 0 &&

787 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0)

789 i‡(
≤g_±r
->
∑ss
 < 6)

790 
	`≤g_do_ªad_öãæa˚
(&
row_öfo
, 
≤g_±r
->
row_buf
 + 1,Öng_±r->
∑ss
,

791 
≤g_±r
->
å™sf‹m©i⁄s
);

793 
≤g_±r
->
∑ss
)

797 
i
;

798 
i
 = 0; i < 8 && 
≤g_±r
->
∑ss
 == 0; i++)

800 
	`≤g_push_have_row
(
≤g_±r
,Öng_±r->
row_buf
 + 1);

801 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

804 i‡(
≤g_±r
->
∑ss
 == 2)

806 
i
 = 0; i < 4 && 
≤g_±r
->
∑ss
 == 2; i++)

808 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

809 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

813 i‡(
≤g_±r
->
∑ss
 =4 &&Öng_±r->
height
 <= 4)

815 
i
 = 0; i < 2 && 
≤g_±r
->
∑ss
 == 4; i++)

817 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

818 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

822 i‡(
≤g_±r
->
∑ss
 =6 &&Öng_±r->
height
 <= 4)

824 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

825 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

833 
i
;

834 
i
 = 0; i < 8 && 
≤g_±r
->
∑ss
 == 1; i++)

836 
	`≤g_push_have_row
(
≤g_±r
,Öng_±r->
row_buf
 + 1);

837 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

840 i‡(
≤g_±r
->
∑ss
 == 2)

842 
i
 = 0; i < 4 && 
≤g_±r
->
∑ss
 == 2; i++)

844 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

845 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

854 
i
;

856 
i
 = 0; i < 4 && 
≤g_±r
->
∑ss
 == 2; i++)

858 
	`≤g_push_have_row
(
≤g_±r
,Öng_±r->
row_buf
 + 1);

859 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

862 
i
 = 0; i < 4 && 
≤g_±r
->
∑ss
 == 2; i++)

864 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

865 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

868 i‡(
≤g_±r
->
∑ss
 == 4)

870 
i
 = 0; i < 2 && 
≤g_±r
->
∑ss
 == 4; i++)

872 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

873 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

882 
i
;

884 
i
 = 0; i < 4 && 
≤g_±r
->
∑ss
 == 3; i++)

886 
	`≤g_push_have_row
(
≤g_±r
,Öng_±r->
row_buf
 + 1);

887 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

890 i‡(
≤g_±r
->
∑ss
 == 4)

892 
i
 = 0; i < 2 && 
≤g_±r
->
∑ss
 == 4; i++)

894 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

895 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

904 
i
;

906 
i
 = 0; i < 2 && 
≤g_±r
->
∑ss
 == 4; i++)

908 
	`≤g_push_have_row
(
≤g_±r
,Öng_±r->
row_buf
 + 1);

909 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

912 
i
 = 0; i < 2 && 
≤g_±r
->
∑ss
 == 4; i++)

914 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

915 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

918 i‡(
≤g_±r
->
∑ss
 == 6)

920 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

921 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

929 
i
;

931 
i
 = 0; i < 2 && 
≤g_±r
->
∑ss
 == 5; i++)

933 
	`≤g_push_have_row
(
≤g_±r
,Öng_±r->
row_buf
 + 1);

934 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

937 i‡(
≤g_±r
->
∑ss
 == 6)

939 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

940 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

949 
	`≤g_push_have_row
(
≤g_±r
,Öng_±r->
row_buf
 + 1);

950 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

952 i‡(
≤g_±r
->
∑ss
 != 6)

955 
	`≤g_push_have_row
(
≤g_±r
, 
NULL
);

956 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

963 
	`≤g_push_have_row
(
≤g_±r
,Öng_±r->
row_buf
 + 1);

964 
	`≤g_ªad_push_föish_row
(
≤g_±r
);

966 
	}
}

969 
	$≤g_ªad_push_föish_row
(
≤g_°ru˘Ω
 
≤g_±r
)

971 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


975 c⁄° 
≤g_byã
 
≤g_∑ss_°¨t
[] = {0, 4, 0, 2, 0, 1, 0};

978 c⁄° 
≤g_byã
 
≤g_∑ss_öc
[] = {8, 8, 4, 4, 2, 2, 1};

981 c⁄° 
≤g_byã
 
≤g_∑ss_y°¨t
[] = {0, 0, 4, 0, 2, 0, 1};

984 c⁄° 
≤g_byã
 
≤g_∑ss_yöc
[] = {8, 8, 8, 4, 4, 2, 2};

992 
≤g_±r
->
row_numbî
++;

993 i‡(
≤g_±r
->
row_numbî
 <Öng_±r->
num_rows
)

996 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


997 i‡(
≤g_±r
->
öãæa˚d
 != 0)

999 
≤g_±r
->
row_numbî
 = 0;

1000 
	`mem£t
(
≤g_±r
->
¥ev_row
, 0,Öng_±r->
rowbyãs
 + 1);

1004 
≤g_±r
->
∑ss
++;

1005 i‡((
≤g_±r
->
∑ss
 =1 &&Öng_±r->
width
 < 5) ||

1006 (
≤g_±r
->
∑ss
 =3 &&Öng_±r->
width
 < 3) ||

1007 (
≤g_±r
->
∑ss
 =5 &&Öng_±r->
width
 < 2))

1008 
≤g_±r
->
∑ss
++;

1010 i‡(
≤g_±r
->
∑ss
 > 7)

1011 
≤g_±r
->
∑ss
--;

1013 i‡(
≤g_±r
->
∑ss
 >= 7)

1016 
≤g_±r
->
iwidth
 = (≤g_±r->
width
 +

1017 
≤g_∑ss_öc
[
≤g_±r
->
∑ss
] - 1 -

1018 
≤g_∑ss_°¨t
[
≤g_±r
->
∑ss
]) /

1019 
≤g_∑ss_öc
[
≤g_±r
->
∑ss
];

1021 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0)

1024 
≤g_±r
->
num_rows
 = (≤g_±r->
height
 +

1025 
≤g_∑ss_yöc
[
≤g_±r
->
∑ss
] - 1 -

1026 
≤g_∑ss_y°¨t
[
≤g_±r
->
∑ss
]) /

1027 
≤g_∑ss_yöc
[
≤g_±r
->
∑ss
];

1029 } 
≤g_±r
->
iwidth
 =0 ||Öng_±r->
num_rows
 == 0);

1032 
	}
}

1035 
	$≤g_push_have_öfo
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

1037 i‡(
≤g_±r
->
öfo_‚
 !
NULL
)

1038 (*(
≤g_±r
->
öfo_‚
))’ng_±r, 
öfo_±r
);

1039 
	}
}

1042 
	$≤g_push_have_íd
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

1044 i‡(
≤g_±r
->
íd_‚
 !
NULL
)

1045 (*(
≤g_±r
->
íd_‚
))’ng_±r, 
öfo_±r
);

1046 
	}
}

1049 
	$≤g_push_have_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
row
)

1051 i‡(
≤g_±r
->
row_‚
 !
NULL
)

1052 (*(
≤g_±r
->
row_‚
))’ng_±r, 
row
,Öng_±r->
row_numbî
,

1053 ()
≤g_±r
->
∑ss
);

1054 
	}
}

1056 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


1057 
PNGAPI


1058 
	$≤g_¥ogªssive_comböe_row
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
ﬁd_row
,

1059 
≤g_c⁄°_byãp
 
√w_row
)

1061 i‡(
≤g_±r
 =
NULL
)

1068 i‡(
√w_row
 !
NULL
)

1069 
	`≤g_comböe_row
(
≤g_±r
, 
ﬁd_row
, 1 );

1070 
	}
}

1073 
PNGAPI


1074 
	$≤g_£t_¥ogªssive_ªad_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
¥ogªssive_±r
,

1075 
≤g_¥ogªssive_öfo_±r
 
öfo_‚
, 
≤g_¥ogªssive_row_±r
 
row_‚
,

1076 
≤g_¥ogªssive_íd_±r
 
íd_‚
)

1078 i‡(
≤g_±r
 =
NULL
)

1081 
≤g_±r
->
öfo_‚
 = info_fn;

1082 
≤g_±r
->
row_‚
 =Ñow_fn;

1083 
≤g_±r
->
íd_‚
 =Énd_fn;

1085 
	`≤g_£t_ªad_‚
(
≤g_±r
, 
¥ogªssive_±r
, 
≤g_push_fûl_buf„r
);

1086 
	}
}

1088 
≤g_voidp
 
PNGAPI


1089 
	$≤g_gë_¥ogªssive_±r
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

1091 i‡(
≤g_±r
 =
NULL
)

1092  (
NULL
);

1094  
≤g_±r
->
io_±r
;

1095 
	}
}

	@pngpriv.h

23 #i‚de‡
PNGPRIV_H


24 
	#PNGPRIV_H


	)

38 #i‚de‡
_POSIX_SOURCE


39 
	#_POSIX_SOURCE
 1

	)

42 #i‚de‡
PNG_VERSION_INFO_ONLY


44 
	~<°dlib.h
>

45 
	~<°rög.h
>

48 
	#PNGLIB_BUILD


	)

59 #i‡
deföed
(
HAVE_CONFIG_H
Ë&& !deföed(
PNG_NO_CONFIG_H
)

60 
	~<c⁄fig.h
>

63 
	#PNG_RESTRICT
 
ª°ri˘


	)

71 #i‚de‡
PNGLCONF_H


72 
	~"≤glibc⁄f.h
"

76 #i‡
deföed
(
PNG_PREFIX
Ë&& !deföed(
PNGPREFIX_H
)

77 
	~"≤g¥efix.h
"

80 #ifde‡
PNG_USER_CONFIG


81 
	~"≤gu§.h
"

83 #i‚de‡
PNG_USER_PRIVATEBUILD


84 
	#PNG_USER_PRIVATEBUILD
 "Cu°omÜib≤g buûd"

	)

86 #i‚de‡
PNG_USER_DLLFNAME_POSTFIX


87 
	#PNG_USER_DLLFNAME_POSTFIX
 "Cb"

	)

110 #i‚de‡
PNG_ARM_NEON_OPT


130 #i‡(
deföed
(
__ARM_NEON__
Ë|| deföed(
__ARM_NEON
)) && \

131 
	$deföed
(
PNG_ALIGNED_MEMORY_SUPPORTED
)

132 
	#PNG_ARM_NEON_OPT
 2

	)

134 
	#PNG_ARM_NEON_OPT
 0

	)

138 #i‡
PNG_ARM_NEON_OPT
 > 0

142 
	#PNG_FILTER_OPTIMIZATIONS
 
≤g_öô_fûãr_fun˘i⁄s_√⁄


	)

158 #i‚de‡
PNG_ARM_NEON_IMPLEMENTATION


159 #i‡
	`deföed
(
__ARM_NEON__
Ë|| deföed(
__ARM_NEON
)

160 #i‡
	`deföed
(
__˛™g__
)

166 #ñi‡
	`deföed
(
__GNUC__
)

170 #i‡
__GNUC__
 < 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 < 6)

171 
	#PNG_ARM_NEON_IMPLEMENTATION
 2

	)

177 #i‡!
	`deföed
(
__Ørch64__
)

179 
	#PNG_ARM_NEON_IMPLEMENTATION
 2

	)

184 #i‚de‡
PNG_ARM_NEON_IMPLEMENTATION


186 
	#PNG_ARM_NEON_IMPLEMENTATION
 1

	)

190 #i‚de‡
PNG_MIPS_MSA_OPT


191 #i‡
	`deföed
(
__mùs_mß
Ë&& (
__mùs_iß_ªv
 >5Ë&& deföed(
PNG_ALIGNED_MEMORY_SUPPORTED
)

192 
	#PNG_MIPS_MSA_OPT
 2

	)

194 
	#PNG_MIPS_MSA_OPT
 0

	)

198 #i‚de‡
PNG_POWERPC_VSX_OPT


199 #i‡
	`deföed
(
__PPC64__
Ë&& deföed(
__ALTIVEC__
Ë&& deföed(
__VSX__
)

200 
	#PNG_POWERPC_VSX_OPT
 2

	)

202 
	#PNG_POWERPC_VSX_OPT
 0

	)

206 #i‚de‡
PNG_INTEL_SSE_OPT


207 #ifde‡
PNG_INTEL_SSE


212 #i‡
	`deföed
(
__SSE4_1__
Ë|| deföed(
__AVX__
Ë|| deföed(
__SSSE3__
) || \

213 
	`deföed
(
__SSE2__
Ë|| deföed(
_M_X64
Ë|| deföed(
_M_AMD64
) || \

214 (
	`deföed
(
_M_IX86_FP
) && _M_IX86_FP >= 2)

215 
	#PNG_INTEL_SSE_OPT
 1

	)

217 
	#PNG_INTEL_SSE_OPT
 0

	)

220 
	#PNG_INTEL_SSE_OPT
 0

	)

224 #i‡
PNG_INTEL_SSE_OPT
 > 0

225 #i‚de‡
PNG_INTEL_SSE_IMPLEMENTATION


226 #i‡
	`deföed
(
__SSE4_1__
Ë|| deföed(
__AVX__
)

230 
	#PNG_INTEL_SSE_IMPLEMENTATION
 3

	)

231 #ñi‡
	`deföed
(
__SSSE3__
)

232 
	#PNG_INTEL_SSE_IMPLEMENTATION
 2

	)

233 #ñi‡
	`deföed
(
__SSE2__
Ë|| deföed(
_M_X64
Ë|| deföed(
_M_AMD64
) || \

234 (
	`deföed
(
_M_IX86_FP
) && _M_IX86_FP >= 2)

235 
	#PNG_INTEL_SSE_IMPLEMENTATION
 1

	)

237 
	#PNG_INTEL_SSE_IMPLEMENTATION
 0

	)

241 #i‡
PNG_INTEL_SSE_IMPLEMENTATION
 > 0

242 
	#PNG_FILTER_OPTIMIZATIONS
 
≤g_öô_fûãr_fun˘i⁄s_s£2


	)

245 
	#PNG_INTEL_SSE_IMPLEMENTATION
 0

	)

248 #i‡
PNG_MIPS_MSA_OPT
 > 0

249 
	#PNG_FILTER_OPTIMIZATIONS
 
≤g_öô_fûãr_fun˘i⁄s_mß


	)

250 #i‚de‡
PNG_MIPS_MSA_IMPLEMENTATION


251 #i‡
	`deföed
(
__mùs_mß
)

252 #i‡
	`deföed
(
__˛™g__
)

253 #ñi‡
	`deföed
(
__GNUC__
)

254 #i‡
__GNUC__
 < 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 < 7)

255 
	#PNG_MIPS_MSA_IMPLEMENTATION
 2

	)

259 
	#PNG_MIPS_MSA_IMPLEMENTATION
 2

	)

263 #i‚de‡
PNG_MIPS_MSA_IMPLEMENTATION


264 
	#PNG_MIPS_MSA_IMPLEMENTATION
 1

	)

268 #i‡
PNG_POWERPC_VSX_OPT
 > 0

269 
	#PNG_FILTER_OPTIMIZATIONS
 
≤g_öô_fûãr_fun˘i⁄s_vsx


	)

270 
	#PNG_POWERPC_VSX_IMPLEMENTATION
 1

	)

282 #i‚de‡
PNG_BUILD_DLL


283 #ifde‡
DLL_EXPORT


288 
	#PNG_BUILD_DLL


	)

290 #ifde‡
_WINDLL


297 
	#PNG_BUILD_DLL


	)

299 #ifde‡
__DLL__


303 
	#PNG_BUILD_DLL


	)

319 #i‚de‡
PNG_IMPEXP


320 #ifde‡
PNG_BUILD_DLL


321 
	#PNG_IMPEXP
 
PNG_DLL_EXPORT


	)

326 
	#PNG_IMPEXP


	)

331 #i‚de‡
PNG_DEPRECATED


332 
	#PNG_DEPRECATED


	)

334 #i‚de‡
PNG_PRIVATE


335 
	#PNG_PRIVATE


	)

343 #i‚de‡
PNG_INTERNAL_DATA


344 
	#PNG_INTERNAL_DATA
(
ty≥
, 
«me
, 
¨øy
Ë
PNG_LINKAGE_DATA
Åy≥Çamê
	)
array

347 #i‚de‡
PNG_INTERNAL_FUNCTION


348 
	#PNG_INTERNAL_FUNCTION
(
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

349 
PNG_LINKAGE_FUNCTION
 
	`PNG_FUNCTION
(
ty≥
, 
«me
, 
¨gs
, 
PNG_EMPTY
 
©åibuãs
)

	)

352 #i‚de‡
PNG_INTERNAL_CALLBACK


353 
	#PNG_INTERNAL_CALLBACK
(
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

354 
PNG_LINKAGE_CALLBACK
 
	`PNG_FUNCTION
(
ty≥
, (
PNGCBAPI
 
«me
), 
¨gs
,\

355 
PNG_EMPTY
 
©åibuãs
)

	)

367 #i‚de‡
PNG_FP_EXPORT


368 #i‚de‡
PNG_FLOATING_POINT_SUPPORTED


369 
	#PNG_FP_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
)\

370 
	`PNG_INTERNAL_FUNCTION
(
ty≥
, 
«me
, 
¨gs
, 
PNG_EMPTY
);

	)

371 #i‚de‡
PNG_VERSION_INFO_ONLY


372 
≤g_öcom∂ëe
 
	t≤g_doubÀ
;

373 
≤g_doubÀ
* 
	t≤g_doubÀp
;

374 c⁄° 
	t≤g_doubÀ
* 
	t≤g_c⁄°_doubÀp
;

375 
≤g_doubÀ
** 
	t≤g_doubÀµ
;

379 #i‚de‡
PNG_FIXED_EXPORT


380 #i‚de‡
PNG_FIXED_POINT_SUPPORTED


381 
	#PNG_FIXED_EXPORT
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
)\

382 
	`PNG_INTERNAL_FUNCTION
(
ty≥
, 
«me
, 
¨gs
, 
PNG_EMPTY
);

	)

386 
	~"≤g.h
"

389 #i‚de‡
PNG_DLL_EXPORT


390 
	#PNG_DLL_EXPORT


	)

405 #i‚de‡
PNG_RELEASE_BUILD


406 
	#PNG_RELEASE_BUILD
 (
PNG_LIBPNG_BUILD_BASE_TYPE
 >
PNG_LIBPNG_BUILD_RC
)

	)

427 #i‡
	`deföed
(
MAXSEG_64K
Ë&& !deföed(
PNG_MAX_MALLOC_64K
)

428 
	#PNG_MAX_MALLOC_64K


	)

431 #i‚de‡
PNG_UNUSED


438 
	#PNG_UNUSED
(
∑øm
Ë(Ì¨am;

	)

444 #i‡(
PNG_ZBUF_SIZE
 > 65536LË&& 
	`deföed
(
PNG_MAX_MALLOC_64K
)

445 #unde‡
PNG_ZBUF_SIZE


446 
	#PNG_ZBUF_SIZE
 65536L

	)

453 #ifde‡
PNG_WARNINGS_SUPPORTED


454 
	#PNG_WARNING_PARAMETERS
(
p
Ë
≤g_w¨nög_∑ømëîs
Ö;

	)

456 
	#≤g_w¨nög_∑ømëî
(
p
,
numbî
,
°rög
Ë(()0)

	)

457 
	#≤g_w¨nög_∑ømëî_unsig√d
(
p
,
numbî
,
f‹m©
,
vÆue
Ë(()0)

	)

458 
	#≤g_w¨nög_∑ømëî_sig√d
(
p
,
numbî
,
f‹m©
,
vÆue
Ë(()0)

	)

459 
	#≤g_f‹m©ãd_w¨nög
(
µ
,
p
,
mesßge
Ë(()’p))

	)

460 
	#PNG_WARNING_PARAMETERS
(
p
)

	)

462 #i‚de‡
PNG_ERROR_TEXT_SUPPORTED


463 
	#≤g_fixed_îr‹
(
s1
,
s2
Ë
	`≤g_îr
(s1)

	)

470 #ifde‡
PNG_FIXED_POINT_SUPPORTED


471 
	#PNGFAPI
 
PNGAPI


	)

473 
	#PNGFAPI


	)

476 #i‚de‡
PNG_VERSION_INFO_ONLY


486 #ifde‡
__˝lu•lus


487 
	#≤g_voidˇ°
(
ty≥
, 
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

488 
	#≤g_c⁄°ˇ°
(
ty≥
, 
vÆue
Ë
c⁄°_ˇ°
<ty≥>(vÆue)

	)

489 
	#≤g_Æignˇ°
(
ty≥
, 
vÆue
) \

490 
°©ic_ˇ°
<
ty≥
>(°©ic_ˇ°<*>(
vÆue
))

	)

491 
	#≤g_Æignˇ°c⁄°
(
ty≥
, 
vÆue
) \

492 
°©ic_ˇ°
<
ty≥
>(°©ic_ˇ°<c⁄° *>(
vÆue
))

	)

494 
	#≤g_voidˇ°
(
ty≥
, 
vÆue
Ë(vÆue)

	)

495 #ifde‡
_WIN64


496 #ifde‡
__GNUC__


497 
	t≤g_±ruöt
;

499 
	t__öt64
 
	t≤g_±ruöt
;

502 
	t≤g_±ruöt
;

504 
	#≤g_c⁄°ˇ°
(
ty≥
, 
vÆue
Ë(—y≥)(
≤g_±ruöt
)(c⁄° *)(vÆue))

	)

505 
	#≤g_Æignˇ°
(
ty≥
, 
vÆue
Ë((*)(vÆue))

	)

506 
	#≤g_Æignˇ°c⁄°
(
ty≥
, 
vÆue
Ë((c⁄° *)(vÆue))

	)

509 #i‡
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
) ||\

510 
	$deföed
(
PNG_FLOATING_ARITHMETIC_SUPPORTED
)

518 
	~<Êﬂt.h
>

520 #i‡(
	`deföed
(
__MWERKS__
Ë&& deföed(
macötosh
)Ë|| deföed(
≠∂ec
) || \

521 
	`deföed
(
THINK_C
Ë|| deföed(
__SC__
Ë|| 
	$deföed
(
TARGET_OS_MAC
)

526 #i‡!
	`deföed
(
__MATH_H__
Ë&& !deföed(
__MATH_H
Ë&& !deföed(
__cm©h__
)

527 
	~<Â.h
>

530 
	~<m©h.h
>

532 #i‡
	`deföed
(
_AMIGA
Ë&& deföed(
__SASC
Ë&& deföed(
_M68881
)

536 
	~<m68881.h
>

541 #i‡
	`deföed
(
__TURBOC__
Ë&& deföed(
__MSDOS__
)

542 
	~<mem.h
>

543 
	~<Æloc.h
>

546 #i‡
	`deföed
(
WIN32
Ë|| deföed(
_Wödows
Ë|| deföed(
_WINDOWS
) || \

547 
	`deföed
(
_WIN32
Ë|| 
	$deföed
(
__WIN32__
)

548 
	~<wödows.h
>

558 #i‚de‡
PNG_ABORT


559 #ifde‡
_WINDOWS_


560 
	#PNG_ABORT
(Ë
	`ExôPro˚ss
(0)

	)

562 
	#PNG_ABORT
(Ë
	`ab‹t
()

	)

567 
	#PNG_ALIGN_NONE
 0

	)

568 
	#PNG_ALIGN_ALWAYS
 1

	)

569 #ifde‡
off£tof


570 
	#PNG_ALIGN_OFFSET
 2

	)

572 
	#PNG_ALIGN_OFFSET
 -1

	)

574 
	#PNG_ALIGN_SIZE
 3

	)

576 #i‚de‡
PNG_ALIGN_TYPE


581 
	#PNG_ALIGN_TYPE
 
PNG_ALIGN_SIZE


	)

584 #i‡
PNG_ALIGN_TYPE
 =
PNG_ALIGN_SIZE


591 
	#≤g_Æignof
(
ty≥
Ë( (ty≥))

	)

593 #i‡
PNG_ALIGN_TYPE
 =
PNG_ALIGN_OFFSET


594 
	#≤g_Æignof
(
ty≥
Ë
	`off£tof
(°ru˘{
c
;Åy≥ 
t
;},Å)

	)

596 #i‡
PNG_ALIGN_TYPE
 =
PNG_ALIGN_ALWAYS


597 
	#≤g_Æignof
(
ty≥
Ë(1)

	)

604 #ifde‡
≤g_Æignof


605 
	#≤g_ißlig√d
(
±r
, 
ty≥
)\

606 (((
ty≥
)((c⁄° *)
±r
-(const *)0) & \

607 (
ty≥
)(
	`≤g_Æignof
—y≥)-1)Ë=0)

	)

609 
	#≤g_ißlig√d
(
±r
, 
ty≥
Ë0

	)

626 
	#PNG_HAVE_IDAT
 0x04U

	)

628 
	#PNG_HAVE_IEND
 0x10U

	)

632 
	#PNG_HAVE_CHUNK_HEADER
 0x100U

	)

633 
	#PNG_WROTE_tIME
 0x200U

	)

634 
	#PNG_WROTE_INFO_BEFORE_PLTE
 0x400U

	)

635 
	#PNG_BACKGROUND_IS_GRAY
 0x800U

	)

636 
	#PNG_HAVE_PNG_SIGNATURE
 0x1000U

	)

637 
	#PNG_HAVE_CHUNK_AFTER_IDAT
 0x2000U

	)

639 
	#PNG_IS_READ_STRUCT
 0x8000U

	)

642 
	#PNG_BGR
 0x0001U

	)

643 
	#PNG_INTERLACE
 0x0002U

	)

644 
	#PNG_PACK
 0x0004U

	)

645 
	#PNG_SHIFT
 0x0008U

	)

646 
	#PNG_SWAP_BYTES
 0x0010U

	)

647 
	#PNG_INVERT_MONO
 0x0020U

	)

648 
	#PNG_QUANTIZE
 0x0040U

	)

649 
	#PNG_COMPOSE
 0x0080U

	)

650 
	#PNG_BACKGROUND_EXPAND
 0x0100U

	)

651 
	#PNG_EXPAND_16
 0x0200U

	)

652 
	#PNG_16_TO_8
 0x0400U

	)

653 
	#PNG_RGBA
 0x0800U

	)

654 
	#PNG_EXPAND
 0x1000U

	)

655 
	#PNG_GAMMA
 0x2000U

	)

656 
	#PNG_GRAY_TO_RGB
 0x4000U

	)

657 
	#PNG_FILLER
 0x8000U

	)

658 
	#PNG_PACKSWAP
 0x10000U

	)

659 
	#PNG_SWAP_ALPHA
 0x20000U

	)

660 
	#PNG_STRIP_ALPHA
 0x40000U

	)

661 
	#PNG_INVERT_ALPHA
 0x80000U

	)

662 
	#PNG_USER_TRANSFORM
 0x100000U

	)

663 
	#PNG_RGB_TO_GRAY_ERR
 0x200000U

	)

664 
	#PNG_RGB_TO_GRAY_WARN
 0x400000U

	)

665 
	#PNG_RGB_TO_GRAY
 0x600000U

	)

666 
	#PNG_ENCODE_ALPHA
 0x800000U

	)

667 
	#PNG_ADD_ALPHA
 0x1000000U

	)

668 
	#PNG_EXPAND_tRNS
 0x2000000U

	)

669 
	#PNG_SCALE_16_TO_8
 0x4000000U

	)

675 
	#PNG_STRUCT_PNG
 0x0001U

	)

676 
	#PNG_STRUCT_INFO
 0x0002U

	)

679 
	#PNG_FLAG_ZLIB_CUSTOM_STRATEGY
 0x0001U

	)

680 
	#PNG_FLAG_ZSTREAM_INITIALIZED
 0x0002U

	)

682 
	#PNG_FLAG_ZSTREAM_ENDED
 0x0008U

	)

685 
	#PNG_FLAG_ROW_INIT
 0x0040U

	)

686 
	#PNG_FLAG_FILLER_AFTER
 0x0080U

	)

687 
	#PNG_FLAG_CRC_ANCILLARY_USE
 0x0100U

	)

688 
	#PNG_FLAG_CRC_ANCILLARY_NOWARN
 0x0200U

	)

689 
	#PNG_FLAG_CRC_CRITICAL_USE
 0x0400U

	)

690 
	#PNG_FLAG_CRC_CRITICAL_IGNORE
 0x0800U

	)

691 
	#PNG_FLAG_ASSUME_sRGB
 0x1000U

	)

692 
	#PNG_FLAG_OPTIMIZE_ALPHA
 0x2000U

	)

693 
	#PNG_FLAG_DETECT_UNINITIALIZED
 0x4000U

	)

696 
	#PNG_FLAG_LIBRARY_MISMATCH
 0x20000U

	)

697 
	#PNG_FLAG_STRIP_ERROR_NUMBERS
 0x40000U

	)

698 
	#PNG_FLAG_STRIP_ERROR_TEXT
 0x80000U

	)

699 
	#PNG_FLAG_BENIGN_ERRORS_WARN
 0x100000U

	)

700 
	#PNG_FLAG_APP_WARNINGS_WARN
 0x200000U

	)

701 
	#PNG_FLAG_APP_ERRORS_WARN
 0x400000U

	)

711 
	#PNG_FLAG_CRC_ANCILLARY_MASK
 (
PNG_FLAG_CRC_ANCILLARY_USE
 | \

712 
PNG_FLAG_CRC_ANCILLARY_NOWARN
)

	)

714 
	#PNG_FLAG_CRC_CRITICAL_MASK
 (
PNG_FLAG_CRC_CRITICAL_USE
 | \

715 
PNG_FLAG_CRC_CRITICAL_IGNORE
)

	)

717 
	#PNG_FLAG_CRC_MASK
 (
PNG_FLAG_CRC_ANCILLARY_MASK
 | \

718 
PNG_FLAG_CRC_CRITICAL_MASK
)

	)

722 
	#PNG_COLOR_DIST
(
c1
, 
c2
Ë(
	`abs
(()((c1).
ªd
) - ()((c2).red)) + \

723 
	`abs
(()((
c1
).
gªí
Ë- ()((
c2
).green)) + \

724 
	`abs
(()((
c1
).
blue
Ë- ()((
c2
).blue)))

	)

734 
	#PNG_DIV65535
(
v24
Ë(((v24Ë+ 32895Ë>> 16)

	)

735 
	#PNG_DIV257
(
v16
Ë
	`PNG_DIV65535
((
≤g_uöt_32
)(v16Ë* 255)

	)

738 
	#PNG_ROWBYTES
(
pixñ_bôs
, 
width
) \

739 ((
pixñ_bôs
) >= 8 ? \

740 ((
size_t
)(
width
Ë* (((size_t)(
pixñ_bôs
)) >> 3)) : \

741 (–((
size_t
)(
width
Ë* ((size_t)(
pixñ_bôs
))Ë+ 7Ë>> 3Ë)

	)

755 
	#PNG_TRAILBITS
(
pixñ_bôs
, 
width
) \

756 (((
pixñ_bôs
Ë* ((
width
Ë% (
≤g_uöt_32
)8)Ë% 8)

	)

758 
	#PNG_PADBITS
(
pixñ_bôs
, 
width
) \

759 ((8 - 
	`PNG_TRAILBITS
(
pixñ_bôs
, 
width
)Ë% 8)

	)

766 
	#PNG_OUT_OF_RANGE
(
vÆue
, 
idól
, 
dñè
) \

767 –(
vÆue
Ë< (
idól
)-(
dñè
Ë|| (vÆueË> (idól)+(dñèË)

	)

773 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


781 
	#≤g_Êﬂt
(
≤g_±r
, 
fixed
, 
s
Ë(.00001 * (fixed))

	)

799 #ifde‡
PNG_FIXED_POINT_MACRO_SUPPORTED


800 
	#≤g_fixed
(
≤g_±r
, 
Â
, 
s
) ((fp) <= 21474 && (fp) >= -21474 ?\

801 ((
≤g_fixed_poöt
)(100000 * (
Â
))Ë: (
	`≤g_fixed_îr‹
(
≤g_±r
, 
s
),0))

	)

821 
	#PNG_32b
(
b
,
s
Ë((
≤g_uöt_32
)(bË<< (s))

	)

822 
	#PNG_U32
(
b1
,
b2
,
b3
,
b4
) \

823 (
	`PNG_32b
(
b1
,24Ë| PNG_32b(
b2
,16Ë| PNG_32b(
b3
,8Ë| PNG_32b(
b4
,0))

	)

848 
	#≤g_IDAT
 
	`PNG_U32
–73, 68, 65, 84)

	)

849 
	#≤g_IEND
 
	`PNG_U32
–73, 69, 78, 68)

	)

850 
	#≤g_IHDR
 
	`PNG_U32
–73, 72, 68, 82)

	)

851 
	#≤g_PLTE
 
	`PNG_U32
–80, 76, 84, 69)

	)

852 
	#≤g_bKGD
 
	`PNG_U32
–98, 75, 71, 68)

	)

853 
	#≤g_cHRM
 
	`PNG_U32
–99, 72, 82, 77)

	)

854 
	#≤g_eXIf
 
	`PNG_U32
(101, 88, 73, 102Ë

	)

855 
	#≤g_fRAc
 
	`PNG_U32
(102, 82, 65, 99Ë

	)

856 
	#≤g_gAMA
 
	`PNG_U32
(103, 65, 77, 65)

	)

857 
	#≤g_gIFg
 
	`PNG_U32
(103, 73, 70, 103)

	)

858 
	#≤g_gIFt
 
	`PNG_U32
(103, 73, 70, 116Ë

	)

859 
	#≤g_gIFx
 
	`PNG_U32
(103, 73, 70, 120)

	)

860 
	#≤g_hIST
 
	`PNG_U32
(104, 73, 83, 84)

	)

861 
	#≤g_iCCP
 
	`PNG_U32
(105, 67, 67, 80)

	)

862 
	#≤g_iTXt
 
	`PNG_U32
(105, 84, 88, 116)

	)

863 
	#≤g_oFFs
 
	`PNG_U32
(111, 70, 70, 115)

	)

864 
	#≤g_pCAL
 
	`PNG_U32
(112, 67, 65, 76)

	)

865 
	#≤g_pHYs
 
	`PNG_U32
(112, 72, 89, 115)

	)

866 
	#≤g_sBIT
 
	`PNG_U32
(115, 66, 73, 84)

	)

867 
	#≤g_sCAL
 
	`PNG_U32
(115, 67, 65, 76)

	)

868 
	#≤g_sPLT
 
	`PNG_U32
(115, 80, 76, 84)

	)

869 
	#≤g_sRGB
 
	`PNG_U32
(115, 82, 71, 66)

	)

870 
	#≤g_sTER
 
	`PNG_U32
(115, 84, 69, 82)

	)

871 
	#≤g_tEXt
 
	`PNG_U32
(116, 69, 88, 116)

	)

872 
	#≤g_tIME
 
	`PNG_U32
(116, 73, 77, 69)

	)

873 
	#≤g_tRNS
 
	`PNG_U32
(116, 82, 78, 83)

	)

874 
	#≤g_zTXt
 
	`PNG_U32
(122, 84, 88, 116)

	)

879 
	#PNG_CHUNK_FROM_STRING
(
s
)\

880 
	`PNG_U32
(0xf‡& (
s
)[0], 0xf‡& (s)[1], 0xf‡& (s)[2], 0xf‡& (s)[3])

	)

886 
	#PNG_STRING_FROM_CHUNK
(
s
,
c
)\

887 ()(((*)(
s
))[0]=()(((
c
)>>24) & 0xff), \

888 ((*)(
s
))[1]=()(((
c
)>>16) & 0xff),\

889 ((*)(
s
))[2]=()(((
c
)>>8) & 0xff), \

890 ((*)(
s
))[3]=()((
c
 & 0xff)))

	)

893 
	#PNG_CSTRING_FROM_CHUNK
(
s
,
c
)\

894 ()(
	`PNG_STRING_FROM_CHUNK
(
s
,
c
), ((*)(s))[4] = 0)

	)

897 
	#PNG_CHUNK_ANCILLARY
(
c
Ë(1 & ((cË>> 29))

	)

898 
	#PNG_CHUNK_CRITICAL
(
c
Ë(!
	`PNG_CHUNK_ANCILLARY
(c))

	)

899 
	#PNG_CHUNK_PRIVATE
(
c
Ë(1 & ((cË>> 21))

	)

900 
	#PNG_CHUNK_RESERVED
(
c
Ë(1 & ((cË>> 13))

	)

901 
	#PNG_CHUNK_SAFE_TO_COPY
(
c
Ë(1 & ((cË>> 5))

	)

904 
	#PNG_GAMMA_MAC_OLD
 151724

	)

905 
	#PNG_GAMMA_MAC_INVERSE
 65909

	)

906 
	#PNG_GAMMA_sRGB_INVERSE
 45455

	)

911 #i‚de‡
PNG_VERSION_INFO_ONLY


913 
	~"≤g°ru˘.h
"

914 
	~"≤göfo.h
"

919 #i‡
PNG_ZLIB_VERNUM
 !0 && PNG_ZLIB_VERNUM !
ZLIB_VERNUM


920 #îr‹ 
ZLIB_VERNUM
 !
PNG_ZLIB_VERNUM
 \

937 c⁄° 
	t≤g_uöt_16p
 * 
	t≤g_c⁄°_uöt_16µ
;

940 #i‡
	`deföed
(
PNG_SIMPLIFIED_READ_SUPPORTED
) ||\

941 
	$deföed
(
PNG_SIMPLIFIED_WRITE_SUPPORTED
)

942 #ifde‡
PNG_SIMPLIFIED_READ_SUPPORTED


943 
	`PNG_INTERNAL_DATA
(c⁄° 
≤g_uöt_16
, 
≤g_sRGB_èbÀ
, [256]);

949 
	`PNG_INTERNAL_DATA
(c⁄° 
≤g_uöt_16
, 
≤g_sRGB_ba£
, [512]);

950 
	`PNG_INTERNAL_DATA
(c⁄° 
≤g_byã
, 
≤g_sRGB_dñè
, [512]);

952 
	#PNG_sRGB_FROM_LINEAR
(
löór
) \

953 ((
≤g_byã
)(0xf‡& ((
≤g_sRGB_ba£
[(
löór
)>>15] \

954 + ((((
löór
Ë& 0x7fff)*
≤g_sRGB_dñè
[÷öór)>>15])>>12)Ë>> 8)))

	)

962 #ifde‡
__˝lu•lus


973 
	#PNG_UNEXPECTED_ZLIB_RETURN
 (-7)

	)

974 
	`PNG_INTERNAL_FUNCTION
(, 
≤g_z°ªam_îr‹
,(
≤g_°ru˘Ω
 
≤g_±r
, 
ªt
),

975 
PNG_EMPTY
);

980 #ifde‡
PNG_WRITE_SUPPORTED


981 
	`PNG_INTERNAL_FUNCTION
(,
≤g_‰ì_buf„r_li°
,(
≤g_°ru˘Ω
 
≤g_±r
,

982 
≤g_com¥essi⁄_buf„Ω
 *
li°
),
PNG_EMPTY
);

986 #i‡
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
) && \

987 !
	`deföed
(
PNG_FIXED_POINT_MACRO_SUPPORTED
) && \

988 (
	`deföed
(
PNG_gAMA_SUPPORTED
Ë|| deföed(
PNG_cHRM_SUPPORTED
) || \

989 
	`deföed
(
PNG_sCAL_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
) || \

990 
	`deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)) || \

991 (
	`deföed
(
PNG_sCAL_SUPPORTED
) && \

992 
	`deföed
(
PNG_FLOATING_ARITHMETIC_SUPPORTED
))

993 
	`PNG_INTERNAL_FUNCTION
(
≤g_fixed_poöt
,
≤g_fixed
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

994 
Â
, 
≤g_c⁄°_ch¨p
 
ãxt
),
PNG_EMPTY
);

1000 
	`PNG_INTERNAL_FUNCTION
(,
≤g_u£r_vîsi⁄_check
,(
≤g_°ru˘Ω
 
≤g_±r
,

1001 
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
),
PNG_EMPTY
);

1007 
	`PNG_INTERNAL_FUNCTION
(
≤g_voidp
,
≤g_mÆloc_ba£
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1008 
≤g_Æloc_size_t
 
size
),
PNG_ALLOCATED
);

1010 #i‡
	`deföed
(
PNG_TEXT_SUPPORTED
Ë|| deföed(
PNG_sPLT_SUPPORTED
) ||\

1011 
	`deföed
(
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
)

1015 
	`PNG_INTERNAL_FUNCTION
(
≤g_voidp
,
≤g_mÆloc_¨øy
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1016 
√Àmíts
, 
size_t
 
ñemít_size
),
PNG_ALLOCATED
);

1022 
	`PNG_INTERNAL_FUNCTION
(
≤g_voidp
,
≤g_ªÆloc_¨øy
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1023 
≤g_c⁄°_voidp
 
¨øy
, 
ﬁd_ñemíts
, 
add_ñemíts
,

1024 
size_t
 
ñemít_size
),
PNG_ALLOCATED
);

1033 
	`PNG_INTERNAL_FUNCTION
(
≤g_°ru˘p
,
≤g_¸óã_≤g_°ru˘
,

1034 (
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
, 
≤g_îr‹_±r
 
îr‹_‚
,

1035 
≤g_îr‹_±r
 
w¨n_‚
, 
≤g_voidp
 
mem_±r
, 
≤g_mÆloc_±r
 
mÆloc_‚
,

1036 
≤g_‰ì_±r
 
‰ì_‚
),
PNG_ALLOCATED
);

1039 
	`PNG_INTERNAL_FUNCTION
(,
≤g_de°roy_≤g_°ru˘
,(
≤g_°ru˘Ω
 
≤g_±r
),

1040 
PNG_EMPTY
);

1043 
	`PNG_INTERNAL_FUNCTION
(,
≤g_‰ì_jmpbuf
,(
≤g_°ru˘Ω
 
≤g_±r
),
PNG_EMPTY
);

1046 
	`PNG_INTERNAL_FUNCTION
(
voidpf
,
≤g_zÆloc
,(voidp‡
≤g_±r
, 
uI¡
 
ôems
, uI¡ 
size
),

1047 
PNG_ALLOCATED
);

1050 
	`PNG_INTERNAL_FUNCTION
(,
≤g_z‰ì
,(
voidpf
 
≤g_±r
, voidp‡
±r
),
PNG_EMPTY
);

1057 
	`PNG_INTERNAL_FUNCTION
(
PNGCBAPI
,
≤g_deÁu…_ªad_d©a
,(
≤g_°ru˘p
 
≤g_±r
,

1058 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
),
PNG_EMPTY
);

1060 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1061 
	`PNG_INTERNAL_FUNCTION
(
PNGCBAPI
,
≤g_push_fûl_buf„r
,(
≤g_°ru˘p
 
≤g_±r
,

1062 
≤g_byãp
 
buf„r
, 
size_t
 
Àngth
),
PNG_EMPTY
);

1065 
	`PNG_INTERNAL_FUNCTION
(
PNGCBAPI
,
≤g_deÁu…_wrôe_d©a
,(
≤g_°ru˘p
 
≤g_±r
,

1066 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
),
PNG_EMPTY
);

1068 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


1069 #ifde‡
PNG_STDIO_SUPPORTED


1070 
	`PNG_INTERNAL_FUNCTION
(
PNGCBAPI
,
≤g_deÁu…_Êush
,(
≤g_°ru˘p
 
≤g_±r
),

1071 
PNG_EMPTY
);

1076 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ª£t_¸c
,(
≤g_°ru˘Ω
 
≤g_±r
),
PNG_EMPTY
);

1079 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_d©a
,(
≤g_°ru˘Ω
 
≤g_±r
,

1080 
≤g_c⁄°_byãp
 
d©a
, 
size_t
 
Àngth
),
PNG_EMPTY
);

1083 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_sig
,(
≤g_°ru˘Ω
 
≤g_±r
,

1084 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1087 
	`PNG_INTERNAL_FUNCTION
(
≤g_uöt_32
,
≤g_ªad_chunk_hódî
,(
≤g_°ru˘Ω
 
≤g_±r
),

1088 
PNG_EMPTY
);

1091 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_d©a
,(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
d©a
,

1092 
size_t
 
Àngth
),
PNG_EMPTY
);

1095 
	`PNG_INTERNAL_FUNCTION
(,
≤g_¸c_ªad
,(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
buf
,

1096 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1099 
	`PNG_INTERNAL_FUNCTION
(,
≤g_¸c_föish
,(
≤g_°ru˘Ω
 
≤g_±r
,

1100 
≤g_uöt_32
 
skù
),
PNG_EMPTY
);

1103 
	`PNG_INTERNAL_FUNCTION
(,
≤g_¸c_îr‹
,(
≤g_°ru˘Ω
 
≤g_±r
),
PNG_EMPTY
);

1109 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ˇlcuœã_¸c
,(
≤g_°ru˘Ω
 
≤g_±r
,

1110 
≤g_c⁄°_byãp
 
±r
, 
size_t
 
Àngth
),
PNG_EMPTY
);

1112 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


1113 
	`PNG_INTERNAL_FUNCTION
(,
≤g_Êush
,(
≤g_°ru˘Ω
 
≤g_±r
),
PNG_EMPTY
);

1121 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_IHDR
,(
≤g_°ru˘Ω
 
≤g_±r
,

1122 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
, 
cﬁ‹_ty≥
,

1123 
com¥essi⁄_mëhod
, 
fûãr_mëhod
, 
öãæa˚_mëhod
),
PNG_EMPTY
);

1125 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_PLTE
,(
≤g_°ru˘Ω
 
≤g_±r
,

1126 
≤g_c⁄°_cﬁ‹p
 
∑Àâe
, 
≤g_uöt_32
 
num_∑l
),
PNG_EMPTY
);

1128 
	`PNG_INTERNAL_FUNCTION
(,
≤g_com¥ess_IDAT
,(
≤g_°ru˘Ω
 
≤g_±r
,

1129 
≤g_c⁄°_byãp
 
row_d©a
, 
≤g_Æloc_size_t
 
row_d©a_Àngth
, 
Êush
),

1130 
PNG_EMPTY
);

1132 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_IEND
,(
≤g_°ru˘Ω
 
≤g_±r
),
PNG_EMPTY
);

1134 #ifde‡
PNG_WRITE_gAMA_SUPPORTED


1135 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_gAMA_fixed
,(
≤g_°ru˘Ω
 
≤g_±r
,

1136 
≤g_fixed_poöt
 
fûe_gamma
),
PNG_EMPTY
);

1139 #ifde‡
PNG_WRITE_sBIT_SUPPORTED


1140 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_sBIT
,(
≤g_°ru˘Ω
 
≤g_±r
,

1141 
≤g_c⁄°_cﬁ‹_8p
 
sbô
, 
cﬁ‹_ty≥
),
PNG_EMPTY
);

1144 #ifde‡
PNG_WRITE_cHRM_SUPPORTED


1145 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_cHRM_fixed
,(
≤g_°ru˘Ω
 
≤g_±r
,

1146 c⁄° 
≤g_xy
 *
xy
), 
PNG_EMPTY
);

1150 #ifde‡
PNG_WRITE_sRGB_SUPPORTED


1151 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_sRGB
,(
≤g_°ru˘Ω
 
≤g_±r
,

1152 
öã¡
),
PNG_EMPTY
);

1155 #ifde‡
PNG_WRITE_eXIf_SUPPORTED


1156 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_eXIf
,(
≤g_°ru˘Ω
 
≤g_±r
,

1157 
≤g_byãp
 
exif
, 
num_exif
),
PNG_EMPTY
);

1160 #ifde‡
PNG_WRITE_iCCP_SUPPORTED


1161 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_iCCP
,(
≤g_°ru˘Ω
 
≤g_±r
,

1162 
≤g_c⁄°_ch¨p
 
«me
, 
≤g_c⁄°_byãp
 
¥ofûe
), 
PNG_EMPTY
);

1169 #ifde‡
PNG_WRITE_sPLT_SUPPORTED


1170 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_sPLT
,(
≤g_°ru˘Ω
 
≤g_±r
,

1171 
≤g_c⁄°_sPLT_ç
 
∑Àâe
),
PNG_EMPTY
);

1174 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


1175 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_tRNS
,(
≤g_°ru˘Ω
 
≤g_±r
,

1176 
≤g_c⁄°_byãp
 
å™s
, 
≤g_c⁄°_cﬁ‹_16p
 
vÆues
, 
numbî
,

1177 
cﬁ‹_ty≥
),
PNG_EMPTY
);

1180 #ifde‡
PNG_WRITE_bKGD_SUPPORTED


1181 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_bKGD
,(
≤g_°ru˘Ω
 
≤g_±r
,

1182 
≤g_c⁄°_cﬁ‹_16p
 
vÆues
, 
cﬁ‹_ty≥
),
PNG_EMPTY
);

1185 #ifde‡
PNG_WRITE_hIST_SUPPORTED


1186 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_hIST
,(
≤g_°ru˘Ω
 
≤g_±r
,

1187 
≤g_c⁄°_uöt_16p
 
hi°
, 
num_hi°
),
PNG_EMPTY
);

1191 #ifde‡
PNG_WRITE_tEXt_SUPPORTED


1192 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_tEXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1193 
≤g_c⁄°_ch¨p
 
key
,Öng_c⁄°_ch¨∞
ãxt
, 
size_t
 
ãxt_Àn
),
PNG_EMPTY
);

1196 #ifde‡
PNG_WRITE_zTXt_SUPPORTED


1197 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_zTXt
,(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p


1198 
key
, 
≤g_c⁄°_ch¨p
 
ãxt
, 
com¥essi⁄
),
PNG_EMPTY
);

1201 #ifde‡
PNG_WRITE_iTXt_SUPPORTED


1202 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_iTXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1203 
com¥essi⁄
, 
≤g_c⁄°_ch¨p
 
key
,Öng_c⁄°_ch¨∞
œng
,

1204 
≤g_c⁄°_ch¨p
 
œng_key
,Öng_c⁄°_ch¨∞
ãxt
),
PNG_EMPTY
);

1207 #ifde‡
PNG_TEXT_SUPPORTED


1208 
	`PNG_INTERNAL_FUNCTION
(,
≤g_£t_ãxt_2
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1209 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_ãxç
 
ãxt_±r
, 
num_ãxt
),
PNG_EMPTY
);

1212 #ifde‡
PNG_WRITE_oFFs_SUPPORTED


1213 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_oFFs
,(
≤g_°ru˘Ω
 
≤g_±r
,

1214 
≤g_öt_32
 
x_off£t
,Öng_öt_32 
y_off£t
, 
unô_ty≥
),
PNG_EMPTY
);

1217 #ifde‡
PNG_WRITE_pCAL_SUPPORTED


1218 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_pCAL
,(
≤g_°ru˘Ω
 
≤g_±r
,

1219 
≤g_ch¨p
 
puΩo£
, 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
, 
ty≥
, 
≈¨ams
,

1220 
≤g_c⁄°_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
),
PNG_EMPTY
);

1223 #ifde‡
PNG_WRITE_pHYs_SUPPORTED


1224 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_pHYs
,(
≤g_°ru˘Ω
 
≤g_±r
,

1225 
≤g_uöt_32
 
x_pixñs_≥r_unô
,Öng_uöt_32 
y_pixñs_≥r_unô
,

1226 
unô_ty≥
),
PNG_EMPTY
);

1229 #ifde‡
PNG_WRITE_tIME_SUPPORTED


1230 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_tIME
,(
≤g_°ru˘Ω
 
≤g_±r
,

1231 
≤g_c⁄°_timï
 
mod_time
),
PNG_EMPTY
);

1234 #ifde‡
PNG_WRITE_sCAL_SUPPORTED


1235 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_sCAL_s
,(
≤g_°ru˘Ω
 
≤g_±r
,

1236 
unô
, 
≤g_c⁄°_ch¨p
 
width
,Öng_c⁄°_ch¨∞
height
),
PNG_EMPTY
);

1240 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_föish_row
,(
≤g_°ru˘Ω
 
≤g_±r
),

1241 
PNG_EMPTY
);

1244 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_°¨t_row
,(
≤g_°ru˘Ω
 
≤g_±r
),

1245 
PNG_EMPTY
);

1270 #i‚de‡
PNG_USE_COMPILE_TIME_MASKS


1271 
	#PNG_USE_COMPILE_TIME_MASKS
 1

	)

1273 
	`PNG_INTERNAL_FUNCTION
(,
≤g_comböe_row
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1274 
≤g_byãp
 
row
, 
di•œy
),
PNG_EMPTY
);

1276 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


1283 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_ªad_öãæa˚
,(
≤g_row_öf›
 
row_öfo
,

1284 
≤g_byãp
 
row
, 
∑ss
, 
≤g_uöt_32
 
å™sf‹m©i⁄s
),
PNG_EMPTY
);

1289 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


1291 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_wrôe_öãæa˚
,(
≤g_row_öf›
 
row_öfo
,

1292 
≤g_byãp
 
row
, 
∑ss
),
PNG_EMPTY
);

1298 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row
,(
≤g_°ru˘Ω
 
µ
, 
≤g_row_öf›


1299 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
, 
fûãr
),
PNG_EMPTY
);

1301 #i‡
PNG_ARM_NEON_OPT
 > 0

1302 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_up_√⁄
,(
≤g_row_öf›
 
row_öfo
,

1303 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1304 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_sub3_√⁄
,(
≤g_row_öf›


1305 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1306 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_sub4_√⁄
,(
≤g_row_öf›


1307 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1308 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_avg3_√⁄
,(
≤g_row_öf›


1309 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1310 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_avg4_√⁄
,(
≤g_row_öf›


1311 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1312 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_∑ëh3_√⁄
,(
≤g_row_öf›


1313 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1314 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_∑ëh4_√⁄
,(
≤g_row_öf›


1315 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1318 #i‡
PNG_MIPS_MSA_OPT
 > 0

1319 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_up_mß
,(
≤g_row_öf›
 
row_öfo
,

1320 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1321 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_sub3_mß
,(
≤g_row_öf›


1322 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1323 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_sub4_mß
,(
≤g_row_öf›


1324 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1325 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_avg3_mß
,(
≤g_row_öf›


1326 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1327 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_avg4_mß
,(
≤g_row_öf›


1328 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1329 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_∑ëh3_mß
,(
≤g_row_öf›


1330 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1331 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_∑ëh4_mß
,(
≤g_row_öf›


1332 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1335 #i‡
PNG_POWERPC_VSX_OPT
 > 0

1336 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_up_vsx
,(
≤g_row_öf›
 
row_öfo
,

1337 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1338 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_sub3_vsx
,(
≤g_row_öf›


1339 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1340 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_sub4_vsx
,(
≤g_row_öf›


1341 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1342 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_avg3_vsx
,(
≤g_row_öf›


1343 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1344 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_avg4_vsx
,(
≤g_row_öf›


1345 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1346 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_∑ëh3_vsx
,(
≤g_row_öf›


1347 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1348 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_∑ëh4_vsx
,(
≤g_row_öf›


1349 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1352 #i‡
PNG_INTEL_SSE_IMPLEMENTATION
 > 0

1353 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_sub3_s£2
,(
≤g_row_öf›


1354 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1355 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_sub4_s£2
,(
≤g_row_öf›


1356 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1357 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_avg3_s£2
,(
≤g_row_öf›


1358 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1359 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_avg4_s£2
,(
≤g_row_öf›


1360 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1361 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_∑ëh3_s£2
,(
≤g_row_öf›


1362 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1363 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_fûãr_row_∑ëh4_s£2
,(
≤g_row_öf›


1364 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_c⁄°_byãp
 
¥ev_row
),
PNG_EMPTY
);

1368 
	`PNG_INTERNAL_FUNCTION
(,
≤g_wrôe_föd_fûãr
,(
≤g_°ru˘Ω
 
≤g_±r
,

1369 
≤g_row_öf›
 
row_öfo
),
PNG_EMPTY
);

1371 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1372 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_IDAT_d©a
,(
≤g_°ru˘Ω
 
≤g_±r
,

1373 
≤g_byãp
 
ouçut
, 
≤g_Æloc_size_t
 
avaû_out
),
PNG_EMPTY
);

1379 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_föish_IDAT
,(
≤g_°ru˘Ω
 
≤g_±r
),

1380 
PNG_EMPTY
);

1385 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_föish_row
,(
≤g_°ru˘Ω
 
≤g_±r
),

1386 
PNG_EMPTY
);

1391 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_°¨t_row
,(
≤g_°ru˘Ω
 
≤g_±r
),
PNG_EMPTY
);

1393 #i‡
ZLIB_VERNUM
 >= 0x1240

1394 
	`PNG_INTERNAL_FUNCTION
(,
≤g_zlib_öÊ©e
,(
≤g_°ru˘Ω
 
≤g_±r
, 
Êush
),

1395 
PNG_EMPTY
);

1396 
	#PNG_INFLATE
(
µ
, 
Êush
Ë
	`≤g_zlib_öÊ©e
’p, flush)

	)

1398 
	#PNG_INFLATE
(
µ
, 
Êush
Ë
	`öÊ©e
(&’p)->
z°ªam
, flush)

	)

1401 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


1403 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_å™sf‹m_öfo
,(
≤g_°ru˘Ω
 
≤g_±r
,

1404 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1408 #i‡
	`deföed
(
PNG_WRITE_FILLER_SUPPORTED
) || \

1409 
	`deföed
(
PNG_READ_STRIP_ALPHA_SUPPORTED
)

1410 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_°rù_ch™√l
,(
≤g_row_öf›
 
row_öfo
,

1411 
≤g_byãp
 
row
, 
©_°¨t
),
PNG_EMPTY
);

1414 #ifde‡
PNG_16BIT_SUPPORTED


1415 #i‡
	`deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

1416 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_sw≠
,(
≤g_row_öf›
 
row_öfo
,

1417 
≤g_byãp
 
row
),
PNG_EMPTY
);

1421 #i‡
	`deföed
(
PNG_READ_PACKSWAP_SUPPORTED
) || \

1422 
	`deföed
(
PNG_WRITE_PACKSWAP_SUPPORTED
)

1423 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_∑cksw≠
,(
≤g_row_öf›
 
row_öfo
,

1424 
≤g_byãp
 
row
),
PNG_EMPTY
);

1427 #i‡
	`deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

1428 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_övît
,(
≤g_row_öf›
 
row_öfo
,

1429 
≤g_byãp
 
row
),
PNG_EMPTY
);

1432 #i‡
	`deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

1433 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_bgr
,(
≤g_row_öf›
 
row_öfo
,

1434 
≤g_byãp
 
row
),
PNG_EMPTY
);

1442 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_IHDR
,(
≤g_°ru˘Ω
 
≤g_±r
,

1443 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1444 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_PLTE
,(
≤g_°ru˘Ω
 
≤g_±r
,

1445 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1446 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_IEND
,(
≤g_°ru˘Ω
 
≤g_±r
,

1447 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1449 #ifde‡
PNG_READ_bKGD_SUPPORTED


1450 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_bKGD
,(
≤g_°ru˘Ω
 
≤g_±r
,

1451 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1454 #ifde‡
PNG_READ_cHRM_SUPPORTED


1455 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_cHRM
,(
≤g_°ru˘Ω
 
≤g_±r
,

1456 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1459 #ifde‡
PNG_READ_eXIf_SUPPORTED


1460 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_eXIf
,(
≤g_°ru˘Ω
 
≤g_±r
,

1461 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1464 #ifde‡
PNG_READ_gAMA_SUPPORTED


1465 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_gAMA
,(
≤g_°ru˘Ω
 
≤g_±r
,

1466 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1469 #ifde‡
PNG_READ_hIST_SUPPORTED


1470 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_hIST
,(
≤g_°ru˘Ω
 
≤g_±r
,

1471 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1474 #ifde‡
PNG_READ_iCCP_SUPPORTED


1475 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_iCCP
,(
≤g_°ru˘Ω
 
≤g_±r
,

1476 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1479 #ifde‡
PNG_READ_iTXt_SUPPORTED


1480 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_iTXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1481 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1484 #ifde‡
PNG_READ_oFFs_SUPPORTED


1485 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_oFFs
,(
≤g_°ru˘Ω
 
≤g_±r
,

1486 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1489 #ifde‡
PNG_READ_pCAL_SUPPORTED


1490 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_pCAL
,(
≤g_°ru˘Ω
 
≤g_±r
,

1491 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1494 #ifde‡
PNG_READ_pHYs_SUPPORTED


1495 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_pHYs
,(
≤g_°ru˘Ω
 
≤g_±r
,

1496 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1499 #ifde‡
PNG_READ_sBIT_SUPPORTED


1500 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_sBIT
,(
≤g_°ru˘Ω
 
≤g_±r
,

1501 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1504 #ifde‡
PNG_READ_sCAL_SUPPORTED


1505 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_sCAL
,(
≤g_°ru˘Ω
 
≤g_±r
,

1506 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1509 #ifde‡
PNG_READ_sPLT_SUPPORTED


1510 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_sPLT
,(
≤g_°ru˘Ω
 
≤g_±r
,

1511 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1514 #ifde‡
PNG_READ_sRGB_SUPPORTED


1515 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_sRGB
,(
≤g_°ru˘Ω
 
≤g_±r
,

1516 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1519 #ifde‡
PNG_READ_tEXt_SUPPORTED


1520 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_tEXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1521 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1524 #ifde‡
PNG_READ_tIME_SUPPORTED


1525 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_tIME
,(
≤g_°ru˘Ω
 
≤g_±r
,

1526 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1529 #ifde‡
PNG_READ_tRNS_SUPPORTED


1530 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_tRNS
,(
≤g_°ru˘Ω
 
≤g_±r
,

1531 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1534 #ifde‡
PNG_READ_zTXt_SUPPORTED


1535 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_zTXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1536 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1539 
	`PNG_INTERNAL_FUNCTION
(,
≤g_check_chunk_«me
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1540 
≤g_uöt_32
 
chunk_«me
),
PNG_EMPTY
);

1542 
	`PNG_INTERNAL_FUNCTION
(,
≤g_check_chunk_Àngth
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1543 
≤g_uöt_32
 
chunk_Àngth
),
PNG_EMPTY
);

1545 
	`PNG_INTERNAL_FUNCTION
(,
≤g_h™dÀ_unknown
,(
≤g_°ru˘Ω
 
≤g_±r
,

1546 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
, 
kìp
),
PNG_EMPTY
);

1553 #i‡
	`deföed
(
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
) ||\

1554 
	`deföed
(
PNG_HANDLE_AS_UNKNOWN_SUPPORTED
)

1555 
	`PNG_INTERNAL_FUNCTION
(,
≤g_chunk_unknown_h™dlög
,

1556 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
chunk_«me
),
PNG_EMPTY
);

1563 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


1564 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_ªad_å™sf‹m©i⁄s
,(
≤g_°ru˘Ω
 
≤g_±r
,

1565 
≤g_row_öf›
 
row_öfo
),
PNG_EMPTY
);

1567 #ifde‡
PNG_WRITE_TRANSFORMS_SUPPORTED


1568 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_wrôe_å™sf‹m©i⁄s
,(
≤g_°ru˘Ω
 
≤g_±r
,

1569 
≤g_row_öf›
 
row_öfo
),
PNG_EMPTY
);

1572 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


1573 
	`PNG_INTERNAL_FUNCTION
(,
≤g_öô_ªad_å™sf‹m©i⁄s
,(
≤g_°ru˘Ω
 
≤g_±r
),

1574 
PNG_EMPTY
);

1577 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


1578 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ªad_chunk
,(
≤g_°ru˘Ω
 
≤g_±r
,

1579 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1580 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ªad_sig
,(
≤g_°ru˘Ω
 
≤g_±r
,

1581 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1582 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_check_¸c
,(
≤g_°ru˘Ω
 
≤g_±r
),
PNG_EMPTY
);

1583 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ßve_buf„r
,(
≤g_°ru˘Ω
 
≤g_±r
),

1584 
PNG_EMPTY
);

1585 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ª°‹e_buf„r
,(
≤g_°ru˘Ω
 
≤g_±r
,

1586 
≤g_byãp
 
buf„r
, 
size_t
 
buf„r_Àngth
),
PNG_EMPTY
);

1587 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ªad_IDAT
,(
≤g_°ru˘Ω
 
≤g_±r
),
PNG_EMPTY
);

1588 
	`PNG_INTERNAL_FUNCTION
(,
≤g_¥o˚ss_IDAT_d©a
,(
≤g_°ru˘Ω
 
≤g_±r
,

1589 
≤g_byãp
 
buf„r
, 
size_t
 
buf„r_Àngth
),
PNG_EMPTY
);

1590 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_¥o˚ss_row
,(
≤g_°ru˘Ω
 
≤g_±r
),

1591 
PNG_EMPTY
);

1592 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_h™dÀ_unknown
,(
≤g_°ru˘Ω
 
≤g_±r
,

1593 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1594 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_have_öfo
,(
≤g_°ru˘Ω
 
≤g_±r
,

1595 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1596 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_have_íd
,(
≤g_°ru˘Ω
 
≤g_±r
,

1597 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1598 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_have_row
,(
≤g_°ru˘Ω
 
≤g_±r
,

1599 
≤g_byãp
 
row
),
PNG_EMPTY
);

1600 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ªad_íd
,(
≤g_°ru˘Ω
 
≤g_±r
,

1601 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1602 
	`PNG_INTERNAL_FUNCTION
(,
≤g_¥o˚ss_some_d©a
,(
≤g_°ru˘Ω
 
≤g_±r
,

1603 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1604 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ªad_push_föish_row
,(
≤g_°ru˘Ω
 
≤g_±r
),

1605 
PNG_EMPTY
);

1606 #ifde‡
PNG_READ_tEXt_SUPPORTED


1607 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_h™dÀ_tEXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1608 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1609 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ªad_tEXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1610 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1612 #ifde‡
PNG_READ_zTXt_SUPPORTED


1613 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_h™dÀ_zTXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1614 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1615 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ªad_zTXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1616 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1618 #ifde‡
PNG_READ_iTXt_SUPPORTED


1619 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_h™dÀ_iTXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1620 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
),
PNG_EMPTY
);

1621 
	`PNG_INTERNAL_FUNCTION
(,
≤g_push_ªad_iTXt
,(
≤g_°ru˘Ω
 
≤g_±r
,

1622 
≤g_öf‹p
 
öfo_±r
),
PNG_EMPTY
);

1628 #ifde‡
PNG_GAMMA_SUPPORTED


1629 
	`PNG_INTERNAL_FUNCTION
(,
≤g_cﬁ‹•a˚_£t_gamma
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1630 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
≤g_fixed_poöt
 
gAMA
), 
PNG_EMPTY
);

1636 
	`PNG_INTERNAL_FUNCTION
(,
≤g_cﬁ‹•a˚_sync_öfo
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1637 
≤g_öf‹p
 
öfo_±r
), 
PNG_EMPTY
);

1640 
	`PNG_INTERNAL_FUNCTION
(,
≤g_cﬁ‹•a˚_sync
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1641 
≤g_öf‹p
 
öfo_±r
), 
PNG_EMPTY
);

1648 #ifde‡
PNG_COLORSPACE_SUPPORTED


1652 
	`PNG_INTERNAL_FUNCTION
(,
≤g_cﬁ‹•a˚_£t_chrom©icôõs
,

1653 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, c⁄° 
≤g_xy
 *
xy
,

1654 
¥e„ºed
), 
PNG_EMPTY
);

1656 
	`PNG_INTERNAL_FUNCTION
(,
≤g_cﬁ‹•a˚_£t_ídpoöts
,

1657 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, c⁄° 
≤g_XYZ
 *
XYZ
,

1658 
¥e„ºed
), 
PNG_EMPTY
);

1660 #ifde‡
PNG_sRGB_SUPPORTED


1661 
	`PNG_INTERNAL_FUNCTION
(,
≤g_cﬁ‹•a˚_£t_sRGB
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1662 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
öã¡
), 
PNG_EMPTY
);

1670 #ifde‡
PNG_iCCP_SUPPORTED


1671 
	`PNG_INTERNAL_FUNCTION
(,
≤g_cﬁ‹•a˚_£t_ICC
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1672 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
≤g_c⁄°_ch¨p
 
«me
,

1673 
≤g_uöt_32
 
¥ofûe_Àngth
, 
≤g_c⁄°_byãp
 
¥ofûe
, 
cﬁ‹_ty≥
),

1674 
PNG_EMPTY
);

1678 #ifde‡
PNG_READ_iCCP_SUPPORTED


1679 
	`PNG_INTERNAL_FUNCTION
(,
≤g_icc_check_Àngth
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1680 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
≤g_c⁄°_ch¨p
 
«me
,

1681 
≤g_uöt_32
 
¥ofûe_Àngth
), 
PNG_EMPTY
);

1683 
	`PNG_INTERNAL_FUNCTION
(,
≤g_icc_check_hódî
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1684 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
≤g_c⁄°_ch¨p
 
«me
,

1685 
≤g_uöt_32
 
¥ofûe_Àngth
,

1686 
≤g_c⁄°_byãp
 
¥ofûe
 , 
cﬁ‹_ty≥
),

1687 
PNG_EMPTY
);

1688 
	`PNG_INTERNAL_FUNCTION
(,
≤g_icc_check_èg_èbÀ
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1689 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
, 
≤g_c⁄°_ch¨p
 
«me
,

1690 
≤g_uöt_32
 
¥ofûe_Àngth
,

1691 
≤g_c⁄°_byãp
 
¥ofûe
 ), 
PNG_EMPTY
);

1692 #ifde‡
PNG_sRGB_SUPPORTED


1693 
	`PNG_INTERNAL_FUNCTION
(,
≤g_icc_£t_sRGB
,(

1694 
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹•a˚Ω
 
cﬁ‹•a˚
,

1695 
≤g_c⁄°_byãp
 
¥ofûe
, 
uL⁄g
 
adÀr
), 
PNG_EMPTY
);

1703 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1704 
	`PNG_INTERNAL_FUNCTION
(,
≤g_cﬁ‹•a˚_£t_rgb_c€fficõ¡s
,

1705 (
≤g_°ru˘Ω
 
≤g_±r
), 
PNG_EMPTY
);

1711 
	`PNG_INTERNAL_FUNCTION
(,
≤g_check_IHDR
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1712 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

1713 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
,

1714 
fûãr_ty≥
),
PNG_EMPTY
);

1717 #i‡
	`deföed
(
PNG_READ_CHECK_FOR_INVALID_INDEX_SUPPORTED
) || \

1718 
	`deföed
(
PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED
)

1719 
	`PNG_INTERNAL_FUNCTION
(,
≤g_do_check_∑Àâe_ödexes
,

1720 (
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
),
PNG_EMPTY
);

1723 #i‡
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
Ë&& deföed(
PNG_ERROR_TEXT_SUPPORTED
)

1724 
	`PNG_INTERNAL_FUNCTION
(,
≤g_fixed_îr‹
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1725 
≤g_c⁄°_ch¨p
 
«me
),
PNG_NORETURN
);

1732 
	`PNG_INTERNAL_FUNCTION
(
size_t
,
≤g_ß„ˇt
,(
≤g_ch¨p
 
buf„r
, size_à
bufsize
,

1733 
size_t
 
pos
, 
≤g_c⁄°_ch¨p
 
°rög
),
PNG_EMPTY
);

1738 #i‡
	`deföed
(
PNG_WARNINGS_SUPPORTED
Ë|| deföed(
PNG_TIME_RFC1123_SUPPORTED
)

1744 
	`PNG_INTERNAL_FUNCTION
(
≤g_ch¨p
,
≤g_f‹m©_numbî
,(
≤g_c⁄°_ch¨p
 
°¨t
,

1745 
≤g_ch¨p
 
íd
, 
f‹m©
, 
≤g_Æloc_size_t
 
numbî
),
PNG_EMPTY
);

1748 
	#PNG_FORMAT_NUMBER
(
buf„r
,
f‹m©
,
numbî
) \

1749 
	`≤g_f‹m©_numbî
(
buf„r
, buf„∏+ ( buf„r), 
f‹m©
, 
numbî
)

	)

1752 
	#PNG_NUMBER_BUFFER_SIZE
 24

	)

1757 
	#PNG_NUMBER_FORMAT_u
 1

	)

1758 
	#PNG_NUMBER_FORMAT_02u
 2

	)

1759 
	#PNG_NUMBER_FORMAT_d
 1

	)

1760 
	#PNG_NUMBER_FORMAT_02d
 2

	)

1761 
	#PNG_NUMBER_FORMAT_x
 3

	)

1762 
	#PNG_NUMBER_FORMAT_02x
 4

	)

1763 
	#PNG_NUMBER_FORMAT_fixed
 5

	)

1766 #ifde‡
PNG_WARNINGS_SUPPORTED


1768 
	#PNG_WARNING_PARAMETER_SIZE
 32

	)

1769 
	#PNG_WARNING_PARAMETER_COUNT
 8

	)

1774 
	t≤g_w¨nög_∑ømëîs
[
PNG_WARNING_PARAMETER_COUNT
][

1775 
PNG_WARNING_PARAMETER_SIZE
];

1777 
	`PNG_INTERNAL_FUNCTION
(,
≤g_w¨nög_∑ømëî
,(
≤g_w¨nög_∑ømëîs
 
p
,

1778 
numbî
, 
≤g_c⁄°_ch¨p
 
°rög
),
PNG_EMPTY
);

1782 
	`PNG_INTERNAL_FUNCTION
(,
≤g_w¨nög_∑ømëî_unsig√d
,

1783 (
≤g_w¨nög_∑ømëîs
 
p
, 
numbî
, 
f‹m©
, 
≤g_Æloc_size_t
 
vÆue
),

1784 
PNG_EMPTY
);

1788 
	`PNG_INTERNAL_FUNCTION
(,
≤g_w¨nög_∑ømëî_sig√d
,

1789 (
≤g_w¨nög_∑ømëîs
 
p
, 
numbî
, 
f‹m©
, 
≤g_öt_32
 
vÆue
),

1790 
PNG_EMPTY
);

1792 
	`PNG_INTERNAL_FUNCTION
(,
≤g_f‹m©ãd_w¨nög
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1793 
≤g_w¨nög_∑ømëîs
 
p
, 
≤g_c⁄°_ch¨p
 
mesßge
),
PNG_EMPTY
);

1800 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


1815 
	`PNG_INTERNAL_FUNCTION
(,
≤g_≠p_w¨nög
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1816 
≤g_c⁄°_ch¨p
 
mesßge
),
PNG_EMPTY
);

1821 
	`PNG_INTERNAL_FUNCTION
(,
≤g_≠p_îr‹
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1822 
≤g_c⁄°_ch¨p
 
mesßge
),
PNG_EMPTY
);

1827 
	#≤g_≠p_w¨nög
(
µ
,
s
Ë
	`≤g_w¨nög
’p,s)

	)

1828 
	#≤g_≠p_îr‹
(
µ
,
s
Ë
	`≤g_îr‹
’p,s)

	)

1831 
	`PNG_INTERNAL_FUNCTION
(,
≤g_chunk_ªp‹t
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1832 
≤g_c⁄°_ch¨p
 
mesßge
, 
îr‹
),
PNG_EMPTY
);

1842 
	#PNG_CHUNK_WARNING
 0

	)

1843 
	#PNG_CHUNK_WRITE_ERROR
 1

	)

1844 
	#PNG_CHUNK_ERROR
 2

	)

1849 #i‡
	`deföed
(
PNG_sCAL_SUPPORTED
)

1855 
	#PNG_sCAL_MAX_DIGITS
 (
PNG_sCAL_PRECISION
+1 +1 +10 )

	)

1857 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1858 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ascii_‰om_Â
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1859 
≤g_ch¨p
 
ascii
, 
size_t
 
size
, 
Â
, 
¥ecisi⁄
),

1860 
PNG_EMPTY
);

1863 #ifde‡
PNG_FIXED_POINT_SUPPORTED


1864 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ascii_‰om_fixed
,(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1865 
≤g_ch¨p
 
ascii
, 
size_t
 
size
, 
≤g_fixed_poöt
 
Â
),
PNG_EMPTY
);

1869 #i‡
	`deföed
(
PNG_sCAL_SUPPORTED
Ë|| deföed(
PNG_pCAL_SUPPORTED
)

1900 
	#PNG_FP_INTEGER
 0

	)

1901 
	#PNG_FP_FRACTION
 1

	)

1902 
	#PNG_FP_EXPONENT
 2

	)

1903 
	#PNG_FP_STATE
 3

	)

1904 
	#PNG_FP_SAW_SIGN
 4

	)

1905 
	#PNG_FP_SAW_DIGIT
 8

	)

1906 
	#PNG_FP_SAW_DOT
 16

	)

1907 
	#PNG_FP_SAW_E
 32

	)

1908 
	#PNG_FP_SAW_ANY
 60

	)

1912 
	#PNG_FP_WAS_VALID
 64

	)

1913 
	#PNG_FP_NEGATIVE
 128

	)

1914 
	#PNG_FP_NONZERO
 256

	)

1915 
	#PNG_FP_STICKY
 448

	)

1920 
	#PNG_FP_INVALID
 512

	)

1925 
	#PNG_FP_MAYBE
 0

	)

1926 
	#PNG_FP_OK
 1

	)

1933 
	#PNG_FP_NZ_MASK
 (
PNG_FP_SAW_DIGIT
 | 
PNG_FP_NEGATIVE
 | 
PNG_FP_NONZERO
)

	)

1935 
	#PNG_FP_Z_MASK
 (
PNG_FP_SAW_DIGIT
 | 
PNG_FP_NONZERO
)

	)

1938 
	#PNG_FP_IS_ZERO
(
°©e
Ë(((°©eË& 
PNG_FP_Z_MASK
Ë=
PNG_FP_SAW_DIGIT
)

	)

1939 
	#PNG_FP_IS_POSITIVE
(
°©e
Ë(((°©eË& 
PNG_FP_NZ_MASK
Ë=
PNG_FP_Z_MASK
)

	)

1940 
	#PNG_FP_IS_NEGATIVE
(
°©e
Ë(((°©eË& 
PNG_FP_NZ_MASK
Ë=PNG_FP_NZ_MASK)

	)

1957 
	`PNG_INTERNAL_FUNCTION
(,
≤g_check_Â_numbî
,(
≤g_c⁄°_ch¨p
 
°rög
,

1958 
size_t
 
size
, *
°©ï
, 
≤g_size_ç
 
whîómi
),
PNG_EMPTY
);

1966 
	`PNG_INTERNAL_FUNCTION
(,
≤g_check_Â_°rög
,(
≤g_c⁄°_ch¨p
 
°rög
,

1967 
size_t
 
size
),
PNG_EMPTY
);

1970 #i‡
	`deföed
(
PNG_GAMMA_SUPPORTED
) ||\

1971 
	`deföed
(
PNG_INCH_CONVERSIONS_SUPPORTED
Ë|| deföed(
PNG_READ_pHYs_SUPPORTED
)

1978 
	`PNG_INTERNAL_FUNCTION
(,
≤g_muldiv
,(
≤g_fixed_poöt_p
 
ªs
, 
≤g_fixed_poöt
 
a
,

1979 
≤g_öt_32
 
mu…ùlõd_by
,Öng_öt_32 
divided_by
),
PNG_EMPTY
);

1982 #i‡
	`deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_INCH_CONVERSIONS_SUPPORTED
)

1984 
	`PNG_INTERNAL_FUNCTION
(
≤g_fixed_poöt
,
≤g_muldiv_w¨n
,

1985 (
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_fixed_poöt
 
a
, 
≤g_öt_32
 
mu…ùlõd_by
,

1986 
≤g_öt_32
 
divided_by
),
PNG_EMPTY
);

1989 #ifde‡
PNG_GAMMA_SUPPORTED


1994 
	`PNG_INTERNAL_FUNCTION
(
≤g_fixed_poöt
,
≤g_ªcùroˇl
,’ng_fixed_poöà
a
),

1995 
PNG_EMPTY
);

1997 #ifde‡
PNG_READ_GAMMA_SUPPORTED


2002 
	`PNG_INTERNAL_FUNCTION
(
≤g_fixed_poöt
,
≤g_ªcùroˇl2
,’ng_fixed_poöà
a
,

2003 
≤g_fixed_poöt
 
b
),
PNG_EMPTY
);

2007 
	`PNG_INTERNAL_FUNCTION
(,
≤g_gamma_signifiˇ¡
,(
≤g_fixed_poöt
 
gamma_vÆue
),

2008 
PNG_EMPTY
);

2011 #ifde‡
PNG_READ_GAMMA_SUPPORTED


2019 
	`PNG_INTERNAL_FUNCTION
(
≤g_uöt_16
,
≤g_gamma_c‹ª˘
,(
≤g_°ru˘Ω
 
≤g_±r
,

2020 
vÆue
, 
≤g_fixed_poöt
 
gamma_vÆue
),
PNG_EMPTY
);

2021 
	`PNG_INTERNAL_FUNCTION
(
≤g_uöt_16
,
≤g_gamma_16bô_c‹ª˘
,(
vÆue
,

2022 
≤g_fixed_poöt
 
gamma_vÆue
),
PNG_EMPTY
);

2023 
	`PNG_INTERNAL_FUNCTION
(
≤g_byã
,
≤g_gamma_8bô_c‹ª˘
,(
vÆue
,

2024 
≤g_fixed_poöt
 
gamma_vÆue
),
PNG_EMPTY
);

2025 
	`PNG_INTERNAL_FUNCTION
(,
≤g_de°roy_gamma_èbÀ
,(
≤g_°ru˘Ω
 
≤g_±r
),

2026 
PNG_EMPTY
);

2027 
	`PNG_INTERNAL_FUNCTION
(,
≤g_buûd_gamma_èbÀ
,(
≤g_°ru˘Ω
 
≤g_±r
,

2028 
bô_dïth
),
PNG_EMPTY
);

2032 #i‡
	`deföed
(
PNG_SIMPLIFIED_READ_SUPPORTED
) ||\

2033 
	`deföed
(
PNG_SIMPLIFIED_WRITE_SUPPORTED
)

2035 
	s≤g_c⁄åﬁ


2037 
≤g_°ru˘p
 
≤g_±r
;

2038 
≤g_öf›
 
öfo_±r
;

2039 
≤g_voidp
 
îr‹_buf
;

2041 
≤g_c⁄°_byãp
 
mem‹y
;

2042 
size_t
 
size
;

2044 
f‹_wrôe
 :1;

2045 
ow√d_fûe
 :1;

2046 } 
	t≤g_c⁄åﬁ
;

2051 #ifde‡
__˝lu•lus


2052 
	#≤g_c⁄åﬁ_jmp_buf
(
pc
Ë(((
jmp_buf
*)(’c)->
îr‹_buf
))[0])

	)

2054 
	#≤g_c⁄åﬁ_jmp_buf
(
pc
Ë(’c)->
îr‹_buf
)

	)

2061 
	`PNG_INTERNAL_CALLBACK
(,
≤g_ß„_îr‹
,(
≤g_°ru˘p
 
≤g_±r
,

2062 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
),
PNG_NORETURN
);

2064 #ifde‡
PNG_WARNINGS_SUPPORTED


2065 
	`PNG_INTERNAL_CALLBACK
(,
≤g_ß„_w¨nög
,(
≤g_°ru˘p
 
≤g_±r
,

2066 
≤g_c⁄°_ch¨p
 
w¨nög_mesßge
),
PNG_EMPTY
);

2068 
	#≤g_ß„_w¨nög
 0

	)

2071 
	`PNG_INTERNAL_FUNCTION
(,
≤g_ß„_execuã
,(
≤g_imagï
 
image
,

2072 (*
fun˘i⁄
)(
≤g_voidp
),Öng_void∞
¨g
),
PNG_EMPTY
);

2077 
	`PNG_INTERNAL_FUNCTION
(,
≤g_image_îr‹
,(
≤g_imagï
 
image
,

2078 
≤g_c⁄°_ch¨p
 
îr‹_mesßge
),
PNG_EMPTY
);

2080 #i‚de‡
PNG_SIMPLIFIED_READ_SUPPORTED


2082 
	`PNG_INTERNAL_FUNCTION
(, 
≤g_image_‰ì
, (
≤g_imagï
 
image
), 
PNG_EMPTY
);

2092 #ifde‡
PNG_FILTER_OPTIMIZATIONS


2093 
	`PNG_INTERNAL_FUNCTION
(, 
PNG_FILTER_OPTIMIZATIONS
, (
≤g_°ru˘p
 
≤g_±r
,

2094 
bµ
), 
PNG_EMPTY
);

2101 #i‡
PNG_ARM_NEON_OPT
 > 0

2102 
	`PNG_INTERNAL_FUNCTION
(, 
≤g_öô_fûãr_fun˘i⁄s_√⁄
,

2103 (
≤g_°ru˘p
 
≤g_±r
, 
bµ
), 
PNG_EMPTY
);

2106 #i‡
PNG_MIPS_MSA_OPT
 > 0

2107 
	`PNG_INTERNAL_FUNCTION
(, 
≤g_öô_fûãr_fun˘i⁄s_mß
,

2108 (
≤g_°ru˘p
 
≤g_±r
, 
bµ
), 
PNG_EMPTY
);

2111 #i‡
PNG_INTEL_SSE_IMPLEMENTATION
 > 0

2112 
	`PNG_INTERNAL_FUNCTION
(, 
≤g_öô_fûãr_fun˘i⁄s_s£2
,

2113 (
≤g_°ru˘p
 
≤g_±r
, 
bµ
), 
PNG_EMPTY
);

2117 
	`PNG_INTERNAL_FUNCTION
(
≤g_uöt_32
, 
≤g_check_keyw‹d
, (
≤g_°ru˘Ω
 
≤g_±r
,

2118 
≤g_c⁄°_ch¨p
 
key
, 
≤g_byãp
 
√w_key
), 
PNG_EMPTY
);

2120 #i‡
PNG_ARM_NEON_IMPLEMENTATION
 == 1

2121 
	`PNG_INTERNAL_FUNCTION
(,

2122 
≤g_rifÊe_∑Àâe_√⁄
,

2123 (
≤g_°ru˘Ω
),

2124 
PNG_EMPTY
);

2125 
	`PNG_INTERNAL_FUNCTION
(,

2126 
≤g_do_ex∑nd_∑Àâe_rgba8_√⁄
,

2127 (
≤g_°ru˘Ω
,

2128 
≤g_row_öf›
,

2129 
≤g_c⁄°_byãp
,

2130 c⁄° 
≤g_byãµ
,

2131 c⁄° 
≤g_byãµ
),

2132 
PNG_EMPTY
);

2133 
	`PNG_INTERNAL_FUNCTION
(,

2134 
≤g_do_ex∑nd_∑Àâe_rgb8_√⁄
,

2135 (
≤g_°ru˘Ω
,

2136 
≤g_row_öf›
,

2137 
≤g_c⁄°_byãp
,

2138 c⁄° 
≤g_byãµ
,

2139 c⁄° 
≤g_byãµ
),

2140 
PNG_EMPTY
);

2145 
	~"≤gdebug.h
"

2147 #ifde‡
__˝lu•lus


2148 
	}
}

	@pngread.c

17 
	~"≤g¥iv.h
"

18 #i‡
deföed
(
PNG_SIMPLIFIED_READ_SUPPORTED
Ë&& deföed(
PNG_STDIO_SUPPORTED
)

19 
	~<î∫o.h
>

22 #ifde‡
PNG_READ_SUPPORTED


25 
PNG_FUNCTION
(
≤g_°ru˘p
,
PNGAPI


26 
≤g_¸óã_ªad_°ru˘
,(
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

27 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
),
PNG_ALLOCATED
)

29 #i‚de‡
PNG_USER_MEM_SUPPORTED


30 
≤g_°ru˘p
 
	g≤g_±r
 = 
≤g_¸óã_≤g_°ru˘
(
u£r_≤g_vî
, 
îr‹_±r
,

31 
îr‹_‚
, 
w¨n_‚
, 
NULL
, NULL, NULL);

33  
≤g_¸óã_ªad_°ru˘_2
(
u£r_≤g_vî
, 
îr‹_±r
, 
îr‹_‚
,

34 
w¨n_‚
, 
NULL
, NULL, NULL);

40 
PNG_FUNCTION
(
≤g_°ru˘p
,
PNGAPI


41 
≤g_¸óã_ªad_°ru˘_2
,(
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

42 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

43 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
),
PNG_ALLOCATED
)

45 
≤g_°ru˘p
 
	g≤g_±r
 = 
≤g_¸óã_≤g_°ru˘
(
u£r_≤g_vî
, 
îr‹_±r
,

46 
îr‹_‚
, 
w¨n_‚
, 
mem_±r
, 
mÆloc_‚
, 
‰ì_‚
);

49 i‡(
	g≤g_±r
 !
NULL
)

51 
≤g_±r
->
mode
 = 
PNG_IS_READ_STRUCT
;

56 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


57 
	g≤g_±r
->
	gIDAT_ªad_size
 = 
PNG_IDAT_READ_SIZE
;

60 #ifde‡
PNG_BENIGN_READ_ERRORS_SUPPORTED


61 
	g≤g_±r
->
	gÊags
 |
PNG_FLAG_BENIGN_ERRORS_WARN
;

66 #i‡
PNG_RELEASE_BUILD


67 
	g≤g_±r
->
	gÊags
 |
PNG_FLAG_APP_WARNINGS_WARN
;

75 
≤g_£t_ªad_‚
(
≤g_±r
, 
NULL
, NULL);

78  
	g≤g_±r
;

82 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


91 
PNGAPI


92 
	$≤g_ªad_öfo
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

94 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


95 
kìp
;

98 
	`≤g_debug
(1, "inÖng_read_info");

100 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

104 
	`≤g_ªad_sig
(
≤g_±r
, 
öfo_±r
);

108 
≤g_uöt_32
 
Àngth
 = 
	`≤g_ªad_chunk_hódî
(
≤g_±r
);

109 
≤g_uöt_32
 
chunk_«me
 = 
≤g_±r
->chunk_name;

114 i‡(
chunk_«me
 =
≤g_IDAT
)

116 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

117 
	`≤g_chunk_îr‹
(
≤g_±r
, "Missing IHDR before IDAT");

119 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 &&

120 (
≤g_±r
->
mode
 & 
PNG_HAVE_PLTE
) == 0)

121 
	`≤g_chunk_îr‹
(
≤g_±r
, "Missing PLTE before IDAT");

123 i‡((
≤g_±r
->
mode
 & 
PNG_AFTER_IDAT
) != 0)

124 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "Too many IDATs found");

126 
≤g_±r
->
mode
 |
PNG_HAVE_IDAT
;

129 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

131 
≤g_±r
->
mode
 |
PNG_HAVE_CHUNK_AFTER_IDAT
;

132 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

138 i‡(
chunk_«me
 =
≤g_IHDR
)

139 
	`≤g_h™dÀ_IHDR
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

141 i‡(
chunk_«me
 =
≤g_IEND
)

142 
	`≤g_h™dÀ_IEND
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

144 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


145 i‡((
kìp
 = 
	`≤g_chunk_unknown_h™dlög
(
≤g_±r
, 
chunk_«me
)) != 0)

147 
	`≤g_h™dÀ_unknown
(
≤g_±r
, 
öfo_±r
, 
Àngth
, 
kìp
);

149 i‡(
chunk_«me
 =
≤g_PLTE
)

150 
≤g_±r
->
mode
 |
PNG_HAVE_PLTE
;

152 i‡(
chunk_«me
 =
≤g_IDAT
)

154 
≤g_±r
->
id©_size
 = 0;

159 i‡(
chunk_«me
 =
≤g_PLTE
)

160 
	`≤g_h™dÀ_PLTE
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

162 i‡(
chunk_«me
 =
≤g_IDAT
)

164 
≤g_±r
->
id©_size
 = 
Àngth
;

168 #ifde‡
PNG_READ_bKGD_SUPPORTED


169 i‡(
chunk_«me
 =
≤g_bKGD
)

170 
	`≤g_h™dÀ_bKGD
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

173 #ifde‡
PNG_READ_cHRM_SUPPORTED


174 i‡(
chunk_«me
 =
≤g_cHRM
)

175 
	`≤g_h™dÀ_cHRM
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

178 #ifde‡
PNG_READ_eXIf_SUPPORTED


179 i‡(
chunk_«me
 =
≤g_eXIf
)

180 
	`≤g_h™dÀ_eXIf
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

183 #ifde‡
PNG_READ_gAMA_SUPPORTED


184 i‡(
chunk_«me
 =
≤g_gAMA
)

185 
	`≤g_h™dÀ_gAMA
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

188 #ifde‡
PNG_READ_hIST_SUPPORTED


189 i‡(
chunk_«me
 =
≤g_hIST
)

190 
	`≤g_h™dÀ_hIST
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

193 #ifde‡
PNG_READ_oFFs_SUPPORTED


194 i‡(
chunk_«me
 =
≤g_oFFs
)

195 
	`≤g_h™dÀ_oFFs
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

198 #ifde‡
PNG_READ_pCAL_SUPPORTED


199 i‡(
chunk_«me
 =
≤g_pCAL
)

200 
	`≤g_h™dÀ_pCAL
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

203 #ifde‡
PNG_READ_sCAL_SUPPORTED


204 i‡(
chunk_«me
 =
≤g_sCAL
)

205 
	`≤g_h™dÀ_sCAL
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

208 #ifde‡
PNG_READ_pHYs_SUPPORTED


209 i‡(
chunk_«me
 =
≤g_pHYs
)

210 
	`≤g_h™dÀ_pHYs
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

213 #ifde‡
PNG_READ_sBIT_SUPPORTED


214 i‡(
chunk_«me
 =
≤g_sBIT
)

215 
	`≤g_h™dÀ_sBIT
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

218 #ifde‡
PNG_READ_sRGB_SUPPORTED


219 i‡(
chunk_«me
 =
≤g_sRGB
)

220 
	`≤g_h™dÀ_sRGB
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

223 #ifde‡
PNG_READ_iCCP_SUPPORTED


224 i‡(
chunk_«me
 =
≤g_iCCP
)

225 
	`≤g_h™dÀ_iCCP
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

228 #ifde‡
PNG_READ_sPLT_SUPPORTED


229 i‡(
chunk_«me
 =
≤g_sPLT
)

230 
	`≤g_h™dÀ_sPLT
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

233 #ifde‡
PNG_READ_tEXt_SUPPORTED


234 i‡(
chunk_«me
 =
≤g_tEXt
)

235 
	`≤g_h™dÀ_tEXt
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

238 #ifde‡
PNG_READ_tIME_SUPPORTED


239 i‡(
chunk_«me
 =
≤g_tIME
)

240 
	`≤g_h™dÀ_tIME
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

243 #ifde‡
PNG_READ_tRNS_SUPPORTED


244 i‡(
chunk_«me
 =
≤g_tRNS
)

245 
	`≤g_h™dÀ_tRNS
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

248 #ifde‡
PNG_READ_zTXt_SUPPORTED


249 i‡(
chunk_«me
 =
≤g_zTXt
)

250 
	`≤g_h™dÀ_zTXt
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

253 #ifde‡
PNG_READ_iTXt_SUPPORTED


254 i‡(
chunk_«me
 =
≤g_iTXt
)

255 
	`≤g_h™dÀ_iTXt
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

259 
	`≤g_h™dÀ_unknown
(
≤g_±r
, 
öfo_±r
, 
Àngth
,

260 
PNG_HANDLE_CHUNK_AS_DEFAULT
);

262 
	}
}

266 
PNGAPI


267 
	$≤g_ªad_upd©e_öfo
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

269 
	`≤g_debug
(1, "inÖng_read_update_info");

271 i‡(
≤g_±r
 !
NULL
)

273 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ROW_INIT
) == 0)

275 
	`≤g_ªad_°¨t_row
(
≤g_±r
);

277 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


278 
	`≤g_ªad_å™sf‹m_öfo
(
≤g_±r
, 
öfo_±r
);

280 
	`PNG_UNUSED
(
öfo_±r
)

286 
	`≤g_≠p_îr‹
(
≤g_±r
,

289 
	}
}

291 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


297 
PNGAPI


298 
	$≤g_°¨t_ªad_image
(
≤g_°ru˘Ω
 
≤g_±r
)

300 
	`≤g_debug
(1, "inÖng_start_read_image");

302 i‡(
≤g_±r
 !
NULL
)

304 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ROW_INIT
) == 0)

305 
	`≤g_ªad_°¨t_row
(
≤g_±r
);

309 
	`≤g_≠p_îr‹
(
≤g_±r
,

312 
	}
}

315 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


316 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


321 
	$≤g_do_ªad_öå≠ixñ
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

323 
	`≤g_debug
(1, "inÖng_do_read_intrapixel");

326 (
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

328 
byãs_≥r_pixñ
;

329 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

331 i‡(
row_öfo
->
bô_dïth
 == 8)

333 
≤g_byãp
 
Ω
;

334 
≤g_uöt_32
 
i
;

336 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

337 
byãs_≥r_pixñ
 = 3;

339 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

340 
byãs_≥r_pixñ
 = 4;

345 
i
 = 0, 
Ω
 = 
row
; i < 
row_width
; i++,Ñ∞+
byãs_≥r_pixñ
)

347 *(
Ω
Ë(
≤g_byã
)((256 + *rp + *(rp + 1)) & 0xff);

348 *(
Ω
+2Ë(
≤g_byã
)((256 + *(rp + 2) + *(rp + 1)) & 0xff);

351 i‡(
row_öfo
->
bô_dïth
 == 16)

353 
≤g_byãp
 
Ω
;

354 
≤g_uöt_32
 
i
;

356 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

357 
byãs_≥r_pixñ
 = 6;

359 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

360 
byãs_≥r_pixñ
 = 8;

365 
i
 = 0, 
Ω
 = 
row
; i < 
row_width
; i++,Ñ∞+
byãs_≥r_pixñ
)

367 
≤g_uöt_32
 
s0
 = (≤g_uöt_32)(*(
Ω
 ) << 8) | *(rp + 1);

368 
≤g_uöt_32
 
s1
 = (≤g_uöt_32)(*(
Ω
 + 2) << 8) | *(rp + 3);

369 
≤g_uöt_32
 
s2
 = (≤g_uöt_32)(*(
Ω
 + 4) << 8) | *(rp + 5);

370 
≤g_uöt_32
 
ªd
 = (
s0
 + 
s1
 + 65536) & 0xffff;

371 
≤g_uöt_32
 
blue
 = (
s2
 + 
s1
 + 65536) & 0xffff;

372 *(
Ω
 ) = (
≤g_byã
)((
ªd
 >> 8) & 0xff);

373 *(
Ω
 + 1Ë(
≤g_byã
)(
ªd
 & 0xff);

374 *(
Ω
 + 4Ë(
≤g_byã
)((
blue
 >> 8) & 0xff);

375 *(
Ω
 + 5Ë(
≤g_byã
)(
blue
 & 0xff);

379 
	}
}

382 
PNGAPI


383 
	$≤g_ªad_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
row
,Öng_byã∞
d•_row
)

385 
≤g_row_öfo
 
row_öfo
;

387 i‡(
≤g_±r
 =
NULL
)

390 
	`≤g_debug2
(1, "inÖng_read_row (row %lu,Öass %d)",

391 ()
≤g_±r
->
row_numbî
,Öng_±r->
∑ss
);

396 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ROW_INIT
) == 0)

397 
	`≤g_ªad_°¨t_row
(
≤g_±r
);

400 
row_öfo
.
width
 = 
≤g_±r
->
iwidth
;

401 
row_öfo
.
cﬁ‹_ty≥
 = 
≤g_±r
->color_type;

402 
row_öfo
.
bô_dïth
 = 
≤g_±r
->bit_depth;

403 
row_öfo
.
ch™√ls
 = 
≤g_±r
->channels;

404 
row_öfo
.
pixñ_dïth
 = 
≤g_±r
->pixel_depth;

405 
row_öfo
.
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo.
pixñ_dïth
,Ñow_öfo.
width
);

407 #ifde‡
PNG_WARNINGS_SUPPORTED


408 i‡(
≤g_±r
->
row_numbî
 =0 &&Öng_±r->
∑ss
 == 0)

411 #i‡
	`deföed
(
PNG_WRITE_INVERT_SUPPORTED
Ë&& !deföed(
PNG_READ_INVERT_SUPPORTED
)

412 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INVERT_MONO
) != 0)

413 
	`≤g_w¨nög
(
≤g_±r
, "PNG_READ_INVERT_SUPPORTED isÇot defined");

416 #i‡
	`deföed
(
PNG_WRITE_FILLER_SUPPORTED
Ë&& !deföed(
PNG_READ_FILLER_SUPPORTED
)

417 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_FILLER
) != 0)

418 
	`≤g_w¨nög
(
≤g_±r
, "PNG_READ_FILLER_SUPPORTED isÇot defined");

421 #i‡
	`deföed
(
PNG_WRITE_PACKSWAP_SUPPORTED
) && \

422 !
	`deföed
(
PNG_READ_PACKSWAP_SUPPORTED
)

423 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

424 
	`≤g_w¨nög
(
≤g_±r
, "PNG_READ_PACKSWAP_SUPPORTED isÇot defined");

427 #i‡
	`deföed
(
PNG_WRITE_PACK_SUPPORTED
Ë&& !deföed(
PNG_READ_PACK_SUPPORTED
)

428 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACK
) != 0)

429 
	`≤g_w¨nög
(
≤g_±r
, "PNG_READ_PACK_SUPPORTED isÇot defined");

432 #i‡
	`deföed
(
PNG_WRITE_SHIFT_SUPPORTED
Ë&& !deföed(
PNG_READ_SHIFT_SUPPORTED
)

433 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SHIFT
) != 0)

434 
	`≤g_w¨nög
(
≤g_±r
, "PNG_READ_SHIFT_SUPPORTED isÇot defined");

437 #i‡
	`deföed
(
PNG_WRITE_BGR_SUPPORTED
Ë&& !deföed(
PNG_READ_BGR_SUPPORTED
)

438 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BGR
) != 0)

439 
	`≤g_w¨nög
(
≤g_±r
, "PNG_READ_BGR_SUPPORTED isÇot defined");

442 #i‡
	`deföed
(
PNG_WRITE_SWAP_SUPPORTED
Ë&& !deföed(
PNG_READ_SWAP_SUPPORTED
)

443 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SWAP_BYTES
) != 0)

444 
	`≤g_w¨nög
(
≤g_±r
, "PNG_READ_SWAP_SUPPORTED isÇot defined");

449 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


456 i‡(
≤g_±r
->
öãæa˚d
 != 0 &&

457 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0)

459 
≤g_±r
->
∑ss
)

462 i‡(
≤g_±r
->
row_numbî
 & 0x07)

464 i‡(
d•_row
 !
NULL
)

465 
	`≤g_comböe_row
(
≤g_±r
, 
d•_row
, 1 );

466 
	`≤g_ªad_föish_row
(
≤g_±r
);

472 i‡((
≤g_±r
->
row_numbî
 & 0x07Ë||Öng_±r->
width
 < 5)

474 i‡(
d•_row
 !
NULL
)

475 
	`≤g_comböe_row
(
≤g_±r
, 
d•_row
, 1 );

477 
	`≤g_ªad_föish_row
(
≤g_±r
);

483 i‡((
≤g_±r
->
row_numbî
 & 0x07) != 4)

485 i‡(
d•_row
 !
NULL
 && (
≤g_±r
->
row_numbî
 & 4))

486 
	`≤g_comböe_row
(
≤g_±r
, 
d•_row
, 1 );

488 
	`≤g_ªad_föish_row
(
≤g_±r
);

494 i‡((
≤g_±r
->
row_numbî
 & 3Ë||Öng_±r->
width
 < 3)

496 i‡(
d•_row
 !
NULL
)

497 
	`≤g_comböe_row
(
≤g_±r
, 
d•_row
, 1 );

499 
	`≤g_ªad_föish_row
(
≤g_±r
);

505 i‡((
≤g_±r
->
row_numbî
 & 3) != 2)

507 i‡(
d•_row
 !
NULL
 && (
≤g_±r
->
row_numbî
 & 2))

508 
	`≤g_comböe_row
(
≤g_±r
, 
d•_row
, 1 );

510 
	`≤g_ªad_föish_row
(
≤g_±r
);

516 i‡((
≤g_±r
->
row_numbî
 & 1Ë||Öng_±r->
width
 < 2)

518 i‡(
d•_row
 !
NULL
)

519 
	`≤g_comböe_row
(
≤g_±r
, 
d•_row
, 1 );

521 
	`≤g_ªad_föish_row
(
≤g_±r
);

528 i‡((
≤g_±r
->
row_numbî
 & 1) == 0)

530 
	`≤g_ªad_föish_row
(
≤g_±r
);

538 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) == 0)

539 
	`≤g_îr‹
(
≤g_±r
, "InvalidáttemptÅoÑeadÑow data");

542 
≤g_±r
->
row_buf
[0]=255;

543 
	`≤g_ªad_IDAT_d©a
(
≤g_±r
,Öng_±r->
row_buf
, 
row_öfo
.
rowbyãs
 + 1);

545 i‡(
≤g_±r
->
row_buf
[0] > 
PNG_FILTER_VALUE_NONE
)

547 i‡(
≤g_±r
->
row_buf
[0] < 
PNG_FILTER_VALUE_LAST
)

548 
	`≤g_ªad_fûãr_row
(
≤g_±r
, &
row_öfo
,Öng_±r->
row_buf
 + 1,

549 
≤g_±r
->
¥ev_row
 + 1,Öng_±r->
row_buf
[0]);

551 
	`≤g_îr‹
(
≤g_±r
, "badádaptive filter value");

559 
	`mem˝y
(
≤g_±r
->
¥ev_row
,Öng_±r->
row_buf
, 
row_öfo
.
rowbyãs
 + 1);

561 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


562 i‡((
≤g_±r
->
mng_„©uªs_≥rmôãd
 & 
PNG_FLAG_MNG_FILTER_64
) != 0 &&

563 (
≤g_±r
->
fûãr_ty≥
 =
PNG_INTRAPIXEL_DIFFERENCING
))

566 
	`≤g_do_ªad_öå≠ixñ
(&
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

570 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


571 i‡(
≤g_±r
->
å™sf‹m©i⁄s
)

572 
	`≤g_do_ªad_å™sf‹m©i⁄s
(
≤g_±r
, &
row_öfo
);

576 i‡(
≤g_±r
->
å™sf‹med_pixñ_dïth
 == 0)

578 
≤g_±r
->
å™sf‹med_pixñ_dïth
 = 
row_öfo
.
pixñ_dïth
;

579 i‡(
row_öfo
.
pixñ_dïth
 > 
≤g_±r
->
maximum_pixñ_dïth
)

580 
	`≤g_îr‹
(
≤g_±r
, "sequentialÑow overflow");

583 i‡(
≤g_±r
->
å™sf‹med_pixñ_dïth
 !
row_öfo
.
pixñ_dïth
)

584 
	`≤g_îr‹
(
≤g_±r
, "internal sequentialÑow size calculationÉrror");

586 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


588 i‡(
≤g_±r
->
öãæa˚d
 != 0 &&

589 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0)

591 i‡(
≤g_±r
->
∑ss
 < 6)

592 
	`≤g_do_ªad_öãæa˚
(&
row_öfo
, 
≤g_±r
->
row_buf
 + 1,Öng_±r->
∑ss
,

593 
≤g_±r
->
å™sf‹m©i⁄s
);

595 i‡(
d•_row
 !
NULL
)

596 
	`≤g_comböe_row
(
≤g_±r
, 
d•_row
, 1 );

598 i‡(
row
 !
NULL
)

599 
	`≤g_comböe_row
(
≤g_±r
, 
row
, 0 );

605 i‡(
row
 !
NULL
)

606 
	`≤g_comböe_row
(
≤g_±r
, 
row
, -1 );

608 i‡(
d•_row
 !
NULL
)

609 
	`≤g_comböe_row
(
≤g_±r
, 
d•_row
, -1 );

611 
	`≤g_ªad_föish_row
(
≤g_±r
);

613 i‡(
≤g_±r
->
ªad_row_‚
 !
NULL
)

614 (*(
≤g_±r
->
ªad_row_‚
))’ng_±r,Öng_±r->
row_numbî
,Öng_±r->
∑ss
);

616 
	}
}

619 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


644 
PNGAPI


645 
	$≤g_ªad_rows
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
row
,

646 
≤g_byãµ
 
di•œy_row
, 
≤g_uöt_32
 
num_rows
)

648 
≤g_uöt_32
 
i
;

649 
≤g_byãµ
 
Ω
;

650 
≤g_byãµ
 
dp
;

652 
	`≤g_debug
(1, "inÖng_read_rows");

654 i‡(
≤g_±r
 =
NULL
)

657 
Ω
 = 
row
;

658 
dp
 = 
di•œy_row
;

659 i‡(
Ω
 !
NULL
 && 
dp
 != NULL)

660 
i
 = 0; i < 
num_rows
; i++)

662 
≤g_byãp
 
Ωå
 = *
Ω
++;

663 
≤g_byãp
 
d±r
 = *
dp
++;

665 
	`≤g_ªad_row
(
≤g_±r
, 
Ωå
, 
d±r
);

668 i‡(
Ω
 !
NULL
)

669 
i
 = 0; i < 
num_rows
; i++)

671 
≤g_byãp
 
Ωå
 = *
Ω
;

672 
	`≤g_ªad_row
(
≤g_±r
, 
Ωå
, 
NULL
);

673 
Ω
++;

676 i‡(
dp
 !
NULL
)

677 
i
 = 0; i < 
num_rows
; i++)

679 
≤g_byãp
 
d±r
 = *
dp
;

680 
	`≤g_ªad_row
(
≤g_±r
, 
NULL
, 
d±r
);

681 
dp
++;

683 
	}
}

686 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


699 
PNGAPI


700 
	$≤g_ªad_image
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
image
)

702 
≤g_uöt_32
 
i
, 
image_height
;

703 
∑ss
, 
j
;

704 
≤g_byãµ
 
Ω
;

706 
	`≤g_debug
(1, "inÖng_read_image");

708 i‡(
≤g_±r
 =
NULL
)

711 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


712 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ROW_INIT
) == 0)

714 
∑ss
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

716 
	`≤g_°¨t_ªad_image
(
≤g_±r
);

720 i‡(
≤g_±r
->
öãæa˚d
 != 0 &&

721 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) == 0)

727 
	`≤g_w¨nög
(
≤g_±r
, "Interlace handling should beÅurned on when "

730 
≤g_±r
->
num_rows
 =Öng_±r->
height
;

736 
∑ss
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

739 i‡(
≤g_±r
->
öãæa˚d
)

740 
	`≤g_îr‹
(
≤g_±r
,

743 
∑ss
 = 1;

746 
image_height
=
≤g_±r
->
height
;

748 
j
 = 0; j < 
∑ss
; j++)

750 
Ω
 = 
image
;

751 
i
 = 0; i < 
image_height
; i++)

753 
	`≤g_ªad_row
(
≤g_±r
, *
Ω
, 
NULL
);

754 
Ω
++;

757 
	}
}

760 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


765 
PNGAPI


766 
	$≤g_ªad_íd
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

768 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


769 
kìp
;

772 
	`≤g_debug
(1, "inÖng_read_end");

774 i‡(
≤g_±r
 =
NULL
)

780 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


781 i‡(
	`≤g_chunk_unknown_h™dlög
(
≤g_±r
, 
≤g_IDAT
) == 0)

783 
	`≤g_ªad_föish_IDAT
(
≤g_±r
);

785 #ifde‡
PNG_READ_CHECK_FOR_INVALID_INDEX_SUPPORTED


787 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 &&

788 
≤g_±r
->
num_∑Àâe_max
 >Öng_±r->
num_∑Àâe
)

789 
	`≤g_bíign_îr‹
(
≤g_±r
, "ReadÖalette indexÉxceedingÇum_palette");

794 
≤g_uöt_32
 
Àngth
 = 
	`≤g_ªad_chunk_hódî
(
≤g_±r
);

795 
≤g_uöt_32
 
chunk_«me
 = 
≤g_±r
->chunk_name;

797 i‡(
chunk_«me
 !
≤g_IDAT
)

798 
≤g_±r
->
mode
 |
PNG_HAVE_CHUNK_AFTER_IDAT
;

800 i‡(
chunk_«me
 =
≤g_IEND
)

801 
	`≤g_h™dÀ_IEND
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

803 i‡(
chunk_«me
 =
≤g_IHDR
)

804 
	`≤g_h™dÀ_IHDR
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

806 i‡(
öfo_±r
 =
NULL
)

807 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

809 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


810 i‡((
kìp
 = 
	`≤g_chunk_unknown_h™dlög
(
≤g_±r
, 
chunk_«me
)) != 0)

812 i‡(
chunk_«me
 =
≤g_IDAT
)

814 i‡((
Àngth
 > 0 && !(
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_ENDED
))

815 || (
≤g_±r
->
mode
 & 
PNG_HAVE_CHUNK_AFTER_IDAT
) != 0)

816 
	`≤g_bíign_îr‹
(
≤g_±r
, ".Too many IDATs found");

818 
	`≤g_h™dÀ_unknown
(
≤g_±r
, 
öfo_±r
, 
Àngth
, 
kìp
);

819 i‡(
chunk_«me
 =
≤g_PLTE
)

820 
≤g_±r
->
mode
 |
PNG_HAVE_PLTE
;

824 i‡(
chunk_«me
 =
≤g_IDAT
)

832 i‡((
Àngth
 > 0 && !(
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_ENDED
))

833 || (
≤g_±r
->
mode
 & 
PNG_HAVE_CHUNK_AFTER_IDAT
) != 0)

834 
	`≤g_bíign_îr‹
(
≤g_±r
, "..Too many IDATs found");

836 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

838 i‡(
chunk_«me
 =
≤g_PLTE
)

839 
	`≤g_h™dÀ_PLTE
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

841 #ifde‡
PNG_READ_bKGD_SUPPORTED


842 i‡(
chunk_«me
 =
≤g_bKGD
)

843 
	`≤g_h™dÀ_bKGD
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

846 #ifde‡
PNG_READ_cHRM_SUPPORTED


847 i‡(
chunk_«me
 =
≤g_cHRM
)

848 
	`≤g_h™dÀ_cHRM
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

851 #ifde‡
PNG_READ_eXIf_SUPPORTED


852 i‡(
chunk_«me
 =
≤g_eXIf
)

853 
	`≤g_h™dÀ_eXIf
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

856 #ifde‡
PNG_READ_gAMA_SUPPORTED


857 i‡(
chunk_«me
 =
≤g_gAMA
)

858 
	`≤g_h™dÀ_gAMA
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

861 #ifde‡
PNG_READ_hIST_SUPPORTED


862 i‡(
chunk_«me
 =
≤g_hIST
)

863 
	`≤g_h™dÀ_hIST
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

866 #ifde‡
PNG_READ_oFFs_SUPPORTED


867 i‡(
chunk_«me
 =
≤g_oFFs
)

868 
	`≤g_h™dÀ_oFFs
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

871 #ifde‡
PNG_READ_pCAL_SUPPORTED


872 i‡(
chunk_«me
 =
≤g_pCAL
)

873 
	`≤g_h™dÀ_pCAL
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

876 #ifde‡
PNG_READ_sCAL_SUPPORTED


877 i‡(
chunk_«me
 =
≤g_sCAL
)

878 
	`≤g_h™dÀ_sCAL
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

881 #ifde‡
PNG_READ_pHYs_SUPPORTED


882 i‡(
chunk_«me
 =
≤g_pHYs
)

883 
	`≤g_h™dÀ_pHYs
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

886 #ifde‡
PNG_READ_sBIT_SUPPORTED


887 i‡(
chunk_«me
 =
≤g_sBIT
)

888 
	`≤g_h™dÀ_sBIT
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

891 #ifde‡
PNG_READ_sRGB_SUPPORTED


892 i‡(
chunk_«me
 =
≤g_sRGB
)

893 
	`≤g_h™dÀ_sRGB
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

896 #ifde‡
PNG_READ_iCCP_SUPPORTED


897 i‡(
chunk_«me
 =
≤g_iCCP
)

898 
	`≤g_h™dÀ_iCCP
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

901 #ifde‡
PNG_READ_sPLT_SUPPORTED


902 i‡(
chunk_«me
 =
≤g_sPLT
)

903 
	`≤g_h™dÀ_sPLT
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

906 #ifde‡
PNG_READ_tEXt_SUPPORTED


907 i‡(
chunk_«me
 =
≤g_tEXt
)

908 
	`≤g_h™dÀ_tEXt
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

911 #ifde‡
PNG_READ_tIME_SUPPORTED


912 i‡(
chunk_«me
 =
≤g_tIME
)

913 
	`≤g_h™dÀ_tIME
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

916 #ifde‡
PNG_READ_tRNS_SUPPORTED


917 i‡(
chunk_«me
 =
≤g_tRNS
)

918 
	`≤g_h™dÀ_tRNS
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

921 #ifde‡
PNG_READ_zTXt_SUPPORTED


922 i‡(
chunk_«me
 =
≤g_zTXt
)

923 
	`≤g_h™dÀ_zTXt
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

926 #ifde‡
PNG_READ_iTXt_SUPPORTED


927 i‡(
chunk_«me
 =
≤g_iTXt
)

928 
	`≤g_h™dÀ_iTXt
(
≤g_±r
, 
öfo_±r
, 
Àngth
);

932 
	`≤g_h™dÀ_unknown
(
≤g_±r
, 
öfo_±r
, 
Àngth
,

933 
PNG_HANDLE_CHUNK_AS_DEFAULT
);

934 } (
≤g_±r
->
mode
 & 
PNG_HAVE_IEND
) == 0);

935 
	}
}

940 
	$≤g_ªad_de°roy
(
≤g_°ru˘Ω
 
≤g_±r
)

942 
	`≤g_debug
(1, "inÖng_read_destroy");

944 #ifde‡
PNG_READ_GAMMA_SUPPORTED


945 
	`≤g_de°roy_gamma_èbÀ
(
≤g_±r
);

948 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
big_row_buf
);

949 
≤g_±r
->
big_row_buf
 = 
NULL
;

950 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
big_¥ev_row
);

951 
≤g_±r
->
big_¥ev_row
 = 
NULL
;

952 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
ªad_buf„r
);

953 
≤g_±r
->
ªad_buf„r
 = 
NULL
;

955 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


956 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
∑Àâe_lookup
);

957 
≤g_±r
->
∑Àâe_lookup
 = 
NULL
;

958 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
qu™tize_ödex
);

959 
≤g_±r
->
qu™tize_ödex
 = 
NULL
;

962 i‡((
≤g_±r
->
‰ì_me
 & 
PNG_FREE_PLTE
) != 0)

964 
	`≤g_z‰ì
(
≤g_±r
,Öng_±r->
∑Àâe
);

965 
≤g_±r
->
∑Àâe
 = 
NULL
;

967 
≤g_±r
->
‰ì_me
 &~
PNG_FREE_PLTE
;

969 #i‡
	`deföed
(
PNG_tRNS_SUPPORTED
) || \

970 
	`deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

971 i‡((
≤g_±r
->
‰ì_me
 & 
PNG_FREE_TRNS
) != 0)

973 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
å™s_Æpha
);

974 
≤g_±r
->
å™s_Æpha
 = 
NULL
;

976 
≤g_±r
->
‰ì_me
 &~
PNG_FREE_TRNS
;

979 
	`öÊ©eEnd
(&
≤g_±r
->
z°ªam
);

981 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


982 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
ßve_buf„r
);

983 
≤g_±r
->
ßve_buf„r
 = 
NULL
;

986 #i‡
	`deföed
(
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
) && \

987 
	`deföed
(
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
)

988 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
unknown_chunk
.
d©a
);

989 
≤g_±r
->
unknown_chunk
.
d©a
 = 
NULL
;

992 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


993 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
chunk_li°
);

994 
≤g_±r
->
chunk_li°
 = 
NULL
;

997 #i‡
	`deföed
(
PNG_READ_EXPAND_SUPPORTED
) && \

998 
	`deföed
(
PNG_ARM_NEON_IMPLEMENTATION
)

999 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
rifÊed_∑Àâe
);

1000 
≤g_±r
->
rifÊed_∑Àâe
 = 
NULL
;

1007 
	}
}

1010 
PNGAPI


1011 
	$≤g_de°roy_ªad_°ru˘
(
≤g_°ru˘µ
 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
,

1012 
≤g_öf›p
 
íd_öfo_±r_±r
)

1014 
≤g_°ru˘Ω
 
≤g_±r
 = 
NULL
;

1016 
	`≤g_debug
(1, "inÖng_destroy_read_struct");

1018 i‡(
≤g_±r_±r
 !
NULL
)

1019 
≤g_±r
 = *
≤g_±r_±r
;

1021 i‡(
≤g_±r
 =
NULL
)

1028 
	`≤g_de°roy_öfo_°ru˘
(
≤g_±r
, 
íd_öfo_±r_±r
);

1029 
	`≤g_de°roy_öfo_°ru˘
(
≤g_±r
, 
öfo_±r_±r
);

1031 *
≤g_±r_±r
 = 
NULL
;

1032 
	`≤g_ªad_de°roy
(
≤g_±r
);

1033 
	`≤g_de°roy_≤g_°ru˘
(
≤g_±r
);

1034 
	}
}

1036 
PNGAPI


1037 
	$≤g_£t_ªad_°©us_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_ªad_°©us_±r
 
ªad_row_‚
)

1039 i‡(
≤g_±r
 =
NULL
)

1042 
≤g_±r
->
ªad_row_‚
 =Ñead_row_fn;

1043 
	}
}

1046 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1047 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


1048 
PNGAPI


1049 
	$≤g_ªad_≤g
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1050 
å™sf‹ms
, 
voidp
 
∑øms
)

1052 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

1058 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

1059 i‡(
öfo_±r
->
height
 > 
PNG_UINT_32_MAX
/( (
≤g_byãp
)))

1060 
	`≤g_îr‹
(
≤g_±r
, "Image isÅoo highÅoÖrocess withÖng_read_png()");

1071 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_SCALE_16
) != 0)

1075 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


1076 
	`≤g_£t_sˇÀ_16
(
≤g_±r
);

1078 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_SCALE_16Çot supported");

1085 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_STRIP_16
) != 0)

1086 #ifde‡
PNG_READ_STRIP_16_TO_8_SUPPORTED


1087 
	`≤g_£t_°rù_16
(
≤g_±r
);

1089 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_STRIP_16Çot supported");

1095 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_STRIP_ALPHA
) != 0)

1096 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


1097 
	`≤g_£t_°rù_Æpha
(
≤g_±r
);

1099 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_STRIP_ALPHAÇot supported");

1105 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_PACKING
) != 0)

1106 #ifde‡
PNG_READ_PACK_SUPPORTED


1107 
	`≤g_£t_∑ckög
(
≤g_±r
);

1109 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_PACKINGÇot supported");

1115 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_PACKSWAP
) != 0)

1116 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


1117 
	`≤g_£t_∑cksw≠
(
≤g_±r
);

1119 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_PACKSWAPÇot supported");

1127 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_EXPAND
) != 0)

1128 #ifde‡
PNG_READ_EXPAND_SUPPORTED


1129 
	`≤g_£t_ex∑nd
(
≤g_±r
);

1131 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_EXPANDÇot supported");

1139 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_INVERT_MONO
) != 0)

1140 #ifde‡
PNG_READ_INVERT_SUPPORTED


1141 
	`≤g_£t_övît_m⁄o
(
≤g_±r
);

1143 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_INVERT_MONOÇot supported");

1150 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_SHIFT
) != 0)

1151 #ifde‡
PNG_READ_SHIFT_SUPPORTED


1152 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_sBIT
) != 0)

1153 
	`≤g_£t_shi·
(
≤g_±r
, &
öfo_±r
->
sig_bô
);

1155 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_SHIFTÇot supported");

1159 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_BGR
) != 0)

1160 #ifde‡
PNG_READ_BGR_SUPPORTED


1161 
	`≤g_£t_bgr
(
≤g_±r
);

1163 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_BGRÇot supported");

1167 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_SWAP_ALPHA
) != 0)

1168 #ifde‡
PNG_READ_SWAP_ALPHA_SUPPORTED


1169 
	`≤g_£t_sw≠_Æpha
(
≤g_±r
);

1171 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_SWAP_ALPHAÇot supported");

1175 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_SWAP_ENDIAN
) != 0)

1176 #ifde‡
PNG_READ_SWAP_SUPPORTED


1177 
	`≤g_£t_sw≠
(
≤g_±r
);

1179 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_SWAP_ENDIANÇot supported");

1184 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_INVERT_ALPHA
) != 0)

1185 #ifde‡
PNG_READ_INVERT_ALPHA_SUPPORTED


1186 
	`≤g_£t_övît_Æpha
(
≤g_±r
);

1188 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_INVERT_ALPHAÇot supported");

1193 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_GRAY_TO_RGB
) != 0)

1194 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


1195 
	`≤g_£t_gøy_to_rgb
(
≤g_±r
);

1197 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_GRAY_TO_RGBÇot supported");

1201 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_EXPAND_16
) != 0)

1202 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


1203 
	`≤g_£t_ex∑nd_16
(
≤g_±r
);

1205 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_EXPAND_16Çot supported");

1213 ()
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

1219 
	`≤g_ªad_upd©e_öfo
(
≤g_±r
, 
öfo_±r
);

1223 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
, 
PNG_FREE_ROWS
, 0);

1224 i‡(
öfo_±r
->
row_poöãrs
 =
NULL
)

1226 
≤g_uöt_32
 
ùå
;

1228 
öfo_±r
->
row_poöãrs
 = 
	`≤g_voidˇ°
(
≤g_byãµ
, 
	`≤g_mÆloc
(
≤g_±r
,

1229 
öfo_±r
->
height
 * ( (
≤g_byãp
))));

1231 
ùå
=0; i±r<
öfo_±r
->
height
; iptr++)

1232 
öfo_±r
->
row_poöãrs
[
ùå
] = 
NULL
;

1234 
öfo_±r
->
‰ì_me
 |
PNG_FREE_ROWS
;

1236 
ùå
 = 0; i±∏< 
öfo_±r
->
height
; iptr++)

1237 
öfo_±r
->
row_poöãrs
[
ùå
] = 
	`≤g_voidˇ°
(
≤g_byãp
,

1238 
	`≤g_mÆloc
(
≤g_±r
, 
öfo_±r
->
rowbyãs
));

1241 
	`≤g_ªad_image
(
≤g_±r
, 
öfo_±r
->
row_poöãrs
);

1242 
öfo_±r
->
vÆid
 |
PNG_INFO_IDAT
;

1245 
	`≤g_ªad_íd
(
≤g_±r
, 
öfo_±r
);

1247 
	`PNG_UNUSED
(
∑øms
)

1248 
	}
}

1252 #ifde‡
PNG_SIMPLIFIED_READ_SUPPORTED


1261 
	#P_NOTSET
 0

	)

1262 
	#P_sRGB
 1

	)

1263 
	#P_LINEAR
 2

	)

1264 
	#P_FILE
 3

	)

1265 
	#P_LINEAR8
 4

	)

1270 
	#PNG_CMAP_NONE
 0

	)

1271 
	#PNG_CMAP_GA
 1

	)

1272 
	#PNG_CMAP_TRANS
 2

	)

1273 
	#PNG_CMAP_RGB
 3

	)

1274 
	#PNG_CMAP_RGB_ALPHA
 4

	)

1277 
	#PNG_CMAP_NONE_BACKGROUND
 256

	)

1278 
	#PNG_CMAP_GA_BACKGROUND
 231

	)

1279 
	#PNG_CMAP_TRANS_BACKGROUND
 254

	)

1280 
	#PNG_CMAP_RGB_BACKGROUND
 256

	)

1281 
	#PNG_CMAP_RGB_ALPHA_BACKGROUND
 216

	)

1286 
≤g_imagï
 
	mimage
;

1287 
≤g_voidp
 
	mbuf„r
;

1288 
≤g_öt_32
 
	mrow_°ride
;

1289 
≤g_voidp
 
	mcﬁ‹m≠
;

1290 
≤g_c⁄°_cﬁ‹p
 
	mbackground
;

1292 
≤g_voidp
 
	mloˇl_row
;

1293 
≤g_voidp
 
	mfú°_row
;

1294 
±rdiff_t
 
	mrow_byãs
;

1295 
	mfûe_ícodög
;

1296 
≤g_fixed_poöt
 
	mgamma_to_löór
;

1297 
	mcﬁ‹m≠_¥o˚ssög
;

1298 } 
	t≤g_image_ªad_c⁄åﬁ
;

1306 
	$≤g_image_ªad_öô
(
≤g_imagï
 
image
)

1308 i‡(
image
->
›aque
 =
NULL
)

1310 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
image
,

1311 
≤g_ß„_îr‹
, 
≤g_ß„_w¨nög
);

1316 
	`mem£t
(
image
, 0, ( *image));

1317 
image
->
vîsi⁄
 = 
PNG_IMAGE_VERSION
;

1319 i‡(
≤g_±r
 !
NULL
)

1321 
≤g_öf›
 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

1323 i‡(
öfo_±r
 !
NULL
)

1325 
≤g_c⁄åﬁp
 
c⁄åﬁ
 = 
	`≤g_voidˇ°
(png_controlp,

1326 
	`≤g_mÆloc_w¨n
(
≤g_±r
, ( *
c⁄åﬁ
)));

1328 i‡(
c⁄åﬁ
 !
NULL
)

1330 
	`mem£t
(
c⁄åﬁ
, 0, ( *control));

1332 
c⁄åﬁ
->
≤g_±r
 =Öng_ptr;

1333 
c⁄åﬁ
->
öfo_±r
 = info_ptr;

1334 
c⁄åﬁ
->
f‹_wrôe
 = 0;

1336 
image
->
›aque
 = 
c⁄åﬁ
;

1341 
	`≤g_de°roy_öfo_°ru˘
(
≤g_±r
, &
öfo_±r
);

1344 
	`≤g_de°roy_ªad_°ru˘
(&
≤g_±r
, 
NULL
, NULL);

1347  
	`≤g_image_îr‹
(
image
, "png_image_read: out of memory");

1350  
	`≤g_image_îr‹
(
image
, "png_image_read: opaqueÖointerÇot NULL");

1351 
	}
}

1354 
≤g_uöt_32


1355 
	$≤g_image_f‹m©
(
≤g_°ru˘Ω
 
≤g_±r
)

1357 
≤g_uöt_32
 
f‹m©
 = 0;

1359 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

1360 
f‹m©
 |
PNG_FORMAT_FLAG_COLOR
;

1362 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

1363 
f‹m©
 |
PNG_FORMAT_FLAG_ALPHA
;

1370 i‡(
≤g_±r
->
num_å™s
 > 0)

1371 
f‹m©
 |
PNG_FORMAT_FLAG_ALPHA
;

1373 i‡(
≤g_±r
->
bô_dïth
 == 16)

1374 
f‹m©
 |
PNG_FORMAT_FLAG_LINEAR
;

1376 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_PALETTE
) != 0)

1377 
f‹m©
 |
PNG_FORMAT_FLAG_COLORMAP
;

1379  
f‹m©
;

1380 
	}
}

1388 
	$≤g_gamma_nŸ_sRGB
(
≤g_fixed_poöt
 
g
)

1390 i‡(
g
 < 
PNG_FP_1
)

1393 i‡(
g
 == 0)

1396  
	`≤g_gamma_signifiˇ¡
((
g
 * 11 + 2)/5 );

1400 
	}
}

1407 
	$≤g_image_ªad_hódî
(
≤g_voidp
 
¨gumít
)

1409 
≤g_imagï
 
image
 = 
	`≤g_voidˇ°
’ng_imagï, 
¨gumít
);

1410 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

1411 
≤g_öf‹p
 
öfo_±r
 = 
image
->
›aque
->info_ptr;

1413 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


1414 
	`≤g_£t_bíign_îr‹s
(
≤g_±r
, 1 );

1416 
	`≤g_ªad_öfo
(
≤g_±r
, 
öfo_±r
);

1419 
image
->
width
 = 
≤g_±r
->width;

1420 
image
->
height
 = 
≤g_±r
->height;

1423 
≤g_uöt_32
 
f‹m©
 = 
	`≤g_image_f‹m©
(
≤g_±r
);

1425 
image
->
f‹m©
 = format;

1427 #ifde‡
PNG_COLORSPACE_SUPPORTED


1433 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
Ë!0 && ((
≤g_±r
->
cﬁ‹•a˚
.
Êags


1434 & (
PNG_COLORSPACE_HAVE_ENDPOINTS
|
PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB
|

1435 
PNG_COLORSPACE_INVALID
)Ë=
PNG_COLORSPACE_HAVE_ENDPOINTS
))

1436 
image
->
Êags
 |
PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB
;

1444 
≤g_uöt_32
 
cm≠_íåõs
;

1446 
≤g_±r
->
cﬁ‹_ty≥
)

1448 
PNG_COLOR_TYPE_GRAY
:

1449 
cm≠_íåõs
 = 1U << 
≤g_±r
->
bô_dïth
;

1452 
PNG_COLOR_TYPE_PALETTE
:

1453 
cm≠_íåõs
 = (
≤g_uöt_32
)
≤g_±r
->
num_∑Àâe
;

1457 
cm≠_íåõs
 = 256;

1461 i‡(
cm≠_íåõs
 > 256)

1462 
cm≠_íåõs
 = 256;

1464 
image
->
cﬁ‹m≠_íåõs
 = 
cm≠_íåõs
;

1468 
	}
}

1470 #ifde‡
PNG_STDIO_SUPPORTED


1471 
PNGAPI


1472 
	$≤g_image_begö_ªad_‰om_°dio
(
≤g_imagï
 
image
, 
FILE
* 
fûe
)

1474 i‡(
image
 !
NULL
 && image->
vîsi⁄
 =
PNG_IMAGE_VERSION
)

1476 i‡(
fûe
 !
NULL
)

1478 i‡(
	`≤g_image_ªad_öô
(
image
) != 0)

1484 
image
->
›aque
->
≤g_±r
->
io_±r
 = 
fûe
;

1485  
	`≤g_ß„_execuã
(
image
, 
≤g_image_ªad_hódî
, image);

1490  
	`≤g_image_îr‹
(
image
,

1494 i‡(
image
 !
NULL
)

1495  
	`≤g_image_îr‹
(
image
,

1499 
	}
}

1501 
PNGAPI


1502 
	$≤g_image_begö_ªad_‰om_fûe
(
≤g_imagï
 
image
, c⁄° *
fûe_«me
)

1504 i‡(
image
 !
NULL
 && image->
vîsi⁄
 =
PNG_IMAGE_VERSION
)

1506 i‡(
fûe_«me
 !
NULL
)

1508 
FILE
 *
Â
 = 
	`f›í
(
fûe_«me
, "rb");

1510 i‡(
Â
 !
NULL
)

1512 i‡(
	`≤g_image_ªad_öô
(
image
) != 0)

1514 
image
->
›aque
->
≤g_±r
->
io_±r
 = 
Â
;

1515 
image
->
›aque
->
ow√d_fûe
 = 1;

1516  
	`≤g_ß„_execuã
(
image
, 
≤g_image_ªad_hódî
, image);

1520 ()
	`f˛o£
(
Â
);

1524  
	`≤g_image_îr‹
(
image
, 
	`°ªº‹
(
î∫o
));

1528  
	`≤g_image_îr‹
(
image
,

1532 i‡(
image
 !
NULL
)

1533  
	`≤g_image_îr‹
(
image
,

1537 
	}
}

1540 
PNGCBAPI


1541 
	$≤g_image_mem‹y_ªad
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
out
, 
size_t
 
√ed
)

1543 i‡(
≤g_±r
 !
NULL
)

1545 
≤g_imagï
 
image
 = 
	`≤g_voidˇ°
’ng_imagï, 
≤g_±r
->
io_±r
);

1546 i‡(
image
 !
NULL
)

1548 
≤g_c⁄åﬁp
 
˝
 = 
image
->
›aque
;

1549 i‡(
˝
 !
NULL
)

1551 
≤g_c⁄°_byãp
 
mem‹y
 = 
˝
->memory;

1552 
size_t
 
size
 = 
˝
->size;

1554 i‡(
mem‹y
 !
NULL
 && 
size
 >
√ed
)

1556 
	`mem˝y
(
out
, 
mem‹y
, 
√ed
);

1557 
˝
->
mem‹y
 = mem‹y + 
√ed
;

1558 
˝
->
size
 = sizê- 
√ed
;

1562 
	`≤g_îr‹
(
≤g_±r
, "read beyondÉnd of data");

1566 
	`≤g_îr‹
(
≤g_±r
, "invalid memoryÑead");

1568 
	}
}

1570 
PNGAPI
 
	$≤g_image_begö_ªad_‰om_mem‹y
(
≤g_imagï
 
image
,

1571 
≤g_c⁄°_voidp
 
mem‹y
, 
size_t
 
size
)

1573 i‡(
image
 !
NULL
 && image->
vîsi⁄
 =
PNG_IMAGE_VERSION
)

1575 i‡(
mem‹y
 !
NULL
 && 
size
 > 0)

1577 i‡(
	`≤g_image_ªad_öô
(
image
) != 0)

1583 
image
->
›aque
->
mem‹y
 = 
	`≤g_voidˇ°
(
≤g_c⁄°_byãp
, memory);

1584 
image
->
›aque
->
size
 = size;

1585 
image
->
›aque
->
≤g_±r
->
io_±r
 = image;

1586 
image
->
›aque
->
≤g_±r
->
ªad_d©a_‚
 = 
≤g_image_mem‹y_ªad
;

1588  
	`≤g_ß„_execuã
(
image
, 
≤g_image_ªad_hódî
, image);

1593  
	`≤g_image_îr‹
(
image
,

1597 i‡(
image
 !
NULL
)

1598  
	`≤g_image_îr‹
(
image
,

1602 
	}
}

1607 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1609 
	$≤g_image_skù_unu£d_chunks
(
≤g_°ru˘Ω
 
≤g_±r
)

1630 c⁄° 
≤g_byã
 
chunks_to_¥o˚ss
[] = {

1634 #ifde‡
PNG_READ_iCCP_SUPPORTED


1644 
	`≤g_£t_kìp_unknown_chunks
(
≤g_±r
, 
PNG_HANDLE_CHUNK_NEVER
,

1645 
NULL
, -1);

1648 
	`≤g_£t_kìp_unknown_chunks
(
≤g_±r
, 
PNG_HANDLE_CHUNK_AS_DEFAULT
,

1649 
chunks_to_¥o˚ss
, () ( chunks_to_process)/5);

1651 
	}
}

1653 
	#PNG_SKIP_CHUNKS
(
p
Ë
	`≤g_image_skù_unu£d_chunks
’)

	)

1655 
	#PNG_SKIP_CHUNKS
(
p
Ë(()0)

	)

1662 
	#PNG_DIV51
(
v8
Ë(((v8Ë* 5 + 130Ë>> 8)

	)

1666 
	$£t_fûe_ícodög
(
≤g_image_ªad_c⁄åﬁ
 *
di•œy
)

1668 
≤g_fixed_poöt
 
g
 = 
di•œy
->
image
->
›aque
->
≤g_±r
->
cﬁ‹•a˚
.
gamma
;

1669 i‡(
	`≤g_gamma_signifiˇ¡
(
g
) != 0)

1671 i‡(
	`≤g_gamma_nŸ_sRGB
(
g
) != 0)

1673 
di•œy
->
fûe_ícodög
 = 
P_FILE
;

1674 
di•œy
->
gamma_to_löór
 = 
	`≤g_ªcùroˇl
(
g
);

1678 
di•œy
->
fûe_ícodög
 = 
P_sRGB
;

1682 
di•œy
->
fûe_ícodög
 = 
P_LINEAR8
;

1683 
	}
}

1686 
	$decode_gamma
(
≤g_image_ªad_c⁄åﬁ
 *
di•œy
, 
≤g_uöt_32
 
vÆue
, 
ícodög
)

1688 i‡(
ícodög
 =
P_FILE
)

1689 
ícodög
 = 
di•œy
->
fûe_ícodög
;

1691 i‡(
ícodög
 =
P_NOTSET
)

1693 
	`£t_fûe_ícodög
(
di•œy
);

1694 
ícodög
 = 
di•œy
->
fûe_ícodög
;

1697 
ícodög
)

1699 
P_FILE
:

1700 
vÆue
 = 
	`≤g_gamma_16bô_c‹ª˘
(vÆue*257, 
di•œy
->
gamma_to_löór
);

1703 
P_sRGB
:

1704 
vÆue
 = 
≤g_sRGB_èbÀ
[value];

1707 
P_LINEAR
:

1710 
P_LINEAR8
:

1711 
vÆue
 *= 257;

1714 #ifde‡
__GNUC__


1716 
	`≤g_îr‹
(
di•œy
->
image
->
›aque
->
≤g_±r
,

1721  
vÆue
;

1722 
	}
}

1724 
≤g_uöt_32


1725 
	$≤g_cﬁ‹m≠_compo£
(
≤g_image_ªad_c⁄åﬁ
 *
di•œy
,

1726 
≤g_uöt_32
 
f‹eground
, 
f‹eground_ícodög
,Öng_uöt_32 
Æpha
,

1727 
≤g_uöt_32
 
background
, 
ícodög
)

1734 
≤g_uöt_32
 
f
 = 
	`decode_gamma
(
di•œy
, 
f‹eground
, 
f‹eground_ícodög
);

1735 
≤g_uöt_32
 
b
 = 
	`decode_gamma
(
di•œy
, 
background
, 
ícodög
);

1740 
f
 = f * 
Æpha
 + 
b
 * (255-alpha);

1742 i‡(
ícodög
 =
P_LINEAR
)

1747 
f
 *= 257;

1748 
f
 += f >> 16;

1749 
f
 = (f+32768) >> 16;

1753 
f
 = 
	`PNG_sRGB_FROM_LINEAR
(f);

1755  
f
;

1756 
	}
}

1762 
	$≤g_¸óã_cﬁ‹m≠_íåy
(
≤g_image_ªad_c⁄åﬁ
 *
di•œy
,

1763 
≤g_uöt_32
 
ù
,Öng_uöt_32 
ªd
,Öng_uöt_32 
gªí
,Öng_uöt_32 
blue
,

1764 
≤g_uöt_32
 
Æpha
, 
ícodög
)

1766 
≤g_imagï
 
image
 = 
di•œy
->image;

1767 
ouçut_ícodög
 = (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) != 0 ?

1768 
P_LINEAR
 : 
P_sRGB
;

1769 
c⁄vît_to_Y
 = (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) == 0 &&

1770 (
ªd
 !
gªí
 || gªí !
blue
);

1772 i‡(
ù
 > 255)

1773 
	`≤g_îr‹
(
image
->
›aque
->
≤g_±r
, "color-map index out ofÑange");

1778 i‡(
ícodög
 =
P_FILE
)

1780 i‡(
di•œy
->
fûe_ícodög
 =
P_NOTSET
)

1781 
	`£t_fûe_ícodög
(
di•œy
);

1786 
ícodög
 = 
di•œy
->
fûe_ícodög
;

1789 i‡(
ícodög
 =
P_FILE
)

1791 
≤g_fixed_poöt
 
g
 = 
di•œy
->
gamma_to_löór
;

1793 
ªd
 = 
	`≤g_gamma_16bô_c‹ª˘
‘ed*257, 
g
);

1794 
gªí
 = 
	`≤g_gamma_16bô_c‹ª˘
(gªí*257, 
g
);

1795 
blue
 = 
	`≤g_gamma_16bô_c‹ª˘
(blue*257, 
g
);

1797 i‡(
c⁄vît_to_Y
 !0 || 
ouçut_ícodög
 =
P_LINEAR
)

1799 
Æpha
 *= 257;

1800 
ícodög
 = 
P_LINEAR
;

1805 
ªd
 = 
	`PNG_sRGB_FROM_LINEAR
(red * 255);

1806 
gªí
 = 
	`PNG_sRGB_FROM_LINEAR
(green * 255);

1807 
blue
 = 
	`PNG_sRGB_FROM_LINEAR
(blue * 255);

1808 
ícodög
 = 
P_sRGB
;

1812 i‡(
ícodög
 =
P_LINEAR8
)

1817 
ªd
 *= 257;

1818 
gªí
 *= 257;

1819 
blue
 *= 257;

1820 
Æpha
 *= 257;

1821 
ícodög
 = 
P_LINEAR
;

1824 i‡(
ícodög
 =
P_sRGB
 &&

1825 (
c⁄vît_to_Y
 !0 || 
ouçut_ícodög
 =
P_LINEAR
))

1830 
ªd
 = 
≤g_sRGB_èbÀ
[red];

1831 
gªí
 = 
≤g_sRGB_èbÀ
[green];

1832 
blue
 = 
≤g_sRGB_èbÀ
[blue];

1833 
Æpha
 *= 257;

1834 
ícodög
 = 
P_LINEAR
;

1838 i‡(
ícodög
 =
P_LINEAR
)

1840 i‡(
c⁄vît_to_Y
 != 0)

1843 
≤g_uöt_32
 
y
 = (≤g_uöt_32)6968 * 
ªd
 + (≤g_uöt_32)23434 * 
gªí
 +

1844 (
≤g_uöt_32
)2366 * 
blue
;

1846 i‡(
ouçut_ícodög
 =
P_LINEAR
)

1847 
y
 = (y + 16384) >> 15;

1852 
y
 = (y + 128) >> 8;

1853 
y
 *= 255;

1854 
y
 = 
	`PNG_sRGB_FROM_LINEAR
((y + 64) >> 7);

1855 
Æpha
 = 
	`PNG_DIV257
(alpha);

1856 
ícodög
 = 
P_sRGB
;

1859 
blue
 = 
ªd
 = 
gªí
 = 
y
;

1862 i‡(
ouçut_ícodög
 =
P_sRGB
)

1864 
ªd
 = 
	`PNG_sRGB_FROM_LINEAR
(red * 255);

1865 
gªí
 = 
	`PNG_sRGB_FROM_LINEAR
(green * 255);

1866 
blue
 = 
	`PNG_sRGB_FROM_LINEAR
(blue * 255);

1867 
Æpha
 = 
	`PNG_DIV257
(alpha);

1868 
ícodög
 = 
P_sRGB
;

1872 i‡(
ícodög
 !
ouçut_ícodög
)

1873 
	`≤g_îr‹
(
image
->
›aque
->
≤g_±r
, "badÉncoding (internalÉrror)");

1877 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


1878 
afú°
 = (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0 &&

1879 (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0;

1881 
	#afú°
 0

	)

1883 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


1884 
bgr
 = (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_BGR
) != 0 ? 2 : 0;

1886 
	#bgr
 0

	)

1889 i‡(
ouçut_ícodög
 =
P_LINEAR
)

1891 
≤g_uöt_16p
 
íåy
 = 
	`≤g_voidˇ°
’ng_uöt_16p, 
di•œy
->
cﬁ‹m≠
);

1893 
íåy
 +
ù
 * 
	`PNG_IMAGE_SAMPLE_CHANNELS
(
image
->
f‹m©
);

1899 
	`PNG_IMAGE_SAMPLE_CHANNELS
(
image
->
f‹m©
))

1902 
íåy
[
afú°
 ? 0 : 3] = (
≤g_uöt_16
)
Æpha
;

1906 i‡(
Æpha
 < 65535)

1908 i‡(
Æpha
 > 0)

1910 
blue
 = (bluê* 
Æpha
 + 32767U)/65535U;

1911 
gªí
 = (gªí * 
Æpha
 + 32767U)/65535U;

1912 
ªd
 = (ªd * 
Æpha
 + 32767U)/65535U;

1916 
ªd
 = 
gªí
 = 
blue
 = 0;

1918 
íåy
[
afú°
 + (2 ^ 
bgr
)] = (
≤g_uöt_16
)
blue
;

1919 
íåy
[
afú°
 + 1] = (
≤g_uöt_16
)
gªí
;

1920 
íåy
[
afú°
 + 
bgr
] = (
≤g_uöt_16
)
ªd
;

1924 
íåy
[1 ^ 
afú°
] = (
≤g_uöt_16
)
Æpha
;

1928 i‡(
Æpha
 < 65535)

1930 i‡(
Æpha
 > 0)

1931 
gªí
 = (gªí * 
Æpha
 + 32767U)/65535U;

1934 
gªí
 = 0;

1936 
íåy
[
afú°
] = (
≤g_uöt_16
)
gªí
;

1946 
≤g_byãp
 
íåy
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->
cﬁ‹m≠
);

1948 
íåy
 +
ù
 * 
	`PNG_IMAGE_SAMPLE_CHANNELS
(
image
->
f‹m©
);

1950 
	`PNG_IMAGE_SAMPLE_CHANNELS
(
image
->
f‹m©
))

1953 
íåy
[
afú°
 ? 0 : 3] = (
≤g_byã
)
Æpha
;

1956 
íåy
[
afú°
 + (2 ^ 
bgr
)] = (
≤g_byã
)
blue
;

1957 
íåy
[
afú°
 + 1] = (
≤g_byã
)
gªí
;

1958 
íåy
[
afú°
 + 
bgr
] = (
≤g_byã
)
ªd
;

1962 
íåy
[1 ^ 
afú°
] = (
≤g_byã
)
Æpha
;

1965 
íåy
[
afú°
] = (
≤g_byã
)
gªí
;

1973 #ifde‡
afú°


1974 #unde‡
afú°


1976 #ifde‡
bgr


1977 #unde‡
bgr


1980 
	}
}

1983 
	$make_gøy_fûe_cﬁ‹m≠
(
≤g_image_ªad_c⁄åﬁ
 *
di•œy
)

1985 
i
;

1987 
i
=0; i<256; ++i)

1988 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
, i, i, i, 255, 
P_FILE
);

1990  ()
i
;

1991 
	}
}

1994 
	$make_gøy_cﬁ‹m≠
(
≤g_image_ªad_c⁄åﬁ
 *
di•œy
)

1996 
i
;

1998 
i
=0; i<256; ++i)

1999 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
, i, i, i, 255, 
P_sRGB
);

2001  ()
i
;

2002 
	}
}

2003 
	#PNG_GRAY_COLORMAP_ENTRIES
 256

	)

2006 
	$make_ga_cﬁ‹m≠
(
≤g_image_ªad_c⁄åﬁ
 *
di•œy
)

2008 
i
, 
a
;

2034 
i
 = 0;

2035 
i
 < 231)

2037 
gøy
 = (
i
 * 256 + 115) / 231;

2038 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
++, 
gøy
, gøy, gøy, 255, 
P_sRGB
);

2044 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
++, 255, 255, 255, 0, 
P_sRGB
);

2046 
a
=1;á<5; ++a)

2048 
g
;

2050 
g
=0; g<6; ++g)

2051 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
++, 
g
*51, g*51, g*51, 
a
*51,

2052 
P_sRGB
);

2055  ()
i
;

2056 
	}
}

2058 
	#PNG_GA_COLORMAP_ENTRIES
 256

	)

2061 
	$make_rgb_cﬁ‹m≠
(
≤g_image_ªad_c⁄åﬁ
 *
di•œy
)

2063 
i
, 
r
;

2066 
i
=
r
=0;Ñ<6; ++r)

2068 
g
;

2070 
g
=0; g<6; ++g)

2072 
b
;

2074 
b
=0; b<6; ++b)

2075 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
++, 
r
*51, 
g
*51, 
b
*51, 255,

2076 
P_sRGB
);

2080  ()
i
;

2081 
	}
}

2083 
	#PNG_RGB_COLORMAP_ENTRIES
 216

	)

2086 
	#PNG_RGB_INDEX
(
r
,
g
,
b
) \

2087 ((
≤g_byã
)(6 * (6 * 
	`PNG_DIV51
(
r
Ë+ PNG_DIV51(
g
)Ë+ PNG_DIV51(
b
)))

	)

2090 
	$≤g_image_ªad_cﬁ‹m≠
(
≤g_voidp
 
¨gumít
)

2092 
≤g_image_ªad_c⁄åﬁ
 *
di•œy
 =

2093 
	`≤g_voidˇ°
(
≤g_image_ªad_c⁄åﬁ
*, 
¨gumít
);

2094 
≤g_imagï
 
image
 = 
di•œy
->image;

2096 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

2097 
≤g_uöt_32
 
ouçut_f‹m©
 = 
image
->
f‹m©
;

2098 
ouçut_ícodög
 = (
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) != 0 ?

2099 
P_LINEAR
 : 
P_sRGB
;

2101 
cm≠_íåõs
;

2102 
ouçut_¥o˚ssög
;

2103 
d©a_ícodög
 = 
P_NOTSET
;

2108 
background_ödex
 = 256;

2109 
≤g_uöt_32
 
back_r
, 
back_g
, 
back_b
;

2112 
ex∑nd_tRNS
 = 0;

2119 i‡(((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0 ||

2120 
≤g_±r
->
num_å™s
 > 0) &&

2121 ((
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) == 0) )

2123 i‡(
ouçut_ícodög
 =
P_LINEAR
)

2124 
back_b
 = 
back_g
 = 
back_r
 = 0;

2126 i‡(
di•œy
->
background
 =
NULL
 )

2127 
	`≤g_îr‹
(
≤g_±r
,

2136 
back_g
 = 
di•œy
->
background
->
gªí
;

2137 i‡((
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) != 0)

2139 
back_r
 = 
di•œy
->
background
->
ªd
;

2140 
back_b
 = 
di•œy
->
background
->
blue
;

2143 
back_b
 = 
back_r
 = 
back_g
;

2147 i‡(
ouçut_ícodög
 =
P_LINEAR
)

2148 
back_b
 = 
back_r
 = 
back_g
 = 65535;

2151 
back_b
 = 
back_r
 = 
back_g
 = 255;

2158 i‡((
≤g_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_GAMMA
) == 0)

2165 i‡(
≤g_±r
->
bô_dïth
 == 16 &&

2166 (
image
->
Êags
 & 
PNG_IMAGE_FLAG_16BIT_sRGB
) == 0)

2167 
≤g_±r
->
cﬁ‹•a˚
.
gamma
 = 
PNG_GAMMA_LINEAR
;

2170 
≤g_±r
->
cﬁ‹•a˚
.
gamma
 = 
PNG_GAMMA_sRGB_INVERSE
;

2172 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_HAVE_GAMMA
;

2180 
≤g_±r
->
cﬁ‹_ty≥
)

2182 
PNG_COLOR_TYPE_GRAY
:

2183 i‡(
≤g_±r
->
bô_dïth
 <= 8)

2188 
°ï
, 
i
, 
vÆ
, 
å™s
 = 256 , 
back_Æpha
 = 0;

2190 
cm≠_íåõs
 = 1U << 
≤g_±r
->
bô_dïth
;

2191 i‡(
cm≠_íåõs
 > 
image
->
cﬁ‹m≠_íåõs
)

2192 
	`≤g_îr‹
(
≤g_±r
, "gray[8] color-map:Åoo fewÉntries");

2194 
°ï
 = 255 / (
cm≠_íåõs
 - 1);

2195 
ouçut_¥o˚ssög
 = 
PNG_CMAP_NONE
;

2200 i‡(
≤g_±r
->
num_å™s
 > 0)

2202 
å™s
 = 
≤g_±r
->
å™s_cﬁ‹
.
gøy
;

2204 i‡((
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) == 0)

2205 
back_Æpha
 = 
ouçut_ícodög
 =
P_LINEAR
 ? 65535 : 255;

2215 
i
=
vÆ
=0; i<
cm≠_íåõs
; ++i, vÆ +
°ï
)

2221 i‡(
i
 !
å™s
)

2222 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
, 
vÆ
, val, val, 255,

2223 
P_FILE
 );

2234 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
, 
back_r
, 
back_g
, 
back_b
,

2235 
back_Æpha
, 
ouçut_ícodög
);

2239 
d©a_ícodög
 = 
P_FILE
;

2246 i‡(
≤g_±r
->
bô_dïth
 < 8)

2247 
	`≤g_£t_∑ckög
(
≤g_±r
);

2268 
d©a_ícodög
 = 
P_sRGB
;

2270 i‡(
PNG_GRAY_COLORMAP_ENTRIES
 > 
image
->
cﬁ‹m≠_íåõs
)

2271 
	`≤g_îr‹
(
≤g_±r
, "gray[16] color-map:Åoo fewÉntries");

2273 
cm≠_íåõs
 = ()
	`make_gøy_cﬁ‹m≠
(
di•œy
);

2275 i‡(
≤g_±r
->
num_å™s
 > 0)

2277 
back_Æpha
;

2279 i‡((
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

2280 
back_Æpha
 = 0;

2284 i‡(
back_r
 =
back_g
 && back_g =
back_b
)

2289 
≤g_cﬁ‹_16
 
c
;

2290 
≤g_uöt_32
 
gøy
 = 
back_g
;

2292 i‡(
ouçut_ícodög
 =
P_LINEAR
)

2294 
gøy
 = 
	`PNG_sRGB_FROM_LINEAR
(gray * 255);

2299 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
gøy
, 
back_g
, back_g,

2300 
back_g
, 65535, 
P_LINEAR
);

2306 
c
.
ödex
 = 0;

2307 
c
.
gøy
 = c.
ªd
 = c.
gªí
 = c.
blue
 = (
≤g_uöt_16
)gray;

2313 
	`≤g_£t_background_fixed
(
≤g_±r
, &
c
,

2314 
PNG_BACKGROUND_GAMMA_SCREEN
, 0 ,

2317 
ouçut_¥o˚ssög
 = 
PNG_CMAP_NONE
;

2320 #ifde‡
__COVERITY__


2324 
back_Æpha
 = 255;

2326 
back_Æpha
 = 
ouçut_ícodög
 =
P_LINEAR
 ? 65535 : 255;

2337 
ex∑nd_tRNS
 = 1;

2338 
ouçut_¥o˚ssög
 = 
PNG_CMAP_TRANS
;

2339 
background_ödex
 = 254;

2344 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 254, 
back_r
, 
back_g
, 
back_b
,

2345 
back_Æpha
, 
ouçut_ícodög
);

2349 
ouçut_¥o˚ssög
 = 
PNG_CMAP_NONE
;

2353 
PNG_COLOR_TYPE_GRAY_ALPHA
:

2364 
d©a_ícodög
 = 
P_sRGB
;

2366 i‡((
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

2368 i‡(
PNG_GA_COLORMAP_ENTRIES
 > 
image
->
cﬁ‹m≠_íåõs
)

2369 
	`≤g_îr‹
(
≤g_±r
, "gray+alpha color-map:Åoo fewÉntries");

2371 
cm≠_íåõs
 = ()
	`make_ga_cﬁ‹m≠
(
di•œy
);

2373 
background_ödex
 = 
PNG_CMAP_GA_BACKGROUND
;

2374 
ouçut_¥o˚ssög
 = 
PNG_CMAP_GA
;

2395 i‡((
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) == 0 ||

2396 (
back_r
 =
back_g
 && back_g =
back_b
))

2399 
≤g_cﬁ‹_16
 
c
;

2400 
≤g_uöt_32
 
gøy
 = 
back_g
;

2402 i‡(
PNG_GRAY_COLORMAP_ENTRIES
 > 
image
->
cﬁ‹m≠_íåõs
)

2403 
	`≤g_îr‹
(
≤g_±r
, "gray-alpha color-map:Åoo fewÉntries");

2405 
cm≠_íåõs
 = ()
	`make_gøy_cﬁ‹m≠
(
di•œy
);

2407 i‡(
ouçut_ícodög
 =
P_LINEAR
)

2409 
gøy
 = 
	`PNG_sRGB_FROM_LINEAR
(gray * 255);

2412 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
gøy
, 
back_g
, back_g,

2413 
back_g
, 65535, 
P_LINEAR
);

2419 
c
.
ödex
 = 0;

2420 
c
.
gøy
 = c.
ªd
 = c.
gªí
 = c.
blue
 = (
≤g_uöt_16
)gray;

2422 
	`≤g_£t_background_fixed
(
≤g_±r
, &
c
,

2423 
PNG_BACKGROUND_GAMMA_SCREEN
, 0 ,

2426 
ouçut_¥o˚ssög
 = 
PNG_CMAP_NONE
;

2431 
≤g_uöt_32
 
i
, 
a
;

2436 i‡(
PNG_GA_COLORMAP_ENTRIES
 > 
image
->
cﬁ‹m≠_íåõs
)

2437 
	`≤g_îr‹
(
≤g_±r
, "ga-alpha color-map:Åoo fewÉntries");

2439 
i
 = 0;

2440 
i
 < 231)

2442 
≤g_uöt_32
 
gøy
 = (
i
 * 256 + 115) / 231;

2443 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
++, 
gøy
, gray, gray,

2444 255, 
P_sRGB
);

2450 
background_ödex
 = 
i
;

2451 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
++, 
back_r
, 
back_g
, 
back_b
,

2452 #ifde‡
__COVERITY__


2457 
ouçut_ícodög
 =
P_LINEAR
 ? 65535U : 255U,

2459 
ouçut_ícodög
);

2469 i‡(
ouçut_ícodög
 =
P_sRGB
)

2475 
back_r
 = 
≤g_sRGB_èbÀ
[back_r];

2476 
back_g
 = 
≤g_sRGB_èbÀ
[back_g];

2477 
back_b
 = 
≤g_sRGB_èbÀ
[back_b];

2480 
a
=1;á<5; ++a)

2482 
g
;

2487 
≤g_uöt_32
 
Æpha
 = 51 * 
a
;

2488 
≤g_uöt_32
 
back_rx
 = (255-
Æpha
Ë* 
back_r
;

2489 
≤g_uöt_32
 
back_gx
 = (255-
Æpha
Ë* 
back_g
;

2490 
≤g_uöt_32
 
back_bx
 = (255-
Æpha
Ë* 
back_b
;

2492 
g
=0; g<6; ++g)

2494 
≤g_uöt_32
 
gøy
 = 
≤g_sRGB_èbÀ
[
g
*51] * 
Æpha
;

2496 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
++,

2497 
	`PNG_sRGB_FROM_LINEAR
(
gøy
 + 
back_rx
),

2498 
	`PNG_sRGB_FROM_LINEAR
(
gøy
 + 
back_gx
),

2499 
	`PNG_sRGB_FROM_LINEAR
(
gøy
 + 
back_bx
), 255, 
P_sRGB
);

2503 
cm≠_íåõs
 = 
i
;

2504 
ouçut_¥o˚ssög
 = 
PNG_CMAP_GA
;

2509 
PNG_COLOR_TYPE_RGB
:

2510 
PNG_COLOR_TYPE_RGB_ALPHA
:

2514 i‡((
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) == 0)

2524 
	`≤g_£t_rgb_to_gøy_fixed
(
≤g_±r
, 
PNG_ERROR_ACTION_NONE
, -1,

2526 
d©a_ícodög
 = 
P_sRGB
;

2531 i‡((
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
 ||

2532 
≤g_±r
->
num_å™s
 > 0) &&

2533 (
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

2539 
ex∑nd_tRNS
 = 1;

2541 i‡(
PNG_GA_COLORMAP_ENTRIES
 > 
image
->
cﬁ‹m≠_íåõs
)

2542 
	`≤g_îr‹
(
≤g_±r
, "rgb[ga] color-map:Åoo fewÉntries");

2544 
cm≠_íåõs
 = ()
	`make_ga_cﬁ‹m≠
(
di•œy
);

2545 
background_ödex
 = 
PNG_CMAP_GA_BACKGROUND
;

2546 
ouçut_¥o˚ssög
 = 
PNG_CMAP_GA
;

2555 i‡(
PNG_GRAY_COLORMAP_ENTRIES
 > 
image
->
cﬁ‹m≠_íåõs
)

2556 
	`≤g_îr‹
(
≤g_±r
, "rgb[gray] color-map:Åoo fewÉntries");

2566 i‡((
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
 ||

2567 
≤g_±r
->
num_å™s
 > 0) &&

2568 
	`≤g_gamma_nŸ_sRGB
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
) != 0)

2570 
cm≠_íåõs
 = ()
	`make_gøy_fûe_cﬁ‹m≠
(
di•œy
);

2571 
d©a_ícodög
 = 
P_FILE
;

2575 
cm≠_íåõs
 = ()
	`make_gøy_cﬁ‹m≠
(
di•œy
);

2579 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
 ||

2580 
≤g_±r
->
num_å™s
 > 0)

2582 
≤g_cﬁ‹_16
 
c
;

2583 
≤g_uöt_32
 
gøy
 = 
back_g
;

2590 i‡(
d©a_ícodög
 =
P_FILE
)

2597 i‡(
ouçut_ícodög
 =
P_sRGB
)

2598 
gøy
 = 
≤g_sRGB_èbÀ
[gray];

2600 
gøy
 = 
	`PNG_DIV257
(
	`≤g_gamma_16bô_c‹ª˘
(gray,

2601 
≤g_±r
->
cﬁ‹•a˚
.
gamma
));

2606 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
gøy
, 
back_g
, back_g,

2607 
back_g
, 0 , 
ouçut_ícodög
);

2610 i‡(
ouçut_ícodög
 =
P_LINEAR
)

2612 
gøy
 = 
	`PNG_sRGB_FROM_LINEAR
(gray * 255);

2616 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
gøy
, 
back_g
, back_g,

2617 
back_g
, 0 , 
P_LINEAR
);

2623 
c
.
ödex
 = 0;

2624 
c
.
gøy
 = c.
ªd
 = c.
gªí
 = c.
blue
 = (
≤g_uöt_16
)gray;

2630 
ex∑nd_tRNS
 = 1;

2631 
	`≤g_£t_background_fixed
(
≤g_±r
, &
c
,

2632 
PNG_BACKGROUND_GAMMA_SCREEN
, 0 ,

2636 
ouçut_¥o˚ssög
 = 
PNG_CMAP_NONE
;

2647 
d©a_ícodög
 = 
P_sRGB
;

2650 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
 ||

2651 
≤g_±r
->
num_å™s
 > 0)

2656 i‡((
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

2658 
≤g_uöt_32
 
r
;

2660 i‡(
PNG_RGB_COLORMAP_ENTRIES
+1+27 > 
image
->
cﬁ‹m≠_íåõs
)

2661 
	`≤g_îr‹
(
≤g_±r
, "rgb+alpha color-map:Åoo fewÉntries");

2663 
cm≠_íåõs
 = ()
	`make_rgb_cﬁ‹m≠
(
di•œy
);

2666 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
cm≠_íåõs
, 255, 255,

2667 255, 0, 
P_sRGB
);

2672 
background_ödex
 = 
cm≠_íåõs
++;

2675 
r
=0;Ñ<256;Ñ = (r << 1) | 0x7f)

2677 
≤g_uöt_32
 
g
;

2679 
g
=0; g<256; g = (g << 1) | 0x7f)

2681 
≤g_uöt_32
 
b
;

2686 
b
=0; b<256; b = (b << 1) | 0x7f)

2687 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
cm≠_íåõs
++,

2688 
r
, 
g
, 
b
, 128, 
P_sRGB
);

2692 
ex∑nd_tRNS
 = 1;

2693 
ouçut_¥o˚ssög
 = 
PNG_CMAP_RGB_ALPHA
;

2705 
ßm∂e_size
 =

2706 
	`PNG_IMAGE_SAMPLE_SIZE
(
ouçut_f‹m©
);

2707 
≤g_uöt_32
 
r
, 
g
, 
b
;

2709 i‡(
PNG_RGB_COLORMAP_ENTRIES
+1+27 > 
image
->
cﬁ‹m≠_íåõs
)

2710 
	`≤g_îr‹
(
≤g_±r
, "rgb-alpha color-map:Åoo fewÉntries");

2712 
cm≠_íåõs
 = ()
	`make_rgb_cﬁ‹m≠
(
di•œy
);

2714 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
cm≠_íåõs
, 
back_r
,

2715 
back_g
, 
back_b
, 0 , 
ouçut_ícodög
);

2717 i‡(
ouçut_ícodög
 =
P_LINEAR
)

2719 
r
 = 
	`PNG_sRGB_FROM_LINEAR
(
back_r
 * 255);

2720 
g
 = 
	`PNG_sRGB_FROM_LINEAR
(
back_g
 * 255);

2721 
b
 = 
	`PNG_sRGB_FROM_LINEAR
(
back_b
 * 255);

2726 
r
 = 
back_r
;

2727 
g
 = 
back_g
;

2728 
b
 = 
back_g
;

2736 i‡(
	`memcmp
((
≤g_c⁄°_byãp
)
di•œy
->
cﬁ‹m≠
 +

2737 
ßm∂e_size
 * 
cm≠_íåõs
,

2738 (
≤g_c⁄°_byãp
)
di•œy
->
cﬁ‹m≠
 +

2739 
ßm∂e_size
 * 
	`PNG_RGB_INDEX
(
r
,
g
,
b
),

2740 
ßm∂e_size
) != 0)

2743 
background_ödex
 = 
cm≠_íåõs
++;

2748 
r
=0;Ñ<256;Ñ = (r << 1) | 0x7f)

2750 
g
=0; g<256; g = (g << 1) | 0x7f)

2755 
b
=0; b<256; b = (b << 1) | 0x7f)

2756 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
cm≠_íåõs
++,

2757 
	`≤g_cﬁ‹m≠_compo£
(
di•œy
, 
r
, 
P_sRGB
, 128,

2758 
back_r
, 
ouçut_ícodög
),

2759 
	`≤g_cﬁ‹m≠_compo£
(
di•œy
, 
g
, 
P_sRGB
, 128,

2760 
back_g
, 
ouçut_ícodög
),

2761 
	`≤g_cﬁ‹m≠_compo£
(
di•œy
, 
b
, 
P_sRGB
, 128,

2762 
back_b
, 
ouçut_ícodög
),

2763 0 , 
ouçut_ícodög
);

2767 
ex∑nd_tRNS
 = 1;

2768 
ouçut_¥o˚ssög
 = 
PNG_CMAP_RGB_ALPHA
;

2773 
≤g_cﬁ‹_16
 
c
;

2775 
c
.
ödex
 = 0;

2776 
c
.
ªd
 = (
≤g_uöt_16
)
back_r
;

2777 
c
.
gøy
 = c.
gªí
 = (
≤g_uöt_16
)
back_g
;

2778 
c
.
blue
 = (
≤g_uöt_16
)
back_b
;

2780 
	`≤g_£t_background_fixed
(
≤g_±r
, &
c
,

2781 
PNG_BACKGROUND_GAMMA_SCREEN
, 0 ,

2784 
ouçut_¥o˚ssög
 = 
PNG_CMAP_RGB
;

2794 i‡(
PNG_RGB_COLORMAP_ENTRIES
 > 
image
->
cﬁ‹m≠_íåõs
)

2795 
	`≤g_îr‹
(
≤g_±r
, "rgb color-map:Åoo fewÉntries");

2797 
cm≠_íåõs
 = ()
	`make_rgb_cﬁ‹m≠
(
di•œy
);

2798 
ouçut_¥o˚ssög
 = 
PNG_CMAP_RGB
;

2803 
PNG_COLOR_TYPE_PALETTE
:

2808 
num_å™s
 = 
≤g_±r
->num_trans;

2809 
≤g_c⁄°_byãp
 
å™s
 = 
num_å™s
 > 0 ? 
≤g_±r
->
å™s_Æpha
 : 
NULL
;

2810 
≤g_c⁄°_cﬁ‹p
 
cﬁ‹m≠
 = 
≤g_±r
->
∑Àâe
;

2811 
do_background
 = 
å™s
 !
NULL
 &&

2812 (
ouçut_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) == 0;

2813 
i
;

2816 i‡(
å™s
 =
NULL
)

2817 
num_å™s
 = 0;

2819 
ouçut_¥o˚ssög
 = 
PNG_CMAP_NONE
;

2820 
d©a_ícodög
 = 
P_FILE
;

2821 
cm≠_íåõs
 = ()
≤g_±r
->
num_∑Àâe
;

2822 i‡(
cm≠_íåõs
 > 256)

2823 
cm≠_íåõs
 = 256;

2825 i‡(
cm≠_íåõs
 > ()
image
->
cﬁ‹m≠_íåõs
)

2826 
	`≤g_îr‹
(
≤g_±r
, "palette color-map:Åoo fewÉntries");

2828 
i
=0; i < 
cm≠_íåõs
; ++i)

2830 i‡(
do_background
 !0 && 
i
 < 
num_å™s
 && 
å™s
[i] < 255)

2832 i‡(
å™s
[
i
] == 0)

2833 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
, 
back_r
, 
back_g
,

2834 
back_b
, 0, 
ouçut_ícodög
);

2841 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
,

2842 
	`≤g_cﬁ‹m≠_compo£
(
di•œy
, 
cﬁ‹m≠
[
i
].
ªd
,

2843 
P_FILE
, 
å™s
[
i
], 
back_r
, 
ouçut_ícodög
),

2844 
	`≤g_cﬁ‹m≠_compo£
(
di•œy
, 
cﬁ‹m≠
[
i
].
gªí
,

2845 
P_FILE
, 
å™s
[
i
], 
back_g
, 
ouçut_ícodög
),

2846 
	`≤g_cﬁ‹m≠_compo£
(
di•œy
, 
cﬁ‹m≠
[
i
].
blue
,

2847 
P_FILE
, 
å™s
[
i
], 
back_b
, 
ouçut_ícodög
),

2848 
ouçut_ícodög
 =
P_LINEAR
 ? 
å™s
[
i
] * 257U :

2849 
å™s
[
i
],

2850 
ouçut_ícodög
);

2855 
	`≤g_¸óã_cﬁ‹m≠_íåy
(
di•œy
, 
i
, 
cﬁ‹m≠
[i].
ªd
,

2856 
cﬁ‹m≠
[
i
].
gªí
, cﬁ‹m≠[i].
blue
,

2857 
i
 < 
num_å™s
 ? 
å™s
[i] : 255U, 
P_FILE
 );

2863 i‡(
≤g_±r
->
bô_dïth
 < 8)

2864 
	`≤g_£t_∑ckög
(
≤g_±r
);

2869 
	`≤g_îr‹
(
≤g_±r
, "invalid PNG colorÅype");

2874 i‡(
ex∑nd_tRNS
 !0 && 
≤g_±r
->
num_å™s
 > 0 &&

2875 (
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) == 0)

2876 
	`≤g_£t_tRNS_to_Æpha
(
≤g_±r
);

2878 
d©a_ícodög
)

2880 
P_sRGB
:

2882 
	`≤g_£t_Æpha_mode_fixed
(
≤g_±r
, 
PNG_ALPHA_PNG
, 
PNG_GAMMA_sRGB
);

2885 
P_FILE
:

2886 i‡(
≤g_±r
->
bô_dïth
 > 8)

2887 
	`≤g_£t_sˇÀ_16
(
≤g_±r
);

2890 #ifde‡
__GNUC__


2892 
	`≤g_îr‹
(
≤g_±r
, "bad data option (internalÉrror)");

2896 i‡(
cm≠_íåõs
 > 256 || cm≠_íåõ†> 
image
->
cﬁ‹m≠_íåõs
)

2897 
	`≤g_îr‹
(
≤g_±r
, "color map overflow (BAD internalÉrror)");

2899 
image
->
cﬁ‹m≠_íåõs
 = 
cm≠_íåõs
;

2902 
ouçut_¥o˚ssög
)

2904 
PNG_CMAP_NONE
:

2905 i‡(
background_ödex
 !
PNG_CMAP_NONE_BACKGROUND
)

2906 
bad_background
;

2909 
PNG_CMAP_GA
:

2910 i‡(
background_ödex
 !
PNG_CMAP_GA_BACKGROUND
)

2911 
bad_background
;

2914 
PNG_CMAP_TRANS
:

2915 i‡(
background_ödex
 >
cm≠_íåõs
 ||

2916 
background_ödex
 !
PNG_CMAP_TRANS_BACKGROUND
)

2917 
bad_background
;

2920 
PNG_CMAP_RGB
:

2921 i‡(
background_ödex
 !
PNG_CMAP_RGB_BACKGROUND
)

2922 
bad_background
;

2925 
PNG_CMAP_RGB_ALPHA
:

2926 i‡(
background_ödex
 !
PNG_CMAP_RGB_ALPHA_BACKGROUND
)

2927 
bad_background
;

2931 
	`≤g_îr‹
(
≤g_±r
, "badÖrocessing option (internalÉrror)");

2933 
bad_background
:

2934 
	`≤g_îr‹
(
≤g_±r
, "bad background index (internalÉrror)");

2937 
di•œy
->
cﬁ‹m≠_¥o˚ssög
 = ()
ouçut_¥o˚ssög
;

2940 
	}
}

2944 
	$≤g_image_ªad_™d_m≠
(
≤g_voidp
 
¨gumít
)

2946 
≤g_image_ªad_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_read_control*,

2947 
¨gumít
);

2948 
≤g_imagï
 
image
 = 
di•œy
->image;

2949 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

2950 
∑s£s
;

2956 
≤g_±r
->
öãæa˚d
)

2958 
PNG_INTERLACE_NONE
:

2959 
∑s£s
 = 1;

2962 
PNG_INTERLACE_ADAM7
:

2963 
∑s£s
 = 
PNG_INTERLACE_ADAM7_PASSES
;

2967 
	`≤g_îr‹
(
≤g_±r
, "unknown interlaceÅype");

2971 
≤g_uöt_32
 
height
 = 
image
->height;

2972 
≤g_uöt_32
 
width
 = 
image
->width;

2973 
¥oc
 = 
di•œy
->
cﬁ‹m≠_¥o˚ssög
;

2974 
≤g_byãp
 
fú°_row
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->first_row);

2975 
±rdiff_t
 
°ï_row
 = 
di•œy
->
row_byãs
;

2976 
∑ss
;

2978 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass)

2980 
°¨tx
, 
°ïx
, 
°ïy
;

2981 
≤g_uöt_32
 
y
;

2983 i‡(
≤g_±r
->
öãæa˚d
 =
PNG_INTERLACE_ADAM7
)

2986 i‡(
	`PNG_PASS_COLS
(
width
, 
∑ss
) == 0)

2989 
°¨tx
 = 
	`PNG_PASS_START_COL
(
∑ss
);

2990 
°ïx
 = 
	`PNG_PASS_COL_OFFSET
(
∑ss
);

2991 
y
 = 
	`PNG_PASS_START_ROW
(
∑ss
);

2992 
°ïy
 = 
	`PNG_PASS_ROW_OFFSET
(
∑ss
);

2997 
y
 = 0;

2998 
°¨tx
 = 0;

2999 
°ïx
 = 
°ïy
 = 1;

3002 ; 
y
<
height
; y +
°ïy
)

3004 
≤g_byãp
 
örow
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->
loˇl_row
);

3005 
≤g_byãp
 
ouåow
 = 
fú°_row
 + 
y
 * 
°ï_row
;

3006 
≤g_c⁄°_byãp
 
íd_row
 = 
ouåow
 + 
width
;

3009 
	`≤g_ªad_row
(
≤g_±r
, 
örow
, 
NULL
);

3015 
ouåow
 +
°¨tx
;

3016 
¥oc
)

3018 
PNG_CMAP_GA
:

3019 ; 
ouåow
 < 
íd_row
; ouåow +
°ïx
)

3022 
gøy
 = *
örow
++;

3023 
Æpha
 = *
örow
++;

3024 
íåy
;

3030 i‡(
Æpha
 > 229)

3032 
íåy
 = (231 * 
gøy
 + 128) >> 8;

3034 i‡(
Æpha
 < 26)

3036 
íåy
 = 231;

3040 
íåy
 = 226 + 6 * 
	`PNG_DIV51
(
Æpha
Ë+ PNG_DIV51(
gøy
);

3043 *
ouåow
 = (
≤g_byã
)
íåy
;

3047 
PNG_CMAP_TRANS
:

3048 ; 
ouåow
 < 
íd_row
; ouåow +
°ïx
)

3050 
≤g_byã
 
gøy
 = *
örow
++;

3051 
≤g_byã
 
Æpha
 = *
örow
++;

3053 i‡(
Æpha
 == 0)

3054 *
ouåow
 = 
PNG_CMAP_TRANS_BACKGROUND
;

3056 i‡(
gøy
 !
PNG_CMAP_TRANS_BACKGROUND
)

3057 *
ouåow
 = 
gøy
;

3060 *
ouåow
 = (
≤g_byã
)(
PNG_CMAP_TRANS_BACKGROUND
+1);

3064 
PNG_CMAP_RGB
:

3065 ; 
ouåow
 < 
íd_row
; ouåow +
°ïx
)

3067 *
ouåow
 = 
	`PNG_RGB_INDEX
(
örow
[0], inrow[1], inrow[2]);

3068 
örow
 += 3;

3072 
PNG_CMAP_RGB_ALPHA
:

3073 ; 
ouåow
 < 
íd_row
; ouåow +
°ïx
)

3075 
Æpha
 = 
örow
[3];

3082 i‡(
Æpha
 >= 196)

3083 *
ouåow
 = 
	`PNG_RGB_INDEX
(
örow
[0], inrow[1],

3084 
örow
[2]);

3086 i‡(
Æpha
 < 64)

3087 *
ouåow
 = 
PNG_CMAP_RGB_ALPHA_BACKGROUND
;

3097 
back_i
 = 
PNG_CMAP_RGB_ALPHA_BACKGROUND
+1;

3108 i‡(
örow
[0] & 0x80Ë
back_i
 += 9;

3109 i‡(
örow
[0] & 0x40Ë
back_i
 += 9;

3110 i‡(
örow
[0] & 0x80Ë
back_i
 += 3;

3111 i‡(
örow
[0] & 0x40Ë
back_i
 += 3;

3112 i‡(
örow
[0] & 0x80Ë
back_i
 += 1;

3113 i‡(
örow
[0] & 0x40Ë
back_i
 += 1;

3115 *
ouåow
 = (
≤g_byã
)
back_i
;

3118 
örow
 += 4;

3130 
	}
}

3133 
	$≤g_image_ªad_cﬁ‹m≠≥d
(
≤g_voidp
 
¨gumít
)

3135 
≤g_image_ªad_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_read_control*,

3136 
¨gumít
);

3137 
≤g_imagï
 
image
 = 
di•œy
->image;

3138 
≤g_c⁄åﬁp
 
c⁄åﬁ
 = 
image
->
›aque
;

3139 
≤g_°ru˘Ω
 
≤g_±r
 = 
c⁄åﬁ
->png_ptr;

3140 
≤g_öf‹p
 
öfo_±r
 = 
c⁄åﬁ
->info_ptr;

3142 
∑s£s
 = 0;

3144 
	`PNG_SKIP_CHUNKS
(
≤g_±r
);

3150 i‡(
di•œy
->
cﬁ‹m≠_¥o˚ssög
 =
PNG_CMAP_NONE
)

3151 
∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

3153 
	`≤g_ªad_upd©e_öfo
(
≤g_±r
, 
öfo_±r
);

3156 
di•œy
->
cﬁ‹m≠_¥o˚ssög
)

3158 
PNG_CMAP_NONE
:

3162 i‡((
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 ||

3163 
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
) &&

3164 
öfo_±r
->
bô_dïth
 == 8)

3167 
bad_ouçut
;

3169 
PNG_CMAP_TRANS
:

3170 
PNG_CMAP_GA
:

3175 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
 &&

3176 
öfo_±r
->
bô_dïth
 == 8 &&

3177 
≤g_±r
->
s¸ìn_gamma
 =
PNG_GAMMA_sRGB
 &&

3178 
image
->
cﬁ‹m≠_íåõs
 == 256)

3181 
bad_ouçut
;

3183 
PNG_CMAP_RGB
:

3185 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 &&

3186 
öfo_±r
->
bô_dïth
 == 8 &&

3187 
≤g_±r
->
s¸ìn_gamma
 =
PNG_GAMMA_sRGB
 &&

3188 
image
->
cﬁ‹m≠_íåõs
 == 216)

3191 
bad_ouçut
;

3193 
PNG_CMAP_RGB_ALPHA
:

3195 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
 &&

3196 
öfo_±r
->
bô_dïth
 == 8 &&

3197 
≤g_±r
->
s¸ìn_gamma
 =
PNG_GAMMA_sRGB
 &&

3198 
image
->
cﬁ‹m≠_íåõs
 == 244 )

3201 
bad_ouçut
;

3204 
bad_ouçut
:

3205 
	`≤g_îr‹
(
≤g_±r
, "bad color-mapÖrocessing (internalÉrror)");

3213 
≤g_voidp
 
fú°_row
 = 
di•œy
->
buf„r
;

3214 
±rdiff_t
 
row_byãs
 = 
di•œy
->
row_°ride
;

3219 i‡(
row_byãs
 < 0)

3221 *
±r
 = 
	`≤g_voidˇ°
(*, 
fú°_row
);

3222 
±r
 +(
image
->
height
-1Ë* (-
row_byãs
);

3223 
fú°_row
 = 
	`≤g_voidˇ°
(
≤g_voidp
, 
±r
);

3226 
di•œy
->
fú°_row
 = first_row;

3227 
di•œy
->
row_byãs
 =Ñow_bytes;

3230 i‡(
∑s£s
 == 0)

3232 
ªsu…
;

3233 
≤g_voidp
 
row
 = 
	`≤g_mÆloc
(
≤g_±r
, 
	`≤g_gë_rowbyãs
’ng_±r, 
öfo_±r
));

3235 
di•œy
->
loˇl_row
 = 
row
;

3236 
ªsu…
 = 
	`≤g_ß„_execuã
(
image
, 
≤g_image_ªad_™d_m≠
, 
di•œy
);

3237 
di•œy
->
loˇl_row
 = 
NULL
;

3238 
	`≤g_‰ì
(
≤g_±r
, 
row
);

3240  
ªsu…
;

3245 
≤g_Æloc_size_t
 
row_byãs
 = (≤g_Æloc_size_t)
di•œy
->row_bytes;

3247 --
∑s£s
 >= 0)

3249 
≤g_uöt_32
 
y
 = 
image
->
height
;

3250 
≤g_byãp
 
row
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->
fú°_row
);

3252 ; 
y
 > 0; --y)

3254 
	`≤g_ªad_row
(
≤g_±r
, 
row
, 
NULL
);

3255 
row
 +
row_byãs
;

3261 
	}
}

3265 
	$≤g_image_ªad_composôe
(
≤g_voidp
 
¨gumít
)

3267 
≤g_image_ªad_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_read_control*,

3268 
¨gumít
);

3269 
≤g_imagï
 
image
 = 
di•œy
->image;

3270 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

3271 
∑s£s
;

3273 
≤g_±r
->
öãæa˚d
)

3275 
PNG_INTERLACE_NONE
:

3276 
∑s£s
 = 1;

3279 
PNG_INTERLACE_ADAM7
:

3280 
∑s£s
 = 
PNG_INTERLACE_ADAM7_PASSES
;

3284 
	`≤g_îr‹
(
≤g_±r
, "unknown interlaceÅype");

3288 
≤g_uöt_32
 
height
 = 
image
->height;

3289 
≤g_uöt_32
 
width
 = 
image
->width;

3290 
±rdiff_t
 
°ï_row
 = 
di•œy
->
row_byãs
;

3291 
ch™√ls
 =

3292 (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) != 0 ? 3 : 1;

3293 
∑ss
;

3295 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass)

3297 
°¨tx
, 
°ïx
, 
°ïy
;

3298 
≤g_uöt_32
 
y
;

3300 i‡(
≤g_±r
->
öãæa˚d
 =
PNG_INTERLACE_ADAM7
)

3303 i‡(
	`PNG_PASS_COLS
(
width
, 
∑ss
) == 0)

3306 
°¨tx
 = 
	`PNG_PASS_START_COL
(
∑ss
Ë* 
ch™√ls
;

3307 
°ïx
 = 
	`PNG_PASS_COL_OFFSET
(
∑ss
Ë* 
ch™√ls
;

3308 
y
 = 
	`PNG_PASS_START_ROW
(
∑ss
);

3309 
°ïy
 = 
	`PNG_PASS_ROW_OFFSET
(
∑ss
);

3314 
y
 = 0;

3315 
°¨tx
 = 0;

3316 
°ïx
 = 
ch™√ls
;

3317 
°ïy
 = 1;

3320 ; 
y
<
height
; y +
°ïy
)

3322 
≤g_byãp
 
örow
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->
loˇl_row
);

3323 
≤g_byãp
 
ouåow
;

3324 
≤g_c⁄°_byãp
 
íd_row
;

3327 
	`≤g_ªad_row
(
≤g_±r
, 
örow
, 
NULL
);

3329 
ouåow
 = 
	`≤g_voidˇ°
(
≤g_byãp
, 
di•œy
->
fú°_row
);

3330 
ouåow
 +
y
 * 
°ï_row
;

3331 
íd_row
 = 
ouåow
 + 
width
 * 
ch™√ls
;

3334 
ouåow
 +
°¨tx
;

3335 ; 
ouåow
 < 
íd_row
; ouåow +
°ïx
)

3337 
≤g_byã
 
Æpha
 = 
örow
[
ch™√ls
];

3339 i‡(
Æpha
 > 0)

3341 
c
;

3343 
c
=0; c<
ch™√ls
; ++c)

3345 
≤g_uöt_32
 
comp⁄ít
 = 
örow
[
c
];

3347 i‡(
Æpha
 < 255)

3355 
comp⁄ít
 *= 257*255;

3356 
comp⁄ít
 +(255-
Æpha
)*
≤g_sRGB_èbÀ
[
ouåow
[
c
]];

3362 
comp⁄ít
 = 
	`PNG_sRGB_FROM_LINEAR
(component);

3365 
ouåow
[
c
] = (
≤g_byã
)
comp⁄ít
;

3369 
örow
 +
ch™√ls
+1;

3376 
	}
}

3392 
	$≤g_image_ªad_background
(
≤g_voidp
 
¨gumít
)

3394 
≤g_image_ªad_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_read_control*,

3395 
¨gumít
);

3396 
≤g_imagï
 
image
 = 
di•œy
->image;

3397 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

3398 
≤g_öf‹p
 
öfo_±r
 = 
image
->
›aque
->info_ptr;

3399 
≤g_uöt_32
 
height
 = 
image
->height;

3400 
≤g_uöt_32
 
width
 = 
image
->width;

3401 
∑ss
, 
∑s£s
;

3408 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) == 0)

3409 
	`≤g_îr‹
(
≤g_±r
, "lostÑgbÅo gray");

3411 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0)

3412 
	`≤g_îr‹
(
≤g_±r
, "unexpected compose");

3414 i‡(
	`≤g_gë_ch™√ls
(
≤g_±r
, 
öfo_±r
) != 2)

3415 
	`≤g_îr‹
(
≤g_±r
, "lost/gained channels");

3418 i‡((
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) == 0 &&

3419 (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

3420 
	`≤g_îr‹
(
≤g_±r
, "unexpected 8-bitÅransformation");

3422 
≤g_±r
->
öãæa˚d
)

3424 
PNG_INTERLACE_NONE
:

3425 
∑s£s
 = 1;

3428 
PNG_INTERLACE_ADAM7
:

3429 
∑s£s
 = 
PNG_INTERLACE_ADAM7_PASSES
;

3433 
	`≤g_îr‹
(
≤g_±r
, "unknown interlaceÅype");

3441 
öfo_±r
->
bô_dïth
)

3450 
≤g_byãp
 
fú°_row
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->first_row);

3451 
±rdiff_t
 
°ï_row
 = 
di•œy
->
row_byãs
;

3453 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass)

3455 
≤g_byãp
 
row
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->
fú°_row
);

3456 
°¨tx
, 
°ïx
, 
°ïy
;

3457 
≤g_uöt_32
 
y
;

3459 i‡(
≤g_±r
->
öãæa˚d
 =
PNG_INTERLACE_ADAM7
)

3462 i‡(
	`PNG_PASS_COLS
(
width
, 
∑ss
) == 0)

3465 
°¨tx
 = 
	`PNG_PASS_START_COL
(
∑ss
);

3466 
°ïx
 = 
	`PNG_PASS_COL_OFFSET
(
∑ss
);

3467 
y
 = 
	`PNG_PASS_START_ROW
(
∑ss
);

3468 
°ïy
 = 
	`PNG_PASS_ROW_OFFSET
(
∑ss
);

3473 
y
 = 0;

3474 
°¨tx
 = 0;

3475 
°ïx
 = 
°ïy
 = 1;

3478 i‡(
di•œy
->
background
 =
NULL
)

3480 ; 
y
<
height
; y +
°ïy
)

3482 
≤g_byãp
 
örow
 = 
	`≤g_voidˇ°
(png_bytep,

3483 
di•œy
->
loˇl_row
);

3484 
≤g_byãp
 
ouåow
 = 
fú°_row
 + 
y
 * 
°ï_row
;

3485 
≤g_c⁄°_byãp
 
íd_row
 = 
ouåow
 + 
width
;

3488 
	`≤g_ªad_row
(
≤g_±r
, 
örow
, 
NULL
);

3491 
ouåow
 +
°¨tx
;

3492 ; 
ouåow
 < 
íd_row
; ouåow +
°ïx
)

3494 
≤g_byã
 
Æpha
 = 
örow
[1];

3496 i‡(
Æpha
 > 0)

3498 
≤g_uöt_32
 
comp⁄ít
 = 
örow
[0];

3500 i‡(
Æpha
 < 255)

3506 
comp⁄ít
 = 
≤g_sRGB_èbÀ
[comp⁄ít] * 
Æpha
;

3507 
comp⁄ít
 +
≤g_sRGB_èbÀ
[
ouåow
[0]] *

3508 (255-
Æpha
);

3509 
comp⁄ít
 = 
	`PNG_sRGB_FROM_LINEAR
(component);

3512 
ouåow
[0] = (
≤g_byã
)
comp⁄ít
;

3515 
örow
 += 2;

3522 
≤g_byã
 
background8
 = 
di•œy
->
background
->
gªí
;

3523 
≤g_uöt_16
 
background
 = 
≤g_sRGB_èbÀ
[
background8
];

3525 ; 
y
<
height
; y +
°ïy
)

3527 
≤g_byãp
 
örow
 = 
	`≤g_voidˇ°
(png_bytep,

3528 
di•œy
->
loˇl_row
);

3529 
≤g_byãp
 
ouåow
 = 
fú°_row
 + 
y
 * 
°ï_row
;

3530 
≤g_c⁄°_byãp
 
íd_row
 = 
ouåow
 + 
width
;

3533 
	`≤g_ªad_row
(
≤g_±r
, 
örow
, 
NULL
);

3536 
ouåow
 +
°¨tx
;

3537 ; 
ouåow
 < 
íd_row
; ouåow +
°ïx
)

3539 
≤g_byã
 
Æpha
 = 
örow
[1];

3541 i‡(
Æpha
 > 0)

3543 
≤g_uöt_32
 
comp⁄ít
 = 
örow
[0];

3545 i‡(
Æpha
 < 255)

3547 
comp⁄ít
 = 
≤g_sRGB_èbÀ
[comp⁄ít] * 
Æpha
;

3548 
comp⁄ít
 +
background
 * (255-
Æpha
);

3549 
comp⁄ít
 = 
	`PNG_sRGB_FROM_LINEAR
(component);

3552 
ouåow
[0] = (
≤g_byã
)
comp⁄ít
;

3556 
ouåow
[0] = 
background8
;

3558 
örow
 += 2;

3561 
row
 +
di•œy
->
row_byãs
;

3574 
≤g_uöt_16p
 
fú°_row
 = 
	`≤g_voidˇ°
(png_uint_16p,

3575 
di•œy
->
fú°_row
);

3579 
±rdiff_t
 
°ï_row
 = 
di•œy
->
row_byãs
 / 2;

3580 
¥e£rve_Æpha
 = (
image
->
f‹m©
 &

3581 
PNG_FORMAT_FLAG_ALPHA
) != 0;

3582 
outch™√ls
 = 1U+
¥e£rve_Æpha
;

3583 
sw≠_Æpha
 = 0;

3585 #ifde‡
PNG_SIMPLIFIED_READ_AFIRST_SUPPORTED


3586 i‡(
¥e£rve_Æpha
 != 0 &&

3587 (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0)

3588 
sw≠_Æpha
 = 1;

3591 
∑ss
 = 0;Öas†< 
∑s£s
; ++pass)

3593 
°¨tx
, 
°ïx
, 
°ïy
;

3594 
≤g_uöt_32
 
y
;

3598 i‡(
≤g_±r
->
öãæa˚d
 =
PNG_INTERLACE_ADAM7
)

3601 i‡(
	`PNG_PASS_COLS
(
width
, 
∑ss
) == 0)

3604 
°¨tx
 = 
	`PNG_PASS_START_COL
(
∑ss
Ë* 
outch™√ls
;

3605 
°ïx
 = 
	`PNG_PASS_COL_OFFSET
(
∑ss
Ë* 
outch™√ls
;

3606 
y
 = 
	`PNG_PASS_START_ROW
(
∑ss
);

3607 
°ïy
 = 
	`PNG_PASS_ROW_OFFSET
(
∑ss
);

3612 
y
 = 0;

3613 
°¨tx
 = 0;

3614 
°ïx
 = 
outch™√ls
;

3615 
°ïy
 = 1;

3618 ; 
y
<
height
; y +
°ïy
)

3620 
≤g_c⁄°_uöt_16p
 
örow
;

3621 
≤g_uöt_16p
 
ouåow
 = 
fú°_row
 + 
y
*
°ï_row
;

3622 
≤g_uöt_16p
 
íd_row
 = 
ouåow
 + 
width
 * 
outch™√ls
;

3625 
	`≤g_ªad_row
(
≤g_±r
, 
	`≤g_voidˇ°
(
≤g_byãp
,

3626 
di•œy
->
loˇl_row
), 
NULL
);

3627 
örow
 = 
	`≤g_voidˇ°
(
≤g_c⁄°_uöt_16p
, 
di•œy
->
loˇl_row
);

3631 
ouåow
 +
°¨tx
;

3632 ; 
ouåow
 < 
íd_row
; ouåow +
°ïx
)

3634 
≤g_uöt_32
 
comp⁄ít
 = 
örow
[0];

3635 
≤g_uöt_16
 
Æpha
 = 
örow
[1];

3637 i‡(
Æpha
 > 0)

3639 i‡(
Æpha
 < 65535)

3641 
comp⁄ít
 *
Æpha
;

3642 
comp⁄ít
 += 32767;

3643 
comp⁄ít
 /= 65535;

3648 
comp⁄ít
 = 0;

3650 
ouåow
[
sw≠_Æpha
] = (
≤g_uöt_16
)
comp⁄ít
;

3651 i‡(
¥e£rve_Æpha
 != 0)

3652 
ouåow
[1 ^ 
sw≠_Æpha
] = 
Æpha
;

3654 
örow
 += 2;

3661 #ifde‡
__GNUC__


3663 
	`≤g_îr‹
(
≤g_±r
, "unexpected bit depth");

3668 
	}
}

3672 
	$≤g_image_ªad_dúe˘
(
≤g_voidp
 
¨gumít
)

3674 
≤g_image_ªad_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_read_control*,

3675 
¨gumít
);

3676 
≤g_imagï
 
image
 = 
di•œy
->image;

3677 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

3678 
≤g_öf‹p
 
öfo_±r
 = 
image
->
›aque
->info_ptr;

3680 
≤g_uöt_32
 
f‹m©
 = 
image
->format;

3681 
löór
 = (
f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) != 0;

3682 
do_loˇl_compo£
 = 0;

3683 
do_loˇl_background
 = 0;

3684 
∑s£s
 = 0;

3690 
	`≤g_£t_ex∑nd
(
≤g_±r
);

3694 
≤g_uöt_32
 
ba£_f‹m©
 = 
	`≤g_image_f‹m©
(
≤g_±r
) &

3695 ~
PNG_FORMAT_FLAG_COLORMAP
 ;

3696 
≤g_uöt_32
 
ch™ge
 = 
f‹m©
 ^ 
ba£_f‹m©
;

3697 
≤g_fixed_poöt
 
ouçut_gamma
;

3698 
mode
;

3701 i‡((
ch™ge
 & 
PNG_FORMAT_FLAG_COLOR
) != 0)

3704 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) != 0)

3705 
	`≤g_£t_gøy_to_rgb
(
≤g_±r
);

3722 i‡((
ba£_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

3723 
do_loˇl_background
 = 1 ;

3725 
	`≤g_£t_rgb_to_gøy_fixed
(
≤g_±r
, 
PNG_ERROR_ACTION_NONE
,

3726 
PNG_RGB_TO_GRAY_DEFAULT
, PNG_RGB_TO_GRAY_DEFAULT);

3729 
ch™ge
 &~
PNG_FORMAT_FLAG_COLOR
;

3735 
≤g_fixed_poöt
 
öput_gamma_deÁu…
;

3737 i‡((
ba£_f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) != 0 &&

3738 (
image
->
Êags
 & 
PNG_IMAGE_FLAG_16BIT_sRGB
) == 0)

3739 
öput_gamma_deÁu…
 = 
PNG_GAMMA_LINEAR
;

3741 
öput_gamma_deÁu…
 = 
PNG_DEFAULT_sRGB
;

3746 
	`≤g_£t_Æpha_mode_fixed
(
≤g_±r
, 
PNG_ALPHA_PNG
, 
öput_gamma_deÁu…
);

3749 i‡(
löór
 != 0)

3754 i‡((
ba£_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

3755 
mode
 = 
PNG_ALPHA_STANDARD
;

3758 
mode
 = 
PNG_ALPHA_PNG
;

3760 
ouçut_gamma
 = 
PNG_GAMMA_LINEAR
;

3765 
mode
 = 
PNG_ALPHA_PNG
;

3766 
ouçut_gamma
 = 
PNG_DEFAULT_sRGB
;

3769 i‡((
ch™ge
 & 
PNG_FORMAT_FLAG_ASSOCIATED_ALPHA
) != 0)

3771 
mode
 = 
PNG_ALPHA_OPTIMIZED
;

3772 
ch™ge
 &~
PNG_FORMAT_FLAG_ASSOCIATED_ALPHA
;

3781 i‡(
do_loˇl_background
 != 0)

3783 
≤g_fixed_poöt
 
gã°
;

3790 i‡(
	`≤g_muldiv
(&
gã°
, 
ouçut_gamma
, 
≤g_±r
->
cﬁ‹•a˚
.
gamma
,

3791 
PNG_FP_1
Ë!0 && 
	`≤g_gamma_signifiˇ¡
(
gã°
) == 0)

3792 
do_loˇl_background
 = 0;

3794 i‡(
mode
 =
PNG_ALPHA_STANDARD
)

3796 
do_loˇl_background
 = 2 ;

3797 
mode
 = 
PNG_ALPHA_PNG
;

3804 i‡((
ch™ge
 & 
PNG_FORMAT_FLAG_LINEAR
) != 0)

3806 i‡(
löór
 != 0 )

3807 
	`≤g_£t_ex∑nd_16
(
≤g_±r
);

3810 
	`≤g_£t_sˇÀ_16
(
≤g_±r
);

3812 
ch™ge
 &~
PNG_FORMAT_FLAG_LINEAR
;

3816 i‡((
ch™ge
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

3822 i‡((
ba£_f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

3829 i‡(
do_loˇl_background
 != 0)

3830 
do_loˇl_background
 = 2 ;

3833 i‡(
löór
 != 0)

3834 
	`≤g_£t_°rù_Æpha
(
≤g_±r
);

3837 i‡(
di•œy
->
background
 !
NULL
)

3839 
≤g_cﬁ‹_16
 
c
;

3841 
c
.
ödex
 = 0;

3842 
c
.
ªd
 = 
di•œy
->
background
->red;

3843 
c
.
gªí
 = 
di•œy
->
background
->green;

3844 
c
.
blue
 = 
di•œy
->
background
->blue;

3845 
c
.
gøy
 = 
di•œy
->
background
->
gªí
;

3853 
	`≤g_£t_background_fixed
(
≤g_±r
, &
c
,

3854 
PNG_BACKGROUND_GAMMA_SCREEN
, 0 ,

3860 
do_loˇl_compo£
 = 1;

3866 
mode
 = 
PNG_ALPHA_OPTIMIZED
;

3877 
≤g_uöt_32
 
fûÀr
;

3878 
whîe
;

3880 i‡(
löór
 != 0)

3881 
fûÀr
 = 65535;

3884 
fûÀr
 = 255;

3886 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


3887 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0)

3889 
whîe
 = 
PNG_FILLER_BEFORE
;

3890 
ch™ge
 &~
PNG_FORMAT_FLAG_AFIRST
;

3895 
whîe
 = 
PNG_FILLER_AFTER
;

3897 
	`≤g_£t_add_Æpha
(
≤g_±r
, 
fûÀr
, 
whîe
);

3901 
ch™ge
 &~
PNG_FORMAT_FLAG_ALPHA
;

3908 
	`≤g_£t_Æpha_mode_fixed
(
≤g_±r
, 
mode
, 
ouçut_gamma
);

3910 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


3911 i‡((
ch™ge
 & 
PNG_FORMAT_FLAG_BGR
) != 0)

3916 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) != 0)

3917 
	`≤g_£t_bgr
(
≤g_±r
);

3920 
f‹m©
 &~
PNG_FORMAT_FLAG_BGR
;

3922 
ch™ge
 &~
PNG_FORMAT_FLAG_BGR
;

3926 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


3927 i‡((
ch™ge
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0)

3934 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

3939 i‡(
do_loˇl_background
 != 2)

3940 
	`≤g_£t_sw≠_Æpha
(
≤g_±r
);

3944 
f‹m©
 &~
PNG_FORMAT_FLAG_AFIRST
;

3946 
ch™ge
 &~
PNG_FORMAT_FLAG_AFIRST
;

3953 i‡(
löór
 != 0)

3955 
≤g_uöt_16
 
À
 = 0x0001;

3957 i‡((*(
≤g_c⁄°_byãp
Ë& 
À
) != 0)

3958 
	`≤g_£t_sw≠
(
≤g_±r
);

3962 i‡(
ch™ge
 != 0)

3963 
	`≤g_îr‹
(
≤g_±r
, "png_read_image: unsupportedÅransformation");

3966 
	`PNG_SKIP_CHUNKS
(
≤g_±r
);

3974 i‡(
do_loˇl_compo£
 =0 && 
do_loˇl_background
 != 2)

3975 
∑s£s
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

3977 
	`≤g_ªad_upd©e_öfo
(
≤g_±r
, 
öfo_±r
);

3980 
≤g_uöt_32
 
öfo_f‹m©
 = 0;

3982 i‡((
öfo_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

3983 
öfo_f‹m©
 |
PNG_FORMAT_FLAG_COLOR
;

3985 i‡((
öfo_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

3988 i‡(
do_loˇl_compo£
 == 0)

3991 i‡(
do_loˇl_background
 != 2 ||

3992 (
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

3993 
öfo_f‹m©
 |
PNG_FORMAT_FLAG_ALPHA
;

3997 i‡(
do_loˇl_compo£
 != 0)

3998 
	`≤g_îr‹
(
≤g_±r
, "png_image_read:álpha channelÜost");

4000 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_ASSOCIATED_ALPHA
) != 0) {

4001 
öfo_f‹m©
 |
PNG_FORMAT_FLAG_ASSOCIATED_ALPHA
;

4004 i‡(
öfo_±r
->
bô_dïth
 == 16)

4005 
öfo_f‹m©
 |
PNG_FORMAT_FLAG_LINEAR
;

4007 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


4008 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BGR
) != 0)

4009 
öfo_f‹m©
 |
PNG_FORMAT_FLAG_BGR
;

4012 #ifde‡
PNG_FORMAT_AFIRST_SUPPORTED


4013 i‡(
do_loˇl_background
 == 2)

4015 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0)

4016 
öfo_f‹m©
 |
PNG_FORMAT_FLAG_AFIRST
;

4019 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SWAP_ALPHA
) != 0 ||

4020 ((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_ADD_ALPHA
) != 0 &&

4021 (
≤g_±r
->
Êags
 & 
PNG_FLAG_FILLER_AFTER
) == 0))

4023 i‡(
do_loˇl_background
 == 2)

4024 
	`≤g_îr‹
(
≤g_±r
, "unexpectedálpha swapÅransformation");

4026 
öfo_f‹m©
 |
PNG_FORMAT_FLAG_AFIRST
;

4031 i‡(
öfo_f‹m©
 !
f‹m©
)

4032 
	`≤g_îr‹
(
≤g_±r
, "png_read_image: invalidÅransformations");

4041 
≤g_voidp
 
fú°_row
 = 
di•œy
->
buf„r
;

4042 
±rdiff_t
 
row_byãs
 = 
di•œy
->
row_°ride
;

4044 i‡(
löór
 != 0)

4045 
row_byãs
 *= 2;

4050 i‡(
row_byãs
 < 0)

4052 *
±r
 = 
	`≤g_voidˇ°
(*, 
fú°_row
);

4053 
±r
 +(
image
->
height
-1Ë* (-
row_byãs
);

4054 
fú°_row
 = 
	`≤g_voidˇ°
(
≤g_voidp
, 
±r
);

4057 
di•œy
->
fú°_row
 = first_row;

4058 
di•œy
->
row_byãs
 =Ñow_bytes;

4061 i‡(
do_loˇl_compo£
 != 0)

4063 
ªsu…
;

4064 
≤g_voidp
 
row
 = 
	`≤g_mÆloc
(
≤g_±r
, 
	`≤g_gë_rowbyãs
’ng_±r, 
öfo_±r
));

4066 
di•œy
->
loˇl_row
 = 
row
;

4067 
ªsu…
 = 
	`≤g_ß„_execuã
(
image
, 
≤g_image_ªad_composôe
, 
di•œy
);

4068 
di•œy
->
loˇl_row
 = 
NULL
;

4069 
	`≤g_‰ì
(
≤g_±r
, 
row
);

4071  
ªsu…
;

4074 i‡(
do_loˇl_background
 == 2)

4076 
ªsu…
;

4077 
≤g_voidp
 
row
 = 
	`≤g_mÆloc
(
≤g_±r
, 
	`≤g_gë_rowbyãs
’ng_±r, 
öfo_±r
));

4079 
di•œy
->
loˇl_row
 = 
row
;

4080 
ªsu…
 = 
	`≤g_ß„_execuã
(
image
, 
≤g_image_ªad_background
, 
di•œy
);

4081 
di•œy
->
loˇl_row
 = 
NULL
;

4082 
	`≤g_‰ì
(
≤g_±r
, 
row
);

4084  
ªsu…
;

4089 
≤g_Æloc_size_t
 
row_byãs
 = (≤g_Æloc_size_t)
di•œy
->row_bytes;

4091 --
∑s£s
 >= 0)

4093 
≤g_uöt_32
 
y
 = 
image
->
height
;

4094 
≤g_byãp
 
row
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->
fú°_row
);

4096 ; 
y
 > 0; --y)

4098 
	`≤g_ªad_row
(
≤g_±r
, 
row
, 
NULL
);

4099 
row
 +
row_byãs
;

4105 
	}
}

4107 
PNGAPI


4108 
	$≤g_image_föish_ªad
(
≤g_imagï
 
image
, 
≤g_c⁄°_cﬁ‹p
 
background
,

4109 *
buf„r
, 
≤g_öt_32
 
row_°ride
, *
cﬁ‹m≠
)

4111 i‡(
image
 !
NULL
 && image->
vîsi⁄
 =
PNG_IMAGE_VERSION
)

4117 
ch™√ls
 = 
	`PNG_IMAGE_PIXEL_CHANNELS
(
image
->
f‹m©
);

4125 i‡(
image
->
width
 <0x7fffffffU/
ch™√ls
)

4127 
≤g_uöt_32
 
check
;

4128 
≤g_uöt_32
 
≤g_row_°ride
 = 
image
->
width
 * 
ch™√ls
;

4130 i‡(
row_°ride
 == 0)

4131 
row_°ride
 = (
≤g_öt_32
Ë
≤g_row_°ride
;

4133 i‡(
row_°ride
 < 0)

4134 
check
 = (
≤g_uöt_32
)(-
row_°ride
);

4137 
check
 = (
≤g_uöt_32
)
row_°ride
;

4143 i‡(
image
->
›aque
 !
NULL
 && 
buf„r
 !NULL && 
check
 >
≤g_row_°ride
)

4161 i‡(
image
->
height
 <=

4162 0xffffffffU/
	`PNG_IMAGE_PIXEL_COMPONENT_SIZE
(
image
->
f‹m©
)/
check
)

4164 i‡((
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
) == 0 ||

4165 (
image
->
cﬁ‹m≠_íåõs
 > 0 && 
cﬁ‹m≠
 !
NULL
))

4167 
ªsu…
;

4168 
≤g_image_ªad_c⁄åﬁ
 
di•œy
;

4170 
	`mem£t
(&
di•œy
, 0, ( display));

4171 
di•œy
.
image
 = image;

4172 
di•œy
.
buf„r
 = buffer;

4173 
di•œy
.
row_°ride
 =Ñow_stride;

4174 
di•œy
.
cﬁ‹m≠
 = colormap;

4175 
di•œy
.
background
 = background;

4176 
di•œy
.
loˇl_row
 = 
NULL
;

4181 i‡((
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
) != 0)

4182 
ªsu…
 =

4183 
	`≤g_ß„_execuã
(
image
,

4184 
≤g_image_ªad_cﬁ‹m≠
, &
di•œy
) &&

4185 
	`≤g_ß„_execuã
(
image
,

4186 
≤g_image_ªad_cﬁ‹m≠≥d
, &
di•œy
);

4189 
ªsu…
 =

4190 
	`≤g_ß„_execuã
(
image
,

4191 
≤g_image_ªad_dúe˘
, &
di•œy
);

4193 
	`≤g_image_‰ì
(
image
);

4194  
ªsu…
;

4198  
	`≤g_image_îr‹
(
image
,

4203  
	`≤g_image_îr‹
(
image
,

4208  
	`≤g_image_îr‹
(
image
,

4213  
	`≤g_image_îr‹
(
image
,

4217 i‡(
image
 !
NULL
)

4218  
	`≤g_image_îr‹
(
image
,

4222 
	}
}

	@pngrio.c

21 
	~"≤g¥iv.h
"

23 #ifde‡
PNG_READ_SUPPORTED


32 
	$≤g_ªad_d©a
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
)

34 
	`≤g_debug1
(4, "ªadög %d byãs", ()
Àngth
);

36 i‡(
≤g_±r
->
ªad_d©a_‚
 !
NULL
)

37 (*(
≤g_±r
->
ªad_d©a_‚
))’ng_±r, 
d©a
, 
Àngth
);

40 
	`≤g_îr‹
(
≤g_±r
, "CallÅo NULLÑead function");

41 
	}
}

43 #ifde‡
PNG_STDIO_SUPPORTED


49 
PNGCBAPI


50 
	$≤g_deÁu…_ªad_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
)

52 
size_t
 
check
;

54 i‡(
≤g_±r
 =
NULL
)

60 
check
 = 
	`‰ód
(
d©a
, 1, 
Àngth
, 
	`≤g_voidˇ°
(
≤g_FILE_p
, 
≤g_±r
->
io_±r
));

62 i‡(
check
 !
Àngth
)

63 
	`≤g_îr‹
(
≤g_±r
, "Read Error");

64 
	}
}

86 
PNGAPI


87 
	$≤g_£t_ªad_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
io_±r
,

88 
≤g_rw_±r
 
ªad_d©a_‚
)

90 i‡(
≤g_±r
 =
NULL
)

93 
≤g_±r
->
io_±r
 = io_ptr;

95 #ifde‡
PNG_STDIO_SUPPORTED


96 i‡(
ªad_d©a_‚
 !
NULL
)

97 
≤g_±r
->
ªad_d©a_‚
 =Ñead_data_fn;

100 
≤g_±r
->
ªad_d©a_‚
 = 
≤g_deÁu…_ªad_d©a
;

102 
≤g_±r
->
ªad_d©a_‚
 =Ñead_data_fn;

105 #ifde‡
PNG_WRITE_SUPPORTED


107 i‡(
≤g_±r
->
wrôe_d©a_‚
 !
NULL
)

109 
≤g_±r
->
wrôe_d©a_‚
 = 
NULL
;

110 
	`≤g_w¨nög
(
≤g_±r
,

116 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


117 
≤g_±r
->
ouçut_Êush_‚
 = 
NULL
;

119 
	}
}

	@pngrtran.c

19 
	~"≤g¥iv.h
"

21 #ifde‡
PNG_ARM_NEON_IMPLEMENTATION


22 #i‡
PNG_ARM_NEON_IMPLEMENTATION
 == 1

23 
	#PNG_ARM_NEON_INTRINSICS_AVAILABLE


	)

24 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
Ë&& deföed(
_M_ARM64
)

25 
	~<¨m64_√⁄.h
>

27 
	~<¨m_√⁄.h
>

32 #ifde‡
PNG_READ_SUPPORTED


35 
PNGAPI


36 
	$≤g_£t_¸c_a˘i⁄
(
≤g_°ru˘Ω
 
≤g_±r
, 
¸ô_a˘i⁄
, 
™cû_a˘i⁄
)

38 
	`≤g_debug
(1, "inÖng_set_crc_action");

40 i‡(
≤g_±r
 =
NULL
)

44 
¸ô_a˘i⁄
)

46 
PNG_CRC_NO_CHANGE
:

49 
PNG_CRC_WARN_USE
:

50 
≤g_±r
->
Êags
 &~
PNG_FLAG_CRC_CRITICAL_MASK
;

51 
≤g_±r
->
Êags
 |
PNG_FLAG_CRC_CRITICAL_USE
;

54 
PNG_CRC_QUIET_USE
:

55 
≤g_±r
->
Êags
 &~
PNG_FLAG_CRC_CRITICAL_MASK
;

56 
≤g_±r
->
Êags
 |
PNG_FLAG_CRC_CRITICAL_USE
 |

57 
PNG_FLAG_CRC_CRITICAL_IGNORE
;

60 
PNG_CRC_WARN_DISCARD
:

61 
	`≤g_w¨nög
(
≤g_±r
,

64 
PNG_CRC_ERROR_QUIT
:

66 
PNG_CRC_DEFAULT
:

68 
≤g_±r
->
Êags
 &~
PNG_FLAG_CRC_CRITICAL_MASK
;

73 
™cû_a˘i⁄
)

75 
PNG_CRC_NO_CHANGE
:

78 
PNG_CRC_WARN_USE
:

79 
≤g_±r
->
Êags
 &~
PNG_FLAG_CRC_ANCILLARY_MASK
;

80 
≤g_±r
->
Êags
 |
PNG_FLAG_CRC_ANCILLARY_USE
;

83 
PNG_CRC_QUIET_USE
:

84 
≤g_±r
->
Êags
 &~
PNG_FLAG_CRC_ANCILLARY_MASK
;

85 
≤g_±r
->
Êags
 |
PNG_FLAG_CRC_ANCILLARY_USE
 |

86 
PNG_FLAG_CRC_ANCILLARY_NOWARN
;

89 
PNG_CRC_ERROR_QUIT
:

90 
≤g_±r
->
Êags
 &~
PNG_FLAG_CRC_ANCILLARY_MASK
;

91 
≤g_±r
->
Êags
 |
PNG_FLAG_CRC_ANCILLARY_NOWARN
;

94 
PNG_CRC_WARN_DISCARD
:

96 
PNG_CRC_DEFAULT
:

98 
≤g_±r
->
Êags
 &~
PNG_FLAG_CRC_ANCILLARY_MASK
;

101 
	}
}

103 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


110 
	$≤g_πøn_ok
(
≤g_°ru˘Ω
 
≤g_±r
, 
√ed_IHDR
)

112 i‡(
≤g_±r
 !
NULL
)

114 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ROW_INIT
) != 0)

115 
	`≤g_≠p_îr‹
(
≤g_±r
,

118 i‡(
√ed_IHDR
 && (
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

119 
	`≤g_≠p_îr‹
(
≤g_±r
, "invalid beforeÅhe PNG header has beenÑead");

124 
≤g_±r
->
Êags
 |
PNG_FLAG_DETECT_UNINITIALIZED
;

131 
	}
}

134 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


136 
PNGFAPI


137 
	$≤g_£t_background_fixed
(
≤g_°ru˘Ω
 
≤g_±r
,

138 
≤g_c⁄°_cﬁ‹_16p
 
background_cﬁ‹
, 
background_gamma_code
,

139 
√ed_ex∑nd
, 
≤g_fixed_poöt
 
background_gamma
)

141 
	`≤g_debug
(1, "inÖng_set_background_fixed");

143 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0Ë=0 || 
background_cﬁ‹
 =
NULL
)

146 i‡(
background_gamma_code
 =
PNG_BACKGROUND_GAMMA_UNKNOWN
)

148 
	`≤g_w¨nög
(
≤g_±r
, "Application must supplyá known background gamma");

152 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_COMPOSE
 | 
PNG_STRIP_ALPHA
;

153 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_ENCODE_ALPHA
;

154 
≤g_±r
->
Êags
 &~
PNG_FLAG_OPTIMIZE_ALPHA
;

156 
≤g_±r
->
background
 = *
background_cﬁ‹
;

157 
≤g_±r
->
background_gamma
 = background_gamma;

158 
≤g_±r
->
background_gamma_ty≥
 = (
≤g_byã
)(
background_gamma_code
);

159 i‡(
√ed_ex∑nd
 != 0)

160 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_BACKGROUND_EXPAND
;

162 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_BACKGROUND_EXPAND
;

163 
	}
}

165 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


166 
PNGAPI


167 
	$≤g_£t_background
(
≤g_°ru˘Ω
 
≤g_±r
,

168 
≤g_c⁄°_cﬁ‹_16p
 
background_cﬁ‹
, 
background_gamma_code
,

169 
√ed_ex∑nd
, 
background_gamma
)

171 
	`≤g_£t_background_fixed
(
≤g_±r
, 
background_cﬁ‹
, 
background_gamma_code
,

172 
√ed_ex∑nd
, 
	`≤g_fixed
(
≤g_±r
, 
background_gamma
, "png_set_background"));

173 
	}
}

181 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


182 
PNGAPI


183 
	$≤g_£t_sˇÀ_16
(
≤g_°ru˘Ω
 
≤g_±r
)

185 
	`≤g_debug
(1, "inÖng_set_scale_16");

187 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

190 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_SCALE_16_TO_8
;

191 
	}
}

194 #ifde‡
PNG_READ_STRIP_16_TO_8_SUPPORTED


196 
PNGAPI


197 
	$≤g_£t_°rù_16
(
≤g_°ru˘Ω
 
≤g_±r
)

199 
	`≤g_debug
(1, "inÖng_set_strip_16");

201 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

204 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_16_TO_8
;

205 
	}
}

208 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


209 
PNGAPI


210 
	$≤g_£t_°rù_Æpha
(
≤g_°ru˘Ω
 
≤g_±r
)

212 
	`≤g_debug
(1, "inÖng_set_strip_alpha");

214 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

217 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_STRIP_ALPHA
;

218 
	}
}

221 #i‡
deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
Ë|| deföed(
PNG_READ_GAMMA_SUPPORTED
)

222 
≤g_fixed_poöt


223 
	$å™¶©e_gamma_Êags
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_fixed_poöt
 
ouçut_gamma
,

224 
is_s¸ìn
)

231 i‡(
ouçut_gamma
 =
PNG_DEFAULT_sRGB
 ||

232 
ouçut_gamma
 =
PNG_FP_1
 / 
PNG_DEFAULT_sRGB
)

237 #ifde‡
PNG_READ_sRGB_SUPPORTED


238 
≤g_±r
->
Êags
 |
PNG_FLAG_ASSUME_sRGB
;

240 
	`PNG_UNUSED
(
≤g_±r
)

242 i‡(
is_s¸ìn
 != 0)

243 
ouçut_gamma
 = 
PNG_GAMMA_sRGB
;

245 
ouçut_gamma
 = 
PNG_GAMMA_sRGB_INVERSE
;

248 i‡(
ouçut_gamma
 =
PNG_GAMMA_MAC_18
 ||

249 
ouçut_gamma
 =
PNG_FP_1
 / 
PNG_GAMMA_MAC_18
)

251 i‡(
is_s¸ìn
 != 0)

252 
ouçut_gamma
 = 
PNG_GAMMA_MAC_OLD
;

254 
ouçut_gamma
 = 
PNG_GAMMA_MAC_INVERSE
;

257  
ouçut_gamma
;

258 
	}
}

260 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


261 
≤g_fixed_poöt


262 
	$c⁄vît_gamma_vÆue
(
≤g_°ru˘Ω
 
≤g_±r
, 
ouçut_gamma
)

271 i‡(
ouçut_gamma
 > 0 && output_gamma < 128)

272 
ouçut_gamma
 *
PNG_FP_1
;

275 
ouçut_gamma
 = 
	`Êo‹
(output_gamma + .5);

277 i‡(
ouçut_gamma
 > 
PNG_FP_MAX
 || ouçut_gamm®< 
PNG_FP_MIN
)

278 
	`≤g_fixed_îr‹
(
≤g_±r
, "gamma value");

280  (
≤g_fixed_poöt
)
ouçut_gamma
;

281 
	}
}

285 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


286 
PNGFAPI


287 
	$≤g_£t_Æpha_mode_fixed
(
≤g_°ru˘Ω
 
≤g_±r
, 
mode
,

288 
≤g_fixed_poöt
 
ouçut_gamma
)

290 
compo£
 = 0;

291 
≤g_fixed_poöt
 
fûe_gamma
;

293 
	`≤g_debug
(1, "inÖng_set_alpha_mode");

295 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

298 
ouçut_gamma
 = 
	`å™¶©e_gamma_Êags
(
≤g_±r
, output_gamma, 1 );

309 i‡(
ouçut_gamma
 < 1000 || output_gamma > 10000000)

310 
	`≤g_îr‹
(
≤g_±r
, "output gamma out ofÉxpectedÑange");

315 
fûe_gamma
 = 
	`≤g_ªcùroˇl
(
ouçut_gamma
);

333 
mode
)

335 
PNG_ALPHA_PNG
:

337 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_ENCODE_ALPHA
;

338 
≤g_±r
->
Êags
 &~
PNG_FLAG_OPTIMIZE_ALPHA
;

341 
PNG_ALPHA_ASSOCIATED
:

342 
compo£
 = 1;

343 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_ENCODE_ALPHA
;

344 
≤g_±r
->
Êags
 &~
PNG_FLAG_OPTIMIZE_ALPHA
;

346 
ouçut_gamma
 = 
PNG_FP_1
;

349 
PNG_ALPHA_OPTIMIZED
:

350 
compo£
 = 1;

351 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_ENCODE_ALPHA
;

352 
≤g_±r
->
Êags
 |
PNG_FLAG_OPTIMIZE_ALPHA
;

356 
PNG_ALPHA_BROKEN
:

357 
compo£
 = 1;

358 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_ENCODE_ALPHA
;

359 
≤g_±r
->
Êags
 &~
PNG_FLAG_OPTIMIZE_ALPHA
;

363 
	`≤g_îr‹
(
≤g_±r
, "invalidálpha mode");

370 i‡(
≤g_±r
->
cﬁ‹•a˚
.
gamma
 == 0)

372 
≤g_±r
->
cﬁ‹•a˚
.
gamma
 = 
fûe_gamma
;

373 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_HAVE_GAMMA
;

377 
≤g_±r
->
s¸ìn_gamma
 = 
ouçut_gamma
;

382 i‡(
compo£
 != 0)

385 
	`mem£t
(&
≤g_±r
->
background
, 0, (Öng_ptr->background));

386 
≤g_±r
->
background_gamma
 =Öng_±r->
cﬁ‹•a˚
.
gamma
;

387 
≤g_±r
->
background_gamma_ty≥
 = 
PNG_BACKGROUND_GAMMA_FILE
;

388 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_BACKGROUND_EXPAND
;

390 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0)

391 
	`≤g_îr‹
(
≤g_±r
,

394 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_COMPOSE
;

396 
	}
}

398 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


399 
PNGAPI


400 
	$≤g_£t_Æpha_mode
(
≤g_°ru˘Ω
 
≤g_±r
, 
mode
, 
ouçut_gamma
)

402 
	`≤g_£t_Æpha_mode_fixed
(
≤g_±r
, 
mode
, 
	`c⁄vît_gamma_vÆue
(png_ptr,

403 
ouçut_gamma
));

404 
	}
}

408 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


418 
	s≤g_ds‹t_°ru˘


420 
≤g_ds‹t_°ru˘
 * 
	m√xt
;

421 
≤g_byã
 
	mÀ·
;

422 
≤g_byã
 
	mright
;

423 } 
	t≤g_ds‹t
;

424 
≤g_ds‹t
 * 
	t≤g_ds‹ç
;

425 
≤g_ds‹t
 * * 
	t≤g_ds‹çp
;

427 
PNGAPI


428 
	$≤g_£t_qu™tize
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_cﬁ‹p
 
∑Àâe
,

429 
num_∑Àâe
, 
maximum_cﬁ‹s
, 
≤g_c⁄°_uöt_16p
 
hi°ogøm
,

430 
fuŒ_qu™tize
)

432 
	`≤g_debug
(1, "inÖng_set_quantize");

434 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

437 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_QUANTIZE
;

439 i‡(
fuŒ_qu™tize
 == 0)

441 
i
;

443 
≤g_±r
->
qu™tize_ödex
 = (
≤g_byãp
)
	`≤g_mÆloc
(png_ptr,

444 (
≤g_Æloc_size_t
)((
≤g_uöt_32
)
num_∑Àâe
 * ( (
≤g_byã
))));

445 
i
 = 0; i < 
num_∑Àâe
; i++)

446 
≤g_±r
->
qu™tize_ödex
[
i
] = (
≤g_byã
)i;

449 i‡(
num_∑Àâe
 > 
maximum_cﬁ‹s
)

451 i‡(
hi°ogøm
 !
NULL
)

457 
i
;

460 
≤g_±r
->
qu™tize_s‹t
 = (
≤g_byãp
)
	`≤g_mÆloc
(png_ptr,

461 (
≤g_Æloc_size_t
)((
≤g_uöt_32
)
num_∑Àâe
 * ( (
≤g_byã
))));

464 
i
 = 0; i < 
num_∑Àâe
; i++)

465 
≤g_±r
->
qu™tize_s‹t
[
i
] = (
≤g_byã
)i;

474 
i
 = 
num_∑Àâe
 - 1; i >
maximum_cﬁ‹s
; i--)

476 
d⁄e
;

477 
j
;

479 
d⁄e
 = 1;

480 
j
 = 0; j < 
i
; j++)

482 i‡(
hi°ogøm
[
≤g_±r
->
qu™tize_s‹t
[
j
]]

483 < 
hi°ogøm
[
≤g_±r
->
qu™tize_s‹t
[
j
 + 1]])

485 
≤g_byã
 
t
;

487 
t
 = 
≤g_±r
->
qu™tize_s‹t
[
j
];

488 
≤g_±r
->
qu™tize_s‹t
[
j
] =Öng_ptr->quantize_sort[j + 1];

489 
≤g_±r
->
qu™tize_s‹t
[
j
 + 1] = 
t
;

490 
d⁄e
 = 0;

494 i‡(
d⁄e
 != 0)

499 i‡(
fuŒ_qu™tize
 != 0)

501 
j
 = 
num_∑Àâe
;

506 
i
 = 0; i < 
maximum_cﬁ‹s
; i++)

508 i‡(()
≤g_±r
->
qu™tize_s‹t
[
i
] >
maximum_cﬁ‹s
)

511 
j
--;

512 ()
≤g_±r
->
qu™tize_s‹t
[
j
] >
maximum_cﬁ‹s
);

514 
∑Àâe
[
i
] =ÖÆëã[
j
];

520 
j
 = 
num_∑Àâe
;

525 
i
 = 0; i < 
maximum_cﬁ‹s
; i++)

528 i‡(()
≤g_±r
->
qu™tize_s‹t
[
i
] >
maximum_cﬁ‹s
)

530 
≤g_cﬁ‹
 
tmp_cﬁ‹
;

533 
j
--;

534 ()
≤g_±r
->
qu™tize_s‹t
[
j
] >
maximum_cﬁ‹s
);

536 
tmp_cﬁ‹
 = 
∑Àâe
[
j
];

537 
∑Àâe
[
j
] =ÖÆëã[
i
];

538 
∑Àâe
[
i
] = 
tmp_cﬁ‹
;

540 
≤g_±r
->
qu™tize_ödex
[
j
] = (
≤g_byã
)
i
;

541 
≤g_±r
->
qu™tize_ödex
[
i
] = (
≤g_byã
)
j
;

546 
i
 = 0; i < 
num_∑Àâe
; i++)

548 i‡(()
≤g_±r
->
qu™tize_ödex
[
i
] >
maximum_cﬁ‹s
)

550 
mö_d
, 
k
, 
mö_k
, 
d_ödex
;

553 
d_ödex
 = 
≤g_±r
->
qu™tize_ödex
[
i
];

554 
mö_d
 = 
	`PNG_COLOR_DIST
(
∑Àâe
[
d_ödex
],Öalette[0]);

555 
k
 = 1, 
mö_k
 = 0; k < 
maximum_cﬁ‹s
; k++)

557 
d
;

559 
d
 = 
	`PNG_COLOR_DIST
(
∑Àâe
[
d_ödex
],ÖÆëã[
k
]);

561 i‡(
d
 < 
mö_d
)

563 
mö_d
 = 
d
;

564 
mö_k
 = 
k
;

568 
≤g_±r
->
qu™tize_ödex
[
i
] = (
≤g_byã
)
mö_k
;

572 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
qu™tize_s‹t
);

573 
≤g_±r
->
qu™tize_s‹t
 = 
NULL
;

585 
i
;

586 
max_d
;

587 
num_√w_∑Àâe
;

588 
≤g_ds‹ç
 
t
;

589 
≤g_ds‹çp
 
hash
;

591 
t
 = 
NULL
;

594 
≤g_±r
->
ödex_to_∑Àâe
 = (
≤g_byãp
)
	`≤g_mÆloc
(png_ptr,

595 (
≤g_Æloc_size_t
)((
≤g_uöt_32
)
num_∑Àâe
 *

596 ( (
≤g_byã
))));

597 
≤g_±r
->
∑Àâe_to_ödex
 = (
≤g_byãp
)
	`≤g_mÆloc
(png_ptr,

598 (
≤g_Æloc_size_t
)((
≤g_uöt_32
)
num_∑Àâe
 *

599 ( (
≤g_byã
))));

602 
i
 = 0; i < 
num_∑Àâe
; i++)

604 
≤g_±r
->
ödex_to_∑Àâe
[
i
] = (
≤g_byã
)i;

605 
≤g_±r
->
∑Àâe_to_ödex
[
i
] = (
≤g_byã
)i;

608 
hash
 = (
≤g_ds‹çp
)
	`≤g_ˇŒoc
(
≤g_±r
, (
≤g_Æloc_size_t
)(769 *

609 ( (
≤g_ds‹ç
))));

611 
num_√w_∑Àâe
 = 
num_∑Àâe
;

621 
max_d
 = 96;

623 
num_√w_∑Àâe
 > 
maximum_cﬁ‹s
)

625 
i
 = 0; i < 
num_√w_∑Àâe
 - 1; i++)

627 
j
;

629 
j
 = 
i
 + 1; j < 
num_√w_∑Àâe
; j++)

631 
d
;

633 
d
 = 
	`PNG_COLOR_DIST
(
∑Àâe
[
i
],ÖÆëã[
j
]);

635 i‡(
d
 <
max_d
)

638 
t
 = (
≤g_ds‹ç
)
	`≤g_mÆloc_w¨n
(
≤g_±r
,

639 (
≤g_Æloc_size_t
)( (
≤g_ds‹t
)));

641 i‡(
t
 =
NULL
)

644 
t
->
√xt
 = 
hash
[
d
];

645 
t
->
À·
 = (
≤g_byã
)
i
;

646 
t
->
right
 = (
≤g_byã
)
j
;

647 
hash
[
d
] = 
t
;

650 i‡(
t
 =
NULL
)

654 i‡(
t
 !
NULL
)

655 
i
 = 0; i <
max_d
; i++)

657 i‡(
hash
[
i
] !
NULL
)

659 
≤g_ds‹ç
 
p
;

661 
p
 = 
hash
[
i
];Ö;Ö =Ö->
√xt
)

663 i‡(()
≤g_±r
->
ödex_to_∑Àâe
[
p
->
À·
]

664 < 
num_√w_∑Àâe
 &&

665 ()
≤g_±r
->
ödex_to_∑Àâe
[
p
->
right
]

666 < 
num_√w_∑Àâe
)

668 
j
, 
√xt_j
;

670 i‡(
num_√w_∑Àâe
 & 0x01)

672 
j
 = 
p
->
À·
;

673 
√xt_j
 = 
p
->
right
;

677 
j
 = 
p
->
right
;

678 
√xt_j
 = 
p
->
À·
;

681 
num_√w_∑Àâe
--;

682 
∑Àâe
[
≤g_±r
->
ödex_to_∑Àâe
[
j
]]

683 
∑Àâe
[
num_√w_∑Àâe
];

684 i‡(
fuŒ_qu™tize
 == 0)

686 
k
;

688 
k
 = 0; k < 
num_∑Àâe
; k++)

690 i‡(
≤g_±r
->
qu™tize_ödex
[
k
] ==

691 
≤g_±r
->
ödex_to_∑Àâe
[
j
])

692 
≤g_±r
->
qu™tize_ödex
[
k
] =

693 
≤g_±r
->
ödex_to_∑Àâe
[
√xt_j
];

695 i‡(()
≤g_±r
->
qu™tize_ödex
[
k
] ==

696 
num_√w_∑Àâe
)

697 
≤g_±r
->
qu™tize_ödex
[
k
] =

698 
≤g_±r
->
ödex_to_∑Àâe
[
j
];

702 
≤g_±r
->
ödex_to_∑Àâe
[≤g_±r->
∑Àâe_to_ödex


703 [
num_√w_∑Àâe
]] = 
≤g_±r
->
ödex_to_∑Àâe
[
j
];

705 
≤g_±r
->
∑Àâe_to_ödex
[≤g_±r->
ödex_to_∑Àâe
[
j
]]

706 
≤g_±r
->
∑Àâe_to_ödex
[
num_√w_∑Àâe
];

708 
≤g_±r
->
ödex_to_∑Àâe
[
j
] =

709 (
≤g_byã
)
num_√w_∑Àâe
;

711 
≤g_±r
->
∑Àâe_to_ödex
[
num_√w_∑Àâe
] =

712 (
≤g_byã
)
j
;

714 i‡(
num_√w_∑Àâe
 <
maximum_cﬁ‹s
)

717 i‡(
num_√w_∑Àâe
 <
maximum_cﬁ‹s
)

722 
i
 = 0; i < 769; i++)

724 i‡(
hash
[
i
] !
NULL
)

726 
≤g_ds‹ç
 
p
 = 
hash
[
i
];

727 
p
)

729 
t
 = 
p
->
√xt
;

730 
	`≤g_‰ì
(
≤g_±r
, 
p
);

731 
p
 = 
t
;

734 
hash
[
i
] = 0;

736 
max_d
 += 96;

738 
	`≤g_‰ì
(
≤g_±r
, 
hash
);

739 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
∑Àâe_to_ödex
);

740 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
ödex_to_∑Àâe
);

741 
≤g_±r
->
∑Àâe_to_ödex
 = 
NULL
;

742 
≤g_±r
->
ödex_to_∑Àâe
 = 
NULL
;

744 
num_∑Àâe
 = 
maximum_cﬁ‹s
;

746 i‡(
≤g_±r
->
∑Àâe
 =
NULL
)

748 
≤g_±r
->
∑Àâe
 =Öalette;

750 
≤g_±r
->
num_∑Àâe
 = (
≤g_uöt_16
)num_palette;

752 i‡(
fuŒ_qu™tize
 != 0)

754 
i
;

755 
≤g_byãp
 
di°™˚
;

756 
tŸÆ_bôs
 = 
PNG_QUANTIZE_RED_BITS
 + 
PNG_QUANTIZE_GREEN_BITS
 +

757 
PNG_QUANTIZE_BLUE_BITS
;

758 
num_ªd
 = (1 << 
PNG_QUANTIZE_RED_BITS
);

759 
num_gªí
 = (1 << 
PNG_QUANTIZE_GREEN_BITS
);

760 
num_blue
 = (1 << 
PNG_QUANTIZE_BLUE_BITS
);

761 
size_t
 
num_íåõs
 = ((size_t)1 << 
tŸÆ_bôs
);

763 
≤g_±r
->
∑Àâe_lookup
 = (
≤g_byãp
)
	`≤g_ˇŒoc
(png_ptr,

764 (
≤g_Æloc_size_t
)(
num_íåõs
 * ( (
≤g_byã
))));

766 
di°™˚
 = (
≤g_byãp
)
	`≤g_mÆloc
(
≤g_±r
, (
≤g_Æloc_size_t
)(
num_íåõs
 *

767 ( (
≤g_byã
))));

769 
	`mem£t
(
di°™˚
, 0xff, 
num_íåõs
 * ( (
≤g_byã
)));

771 
i
 = 0; i < 
num_∑Àâe
; i++)

773 
ú
, 
ig
, 
ib
;

774 
r
 = (
∑Àâe
[
i
].
ªd
 >> (8 - 
PNG_QUANTIZE_RED_BITS
));

775 
g
 = (
∑Àâe
[
i
].
gªí
 >> (8 - 
PNG_QUANTIZE_GREEN_BITS
));

776 
b
 = (
∑Àâe
[
i
].
blue
 >> (8 - 
PNG_QUANTIZE_BLUE_BITS
));

778 
ú
 = 0; i∏< 
num_ªd
; ir++)

781 
dr
 = ((
ú
 > 
r
) ? ir -Ñ :Ñ - ir);

782 
ödex_r
 = (
ú
 << (
PNG_QUANTIZE_BLUE_BITS
 +

783 
PNG_QUANTIZE_GREEN_BITS
));

785 
ig
 = 0; ig < 
num_gªí
; ig++)

788 
dg
 = ((
ig
 > 
g
) ? ig - g : g - ig);

789 
dt
 = 
dr
 + 
dg
;

790 
dm
 = ((
dr
 > 
dg
) ? dr : dg);

791 
ödex_g
 = 
ödex_r
 | (
ig
 << 
PNG_QUANTIZE_BLUE_BITS
);

793 
ib
 = 0; ib < 
num_blue
; ib++)

795 
d_ödex
 = 
ödex_g
 | 
ib
;

797 
db
 = ((
ib
 > 
b
) ? ib - b : b - ib);

798 
dmax
 = ((
dm
 > 
db
) ? dm : db);

799 
d
 = 
dmax
 + 
dt
 + 
db
;

801 i‡(
d
 < ()
di°™˚
[
d_ödex
])

803 
di°™˚
[
d_ödex
] = (
≤g_byã
)
d
;

804 
≤g_±r
->
∑Àâe_lookup
[
d_ödex
] = (
≤g_byã
)
i
;

811 
	`≤g_‰ì
(
≤g_±r
, 
di°™˚
);

813 
	}
}

816 #ifde‡
PNG_READ_GAMMA_SUPPORTED


817 
PNGFAPI


818 
	$≤g_£t_gamma_fixed
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_fixed_poöt
 
s¸n_gamma
,

819 
≤g_fixed_poöt
 
fûe_gamma
)

821 
	`≤g_debug
(1, "inÖng_set_gamma_fixed");

823 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

827 
s¸n_gamma
 = 
	`å™¶©e_gamma_Êags
(
≤g_±r
, scrn_gamma, 1 );

828 
fûe_gamma
 = 
	`å™¶©e_gamma_Êags
(
≤g_±r
, file_gamma, 0 );

841 i‡(
fûe_gamma
 <= 0)

842 
	`≤g_îr‹
(
≤g_±r
, "invalid file gamma inÖng_set_gamma");

844 i‡(
s¸n_gamma
 <= 0)

845 
	`≤g_îr‹
(
≤g_±r
, "invalid screen gamma inÖng_set_gamma");

851 
≤g_±r
->
cﬁ‹•a˚
.
gamma
 = 
fûe_gamma
;

852 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_HAVE_GAMMA
;

853 
≤g_±r
->
s¸ìn_gamma
 = 
s¸n_gamma
;

854 
	}
}

856 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


857 
PNGAPI


858 
	$≤g_£t_gamma
(
≤g_°ru˘Ω
 
≤g_±r
, 
s¸n_gamma
, 
fûe_gamma
)

860 
	`≤g_£t_gamma_fixed
(
≤g_±r
, 
	`c⁄vît_gamma_vÆue
’ng_±r, 
s¸n_gamma
),

861 
	`c⁄vît_gamma_vÆue
(
≤g_±r
, 
fûe_gamma
));

862 
	}
}

866 #ifde‡
PNG_READ_EXPAND_SUPPORTED


871 
PNGAPI


872 
	$≤g_£t_ex∑nd
(
≤g_°ru˘Ω
 
≤g_±r
)

874 
	`≤g_debug
(1, "inÖng_set_expand");

876 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

879 
≤g_±r
->
å™sf‹m©i⁄s
 |(
PNG_EXPAND
 | 
PNG_EXPAND_tRNS
);

880 
	}
}

901 
PNGAPI


902 
	$≤g_£t_∑Àâe_to_rgb
(
≤g_°ru˘Ω
 
≤g_±r
)

904 
	`≤g_debug
(1, "inÖng_set_palette_to_rgb");

906 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

909 
≤g_±r
->
å™sf‹m©i⁄s
 |(
PNG_EXPAND
 | 
PNG_EXPAND_tRNS
);

910 
	}
}

913 
PNGAPI


914 
	$≤g_£t_ex∑nd_gøy_1_2_4_to_8
(
≤g_°ru˘Ω
 
≤g_±r
)

916 
	`≤g_debug
(1, "inÖng_set_expand_gray_1_2_4_to_8");

918 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

921 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_EXPAND
;

922 
	}
}

925 
PNGAPI


926 
	$≤g_£t_tRNS_to_Æpha
(
≤g_°ru˘Ω
 
≤g_±r
)

928 
	`≤g_debug
(1, "inÖng_set_tRNS_to_alpha");

930 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

933 
≤g_±r
->
å™sf‹m©i⁄s
 |(
PNG_EXPAND
 | 
PNG_EXPAND_tRNS
);

934 
	}
}

937 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


941 
PNGAPI


942 
	$≤g_£t_ex∑nd_16
(
≤g_°ru˘Ω
 
≤g_±r
)

944 
	`≤g_debug
(1, "inÖng_set_expand_16");

946 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

949 
≤g_±r
->
å™sf‹m©i⁄s
 |(
PNG_EXPAND_16
 | 
PNG_EXPAND
 | 
PNG_EXPAND_tRNS
);

950 
	}
}

953 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


954 
PNGAPI


955 
	$≤g_£t_gøy_to_rgb
(
≤g_°ru˘Ω
 
≤g_±r
)

957 
	`≤g_debug
(1, "inÖng_set_gray_to_rgb");

959 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 0) == 0)

963 
	`≤g_£t_ex∑nd_gøy_1_2_4_to_8
(
≤g_±r
);

964 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_GRAY_TO_RGB
;

965 
	}
}

968 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


969 
PNGFAPI


970 
	$≤g_£t_rgb_to_gøy_fixed
(
≤g_°ru˘Ω
 
≤g_±r
, 
îr‹_a˘i⁄
,

971 
≤g_fixed_poöt
 
ªd
,Öng_fixed_poöà
gªí
)

973 
	`≤g_debug
(1, "inÖng_set_rgb_to_gray");

977 i‡(
	`≤g_πøn_ok
(
≤g_±r
, 1) == 0)

980 
îr‹_a˘i⁄
)

982 
PNG_ERROR_ACTION_NONE
:

983 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_RGB_TO_GRAY
;

986 
PNG_ERROR_ACTION_WARN
:

987 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_RGB_TO_GRAY_WARN
;

990 
PNG_ERROR_ACTION_ERROR
:

991 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_RGB_TO_GRAY_ERR
;

995 
	`≤g_îr‹
(
≤g_±r
, "invalidÉrroráctionÅoÑgb_to_gray");

998 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

999 #ifde‡
PNG_READ_EXPAND_SUPPORTED


1000 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_EXPAND
;

1006 
	`≤g_îr‹
(
≤g_±r
,

1013 i‡(
ªd
 >0 && 
gªí
 >0 &&Ñed + gªí <
PNG_FP_1
)

1015 
≤g_uöt_16
 
ªd_öt
, 
gªí_öt
;

1022 
ªd_öt
 = (
≤g_uöt_16
)(((
≤g_uöt_32
)
ªd
*32768)/100000);

1023 
gªí_öt
 = (
≤g_uöt_16
)(((
≤g_uöt_32
)
gªí
*32768)/100000);

1025 
≤g_±r
->
rgb_to_gøy_ªd_c€ff
 = 
ªd_öt
;

1026 
≤g_±r
->
rgb_to_gøy_gªí_c€ff
 = 
gªí_öt
;

1027 
≤g_±r
->
rgb_to_gøy_c€fficõ¡s_£t
 = 1;

1032 i‡(
ªd
 >0 && 
gªí
 >= 0)

1033 
	`≤g_≠p_w¨nög
(
≤g_±r
,

1042 i‡(
≤g_±r
->
rgb_to_gøy_ªd_c€ff
 == 0 &&

1043 
≤g_±r
->
rgb_to_gøy_gªí_c€ff
 == 0)

1045 
≤g_±r
->
rgb_to_gøy_ªd_c€ff
 = 6968;

1046 
≤g_±r
->
rgb_to_gøy_gªí_c€ff
 = 23434;

1051 
	}
}

1053 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1058 
PNGAPI


1059 
	$≤g_£t_rgb_to_gøy
(
≤g_°ru˘Ω
 
≤g_±r
, 
îr‹_a˘i⁄
, 
ªd
,

1060 
gªí
)

1062 
	`≤g_£t_rgb_to_gøy_fixed
(
≤g_±r
, 
îr‹_a˘i⁄
,

1063 
	`≤g_fixed
(
≤g_±r
, 
ªd
, "rgbÅo grayÑed coefficient"),

1064 
	`≤g_fixed
(
≤g_±r
, 
gªí
, "rgbÅo gray green coefficient"));

1065 
	}
}

1070 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

1071 
	$deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

1072 
PNGAPI


1073 
	$≤g_£t_ªad_u£r_å™sf‹m_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r


1074 
ªad_u£r_å™sf‹m_‚
)

1076 
	`≤g_debug
(1, "inÖng_set_read_user_transform_fn");

1078 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


1079 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_USER_TRANSFORM
;

1080 
≤g_±r
->
ªad_u£r_å™sf‹m_‚
 =Ñead_user_transform_fn;

1082 
	}
}

1085 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


1086 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1092 
	$≤g_gamma_thªshﬁd
(
≤g_fixed_poöt
 
s¸ìn_gamma
,Öng_fixed_poöà
fûe_gamma
)

1101 
≤g_fixed_poöt
 
gã°
;

1102  !
	`≤g_muldiv
(&
gã°
, 
s¸ìn_gamma
, 
fûe_gamma
, 
PNG_FP_1
) ||

1103 
	`≤g_gamma_signifiˇ¡
(
gã°
);

1104 
	}
}

1117 
	$≤g_öô_∑Àâe_å™sf‹m©i⁄s
(
≤g_°ru˘Ω
 
≤g_±r
)

1127 
öput_has_Æpha
 = 0;

1128 
öput_has_å™•¨ícy
 = 0;

1130 i‡(
≤g_±r
->
num_å™s
 > 0)

1132 
i
;

1135 
i
=0; i<
≤g_±r
->
num_å™s
; ++i)

1137 i‡(
≤g_±r
->
å™s_Æpha
[
i
] == 255)

1139 i‡(
≤g_±r
->
å™s_Æpha
[
i
] == 0)

1140 
öput_has_å™•¨ícy
 = 1;

1143 
öput_has_å™•¨ícy
 = 1;

1144 
öput_has_Æpha
 = 1;

1151 i‡(
öput_has_Æpha
 == 0)

1157 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_ENCODE_ALPHA
;

1158 
≤g_±r
->
Êags
 &~
PNG_FLAG_OPTIMIZE_ALPHA
;

1160 i‡(
öput_has_å™•¨ícy
 == 0)

1161 
≤g_±r
->
å™sf‹m©i⁄s
 &~(
PNG_COMPOSE
 | 
PNG_BACKGROUND_EXPAND
);

1164 #i‡
	`deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë&& deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1173 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BACKGROUND_EXPAND
) != 0 &&

1174 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) != 0)

1177 
≤g_±r
->
background
.
ªd
 =

1178 
≤g_±r
->
∑Àâe
[≤g_±r->
background
.
ödex
].
ªd
;

1179 
≤g_±r
->
background
.
gªí
 =

1180 
≤g_±r
->
∑Àâe
[≤g_±r->
background
.
ödex
].
gªí
;

1181 
≤g_±r
->
background
.
blue
 =

1182 
≤g_±r
->
∑Àâe
[≤g_±r->
background
.
ödex
].
blue
;

1184 #ifde‡
PNG_READ_INVERT_ALPHA_SUPPORTED


1185 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INVERT_ALPHA
) != 0)

1187 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND_tRNS
) == 0)

1192 
i
, 
i°›
 = 
≤g_±r
->
num_å™s
;

1194 
i
 = 0; i < 
i°›
; i++)

1195 
≤g_±r
->
å™s_Æpha
[
i
] =

1196 (
≤g_byã
)(255 - 
≤g_±r
->
å™s_Æpha
[
i
]);

1203 
	}
}

1206 
	$≤g_öô_rgb_å™sf‹m©i⁄s
(
≤g_°ru˘Ω
 
≤g_±r
)

1212 
öput_has_Æpha
 = (
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0;

1213 
öput_has_å™•¨ícy
 = 
≤g_±r
->
num_å™s
 > 0;

1216 i‡(
öput_has_Æpha
 == 0)

1222 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


1223 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_ENCODE_ALPHA
;

1224 
≤g_±r
->
Êags
 &~
PNG_FLAG_OPTIMIZE_ALPHA
;

1227 i‡(
öput_has_å™•¨ícy
 == 0)

1228 
≤g_±r
->
å™sf‹m©i⁄s
 &~(
PNG_COMPOSE
 | 
PNG_BACKGROUND_EXPAND
);

1231 #i‡
	`deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë&& deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1240 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BACKGROUND_EXPAND
) != 0 &&

1241 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) != 0 &&

1242 (
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) == 0)

1247 
gøy
 = 
≤g_±r
->
background
.gray;

1248 
å™s_gøy
 = 
≤g_±r
->
å™s_cﬁ‹
.
gøy
;

1250 
≤g_±r
->
bô_dïth
)

1253 
gøy
 *= 0xff;

1254 
å™s_gøy
 *= 0xff;

1258 
gøy
 *= 0x55;

1259 
å™s_gøy
 *= 0x55;

1263 
gøy
 *= 0x11;

1264 
å™s_gøy
 *= 0x11;

1277 
≤g_±r
->
background
.
ªd
 =Öng_±r->background.
gªí
 =

1278 
≤g_±r
->
background
.
blue
 = (
≤g_uöt_16
)
gøy
;

1280 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND_tRNS
) == 0)

1282 
≤g_±r
->
å™s_cﬁ‹
.
ªd
 =Öng_±r->å™s_cﬁ‹.
gªí
 =

1283 
≤g_±r
->
å™s_cﬁ‹
.
blue
 = (
≤g_uöt_16
)
å™s_gøy
;

1288 
	}
}

1291 
	$≤g_öô_ªad_å™sf‹m©i⁄s
(
≤g_°ru˘Ω
 
≤g_±r
)

1293 
	`≤g_debug
(1, "inÖng_init_read_transformations");

1303 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1314 
gamma_c‹ª˘i⁄
 = 0;

1316 i‡(
≤g_±r
->
cﬁ‹•a˚
.
gamma
 != 0)

1318 i‡(
≤g_±r
->
s¸ìn_gamma
 != 0)

1319 
gamma_c‹ª˘i⁄
 = 
	`≤g_gamma_thªshﬁd
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
,

1320 
≤g_±r
->
s¸ìn_gamma
);

1326 
≤g_±r
->
s¸ìn_gamma
 = 
	`≤g_ªcùroˇl
’ng_±r->
cﬁ‹•a˚
.
gamma
);

1329 i‡(
≤g_±r
->
s¸ìn_gamma
 != 0)

1335 
≤g_±r
->
cﬁ‹•a˚
.
gamma
 = 
	`≤g_ªcùroˇl
’ng_±r->
s¸ìn_gamma
);

1343 
≤g_±r
->
s¸ìn_gamma
 =Öng_±r->
cﬁ‹•a˚
.
gamma
 = 
PNG_FP_1
;

1346 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_HAVE_GAMMA
;

1356 i‡(
gamma_c‹ª˘i⁄
 != 0)

1357 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_GAMMA
;

1360 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_GAMMA
;

1393 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


1394 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_STRIP_ALPHA
) != 0 &&

1395 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) == 0)

1402 
≤g_±r
->
å™sf‹m©i⁄s
 &~(
PNG_BACKGROUND_EXPAND
 | 
PNG_ENCODE_ALPHA
 |

1403 
PNG_EXPAND_tRNS
);

1404 
≤g_±r
->
Êags
 &~
PNG_FLAG_OPTIMIZE_ALPHA
;

1413 
≤g_±r
->
num_å™s
 = 0;

1417 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


1421 i‡(
	`≤g_gamma_signifiˇ¡
(
≤g_±r
->
s¸ìn_gamma
) == 0)

1423 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_ENCODE_ALPHA
;

1424 
≤g_±r
->
Êags
 &~
PNG_FLAG_OPTIMIZE_ALPHA
;

1428 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1432 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) != 0)

1433 
	`≤g_cﬁ‹•a˚_£t_rgb_c€fficõ¡s
(
≤g_±r
);

1436 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


1437 #i‡
	`deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë&& deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

1453 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BACKGROUND_EXPAND
) != 0)

1458 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) == 0)

1459 
≤g_±r
->
mode
 |
PNG_BACKGROUND_IS_GRAY
;

1462 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0)

1469 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_GRAY_TO_RGB
) != 0)

1471 i‡(
≤g_±r
->
background
.
ªd
 =≤g_±r->background.
gªí
 &&

1472 
≤g_±r
->
background
.
ªd
 =≤g_±r->background.
blue
)

1474 
≤g_±r
->
mode
 |
PNG_BACKGROUND_IS_GRAY
;

1475 
≤g_±r
->
background
.
gøy
 =Öng_±r->background.
ªd
;

1493 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1494 
	`≤g_öô_∑Àâe_å™sf‹m©i⁄s
(
≤g_±r
);

1497 
	`≤g_öô_rgb_å™sf‹m©i⁄s
(
≤g_±r
);

1499 #i‡
	`deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) && \

1500 
	`deföed
(
PNG_READ_EXPAND_16_SUPPORTED
)

1501 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND_16
) != 0 &&

1502 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0 &&

1503 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BACKGROUND_EXPAND
) == 0 &&

1504 
≤g_±r
->
bô_dïth
 != 16)

1516 
	#CHOP
(
x
Ë(x)=((
≤g_uöt_16
)
	`PNG_DIV257
(x))

	)

1517 
	`CHOP
(
≤g_±r
->
background
.
ªd
);

1518 
	`CHOP
(
≤g_±r
->
background
.
gªí
);

1519 
	`CHOP
(
≤g_±r
->
background
.
blue
);

1520 
	`CHOP
(
≤g_±r
->
background
.
gøy
);

1521 #unde‡
CHOP


1525 #i‡
	`deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) && \

1526 (
	`deföed
(
PNG_READ_SCALE_16_TO_8_SUPPORTED
) || \

1527 
	`deföed
(
PNG_READ_STRIP_16_TO_8_SUPPORTED
))

1528 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & (
PNG_16_TO_8
|
PNG_SCALE_16_TO_8
)) != 0 &&

1529 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0 &&

1530 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BACKGROUND_EXPAND
) == 0 &&

1531 
≤g_±r
->
bô_dïth
 == 16)

1539 
≤g_±r
->
background
.
ªd
 = (
≤g_uöt_16
)(png_ptr->background.red * 257);

1540 
≤g_±r
->
background
.
gªí
 =

1541 (
≤g_uöt_16
)(
≤g_±r
->
background
.
gªí
 * 257);

1542 
≤g_±r
->
background
.
blue
 = (
≤g_uöt_16
)(png_ptr->background.blue * 257);

1543 
≤g_±r
->
background
.
gøy
 = (
≤g_uöt_16
)(png_ptr->background.gray * 257);

1555 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1556 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1558 
≤g_±r
->
background_1
 =Öng_±r->
background
;

1574 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_GAMMA
) != 0 ||

1575 ((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) != 0 &&

1576 (
	`≤g_gamma_signifiˇ¡
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
) != 0 ||

1577 
	`≤g_gamma_signifiˇ¡
(
≤g_±r
->
s¸ìn_gamma
) != 0)) ||

1578 ((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0 &&

1579 (
	`≤g_gamma_signifiˇ¡
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
) != 0 ||

1580 
	`≤g_gamma_signifiˇ¡
(
≤g_±r
->
s¸ìn_gamma
) != 0

1581 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1582 || (
≤g_±r
->
background_gamma_ty≥
 =
PNG_BACKGROUND_GAMMA_UNIQUE
 &&

1583 
	`≤g_gamma_signifiˇ¡
(
≤g_±r
->
background_gamma
) != 0)

1585 )Ë|| ((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_ENCODE_ALPHA
) != 0 &&

1586 
	`≤g_gamma_signifiˇ¡
(
≤g_±r
->
s¸ìn_gamma
) != 0))

1588 
	`≤g_buûd_gamma_èbÀ
(
≤g_±r
,Öng_±r->
bô_dïth
);

1590 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1591 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0)

1599 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) != 0)

1600 
	`≤g_w¨nög
(
≤g_±r
,

1603 i‡((
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
) != 0)

1608 
≤g_cﬁ‹
 
back
, 
back_1
;

1609 
≤g_cﬁ‹p
 
∑Àâe
 = 
≤g_±r
->palette;

1610 
num_∑Àâe
 = 
≤g_±r
->num_palette;

1611 
i
;

1612 i‡(
≤g_±r
->
background_gamma_ty≥
 =
PNG_BACKGROUND_GAMMA_FILE
)

1615 
back
.
ªd
 = 
≤g_±r
->
gamma_èbÀ
[≤g_±r->
background
.red];

1616 
back
.
gªí
 = 
≤g_±r
->
gamma_èbÀ
[≤g_±r->
background
.green];

1617 
back
.
blue
 = 
≤g_±r
->
gamma_èbÀ
[≤g_±r->
background
.blue];

1619 
back_1
.
ªd
 = 
≤g_±r
->
gamma_to_1
[≤g_±r->
background
.red];

1620 
back_1
.
gªí
 = 
≤g_±r
->
gamma_to_1
[≤g_±r->
background
.green];

1621 
back_1
.
blue
 = 
≤g_±r
->
gamma_to_1
[≤g_±r->
background
.blue];

1625 
≤g_fixed_poöt
 
g
, 
gs
;

1627 
≤g_±r
->
background_gamma_ty≥
)

1629 
PNG_BACKGROUND_GAMMA_SCREEN
:

1630 
g
 = (
≤g_±r
->
s¸ìn_gamma
);

1631 
gs
 = 
PNG_FP_1
;

1634 
PNG_BACKGROUND_GAMMA_FILE
:

1635 
g
 = 
	`≤g_ªcùroˇl
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
);

1636 
gs
 = 
	`≤g_ªcùroˇl2
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
,

1637 
≤g_±r
->
s¸ìn_gamma
);

1640 
PNG_BACKGROUND_GAMMA_UNIQUE
:

1641 
g
 = 
	`≤g_ªcùroˇl
(
≤g_±r
->
background_gamma
);

1642 
gs
 = 
	`≤g_ªcùroˇl2
(
≤g_±r
->
background_gamma
,

1643 
≤g_±r
->
s¸ìn_gamma
);

1646 
g
 = 
PNG_FP_1
;

1647 
gs
 = 
PNG_FP_1
;

1651 i‡(
	`≤g_gamma_signifiˇ¡
(
gs
) != 0)

1653 
back
.
ªd
 = 
	`≤g_gamma_8bô_c‹ª˘
(
≤g_±r
->
background
.red,

1654 
gs
);

1655 
back
.
gªí
 = 
	`≤g_gamma_8bô_c‹ª˘
(
≤g_±r
->
background
.green,

1656 
gs
);

1657 
back
.
blue
 = 
	`≤g_gamma_8bô_c‹ª˘
(
≤g_±r
->
background
.blue,

1658 
gs
);

1663 
back
.
ªd
 = (
≤g_byã
)
≤g_±r
->
background
.red;

1664 
back
.
gªí
 = (
≤g_byã
)
≤g_±r
->
background
.green;

1665 
back
.
blue
 = (
≤g_byã
)
≤g_±r
->
background
.blue;

1668 i‡(
	`≤g_gamma_signifiˇ¡
(
g
) != 0)

1670 
back_1
.
ªd
 = 
	`≤g_gamma_8bô_c‹ª˘
(
≤g_±r
->
background
.red,

1671 
g
);

1672 
back_1
.
gªí
 = 
	`≤g_gamma_8bô_c‹ª˘
(

1673 
≤g_±r
->
background
.
gªí
, 
g
);

1674 
back_1
.
blue
 = 
	`≤g_gamma_8bô_c‹ª˘
(
≤g_±r
->
background
.blue,

1675 
g
);

1680 
back_1
.
ªd
 = (
≤g_byã
)
≤g_±r
->
background
.red;

1681 
back_1
.
gªí
 = (
≤g_byã
)
≤g_±r
->
background
.green;

1682 
back_1
.
blue
 = (
≤g_byã
)
≤g_±r
->
background
.blue;

1686 
i
 = 0; i < 
num_∑Àâe
; i++)

1688 i‡(
i
 < ()
≤g_±r
->
num_å™s
 &&

1689 
≤g_±r
->
å™s_Æpha
[
i
] != 0xff)

1691 i‡(
≤g_±r
->
å™s_Æpha
[
i
] == 0)

1693 
∑Àâe
[
i
] = 
back
;

1697 
≤g_byã
 
v
, 
w
;

1699 
v
 = 
≤g_±r
->
gamma_to_1
[
∑Àâe
[
i
].
ªd
];

1700 
	`≤g_composôe
(
w
, 
v
, 
≤g_±r
->
å™s_Æpha
[
i
], 
back_1
.
ªd
);

1701 
∑Àâe
[
i
].
ªd
 = 
≤g_±r
->
gamma_‰om_1
[
w
];

1703 
v
 = 
≤g_±r
->
gamma_to_1
[
∑Àâe
[
i
].
gªí
];

1704 
	`≤g_composôe
(
w
, 
v
, 
≤g_±r
->
å™s_Æpha
[
i
], 
back_1
.
gªí
);

1705 
∑Àâe
[
i
].
gªí
 = 
≤g_±r
->
gamma_‰om_1
[
w
];

1707 
v
 = 
≤g_±r
->
gamma_to_1
[
∑Àâe
[
i
].
blue
];

1708 
	`≤g_composôe
(
w
, 
v
, 
≤g_±r
->
å™s_Æpha
[
i
], 
back_1
.
blue
);

1709 
∑Àâe
[
i
].
blue
 = 
≤g_±r
->
gamma_‰om_1
[
w
];

1714 
∑Àâe
[
i
].
ªd
 = 
≤g_±r
->
gamma_èbÀ
[palette[i].red];

1715 
∑Àâe
[
i
].
gªí
 = 
≤g_±r
->
gamma_èbÀ
[palette[i].green];

1716 
∑Àâe
[
i
].
blue
 = 
≤g_±r
->
gamma_èbÀ
[palette[i].blue];

1726 
≤g_±r
->
å™sf‹m©i⁄s
 &~(
PNG_COMPOSE
 | 
PNG_GAMMA
);

1732 
gs_sig
, 
g_sig
;

1733 
≤g_fixed_poöt
 
g
 = 
PNG_FP_1
;

1734 
≤g_fixed_poöt
 
gs
 = 
PNG_FP_1
;

1736 
≤g_±r
->
background_gamma_ty≥
)

1738 
PNG_BACKGROUND_GAMMA_SCREEN
:

1739 
g
 = 
≤g_±r
->
s¸ìn_gamma
;

1743 
PNG_BACKGROUND_GAMMA_FILE
:

1744 
g
 = 
	`≤g_ªcùroˇl
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
);

1745 
gs
 = 
	`≤g_ªcùroˇl2
(
≤g_±r
->
cﬁ‹•a˚
.
gamma
,

1746 
≤g_±r
->
s¸ìn_gamma
);

1749 
PNG_BACKGROUND_GAMMA_UNIQUE
:

1750 
g
 = 
	`≤g_ªcùroˇl
(
≤g_±r
->
background_gamma
);

1751 
gs
 = 
	`≤g_ªcùroˇl2
(
≤g_±r
->
background_gamma
,

1752 
≤g_±r
->
s¸ìn_gamma
);

1756 
	`≤g_îr‹
(
≤g_±r
, "invalid background gammaÅype");

1759 
g_sig
 = 
	`≤g_gamma_signifiˇ¡
(
g
);

1760 
gs_sig
 = 
	`≤g_gamma_signifiˇ¡
(
gs
);

1762 i‡(
g_sig
 != 0)

1763 
≤g_±r
->
background_1
.
gøy
 = 
	`≤g_gamma_c‹ª˘
(png_ptr,

1764 
≤g_±r
->
background
.
gøy
, 
g
);

1766 i‡(
gs_sig
 != 0)

1767 
≤g_±r
->
background
.
gøy
 = 
	`≤g_gamma_c‹ª˘
(png_ptr,

1768 
≤g_±r
->
background
.
gøy
, 
gs
);

1770 i‡((
≤g_±r
->
background
.
ªd
 !≤g_±r->background.
gªí
) ||

1771 (
≤g_±r
->
background
.
ªd
 !≤g_±r->background.
blue
) ||

1772 (
≤g_±r
->
background
.
ªd
 !≤g_±r->background.
gøy
))

1775 i‡(
g_sig
 != 0)

1777 
≤g_±r
->
background_1
.
ªd
 = 
	`≤g_gamma_c‹ª˘
(png_ptr,

1778 
≤g_±r
->
background
.
ªd
, 
g
);

1780 
≤g_±r
->
background_1
.
gªí
 = 
	`≤g_gamma_c‹ª˘
(png_ptr,

1781 
≤g_±r
->
background
.
gªí
, 
g
);

1783 
≤g_±r
->
background_1
.
blue
 = 
	`≤g_gamma_c‹ª˘
(png_ptr,

1784 
≤g_±r
->
background
.
blue
, 
g
);

1787 i‡(
gs_sig
 != 0)

1789 
≤g_±r
->
background
.
ªd
 = 
	`≤g_gamma_c‹ª˘
(png_ptr,

1790 
≤g_±r
->
background
.
ªd
, 
gs
);

1792 
≤g_±r
->
background
.
gªí
 = 
	`≤g_gamma_c‹ª˘
(png_ptr,

1793 
≤g_±r
->
background
.
gªí
, 
gs
);

1795 
≤g_±r
->
background
.
blue
 = 
	`≤g_gamma_c‹ª˘
(png_ptr,

1796 
≤g_±r
->
background
.
blue
, 
gs
);

1803 
≤g_±r
->
background_1
.
ªd
 =Öng_±r->background_1.
gªí


1804 
≤g_±r
->
background_1
.
blue
 =Öng_±r->background_1.
gøy
;

1806 
≤g_±r
->
background
.
ªd
 =Öng_±r->background.
gªí


1807 
≤g_±r
->
background
.
blue
 =Öng_±r->background.
gøy
;

1811 
≤g_±r
->
background_gamma_ty≥
 = 
PNG_BACKGROUND_GAMMA_SCREEN
;

1818 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE


1819 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


1821 && ((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) == 0 ||

1822 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) == 0)

1826 
≤g_cﬁ‹p
 
∑Àâe
 = 
≤g_±r
->palette;

1827 
num_∑Àâe
 = 
≤g_±r
->num_palette;

1828 
i
;

1833 
i
 = 0; i < 
num_∑Àâe
; i++)

1835 
∑Àâe
[
i
].
ªd
 = 
≤g_±r
->
gamma_èbÀ
[palette[i].red];

1836 
∑Àâe
[
i
].
gªí
 = 
≤g_±r
->
gamma_èbÀ
[palette[i].green];

1837 
∑Àâe
[
i
].
blue
 = 
≤g_±r
->
gamma_èbÀ
[palette[i].blue];

1841 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_GAMMA
;

1844 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1849 #ifde‡
PNG_READ_BACKGROUND_SUPPORTED


1851 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0 &&

1852 (
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
))

1854 
i
;

1855 
i°›
 = ()
≤g_±r
->
num_å™s
;

1856 
≤g_cﬁ‹
 
back
;

1857 
≤g_cﬁ‹p
 
∑Àâe
 = 
≤g_±r
->palette;

1859 
back
.
ªd
 = (
≤g_byã
)
≤g_±r
->
background
.red;

1860 
back
.
gªí
 = (
≤g_byã
)
≤g_±r
->
background
.green;

1861 
back
.
blue
 = (
≤g_byã
)
≤g_±r
->
background
.blue;

1863 
i
 = 0; i < 
i°›
; i++)

1865 i‡(
≤g_±r
->
å™s_Æpha
[
i
] == 0)

1867 
∑Àâe
[
i
] = 
back
;

1870 i‡(
≤g_±r
->
å™s_Æpha
[
i
] != 0xff)

1873 
	`≤g_composôe
(
∑Àâe
[
i
].
ªd
,Öalette[i].red,

1874 
≤g_±r
->
å™s_Æpha
[
i
], 
back
.
ªd
);

1876 
	`≤g_composôe
(
∑Àâe
[
i
].
gªí
,Öalette[i].green,

1877 
≤g_±r
->
å™s_Æpha
[
i
], 
back
.
gªí
);

1879 
	`≤g_composôe
(
∑Àâe
[
i
].
blue
,Öalette[i].blue,

1880 
≤g_±r
->
å™s_Æpha
[
i
], 
back
.
blue
);

1884 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_COMPOSE
;

1888 #ifde‡
PNG_READ_SHIFT_SUPPORTED


1889 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SHIFT
) != 0 &&

1890 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) == 0 &&

1891 (
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
))

1893 
i
;

1894 
i°›
 = 
≤g_±r
->
num_∑Àâe
;

1895 
shi·
 = 8 - 
≤g_±r
->
sig_bô
.
ªd
;

1897 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_SHIFT
;

1903 i‡(
shi·
 > 0 && shift < 8)

1904 
i
=0; i<
i°›
; ++i)

1906 
comp⁄ít
 = 
≤g_±r
->
∑Àâe
[
i
].
ªd
;

1908 
comp⁄ít
 >>
shi·
;

1909 
≤g_±r
->
∑Àâe
[
i
].
ªd
 = (
≤g_byã
)
comp⁄ít
;

1912 
shi·
 = 8 - 
≤g_±r
->
sig_bô
.
gªí
;

1913 i‡(
shi·
 > 0 && shift < 8)

1914 
i
=0; i<
i°›
; ++i)

1916 
comp⁄ít
 = 
≤g_±r
->
∑Àâe
[
i
].
gªí
;

1918 
comp⁄ít
 >>
shi·
;

1919 
≤g_±r
->
∑Àâe
[
i
].
gªí
 = (
≤g_byã
)
comp⁄ít
;

1922 
shi·
 = 8 - 
≤g_±r
->
sig_bô
.
blue
;

1923 i‡(
shi·
 > 0 && shift < 8)

1924 
i
=0; i<
i°›
; ++i)

1926 
comp⁄ít
 = 
≤g_±r
->
∑Àâe
[
i
].
blue
;

1928 
comp⁄ít
 >>
shi·
;

1929 
≤g_±r
->
∑Àâe
[
i
].
blue
 = (
≤g_byã
)
comp⁄ít
;

1933 
	}
}

1940 
	$≤g_ªad_å™sf‹m_öfo
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

1942 
	`≤g_debug
(1, "inÖng_read_transform_info");

1944 #ifde‡
PNG_READ_EXPAND_SUPPORTED


1945 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) != 0)

1947 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1953 i‡(
≤g_±r
->
num_å™s
 > 0)

1954 
öfo_±r
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB_ALPHA
;

1957 
öfo_±r
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

1959 
öfo_±r
->
bô_dïth
 = 8;

1960 
öfo_±r
->
num_å™s
 = 0;

1962 i‡(
≤g_±r
->
∑Àâe
 =
NULL
)

1963 
	`≤g_îr‹
 (
≤g_±r
, "Palette is NULL in indexed image");

1967 i‡(
≤g_±r
->
num_å™s
 != 0)

1969 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND_tRNS
) != 0)

1970 
öfo_±r
->
cﬁ‹_ty≥
 |
PNG_COLOR_MASK_ALPHA
;

1972 i‡(
öfo_±r
->
bô_dïth
 < 8)

1973 
öfo_±r
->
bô_dïth
 = 8;

1975 
öfo_±r
->
num_å™s
 = 0;

1980 #i‡
	`deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) ||\

1981 
	`deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
)

1985 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0)

1986 
öfo_±r
->
background
 = 
≤g_±r
->background;

1989 #ifde‡
PNG_READ_GAMMA_SUPPORTED


1999 
öfo_±r
->
cﬁ‹•a˚
.
gamma
 = 
≤g_±r
->colorspace.gamma;

2002 i‡(
öfo_±r
->
bô_dïth
 == 16)

2004 #ifde‡
PNG_READ_16BIT_SUPPORTED


2005 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


2006 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SCALE_16_TO_8
) != 0)

2007 
öfo_±r
->
bô_dïth
 = 8;

2010 #ifde‡
PNG_READ_STRIP_16_TO_8_SUPPORTED


2011 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_16_TO_8
) != 0)

2012 
öfo_±r
->
bô_dïth
 = 8;

2020 #ifde‡
PNG_READ_STRIP_16_TO_8_SUPPORTED


2025 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_16_TO_8
;

2026 
öfo_±r
->
bô_dïth
 = 8;

2029 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


2030 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_SCALE_16_TO_8
;

2031 
öfo_±r
->
bô_dïth
 = 8;

2034 
CONFIGURATION
 
ERROR
: 
you
 
mu°
 
íabÀ
 
©
 
Àa°
 
⁄e
 16 
to
 8 
mëhod


2040 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


2041 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_GRAY_TO_RGB
) != 0)

2042 
öfo_±r
->
cﬁ‹_ty≥
 = (
≤g_byã
)(info_ptr->color_type |

2043 
PNG_COLOR_MASK_COLOR
);

2046 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


2047 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) != 0)

2048 
öfo_±r
->
cﬁ‹_ty≥
 = (
≤g_byã
)(info_ptr->color_type &

2049 ~
PNG_COLOR_MASK_COLOR
);

2052 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


2053 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_QUANTIZE
) != 0)

2055 i‡(((
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
) ||

2056 (
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)) &&

2057 
≤g_±r
->
∑Àâe_lookup
 !0 && 
öfo_±r
->
bô_dïth
 == 8)

2059 
öfo_±r
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_PALETTE
;

2064 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


2065 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND_16
) != 0 &&

2066 
öfo_±r
->
bô_dïth
 == 8 &&

2067 
öfo_±r
->
cﬁ‹_ty≥
 !
PNG_COLOR_TYPE_PALETTE
)

2069 
öfo_±r
->
bô_dïth
 = 16;

2073 #ifde‡
PNG_READ_PACK_SUPPORTED


2074 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACK
) != 0 &&

2075 (
öfo_±r
->
bô_dïth
 < 8))

2076 
öfo_±r
->
bô_dïth
 = 8;

2079 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

2080 
öfo_±r
->
ch™√ls
 = 1;

2082 i‡((
öfo_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

2083 
öfo_±r
->
ch™√ls
 = 3;

2086 
öfo_±r
->
ch™√ls
 = 1;

2088 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


2089 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_STRIP_ALPHA
) != 0)

2091 
öfo_±r
->
cﬁ‹_ty≥
 = (
≤g_byã
)(info_ptr->color_type &

2092 ~
PNG_COLOR_MASK_ALPHA
);

2093 
öfo_±r
->
num_å™s
 = 0;

2097 i‡((
öfo_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

2098 
öfo_±r
->
ch™√ls
++;

2100 #ifde‡
PNG_READ_FILLER_SUPPORTED


2102 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_FILLER
) != 0 &&

2103 (
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

2104 
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
))

2106 
öfo_±r
->
ch™√ls
++;

2108 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_ADD_ALPHA
) != 0)

2109 
öfo_±r
->
cﬁ‹_ty≥
 |
PNG_COLOR_MASK_ALPHA
;

2113 #i‡
	`deföed
(
PNG_USER_TRANSFORM_PTR_SUPPORTED
) && \

2114 
	`deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
)

2115 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_USER_TRANSFORM
) != 0)

2117 i‡(
≤g_±r
->
u£r_å™sf‹m_dïth
 != 0)

2118 
öfo_±r
->
bô_dïth
 = 
≤g_±r
->
u£r_å™sf‹m_dïth
;

2120 i‡(
≤g_±r
->
u£r_å™sf‹m_ch™√ls
 != 0)

2121 
öfo_±r
->
ch™√ls
 = 
≤g_±r
->
u£r_å™sf‹m_ch™√ls
;

2125 
öfo_±r
->
pixñ_dïth
 = (
≤g_byã
)(öfo_±r->
ch™√ls
 *

2126 
öfo_±r
->
bô_dïth
);

2128 
öfo_±r
->
rowbyãs
 = 
	`PNG_ROWBYTES
(öfo_±r->
pixñ_dïth
, info_±r->
width
);

2136 
≤g_±r
->
öfo_rowbyãs
 = 
öfo_±r
->
rowbyãs
;

2138 #i‚de‡
PNG_READ_EXPAND_SUPPORTED


2139 i‡(
≤g_±r
 !
NULL
)

2142 
	}
}

2144 #ifde‡
PNG_READ_PACK_SUPPORTED


2152 
	$≤g_do_u≈ack
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

2154 
	`≤g_debug
(1, "inÖng_do_unpack");

2156 i‡(
row_öfo
->
bô_dïth
 < 8)

2158 
≤g_uöt_32
 
i
;

2159 
≤g_uöt_32
 
row_width
=
row_öfo
->
width
;

2161 
row_öfo
->
bô_dïth
)

2165 
≤g_byãp
 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 3);

2166 
≤g_byãp
 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

2167 
≤g_uöt_32
 
shi·
 = 7U - ((
row_width
 + 7U) & 0x07);

2168 
i
 = 0; i < 
row_width
; i++)

2170 *
dp
 = (
≤g_byã
)((*
•
 >> 
shi·
) & 0x01);

2172 i‡(
shi·
 == 7)

2174 
shi·
 = 0;

2175 
•
--;

2179 
shi·
++;

2181 
dp
--;

2189 
≤g_byãp
 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 2);

2190 
≤g_byãp
 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

2191 
≤g_uöt_32
 
shi·
 = ((3U - ((
row_width
 + 3U) & 0x03)) << 1);

2192 
i
 = 0; i < 
row_width
; i++)

2194 *
dp
 = (
≤g_byã
)((*
•
 >> 
shi·
) & 0x03);

2196 i‡(
shi·
 == 6)

2198 
shi·
 = 0;

2199 
•
--;

2203 
shi·
 += 2;

2205 
dp
--;

2212 
≤g_byãp
 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 1);

2213 
≤g_byãp
 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

2214 
≤g_uöt_32
 
shi·
 = ((1U - ((
row_width
 + 1U) & 0x01)) << 2);

2215 
i
 = 0; i < 
row_width
; i++)

2217 *
dp
 = (
≤g_byã
)((*
•
 >> 
shi·
) & 0x0f);

2219 i‡(
shi·
 == 4)

2221 
shi·
 = 0;

2222 
•
--;

2226 
shi·
 = 4;

2228 
dp
--;

2236 
row_öfo
->
bô_dïth
 = 8;

2237 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)(8 *Ñow_öfo->
ch™√ls
);

2238 
row_öfo
->
rowbyãs
 = 
row_width
 *Ñow_öfo->
ch™√ls
;

2240 
	}
}

2243 #ifde‡
PNG_READ_SHIFT_SUPPORTED


2250 
	$≤g_do_unshi·
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

2251 
≤g_c⁄°_cﬁ‹_8p
 
sig_bôs
)

2253 
cﬁ‹_ty≥
;

2255 
	`≤g_debug
(1, "inÖng_do_unshift");

2258 
cﬁ‹_ty≥
 = 
row_öfo
->color_type;

2260 i‡(
cﬁ‹_ty≥
 !
PNG_COLOR_TYPE_PALETTE
)

2262 
shi·
[4];

2263 
ch™√ls
 = 0;

2264 
bô_dïth
 = 
row_öfo
->bit_depth;

2266 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

2268 
shi·
[
ch™√ls
++] = 
bô_dïth
 - 
sig_bôs
->
ªd
;

2269 
shi·
[
ch™√ls
++] = 
bô_dïth
 - 
sig_bôs
->
gªí
;

2270 
shi·
[
ch™√ls
++] = 
bô_dïth
 - 
sig_bôs
->
blue
;

2275 
shi·
[
ch™√ls
++] = 
bô_dïth
 - 
sig_bôs
->
gøy
;

2278 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

2280 
shi·
[
ch™√ls
++] = 
bô_dïth
 - 
sig_bôs
->
Æpha
;

2284 
c
, 
have_shi·
;

2286 
c
 = 
have_shi·
 = 0; c < 
ch™√ls
; ++c)

2291 i‡(
shi·
[
c
] <0 || shi·[c] >
bô_dïth
)

2292 
shi·
[
c
] = 0;

2295 
have_shi·
 = 1;

2298 i‡(
have_shi·
 == 0)

2302 
bô_dïth
)

2313 
≤g_byãp
 
bp
 = 
row
;

2314 
≤g_byãp
 
bp_íd
 = 
bp
 + 
row_öfo
->
rowbyãs
;

2316 
bp
 < 
bp_íd
)

2318 
b
 = (*
bp
 >> 1) & 0x55;

2319 *
bp
++ = (
≤g_byã
)
b
;

2328 
≤g_byãp
 
bp
 = 
row
;

2329 
≤g_byãp
 
bp_íd
 = 
bp
 + 
row_öfo
->
rowbyãs
;

2330 
gøy_shi·
 = 
shi·
[0];

2331 
mask
 = 0x‡>> 
gøy_shi·
;

2333 
mask
 |= mask << 4;

2335 
bp
 < 
bp_íd
)

2337 
b
 = (*
bp
 >> 
gøy_shi·
Ë& 
mask
;

2338 *
bp
++ = (
≤g_byã
)
b
;

2346 
≤g_byãp
 
bp
 = 
row
;

2347 
≤g_byãp
 
bp_íd
 = 
bp
 + 
row_öfo
->
rowbyãs
;

2348 
ch™√l
 = 0;

2350 
bp
 < 
bp_íd
)

2352 
b
 = *
bp
 >> 
shi·
[
ch™√l
];

2353 i‡(++
ch™√l
 >
ch™√ls
)

2354 
ch™√l
 = 0;

2355 *
bp
++ = (
≤g_byã
)
b
;

2360 #ifde‡
PNG_READ_16BIT_SUPPORTED


2364 
≤g_byãp
 
bp
 = 
row
;

2365 
≤g_byãp
 
bp_íd
 = 
bp
 + 
row_öfo
->
rowbyãs
;

2366 
ch™√l
 = 0;

2368 
bp
 < 
bp_íd
)

2370 
vÆue
 = (
bp
[0] << 8) + bp[1];

2372 
vÆue
 >>
shi·
[
ch™√l
];

2373 i‡(++
ch™√l
 >
ch™√ls
)

2374 
ch™√l
 = 0;

2375 *
bp
++ = (
≤g_byã
)(
vÆue
 >> 8);

2376 *
bp
++ = (
≤g_byã
)
vÆue
;

2383 
	}
}

2386 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


2389 
	$≤g_do_sˇÀ_16_to_8
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

2391 
	`≤g_debug
(1, "inÖng_do_scale_16_to_8");

2393 i‡(
row_öfo
->
bô_dïth
 == 16)

2395 
≤g_byãp
 
•
 = 
row
;

2396 
≤g_byãp
 
dp
 = 
row
;

2397 
≤g_byãp
 
ï
 = 
•
 + 
row_öfo
->
rowbyãs
;

2399 
•
 < 
ï
)

2433 
≤g_öt_32
 
tmp
 = *
•
++;

2434 
tmp
 +((()*
•
++ -Åmp + 128) * 65535) >> 24;

2435 *
dp
++ = (
≤g_byã
)
tmp
;

2438 
row_öfo
->
bô_dïth
 = 8;

2439 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)(8 *Ñow_öfo->
ch™√ls
);

2440 
row_öfo
->
rowbyãs
 =Ñow_öfo->
width
 *Ñow_öfo->
ch™√ls
;

2442 
	}
}

2445 #ifde‡
PNG_READ_STRIP_16_TO_8_SUPPORTED


2450 
	$≤g_do_ch›
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

2452 
	`≤g_debug
(1, "inÖng_do_chop");

2454 i‡(
row_öfo
->
bô_dïth
 == 16)

2456 
≤g_byãp
 
•
 = 
row
;

2457 
≤g_byãp
 
dp
 = 
row
;

2458 
≤g_byãp
 
ï
 = 
•
 + 
row_öfo
->
rowbyãs
;

2460 
•
 < 
ï
)

2462 *
dp
++ = *
•
;

2463 
•
 += 2;

2466 
row_öfo
->
bô_dïth
 = 8;

2467 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)(8 *Ñow_öfo->
ch™√ls
);

2468 
row_öfo
->
rowbyãs
 =Ñow_öfo->
width
 *Ñow_öfo->
ch™√ls
;

2470 
	}
}

2473 #ifde‡
PNG_READ_SWAP_ALPHA_SUPPORTED


2475 
	$≤g_do_ªad_sw≠_Æpha
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

2477 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

2479 
	`≤g_debug
(1, "inÖng_do_read_swap_alpha");

2481 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

2484 i‡(
row_öfo
->
bô_dïth
 == 8)

2486 
≤g_byãp
 
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

2487 
≤g_byãp
 
dp
 = 
•
;

2488 
≤g_byã
 
ßve
;

2489 
≤g_uöt_32
 
i
;

2491 
i
 = 0; i < 
row_width
; i++)

2493 
ßve
 = *(--
•
);

2494 *(--
dp
Ë*(--
•
);

2495 *(--
dp
Ë*(--
•
);

2496 *(--
dp
Ë*(--
•
);

2497 *(--
dp
Ë
ßve
;

2501 #ifde‡
PNG_READ_16BIT_SUPPORTED


2505 
≤g_byãp
 
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

2506 
≤g_byãp
 
dp
 = 
•
;

2507 
≤g_byã
 
ßve
[2];

2508 
≤g_uöt_32
 
i
;

2510 
i
 = 0; i < 
row_width
; i++)

2512 
ßve
[0] = *(--
•
);

2513 
ßve
[1] = *(--
•
);

2514 *(--
dp
Ë*(--
•
);

2515 *(--
dp
Ë*(--
•
);

2516 *(--
dp
Ë*(--
•
);

2517 *(--
dp
Ë*(--
•
);

2518 *(--
dp
Ë*(--
•
);

2519 *(--
dp
Ë*(--
•
);

2520 *(--
dp
Ë
ßve
[0];

2521 *(--
dp
Ë
ßve
[1];

2527 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

2530 i‡(
row_öfo
->
bô_dïth
 == 8)

2532 
≤g_byãp
 
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

2533 
≤g_byãp
 
dp
 = 
•
;

2534 
≤g_byã
 
ßve
;

2535 
≤g_uöt_32
 
i
;

2537 
i
 = 0; i < 
row_width
; i++)

2539 
ßve
 = *(--
•
);

2540 *(--
dp
Ë*(--
•
);

2541 *(--
dp
Ë
ßve
;

2545 #ifde‡
PNG_READ_16BIT_SUPPORTED


2549 
≤g_byãp
 
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

2550 
≤g_byãp
 
dp
 = 
•
;

2551 
≤g_byã
 
ßve
[2];

2552 
≤g_uöt_32
 
i
;

2554 
i
 = 0; i < 
row_width
; i++)

2556 
ßve
[0] = *(--
•
);

2557 
ßve
[1] = *(--
•
);

2558 *(--
dp
Ë*(--
•
);

2559 *(--
dp
Ë*(--
•
);

2560 *(--
dp
Ë
ßve
[0];

2561 *(--
dp
Ë
ßve
[1];

2566 
	}
}

2569 #ifde‡
PNG_READ_INVERT_ALPHA_SUPPORTED


2571 
	$≤g_do_ªad_övît_Æpha
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

2573 
≤g_uöt_32
 
row_width
;

2574 
	`≤g_debug
(1, "inÖng_do_read_invert_alpha");

2576 
row_width
 = 
row_öfo
->
width
;

2577 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

2579 i‡(
row_öfo
->
bô_dïth
 == 8)

2582 
≤g_byãp
 
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

2583 
≤g_byãp
 
dp
 = 
•
;

2584 
≤g_uöt_32
 
i
;

2586 
i
 = 0; i < 
row_width
; i++)

2588 *(--
dp
Ë(
≤g_byã
)(255 - *(--
•
));

2596 
•
-=3;

2597 
dp
=
•
;

2601 #ifde‡
PNG_READ_16BIT_SUPPORTED


2605 
≤g_byãp
 
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

2606 
≤g_byãp
 
dp
 = 
•
;

2607 
≤g_uöt_32
 
i
;

2609 
i
 = 0; i < 
row_width
; i++)

2611 *(--
dp
Ë(
≤g_byã
)(255 - *(--
•
));

2612 *(--
dp
Ë(
≤g_byã
)(255 - *(--
•
));

2623 
•
-=6;

2624 
dp
=
•
;

2629 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

2631 i‡(
row_öfo
->
bô_dïth
 == 8)

2634 
≤g_byãp
 
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

2635 
≤g_byãp
 
dp
 = 
•
;

2636 
≤g_uöt_32
 
i
;

2638 
i
 = 0; i < 
row_width
; i++)

2640 *(--
dp
Ë(
≤g_byã
)(255 - *(--
•
));

2641 *(--
dp
Ë*(--
•
);

2645 #ifde‡
PNG_READ_16BIT_SUPPORTED


2649 
≤g_byãp
 
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

2650 
≤g_byãp
 
dp
 = 
•
;

2651 
≤g_uöt_32
 
i
;

2653 
i
 = 0; i < 
row_width
; i++)

2655 *(--
dp
Ë(
≤g_byã
)(255 - *(--
•
));

2656 *(--
dp
Ë(
≤g_byã
)(255 - *(--
•
));

2661 
•
-=2;

2662 
dp
=
•
;

2667 
	}
}

2670 #ifde‡
PNG_READ_FILLER_SUPPORTED


2673 
	$≤g_do_ªad_fûÀr
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

2674 
≤g_uöt_32
 
fûÀr
,Öng_uöt_32 
Êags
)

2676 
≤g_uöt_32
 
i
;

2677 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

2679 #ifde‡
PNG_READ_16BIT_SUPPORTED


2680 
≤g_byã
 
hi_fûÀr
 = (≤g_byã)(
fûÀr
>>8);

2682 
≤g_byã
 
lo_fûÀr
 = (≤g_byã)
fûÀr
;

2684 
	`≤g_debug
(1, "inÖng_do_read_filler");

2687 
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

2689 i‡(
row_öfo
->
bô_dïth
 == 8)

2691 i‡((
Êags
 & 
PNG_FLAG_FILLER_AFTER
) != 0)

2694 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
;

2695 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
;

2696 
i
 = 1; i < 
row_width
; i++)

2698 *(--
dp
Ë
lo_fûÀr
;

2699 *(--
dp
Ë*(--
•
);

2701 *(--
dp
Ë
lo_fûÀr
;

2702 
row_öfo
->
ch™√ls
 = 2;

2703 
row_öfo
->
pixñ_dïth
 = 16;

2704 
row_öfo
->
rowbyãs
 = 
row_width
 * 2;

2710 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
;

2711 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
;

2712 
i
 = 0; i < 
row_width
; i++)

2714 *(--
dp
Ë*(--
•
);

2715 *(--
dp
Ë
lo_fûÀr
;

2717 
row_öfo
->
ch™√ls
 = 2;

2718 
row_öfo
->
pixñ_dïth
 = 16;

2719 
row_öfo
->
rowbyãs
 = 
row_width
 * 2;

2723 #ifde‡
PNG_READ_16BIT_SUPPORTED


2724 i‡(
row_öfo
->
bô_dïth
 == 16)

2726 i‡((
Êags
 & 
PNG_FLAG_FILLER_AFTER
) != 0)

2729 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 2;

2730 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
 * 2;

2731 
i
 = 1; i < 
row_width
; i++)

2733 *(--
dp
Ë
lo_fûÀr
;

2734 *(--
dp
Ë
hi_fûÀr
;

2735 *(--
dp
Ë*(--
•
);

2736 *(--
dp
Ë*(--
•
);

2738 *(--
dp
Ë
lo_fûÀr
;

2739 *(--
dp
Ë
hi_fûÀr
;

2740 
row_öfo
->
ch™√ls
 = 2;

2741 
row_öfo
->
pixñ_dïth
 = 32;

2742 
row_öfo
->
rowbyãs
 = 
row_width
 * 4;

2748 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 2;

2749 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
 * 2;

2750 
i
 = 0; i < 
row_width
; i++)

2752 *(--
dp
Ë*(--
•
);

2753 *(--
dp
Ë*(--
•
);

2754 *(--
dp
Ë
lo_fûÀr
;

2755 *(--
dp
Ë
hi_fûÀr
;

2757 
row_öfo
->
ch™√ls
 = 2;

2758 
row_öfo
->
pixñ_dïth
 = 32;

2759 
row_öfo
->
rowbyãs
 = 
row_width
 * 4;

2764 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

2766 i‡(
row_öfo
->
bô_dïth
 == 8)

2768 i‡((
Êags
 & 
PNG_FLAG_FILLER_AFTER
) != 0)

2771 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 3;

2772 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
;

2773 
i
 = 1; i < 
row_width
; i++)

2775 *(--
dp
Ë
lo_fûÀr
;

2776 *(--
dp
Ë*(--
•
);

2777 *(--
dp
Ë*(--
•
);

2778 *(--
dp
Ë*(--
•
);

2780 *(--
dp
Ë
lo_fûÀr
;

2781 
row_öfo
->
ch™√ls
 = 4;

2782 
row_öfo
->
pixñ_dïth
 = 32;

2783 
row_öfo
->
rowbyãs
 = 
row_width
 * 4;

2789 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 3;

2790 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
;

2791 
i
 = 0; i < 
row_width
; i++)

2793 *(--
dp
Ë*(--
•
);

2794 *(--
dp
Ë*(--
•
);

2795 *(--
dp
Ë*(--
•
);

2796 *(--
dp
Ë
lo_fûÀr
;

2798 
row_öfo
->
ch™√ls
 = 4;

2799 
row_öfo
->
pixñ_dïth
 = 32;

2800 
row_öfo
->
rowbyãs
 = 
row_width
 * 4;

2804 #ifde‡
PNG_READ_16BIT_SUPPORTED


2805 i‡(
row_öfo
->
bô_dïth
 == 16)

2807 i‡((
Êags
 & 
PNG_FLAG_FILLER_AFTER
) != 0)

2810 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 6;

2811 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
 * 2;

2812 
i
 = 1; i < 
row_width
; i++)

2814 *(--
dp
Ë
lo_fûÀr
;

2815 *(--
dp
Ë
hi_fûÀr
;

2816 *(--
dp
Ë*(--
•
);

2817 *(--
dp
Ë*(--
•
);

2818 *(--
dp
Ë*(--
•
);

2819 *(--
dp
Ë*(--
•
);

2820 *(--
dp
Ë*(--
•
);

2821 *(--
dp
Ë*(--
•
);

2823 *(--
dp
Ë
lo_fûÀr
;

2824 *(--
dp
Ë
hi_fûÀr
;

2825 
row_öfo
->
ch™√ls
 = 4;

2826 
row_öfo
->
pixñ_dïth
 = 64;

2827 
row_öfo
->
rowbyãs
 = 
row_width
 * 8;

2833 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 6;

2834 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
 * 2;

2835 
i
 = 0; i < 
row_width
; i++)

2837 *(--
dp
Ë*(--
•
);

2838 *(--
dp
Ë*(--
•
);

2839 *(--
dp
Ë*(--
•
);

2840 *(--
dp
Ë*(--
•
);

2841 *(--
dp
Ë*(--
•
);

2842 *(--
dp
Ë*(--
•
);

2843 *(--
dp
Ë
lo_fûÀr
;

2844 *(--
dp
Ë
hi_fûÀr
;

2847 
row_öfo
->
ch™√ls
 = 4;

2848 
row_öfo
->
pixñ_dïth
 = 64;

2849 
row_öfo
->
rowbyãs
 = 
row_width
 * 8;

2854 
	}
}

2857 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


2860 
	$≤g_do_gøy_to_rgb
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

2862 
≤g_uöt_32
 
i
;

2863 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

2865 
	`≤g_debug
(1, "inÖng_do_gray_to_rgb");

2867 i‡(
row_öfo
->
bô_dïth
 >= 8 &&

2868 (
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) == 0)

2870 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

2872 i‡(
row_öfo
->
bô_dïth
 == 8)

2875 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 - 1;

2876 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
 * 2;

2877 
i
 = 0; i < 
row_width
; i++)

2879 *(
dp
--Ë*
•
;

2880 *(
dp
--Ë*
•
;

2881 *(
dp
--Ë*(
•
--);

2888 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 2 - 1;

2889 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
 * 4;

2890 
i
 = 0; i < 
row_width
; i++)

2892 *(
dp
--Ë*
•
;

2893 *(
dp
--Ë*(
•
 - 1);

2894 *(
dp
--Ë*
•
;

2895 *(
dp
--Ë*(
•
 - 1);

2896 *(
dp
--Ë*(
•
--);

2897 *(
dp
--Ë*(
•
--);

2902 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

2904 i‡(
row_öfo
->
bô_dïth
 == 8)

2907 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 2 - 1;

2908 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
 * 2;

2909 
i
 = 0; i < 
row_width
; i++)

2911 *(
dp
--Ë*(
•
--);

2912 *(
dp
--Ë*
•
;

2913 *(
dp
--Ë*
•
;

2914 *(
dp
--Ë*(
•
--);

2921 
≤g_byãp
 
•
 = 
row
 + (
size_t
)
row_width
 * 4 - 1;

2922 
≤g_byãp
 
dp
 = 
•
 + (
size_t
)
row_width
 * 4;

2923 
i
 = 0; i < 
row_width
; i++)

2925 *(
dp
--Ë*(
•
--);

2926 *(
dp
--Ë*(
•
--);

2927 *(
dp
--Ë*
•
;

2928 *(
dp
--Ë*(
•
 - 1);

2929 *(
dp
--Ë*
•
;

2930 *(
dp
--Ë*(
•
 - 1);

2931 *(
dp
--Ë*(
•
--);

2932 *(
dp
--Ë*(
•
--);

2936 
row_öfo
->
ch™√ls
 = (
≤g_byã
)(row_info->channels + 2);

2937 
row_öfo
->
cﬁ‹_ty≥
 |
PNG_COLOR_MASK_COLOR
;

2938 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)‘ow_öfo->
ch™√ls
 *

2939 
row_öfo
->
bô_dïth
);

2940 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
, 
row_width
);

2942 
	}
}

2945 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


2999 
	$≤g_do_rgb_to_gøy
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

3001 
rgb_îr‹
 = 0;

3003 
	`≤g_debug
(1, "inÖng_do_rgb_to_gray");

3005 i‡((
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_PALETTE
) == 0 &&

3006 (
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

3008 
≤g_uöt_32
 
rc
 = 
≤g_±r
->
rgb_to_gøy_ªd_c€ff
;

3009 
≤g_uöt_32
 
gc
 = 
≤g_±r
->
rgb_to_gøy_gªí_c€ff
;

3010 
≤g_uöt_32
 
bc
 = 32768 - 
rc
 - 
gc
;

3011 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

3012 
have_Æpha
 = (
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0;

3014 i‡(
row_öfo
->
bô_dïth
 == 8)

3016 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3022 i‡(
≤g_±r
->
gamma_‰om_1
 !
NULL
 &&Öng_±r->
gamma_to_1
 != NULL)

3024 
≤g_byãp
 
•
 = 
row
;

3025 
≤g_byãp
 
dp
 = 
row
;

3026 
≤g_uöt_32
 
i
;

3028 
i
 = 0; i < 
row_width
; i++)

3030 
≤g_byã
 
ªd
 = *(
•
++);

3031 
≤g_byã
 
gªí
 = *(
•
++);

3032 
≤g_byã
 
blue
 = *(
•
++);

3034 i‡(
ªd
 !
gªí
 ||Ñed !
blue
)

3036 
ªd
 = 
≤g_±r
->
gamma_to_1
[red];

3037 
gªí
 = 
≤g_±r
->
gamma_to_1
[green];

3038 
blue
 = 
≤g_±r
->
gamma_to_1
[blue];

3040 
rgb_îr‹
 |= 1;

3041 *(
dp
++Ë
≤g_±r
->
gamma_‰om_1
[

3042 (
rc
*
ªd
 + 
gc
*
gªí
 + 
bc
*
blue
 + 16384)>>15];

3050 i‡(
≤g_±r
->
gamma_èbÀ
 !
NULL
)

3051 
ªd
 = 
≤g_±r
->
gamma_èbÀ
[red];

3053 *(
dp
++Ë
ªd
;

3056 i‡(
have_Æpha
 != 0)

3057 *(
dp
++Ë*(
•
++);

3063 
≤g_byãp
 
•
 = 
row
;

3064 
≤g_byãp
 
dp
 = 
row
;

3065 
≤g_uöt_32
 
i
;

3067 
i
 = 0; i < 
row_width
; i++)

3069 
≤g_byã
 
ªd
 = *(
•
++);

3070 
≤g_byã
 
gªí
 = *(
•
++);

3071 
≤g_byã
 
blue
 = *(
•
++);

3073 i‡(
ªd
 !
gªí
 ||Ñed !
blue
)

3075 
rgb_îr‹
 |= 1;

3079 *(
dp
++Ë(
≤g_byã
)((
rc
*
ªd
 + 
gc
*
gªí
 + 
bc
*
blue
)>>15);

3083 *(
dp
++Ë
ªd
;

3085 i‡(
have_Æpha
 != 0)

3086 *(
dp
++Ë*(
•
++);

3093 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3094 i‡(
≤g_±r
->
gamma_16_to_1
 !
NULL
 &&Öng_±r->
gamma_16_‰om_1
 != NULL)

3096 
≤g_byãp
 
•
 = 
row
;

3097 
≤g_byãp
 
dp
 = 
row
;

3098 
≤g_uöt_32
 
i
;

3100 
i
 = 0; i < 
row_width
; i++)

3102 
≤g_uöt_16
 
ªd
, 
gªí
, 
blue
, 
w
;

3103 
≤g_byã
 
hi
,
lo
;

3105 
hi
=*(
•
)++; 
lo
=*(•)++; 
ªd
 = (
≤g_uöt_16
)((hi << 8) | (lo));

3106 
hi
=*(
•
)++; 
lo
=*(•)++; 
gªí
 = (
≤g_uöt_16
)((hi << 8) | (lo));

3107 
hi
=*(
•
)++; 
lo
=*(•)++; 
blue
 = (
≤g_uöt_16
)((hi << 8) | (lo));

3109 i‡(
ªd
 =
gªí
 &&Ñed =
blue
)

3111 i‡(
≤g_±r
->
gamma_16_èbÀ
 !
NULL
)

3112 
w
 = 
≤g_±r
->
gamma_16_èbÀ
[(
ªd
 & 0xff)

3113 >> 
≤g_±r
->
gamma_shi·
][
ªd
 >> 8];

3116 
w
 = 
ªd
;

3121 
≤g_uöt_16
 
ªd_1
 = 
≤g_±r
->
gamma_16_to_1
[(
ªd
 & 0xff)

3122 >> 
≤g_±r
->
gamma_shi·
][
ªd
>>8];

3123 
≤g_uöt_16
 
gªí_1
 =

3124 
≤g_±r
->
gamma_16_to_1
[(
gªí
 & 0xff) >>

3125 
≤g_±r
->
gamma_shi·
][
gªí
>>8];

3126 
≤g_uöt_16
 
blue_1
 = 
≤g_±r
->
gamma_16_to_1
[(
blue
 & 0xff)

3127 >> 
≤g_±r
->
gamma_shi·
][
blue
>>8];

3128 
≤g_uöt_16
 
gøy16
 = (≤g_uöt_16)((
rc
*
ªd_1
 + 
gc
*
gªí_1


3129 + 
bc
*
blue_1
 + 16384)>>15);

3130 
w
 = 
≤g_±r
->
gamma_16_‰om_1
[(
gøy16
 & 0xff) >>

3131 
≤g_±r
->
gamma_shi·
][
gøy16
 >> 8];

3132 
rgb_îr‹
 |= 1;

3135 *(
dp
++Ë(
≤g_byã
)((
w
>>8) & 0xff);

3136 *(
dp
++Ë(
≤g_byã
)(
w
 & 0xff);

3138 i‡(
have_Æpha
 != 0)

3140 *(
dp
++Ë*(
•
++);

3141 *(
dp
++Ë*(
•
++);

3148 
≤g_byãp
 
•
 = 
row
;

3149 
≤g_byãp
 
dp
 = 
row
;

3150 
≤g_uöt_32
 
i
;

3152 
i
 = 0; i < 
row_width
; i++)

3154 
≤g_uöt_16
 
ªd
, 
gªí
, 
blue
, 
gøy16
;

3155 
≤g_byã
 
hi
,
lo
;

3157 
hi
=*(
•
)++; 
lo
=*(•)++; 
ªd
 = (
≤g_uöt_16
)((hi << 8) | (lo));

3158 
hi
=*(
•
)++; 
lo
=*(•)++; 
gªí
 = (
≤g_uöt_16
)((hi << 8) | (lo));

3159 
hi
=*(
•
)++; 
lo
=*(•)++; 
blue
 = (
≤g_uöt_16
)((hi << 8) | (lo));

3161 i‡(
ªd
 !
gªí
 ||Ñed !
blue
)

3162 
rgb_îr‹
 |= 1;

3168 
gøy16
 = (
≤g_uöt_16
)((
rc
*
ªd
 + 
gc
*
gªí
 + 
bc
*
blue
 + 16384) >>

3170 *(
dp
++Ë(
≤g_byã
)((
gøy16
 >> 8) & 0xff);

3171 *(
dp
++Ë(
≤g_byã
)(
gøy16
 & 0xff);

3173 i‡(
have_Æpha
 != 0)

3175 *(
dp
++Ë*(
•
++);

3176 *(
dp
++Ë*(
•
++);

3182 
row_öfo
->
ch™√ls
 = (
≤g_byã
)(row_info->channels - 2);

3183 
row_öfo
->
cﬁ‹_ty≥
 = (
≤g_byã
)(row_info->color_type &

3184 ~
PNG_COLOR_MASK_COLOR
);

3185 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)‘ow_öfo->
ch™√ls
 *

3186 
row_öfo
->
bô_dïth
);

3187 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
, 
row_width
);

3189  
rgb_îr‹
;

3190 
	}
}

3193 #i‡
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) ||\

3194 
	$deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
)

3200 
	$≤g_do_compo£
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_°ru˘Ω
 
≤g_±r
)

3202 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3203 
≤g_c⁄°_byãp
 
gamma_èbÀ
 = 
≤g_±r
->gamma_table;

3204 
≤g_c⁄°_byãp
 
gamma_‰om_1
 = 
≤g_±r
->gamma_from_1;

3205 
≤g_c⁄°_byãp
 
gamma_to_1
 = 
≤g_±r
->gamma_to_1;

3206 
≤g_c⁄°_uöt_16µ
 
gamma_16
 = 
≤g_±r
->
gamma_16_èbÀ
;

3207 
≤g_c⁄°_uöt_16µ
 
gamma_16_‰om_1
 = 
≤g_±r
->gamma_16_from_1;

3208 
≤g_c⁄°_uöt_16µ
 
gamma_16_to_1
 = 
≤g_±r
->gamma_16_to_1;

3209 
gamma_shi·
 = 
≤g_±r
->gamma_shift;

3210 
›timize
 = (
≤g_±r
->
Êags
 & 
PNG_FLAG_OPTIMIZE_ALPHA
) != 0;

3213 
≤g_byãp
 
•
;

3214 
≤g_uöt_32
 
i
;

3215 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

3216 
shi·
;

3218 
	`≤g_debug
(1, "inÖng_do_compose");

3220 
row_öfo
->
cﬁ‹_ty≥
)

3222 
PNG_COLOR_TYPE_GRAY
:

3224 
row_öfo
->
bô_dïth
)

3228 
•
 = 
row
;

3229 
shi·
 = 7;

3230 
i
 = 0; i < 
row_width
; i++)

3232 i‡((
≤g_uöt_16
)((*
•
 >> 
shi·
) & 0x01)

3233 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3235 
tmp
 = *
•
 & (0x7f7‡>> (7 - 
shi·
));

3236 
tmp
 |=

3237 ()(
≤g_±r
->
background
.
gøy
 << 
shi·
);

3238 *
•
 = (
≤g_byã
)(
tmp
 & 0xff);

3241 i‡(
shi·
 == 0)

3243 
shi·
 = 7;

3244 
•
++;

3248 
shi·
--;

3255 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3256 i‡(
gamma_èbÀ
 !
NULL
)

3258 
•
 = 
row
;

3259 
shi·
 = 6;

3260 
i
 = 0; i < 
row_width
; i++)

3262 i‡((
≤g_uöt_16
)((*
•
 >> 
shi·
) & 0x03)

3263 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3265 
tmp
 = *
•
 & (0x3f3‡>> (6 - 
shi·
));

3266 
tmp
 |=

3267 ()
≤g_±r
->
background
.
gøy
 << 
shi·
;

3268 *
•
 = (
≤g_byã
)(
tmp
 & 0xff);

3273 
p
 = (*
•
 >> 
shi·
) & 0x03;

3274 
g
 = (
gamma_èbÀ
 [
p
 | (p << 2) |

3275 (
p
 << 4) | (p << 6)] >> 6) & 0x03;

3276 
tmp
 = *
•
 & (0x3f3‡>> (6 - 
shi·
));

3277 
tmp
 |()(
g
 << 
shi·
);

3278 *
•
 = (
≤g_byã
)(
tmp
 & 0xff);

3281 i‡(
shi·
 == 0)

3283 
shi·
 = 6;

3284 
•
++;

3288 
shi·
 -= 2;

3295 
•
 = 
row
;

3296 
shi·
 = 6;

3297 
i
 = 0; i < 
row_width
; i++)

3299 i‡((
≤g_uöt_16
)((*
•
 >> 
shi·
) & 0x03)

3300 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3302 
tmp
 = *
•
 & (0x3f3‡>> (6 - 
shi·
));

3303 
tmp
 |=

3304 ()
≤g_±r
->
background
.
gøy
 << 
shi·
;

3305 *
•
 = (
≤g_byã
)(
tmp
 & 0xff);

3308 i‡(
shi·
 == 0)

3310 
shi·
 = 6;

3311 
•
++;

3315 
shi·
 -= 2;

3323 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3324 i‡(
gamma_èbÀ
 !
NULL
)

3326 
•
 = 
row
;

3327 
shi·
 = 4;

3328 
i
 = 0; i < 
row_width
; i++)

3330 i‡((
≤g_uöt_16
)((*
•
 >> 
shi·
) & 0x0f)

3331 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3333 
tmp
 = *
•
 & (0x0f0‡>> (4 - 
shi·
));

3334 
tmp
 |=

3335 ()(
≤g_±r
->
background
.
gøy
 << 
shi·
);

3336 *
•
 = (
≤g_byã
)(
tmp
 & 0xff);

3341 
p
 = (*
•
 >> 
shi·
) & 0x0f;

3342 
g
 = (
gamma_èbÀ
[
p
 | (p << 4)] >> 4) &

3344 
tmp
 = *
•
 & (0x0f0‡>> (4 - 
shi·
));

3345 
tmp
 |()(
g
 << 
shi·
);

3346 *
•
 = (
≤g_byã
)(
tmp
 & 0xff);

3349 i‡(
shi·
 == 0)

3351 
shi·
 = 4;

3352 
•
++;

3356 
shi·
 -= 4;

3363 
•
 = 
row
;

3364 
shi·
 = 4;

3365 
i
 = 0; i < 
row_width
; i++)

3367 i‡((
≤g_uöt_16
)((*
•
 >> 
shi·
) & 0x0f)

3368 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3370 
tmp
 = *
•
 & (0x0f0‡>> (4 - 
shi·
));

3371 
tmp
 |=

3372 ()(
≤g_±r
->
background
.
gøy
 << 
shi·
);

3373 *
•
 = (
≤g_byã
)(
tmp
 & 0xff);

3376 i‡(
shi·
 == 0)

3378 
shi·
 = 4;

3379 
•
++;

3383 
shi·
 -= 4;

3391 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3392 i‡(
gamma_èbÀ
 !
NULL
)

3394 
•
 = 
row
;

3395 
i
 = 0; i < 
row_width
; i++, 
•
++)

3397 i‡(*
•
 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3398 *
•
 = (
≤g_byã
)
≤g_±r
->
background
.
gøy
;

3401 *
•
 = 
gamma_èbÀ
[*sp];

3407 
•
 = 
row
;

3408 
i
 = 0; i < 
row_width
; i++, 
•
++)

3410 i‡(*
•
 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3411 *
•
 = (
≤g_byã
)
≤g_±r
->
background
.
gøy
;

3419 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3420 i‡(
gamma_16
 !
NULL
)

3422 
•
 = 
row
;

3423 
i
 = 0; i < 
row_width
; i++, 
•
 += 2)

3425 
≤g_uöt_16
 
v
;

3427 
v
 = (
≤g_uöt_16
)(((*
•
) << 8) + *(sp + 1));

3429 i‡(
v
 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3432 *
•
 = (
≤g_byã
)((
≤g_±r
->
background
.
gøy
 >> 8)

3434 *(
•
 + 1Ë(
≤g_byã
)(
≤g_±r
->
background
.
gøy


3440 
v
 = 
gamma_16
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3441 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3442 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3449 
•
 = 
row
;

3450 
i
 = 0; i < 
row_width
; i++, 
•
 += 2)

3452 
≤g_uöt_16
 
v
;

3454 
v
 = (
≤g_uöt_16
)(((*
•
) << 8) + *(sp + 1));

3456 i‡(
v
 =
≤g_±r
->
å™s_cﬁ‹
.
gøy
)

3458 *
•
 = (
≤g_byã
)((
≤g_±r
->
background
.
gøy
 >> 8)

3460 *(
•
 + 1Ë(
≤g_byã
)(
≤g_±r
->
background
.
gøy


3474 
PNG_COLOR_TYPE_RGB
:

3476 i‡(
row_öfo
->
bô_dïth
 == 8)

3478 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3479 i‡(
gamma_èbÀ
 !
NULL
)

3481 
•
 = 
row
;

3482 
i
 = 0; i < 
row_width
; i++, 
•
 += 3)

3484 i‡(*
•
 =
≤g_±r
->
å™s_cﬁ‹
.
ªd
 &&

3485 *(
•
 + 1Ë=
≤g_±r
->
å™s_cﬁ‹
.
gªí
 &&

3486 *(
•
 + 2Ë=
≤g_±r
->
å™s_cﬁ‹
.
blue
)

3488 *
•
 = (
≤g_byã
)
≤g_±r
->
background
.
ªd
;

3489 *(
•
 + 1Ë(
≤g_byã
)
≤g_±r
->
background
.
gªí
;

3490 *(
•
 + 2Ë(
≤g_byã
)
≤g_±r
->
background
.
blue
;

3495 *
•
 = 
gamma_èbÀ
[*sp];

3496 *(
•
 + 1Ë
gamma_èbÀ
[*(sp + 1)];

3497 *(
•
 + 2Ë
gamma_èbÀ
[*(sp + 2)];

3504 
•
 = 
row
;

3505 
i
 = 0; i < 
row_width
; i++, 
•
 += 3)

3507 i‡(*
•
 =
≤g_±r
->
å™s_cﬁ‹
.
ªd
 &&

3508 *(
•
 + 1Ë=
≤g_±r
->
å™s_cﬁ‹
.
gªí
 &&

3509 *(
•
 + 2Ë=
≤g_±r
->
å™s_cﬁ‹
.
blue
)

3511 *
•
 = (
≤g_byã
)
≤g_±r
->
background
.
ªd
;

3512 *(
•
 + 1Ë(
≤g_byã
)
≤g_±r
->
background
.
gªí
;

3513 *(
•
 + 2Ë(
≤g_byã
)
≤g_±r
->
background
.
blue
;

3520 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3521 i‡(
gamma_16
 !
NULL
)

3523 
•
 = 
row
;

3524 
i
 = 0; i < 
row_width
; i++, 
•
 += 6)

3526 
≤g_uöt_16
 
r
 = (≤g_uöt_16)(((*
•
) << 8) + *(sp + 1));

3528 
≤g_uöt_16
 
g
 = (≤g_uöt_16)(((*(
•
 + 2)) << 8)

3529 + *(
•
 + 3));

3531 
≤g_uöt_16
 
b
 = (≤g_uöt_16)(((*(
•
 + 4)) << 8)

3532 + *(
•
 + 5));

3534 i‡(
r
 =
≤g_±r
->
å™s_cﬁ‹
.
ªd
 &&

3535 
g
 =
≤g_±r
->
å™s_cﬁ‹
.
gªí
 &&

3536 
b
 =
≤g_±r
->
å™s_cﬁ‹
.
blue
)

3539 *
•
 = (
≤g_byã
)((
≤g_±r
->
background
.
ªd
 >> 8) & 0xff);

3540 *(
•
 + 1Ë(
≤g_byã
)(
≤g_±r
->
background
.
ªd
 & 0xff);

3541 *(
•
 + 2Ë(
≤g_byã
)((
≤g_±r
->
background
.
gªí
 >> 8)

3543 *(
•
 + 3Ë(
≤g_byã
)(
≤g_±r
->
background
.
gªí


3545 *(
•
 + 4Ë(
≤g_byã
)((
≤g_±r
->
background
.
blue
 >> 8)

3547 *(
•
 + 5Ë(
≤g_byã
)(
≤g_±r
->
background
.
blue
 & 0xff);

3552 
≤g_uöt_16
 
v
 = 
gamma_16
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3553 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3554 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3556 
v
 = 
gamma_16
[*(
•
 + 3Ë>> 
gamma_shi·
][*(sp + 2)];

3557 *(
•
 + 2Ë(
≤g_byã
)((
v
 >> 8) & 0xff);

3558 *(
•
 + 3Ë(
≤g_byã
)(
v
 & 0xff);

3560 
v
 = 
gamma_16
[*(
•
 + 5Ë>> 
gamma_shi·
][*(sp + 4)];

3561 *(
•
 + 4Ë(
≤g_byã
)((
v
 >> 8) & 0xff);

3562 *(
•
 + 5Ë(
≤g_byã
)(
v
 & 0xff);

3570 
•
 = 
row
;

3571 
i
 = 0; i < 
row_width
; i++, 
•
 += 6)

3573 
≤g_uöt_16
 
r
 = (≤g_uöt_16)(((*
•
) << 8) + *(sp + 1));

3575 
≤g_uöt_16
 
g
 = (≤g_uöt_16)(((*(
•
 + 2)) << 8)

3576 + *(
•
 + 3));

3578 
≤g_uöt_16
 
b
 = (≤g_uöt_16)(((*(
•
 + 4)) << 8)

3579 + *(
•
 + 5));

3581 i‡(
r
 =
≤g_±r
->
å™s_cﬁ‹
.
ªd
 &&

3582 
g
 =
≤g_±r
->
å™s_cﬁ‹
.
gªí
 &&

3583 
b
 =
≤g_±r
->
å™s_cﬁ‹
.
blue
)

3585 *
•
 = (
≤g_byã
)((
≤g_±r
->
background
.
ªd
 >> 8) & 0xff);

3586 *(
•
 + 1Ë(
≤g_byã
)(
≤g_±r
->
background
.
ªd
 & 0xff);

3587 *(
•
 + 2Ë(
≤g_byã
)((
≤g_±r
->
background
.
gªí
 >> 8)

3589 *(
•
 + 3Ë(
≤g_byã
)(
≤g_±r
->
background
.
gªí


3591 *(
•
 + 4Ë(
≤g_byã
)((
≤g_±r
->
background
.
blue
 >> 8)

3593 *(
•
 + 5Ë(
≤g_byã
)(
≤g_±r
->
background
.
blue
 & 0xff);

3601 
PNG_COLOR_TYPE_GRAY_ALPHA
:

3603 i‡(
row_öfo
->
bô_dïth
 == 8)

3605 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3606 i‡(
gamma_to_1
 !
NULL
 && 
gamma_‰om_1
 != NULL &&

3607 
gamma_èbÀ
 !
NULL
)

3609 
•
 = 
row
;

3610 
i
 = 0; i < 
row_width
; i++, 
•
 += 2)

3612 
≤g_uöt_16
 
a
 = *(
•
 + 1);

3614 i‡(
a
 == 0xff)

3615 *
•
 = 
gamma_èbÀ
[*sp];

3617 i‡(
a
 == 0)

3620 *
•
 = (
≤g_byã
)
≤g_±r
->
background
.
gøy
;

3625 
≤g_byã
 
v
, 
w
;

3627 
v
 = 
gamma_to_1
[*
•
];

3628 
	`≤g_composôe
(
w
, 
v
, 
a
, 
≤g_±r
->
background_1
.
gøy
);

3629 i‡(
›timize
 == 0)

3630 
w
 = 
gamma_‰om_1
[w];

3631 *
•
 = 
w
;

3638 
•
 = 
row
;

3639 
i
 = 0; i < 
row_width
; i++, 
•
 += 2)

3641 
≤g_byã
 
a
 = *(
•
 + 1);

3643 i‡(
a
 == 0)

3644 *
•
 = (
≤g_byã
)
≤g_±r
->
background
.
gøy
;

3646 i‡(
a
 < 0xff)

3647 
	`≤g_composôe
(*
•
, *•, 
a
, 
≤g_±r
->
background
.
gøy
);

3653 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3654 i‡(
gamma_16
 !
NULL
 && 
gamma_16_‰om_1
 != NULL &&

3655 
gamma_16_to_1
 !
NULL
)

3657 
•
 = 
row
;

3658 
i
 = 0; i < 
row_width
; i++, 
•
 += 4)

3660 
≤g_uöt_16
 
a
 = (≤g_uöt_16)(((*(
•
 + 2)) << 8)

3661 + *(
•
 + 3));

3663 i‡(
a
 =(
≤g_uöt_16
)0xffff)

3665 
≤g_uöt_16
 
v
;

3667 
v
 = 
gamma_16
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3668 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3669 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3672 i‡(
a
 == 0)

3675 *
•
 = (
≤g_byã
)((
≤g_±r
->
background
.
gøy
 >> 8)

3677 *(
•
 + 1Ë(
≤g_byã
)(
≤g_±r
->
background
.
gøy
 & 0xff);

3682 
≤g_uöt_16
 
g
, 
v
, 
w
;

3684 
g
 = 
gamma_16_to_1
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3685 
	`≤g_composôe_16
(
v
, 
g
, 
a
, 
≤g_±r
->
background_1
.
gøy
);

3686 i‡(
›timize
 != 0)

3687 
w
 = 
v
;

3689 
w
 = 
gamma_16_‰om_1
[(
v
 & 0xff) >>

3690 
gamma_shi·
][
v
 >> 8];

3691 *
•
 = (
≤g_byã
)((
w
 >> 8) & 0xff);

3692 *(
•
 + 1Ë(
≤g_byã
)(
w
 & 0xff);

3699 
•
 = 
row
;

3700 
i
 = 0; i < 
row_width
; i++, 
•
 += 4)

3702 
≤g_uöt_16
 
a
 = (≤g_uöt_16)(((*(
•
 + 2)) << 8)

3703 + *(
•
 + 3));

3705 i‡(
a
 == 0)

3707 *
•
 = (
≤g_byã
)((
≤g_±r
->
background
.
gøy
 >> 8)

3709 *(
•
 + 1Ë(
≤g_byã
)(
≤g_±r
->
background
.
gøy
 & 0xff);

3712 i‡(
a
 < 0xffff)

3714 
≤g_uöt_16
 
g
, 
v
;

3716 
g
 = (
≤g_uöt_16
)(((*
•
) << 8) + *(sp + 1));

3717 
	`≤g_composôe_16
(
v
, 
g
, 
a
, 
≤g_±r
->
background
.
gøy
);

3718 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3719 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3727 
PNG_COLOR_TYPE_RGB_ALPHA
:

3729 i‡(
row_öfo
->
bô_dïth
 == 8)

3731 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3732 i‡(
gamma_to_1
 !
NULL
 && 
gamma_‰om_1
 != NULL &&

3733 
gamma_èbÀ
 !
NULL
)

3735 
•
 = 
row
;

3736 
i
 = 0; i < 
row_width
; i++, 
•
 += 4)

3738 
≤g_byã
 
a
 = *(
•
 + 3);

3740 i‡(
a
 == 0xff)

3742 *
•
 = 
gamma_èbÀ
[*sp];

3743 *(
•
 + 1Ë
gamma_èbÀ
[*(sp + 1)];

3744 *(
•
 + 2Ë
gamma_èbÀ
[*(sp + 2)];

3747 i‡(
a
 == 0)

3750 *
•
 = (
≤g_byã
)
≤g_±r
->
background
.
ªd
;

3751 *(
•
 + 1Ë(
≤g_byã
)
≤g_±r
->
background
.
gªí
;

3752 *(
•
 + 2Ë(
≤g_byã
)
≤g_±r
->
background
.
blue
;

3757 
≤g_byã
 
v
, 
w
;

3759 
v
 = 
gamma_to_1
[*
•
];

3760 
	`≤g_composôe
(
w
, 
v
, 
a
, 
≤g_±r
->
background_1
.
ªd
);

3761 i‡(
›timize
 =0Ë
w
 = 
gamma_‰om_1
[w];

3762 *
•
 = 
w
;

3764 
v
 = 
gamma_to_1
[*(
•
 + 1)];

3765 
	`≤g_composôe
(
w
, 
v
, 
a
, 
≤g_±r
->
background_1
.
gªí
);

3766 i‡(
›timize
 =0Ë
w
 = 
gamma_‰om_1
[w];

3767 *(
•
 + 1Ë
w
;

3769 
v
 = 
gamma_to_1
[*(
•
 + 2)];

3770 
	`≤g_composôe
(
w
, 
v
, 
a
, 
≤g_±r
->
background_1
.
blue
);

3771 i‡(
›timize
 =0Ë
w
 = 
gamma_‰om_1
[w];

3772 *(
•
 + 2Ë
w
;

3779 
•
 = 
row
;

3780 
i
 = 0; i < 
row_width
; i++, 
•
 += 4)

3782 
≤g_byã
 
a
 = *(
•
 + 3);

3784 i‡(
a
 == 0)

3786 *
•
 = (
≤g_byã
)
≤g_±r
->
background
.
ªd
;

3787 *(
•
 + 1Ë(
≤g_byã
)
≤g_±r
->
background
.
gªí
;

3788 *(
•
 + 2Ë(
≤g_byã
)
≤g_±r
->
background
.
blue
;

3791 i‡(
a
 < 0xff)

3793 
	`≤g_composôe
(*
•
, *•, 
a
, 
≤g_±r
->
background
.
ªd
);

3795 
	`≤g_composôe
(*(
•
 + 1), *(• + 1), 
a
,

3796 
≤g_±r
->
background
.
gªí
);

3798 
	`≤g_composôe
(*(
•
 + 2), *(• + 2), 
a
,

3799 
≤g_±r
->
background
.
blue
);

3806 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3807 i‡(
gamma_16
 !
NULL
 && 
gamma_16_‰om_1
 != NULL &&

3808 
gamma_16_to_1
 !
NULL
)

3810 
•
 = 
row
;

3811 
i
 = 0; i < 
row_width
; i++, 
•
 += 8)

3813 
≤g_uöt_16
 
a
 = (≤g_uöt_16)((’ng_uöt_16)(*(
•
 + 6))

3814 << 8Ë+ (
≤g_uöt_16
)(*(
•
 + 7)));

3816 i‡(
a
 =(
≤g_uöt_16
)0xffff)

3818 
≤g_uöt_16
 
v
;

3820 
v
 = 
gamma_16
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3821 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3822 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3824 
v
 = 
gamma_16
[*(
•
 + 3Ë>> 
gamma_shi·
][*(sp + 2)];

3825 *(
•
 + 2Ë(
≤g_byã
)((
v
 >> 8) & 0xff);

3826 *(
•
 + 3Ë(
≤g_byã
)(
v
 & 0xff);

3828 
v
 = 
gamma_16
[*(
•
 + 5Ë>> 
gamma_shi·
][*(sp + 4)];

3829 *(
•
 + 4Ë(
≤g_byã
)((
v
 >> 8) & 0xff);

3830 *(
•
 + 5Ë(
≤g_byã
)(
v
 & 0xff);

3833 i‡(
a
 == 0)

3836 *
•
 = (
≤g_byã
)((
≤g_±r
->
background
.
ªd
 >> 8) & 0xff);

3837 *(
•
 + 1Ë(
≤g_byã
)(
≤g_±r
->
background
.
ªd
 & 0xff);

3838 *(
•
 + 2Ë(
≤g_byã
)((
≤g_±r
->
background
.
gªí
 >> 8)

3840 *(
•
 + 3Ë(
≤g_byã
)(
≤g_±r
->
background
.
gªí


3842 *(
•
 + 4Ë(
≤g_byã
)((
≤g_±r
->
background
.
blue
 >> 8)

3844 *(
•
 + 5Ë(
≤g_byã
)(
≤g_±r
->
background
.
blue
 & 0xff);

3849 
≤g_uöt_16
 
v
, 
w
;

3851 
v
 = 
gamma_16_to_1
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3852 
	`≤g_composôe_16
(
w
, 
v
, 
a
, 
≤g_±r
->
background_1
.
ªd
);

3853 i‡(
›timize
 == 0)

3854 
w
 = 
gamma_16_‰om_1
[((w & 0xffË>> 
gamma_shi·
)][w >>

3856 *
•
 = (
≤g_byã
)((
w
 >> 8) & 0xff);

3857 *(
•
 + 1Ë(
≤g_byã
)(
w
 & 0xff);

3859 
v
 = 
gamma_16_to_1
[*(
•
 + 3Ë>> 
gamma_shi·
][*(sp + 2)];

3860 
	`≤g_composôe_16
(
w
, 
v
, 
a
, 
≤g_±r
->
background_1
.
gªí
);

3861 i‡(
›timize
 == 0)

3862 
w
 = 
gamma_16_‰om_1
[((w & 0xffË>> 
gamma_shi·
)][w >>

3865 *(
•
 + 2Ë(
≤g_byã
)((
w
 >> 8) & 0xff);

3866 *(
•
 + 3Ë(
≤g_byã
)(
w
 & 0xff);

3868 
v
 = 
gamma_16_to_1
[*(
•
 + 5Ë>> 
gamma_shi·
][*(sp + 4)];

3869 
	`≤g_composôe_16
(
w
, 
v
, 
a
, 
≤g_±r
->
background_1
.
blue
);

3870 i‡(
›timize
 == 0)

3871 
w
 = 
gamma_16_‰om_1
[((w & 0xffË>> 
gamma_shi·
)][w >>

3874 *(
•
 + 4Ë(
≤g_byã
)((
w
 >> 8) & 0xff);

3875 *(
•
 + 5Ë(
≤g_byã
)(
w
 & 0xff);

3883 
•
 = 
row
;

3884 
i
 = 0; i < 
row_width
; i++, 
•
 += 8)

3886 
≤g_uöt_16
 
a
 = (≤g_uöt_16)((’ng_uöt_16)(*(
•
 + 6))

3887 << 8Ë+ (
≤g_uöt_16
)(*(
•
 + 7)));

3889 i‡(
a
 == 0)

3891 *
•
 = (
≤g_byã
)((
≤g_±r
->
background
.
ªd
 >> 8) & 0xff);

3892 *(
•
 + 1Ë(
≤g_byã
)(
≤g_±r
->
background
.
ªd
 & 0xff);

3893 *(
•
 + 2Ë(
≤g_byã
)((
≤g_±r
->
background
.
gªí
 >> 8)

3895 *(
•
 + 3Ë(
≤g_byã
)(
≤g_±r
->
background
.
gªí


3897 *(
•
 + 4Ë(
≤g_byã
)((
≤g_±r
->
background
.
blue
 >> 8)

3899 *(
•
 + 5Ë(
≤g_byã
)(
≤g_±r
->
background
.
blue
 & 0xff);

3902 i‡(
a
 < 0xffff)

3904 
≤g_uöt_16
 
v
;

3906 
≤g_uöt_16
 
r
 = (≤g_uöt_16)(((*
•
) << 8) + *(sp + 1));

3907 
≤g_uöt_16
 
g
 = (≤g_uöt_16)(((*(
•
 + 2)) << 8)

3908 + *(
•
 + 3));

3909 
≤g_uöt_16
 
b
 = (≤g_uöt_16)(((*(
•
 + 4)) << 8)

3910 + *(
•
 + 5));

3912 
	`≤g_composôe_16
(
v
, 
r
, 
a
, 
≤g_±r
->
background
.
ªd
);

3913 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3914 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3916 
	`≤g_composôe_16
(
v
, 
g
, 
a
, 
≤g_±r
->
background
.
gªí
);

3917 *(
•
 + 2Ë(
≤g_byã
)((
v
 >> 8) & 0xff);

3918 *(
•
 + 3Ë(
≤g_byã
)(
v
 & 0xff);

3920 
	`≤g_composôe_16
(
v
, 
b
, 
a
, 
≤g_±r
->
background
.
blue
);

3921 *(
•
 + 4Ë(
≤g_byã
)((
v
 >> 8) & 0xff);

3922 *(
•
 + 5Ë(
≤g_byã
)(
v
 & 0xff);

3933 
	}
}

3936 #ifde‡
PNG_READ_GAMMA_SUPPORTED


3944 
	$≤g_do_gamma
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_°ru˘Ω
 
≤g_±r
)

3946 
≤g_c⁄°_byãp
 
gamma_èbÀ
 = 
≤g_±r
->gamma_table;

3947 
≤g_c⁄°_uöt_16µ
 
gamma_16_èbÀ
 = 
≤g_±r
->gamma_16_table;

3948 
gamma_shi·
 = 
≤g_±r
->gamma_shift;

3950 
≤g_byãp
 
•
;

3951 
≤g_uöt_32
 
i
;

3952 
≤g_uöt_32
 
row_width
=
row_öfo
->
width
;

3954 
	`≤g_debug
(1, "inÖng_do_gamma");

3956 i‡(((
row_öfo
->
bô_dïth
 <8 && 
gamma_èbÀ
 !
NULL
) ||

3957 (
row_öfo
->
bô_dïth
 =16 && 
gamma_16_èbÀ
 !
NULL
)))

3959 
row_öfo
->
cﬁ‹_ty≥
)

3961 
PNG_COLOR_TYPE_RGB
:

3963 i‡(
row_öfo
->
bô_dïth
 == 8)

3965 
•
 = 
row
;

3966 
i
 = 0; i < 
row_width
; i++)

3968 *
•
 = 
gamma_èbÀ
[*sp];

3969 
•
++;

3970 *
•
 = 
gamma_èbÀ
[*sp];

3971 
•
++;

3972 *
•
 = 
gamma_èbÀ
[*sp];

3973 
•
++;

3979 
•
 = 
row
;

3980 
i
 = 0; i < 
row_width
; i++)

3982 
≤g_uöt_16
 
v
;

3984 
v
 = 
gamma_16_èbÀ
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3985 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3986 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3987 
•
 += 2;

3989 
v
 = 
gamma_16_èbÀ
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3990 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3991 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3992 
•
 += 2;

3994 
v
 = 
gamma_16_èbÀ
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

3995 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

3996 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

3997 
•
 += 2;

4003 
PNG_COLOR_TYPE_RGB_ALPHA
:

4005 i‡(
row_öfo
->
bô_dïth
 == 8)

4007 
•
 = 
row
;

4008 
i
 = 0; i < 
row_width
; i++)

4010 *
•
 = 
gamma_èbÀ
[*sp];

4011 
•
++;

4013 *
•
 = 
gamma_èbÀ
[*sp];

4014 
•
++;

4016 *
•
 = 
gamma_èbÀ
[*sp];

4017 
•
++;

4019 
•
++;

4025 
•
 = 
row
;

4026 
i
 = 0; i < 
row_width
; i++)

4028 
≤g_uöt_16
 
v
 = 
gamma_16_èbÀ
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

4029 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

4030 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

4031 
•
 += 2;

4033 
v
 = 
gamma_16_èbÀ
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

4034 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

4035 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

4036 
•
 += 2;

4038 
v
 = 
gamma_16_èbÀ
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

4039 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

4040 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

4041 
•
 += 4;

4047 
PNG_COLOR_TYPE_GRAY_ALPHA
:

4049 i‡(
row_öfo
->
bô_dïth
 == 8)

4051 
•
 = 
row
;

4052 
i
 = 0; i < 
row_width
; i++)

4054 *
•
 = 
gamma_èbÀ
[*sp];

4055 
•
 += 2;

4061 
•
 = 
row
;

4062 
i
 = 0; i < 
row_width
; i++)

4064 
≤g_uöt_16
 
v
 = 
gamma_16_èbÀ
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

4065 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

4066 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

4067 
•
 += 4;

4073 
PNG_COLOR_TYPE_GRAY
:

4075 i‡(
row_öfo
->
bô_dïth
 == 2)

4077 
•
 = 
row
;

4078 
i
 = 0; i < 
row_width
; i += 4)

4080 
a
 = *
•
 & 0xc0;

4081 
b
 = *
•
 & 0x30;

4082 
c
 = *
•
 & 0x0c;

4083 
d
 = *
•
 & 0x03;

4085 *
•
 = (
≤g_byã
)(

4086 (((()
gamma_èbÀ
[
a
|(a>>2)|(a>>4)|(a>>6)]) ) & 0xc0)|

4087 (((()
gamma_èbÀ
[(
b
<<2)|b|(b>>2)|(b>>4)])>>2) & 0x30)|

4088 (((()
gamma_èbÀ
[(
c
<<4)|(c<<2)|c|(c>>2)])>>4) & 0x0c)|

4089 (((()
gamma_èbÀ
[(
d
<<6)|(d<<4)|(d<<2)|d])>>6) ));

4090 
•
++;

4094 i‡(
row_öfo
->
bô_dïth
 == 4)

4096 
•
 = 
row
;

4097 
i
 = 0; i < 
row_width
; i += 2)

4099 
msb
 = *
•
 & 0xf0;

4100 
lsb
 = *
•
 & 0x0f;

4102 *
•
 = (
≤g_byã
)(((()
gamma_èbÀ
[
msb
 | (msb >> 4)]) & 0xf0)

4103 | ((()
gamma_èbÀ
[(
lsb
 << 4) |Üsb]) >> 4));

4104 
•
++;

4108 i‡(
row_öfo
->
bô_dïth
 == 8)

4110 
•
 = 
row
;

4111 
i
 = 0; i < 
row_width
; i++)

4113 *
•
 = 
gamma_èbÀ
[*sp];

4114 
•
++;

4118 i‡(
row_öfo
->
bô_dïth
 == 16)

4120 
•
 = 
row
;

4121 
i
 = 0; i < 
row_width
; i++)

4123 
≤g_uöt_16
 
v
 = 
gamma_16_èbÀ
[*(
•
 + 1Ë>> 
gamma_shi·
][*sp];

4124 *
•
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

4125 *(
•
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

4126 
•
 += 2;

4136 
	}
}

4139 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


4145 
	$≤g_do_ícode_Æpha
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_°ru˘Ω
 
≤g_±r
)

4147 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

4149 
	`≤g_debug
(1, "inÖng_do_encode_alpha");

4151 i‡((
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

4153 i‡(
row_öfo
->
bô_dïth
 == 8)

4155 
≤g_byãp
 
èbÀ
 = 
≤g_±r
->
gamma_‰om_1
;

4157 i‡(
èbÀ
 !
NULL
)

4159 
°ï
 = (
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) ? 4 : 2;

4162 
row
 +
°ï
 - 1;

4164 ; 
row_width
 > 0; --row_width, 
row
 +
°ï
)

4165 *
row
 = 
èbÀ
[*row];

4171 i‡(
row_öfo
->
bô_dïth
 == 16)

4173 
≤g_uöt_16µ
 
èbÀ
 = 
≤g_±r
->
gamma_16_‰om_1
;

4174 
gamma_shi·
 = 
≤g_±r
->gamma_shift;

4176 i‡(
èbÀ
 !
NULL
)

4178 
°ï
 = (
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) ? 8 : 4;

4181 
row
 +
°ï
 - 2;

4183 ; 
row_width
 > 0; --row_width, 
row
 +
°ï
)

4185 
≤g_uöt_16
 
v
;

4187 
v
 = 
èbÀ
[*(
row
 + 1Ë>> 
gamma_shi·
][*row];

4188 *
row
 = (
≤g_byã
)((
v
 >> 8) & 0xff);

4189 *(
row
 + 1Ë(
≤g_byã
)(
v
 & 0xff);

4200 
	`≤g_w¨nög
(
≤g_±r
, "png_do_encode_alpha: unexpected call");

4201 
	}
}

4204 #ifde‡
PNG_READ_EXPAND_SUPPORTED


4209 
	$≤g_do_ex∑nd_∑Àâe
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
,

4210 
≤g_byãp
 
row
, 
≤g_c⁄°_cﬁ‹p
 
∑Àâe
, 
≤g_c⁄°_byãp
 
å™s_Æpha
,

4211 
num_å™s
)

4213 
shi·
, 
vÆue
;

4214 
≤g_byãp
 
•
, 
dp
;

4215 
≤g_uöt_32
 
i
;

4216 
≤g_uöt_32
 
row_width
=
row_öfo
->
width
;

4218 
	`≤g_debug
(1, "inÖng_do_expand_palette");

4220 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

4222 i‡(
row_öfo
->
bô_dïth
 < 8)

4224 
row_öfo
->
bô_dïth
)

4228 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 3);

4229 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

4230 
shi·
 = 7 - ()((
row_width
 + 7) & 0x07);

4231 
i
 = 0; i < 
row_width
; i++)

4233 i‡((*
•
 >> 
shi·
) & 0x01)

4234 *
dp
 = 1;

4237 *
dp
 = 0;

4239 i‡(
shi·
 == 7)

4241 
shi·
 = 0;

4242 
•
--;

4246 
shi·
++;

4248 
dp
--;

4255 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 2);

4256 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

4257 
shi·
 = ()((3 - ((
row_width
 + 3) & 0x03)) << 1);

4258 
i
 = 0; i < 
row_width
; i++)

4260 
vÆue
 = (*
•
 >> 
shi·
) & 0x03;

4261 *
dp
 = (
≤g_byã
)
vÆue
;

4262 i‡(
shi·
 == 6)

4264 
shi·
 = 0;

4265 
•
--;

4269 
shi·
 += 2;

4271 
dp
--;

4278 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 1);

4279 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

4280 
shi·
 = ()((
row_width
 & 0x01) << 2);

4281 
i
 = 0; i < 
row_width
; i++)

4283 
vÆue
 = (*
•
 >> 
shi·
) & 0x0f;

4284 *
dp
 = (
≤g_byã
)
vÆue
;

4285 i‡(
shi·
 == 4)

4287 
shi·
 = 0;

4288 
•
--;

4292 
shi·
 += 4;

4294 
dp
--;

4302 
row_öfo
->
bô_dïth
 = 8;

4303 
row_öfo
->
pixñ_dïth
 = 8;

4304 
row_öfo
->
rowbyãs
 = 
row_width
;

4307 i‡(
row_öfo
->
bô_dïth
 == 8)

4310 i‡(
num_å™s
 > 0)

4312 
•
 = 
row
 + (
size_t
)
row_width
 - 1;

4313 
dp
 = 
row
 + ((
size_t
)
row_width
 << 2) - 1;

4315 
i
 = 0;

4316 #ifde‡
PNG_ARM_NEON_INTRINSICS_AVAILABLE


4317 i‡(
≤g_±r
->
rifÊed_∑Àâe
 !
NULL
)

4323 
i
 = 
	`≤g_do_ex∑nd_∑Àâe_rgba8_√⁄
(
≤g_±r
, 
row_öfo
, 
row
,

4324 &
•
, &
dp
);

4327 
	`PNG_UNUSED
(
≤g_±r
)

4330 ; 
i
 < 
row_width
; i++)

4332 i‡(()(*
•
Ë>
num_å™s
)

4333 *
dp
-- = 0xff;

4335 *
dp
-- = 
å™s_Æpha
[*
•
];

4336 *
dp
-- = 
∑Àâe
[*
•
].
blue
;

4337 *
dp
-- = 
∑Àâe
[*
•
].
gªí
;

4338 *
dp
-- = 
∑Àâe
[*
•
].
ªd
;

4339 
•
--;

4341 
row_öfo
->
bô_dïth
 = 8;

4342 
row_öfo
->
pixñ_dïth
 = 32;

4343 
row_öfo
->
rowbyãs
 = 
row_width
 * 4;

4344 
row_öfo
->
cﬁ‹_ty≥
 = 6;

4345 
row_öfo
->
ch™√ls
 = 4;

4350 
•
 = 
row
 + (
size_t
)
row_width
 - 1;

4351 
dp
 = 
row
 + (
size_t
)(
row_width
 * 3) - 1;

4352 
i
 = 0;

4353 #ifde‡
PNG_ARM_NEON_INTRINSICS_AVAILABLE


4354 
i
 = 
	`≤g_do_ex∑nd_∑Àâe_rgb8_√⁄
(
≤g_±r
, 
row_öfo
, 
row
,

4355 &
•
, &
dp
);

4357 
	`PNG_UNUSED
(
≤g_±r
)

4360 ; 
i
 < 
row_width
; i++)

4362 *
dp
-- = 
∑Àâe
[*
•
].
blue
;

4363 *
dp
-- = 
∑Àâe
[*
•
].
gªí
;

4364 *
dp
-- = 
∑Àâe
[*
•
].
ªd
;

4365 
•
--;

4368 
row_öfo
->
bô_dïth
 = 8;

4369 
row_öfo
->
pixñ_dïth
 = 24;

4370 
row_öfo
->
rowbyãs
 = 
row_width
 * 3;

4371 
row_öfo
->
cﬁ‹_ty≥
 = 2;

4372 
row_öfo
->
ch™√ls
 = 3;

4377 
	}
}

4383 
	$≤g_do_ex∑nd
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

4384 
≤g_c⁄°_cﬁ‹_16p
 
å™s_cﬁ‹
)

4386 
shi·
, 
vÆue
;

4387 
≤g_byãp
 
•
, 
dp
;

4388 
≤g_uöt_32
 
i
;

4389 
≤g_uöt_32
 
row_width
=
row_öfo
->
width
;

4391 
	`≤g_debug
(1, "inÖng_do_expand");

4393 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

4395 
gøy
 = 
å™s_cﬁ‹
 !
NULL
 ?Årans_color->gray : 0;

4397 i‡(
row_öfo
->
bô_dïth
 < 8)

4399 
row_öfo
->
bô_dïth
)

4403 
gøy
 = (gray & 0x01) * 0xff;

4404 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 3);

4405 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

4406 
shi·
 = 7 - ()((
row_width
 + 7) & 0x07);

4407 
i
 = 0; i < 
row_width
; i++)

4409 i‡((*
•
 >> 
shi·
) & 0x01)

4410 *
dp
 = 0xff;

4413 *
dp
 = 0;

4415 i‡(
shi·
 == 7)

4417 
shi·
 = 0;

4418 
•
--;

4422 
shi·
++;

4424 
dp
--;

4431 
gøy
 = (gray & 0x03) * 0x55;

4432 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 2);

4433 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

4434 
shi·
 = ()((3 - ((
row_width
 + 3) & 0x03)) << 1);

4435 
i
 = 0; i < 
row_width
; i++)

4437 
vÆue
 = (*
•
 >> 
shi·
) & 0x03;

4438 *
dp
 = (
≤g_byã
)(
vÆue
 | (value << 2) | (value << 4) |

4439 (
vÆue
 << 6));

4440 i‡(
shi·
 == 6)

4442 
shi·
 = 0;

4443 
•
--;

4447 
shi·
 += 2;

4449 
dp
--;

4456 
gøy
 = (gray & 0x0f) * 0x11;

4457 
•
 = 
row
 + (
size_t
)((
row_width
 - 1) >> 1);

4458 
dp
 = 
row
 + (
size_t
)
row_width
 - 1;

4459 
shi·
 = ()((1 - ((
row_width
 + 1) & 0x01)) << 2);

4460 
i
 = 0; i < 
row_width
; i++)

4462 
vÆue
 = (*
•
 >> 
shi·
) & 0x0f;

4463 *
dp
 = (
≤g_byã
)(
vÆue
 | (value << 4));

4464 i‡(
shi·
 == 4)

4466 
shi·
 = 0;

4467 
•
--;

4471 
shi·
 = 4;

4473 
dp
--;

4482 
row_öfo
->
bô_dïth
 = 8;

4483 
row_öfo
->
pixñ_dïth
 = 8;

4484 
row_öfo
->
rowbyãs
 = 
row_width
;

4487 i‡(
å™s_cﬁ‹
 !
NULL
)

4489 i‡(
row_öfo
->
bô_dïth
 == 8)

4491 
gøy
 = gray & 0xff;

4492 
•
 = 
row
 + (
size_t
)
row_width
 - 1;

4493 
dp
 = 
row
 + ((
size_t
)
row_width
 << 1) - 1;

4495 
i
 = 0; i < 
row_width
; i++)

4497 i‡((*
•
 & 0xffUË=
gøy
)

4498 *
dp
-- = 0;

4501 *
dp
-- = 0xff;

4503 *
dp
-- = *
•
--;

4507 i‡(
row_öfo
->
bô_dïth
 == 16)

4509 
gøy_high
 = (
gøy
 >> 8) & 0xff;

4510 
gøy_low
 = 
gøy
 & 0xff;

4511 
•
 = 
row
 + 
row_öfo
->
rowbyãs
 - 1;

4512 
dp
 = 
row
 + (
row_öfo
->
rowbyãs
 << 1) - 1;

4513 
i
 = 0; i < 
row_width
; i++)

4515 i‡((*(
•
 - 1Ë& 0xffUË=
gøy_high
 &&

4516 (*(
•
Ë& 0xffUË=
gøy_low
)

4518 *
dp
-- = 0;

4519 *
dp
-- = 0;

4524 *
dp
-- = 0xff;

4525 *
dp
-- = 0xff;

4528 *
dp
-- = *
•
--;

4529 *
dp
-- = *
•
--;

4533 
row_öfo
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_GRAY_ALPHA
;

4534 
row_öfo
->
ch™√ls
 = 2;

4535 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)‘ow_öfo->
bô_dïth
 << 1);

4536 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
,

4537 
row_width
);

4540 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 &&

4541 
å™s_cﬁ‹
 !
NULL
)

4543 i‡(
row_öfo
->
bô_dïth
 == 8)

4545 
≤g_byã
 
ªd
 = (≤g_byã)(
å™s_cﬁ‹
->red & 0xff);

4546 
≤g_byã
 
gªí
 = (≤g_byã)(
å™s_cﬁ‹
->green & 0xff);

4547 
≤g_byã
 
blue
 = (≤g_byã)(
å™s_cﬁ‹
->blue & 0xff);

4548 
•
 = 
row
 + (
size_t
)
row_öfo
->
rowbyãs
 - 1;

4549 
dp
 = 
row
 + ((
size_t
)
row_width
 << 2) - 1;

4550 
i
 = 0; i < 
row_width
; i++)

4552 i‡(*(
•
 - 2Ë=
ªd
 && *(• - 1Ë=
gªí
 && *(•Ë=
blue
)

4553 *
dp
-- = 0;

4556 *
dp
-- = 0xff;

4558 *
dp
-- = *
•
--;

4559 *
dp
-- = *
•
--;

4560 *
dp
-- = *
•
--;

4563 i‡(
row_öfo
->
bô_dïth
 == 16)

4565 
≤g_byã
 
ªd_high
 = (≤g_byã)((
å™s_cﬁ‹
->
ªd
 >> 8) & 0xff);

4566 
≤g_byã
 
gªí_high
 = (≤g_byã)((
å™s_cﬁ‹
->
gªí
 >> 8) & 0xff);

4567 
≤g_byã
 
blue_high
 = (≤g_byã)((
å™s_cﬁ‹
->
blue
 >> 8) & 0xff);

4568 
≤g_byã
 
ªd_low
 = (≤g_byã)(
å™s_cﬁ‹
->
ªd
 & 0xff);

4569 
≤g_byã
 
gªí_low
 = (≤g_byã)(
å™s_cﬁ‹
->
gªí
 & 0xff);

4570 
≤g_byã
 
blue_low
 = (≤g_byã)(
å™s_cﬁ‹
->
blue
 & 0xff);

4571 
•
 = 
row
 + 
row_öfo
->
rowbyãs
 - 1;

4572 
dp
 = 
row
 + ((
size_t
)
row_width
 << 3) - 1;

4573 
i
 = 0; i < 
row_width
; i++)

4575 i‡(*(
•
 - 5Ë=
ªd_high
 &&

4576 *(
•
 - 4Ë=
ªd_low
 &&

4577 *(
•
 - 3Ë=
gªí_high
 &&

4578 *(
•
 - 2Ë=
gªí_low
 &&

4579 *(
•
 - 1Ë=
blue_high
 &&

4580 *(
•
 ) =
blue_low
)

4582 *
dp
-- = 0;

4583 *
dp
-- = 0;

4588 *
dp
-- = 0xff;

4589 *
dp
-- = 0xff;

4592 *
dp
-- = *
•
--;

4593 *
dp
-- = *
•
--;

4594 *
dp
-- = *
•
--;

4595 *
dp
-- = *
•
--;

4596 *
dp
-- = *
•
--;

4597 *
dp
-- = *
•
--;

4600 
row_öfo
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB_ALPHA
;

4601 
row_öfo
->
ch™√ls
 = 4;

4602 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)‘ow_öfo->
bô_dïth
 << 2);

4603 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
, 
row_width
);

4605 
	}
}

4608 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


4613 
	$≤g_do_ex∑nd_16
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

4615 i‡(
row_öfo
->
bô_dïth
 == 8 &&

4616 
row_öfo
->
cﬁ‹_ty≥
 !
PNG_COLOR_TYPE_PALETTE
)

4627 
≤g_byã
 *
•
 = 
row
 + 
row_öfo
->
rowbyãs
;

4628 
≤g_byã
 *
dp
 = 
•
 + 
row_öfo
->
rowbyãs
;

4629 
dp
 > 
•
)

4631 
dp
[-2] = dp[-1] = *--
•
; dp -= 2;

4634 
row_öfo
->
rowbyãs
 *= 2;

4635 
row_öfo
->
bô_dïth
 = 16;

4636 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)‘ow_öfo->
ch™√ls
 * 16);

4638 
	}
}

4641 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


4643 
	$≤g_do_qu™tize
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

4644 
≤g_c⁄°_byãp
 
∑Àâe_lookup
,Öng_c⁄°_byã∞
qu™tize_lookup
)

4646 
≤g_byãp
 
•
, 
dp
;

4647 
≤g_uöt_32
 
i
;

4648 
≤g_uöt_32
 
row_width
=
row_öfo
->
width
;

4650 
	`≤g_debug
(1, "inÖng_do_quantize");

4652 i‡(
row_öfo
->
bô_dïth
 == 8)

4654 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 && 
∑Àâe_lookup
)

4656 
r
, 
g
, 
b
, 
p
;

4657 
•
 = 
row
;

4658 
dp
 = 
row
;

4659 
i
 = 0; i < 
row_width
; i++)

4661 
r
 = *
•
++;

4662 
g
 = *
•
++;

4663 
b
 = *
•
++;

4672 
p
 = (((
r
 >> (8 - 
PNG_QUANTIZE_RED_BITS
)) &

4673 ((1 << 
PNG_QUANTIZE_RED_BITS
) - 1)) <<

4674 (
PNG_QUANTIZE_GREEN_BITS
 + 
PNG_QUANTIZE_BLUE_BITS
)) |

4675 (((
g
 >> (8 - 
PNG_QUANTIZE_GREEN_BITS
)) &

4676 ((1 << 
PNG_QUANTIZE_GREEN_BITS
) - 1)) <<

4677 (
PNG_QUANTIZE_BLUE_BITS
)) |

4678 ((
b
 >> (8 - 
PNG_QUANTIZE_BLUE_BITS
)) &

4679 ((1 << 
PNG_QUANTIZE_BLUE_BITS
) - 1));

4681 *
dp
++ = 
∑Àâe_lookup
[
p
];

4684 
row_öfo
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_PALETTE
;

4685 
row_öfo
->
ch™√ls
 = 1;

4686 
row_öfo
->
pixñ_dïth
 =Ñow_öfo->
bô_dïth
;

4687 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
, 
row_width
);

4690 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
 &&

4691 
∑Àâe_lookup
 !
NULL
)

4693 
r
, 
g
, 
b
, 
p
;

4694 
•
 = 
row
;

4695 
dp
 = 
row
;

4696 
i
 = 0; i < 
row_width
; i++)

4698 
r
 = *
•
++;

4699 
g
 = *
•
++;

4700 
b
 = *
•
++;

4701 
•
++;

4703 
p
 = (((
r
 >> (8 - 
PNG_QUANTIZE_RED_BITS
)) &

4704 ((1 << 
PNG_QUANTIZE_RED_BITS
) - 1)) <<

4705 (
PNG_QUANTIZE_GREEN_BITS
 + 
PNG_QUANTIZE_BLUE_BITS
)) |

4706 (((
g
 >> (8 - 
PNG_QUANTIZE_GREEN_BITS
)) &

4707 ((1 << 
PNG_QUANTIZE_GREEN_BITS
) - 1)) <<

4708 (
PNG_QUANTIZE_BLUE_BITS
)) |

4709 ((
b
 >> (8 - 
PNG_QUANTIZE_BLUE_BITS
)) &

4710 ((1 << 
PNG_QUANTIZE_BLUE_BITS
) - 1));

4712 *
dp
++ = 
∑Àâe_lookup
[
p
];

4715 
row_öfo
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_PALETTE
;

4716 
row_öfo
->
ch™√ls
 = 1;

4717 
row_öfo
->
pixñ_dïth
 =Ñow_öfo->
bô_dïth
;

4718 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
, 
row_width
);

4721 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 &&

4722 
qu™tize_lookup
)

4724 
•
 = 
row
;

4726 
i
 = 0; i < 
row_width
; i++, 
•
++)

4728 *
•
 = 
qu™tize_lookup
[*sp];

4732 
	}
}

4740 
	$≤g_do_ªad_å™sf‹m©i⁄s
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
)

4742 
	`≤g_debug
(1, "inÖng_do_read_transformations");

4744 i‡(
≤g_±r
->
row_buf
 =
NULL
)

4750 
	`≤g_îr‹
(
≤g_±r
, "NULLÑow buffer");

4759 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_DETECT_UNINITIALIZED
) != 0 &&

4760 (
≤g_±r
->
Êags
 & 
PNG_FLAG_ROW_INIT
) == 0)

4766 
	`≤g_îr‹
(
≤g_±r
, "UninitializedÑow");

4769 #ifde‡
PNG_READ_EXPAND_SUPPORTED


4770 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) != 0)

4772 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

4774 #ifde‡
PNG_ARM_NEON_INTRINSICS_AVAILABLE


4775 i‡((
≤g_±r
->
num_å™s
 > 0Ë&& (≤g_±r->
bô_dïth
 == 8))

4777 i‡(
≤g_±r
->
rifÊed_∑Àâe
 =
NULL
)

4780 
≤g_±r
->
rifÊed_∑Àâe
 =

4781 (
≤g_byãp
)
	`≤g_mÆloc
(
≤g_±r
, 256 * 4);

4782 
	`≤g_rifÊe_∑Àâe_√⁄
(
≤g_±r
);

4786 
	`≤g_do_ex∑nd_∑Àâe
(
≤g_±r
, 
row_öfo
,Öng_±r->
row_buf
 + 1,

4787 
≤g_±r
->
∑Àâe
,Öng_±r->
å™s_Æpha
,Öng_±r->
num_å™s
);

4792 i‡(
≤g_±r
->
num_å™s
 != 0 &&

4793 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND_tRNS
) != 0)

4794 
	`≤g_do_ex∑nd
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

4795 &(
≤g_±r
->
å™s_cﬁ‹
));

4798 
	`≤g_do_ex∑nd
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1, 
NULL
);

4803 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


4804 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_STRIP_ALPHA
) != 0 &&

4805 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) == 0 &&

4806 (
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
 ||

4807 
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
))

4808 
	`≤g_do_°rù_ch™√l
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

4812 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


4813 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) != 0)

4815 
rgb_îr‹
 =

4816 
	`≤g_do_rgb_to_gøy
(
≤g_±r
, 
row_öfo
,

4817 
≤g_±r
->
row_buf
 + 1);

4819 i‡(
rgb_îr‹
 != 0)

4821 
≤g_±r
->
rgb_to_gøy_°©us
=1;

4822 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) ==

4823 
PNG_RGB_TO_GRAY_WARN
)

4824 
	`≤g_w¨nög
(
≤g_±r
, "png_do_rgb_to_gray foundÇongrayÖixel");

4826 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) ==

4827 
PNG_RGB_TO_GRAY_ERR
)

4828 
	`≤g_îr‹
(
≤g_±r
, "png_do_rgb_to_gray foundÇongrayÖixel");

4864 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


4868 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_GRAY_TO_RGB
) != 0 &&

4869 (
≤g_±r
->
mode
 & 
PNG_BACKGROUND_IS_GRAY
) == 0)

4870 
	`≤g_do_gøy_to_rgb
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4873 #i‡
	`deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) ||\

4874 
	`deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
)

4875 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0)

4876 
	`≤g_do_compo£
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,Öng_ptr);

4879 #ifde‡
PNG_READ_GAMMA_SUPPORTED


4880 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_GAMMA
) != 0 &&

4881 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


4883 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_RGB_TO_GRAY
) == 0 &&

4885 #i‡
	`deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) ||\

4886 
	`deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
)

4890 !((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0 &&

4891 ((
≤g_±r
->
num_å™s
 != 0) ||

4892 (
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)) &&

4897 (
≤g_±r
->
cﬁ‹_ty≥
 !
PNG_COLOR_TYPE_PALETTE
))

4898 
	`≤g_do_gamma
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,Öng_ptr);

4901 #ifde‡
PNG_READ_STRIP_ALPHA_SUPPORTED


4902 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_STRIP_ALPHA
) != 0 &&

4903 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_COMPOSE
) != 0 &&

4904 (
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
 ||

4905 
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
))

4906 
	`≤g_do_°rù_ch™√l
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

4910 #ifde‡
PNG_READ_ALPHA_MODE_SUPPORTED


4911 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_ENCODE_ALPHA
) != 0 &&

4912 (
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

4913 
	`≤g_do_ícode_Æpha
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,Öng_ptr);

4916 #ifde‡
PNG_READ_SCALE_16_TO_8_SUPPORTED


4917 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SCALE_16_TO_8
) != 0)

4918 
	`≤g_do_sˇÀ_16_to_8
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4921 #ifde‡
PNG_READ_STRIP_16_TO_8_SUPPORTED


4926 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_16_TO_8
) != 0)

4927 
	`≤g_do_ch›
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4930 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


4931 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_QUANTIZE
) != 0)

4933 
	`≤g_do_qu™tize
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

4934 
≤g_±r
->
∑Àâe_lookup
,Öng_±r->
qu™tize_ödex
);

4936 i‡(
row_öfo
->
rowbyãs
 == 0)

4937 
	`≤g_îr‹
(
≤g_±r
, "png_do_quantizeÑeturnedÑowbytes=0");

4941 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


4947 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND_16
) != 0)

4948 
	`≤g_do_ex∑nd_16
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4951 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


4953 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_GRAY_TO_RGB
) != 0 &&

4954 (
≤g_±r
->
mode
 & 
PNG_BACKGROUND_IS_GRAY
) != 0)

4955 
	`≤g_do_gøy_to_rgb
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4958 #ifde‡
PNG_READ_INVERT_SUPPORTED


4959 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INVERT_MONO
) != 0)

4960 
	`≤g_do_övît
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4963 #ifde‡
PNG_READ_INVERT_ALPHA_SUPPORTED


4964 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INVERT_ALPHA
) != 0)

4965 
	`≤g_do_ªad_övît_Æpha
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4968 #ifde‡
PNG_READ_SHIFT_SUPPORTED


4969 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SHIFT
) != 0)

4970 
	`≤g_do_unshi·
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

4971 &(
≤g_±r
->
shi·
));

4974 #ifde‡
PNG_READ_PACK_SUPPORTED


4975 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACK
) != 0)

4976 
	`≤g_do_u≈ack
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4979 #ifde‡
PNG_READ_CHECK_FOR_INVALID_INDEX_SUPPORTED


4981 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 &&

4982 
≤g_±r
->
num_∑Àâe_max
 >= 0)

4983 
	`≤g_do_check_∑Àâe_ödexes
(
≤g_±r
, 
row_öfo
);

4986 #ifde‡
PNG_READ_BGR_SUPPORTED


4987 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BGR
) != 0)

4988 
	`≤g_do_bgr
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4991 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


4992 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

4993 
	`≤g_do_∑cksw≠
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

4996 #ifde‡
PNG_READ_FILLER_SUPPORTED


4997 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_FILLER
) != 0)

4998 
	`≤g_do_ªad_fûÀr
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

4999 (
≤g_uöt_32
)
≤g_±r
->
fûÀr
,Öng_±r->
Êags
);

5002 #ifde‡
PNG_READ_SWAP_ALPHA_SUPPORTED


5003 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SWAP_ALPHA
) != 0)

5004 
	`≤g_do_ªad_sw≠_Æpha
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

5007 #ifde‡
PNG_READ_16BIT_SUPPORTED


5008 #ifde‡
PNG_READ_SWAP_SUPPORTED


5009 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SWAP_BYTES
) != 0)

5010 
	`≤g_do_sw≠
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

5014 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


5015 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_USER_TRANSFORM
) != 0)

5017 i‡(
≤g_±r
->
ªad_u£r_å™sf‹m_‚
 !
NULL
)

5018 (*(
≤g_±r
->
ªad_u£r_å™sf‹m_‚
))

5019 (
≤g_±r
,

5020 
row_öfo
,

5027 
≤g_±r
->
row_buf
 + 1);

5028 #ifde‡
PNG_USER_TRANSFORM_PTR_SUPPORTED


5029 i‡(
≤g_±r
->
u£r_å™sf‹m_dïth
 != 0)

5030 
row_öfo
->
bô_dïth
 = 
≤g_±r
->
u£r_å™sf‹m_dïth
;

5032 i‡(
≤g_±r
->
u£r_å™sf‹m_ch™√ls
 != 0)

5033 
row_öfo
->
ch™√ls
 = 
≤g_±r
->
u£r_å™sf‹m_ch™√ls
;

5035 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)‘ow_öfo->
bô_dïth
 *

5036 
row_öfo
->
ch™√ls
);

5038 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
,Ñow_öfo->
width
);

5041 
	}
}

	@pngrutil.c

17 
	~"≤g¥iv.h
"

19 #ifde‡
PNG_READ_SUPPORTED


21 
≤g_uöt_32
 
PNGAPI


22 
	$≤g_gë_uöt_31
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
buf
)

24 
≤g_uöt_32
 
uvÆ
 = 
	`≤g_gë_uöt_32
(
buf
);

26 i‡(
uvÆ
 > 
PNG_UINT_31_MAX
)

27 
	`≤g_îr‹
(
≤g_±r
, "PNG unsigned integer out ofÑange");

29  (
uvÆ
);

30 
	}
}

32 #i‡
deföed
(
PNG_READ_gAMA_SUPPORTED
Ë|| deföed(
PNG_READ_cHRM_SUPPORTED
)

38 
	#PNG_FIXED_ERROR
 (-1)

	)

40 
≤g_fixed_poöt


41 
	$≤g_gë_fixed_poöt
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
buf
)

43 
≤g_uöt_32
 
uvÆ
 = 
	`≤g_gë_uöt_32
(
buf
);

45 i‡(
uvÆ
 <
PNG_UINT_31_MAX
)

46  (
≤g_fixed_poöt
)
uvÆ
;

49 i‡(
≤g_±r
 !
NULL
)

50 
	`≤g_w¨nög
(
≤g_±r
, "PNG fixedÖoint integer out ofÑange");

52  
PNG_FIXED_ERROR
;

53 
	}
}

56 #ifde‡
PNG_READ_INT_FUNCTIONS_SUPPORTED


67 
	$≤g_uöt_32
 (
PNGAPI


68 
≤g_gë_uöt_32
)(
≤g_c⁄°_byãp
 
buf
)

70 
≤g_uöt_32
 
uvÆ
 =

71 ((
≤g_uöt_32
)(*(
buf
 )) << 24) +

72 ((
≤g_uöt_32
)(*(
buf
 + 1)) << 16) +

73 ((
≤g_uöt_32
)(*(
buf
 + 2)) << 8) +

74 ((
≤g_uöt_32
)(*(
buf
 + 3)) ) ;

76  
uvÆ
;

77 
	}
}

84 
	$≤g_öt_32
 (
PNGAPI


85 
≤g_gë_öt_32
)(
≤g_c⁄°_byãp
 
buf
)

87 
≤g_uöt_32
 
uvÆ
 = 
	`≤g_gë_uöt_32
(
buf
);

88 i‡((
uvÆ
 & 0x80000000) == 0)

89  (
≤g_öt_32
)
uvÆ
;

91 
uvÆ
 = (uval ^ 0xffffffff) + 1;

92 i‡((
uvÆ
 & 0x80000000) == 0)

93  -(
≤g_öt_32
)
uvÆ
;

99 
	}
}

102 
	$≤g_uöt_16
 (
PNGAPI


103 
≤g_gë_uöt_16
)(
≤g_c⁄°_byãp
 
buf
)

110 
vÆ
 =

111 (()(*
buf
) << 8) +

112 (()(*(
buf
 + 1)));

114  (
≤g_uöt_16
)
vÆ
;

115 
	}
}

121 
	$≤g_ªad_sig
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

123 
size_t
 
num_checked
, 
num_to_check
;

126 i‡(
≤g_±r
->
sig_byãs
 >= 8)

129 
num_checked
 = 
≤g_±r
->
sig_byãs
;

130 
num_to_check
 = 8 - 
num_checked
;

132 #ifde‡
PNG_IO_STATE_SUPPORTED


133 
≤g_±r
->
io_°©e
 = 
PNG_IO_READING
 | 
PNG_IO_SIGNATURE
;

137 
	`≤g_ªad_d©a
(
≤g_±r
, &(
öfo_±r
->
sig«tuª
[
num_checked
]), 
num_to_check
);

138 
≤g_±r
->
sig_byãs
 = 8;

140 i‡(
	`≤g_sig_cmp
(
öfo_±r
->
sig«tuª
, 
num_checked
, 
num_to_check
) != 0)

142 i‡(
num_checked
 < 4 &&

143 
	`≤g_sig_cmp
(
öfo_±r
->
sig«tuª
, 
num_checked
, 
num_to_check
 - 4))

144 
	`≤g_îr‹
(
≤g_±r
, "Notá PNG file");

146 
	`≤g_îr‹
(
≤g_±r
, "PNG file corrupted by ASCII conversion");

148 i‡(
num_checked
 < 3)

149 
≤g_±r
->
mode
 |
PNG_HAVE_PNG_SIGNATURE
;

150 
	}
}

155 
≤g_uöt_32


156 
	$≤g_ªad_chunk_hódî
(
≤g_°ru˘Ω
 
≤g_±r
)

158 
≤g_byã
 
buf
[8];

159 
≤g_uöt_32
 
Àngth
;

161 #ifde‡
PNG_IO_STATE_SUPPORTED


162 
≤g_±r
->
io_°©e
 = 
PNG_IO_READING
 | 
PNG_IO_CHUNK_HDR
;

168 
	`≤g_ªad_d©a
(
≤g_±r
, 
buf
, 8);

169 
Àngth
 = 
	`≤g_gë_uöt_31
(
≤g_±r
, 
buf
);

172 
≤g_±r
->
chunk_«me
 = 
	`PNG_CHUNK_FROM_STRING
(
buf
+4);

174 
	`≤g_debug2
(0, "Reading %lx chunk,Üength = %lu",

175 ()
≤g_±r
->
chunk_«me
, ()
Àngth
);

178 
	`≤g_ª£t_¸c
(
≤g_±r
);

179 
	`≤g_ˇlcuœã_¸c
(
≤g_±r
, 
buf
 + 4, 4);

182 
	`≤g_check_chunk_«me
(
≤g_±r
,Öng_±r->
chunk_«me
);

185 
	`≤g_check_chunk_Àngth
(
≤g_±r
, 
Àngth
);

187 #ifde‡
PNG_IO_STATE_SUPPORTED


188 
≤g_±r
->
io_°©e
 = 
PNG_IO_READING
 | 
PNG_IO_CHUNK_DATA
;

191  
Àngth
;

192 
	}
}

196 
	$≤g_¸c_ªad
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
buf
, 
≤g_uöt_32
 
Àngth
)

198 i‡(
≤g_±r
 =
NULL
)

201 
	`≤g_ªad_d©a
(
≤g_±r
, 
buf
, 
Àngth
);

202 
	`≤g_ˇlcuœã_¸c
(
≤g_±r
, 
buf
, 
Àngth
);

203 
	}
}

211 
	$≤g_¸c_föish
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
skù
)

216 
skù
 > 0)

218 
≤g_uöt_32
 
Àn
;

219 
≤g_byã
 
tmpbuf
[
PNG_INFLATE_BUF_SIZE
];

221 
Àn
 = ( 
tmpbuf
);

222 i‡(
Àn
 > 
skù
)

223 
Àn
 = 
skù
;

224 
skù
 -
Àn
;

226 
	`≤g_¸c_ªad
(
≤g_±r
, 
tmpbuf
, 
Àn
);

229 i‡(
	`≤g_¸c_îr‹
(
≤g_±r
) != 0)

231 i‡(
	`PNG_CHUNK_ANCILLARY
(
≤g_±r
->
chunk_«me
) != 0 ?

232 (
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_ANCILLARY_NOWARN
) == 0 :

233 (
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_CRITICAL_USE
) != 0)

235 
	`≤g_chunk_w¨nög
(
≤g_±r
, "CRCÉrror");

239 
	`≤g_chunk_îr‹
(
≤g_±r
, "CRCÉrror");

245 
	}
}

251 
	$≤g_¸c_îr‹
(
≤g_°ru˘Ω
 
≤g_±r
)

253 
≤g_byã
 
¸c_byãs
[4];

254 
≤g_uöt_32
 
¸c
;

255 
√ed_¸c
 = 1;

257 i‡(
	`PNG_CHUNK_ANCILLARY
(
≤g_±r
->
chunk_«me
) != 0)

259 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_ANCILLARY_MASK
) ==

260 (
PNG_FLAG_CRC_ANCILLARY_USE
 | 
PNG_FLAG_CRC_ANCILLARY_NOWARN
))

261 
√ed_¸c
 = 0;

266 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_CRITICAL_IGNORE
) != 0)

267 
√ed_¸c
 = 0;

270 #ifde‡
PNG_IO_STATE_SUPPORTED


271 
≤g_±r
->
io_°©e
 = 
PNG_IO_READING
 | 
PNG_IO_CHUNK_CRC
;

275 
	`≤g_ªad_d©a
(
≤g_±r
, 
¸c_byãs
, 4);

277 i‡(
√ed_¸c
 != 0)

279 
¸c
 = 
	`≤g_gë_uöt_32
(
¸c_byãs
);

280  (()(
¸c
 !
≤g_±r
->crc));

285 
	}
}

287 #i‡
deföed
(
PNG_READ_iCCP_SUPPORTED
Ë|| deföed(
PNG_READ_iTXt_SUPPORTED
) ||\

288 
deföed
(
PNG_READ_pCAL_SUPPORTED
Ë|| deföed(
PNG_READ_sCAL_SUPPORTED
) ||\

289 
deföed
(
PNG_READ_sPLT_SUPPORTED
Ë|| deföed(
PNG_READ_tEXt_SUPPORTED
) ||\

290 
deföed
(
PNG_READ_zTXt_SUPPORTED
Ë|| 
	$deföed
(
PNG_SEQUENTIAL_READ_SUPPORTED
)

297 
≤g_byãp


298 
	$≤g_ªad_buf„r
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_Æloc_size_t
 
√w_size
, 
w¨n
)

300 
≤g_byãp
 
buf„r
 = 
≤g_±r
->
ªad_buf„r
;

302 i‡(
buf„r
 !
NULL
 && 
√w_size
 > 
≤g_±r
->
ªad_buf„r_size
)

304 
≤g_±r
->
ªad_buf„r
 = 
NULL
;

305 
≤g_±r
->
ªad_buf„r_size
 = 0;

306 
	`≤g_‰ì
(
≤g_±r
, 
buf„r
);

307 
buf„r
 = 
NULL
;

310 i‡(
buf„r
 =
NULL
)

312 
buf„r
 = 
	`≤g_voidˇ°
(
≤g_byãp
, 
	`≤g_mÆloc_ba£
(
≤g_±r
, 
√w_size
));

314 i‡(
buf„r
 !
NULL
)

316 
	`mem£t
(
buf„r
, 0, 
√w_size
);

317 
≤g_±r
->
ªad_buf„r
 = 
buf„r
;

318 
≤g_±r
->
ªad_buf„r_size
 = 
√w_size
;

321 i‡(
w¨n
 < 2)

323 i‡(
w¨n
 != 0)

324 
	`≤g_chunk_w¨nög
(
≤g_±r
, "insufficient memoryÅoÑead chunk");

327 
	`≤g_chunk_îr‹
(
≤g_±r
, "insufficient memoryÅoÑead chunk");

331  
buf„r
;

332 
	}
}

341 
	$≤g_öÊ©e_˛aim
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
ow√r
)

343 i‡(
≤g_±r
->
zow√r
 != 0)

345 
msg
[64];

347 
	`PNG_STRING_FROM_CHUNK
(
msg
, 
≤g_±r
->
zow√r
);

352 ()
	`≤g_ß„ˇt
(
msg
, ( msg), 4, " using zstream");

353 #i‡
PNG_RELEASE_BUILD


354 
	`≤g_chunk_w¨nög
(
≤g_±r
, 
msg
);

355 
≤g_±r
->
zow√r
 = 0;

357 
	`≤g_chunk_îr‹
(
≤g_±r
, 
msg
);

375 
ªt
;

376 #i‡
ZLIB_VERNUM
 >= 0x1240

377 
wödow_bôs
 = 0;

379 #i‡
	`deföed
(
PNG_SET_OPTION_SUPPORTED
Ë&& deföed(
PNG_MAXIMUM_INFLATE_WINDOW
)

380 i‡(((
≤g_±r
->
›ti⁄s
 >> 
PNG_MAXIMUM_INFLATE_WINDOW
) & 3) ==

381 
PNG_OPTION_ON
)

383 
wödow_bôs
 = 15;

384 
≤g_±r
->
z°ªam_°¨t
 = 0;

389 
≤g_±r
->
z°ªam_°¨t
 = 1;

398 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
NULL
;

399 
≤g_±r
->
z°ªam
.
avaû_ö
 = 0;

400 
≤g_±r
->
z°ªam
.
√xt_out
 = 
NULL
;

401 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

403 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_INITIALIZED
) != 0)

405 #i‡
ZLIB_VERNUM
 >= 0x1240

406 
ªt
 = 
	`öÊ©eRe£t2
(&
≤g_±r
->
z°ªam
, 
wödow_bôs
);

408 
ªt
 = 
	`öÊ©eRe£t
(&
≤g_±r
->
z°ªam
);

414 #i‡
ZLIB_VERNUM
 >= 0x1240

415 
ªt
 = 
	`öÊ©eInô2
(&
≤g_±r
->
z°ªam
, 
wödow_bôs
);

417 
ªt
 = 
	`öÊ©eInô
(&
≤g_±r
->
z°ªam
);

420 i‡(
ªt
 =
Z_OK
)

421 
≤g_±r
->
Êags
 |
PNG_FLAG_ZSTREAM_INITIALIZED
;

424 #i‡
ZLIB_VERNUM
 >= 0x1290 && \

425 
	`deföed
(
PNG_SET_OPTION_SUPPORTED
Ë&& deföed(
PNG_IGNORE_ADLER32
)

426 i‡(((
≤g_±r
->
›ti⁄s
 >> 
PNG_IGNORE_ADLER32
Ë& 3Ë=
PNG_OPTION_ON
)

428 
ªt
 = 
	`öÊ©eVÆid©e
(&
≤g_±r
->
z°ªam
, 0);

431 i‡(
ªt
 =
Z_OK
)

432 
≤g_±r
->
zow√r
 = 
ow√r
;

435 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
ªt
);

437  
ªt
;

440 #ifde‡
wödow_bôs


441 #unde‡
wödow_bôs


443 
	}
}

445 #i‡
ZLIB_VERNUM
 >= 0x1240

453 
	$≤g_zlib_öÊ©e
(
≤g_°ru˘Ω
 
≤g_±r
, 
Êush
)

455 i‡(
≤g_±r
->
z°ªam_°¨t
 &&Öng_±r->
z°ªam
.
avaû_ö
 > 0)

457 i‡((*
≤g_±r
->
z°ªam
.
√xt_ö
 >> 4) > 7)

459 
≤g_±r
->
z°ªam
.
msg
 = "invalid window size (libpng)";

460  
Z_DATA_ERROR
;

463 
≤g_±r
->
z°ªam_°¨t
 = 0;

466  
	`öÊ©e
(&
≤g_±r
->
z°ªam
, 
Êush
);

467 
	}
}

470 #ifde‡
PNG_READ_COMPRESSED_TEXT_SUPPORTED


471 #i‡
deföed
(
PNG_READ_zTXt_SUPPORTED
Ë|| deföed (
PNG_READ_iTXt_SUPPORTED
)

484 
	$≤g_öÊ©e
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
ow√r
, 
föish
,

485  
≤g_c⁄°_byãp
 
öput
, 
≤g_uöt_32p
 
öput_size_±r
,

486  
≤g_byãp
 
ouçut
, 
≤g_Æloc_size_t
 *
ouçut_size_±r
)

488 i‡(
≤g_±r
->
zow√r
 =
ow√r
)

490 
ªt
;

491 
≤g_Æloc_size_t
 
avaû_out
 = *
ouçut_size_±r
;

492 
≤g_uöt_32
 
avaû_ö
 = *
öput_size_±r
;

503 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
	`PNGZ_INPUT_CAST
(
öput
);

505 
≤g_±r
->
z°ªam
.
avaû_ö
 = 0;

506 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

511 i‡(
ouçut
 !
NULL
)

512 
≤g_±r
->
z°ªam
.
√xt_out
 = 
ouçut
;

516 
uI¡
 
avaû
;

517 
Byã
 
loˇl_buf„r
[
PNG_INFLATE_BUF_SIZE
];

527 
avaû_ö
 +
≤g_±r
->
z°ªam
.avail_in;

529 
avaû
 = 
ZLIB_IO_MAX
;

531 i‡(
avaû_ö
 < 
avaû
)

532 
avaû
 = (
uI¡
)
avaû_ö
;

534 
avaû_ö
 -
avaû
;

535 
≤g_±r
->
z°ªam
.
avaû_ö
 = 
avaû
;

538 
avaû_out
 +
≤g_±r
->
z°ªam
.avail_out;

540 
avaû
 = 
ZLIB_IO_MAX
;

542 i‡(
ouçut
 =
NULL
)

547 
≤g_±r
->
z°ªam
.
√xt_out
 = 
loˇl_buf„r
;

548 i‡(( 
loˇl_buf„r
Ë< 
avaû
)

549 
avaû
 = ( 
loˇl_buf„r
);

552 i‡(
avaû_out
 < 
avaû
)

553 
avaû
 = (
uI¡
)
avaû_out
;

555 
≤g_±r
->
z°ªam
.
avaû_out
 = 
avaû
;

556 
avaû_out
 -
avaû
;

564 
ªt
 = 
	`PNG_INFLATE
(
≤g_±r
, 
avaû_out
 > 0 ? 
Z_NO_FLUSH
 :

565 (
föish
 ? 
Z_FINISH
 : 
Z_SYNC_FLUSH
));

566 } 
ªt
 =
Z_OK
);

569 i‡(
ouçut
 =
NULL
)

570 
≤g_±r
->
z°ªam
.
√xt_out
 = 
NULL
;

573 
avaû_ö
 +
≤g_±r
->
z°ªam
.avail_in;

574 
avaû_out
 +
≤g_±r
->
z°ªam
.avail_out;

579 i‡(
avaû_out
 > 0)

580 *
ouçut_size_±r
 -
avaû_out
;

582 i‡(
avaû_ö
 > 0)

583 *
öput_size_±r
 -
avaû_ö
;

586 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
ªt
);

587  
ªt
;

596 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("zstream unclaimed");

597  
Z_STREAM_ERROR
;

599 
	}
}

609 
	$≤g_decom¥ess_chunk
(
≤g_°ru˘Ω
 
≤g_±r
,

610 
≤g_uöt_32
 
chunkÀngth
,Öng_uöt_32 
¥efix_size
,

611 
≤g_Æloc_size_t
 *
√wÀngth
 ,

612 
ãrmö©e
 )

621 
≤g_Æloc_size_t
 
limô
 = 
PNG_SIZE_MAX
;

623 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


624 i‡(
≤g_±r
->
u£r_chunk_mÆloc_max
 > 0 &&

625 
≤g_±r
->
u£r_chunk_mÆloc_max
 < 
limô
)

626 
limô
 = 
≤g_±r
->
u£r_chunk_mÆloc_max
;

627 #ñi‡
PNG_USER_CHUNK_MALLOC_MAX
 > 0

628 i‡(
PNG_USER_CHUNK_MALLOC_MAX
 < 
limô
)

629 
limô
 = 
PNG_USER_CHUNK_MALLOC_MAX
;

632 i‡(
limô
 >
¥efix_size
 + (
ãrmö©e
 != 0))

634 
ªt
;

636 
limô
 -
¥efix_size
 + (
ãrmö©e
 != 0);

638 i‡(
limô
 < *
√wÀngth
)

639 *
√wÀngth
 = 
limô
;

642 
ªt
 = 
	`≤g_öÊ©e_˛aim
(
≤g_±r
,Öng_±r->
chunk_«me
);

644 i‡(
ªt
 =
Z_OK
)

646 
≤g_uöt_32
 
lzsize
 = 
chunkÀngth
 - 
¥efix_size
;

648 
ªt
 = 
	`≤g_öÊ©e
(
≤g_±r
,Öng_±r->
chunk_«me
, 1 ,

649  
≤g_±r
->
ªad_buf„r
 + 
¥efix_size
, &
lzsize
,

650  
NULL
, 
√wÀngth
);

652 i‡(
ªt
 =
Z_STREAM_END
)

661 i‡(
	`öÊ©eRe£t
(&
≤g_±r
->
z°ªam
Ë=
Z_OK
)

668 
≤g_Æloc_size_t
 
√w_size
 = *
√wÀngth
;

669 
≤g_Æloc_size_t
 
buf„r_size
 = 
¥efix_size
 + 
√w_size
 +

670 (
ãrmö©e
 != 0);

671 
≤g_byãp
 
ãxt
 = 
	`≤g_voidˇ°
’ng_byãp, 
	`≤g_mÆloc_ba£
(
≤g_±r
,

672 
buf„r_size
));

674 i‡(
ãxt
 !
NULL
)

676 
	`mem£t
(
ãxt
, 0, 
buf„r_size
);

678 
ªt
 = 
	`≤g_öÊ©e
(
≤g_±r
,Öng_±r->
chunk_«me
, 1 ,

679 
≤g_±r
->
ªad_buf„r
 + 
¥efix_size
, &
lzsize
,

680 
ãxt
 + 
¥efix_size
, 
√wÀngth
);

682 i‡(
ªt
 =
Z_STREAM_END
)

684 i‡(
√w_size
 =*
√wÀngth
)

686 i‡(
ãrmö©e
 != 0)

687 
ãxt
[
¥efix_size
 + *
√wÀngth
] = 0;

689 i‡(
¥efix_size
 > 0)

690 
	`mem˝y
(
ãxt
, 
≤g_±r
->
ªad_buf„r
, 
¥efix_size
);

693 
≤g_byãp
 
ﬁd_±r
 = 
≤g_±r
->
ªad_buf„r
;

695 
≤g_±r
->
ªad_buf„r
 = 
ãxt
;

696 
≤g_±r
->
ªad_buf„r_size
 = 
buf„r_size
;

697 
ãxt
 = 
ﬁd_±r
;

709 
ªt
 = 
PNG_UNEXPECTED_ZLIB_RETURN
;

713 i‡(
ªt
 =
Z_OK
)

714 
ªt
 = 
PNG_UNEXPECTED_ZLIB_RETURN
;

719 
	`≤g_‰ì
(
≤g_±r
, 
ãxt
);

724 i‡(
ªt
 =
Z_STREAM_END
 &&

725 
chunkÀngth
 - 
¥efix_size
 !
lzsize
)

726 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "extra compressed data");

732 
ªt
 = 
Z_MEM_ERROR
;

733 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
Z_MEM_ERROR
);

740 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
ªt
);

741 
ªt
 = 
PNG_UNEXPECTED_ZLIB_RETURN
;

745 i‡(
ªt
 =
Z_OK
)

746 
ªt
 = 
PNG_UNEXPECTED_ZLIB_RETURN
;

749 
≤g_±r
->
zow√r
 = 0;

752 i‡(
ªt
 =
Z_STREAM_END
)

753 
ªt
 = 
PNG_UNEXPECTED_ZLIB_RETURN
;

755  
ªt
;

761 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
Z_MEM_ERROR
);

762  
Z_MEM_ERROR
;

764 
	}
}

768 #ifde‡
PNG_READ_iCCP_SUPPORTED


773 
	$≤g_öÊ©e_ªad
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
ªad_buf„r
, 
uI¡
 
ªad_size
,

774 
≤g_uöt_32p
 
chunk_byãs
, 
≤g_byãp
 
√xt_out
, 
≤g_Æloc_size_t
 *
out_size
,

775 
föish
)

777 i‡(
≤g_±r
->
zow√r
 =≤g_±r->
chunk_«me
)

779 
ªt
;

782 
≤g_±r
->
z°ªam
.
√xt_out
 =Çext_out;

783 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

787 i‡(
≤g_±r
->
z°ªam
.
avaû_ö
 == 0)

789 i‡(
ªad_size
 > *
chunk_byãs
)

790 
ªad_size
 = (
uI¡
)*
chunk_byãs
;

791 *
chunk_byãs
 -
ªad_size
;

793 i‡(
ªad_size
 > 0)

794 
	`≤g_¸c_ªad
(
≤g_±r
, 
ªad_buf„r
, 
ªad_size
);

796 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
ªad_buf„r
;

797 
≤g_±r
->
z°ªam
.
avaû_ö
 = 
ªad_size
;

800 i‡(
≤g_±r
->
z°ªam
.
avaû_out
 == 0)

802 
uI¡
 
avaû
 = 
ZLIB_IO_MAX
;

803 i‡(
avaû
 > *
out_size
)

804 
avaû
 = (
uI¡
)*
out_size
;

805 *
out_size
 -
avaû
;

807 
≤g_±r
->
z°ªam
.
avaû_out
 = 
avaû
;

814 
ªt
 = 
	`PNG_INFLATE
(
≤g_±r
, *
chunk_byãs
 > 0 ?

815 
Z_NO_FLUSH
 : (
föish
 ? 
Z_FINISH
 : 
Z_SYNC_FLUSH
));

817 
ªt
 =
Z_OK
 && (*
out_size
 > 0 || 
≤g_±r
->
z°ªam
.
avaû_out
 > 0));

819 *
out_size
 +
≤g_±r
->
z°ªam
.
avaû_out
;

820 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

823 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
ªt
);

824  
ªt
;

829 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("zstream unclaimed");

830  
Z_STREAM_ERROR
;

832 
	}
}

838 
	$≤g_h™dÀ_IHDR
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

840 
≤g_byã
 
buf
[13];

841 
≤g_uöt_32
 
width
, 
height
;

842 
bô_dïth
, 
cﬁ‹_ty≥
, 
com¥essi⁄_ty≥
, 
fûãr_ty≥
;

843 
öãæa˚_ty≥
;

845 
	`≤g_debug
(1, "inÖng_handle_IHDR");

847 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) != 0)

848 
	`≤g_chunk_îr‹
(
≤g_±r
, "out ofÖlace");

851 i‡(
Àngth
 != 13)

852 
	`≤g_chunk_îr‹
(
≤g_±r
, "invalid");

854 
≤g_±r
->
mode
 |
PNG_HAVE_IHDR
;

856 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 13);

857 
	`≤g_¸c_föish
(
≤g_±r
, 0);

859 
width
 = 
	`≤g_gë_uöt_31
(
≤g_±r
, 
buf
);

860 
height
 = 
	`≤g_gë_uöt_31
(
≤g_±r
, 
buf
 + 4);

861 
bô_dïth
 = 
buf
[8];

862 
cﬁ‹_ty≥
 = 
buf
[9];

863 
com¥essi⁄_ty≥
 = 
buf
[10];

864 
fûãr_ty≥
 = 
buf
[11];

865 
öãæa˚_ty≥
 = 
buf
[12];

868 
≤g_±r
->
width
 = width;

869 
≤g_±r
->
height
 = height;

870 
≤g_±r
->
bô_dïth
 = (
≤g_byã
)bit_depth;

871 
≤g_±r
->
öãæa˚d
 = (
≤g_byã
)
öãæa˚_ty≥
;

872 
≤g_±r
->
cﬁ‹_ty≥
 = (
≤g_byã
)color_type;

873 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


874 
≤g_±r
->
fûãr_ty≥
 = (
≤g_byã
)filter_type;

876 
≤g_±r
->
com¥essi⁄_ty≥
 = (
≤g_byã
)compression_type;

879 
≤g_±r
->
cﬁ‹_ty≥
)

882 
PNG_COLOR_TYPE_GRAY
:

883 
PNG_COLOR_TYPE_PALETTE
:

884 
≤g_±r
->
ch™√ls
 = 1;

887 
PNG_COLOR_TYPE_RGB
:

888 
≤g_±r
->
ch™√ls
 = 3;

891 
PNG_COLOR_TYPE_GRAY_ALPHA
:

892 
≤g_±r
->
ch™√ls
 = 2;

895 
PNG_COLOR_TYPE_RGB_ALPHA
:

896 
≤g_±r
->
ch™√ls
 = 4;

901 
≤g_±r
->
pixñ_dïth
 = (
≤g_byã
)’ng_±r->
bô_dïth
 *Öng_±r->
ch™√ls
);

902 
≤g_±r
->
rowbyãs
 = 
	`PNG_ROWBYTES
’ng_±r->
pixñ_dïth
,Öng_±r->
width
);

903 
	`≤g_debug1
(3, "bô_dïth = %d", 
≤g_±r
->
bô_dïth
);

904 
	`≤g_debug1
(3, "ch™√l†%d", 
≤g_±r
->
ch™√ls
);

905 
	`≤g_debug1
(3, "rowbyã†%lu", ()
≤g_±r
->
rowbyãs
);

906 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
width
, 
height
, 
bô_dïth
,

907 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
, 
fûãr_ty≥
);

908 
	}
}

912 
	$≤g_h™dÀ_PLTE
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

914 
≤g_cﬁ‹
 
∑Àâe
[
PNG_MAX_PALETTE_LENGTH
];

915 
max_∑Àâe_Àngth
, 
num
, 
i
;

916 #ifde‡
PNG_POINTER_INDEXING_SUPPORTED


917 
≤g_cﬁ‹p
 
∑l_±r
;

920 
	`≤g_debug
(1, "inÖng_handle_PLTE");

922 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

923 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

930 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_PLTE
) != 0)

931 
	`≤g_chunk_îr‹
(
≤g_±r
, "duplicate");

933 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

938 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

939 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

943 
≤g_±r
->
mode
 |
PNG_HAVE_PLTE
;

945 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) == 0)

947 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

948 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "ignored in grayscale PNG");

952 #i‚de‡
PNG_READ_OPT_PLTE_SUPPORTED


953 i‡(
≤g_±r
->
cﬁ‹_ty≥
 !
PNG_COLOR_TYPE_PALETTE
)

955 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

960 i‡(
Àngth
 > 3*
PNG_MAX_PALETTE_LENGTH
 ||Üength % 3)

962 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

964 i‡(
≤g_±r
->
cﬁ‹_ty≥
 !
PNG_COLOR_TYPE_PALETTE
)

965 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

968 
	`≤g_chunk_îr‹
(
≤g_±r
, "invalid");

974 
num
 = ()
Àngth
 / 3;

981 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

982 
max_∑Àâe_Àngth
 = (1 << 
≤g_±r
->
bô_dïth
);

984 
max_∑Àâe_Àngth
 = 
PNG_MAX_PALETTE_LENGTH
;

986 i‡(
num
 > 
max_∑Àâe_Àngth
)

987 
num
 = 
max_∑Àâe_Àngth
;

989 #ifde‡
PNG_POINTER_INDEXING_SUPPORTED


990 
i
 = 0, 
∑l_±r
 = 
∑Àâe
; i < 
num
; i++,Öal_ptr++)

992 
≤g_byã
 
buf
[3];

994 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 3);

995 
∑l_±r
->
ªd
 = 
buf
[0];

996 
∑l_±r
->
gªí
 = 
buf
[1];

997 
∑l_±r
->
blue
 = 
buf
[2];

1000 
i
 = 0; i < 
num
; i++)

1002 
≤g_byã
 
buf
[3];

1004 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 3);

1006 
∑Àâe
[
i
].
ªd
 = 
buf
[0];

1007 
∑Àâe
[
i
].
gªí
 = 
buf
[1];

1008 
∑Àâe
[
i
].
blue
 = 
buf
[2];

1017 #i‚de‡
PNG_READ_OPT_PLTE_SUPPORTED


1018 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1021 
	`≤g_¸c_föish
(
≤g_±r
, (
≤g_uöt_32
Ë(
Àngth
 - ()
num
 * 3));

1024 #i‚de‡
PNG_READ_OPT_PLTE_SUPPORTED


1025 i‡(
	`≤g_¸c_îr‹
(
≤g_±r
) != 0)

1036 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_ANCILLARY_USE
) == 0)

1038 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_ANCILLARY_NOWARN
) != 0)

1042 
	`≤g_chunk_îr‹
(
≤g_±r
, "CRCÉrror");

1046 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_CRC_ANCILLARY_NOWARN
) == 0)

1047 
	`≤g_chunk_w¨nög
(
≤g_±r
, "CRCÉrror");

1059 
	`≤g_£t_PLTE
(
≤g_±r
, 
öfo_±r
, 
∑Àâe
, 
num
);

1070 #ifde‡
PNG_READ_tRNS_SUPPORTED


1071 i‡(
≤g_±r
->
num_å™s
 > 0 ||

1072 (
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_tRNS
) != 0))

1078 
≤g_±r
->
num_å™s
 = 0;

1080 i‡(
öfo_±r
 !
NULL
)

1081 
öfo_±r
->
num_å™s
 = 0;

1083 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "tRNS must beáfter");

1087 #ifde‡
PNG_READ_hIST_SUPPORTED


1088 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_hIST
) != 0)

1089 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "hIST must beáfter");

1092 #ifde‡
PNG_READ_bKGD_SUPPORTED


1093 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_bKGD
) != 0)

1094 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "bKGD must beáfter");

1096 
	}
}

1099 
	$≤g_h™dÀ_IEND
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1101 
	`≤g_debug
(1, "inÖng_handle_IEND");

1103 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0 ||

1104 (
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) == 0)

1105 
	`≤g_chunk_îr‹
(
≤g_±r
, "out ofÖlace");

1107 
≤g_±r
->
mode
 |(
PNG_AFTER_IDAT
 | 
PNG_HAVE_IEND
);

1109 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1111 i‡(
Àngth
 != 0)

1112 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1114 
	`PNG_UNUSED
(
öfo_±r
)

1115 
	}
}

1117 #ifde‡
PNG_READ_gAMA_SUPPORTED


1119 
	$≤g_h™dÀ_gAMA
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1121 
≤g_fixed_poöt
 
igamma
;

1122 
≤g_byã
 
buf
[4];

1124 
	`≤g_debug
(1, "inÖng_handle_gAMA");

1126 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

1127 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

1129 i‡((
≤g_±r
->
mode
 & (
PNG_HAVE_IDAT
|
PNG_HAVE_PLTE
)) != 0)

1131 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1132 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1136 i‡(
Àngth
 != 4)

1138 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1139 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1143 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 4);

1145 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

1148 
igamma
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
);

1150 
	`≤g_cﬁ‹•a˚_£t_gamma
(
≤g_±r
, &≤g_±r->
cﬁ‹•a˚
, 
igamma
);

1151 
	`≤g_cﬁ‹•a˚_sync
(
≤g_±r
, 
öfo_±r
);

1152 
	}
}

1155 #ifde‡
PNG_READ_sBIT_SUPPORTED


1157 
	$≤g_h™dÀ_sBIT
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1159 
åuñí
, 
i
;

1160 
≤g_byã
 
ßm∂e_dïth
;

1161 
≤g_byã
 
buf
[4];

1163 
	`≤g_debug
(1, "inÖng_handle_sBIT");

1165 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

1166 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

1168 i‡((
≤g_±r
->
mode
 & (
PNG_HAVE_IDAT
|
PNG_HAVE_PLTE
)) != 0)

1170 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1171 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1175 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_sBIT
) != 0)

1177 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1178 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

1182 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1184 
åuñí
 = 3;

1185 
ßm∂e_dïth
 = 8;

1190 
åuñí
 = 
≤g_±r
->
ch™√ls
;

1191 
ßm∂e_dïth
 = 
≤g_±r
->
bô_dïth
;

1194 i‡(
Àngth
 !
åuñí
 ||Üength > 4)

1196 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1197 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1201 
buf
[0] = buf[1] = buf[2] = buf[3] = 
ßm∂e_dïth
;

1202 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 
åuñí
);

1204 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

1207 
i
=0; i<
åuñí
; ++i)

1209 i‡(
buf
[
i
] =0 || buf[i] > 
ßm∂e_dïth
)

1211 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1216 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

1218 
≤g_±r
->
sig_bô
.
ªd
 = 
buf
[0];

1219 
≤g_±r
->
sig_bô
.
gªí
 = 
buf
[1];

1220 
≤g_±r
->
sig_bô
.
blue
 = 
buf
[2];

1221 
≤g_±r
->
sig_bô
.
Æpha
 = 
buf
[3];

1226 
≤g_±r
->
sig_bô
.
gøy
 = 
buf
[0];

1227 
≤g_±r
->
sig_bô
.
ªd
 = 
buf
[0];

1228 
≤g_±r
->
sig_bô
.
gªí
 = 
buf
[0];

1229 
≤g_±r
->
sig_bô
.
blue
 = 
buf
[0];

1230 
≤g_±r
->
sig_bô
.
Æpha
 = 
buf
[1];

1233 
	`≤g_£t_sBIT
(
≤g_±r
, 
öfo_±r
, &’ng_±r->
sig_bô
));

1234 
	}
}

1237 #ifde‡
PNG_READ_cHRM_SUPPORTED


1239 
	$≤g_h™dÀ_cHRM
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1241 
≤g_byã
 
buf
[32];

1242 
≤g_xy
 
xy
;

1244 
	`≤g_debug
(1, "inÖng_handle_cHRM");

1246 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

1247 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

1249 i‡((
≤g_±r
->
mode
 & (
PNG_HAVE_IDAT
|
PNG_HAVE_PLTE
)) != 0)

1251 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1252 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1256 i‡(
Àngth
 != 32)

1258 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1259 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1263 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 32);

1265 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

1268 
xy
.
whôex
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
);

1269 
xy
.
whôey
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
 + 4);

1270 
xy
.
ªdx
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
 + 8);

1271 
xy
.
ªdy
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
 + 12);

1272 
xy
.
gªíx
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
 + 16);

1273 
xy
.
gªíy
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
 + 20);

1274 
xy
.
bluex
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
 + 24);

1275 
xy
.
bluey
 = 
	`≤g_gë_fixed_poöt
(
NULL
, 
buf
 + 28);

1277 i‡(
xy
.
whôex
 =
PNG_FIXED_ERROR
 ||

1278 
xy
.
whôey
 =
PNG_FIXED_ERROR
 ||

1279 
xy
.
ªdx
 =
PNG_FIXED_ERROR
 ||

1280 
xy
.
ªdy
 =
PNG_FIXED_ERROR
 ||

1281 
xy
.
gªíx
 =
PNG_FIXED_ERROR
 ||

1282 
xy
.
gªíy
 =
PNG_FIXED_ERROR
 ||

1283 
xy
.
bluex
 =
PNG_FIXED_ERROR
 ||

1284 
xy
.
bluey
 =
PNG_FIXED_ERROR
)

1286 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid values");

1291 i‡((
≤g_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_INVALID
) != 0)

1294 i‡((
≤g_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_FROM_cHRM
) != 0)

1296 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_INVALID
;

1297 
	`≤g_cﬁ‹•a˚_sync
(
≤g_±r
, 
öfo_±r
);

1298 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

1302 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_FROM_cHRM
;

1303 ()
	`≤g_cﬁ‹•a˚_£t_chrom©icôõs
(
≤g_±r
, &≤g_±r->
cﬁ‹•a˚
, &
xy
,

1305 
	`≤g_cﬁ‹•a˚_sync
(
≤g_±r
, 
öfo_±r
);

1306 
	}
}

1309 #ifde‡
PNG_READ_sRGB_SUPPORTED


1311 
	$≤g_h™dÀ_sRGB
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1313 
≤g_byã
 
öã¡
;

1315 
	`≤g_debug
(1, "inÖng_handle_sRGB");

1317 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

1318 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

1320 i‡((
≤g_±r
->
mode
 & (
PNG_HAVE_IDAT
|
PNG_HAVE_PLTE
)) != 0)

1322 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1323 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1327 i‡(
Àngth
 != 1)

1329 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1330 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1334 
	`≤g_¸c_ªad
(
≤g_±r
, &
öã¡
, 1);

1336 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

1340 i‡((
≤g_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_INVALID
) != 0)

1346 i‡((
≤g_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_INTENT
) != 0)

1348 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_INVALID
;

1349 
	`≤g_cﬁ‹•a˚_sync
(
≤g_±r
, 
öfo_±r
);

1350 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "too manyÖrofiles");

1354 ()
	`≤g_cﬁ‹•a˚_£t_sRGB
(
≤g_±r
, &≤g_±r->
cﬁ‹•a˚
, 
öã¡
);

1355 
	`≤g_cﬁ‹•a˚_sync
(
≤g_±r
, 
öfo_±r
);

1356 
	}
}

1359 #ifde‡
PNG_READ_iCCP_SUPPORTED


1361 
	$≤g_h™dÀ_iCCP
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1364 
≤g_c⁄°_ch¨p
 
îrmsg
 = 
NULL
;

1365 
föished
 = 0;

1367 
	`≤g_debug
(1, "inÖng_handle_iCCP");

1369 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

1370 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

1372 i‡((
≤g_±r
->
mode
 & (
PNG_HAVE_IDAT
|
PNG_HAVE_PLTE
)) != 0)

1374 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1375 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1389 i‡(
Àngth
 < 14)

1391 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1392 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "too short");

1397 i‡((
≤g_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_INVALID
) != 0)

1399 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1406 i‡((
≤g_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_HAVE_INTENT
) == 0)

1408 
uI¡
 
ªad_Àngth
, 
keyw‹d_Àngth
;

1409 
keyw‹d
[81];

1414 
ªad_Àngth
 = 81;

1415 i‡(
ªad_Àngth
 > 
Àngth
)

1416 
ªad_Àngth
 = (
uI¡
)
Àngth
;

1418 
	`≤g_¸c_ªad
(
≤g_±r
, (
≤g_byãp
)
keyw‹d
, 
ªad_Àngth
);

1419 
Àngth
 -
ªad_Àngth
;

1424 i‡(
Àngth
 < 11)

1426 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1427 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "too short");

1431 
keyw‹d_Àngth
 = 0;

1432 
keyw‹d_Àngth
 < 80 && keyw‹d_Àngth < 
ªad_Àngth
 &&

1433 
keyw‹d
[
keyw‹d_Àngth
] != 0)

1434 ++
keyw‹d_Àngth
;

1437 i‡(
keyw‹d_Àngth
 >= 1 && keyword_length <= 79)

1442 i‡(
keyw‹d_Àngth
+1 < 
ªad_Àngth
 &&

1443 
keyw‹d
[
keyw‹d_Àngth
+1] =
PNG_COMPRESSION_TYPE_BASE
)

1445 
ªad_Àngth
 -
keyw‹d_Àngth
+2;

1447 i‡(
	`≤g_öÊ©e_˛aim
(
≤g_±r
, 
≤g_iCCP
Ë=
Z_OK
)

1449 
Byã
 
¥ofûe_hódî
[132]={0};

1450 
Byã
 
loˇl_buf„r
[
PNG_INFLATE_BUF_SIZE
];

1451 
≤g_Æloc_size_t
 
size
 = ( 
¥ofûe_hódî
);

1453 
≤g_±r
->
z°ªam
.
√xt_ö
 = (
Byãf
*)
keyw‹d
 + (
keyw‹d_Àngth
+2);

1454 
≤g_±r
->
z°ªam
.
avaû_ö
 = 
ªad_Àngth
;

1455 ()
	`≤g_öÊ©e_ªad
(
≤g_±r
, 
loˇl_buf„r
,

1456 ( 
loˇl_buf„r
), &
Àngth
, 
¥ofûe_hódî
, &
size
,

1459 i‡(
size
 == 0)

1463 
≤g_uöt_32
 
¥ofûe_Àngth
 = 
	`≤g_gë_uöt_32
(
¥ofûe_hódî
);

1465 i‡(
	`≤g_icc_check_Àngth
(
≤g_±r
, &≤g_±r->
cﬁ‹•a˚
,

1466 
keyw‹d
, 
¥ofûe_Àngth
) != 0)

1471 i‡(
	`≤g_icc_check_hódî
(
≤g_±r
, &≤g_±r->
cﬁ‹•a˚
,

1472 
keyw‹d
, 
¥ofûe_Àngth
, 
¥ofûe_hódî
,

1473 
≤g_±r
->
cﬁ‹_ty≥
) != 0)

1480 
≤g_uöt_32
 
èg_cou¡
 =

1481 
	`≤g_gë_uöt_32
(
¥ofûe_hódî
 + 128);

1482 
≤g_byãp
 
¥ofûe
 = 
	`≤g_ªad_buf„r
(
≤g_±r
,

1483 
¥ofûe_Àngth
, 2 );

1485 i‡(
¥ofûe
 !
NULL
)

1487 
	`mem˝y
(
¥ofûe
, 
¥ofûe_hódî
,

1488 ( 
¥ofûe_hódî
));

1490 
size
 = 12 * 
èg_cou¡
;

1492 ()
	`≤g_öÊ©e_ªad
(
≤g_±r
, 
loˇl_buf„r
,

1493 ( 
loˇl_buf„r
), &
Àngth
,

1494 
¥ofûe
 + ( 
¥ofûe_hódî
), &
size
, 0);

1499 i‡(
size
 == 0)

1501 i‡(
	`≤g_icc_check_èg_èbÀ
(
≤g_±r
,

1502 &
≤g_±r
->
cﬁ‹•a˚
, 
keyw‹d
, 
¥ofûe_Àngth
,

1503 
¥ofûe
) != 0)

1508 
size
 = 
¥ofûe_Àngth
 - ( 
¥ofûe_hódî
)

1509 - 12 * 
èg_cou¡
;

1511 ()
	`≤g_öÊ©e_ªad
(
≤g_±r
, 
loˇl_buf„r
,

1512 ( 
loˇl_buf„r
), &
Àngth
,

1513 
¥ofûe
 + ( 
¥ofûe_hódî
) +

1514 12 * 
èg_cou¡
, &
size
, 1 );

1516 i‡(
Àngth
 > 0 && !(
≤g_±r
->
Êags
 &

1517 
PNG_FLAG_BENIGN_ERRORS_WARN
))

1518 
îrmsg
 = "extra compressed data";

1521 i‡(
size
 == 0)

1523 i‡(
Àngth
 > 0)

1528 
	`≤g_chunk_w¨nög
(
≤g_±r
,

1532 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1533 
föished
 = 1;

1535 #i‡
	`deföed
(
PNG_sRGB_SUPPORTED
Ë&& 
PNG_sRGB_PROFILE_CHECKS
 >= 0

1537 
	`≤g_icc_£t_sRGB
(
≤g_±r
,

1538 &
≤g_±r
->
cﬁ‹•a˚
, 
¥ofûe
,

1539 
≤g_±r
->
z°ªam
.
adÀr
);

1543 i‡(
öfo_±r
 !
NULL
)

1545 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
,

1546 
PNG_FREE_ICCP
, 0);

1548 
öfo_±r
->
ic˝_«me
 = 
	`≤g_voidˇ°
(*,

1549 
	`≤g_mÆloc_ba£
(
≤g_±r
,

1550 
keyw‹d_Àngth
+1));

1551 i‡(
öfo_±r
->
ic˝_«me
 !
NULL
)

1553 
	`mem˝y
(
öfo_±r
->
ic˝_«me
, 
keyw‹d
,

1554 
keyw‹d_Àngth
+1);

1555 
öfo_±r
->
ic˝_¥oÊí
 =

1556 
¥ofûe_Àngth
;

1557 
öfo_±r
->
ic˝_¥ofûe
 = 
¥ofûe
;

1558 
≤g_±r
->
ªad_buf„r
 = 
NULL
;

1559 
öfo_±r
->
‰ì_me
 |
PNG_FREE_ICCP
;

1560 
öfo_±r
->
vÆid
 |
PNG_INFO_iCCP
;

1565 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |=

1566 
PNG_COLORSPACE_INVALID
;

1567 
îrmsg
 = "out of memory";

1576 i‡(
öfo_±r
 !
NULL
)

1577 
	`≤g_cﬁ‹•a˚_sync
(
≤g_±r
, 
öfo_±r
);

1579 i‡(
îrmsg
 =
NULL
)

1581 
≤g_±r
->
zow√r
 = 0;

1585 i‡(
îrmsg
 =
NULL
)

1586 
îrmsg
 = 
≤g_±r
->
z°ªam
.
msg
;

1591 
îrmsg
 = 
≤g_±r
->
z°ªam
.
msg
;

1595 
îrmsg
 = "out of memory";

1605 
îrmsg
 = 
≤g_±r
->
z°ªam
.
msg
;

1608 
≤g_±r
->
zow√r
 = 0;

1612 
îrmsg
 = 
≤g_±r
->
z°ªam
.
msg
;

1616 
îrmsg
 = "bad compression method";

1620 
îrmsg
 = "bad keyword";

1624 
îrmsg
 = "too manyÖrofiles";

1627 i‡(
föished
 == 0)

1628 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1630 
≤g_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_INVALID
;

1631 
	`≤g_cﬁ‹•a˚_sync
(
≤g_±r
, 
öfo_±r
);

1632 i‡(
îrmsg
 !
NULL
)

1633 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, 
îrmsg
);

1634 
	}
}

1637 #ifde‡
PNG_READ_sPLT_SUPPORTED


1639 
	$≤g_h™dÀ_sPLT
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1642 
≤g_byãp
 
íåy_°¨t
, 
buf„r
;

1643 
≤g_sPLT_t
 
√w_∑Àâe
;

1644 
≤g_sPLT_íåyp
 
µ
;

1645 
≤g_uöt_32
 
d©a_Àngth
;

1646 
íåy_size
, 
i
;

1647 
≤g_uöt_32
 
skù
 = 0;

1648 
≤g_uöt_32
 
dl
;

1649 
size_t
 
max_dl
;

1651 
	`≤g_debug
(1, "inÖng_handle_sPLT");

1653 #ifde‡
PNG_USER_LIMITS_SUPPORTED


1654 i‡(
≤g_±r
->
u£r_chunk_ˇche_max
 != 0)

1656 i‡(
≤g_±r
->
u£r_chunk_ˇche_max
 == 1)

1658 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1662 i‡(--
≤g_±r
->
u£r_chunk_ˇche_max
 == 1)

1664 
	`≤g_w¨nög
(
≤g_±r
, "No space in chunk cache for sPLT");

1665 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1671 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

1672 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

1674 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

1676 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1677 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1681 #ifde‡
PNG_MAX_MALLOC_64K


1682 i‡(
Àngth
 > 65535U)

1684 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1685 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "tooÜargeÅo fit in memory");

1690 
buf„r
 = 
	`≤g_ªad_buf„r
(
≤g_±r
, 
Àngth
+1, 2 );

1691 i‡(
buf„r
 =
NULL
)

1693 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1694 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out of memory");

1703 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf„r
, 
Àngth
);

1705 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 
skù
) != 0)

1708 
buf„r
[
Àngth
] = 0;

1710 
íåy_°¨t
 = 
buf„r
; *entry_start;Éntry_start++)

1713 ++
íåy_°¨t
;

1716 i‡(
Àngth
 < 2U || 
íåy_°¨t
 > 
buf„r
 + (length - 2U))

1718 
	`≤g_w¨nög
(
≤g_±r
, "malformed sPLT chunk");

1722 
√w_∑Àâe
.
dïth
 = *
íåy_°¨t
++;

1723 
íåy_size
 = (
√w_∑Àâe
.
dïth
 == 8 ? 6 : 10);

1727 
d©a_Àngth
 = 
Àngth
 - (
≤g_uöt_32
)(
íåy_°¨t
 - 
buf„r
);

1730 i‡((
d©a_Àngth
 % ()
íåy_size
) != 0)

1732 
	`≤g_w¨nög
(
≤g_±r
, "sPLT chunk has badÜength");

1736 
dl
 = (
≤g_uöt_32
)(
d©a_Àngth
 / ()
íåy_size
);

1737 
max_dl
 = 
PNG_SIZE_MAX
 / ( (
≤g_sPLT_íåy
));

1739 i‡(
dl
 > 
max_dl
)

1741 
	`≤g_w¨nög
(
≤g_±r
, "sPLT chunkÅooÜong");

1745 
√w_∑Àâe
.
√¡rõs
 = (
≤g_öt_32
)(
d©a_Àngth
 / ()
íåy_size
);

1747 
√w_∑Àâe
.
íåõs
 = (
≤g_sPLT_íåyp
)
	`≤g_mÆloc_w¨n
(
≤g_±r
,

1748 (
≤g_Æloc_size_t
Ë
√w_∑Àâe
.
√¡rõs
 * ( (
≤g_sPLT_íåy
)));

1750 i‡(
√w_∑Àâe
.
íåõs
 =
NULL
)

1752 
	`≤g_w¨nög
(
≤g_±r
, "sPLT chunkÑequiresÅoo much memory");

1756 #ifde‡
PNG_POINTER_INDEXING_SUPPORTED


1757 
i
 = 0; i < 
√w_∑Àâe
.
√¡rõs
; i++)

1759 
µ
 = 
√w_∑Àâe
.
íåõs
 + 
i
;

1761 i‡(
√w_∑Àâe
.
dïth
 == 8)

1763 
µ
->
ªd
 = *
íåy_°¨t
++;

1764 
µ
->
gªí
 = *
íåy_°¨t
++;

1765 
µ
->
blue
 = *
íåy_°¨t
++;

1766 
µ
->
Æpha
 = *
íåy_°¨t
++;

1771 
µ
->
ªd
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1772 
µ
->
gªí
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1773 
µ
->
blue
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1774 
µ
->
Æpha
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1777 
µ
->
‰equícy
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1780 
µ
 = 
√w_∑Àâe
.
íåõs
;

1782 
i
 = 0; i < 
√w_∑Àâe
.
√¡rõs
; i++)

1785 i‡(
√w_∑Àâe
.
dïth
 == 8)

1787 
µ
[
i
].
ªd
 = *
íåy_°¨t
++;

1788 
µ
[
i
].
gªí
 = *
íåy_°¨t
++;

1789 
µ
[
i
].
blue
 = *
íåy_°¨t
++;

1790 
µ
[
i
].
Æpha
 = *
íåy_°¨t
++;

1795 
µ
[
i
].
ªd
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1796 
µ
[
i
].
gªí
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1797 
µ
[
i
].
blue
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1798 
µ
[
i
].
Æpha
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1801 
µ
[
i
].
‰equícy
 = 
	`≤g_gë_uöt_16
(
íåy_°¨t
);Éntry_start += 2;

1806 
√w_∑Àâe
.
«me
 = (
≤g_ch¨p
)
buf„r
;

1808 
	`≤g_£t_sPLT
(
≤g_±r
, 
öfo_±r
, &
√w_∑Àâe
, 1);

1810 
	`≤g_‰ì
(
≤g_±r
, 
√w_∑Àâe
.
íåõs
);

1811 
	}
}

1814 #ifde‡
PNG_READ_tRNS_SUPPORTED


1816 
	$≤g_h™dÀ_tRNS
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1818 
≤g_byã
 
ªadbuf
[
PNG_MAX_PALETTE_LENGTH
];

1820 
	`≤g_debug
(1, "inÖng_handle_tRNS");

1822 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

1823 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

1825 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

1827 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1828 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1832 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_tRNS
) != 0)

1834 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1835 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

1839 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

1841 
≤g_byã
 
buf
[2];

1843 i‡(
Àngth
 != 2)

1845 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1846 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1850 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 2);

1851 
≤g_±r
->
num_å™s
 = 1;

1852 
≤g_±r
->
å™s_cﬁ‹
.
gøy
 = 
	`≤g_gë_uöt_16
(
buf
);

1855 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

1857 
≤g_byã
 
buf
[6];

1859 i‡(
Àngth
 != 6)

1861 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1862 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1866 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 
Àngth
);

1867 
≤g_±r
->
num_å™s
 = 1;

1868 
≤g_±r
->
å™s_cﬁ‹
.
ªd
 = 
	`≤g_gë_uöt_16
(
buf
);

1869 
≤g_±r
->
å™s_cﬁ‹
.
gªí
 = 
	`≤g_gë_uöt_16
(
buf
 + 2);

1870 
≤g_±r
->
å™s_cﬁ‹
.
blue
 = 
	`≤g_gë_uöt_16
(
buf
 + 4);

1873 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1875 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_PLTE
) == 0)

1878 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1879 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1883 i‡(
Àngth
 > (Ë
≤g_±r
->
num_∑Àâe
 ||

1884 
Àngth
 > (Ë
PNG_MAX_PALETTE_LENGTH
 ||

1885 
Àngth
 == 0)

1887 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1888 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1892 
	`≤g_¸c_ªad
(
≤g_±r
, 
ªadbuf
, 
Àngth
);

1893 
≤g_±r
->
num_å™s
 = (
≤g_uöt_16
)
Àngth
;

1898 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1899 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid withálpha channel");

1903 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

1905 
≤g_±r
->
num_å™s
 = 0;

1913 
	`≤g_£t_tRNS
(
≤g_±r
, 
öfo_±r
, 
ªadbuf
,Öng_±r->
num_å™s
,

1914 &(
≤g_±r
->
å™s_cﬁ‹
));

1915 
	}
}

1918 #ifde‡
PNG_READ_bKGD_SUPPORTED


1920 
	$≤g_h™dÀ_bKGD
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

1922 
åuñí
;

1923 
≤g_byã
 
buf
[6];

1924 
≤g_cﬁ‹_16
 
background
;

1926 
	`≤g_debug
(1, "inÖng_handle_bKGD");

1928 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

1929 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

1931 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0 ||

1932 (
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 &&

1933 (
≤g_±r
->
mode
 & 
PNG_HAVE_PLTE
) == 0))

1935 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1936 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

1940 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_bKGD
) != 0)

1942 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1943 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

1947 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1948 
åuñí
 = 1;

1950 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

1951 
åuñí
 = 6;

1954 
åuñí
 = 2;

1956 i‡(
Àngth
 !
åuñí
)

1958 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

1959 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

1963 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 
åuñí
);

1965 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

1973 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1975 
background
.
ödex
 = 
buf
[0];

1977 i‡(
öfo_±r
 !
NULL
 && info_±r->
num_∑Àâe
 != 0)

1979 i‡(
buf
[0] >
öfo_±r
->
num_∑Àâe
)

1981 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid index");

1985 
background
.
ªd
 = (
≤g_uöt_16
)
≤g_±r
->
∑Àâe
[
buf
[0]].red;

1986 
background
.
gªí
 = (
≤g_uöt_16
)
≤g_±r
->
∑Àâe
[
buf
[0]].green;

1987 
background
.
blue
 = (
≤g_uöt_16
)
≤g_±r
->
∑Àâe
[
buf
[0]].blue;

1991 
background
.
ªd
 = background.
gªí
 = background.
blue
 = 0;

1993 
background
.
gøy
 = 0;

1996 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) == 0)

1998 i‡(
≤g_±r
->
bô_dïth
 <= 8)

2000 i‡(
buf
[0] !0 || buf[1] >()(1 << 
≤g_±r
->
bô_dïth
))

2002 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid grayÜevel");

2007 
background
.
ödex
 = 0;

2008 
background
.
ªd
 =

2009 
background
.
gªí
 =

2010 
background
.
blue
 =

2011 
background
.
gøy
 = 
	`≤g_gë_uöt_16
(
buf
);

2016 i‡(
≤g_±r
->
bô_dïth
 <= 8)

2018 i‡(
buf
[0] != 0 || buf[2] != 0 || buf[4] != 0)

2020 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid color");

2025 
background
.
ödex
 = 0;

2026 
background
.
ªd
 = 
	`≤g_gë_uöt_16
(
buf
);

2027 
background
.
gªí
 = 
	`≤g_gë_uöt_16
(
buf
 + 2);

2028 
background
.
blue
 = 
	`≤g_gë_uöt_16
(
buf
 + 4);

2029 
background
.
gøy
 = 0;

2032 
	`≤g_£t_bKGD
(
≤g_±r
, 
öfo_±r
, &
background
);

2033 
	}
}

2036 #ifde‡
PNG_READ_eXIf_SUPPORTED


2038 
	$≤g_h™dÀ_eXIf
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2040 
i
;

2042 
	`≤g_debug
(1, "inÖng_handle_eXIf");

2044 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2045 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2047 i‡(
Àngth
 < 2)

2049 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2050 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "too short");

2054 i‡(
öfo_±r
 =
NULL
 || (öfo_±r->
vÆid
 & 
PNG_INFO_eXIf
) != 0)

2056 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2057 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

2061 
öfo_±r
->
‰ì_me
 |
PNG_FREE_EXIF
;

2063 
öfo_±r
->
eXIf_buf
 = 
	`≤g_voidˇ°
(
≤g_byãp
,

2064 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
Àngth
));

2066 i‡(
öfo_±r
->
eXIf_buf
 =
NULL
)

2068 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2069 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out of memory");

2073 
i
 = 0; i < 
Àngth
; i++)

2075 
≤g_byã
 
buf
[1];

2076 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 1);

2077 
öfo_±r
->
eXIf_buf
[
i
] = 
buf
[0];

2078 i‡(
i
 =1 && 
buf
[0] != 'M' && buf[0] != 'I'

2079 && 
öfo_±r
->
eXIf_buf
[0] !
buf
[0])

2081 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
-
i
-1);

2082 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "incorrect byte-order specifier");

2083 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
eXIf_buf
);

2084 
öfo_±r
->
eXIf_buf
 = 
NULL
;

2089 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) == 0)

2090 
	`≤g_£t_eXIf_1
(
≤g_±r
, 
öfo_±r
, 
Àngth
, info_±r->
eXIf_buf
);

2092 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
eXIf_buf
);

2093 
öfo_±r
->
eXIf_buf
 = 
NULL
;

2094 
	}
}

2097 #ifde‡
PNG_READ_hIST_SUPPORTED


2099 
	$≤g_h™dÀ_hIST
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2101 
num
, 
i
;

2102 
≤g_uöt_16
 
ªadbuf
[
PNG_MAX_PALETTE_LENGTH
];

2104 
	`≤g_debug
(1, "inÖng_handle_hIST");

2106 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2107 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2109 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0 ||

2110 (
≤g_±r
->
mode
 & 
PNG_HAVE_PLTE
) == 0)

2112 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2113 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

2117 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_hIST
) != 0)

2119 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2120 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

2124 
num
 = 
Àngth
 / 2 ;

2126 i‡(
num
 !(Ë
≤g_±r
->
num_∑Àâe
 ||

2127 
num
 > (Ë
PNG_MAX_PALETTE_LENGTH
)

2129 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2130 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

2134 
i
 = 0; i < 
num
; i++)

2136 
≤g_byã
 
buf
[2];

2138 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 2);

2139 
ªadbuf
[
i
] = 
	`≤g_gë_uöt_16
(
buf
);

2142 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

2145 
	`≤g_£t_hIST
(
≤g_±r
, 
öfo_±r
, 
ªadbuf
);

2146 
	}
}

2149 #ifde‡
PNG_READ_pHYs_SUPPORTED


2151 
	$≤g_h™dÀ_pHYs
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2153 
≤g_byã
 
buf
[9];

2154 
≤g_uöt_32
 
ªs_x
, 
ªs_y
;

2155 
unô_ty≥
;

2157 
	`≤g_debug
(1, "inÖng_handle_pHYs");

2159 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2160 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2162 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

2164 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2165 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

2169 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_pHYs
) != 0)

2171 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2172 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

2176 i‡(
Àngth
 != 9)

2178 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2179 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

2183 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 9);

2185 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

2188 
ªs_x
 = 
	`≤g_gë_uöt_32
(
buf
);

2189 
ªs_y
 = 
	`≤g_gë_uöt_32
(
buf
 + 4);

2190 
unô_ty≥
 = 
buf
[8];

2191 
	`≤g_£t_pHYs
(
≤g_±r
, 
öfo_±r
, 
ªs_x
, 
ªs_y
, 
unô_ty≥
);

2192 
	}
}

2195 #ifde‡
PNG_READ_oFFs_SUPPORTED


2197 
	$≤g_h™dÀ_oFFs
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2199 
≤g_byã
 
buf
[9];

2200 
≤g_öt_32
 
off£t_x
, 
off£t_y
;

2201 
unô_ty≥
;

2203 
	`≤g_debug
(1, "inÖng_handle_oFFs");

2205 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2206 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2208 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

2210 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2211 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

2215 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_oFFs
) != 0)

2217 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2218 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

2222 i‡(
Àngth
 != 9)

2224 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2225 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

2229 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 9);

2231 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

2234 
off£t_x
 = 
	`≤g_gë_öt_32
(
buf
);

2235 
off£t_y
 = 
	`≤g_gë_öt_32
(
buf
 + 4);

2236 
unô_ty≥
 = 
buf
[8];

2237 
	`≤g_£t_oFFs
(
≤g_±r
, 
öfo_±r
, 
off£t_x
, 
off£t_y
, 
unô_ty≥
);

2238 
	}
}

2241 #ifde‡
PNG_READ_pCAL_SUPPORTED


2244 
	$≤g_h™dÀ_pCAL
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2246 
≤g_öt_32
 
X0
, 
X1
;

2247 
≤g_byã
 
ty≥
, 
≈¨ams
;

2248 
≤g_byãp
 
buf„r
, 
buf
, 
unôs
, 
íd±r
;

2249 
≤g_ch¨µ
 
∑øms
;

2250 
i
;

2252 
	`≤g_debug
(1, "inÖng_handle_pCAL");

2254 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2255 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2257 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

2259 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2260 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

2264 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_pCAL
) != 0)

2266 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2267 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

2271 
	`≤g_debug1
(2, "AllocatingándÑeadingÖCAL chunk data (%u bytes)",

2272 
Àngth
 + 1);

2274 
buf„r
 = 
	`≤g_ªad_buf„r
(
≤g_±r
, 
Àngth
+1, 2 );

2276 i‡(
buf„r
 =
NULL
)

2278 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2279 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out of memory");

2283 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf„r
, 
Àngth
);

2285 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

2288 
buf„r
[
Àngth
] = 0;

2290 
	`≤g_debug
(3, "FindingÉnd ofÖCALÖurpose string");

2291 
buf
 = 
buf„r
; *buf; buf++)

2294 
íd±r
 = 
buf„r
 + 
Àngth
;

2299 i‡(
íd±r
 - 
buf
 <= 12)

2301 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

2305 
	`≤g_debug
(3, "ReadingÖCAL X0, X1,Åype,Çparams,ánd units");

2306 
X0
 = 
	`≤g_gë_öt_32
((
≤g_byãp
)
buf
+1);

2307 
X1
 = 
	`≤g_gë_öt_32
((
≤g_byãp
)
buf
+5);

2308 
ty≥
 = 
buf
[9];

2309 
≈¨ams
 = 
buf
[10];

2310 
unôs
 = 
buf
 + 11;

2312 
	`≤g_debug
(3, "CheckingÖCALÉquationÅypeándÇumber ofÖarameters");

2316 i‡((
ty≥
 =
PNG_EQUATION_LINEAR
 && 
≈¨ams
 != 2) ||

2317 (
ty≥
 =
PNG_EQUATION_BASE_E
 && 
≈¨ams
 != 3) ||

2318 (
ty≥
 =
PNG_EQUATION_ARBITRARY
 && 
≈¨ams
 != 3) ||

2319 (
ty≥
 =
PNG_EQUATION_HYPERBOLIC
 && 
≈¨ams
 != 4))

2321 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalidÖarameter count");

2325 i‡(
ty≥
 >
PNG_EQUATION_LAST
)

2327 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "unrecognizedÉquationÅype");

2330 
buf
 = 
unôs
; *buf; buf++)

2333 
	`≤g_debug
(3, "AllocatingÖCALÖarametersárray");

2335 
∑øms
 = 
	`≤g_voidˇ°
(
≤g_ch¨µ
, 
	`≤g_mÆloc_w¨n
(
≤g_±r
,

2336 
≈¨ams
 * ( (
≤g_ch¨p
))));

2338 i‡(
∑øms
 =
NULL
)

2340 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out of memory");

2345 
i
 = 0; i < 
≈¨ams
; i++)

2347 
buf
++;

2349 
	`≤g_debug1
(3, "RódögÖCALÖ¨amëî %d", 
i
);

2351 
∑øms
[
i
] = (
≤g_ch¨p
)
buf
; bu‡<
íd±r
 && *buf != 0; buf++)

2355 i‡(
buf
 > 
íd±r
)

2357 
	`≤g_‰ì
(
≤g_±r
, 
∑øms
);

2358 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid data");

2363 
	`≤g_£t_pCAL
(
≤g_±r
, 
öfo_±r
, (
≤g_ch¨p
)
buf„r
, 
X0
, 
X1
, 
ty≥
, 
≈¨ams
,

2364 (
≤g_ch¨p
)
unôs
, 
∑øms
);

2366 
	`≤g_‰ì
(
≤g_±r
, 
∑øms
);

2367 
	}
}

2370 #ifde‡
PNG_READ_sCAL_SUPPORTED


2373 
	$≤g_h™dÀ_sCAL
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2375 
≤g_byãp
 
buf„r
;

2376 
size_t
 
i
;

2377 
°©e
;

2379 
	`≤g_debug
(1, "inÖng_handle_sCAL");

2381 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2382 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2384 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

2386 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2387 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out ofÖlace");

2391 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_sCAL
) != 0)

2393 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2394 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

2399 i‡(
Àngth
 < 4)

2401 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2402 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

2406 
	`≤g_debug1
(2, "AllocatingándÑeading sCAL chunk data (%u bytes)",

2407 
Àngth
 + 1);

2409 
buf„r
 = 
	`≤g_ªad_buf„r
(
≤g_±r
, 
Àngth
+1, 2 );

2411 i‡(
buf„r
 =
NULL
)

2413 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out of memory");

2414 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2418 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf„r
, 
Àngth
);

2419 
buf„r
[
Àngth
] = 0;

2421 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

2425 i‡(
buf„r
[0] != 1 && buffer[0] != 2)

2427 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid unit");

2434 
i
 = 1;

2435 
°©e
 = 0;

2437 i‡(
	`≤g_check_Â_numbî
((
≤g_c⁄°_ch¨p
)
buf„r
, 
Àngth
, &
°©e
, &
i
) == 0 ||

2438 
i
 >
Àngth
 || 
buf„r
[i++] != 0)

2439 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "bad width format");

2441 i‡(
	`PNG_FP_IS_POSITIVE
(
°©e
) == 0)

2442 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "non-positive width");

2446 
size_t
 
heighti
 = 
i
;

2448 
°©e
 = 0;

2449 i‡(
	`≤g_check_Â_numbî
((
≤g_c⁄°_ch¨p
)
buf„r
, 
Àngth
,

2450 &
°©e
, &
i
Ë=0 || i !
Àngth
)

2451 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "bad height format");

2453 i‡(
	`PNG_FP_IS_POSITIVE
(
°©e
) == 0)

2454 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "non-positive height");

2458 
	`≤g_£t_sCAL_s
(
≤g_±r
, 
öfo_±r
, 
buf„r
[0],

2459 (
≤g_ch¨p
)
buf„r
+1, (≤g_ch¨p)buf„r+
heighti
);

2461 
	}
}

2464 #ifde‡
PNG_READ_tIME_SUPPORTED


2466 
	$≤g_h™dÀ_tIME
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2468 
≤g_byã
 
buf
[7];

2469 
≤g_time
 
mod_time
;

2471 
	`≤g_debug
(1, "inÖng_handle_tIME");

2473 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2474 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2476 i‡(
öfo_±r
 !
NULL
 && (öfo_±r->
vÆid
 & 
PNG_INFO_tIME
) != 0)

2478 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2479 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "duplicate");

2483 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

2484 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

2486 i‡(
Àngth
 != 7)

2488 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2489 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "invalid");

2493 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf
, 7);

2495 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

2498 
mod_time
.
£c⁄d
 = 
buf
[6];

2499 
mod_time
.
möuã
 = 
buf
[5];

2500 
mod_time
.
hour
 = 
buf
[4];

2501 
mod_time
.
day
 = 
buf
[3];

2502 
mod_time
.
m⁄th
 = 
buf
[2];

2503 
mod_time
.
yór
 = 
	`≤g_gë_uöt_16
(
buf
);

2505 
	`≤g_£t_tIME
(
≤g_±r
, 
öfo_±r
, &
mod_time
);

2506 
	}
}

2509 #ifde‡
PNG_READ_tEXt_SUPPORTED


2512 
	$≤g_h™dÀ_tEXt
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2514 
≤g_ãxt
 
ãxt_öfo
;

2515 
≤g_byãp
 
buf„r
;

2516 
≤g_ch¨p
 
key
;

2517 
≤g_ch¨p
 
ãxt
;

2518 
≤g_uöt_32
 
skù
 = 0;

2520 
	`≤g_debug
(1, "inÖng_handle_tEXt");

2522 #ifde‡
PNG_USER_LIMITS_SUPPORTED


2523 i‡(
≤g_±r
->
u£r_chunk_ˇche_max
 != 0)

2525 i‡(
≤g_±r
->
u£r_chunk_ˇche_max
 == 1)

2527 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2531 i‡(--
≤g_±r
->
u£r_chunk_ˇche_max
 == 1)

2533 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2534 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "no space in chunk cache");

2540 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2541 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2543 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

2544 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

2546 #ifde‡
PNG_MAX_MALLOC_64K


2547 i‡(
Àngth
 > 65535U)

2549 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2550 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "tooÜargeÅo fit in memory");

2555 
buf„r
 = 
	`≤g_ªad_buf„r
(
≤g_±r
, 
Àngth
+1, 1 );

2557 i‡(
buf„r
 =
NULL
)

2559 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out of memory");

2563 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf„r
, 
Àngth
);

2565 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 
skù
) != 0)

2568 
key
 = (
≤g_ch¨p
)
buf„r
;

2569 
key
[
Àngth
] = 0;

2571 
ãxt
 = 
key
; *text;Åext++)

2574 i‡(
ãxt
 !
key
 + 
Àngth
)

2575 
ãxt
++;

2577 
ãxt_öfo
.
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

2578 
ãxt_öfo
.
key
 = key;

2579 
ãxt_öfo
.
œng
 = 
NULL
;

2580 
ãxt_öfo
.
œng_key
 = 
NULL
;

2581 
ãxt_öfo
.
ôxt_Àngth
 = 0;

2582 
ãxt_öfo
.
ãxt
 =Åext;

2583 
ãxt_öfo
.
ãxt_Àngth
 = 
	`°æí
(
ãxt
);

2585 i‡(
	`≤g_£t_ãxt_2
(
≤g_±r
, 
öfo_±r
, &
ãxt_öfo
, 1) != 0)

2586 
	`≤g_w¨nög
(
≤g_±r
, "Insufficient memoryÅoÖrocessÅext chunk");

2587 
	}
}

2590 #ifde‡
PNG_READ_zTXt_SUPPORTED


2593 
	$≤g_h™dÀ_zTXt
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2595 
≤g_c⁄°_ch¨p
 
îrmsg
 = 
NULL
;

2596 
≤g_byãp
 
buf„r
;

2597 
≤g_uöt_32
 
keyw‹d_Àngth
;

2599 
	`≤g_debug
(1, "inÖng_handle_zTXt");

2601 #ifde‡
PNG_USER_LIMITS_SUPPORTED


2602 i‡(
≤g_±r
->
u£r_chunk_ˇche_max
 != 0)

2604 i‡(
≤g_±r
->
u£r_chunk_ˇche_max
 == 1)

2606 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2610 i‡(--
≤g_±r
->
u£r_chunk_ˇche_max
 == 1)

2612 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2613 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "no space in chunk cache");

2619 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2620 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2622 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

2623 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

2628 
buf„r
 = 
	`≤g_ªad_buf„r
(
≤g_±r
, 
Àngth
, 2 );

2630 i‡(
buf„r
 =
NULL
)

2632 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2633 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out of memory");

2637 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf„r
, 
Àngth
);

2639 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

2643 
keyw‹d_Àngth
 = 0;

2644 
keyw‹d_Àngth
 < 
Àngth
 && 
buf„r
[keyword_length] != 0;

2645 ++
keyw‹d_Àngth
)

2648 i‡(
keyw‹d_Àngth
 > 79 || keyword_length < 1)

2649 
îrmsg
 = "bad keyword";

2655 i‡(
keyw‹d_Àngth
 + 3 > 
Àngth
)

2656 
îrmsg
 = "truncated";

2658 i‡(
buf„r
[
keyw‹d_Àngth
+1] !
PNG_COMPRESSION_TYPE_BASE
)

2659 
îrmsg
 = "unknown compressionÅype";

2663 
≤g_Æloc_size_t
 
uncom¥es£d_Àngth
 = 
PNG_SIZE_MAX
;

2669 i‡(
	`≤g_decom¥ess_chunk
(
≤g_±r
, 
Àngth
, 
keyw‹d_Àngth
+2,

2670 &
uncom¥es£d_Àngth
, 1 ) =
Z_STREAM_END
)

2672 
≤g_ãxt
 
ãxt
;

2674 i‡(
≤g_±r
->
ªad_buf„r
 =
NULL
)

2675 
îrmsg
="Read failure inÖng_handle_zTXt";

2682 
buf„r
 = 
≤g_±r
->
ªad_buf„r
;

2683 
buf„r
[
uncom¥es£d_Àngth
+(
keyw‹d_Àngth
+2)] = 0;

2685 
ãxt
.
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_zTXt
;

2686 
ãxt
.
key
 = (
≤g_ch¨p
)
buf„r
;

2687 
ãxt
.ãxà(
≤g_ch¨p
)(
buf„r
 + 
keyw‹d_Àngth
+2);

2688 
ãxt
.
ãxt_Àngth
 = 
uncom¥es£d_Àngth
;

2689 
ãxt
.
ôxt_Àngth
 = 0;

2690 
ãxt
.
œng
 = 
NULL
;

2691 
ãxt
.
œng_key
 = 
NULL
;

2693 i‡(
	`≤g_£t_ãxt_2
(
≤g_±r
, 
öfo_±r
, &
ãxt
, 1) != 0)

2694 
îrmsg
 = "insufficient memory";

2699 
îrmsg
 = 
≤g_±r
->
z°ªam
.
msg
;

2702 i‡(
îrmsg
 !
NULL
)

2703 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, 
îrmsg
);

2704 
	}
}

2707 #ifde‡
PNG_READ_iTXt_SUPPORTED


2710 
	$≤g_h™dÀ_iTXt
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
≤g_uöt_32
 
Àngth
)

2712 
≤g_c⁄°_ch¨p
 
îrmsg
 = 
NULL
;

2713 
≤g_byãp
 
buf„r
;

2714 
≤g_uöt_32
 
¥efix_Àngth
;

2716 
	`≤g_debug
(1, "inÖng_handle_iTXt");

2718 #ifde‡
PNG_USER_LIMITS_SUPPORTED


2719 i‡(
≤g_±r
->
u£r_chunk_ˇche_max
 != 0)

2721 i‡(
≤g_±r
->
u£r_chunk_ˇche_max
 == 1)

2723 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2727 i‡(--
≤g_±r
->
u£r_chunk_ˇche_max
 == 1)

2729 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2730 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "no space in chunk cache");

2736 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IHDR
) == 0)

2737 
	`≤g_chunk_îr‹
(
≤g_±r
, "missing IHDR");

2739 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) != 0)

2740 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

2742 
buf„r
 = 
	`≤g_ªad_buf„r
(
≤g_±r
, 
Àngth
+1, 1 );

2744 i‡(
buf„r
 =
NULL
)

2746 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2747 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "out of memory");

2751 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf„r
, 
Àngth
);

2753 i‡(
	`≤g_¸c_föish
(
≤g_±r
, 0) != 0)

2757 
¥efix_Àngth
=0;

2758 
¥efix_Àngth
 < 
Àngth
 && 
buf„r
[prefix_length] != 0;

2759 ++
¥efix_Àngth
)

2763 i‡(
¥efix_Àngth
 > 79 ||Örefix_length < 1)

2764 
îrmsg
 = "bad keyword";

2770 i‡(
¥efix_Àngth
 + 5 > 
Àngth
)

2771 
îrmsg
 = "truncated";

2773 i‡(
buf„r
[
¥efix_Àngth
+1] == 0 ||

2774 (
buf„r
[
¥efix_Àngth
+1] == 1 &&

2775 
buf„r
[
¥efix_Àngth
+2] =
PNG_COMPRESSION_TYPE_BASE
))

2777 
com¥es£d
 = 
buf„r
[
¥efix_Àngth
+1] != 0;

2778 
≤g_uöt_32
 
œnguage_off£t
, 
å™¶©ed_keyw‹d_off£t
;

2779 
≤g_Æloc_size_t
 
uncom¥es£d_Àngth
 = 0;

2782 
¥efix_Àngth
 += 3;

2783 
œnguage_off£t
 = 
¥efix_Àngth
;

2785 ; 
¥efix_Àngth
 < 
Àngth
 && 
buf„r
[prefix_length] != 0;

2786 ++
¥efix_Àngth
)

2790 
å™¶©ed_keyw‹d_off£t
 = ++
¥efix_Àngth
;

2792 ; 
¥efix_Àngth
 < 
Àngth
 && 
buf„r
[prefix_length] != 0;

2793 ++
¥efix_Àngth
)

2801 ++
¥efix_Àngth
;

2803 i‡(
com¥es£d
 =0 && 
¥efix_Àngth
 <
Àngth
)

2804 
uncom¥es£d_Àngth
 = 
Àngth
 - 
¥efix_Àngth
;

2806 i‡(
com¥es£d
 !0 && 
¥efix_Àngth
 < 
Àngth
)

2808 
uncom¥es£d_Àngth
 = 
PNG_SIZE_MAX
;

2814 i‡(
	`≤g_decom¥ess_chunk
(
≤g_±r
, 
Àngth
, 
¥efix_Àngth
,

2815 &
uncom¥es£d_Àngth
, 1 ) =
Z_STREAM_END
)

2816 
buf„r
 = 
≤g_±r
->
ªad_buf„r
;

2819 
îrmsg
 = 
≤g_±r
->
z°ªam
.
msg
;

2823 
îrmsg
 = "truncated";

2825 i‡(
îrmsg
 =
NULL
)

2827 
≤g_ãxt
 
ãxt
;

2829 
buf„r
[
uncom¥es£d_Àngth
+
¥efix_Àngth
] = 0;

2831 i‡(
com¥es£d
 == 0)

2832 
ãxt
.
com¥essi⁄
 = 
PNG_ITXT_COMPRESSION_NONE
;

2835 
ãxt
.
com¥essi⁄
 = 
PNG_ITXT_COMPRESSION_zTXt
;

2837 
ãxt
.
key
 = (
≤g_ch¨p
)
buf„r
;

2838 
ãxt
.
œng
 = (
≤g_ch¨p
)
buf„r
 + 
œnguage_off£t
;

2839 
ãxt
.
œng_key
 = (
≤g_ch¨p
)
buf„r
 + 
å™¶©ed_keyw‹d_off£t
;

2840 
ãxt
.ãxà(
≤g_ch¨p
)
buf„r
 + 
¥efix_Àngth
;

2841 
ãxt
.
ãxt_Àngth
 = 0;

2842 
ãxt
.
ôxt_Àngth
 = 
uncom¥es£d_Àngth
;

2844 i‡(
	`≤g_£t_ãxt_2
(
≤g_±r
, 
öfo_±r
, &
ãxt
, 1) != 0)

2845 
îrmsg
 = "insufficient memory";

2850 
îrmsg
 = "bad compression info";

2852 i‡(
îrmsg
 !
NULL
)

2853 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, 
îrmsg
);

2854 
	}
}

2857 #ifde‡
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


2860 
	$≤g_ˇche_unknown_chunk
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
Àngth
)

2862 
≤g_Æloc_size_t
 
limô
 = 
PNG_SIZE_MAX
;

2864 i‡(
≤g_±r
->
unknown_chunk
.
d©a
 !
NULL
)

2866 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
unknown_chunk
.
d©a
);

2867 
≤g_±r
->
unknown_chunk
.
d©a
 = 
NULL
;

2870 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


2871 i‡(
≤g_±r
->
u£r_chunk_mÆloc_max
 > 0 &&

2872 
≤g_±r
->
u£r_chunk_mÆloc_max
 < 
limô
)

2873 
limô
 = 
≤g_±r
->
u£r_chunk_mÆloc_max
;

2875 #ñi‡
PNG_USER_CHUNK_MALLOC_MAX
 > 0

2876 i‡(
PNG_USER_CHUNK_MALLOC_MAX
 < 
limô
)

2877 
limô
 = 
PNG_USER_CHUNK_MALLOC_MAX
;

2880 i‡(
Àngth
 <
limô
)

2882 
	`PNG_CSTRING_FROM_CHUNK
(
≤g_±r
->
unknown_chunk
.
«me
,Öng_±r->
chunk_«me
);

2884 
≤g_±r
->
unknown_chunk
.
size
 = (
size_t
)
Àngth
 ;

2886 
≤g_±r
->
unknown_chunk
.
loˇti⁄
 = (
≤g_byã
Ìng_±r->
mode
 ;

2888 i‡(
Àngth
 == 0)

2889 
≤g_±r
->
unknown_chunk
.
d©a
 = 
NULL
;

2894 
≤g_±r
->
unknown_chunk
.
d©a
 = 
	`≤g_voidˇ°
(
≤g_byãp
,

2895 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
Àngth
));

2899 i‡(
≤g_±r
->
unknown_chunk
.
d©a
 =
NULL
 && 
Àngth
 > 0)

2902 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

2903 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "unknown chunkÉxceeds memoryÜimits");

2909 i‡(
Àngth
 > 0)

2910 
	`≤g_¸c_ªad
(
≤g_±r
,Öng_±r->
unknown_chunk
.
d©a
, 
Àngth
);

2911 
	`≤g_¸c_föish
(
≤g_±r
, 0);

2914 
	}
}

2919 
	$≤g_h™dÀ_unknown
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

2920 
≤g_uöt_32
 
Àngth
, 
kìp
)

2922 
h™dÀd
 = 0;

2924 
	`≤g_debug
(1, "inÖng_handle_unknown");

2926 #ifde‡
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


2938 #i‚de‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


2939 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


2940 
kìp
 = 
	`≤g_chunk_unknown_h™dlög
(
≤g_±r
,Öng_±r->
chunk_«me
);

2948 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


2952 i‡(
≤g_±r
->
ªad_u£r_chunk_‚
 !
NULL
)

2954 i‡(
	`≤g_ˇche_unknown_chunk
(
≤g_±r
, 
Àngth
) != 0)

2957 
ªt
 = (*(
≤g_±r
->
ªad_u£r_chunk_‚
))(png_ptr,

2958 &
≤g_±r
->
unknown_chunk
);

2969 i‡(
ªt
 < 0)

2970 
	`≤g_chunk_îr‹
(
≤g_±r
, "error in user chunk");

2972 i‡(
ªt
 == 0)

2985 i‡(
kìp
 < 
PNG_HANDLE_CHUNK_IF_SAFE
)

2987 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


2988 i‡(
≤g_±r
->
unknown_deÁu…
 < 
PNG_HANDLE_CHUNK_IF_SAFE
)

2990 
	`≤g_chunk_w¨nög
(
≤g_±r
, "Saving unknown chunk:");

2991 
	`≤g_≠p_w¨nög
(
≤g_±r
,

2997 
kìp
 = 
PNG_HANDLE_CHUNK_IF_SAFE
;

3003 
h™dÀd
 = 1;

3005 
kìp
 = 
PNG_HANDLE_CHUNK_NEVER
;

3010 
kìp
 = 
PNG_HANDLE_CHUNK_NEVER
;

3017 #ifde‡
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


3024 i‡(
kìp
 =
PNG_HANDLE_CHUNK_AS_DEFAULT
)

3025 
kìp
 = 
≤g_±r
->
unknown_deÁu…
;

3027 i‡(
kìp
 =
PNG_HANDLE_CHUNK_ALWAYS
 ||

3028 (
kìp
 =
PNG_HANDLE_CHUNK_IF_SAFE
 &&

3029 
	`PNG_CHUNK_ANCILLARY
(
≤g_±r
->
chunk_«me
)))

3031 i‡(
	`≤g_ˇche_unknown_chunk
(
≤g_±r
, 
Àngth
) == 0)

3032 
kìp
 = 
PNG_HANDLE_CHUNK_NEVER
;

3036 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

3039 #i‚de‡
PNG_READ_USER_CHUNKS_SUPPORTED


3040 #îr‹ 
no
 
mëhod
 
to
 
suµ‹t
 
READ_UNKNOWN_CHUNKS


3050 i‡(
kìp
 > 
PNG_HANDLE_CHUNK_NEVER
)

3051 
	`≤g_≠p_îr‹
(
≤g_±r
, "no unknown chunk supportávailable");

3053 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

3057 #ifde‡
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


3061 i‡(
kìp
 =
PNG_HANDLE_CHUNK_ALWAYS
 ||

3062 (
kìp
 =
PNG_HANDLE_CHUNK_IF_SAFE
 &&

3063 
	`PNG_CHUNK_ANCILLARY
(
≤g_±r
->
chunk_«me
)))

3065 #ifde‡
PNG_USER_LIMITS_SUPPORTED


3066 
≤g_±r
->
u£r_chunk_ˇche_max
)

3069 
≤g_±r
->
u£r_chunk_ˇche_max
 = 1;

3070 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "no space in chunk cache");

3079 --(
≤g_±r
->
u£r_chunk_ˇche_max
);

3086 
	`≤g_£t_unknown_chunks
(
≤g_±r
, 
öfo_±r
,

3087 &
≤g_±r
->
unknown_chunk
, 1);

3088 
h™dÀd
 = 1;

3089 #ifde‡
PNG_USER_LIMITS_SUPPORTED


3095 
	`PNG_UNUSED
(
öfo_±r
)

3102 i‡(
≤g_±r
->
unknown_chunk
.
d©a
 !
NULL
)

3103 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
unknown_chunk
.
d©a
);

3104 
≤g_±r
->
unknown_chunk
.
d©a
 = 
NULL
;

3108 
	`≤g_¸c_föish
(
≤g_±r
, 
Àngth
);

3109 
	`PNG_UNUSED
(
öfo_±r
)

3110 
	`PNG_UNUSED
(
kìp
)

3114 i‡(
h™dÀd
 =0 && 
	`PNG_CHUNK_CRITICAL
(
≤g_±r
->
chunk_«me
))

3115 
	`≤g_chunk_îr‹
(
≤g_±r
, "unhandled critical chunk");

3116 
	}
}

3131 
	$≤g_check_chunk_«me
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
chunk_«me
)

3133 
i
;

3134 
≤g_uöt_32
 
˙
=
chunk_«me
;

3136 
	`≤g_debug
(1, "inÖng_check_chunk_name");

3138 
i
=1; i<=4; ++i)

3140 
c
 = 
˙
 & 0xff;

3142 i‡(
c
 < 65 || c > 122 || (c > 90 && c < 97))

3143 
	`≤g_chunk_îr‹
(
≤g_±r
, "invalid chunkÅype");

3145 
˙
 >>= 8;

3147 
	}
}

3150 
	$≤g_check_chunk_Àngth
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
Àngth
)

3152 
≤g_Æloc_size_t
 
limô
 = 
PNG_UINT_31_MAX
;

3154 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


3155 i‡(
≤g_±r
->
u£r_chunk_mÆloc_max
 > 0 &&

3156 
≤g_±r
->
u£r_chunk_mÆloc_max
 < 
limô
)

3157 
limô
 = 
≤g_±r
->
u£r_chunk_mÆloc_max
;

3158 #ñi‡
PNG_USER_CHUNK_MALLOC_MAX
 > 0

3159 i‡(
PNG_USER_CHUNK_MALLOC_MAX
 < 
limô
)

3160 
limô
 = 
PNG_USER_CHUNK_MALLOC_MAX
;

3162 i‡(
≤g_±r
->
chunk_«me
 =
≤g_IDAT
)

3164 
≤g_Æloc_size_t
 
id©_limô
 = 
PNG_UINT_31_MAX
;

3165 
size_t
 
row_Á˘‹
 =

3166 (
size_t
)
≤g_±r
->
width


3167 * (
size_t
)
≤g_±r
->
ch™√ls


3168 * (
≤g_±r
->
bô_dïth
 > 8? 2: 1)

3170 + (
≤g_±r
->
öãæa˚d
? 6: 0);

3171 i‡(
≤g_±r
->
height
 > 
PNG_UINT_32_MAX
/
row_Á˘‹
)

3172 
id©_limô
 = 
PNG_UINT_31_MAX
;

3174 
id©_limô
 = 
≤g_±r
->
height
 * 
row_Á˘‹
;

3175 
row_Á˘‹
 =Ñow_factor > 32566? 32566 :Ñow_factor;

3176 
id©_limô
 +6 + 5*(id©_limô/
row_Á˘‹
+1);

3177 
id©_limô
=id©_limô < 
PNG_UINT_31_MAX
? idat_limit : PNG_UINT_31_MAX;

3178 
limô
 =Üimô < 
id©_limô
? idat_limit :Üimit;

3181 i‡(
Àngth
 > 
limô
)

3183 
	`≤g_debug2
(0,"Üength = %lu,Üimit = %lu",

3184 ()
Àngth
,()
limô
);

3185 
	`≤g_chunk_îr‹
(
≤g_±r
, "chunk data isÅooÜarge");

3187 
	}
}

3197 
	$≤g_comböe_row
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
dp
, 
di•œy
)

3199 
pixñ_dïth
 = 
≤g_±r
->
å™sf‹med_pixñ_dïth
;

3200 
≤g_c⁄°_byãp
 
•
 = 
≤g_±r
->
row_buf
 + 1;

3201 
≤g_Æloc_size_t
 
row_width
 = 
≤g_±r
->
width
;

3202 
∑ss
 = 
≤g_±r
->pass;

3203 
≤g_byãp
 
íd_±r
 = 0;

3204 
≤g_byã
 
íd_byã
 = 0;

3205 
íd_mask
;

3207 
	`≤g_debug
(1, "inÖng_combine_row");

3212 i‡(
pixñ_dïth
 == 0)

3213 
	`≤g_îr‹
(
≤g_±r
, "internalÑowÜogicÉrror");

3219 i‡(
≤g_±r
->
öfo_rowbyãs
 != 0 &&Öng_ptr->info_rowbytes !=

3220 
	`PNG_ROWBYTES
(
pixñ_dïth
, 
row_width
))

3221 
	`≤g_îr‹
(
≤g_±r
, "internalÑow size calculationÉrror");

3224 i‡(
row_width
 == 0)

3225 
	`≤g_îr‹
(
≤g_±r
, "internalÑow widthÉrror");

3231 
íd_mask
 = (
pixñ_dïth
 * 
row_width
) & 7;

3232 i‡(
íd_mask
 != 0)

3235 
íd_±r
 = 
dp
 + 
	`PNG_ROWBYTES
(
pixñ_dïth
, 
row_width
) - 1;

3236 
íd_byã
 = *
íd_±r
;

3237 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


3238 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

3240 
íd_mask
 = ()(0xff <<Énd_mask);

3244 
íd_mask
 = 0xff >>Énd_mask;

3254 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


3255 i‡(
≤g_±r
->
öãæa˚d
 != 0 &&

3256 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0 &&

3257 
∑ss
 < 6 && (
di•œy
 == 0 ||

3259 (
di•œy
 =1 && (
∑ss
 & 1) != 0)))

3264 i‡(
row_width
 <
	`PNG_PASS_START_COL
(
∑ss
))

3267 i‡(
pixñ_dïth
 < 8)

3306 #i‡
PNG_USE_COMPILE_TIME_MASKS


3307 
	#PNG_LSR
(
x
,
s
Ë((x)>>((sË& 0x1f))

	)

3308 
	#PNG_LSL
(
x
,
s
Ë((x)<<((sË& 0x1f))

	)

3310 
	#PNG_LSR
(
x
,
s
Ë((x)>>(s))

	)

3311 
	#PNG_LSL
(
x
,
s
Ë((x)<<(s))

	)

3313 
	#S_COPY
(
p
,
x
Ë((’)<4 ? 
	`PNG_LSR
(0x80088822,(3-(p))*8+(7-(x))) :\

3314 
	`PNG_LSR
(0xØ55ff00,(7-(
p
))*8+(7-(
x
)))Ë& 1)

	)

3315 
	#B_COPY
(
p
,
x
Ë((’)<4 ? 
	`PNG_LSR
(0xff0fff33,(3-(p))*8+(7-(x))) :\

3316 
	`PNG_LSR
(0xff55ff00,(7-(
p
))*8+(7-(
x
)))Ë& 1)

	)

3324 
	#PIXEL_MASK
(
p
,
x
,
d
,
s
) \

3325 (
	`PNG_LSL
(((PNG_LSL(1U,(
d
)))-1),(((
x
)*(d))^((
s
)?8-(d):0))))

	)

3329 
	#S_MASKx
(
p
,
x
,
d
,
s
Ë(
	`S_COPY
’,x)?
	`PIXEL_MASK
’,x,d,s):0)

	)

3330 
	#B_MASKx
(
p
,
x
,
d
,
s
Ë(
	`B_COPY
’,x)?
	`PIXEL_MASK
’,x,d,s):0)

	)

3336 
	#MASK_EXPAND
(
m
,
d
Ë((m)*((d)==1?0x01010101:((d)==2?0x00010001:1)))

	)

3338 
	#S_MASK
(
p
,
d
,
s
Ë
	`MASK_EXPAND
(
	`S_MASKx
(p,0,d,s) + S_MASKx(p,1,d,s) +\

3339 
	`S_MASKx
(
p
,2,
d
,
s
) + S_MASKx(p,3,d,s) + S_MASKx(p,4,d,s) +\

3340 
	`S_MASKx
(
p
,5,
d
,
s
Ë+ S_MASKx’,6,d,sË+ S_MASKx’,7,d,s), d)

	)

3342 
	#B_MASK
(
p
,
d
,
s
Ë
	`MASK_EXPAND
(
	`B_MASKx
(p,0,d,s) + B_MASKx(p,1,d,s) +\

3343 
	`B_MASKx
(
p
,2,
d
,
s
) + B_MASKx(p,3,d,s) + B_MASKx(p,4,d,s) +\

3344 
	`B_MASKx
(
p
,5,
d
,
s
Ë+ B_MASKx’,6,d,sË+ B_MASKx’,7,d,s), d)

	)

3346 #i‡
PNG_USE_COMPILE_TIME_MASKS


3352 
	#S_MASKS
(
d
,
s
Ë{ 
	`S_MASK
(0,d,s), S_MASK(1,d,s), S_MASK(2,d,s),\

3353 
	`S_MASK
(3,
d
,
s
), S_MASK(4,d,s), S_MASK(5,d,sË}

	)

3355 
	#B_MASKS
(
d
,
s
Ë{ 
	`B_MASK
(1,d,s), B_MASK(3,d,s), B_MASK(5,d,sË}

	)

3357 
	#DEPTH_INDEX
(
d
Ë((d)==1?0:((d)==2?1:2))

	)

3362 c⁄° 
≤g_uöt_32
 
row_mask
[2 ][3 ][6] =

3365 { 
	`S_MASKS
(1,0), S_MASKS(2,0), S_MASKS(4,0) },

3367 { 
	`S_MASKS
(1,1), S_MASKS(2,1), S_MASKS(4,1) }

3373 c⁄° 
≤g_uöt_32
 
di•œy_mask
[2][3][3] =

3376 { 
	`B_MASKS
(1,0), B_MASKS(2,0), B_MASKS(4,0) },

3378 { 
	`B_MASKS
(1,1), B_MASKS(2,1), B_MASKS(4,1) }

3381 
	#MASK
(
∑ss
,
dïth
,
di•œy
,
≤g
)\

3382 ((
di•œy
)?
di•œy_mask
[
≤g
][
	`DEPTH_INDEX
(
dïth
)][
∑ss
>>1]:\

3383 
row_mask
[
≤g
][
	`DEPTH_INDEX
(
dïth
)][
∑ss
])

	)

3389 
	#MASK
(
∑ss
,
dïth
,
di•œy
,
≤g
)\

3390 ((
di•œy
)?
	`B_MASK
(
∑ss
,
dïth
,
≤g
):
	`S_MASK
’ass,dïth,≤g))

	)

3398 
≤g_uöt_32
 
pixñs_≥r_byã
 = 8 / 
pixñ_dïth
;

3399 
≤g_uöt_32
 
mask
;

3401 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


3402 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

3403 
mask
 = 
	`MASK
(
∑ss
, 
pixñ_dïth
, 
di•œy
, 0);

3407 
mask
 = 
	`MASK
(
∑ss
, 
pixñ_dïth
, 
di•œy
, 1);

3411 
≤g_uöt_32
 
m
;

3417 
m
 = 
mask
;

3418 
mask
 = (
m
 >> 8) | (m << 24);

3419 
m
 &= 0xff;

3421 i‡(
m
 != 0)

3423 i‡(
m
 != 0xff)

3424 *
dp
 = (
≤g_byã
)((*d∞& ~
m
Ë| (*
•
 & m));

3426 *
dp
 = *
•
;

3433 i‡(
row_width
 <
pixñs_≥r_byã
)

3436 
row_width
 -
pixñs_≥r_byã
;

3437 ++
dp
;

3438 ++
•
;

3444 
byãs_to_c›y
, 
byãs_to_jump
;

3447 i‡(
pixñ_dïth
 & 7)

3448 
	`≤g_îr‹
(
≤g_±r
, "invalid userÅransformÖixel depth");

3450 
pixñ_dïth
 >>= 3;

3451 
row_width
 *
pixñ_dïth
;

3458 
off£t
 = 
	`PNG_PASS_START_COL
(
∑ss
Ë* 
pixñ_dïth
;

3460 
row_width
 -
off£t
;

3461 
dp
 +
off£t
;

3462 
•
 +
off£t
;

3466 i‡(
di•œy
 != 0)

3472 
byãs_to_c›y
 = (1<<((6-
∑ss
)>>1)Ë* 
pixñ_dïth
;

3475 i‡(
byãs_to_c›y
 > 
row_width
)

3476 
byãs_to_c›y
 = (Ë
row_width
;

3480 
byãs_to_c›y
 = 
pixñ_dïth
;

3483 
byãs_to_jump
 = 
	`PNG_PASS_COL_OFFSET
(
∑ss
Ë* 
pixñ_dïth
;

3493 
byãs_to_c›y
)

3498 *
dp
 = *
•
;

3500 i‡(
row_width
 <
byãs_to_jump
)

3503 
dp
 +
byãs_to_jump
;

3504 
•
 +
byãs_to_jump
;

3505 
row_width
 -
byãs_to_jump
;

3514 
dp
[0] = 
•
[0]; dp[1] = sp[1];

3516 i‡(
row_width
 <
byãs_to_jump
)

3519 
•
 +
byãs_to_jump
;

3520 
dp
 +
byãs_to_jump
;

3521 
row_width
 -
byãs_to_jump
;

3523 
row_width
 > 1);

3526 *
dp
 = *
•
;

3535 
dp
[0] = 
•
[0]; dp[1] = sp[1]; dp[2] = sp[2];

3537 i‡(
row_width
 <
byãs_to_jump
)

3540 
•
 +
byãs_to_jump
;

3541 
dp
 +
byãs_to_jump
;

3542 
row_width
 -
byãs_to_jump
;

3546 #i‡
PNG_ALIGN_TYPE
 !
PNG_ALIGN_NONE


3552 i‡(
byãs_to_c›y
 < 16 &&

3553 
	`≤g_ißlig√d
(
dp
, 
≤g_uöt_16
) &&

3554 
	`≤g_ißlig√d
(
•
, 
≤g_uöt_16
) &&

3555 
byãs_to_c›y
 % ( (
≤g_uöt_16
)) == 0 &&

3556 
byãs_to_jump
 % ( (
≤g_uöt_16
)) == 0)

3561 i‡(
	`≤g_ißlig√d
(
dp
, 
≤g_uöt_32
) &&

3562 
	`≤g_ißlig√d
(
•
, 
≤g_uöt_32
) &&

3563 
byãs_to_c›y
 % ( (
≤g_uöt_32
)) == 0 &&

3564 
byãs_to_jump
 % ( (
≤g_uöt_32
)) == 0)

3566 
≤g_uöt_32p
 
dp32
 = 
	`≤g_Æignˇ°
’ng_uöt_32p,
dp
);

3567 
≤g_c⁄°_uöt_32p
 
•32
 = 
	`≤g_Æignˇ°c⁄°
(

3568 
≤g_c⁄°_uöt_32p
, 
•
);

3569 
size_t
 
skù
 = (
byãs_to_jump
-
byãs_to_c›y
) /

3570 ( (
≤g_uöt_32
));

3574 
size_t
 
c
 = 
byãs_to_c›y
;

3577 *
dp32
++ = *
•32
++;

3578 
c
 -( (
≤g_uöt_32
));

3580 
c
 > 0);

3582 i‡(
row_width
 <
byãs_to_jump
)

3585 
dp32
 +
skù
;

3586 
•32
 +
skù
;

3587 
row_width
 -
byãs_to_jump
;

3589 
byãs_to_c›y
 <
row_width
);

3595 
dp
 = (
≤g_byãp
)
dp32
;

3596 
•
 = (
≤g_c⁄°_byãp
)
•32
;

3598 *
dp
++ = *
•
++;

3599 --
row_width
 > 0);

3608 
≤g_uöt_16p
 
dp16
 = 
	`≤g_Æignˇ°
’ng_uöt_16p, 
dp
);

3609 
≤g_c⁄°_uöt_16p
 
•16
 = 
	`≤g_Æignˇ°c⁄°
(

3610 
≤g_c⁄°_uöt_16p
, 
•
);

3611 
size_t
 
skù
 = (
byãs_to_jump
-
byãs_to_c›y
) /

3612 ( (
≤g_uöt_16
));

3616 
size_t
 
c
 = 
byãs_to_c›y
;

3619 *
dp16
++ = *
•16
++;

3620 
c
 -( (
≤g_uöt_16
));

3622 
c
 > 0);

3624 i‡(
row_width
 <
byãs_to_jump
)

3627 
dp16
 +
skù
;

3628 
•16
 +
skù
;

3629 
row_width
 -
byãs_to_jump
;

3631 
byãs_to_c›y
 <
row_width
);

3634 
dp
 = (
≤g_byãp
)
dp16
;

3635 
•
 = (
≤g_c⁄°_byãp
)
•16
;

3637 *
dp
++ = *
•
++;

3638 --
row_width
 > 0);

3647 
	`mem˝y
(
dp
, 
•
, 
byãs_to_c›y
);

3649 i‡(
row_width
 <
byãs_to_jump
)

3652 
•
 +
byãs_to_jump
;

3653 
dp
 +
byãs_to_jump
;

3654 
row_width
 -
byãs_to_jump
;

3655 i‡(
byãs_to_c›y
 > 
row_width
)

3656 
byãs_to_c›y
 = (Ë
row_width
;

3672 
	`mem˝y
(
dp
, 
•
, 
	`PNG_ROWBYTES
(
pixñ_dïth
, 
row_width
));

3675 i‡(
íd_±r
 !
NULL
)

3676 *
íd_±r
 = (
≤g_byã
)((
íd_byã
 & 
íd_mask
) | (*end_ptr & ~end_mask));

3677 
	}
}

3679 #ifde‡
PNG_READ_INTERLACING_SUPPORTED


3681 
	$≤g_do_ªad_öãæa˚
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
, 
∑ss
,

3682 
≤g_uöt_32
 
å™sf‹m©i⁄s
 )

3686 c⁄° 
≤g_∑ss_öc
[7] = {8, 8, 4, 4, 2, 2, 1};

3688 
	`≤g_debug
(1, "inÖng_do_read_interlace");

3689 i‡(
row
 !
NULL
 && 
row_öfo
 != NULL)

3691 
≤g_uöt_32
 
föÆ_width
;

3693 
föÆ_width
 = 
row_öfo
->
width
 * 
≤g_∑ss_öc
[
∑ss
];

3695 
row_öfo
->
pixñ_dïth
)

3699 
≤g_byãp
 
•
 = 
row
 + (
size_t
)((
row_öfo
->
width
 - 1) >> 3);

3700 
≤g_byãp
 
dp
 = 
row
 + (
size_t
)((
föÆ_width
 - 1) >> 3);

3701 
sshi·
, 
dshi·
;

3702 
s_°¨t
, 
s_íd
;

3703 
s_öc
;

3704 
j°›
 = ()
≤g_∑ss_öc
[
∑ss
];

3705 
≤g_byã
 
v
;

3706 
≤g_uöt_32
 
i
;

3707 
j
;

3709 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


3710 i‡((
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

3712 
sshi·
 = ((
row_öfo
->
width
 + 7) & 0x07);

3713 
dshi·
 = ((
föÆ_width
 + 7) & 0x07);

3714 
s_°¨t
 = 7;

3715 
s_íd
 = 0;

3716 
s_öc
 = -1;

3722 
sshi·
 = 7 - ((
row_öfo
->
width
 + 7) & 0x07);

3723 
dshi·
 = 7 - ((
föÆ_width
 + 7) & 0x07);

3724 
s_°¨t
 = 0;

3725 
s_íd
 = 7;

3726 
s_öc
 = 1;

3729 
i
 = 0; i < 
row_öfo
->
width
; i++)

3731 
v
 = (
≤g_byã
)((*
•
 >> 
sshi·
) & 0x01);

3732 
j
 = 0; j < 
j°›
; j++)

3734 
tmp
 = *
dp
 & (0x7f7‡>> (7 - 
dshi·
));

3735 
tmp
 |()(
v
 << 
dshi·
);

3736 *
dp
 = (
≤g_byã
)(
tmp
 & 0xff);

3738 i‡(
dshi·
 =
s_íd
)

3740 
dshi·
 = 
s_°¨t
;

3741 
dp
--;

3745 
dshi·
 = ()(()dshi· + 
s_öc
);

3748 i‡(
sshi·
 =
s_íd
)

3750 
sshi·
 = 
s_°¨t
;

3751 
•
--;

3755 
sshi·
 = ()(()sshi· + 
s_öc
);

3762 
≤g_byãp
 
•
 = 
row
 + (
≤g_uöt_32
)((
row_öfo
->
width
 - 1) >> 2);

3763 
≤g_byãp
 
dp
 = 
row
 + (
≤g_uöt_32
)((
föÆ_width
 - 1) >> 2);

3764 
sshi·
, 
dshi·
;

3765 
s_°¨t
, 
s_íd
;

3766 
s_öc
;

3767 
j°›
 = ()
≤g_∑ss_öc
[
∑ss
];

3768 
≤g_uöt_32
 
i
;

3770 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


3771 i‡((
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

3773 
sshi·
 = (((
row_öfo
->
width
 + 3) & 0x03) << 1);

3774 
dshi·
 = (((
föÆ_width
 + 3) & 0x03) << 1);

3775 
s_°¨t
 = 6;

3776 
s_íd
 = 0;

3777 
s_öc
 = -2;

3783 
sshi·
 = ((3 - ((
row_öfo
->
width
 + 3) & 0x03)) << 1);

3784 
dshi·
 = ((3 - ((
föÆ_width
 + 3) & 0x03)) << 1);

3785 
s_°¨t
 = 0;

3786 
s_íd
 = 6;

3787 
s_öc
 = 2;

3790 
i
 = 0; i < 
row_öfo
->
width
; i++)

3792 
≤g_byã
 
v
;

3793 
j
;

3795 
v
 = (
≤g_byã
)((*
•
 >> 
sshi·
) & 0x03);

3796 
j
 = 0; j < 
j°›
; j++)

3798 
tmp
 = *
dp
 & (0x3f3‡>> (6 - 
dshi·
));

3799 
tmp
 |()(
v
 << 
dshi·
);

3800 *
dp
 = (
≤g_byã
)(
tmp
 & 0xff);

3802 i‡(
dshi·
 =
s_íd
)

3804 
dshi·
 = 
s_°¨t
;

3805 
dp
--;

3809 
dshi·
 = ()(()dshi· + 
s_öc
);

3812 i‡(
sshi·
 =
s_íd
)

3814 
sshi·
 = 
s_°¨t
;

3815 
•
--;

3819 
sshi·
 = ()(()sshi· + 
s_öc
);

3826 
≤g_byãp
 
•
 = 
row
 + (
size_t
)((
row_öfo
->
width
 - 1) >> 1);

3827 
≤g_byãp
 
dp
 = 
row
 + (
size_t
)((
föÆ_width
 - 1) >> 1);

3828 
sshi·
, 
dshi·
;

3829 
s_°¨t
, 
s_íd
;

3830 
s_öc
;

3831 
≤g_uöt_32
 
i
;

3832 
j°›
 = ()
≤g_∑ss_öc
[
∑ss
];

3834 #ifde‡
PNG_READ_PACKSWAP_SUPPORTED


3835 i‡((
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

3837 
sshi·
 = (((
row_öfo
->
width
 + 1) & 0x01) << 2);

3838 
dshi·
 = (((
föÆ_width
 + 1) & 0x01) << 2);

3839 
s_°¨t
 = 4;

3840 
s_íd
 = 0;

3841 
s_öc
 = -4;

3847 
sshi·
 = ((1 - ((
row_öfo
->
width
 + 1) & 0x01)) << 2);

3848 
dshi·
 = ((1 - ((
föÆ_width
 + 1) & 0x01)) << 2);

3849 
s_°¨t
 = 0;

3850 
s_íd
 = 4;

3851 
s_öc
 = 4;

3854 
i
 = 0; i < 
row_öfo
->
width
; i++)

3856 
≤g_byã
 
v
 = (≤g_byã)((*
•
 >> 
sshi·
) & 0x0f);

3857 
j
;

3859 
j
 = 0; j < 
j°›
; j++)

3861 
tmp
 = *
dp
 & (0xf0‡>> (4 - 
dshi·
));

3862 
tmp
 |()(
v
 << 
dshi·
);

3863 *
dp
 = (
≤g_byã
)(
tmp
 & 0xff);

3865 i‡(
dshi·
 =
s_íd
)

3867 
dshi·
 = 
s_°¨t
;

3868 
dp
--;

3872 
dshi·
 = ()(()dshi· + 
s_öc
);

3875 i‡(
sshi·
 =
s_íd
)

3877 
sshi·
 = 
s_°¨t
;

3878 
•
--;

3882 
sshi·
 = ()(()sshi· + 
s_öc
);

3889 
size_t
 
pixñ_byãs
 = (
row_öfo
->
pixñ_dïth
 >> 3);

3891 
≤g_byãp
 
•
 = 
row
 + (
size_t
)(
row_öfo
->
width
 - 1)

3892 * 
pixñ_byãs
;

3894 
≤g_byãp
 
dp
 = 
row
 + (
size_t
)(
föÆ_width
 - 1Ë* 
pixñ_byãs
;

3896 
j°›
 = ()
≤g_∑ss_öc
[
∑ss
];

3897 
≤g_uöt_32
 
i
;

3899 
i
 = 0; i < 
row_öfo
->
width
; i++)

3901 
≤g_byã
 
v
[8];

3902 
j
;

3904 
	`mem˝y
(
v
, 
•
, 
pixñ_byãs
);

3906 
j
 = 0; j < 
j°›
; j++)

3908 
	`mem˝y
(
dp
, 
v
, 
pixñ_byãs
);

3909 
dp
 -
pixñ_byãs
;

3912 
•
 -
pixñ_byãs
;

3918 
row_öfo
->
width
 = 
föÆ_width
;

3919 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
, 
föÆ_width
);

3921 #i‚de‡
PNG_READ_PACKSWAP_SUPPORTED


3922 
	`PNG_UNUSED
(
å™sf‹m©i⁄s
)

3924 
	}
}

3928 
	$≤g_ªad_fûãr_row_sub
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3929 
≤g_c⁄°_byãp
 
¥ev_row
)

3931 
size_t
 
i
;

3932 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
;

3933 
bµ
 = (
row_öfo
->
pixñ_dïth
 + 7) >> 3;

3934 
≤g_byãp
 
Ω
 = 
row
 + 
bµ
;

3936 
	`PNG_UNUSED
(
¥ev_row
)

3938 
i
 = 
bµ
; i < 
i°›
; i++)

3940 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*‘p-
bµ
))) & 0xff);

3941 
Ω
++;

3943 
	}
}

3946 
	$≤g_ªad_fûãr_row_up
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3947 
≤g_c⁄°_byãp
 
¥ev_row
)

3949 
size_t
 
i
;

3950 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
;

3951 
≤g_byãp
 
Ω
 = 
row
;

3952 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

3954 
i
 = 0; i < 
i°›
; i++)

3956 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*
µ
++)) & 0xff);

3957 
Ω
++;

3959 
	}
}

3962 
	$≤g_ªad_fûãr_row_avg
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3963 
≤g_c⁄°_byãp
 
¥ev_row
)

3965 
size_t
 
i
;

3966 
≤g_byãp
 
Ω
 = 
row
;

3967 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;

3968 
bµ
 = (
row_öfo
->
pixñ_dïth
 + 7) >> 3;

3969 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
 - 
bµ
;

3971 
i
 = 0; i < 
bµ
; i++)

3973 *
Ω
 = (
≤g_byã
)((()(*rp) +

3974 (()(*
µ
++) / 2 )) & 0xff);

3976 
Ω
++;

3979 
i
 = 0; i < 
i°›
; i++)

3981 *
Ω
 = (
≤g_byã
)((()(*rp) +

3982 ()(*
µ
++ + *(
Ω
-
bµ
)) / 2 ) & 0xff);

3984 
Ω
++;

3986 
	}
}

3989 
	$≤g_ªad_fûãr_row_∑ëh_1byã_pixñ
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

3990 
≤g_c⁄°_byãp
 
¥ev_row
)

3992 
≤g_byãp
 
Ω_íd
 = 
row
 + 
row_öfo
->
rowbyãs
;

3993 
a
, 
c
;

3996 
c
 = *
¥ev_row
++;

3997 
a
 = *
row
 + 
c
;

3998 *
row
++ = (
≤g_byã
)
a
;

4001 
row
 < 
Ω_íd
)

4003 
b
, 
∑
, 
pb
, 
pc
, 
p
;

4005 
a
 &= 0xff;

4006 
b
 = *
¥ev_row
++;

4008 
p
 = 
b
 - 
c
;

4009 
pc
 = 
a
 - 
c
;

4011 #ifde‡
PNG_USE_ABS


4012 
∑
 = 
	`abs
(
p
);

4013 
pb
 = 
	`abs
(
pc
);

4014 
pc
 = 
	`abs
(
p
 +Öc);

4016 
∑
 = 
p
 < 0 ? -p :Ö;

4017 
pb
 = 
pc
 < 0 ? -pc :Öc;

4018 
pc
 = (
p
 +Öc) < 0 ? -(p +Öc) :Ö +Öc;

4024 i‡(
pb
 < 
∑
)

4026 
∑
 = 
pb
; 
a
 = 
b
;

4028 i‡(
pc
 < 
∑
Ë
a
 = 
c
;

4033 
c
 = 
b
;

4034 
a
 +*
row
;

4035 *
row
++ = (
≤g_byã
)
a
;

4037 
	}
}

4040 
	$≤g_ªad_fûãr_row_∑ëh_mu…ibyã_pixñ
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

4041 
≤g_c⁄°_byãp
 
¥ev_row
)

4043 
bµ
 = (
row_öfo
->
pixñ_dïth
 + 7) >> 3;

4044 
≤g_byãp
 
Ω_íd
 = 
row
 + 
bµ
;

4049 
row
 < 
Ω_íd
)

4051 
a
 = *
row
 + *
¥ev_row
++;

4052 *
row
++ = (
≤g_byã
)
a
;

4056 
Ω_íd
 =Ñp_íd + (
row_öfo
->
rowbyãs
 - 
bµ
);

4058 
row
 < 
Ω_íd
)

4060 
a
, 
b
, 
c
, 
∑
, 
pb
, 
pc
, 
p
;

4062 
c
 = *(
¥ev_row
 - 
bµ
);

4063 
a
 = *(
row
 - 
bµ
);

4064 
b
 = *
¥ev_row
++;

4066 
p
 = 
b
 - 
c
;

4067 
pc
 = 
a
 - 
c
;

4069 #ifde‡
PNG_USE_ABS


4070 
∑
 = 
	`abs
(
p
);

4071 
pb
 = 
	`abs
(
pc
);

4072 
pc
 = 
	`abs
(
p
 +Öc);

4074 
∑
 = 
p
 < 0 ? -p :Ö;

4075 
pb
 = 
pc
 < 0 ? -pc :Öc;

4076 
pc
 = (
p
 +Öc) < 0 ? -(p +Öc) :Ö +Öc;

4079 i‡(
pb
 < 
∑
)

4081 
∑
 = 
pb
; 
a
 = 
b
;

4083 i‡(
pc
 < 
∑
Ë
a
 = 
c
;

4085 
a
 +*
row
;

4086 *
row
++ = (
≤g_byã
)
a
;

4088 
	}
}

4091 
	$≤g_öô_fûãr_fun˘i⁄s
(
≤g_°ru˘Ω
 
µ
)

4102 
bµ
 = (
µ
->
pixñ_dïth
 + 7) >> 3;

4104 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub
;

4105 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_UP
-1] = 
≤g_ªad_fûãr_row_up
;

4106 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg
;

4107 i‡(
bµ
 == 1)

4108 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] =

4109 
≤g_ªad_fûãr_row_∑ëh_1byã_pixñ
;

4111 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] =

4112 
≤g_ªad_fûãr_row_∑ëh_mu…ibyã_pixñ
;

4114 #ifde‡
PNG_FILTER_OPTIMIZATIONS


4123 
	`PNG_FILTER_OPTIMIZATIONS
(
µ
, 
bµ
);

4125 
	}
}

4128 
	$≤g_ªad_fûãr_row
(
≤g_°ru˘Ω
 
µ
, 
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

4129 
≤g_c⁄°_byãp
 
¥ev_row
, 
fûãr
)

4135 i‡(
fûãr
 > 
PNG_FILTER_VALUE_NONE
 && fûã∏< 
PNG_FILTER_VALUE_LAST
)

4137 i‡(
µ
->
ªad_fûãr
[0] =
NULL
)

4138 
	`≤g_öô_fûãr_fun˘i⁄s
(
µ
);

4140 
µ
->
ªad_fûãr
[
fûãr
-1](
row_öfo
, 
row
, 
¥ev_row
);

4142 
	}
}

4144 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


4146 
	$≤g_ªad_IDAT_d©a
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
ouçut
,

4147 
≤g_Æloc_size_t
 
avaû_out
)

4150 
≤g_±r
->
z°ªam
.
√xt_out
 = 
ouçut
;

4151 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

4153 i‡(
ouçut
 =
NULL
)

4154 
avaû_out
 = 0;

4158 
ªt
;

4159 
≤g_byã
 
tmpbuf
[
PNG_INFLATE_BUF_SIZE
];

4161 i‡(
≤g_±r
->
z°ªam
.
avaû_ö
 == 0)

4163 
uI¡
 
avaû_ö
;

4164 
≤g_byãp
 
buf„r
;

4166 
≤g_±r
->
id©_size
 == 0)

4168 
	`≤g_¸c_föish
(
≤g_±r
, 0);

4170 
≤g_±r
->
id©_size
 = 
	`≤g_ªad_chunk_hódî
(png_ptr);

4174 i‡(
≤g_±r
->
chunk_«me
 !
≤g_IDAT
)

4175 
	`≤g_îr‹
(
≤g_±r
, "NotÉnough image data");

4178 
avaû_ö
 = 
≤g_±r
->
IDAT_ªad_size
;

4180 i‡(
avaû_ö
 > 
≤g_±r
->
id©_size
)

4181 
avaû_ö
 = (
uI¡
)
≤g_±r
->
id©_size
;

4188 
buf„r
 = 
	`≤g_ªad_buf„r
(
≤g_±r
, 
avaû_ö
, 0 );

4190 
	`≤g_¸c_ªad
(
≤g_±r
, 
buf„r
, 
avaû_ö
);

4191 
≤g_±r
->
id©_size
 -
avaû_ö
;

4193 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
buf„r
;

4194 
≤g_±r
->
z°ªam
.
avaû_ö
 =ávail_in;

4198 i‡(
ouçut
 !
NULL
)

4200 
uI¡
 
out
 = 
ZLIB_IO_MAX
;

4202 i‡(
out
 > 
avaû_out
)

4203 
out
 = (
uI¡
)
avaû_out
;

4205 
avaû_out
 -
out
;

4206 
≤g_±r
->
z°ªam
.
avaû_out
 = 
out
;

4211 
≤g_±r
->
z°ªam
.
√xt_out
 = 
tmpbuf
;

4212 
≤g_±r
->
z°ªam
.
avaû_out
 = ( 
tmpbuf
);

4222 
ªt
 = 
	`PNG_INFLATE
(
≤g_±r
, 
Z_NO_FLUSH
);

4225 i‡(
ouçut
 !
NULL
)

4226 
avaû_out
 +
≤g_±r
->
z°ªam
.avail_out;

4229 
avaû_out
 +( 
tmpbuf
Ë- 
≤g_±r
->
z°ªam
.avail_out;

4231 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

4233 i‡(
ªt
 =
Z_STREAM_END
)

4236 
≤g_±r
->
z°ªam
.
√xt_out
 = 
NULL
;

4238 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

4239 
≤g_±r
->
Êags
 |
PNG_FLAG_ZSTREAM_ENDED
;

4241 i‡(
≤g_±r
->
z°ªam
.
avaû_ö
 > 0 ||Öng_±r->
id©_size
 > 0)

4242 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "Extra compressed data");

4246 i‡(
ªt
 !
Z_OK
)

4248 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
ªt
);

4250 i‡(
ouçut
 !
NULL
)

4251 
	`≤g_chunk_îr‹
(
≤g_±r
,Öng_±r->
z°ªam
.
msg
);

4255 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
,Öng_±r->
z°ªam
.
msg
);

4259 } 
avaû_out
 > 0);

4261 i‡(
avaû_out
 > 0)

4266 i‡(
ouçut
 !
NULL
)

4267 
	`≤g_îr‹
(
≤g_±r
, "NotÉnough image data");

4270 
	`≤g_chunk_bíign_îr‹
(
≤g_±r
, "Too much image data");

4272 
	}
}

4275 
	$≤g_ªad_föish_IDAT
(
≤g_°ru˘Ω
 
≤g_±r
)

4282 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_ENDED
) == 0)

4288 
	`≤g_ªad_IDAT_d©a
(
≤g_±r
, 
NULL
, 0);

4289 
≤g_±r
->
z°ªam
.
√xt_out
 = 
NULL
;

4294 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_ENDED
) == 0)

4296 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

4297 
≤g_±r
->
Êags
 |
PNG_FLAG_ZSTREAM_ENDED
;

4304 i‡(
≤g_±r
->
zow√r
 =
≤g_IDAT
)

4307 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
NULL
;

4308 
≤g_±r
->
z°ªam
.
avaû_ö
 = 0;

4311 
≤g_±r
->
zow√r
 = 0;

4318 ()
	`≤g_¸c_föish
(
≤g_±r
,Öng_±r->
id©_size
);

4320 
	}
}

4323 
	$≤g_ªad_föish_row
(
≤g_°ru˘Ω
 
≤g_±r
)

4328 c⁄° 
≤g_byã
 
≤g_∑ss_°¨t
[7] = {0, 4, 0, 2, 0, 1, 0};

4331 c⁄° 
≤g_byã
 
≤g_∑ss_öc
[7] = {8, 8, 4, 4, 2, 2, 1};

4334 c⁄° 
≤g_byã
 
≤g_∑ss_y°¨t
[7] = {0, 0, 4, 0, 2, 0, 1};

4337 c⁄° 
≤g_byã
 
≤g_∑ss_yöc
[7] = {8, 8, 8, 4, 4, 2, 2};

4339 
	`≤g_debug
(1, "inÖng_read_finish_row");

4340 
≤g_±r
->
row_numbî
++;

4341 i‡(
≤g_±r
->
row_numbî
 <Öng_±r->
num_rows
)

4344 i‡(
≤g_±r
->
öãæa˚d
 != 0)

4346 
≤g_±r
->
row_numbî
 = 0;

4351 
	`mem£t
(
≤g_±r
->
¥ev_row
, 0,Öng_±r->
rowbyãs
 + 1);

4355 
≤g_±r
->
∑ss
++;

4357 i‡(
≤g_±r
->
∑ss
 >= 7)

4360 
≤g_±r
->
iwidth
 = (≤g_±r->
width
 +

4361 
≤g_∑ss_öc
[
≤g_±r
->
∑ss
] - 1 -

4362 
≤g_∑ss_°¨t
[
≤g_±r
->
∑ss
]) /

4363 
≤g_∑ss_öc
[
≤g_±r
->
∑ss
];

4365 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) == 0)

4367 
≤g_±r
->
num_rows
 = (≤g_±r->
height
 +

4368 
≤g_∑ss_yöc
[
≤g_±r
->
∑ss
] - 1 -

4369 
≤g_∑ss_y°¨t
[
≤g_±r
->
∑ss
]) /

4370 
≤g_∑ss_yöc
[
≤g_±r
->
∑ss
];

4376 } 
≤g_±r
->
num_rows
 =0 ||Öng_±r->
iwidth
 == 0);

4378 i‡(
≤g_±r
->
∑ss
 < 7)

4383 
	`≤g_ªad_föish_IDAT
(
≤g_±r
);

4384 
	}
}

4388 
	$≤g_ªad_°¨t_row
(
≤g_°ru˘Ω
 
≤g_±r
)

4393 c⁄° 
≤g_byã
 
≤g_∑ss_°¨t
[7] = {0, 4, 0, 2, 0, 1, 0};

4396 c⁄° 
≤g_byã
 
≤g_∑ss_öc
[7] = {8, 8, 4, 4, 2, 2, 1};

4399 c⁄° 
≤g_byã
 
≤g_∑ss_y°¨t
[7] = {0, 0, 4, 0, 2, 0, 1};

4402 c⁄° 
≤g_byã
 
≤g_∑ss_yöc
[7] = {8, 8, 8, 4, 4, 2, 2};

4404 
max_pixñ_dïth
;

4405 
size_t
 
row_byãs
;

4407 
	`≤g_debug
(1, "inÖng_read_start_row");

4409 #ifde‡
PNG_READ_TRANSFORMS_SUPPORTED


4410 
	`≤g_öô_ªad_å™sf‹m©i⁄s
(
≤g_±r
);

4412 i‡(
≤g_±r
->
öãæa˚d
 != 0)

4414 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) == 0)

4415 
≤g_±r
->
num_rows
 = (≤g_±r->
height
 + 
≤g_∑ss_yöc
[0] - 1 -

4416 
≤g_∑ss_y°¨t
[0]Ë/ 
≤g_∑ss_yöc
[0];

4419 
≤g_±r
->
num_rows
 =Öng_±r->
height
;

4421 
≤g_±r
->
iwidth
 = (≤g_±r->
width
 +

4422 
≤g_∑ss_öc
[
≤g_±r
->
∑ss
] - 1 -

4423 
≤g_∑ss_°¨t
[
≤g_±r
->
∑ss
]) /

4424 
≤g_∑ss_öc
[
≤g_±r
->
∑ss
];

4429 
≤g_±r
->
num_rows
 =Öng_±r->
height
;

4430 
≤g_±r
->
iwidth
 =Öng_±r->
width
;

4433 
max_pixñ_dïth
 = ()
≤g_±r
->
pixñ_dïth
;

4445 #ifde‡
PNG_READ_PACK_SUPPORTED


4446 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACK
Ë!0 &&Öng_±r->
bô_dïth
 < 8)

4447 
max_pixñ_dïth
 = 8;

4450 #ifde‡
PNG_READ_EXPAND_SUPPORTED


4451 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) != 0)

4453 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

4455 i‡(
≤g_±r
->
num_å™s
 != 0)

4456 
max_pixñ_dïth
 = 32;

4459 
max_pixñ_dïth
 = 24;

4462 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

4464 i‡(
max_pixñ_dïth
 < 8)

4465 
max_pixñ_dïth
 = 8;

4467 i‡(
≤g_±r
->
num_å™s
 != 0)

4468 
max_pixñ_dïth
 *= 2;

4471 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

4473 i‡(
≤g_±r
->
num_å™s
 != 0)

4475 
max_pixñ_dïth
 *= 4;

4476 
max_pixñ_dïth
 /= 3;

4482 #ifde‡
PNG_READ_EXPAND_16_SUPPORTED


4483 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND_16
) != 0)

4485 #ifde‡
PNG_READ_EXPAND_SUPPORTED


4489 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) != 0)

4491 i‡(
≤g_±r
->
bô_dïth
 < 16)

4492 
max_pixñ_dïth
 *= 2;

4496 
≤g_±r
->
å™sf‹m©i⁄s
 &~
PNG_EXPAND_16
;

4500 #ifde‡
PNG_READ_FILLER_SUPPORTED


4501 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & (
PNG_FILLER
)) != 0)

4503 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

4505 i‡(
max_pixñ_dïth
 <= 8)

4506 
max_pixñ_dïth
 = 16;

4509 
max_pixñ_dïth
 = 32;

4512 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

4513 
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

4515 i‡(
max_pixñ_dïth
 <= 32)

4516 
max_pixñ_dïth
 = 32;

4519 
max_pixñ_dïth
 = 64;

4524 #ifde‡
PNG_READ_GRAY_TO_RGB_SUPPORTED


4525 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_GRAY_TO_RGB
) != 0)

4528 #ifde‡
PNG_READ_EXPAND_SUPPORTED


4529 (
≤g_±r
->
num_å™s
 != 0 &&

4530 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_EXPAND
) != 0) ||

4532 #ifde‡
PNG_READ_FILLER_SUPPORTED


4533 (
≤g_±r
->
å™sf‹m©i⁄s
 & (
PNG_FILLER
)) != 0 ||

4535 
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

4537 i‡(
max_pixñ_dïth
 <= 16)

4538 
max_pixñ_dïth
 = 32;

4541 
max_pixñ_dïth
 = 64;

4546 i‡(
max_pixñ_dïth
 <= 8)

4548 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

4549 
max_pixñ_dïth
 = 32;

4552 
max_pixñ_dïth
 = 24;

4555 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

4556 
max_pixñ_dïth
 = 64;

4559 
max_pixñ_dïth
 = 48;

4564 #i‡
	`deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) && \

4565 
	`deföed
(
PNG_USER_TRANSFORM_PTR_SUPPORTED
)

4566 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_USER_TRANSFORM
) != 0)

4568 
u£r_pixñ_dïth
 = 
≤g_±r
->
u£r_å™sf‹m_dïth
 *

4569 
≤g_±r
->
u£r_å™sf‹m_ch™√ls
;

4571 i‡(
u£r_pixñ_dïth
 > 
max_pixñ_dïth
)

4572 
max_pixñ_dïth
 = 
u£r_pixñ_dïth
;

4579 
≤g_±r
->
maximum_pixñ_dïth
 = (
≤g_byã
)
max_pixñ_dïth
;

4580 
≤g_±r
->
å™sf‹med_pixñ_dïth
 = 0;

4585 
row_byãs
 = ((
≤g_±r
->
width
 + 7Ë& ~((
≤g_uöt_32
)7));

4589 
row_byãs
 = 
	`PNG_ROWBYTES
(
max_pixñ_dïth
,Ñow_bytes) +

4590 1 + ((
max_pixñ_dïth
 + 7) >> 3U);

4592 #ifde‡
PNG_MAX_MALLOC_64K


4593 i‡(
row_byãs
 > (
≤g_uöt_32
)65536L)

4594 
	`≤g_îr‹
(
≤g_±r
, "This imageÑequiresáÑow greaterÅhan 64KB");

4597 i‡(
row_byãs
 + 48 > 
≤g_±r
->
ﬁd_big_row_buf_size
)

4599 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
big_row_buf
);

4600 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
big_¥ev_row
);

4602 i‡(
≤g_±r
->
öãæa˚d
 != 0)

4603 
≤g_±r
->
big_row_buf
 = (
≤g_byãp
)
	`≤g_ˇŒoc
(png_ptr,

4604 
row_byãs
 + 48);

4607 
≤g_±r
->
big_row_buf
 = (
≤g_byãp
)
	`≤g_mÆloc
’ng_±r, 
row_byãs
 + 48);

4609 
≤g_±r
->
big_¥ev_row
 = (
≤g_byãp
)
	`≤g_mÆloc
’ng_±r, 
row_byãs
 + 48);

4611 #ifde‡
PNG_ALIGNED_MEMORY_SUPPORTED


4620 
≤g_byãp
 
ãmp
 = 
≤g_±r
->
big_row_buf
 + 32;

4621 
exåa
 = ()((
ãmp
 - (
≤g_byãp
)0) & 0x0f);

4622 
≤g_±r
->
row_buf
 = 
ãmp
 - 
exåa
 - 1 ;

4624 
ãmp
 = 
≤g_±r
->
big_¥ev_row
 + 32;

4625 
exåa
 = ()((
ãmp
 - (
≤g_byãp
)0) & 0x0f);

4626 
≤g_±r
->
¥ev_row
 = 
ãmp
 - 
exåa
 - 1 ;

4631 
≤g_±r
->
row_buf
 =Öng_±r->
big_row_buf
 + 31;

4632 
≤g_±r
->
¥ev_row
 =Öng_±r->
big_¥ev_row
 + 31;

4634 
≤g_±r
->
ﬁd_big_row_buf_size
 = 
row_byãs
 + 48;

4637 #ifde‡
PNG_MAX_MALLOC_64K


4638 i‡(
≤g_±r
->
rowbyãs
 > 65535)

4639 
	`≤g_îr‹
(
≤g_±r
, "This imageÑequiresáÑow greaterÅhan 64KB");

4642 i‡(
≤g_±r
->
rowbyãs
 > (
PNG_SIZE_MAX
 - 1))

4643 
	`≤g_îr‹
(
≤g_±r
, "Row hasÅoo many bytesÅoállocate in memory");

4645 
	`mem£t
(
≤g_±r
->
¥ev_row
, 0,Öng_±r->
rowbyãs
 + 1);

4647 
	`≤g_debug1
(3, "width = %u,", 
≤g_±r
->
width
);

4648 
	`≤g_debug1
(3, "heighà%u,", 
≤g_±r
->
height
);

4649 
	`≤g_debug1
(3, "iwidth = %u,", 
≤g_±r
->
iwidth
);

4650 
	`≤g_debug1
(3, "num_row†%u,", 
≤g_±r
->
num_rows
);

4651 
	`≤g_debug1
(3, "rowbyã†%lu,", ()
≤g_±r
->
rowbyãs
);

4652 
	`≤g_debug1
(3, "irowbytes = %lu",

4653 ()
	`PNG_ROWBYTES
(
≤g_±r
->
pixñ_dïth
,Öng_±r->
iwidth
) + 1);

4659 i‡(
≤g_±r
->
ªad_buf„r
 !
NULL
)

4661 
≤g_byãp
 
buf„r
 = 
≤g_±r
->
ªad_buf„r
;

4663 
≤g_±r
->
ªad_buf„r_size
 = 0;

4664 
≤g_±r
->
ªad_buf„r
 = 
NULL
;

4665 
	`≤g_‰ì
(
≤g_±r
, 
buf„r
);

4673 i‡(
	`≤g_öÊ©e_˛aim
(
≤g_±r
, 
≤g_IDAT
Ë!
Z_OK
)

4674 
	`≤g_îr‹
(
≤g_±r
,Öng_±r->
z°ªam
.
msg
);

4676 
≤g_±r
->
Êags
 |
PNG_FLAG_ROW_INIT
;

4677 
	}
}

	@pngset.c

19 
	~"≤g¥iv.h
"

21 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë|| deföed(
PNG_WRITE_SUPPORTED
)

23 #ifde‡
PNG_bKGD_SUPPORTED


24 
PNGAPI


25 
	$≤g_£t_bKGD
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

26 
≤g_c⁄°_cﬁ‹_16p
 
background
)

28 
	`≤g_debug1
(1, "in %s storage function", "bKGD");

30 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 =NULL || 
background
 == NULL)

33 
öfo_±r
->
background
 = *background;

34 
öfo_±r
->
vÆid
 |
PNG_INFO_bKGD
;

35 
	}
}

38 #ifde‡
PNG_cHRM_SUPPORTED


39 
PNGFAPI


40 
	$≤g_£t_cHRM_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

41 
≤g_fixed_poöt
 
whôe_x
,Öng_fixed_poöà
whôe_y
,Öng_fixed_poöà
ªd_x
,

42 
≤g_fixed_poöt
 
ªd_y
,Öng_fixed_poöà
gªí_x
,Öng_fixed_poöà
gªí_y
,

43 
≤g_fixed_poöt
 
blue_x
,Öng_fixed_poöà
blue_y
)

45 
≤g_xy
 
xy
;

47 
	`≤g_debug1
(1, "in %s storage function", "cHRM fixed");

49 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

52 
xy
.
ªdx
 = 
ªd_x
;

53 
xy
.
ªdy
 = 
ªd_y
;

54 
xy
.
gªíx
 = 
gªí_x
;

55 
xy
.
gªíy
 = 
gªí_y
;

56 
xy
.
bluex
 = 
blue_x
;

57 
xy
.
bluey
 = 
blue_y
;

58 
xy
.
whôex
 = 
whôe_x
;

59 
xy
.
whôey
 = 
whôe_y
;

61 i‡(
	`≤g_cﬁ‹•a˚_£t_chrom©icôõs
(
≤g_±r
, &
öfo_±r
->
cﬁ‹•a˚
, &
xy
,

63 
öfo_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_FROM_cHRM
;

65 
	`≤g_cﬁ‹•a˚_sync_öfo
(
≤g_±r
, 
öfo_±r
);

66 
	}
}

68 
PNGFAPI


69 
	$≤g_£t_cHRM_XYZ_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

70 
≤g_fixed_poöt
 
öt_ªd_X
,Öng_fixed_poöà
öt_ªd_Y
,

71 
≤g_fixed_poöt
 
öt_ªd_Z
,Öng_fixed_poöà
öt_gªí_X
,

72 
≤g_fixed_poöt
 
öt_gªí_Y
,Öng_fixed_poöà
öt_gªí_Z
,

73 
≤g_fixed_poöt
 
öt_blue_X
,Öng_fixed_poöà
öt_blue_Y
,

74 
≤g_fixed_poöt
 
öt_blue_Z
)

76 
≤g_XYZ
 
XYZ
;

78 
	`≤g_debug1
(1, "in %s storage function", "cHRM XYZ fixed");

80 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

83 
XYZ
.
ªd_X
 = 
öt_ªd_X
;

84 
XYZ
.
ªd_Y
 = 
öt_ªd_Y
;

85 
XYZ
.
ªd_Z
 = 
öt_ªd_Z
;

86 
XYZ
.
gªí_X
 = 
öt_gªí_X
;

87 
XYZ
.
gªí_Y
 = 
öt_gªí_Y
;

88 
XYZ
.
gªí_Z
 = 
öt_gªí_Z
;

89 
XYZ
.
blue_X
 = 
öt_blue_X
;

90 
XYZ
.
blue_Y
 = 
öt_blue_Y
;

91 
XYZ
.
blue_Z
 = 
öt_blue_Z
;

93 i‡(
	`≤g_cﬁ‹•a˚_£t_ídpoöts
(
≤g_±r
, &
öfo_±r
->
cﬁ‹•a˚
,

94 &
XYZ
, 2) != 0)

95 
öfo_±r
->
cﬁ‹•a˚
.
Êags
 |
PNG_COLORSPACE_FROM_cHRM
;

97 
	`≤g_cﬁ‹•a˚_sync_öfo
(
≤g_±r
, 
öfo_±r
);

98 
	}
}

100 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


101 
PNGAPI


102 
	$≤g_£t_cHRM
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

103 
whôe_x
, 
whôe_y
, 
ªd_x
, 
ªd_y
,

104 
gªí_x
, 
gªí_y
, 
blue_x
, 
blue_y
)

106 
	`≤g_£t_cHRM_fixed
(
≤g_±r
, 
öfo_±r
,

107 
	`≤g_fixed
(
≤g_±r
, 
whôe_x
, "cHRM White X"),

108 
	`≤g_fixed
(
≤g_±r
, 
whôe_y
, "cHRM White Y"),

109 
	`≤g_fixed
(
≤g_±r
, 
ªd_x
, "cHRM Red X"),

110 
	`≤g_fixed
(
≤g_±r
, 
ªd_y
, "cHRM Red Y"),

111 
	`≤g_fixed
(
≤g_±r
, 
gªí_x
, "cHRM Green X"),

112 
	`≤g_fixed
(
≤g_±r
, 
gªí_y
, "cHRM Green Y"),

113 
	`≤g_fixed
(
≤g_±r
, 
blue_x
, "cHRM Blue X"),

114 
	`≤g_fixed
(
≤g_±r
, 
blue_y
, "cHRM Blue Y"));

115 
	}
}

117 
PNGAPI


118 
	$≤g_£t_cHRM_XYZ
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
ªd_X
,

119 
ªd_Y
, 
ªd_Z
, 
gªí_X
, 
gªí_Y
, 
gªí_Z
,

120 
blue_X
, 
blue_Y
, 
blue_Z
)

122 
	`≤g_£t_cHRM_XYZ_fixed
(
≤g_±r
, 
öfo_±r
,

123 
	`≤g_fixed
(
≤g_±r
, 
ªd_X
, "cHRM Red X"),

124 
	`≤g_fixed
(
≤g_±r
, 
ªd_Y
, "cHRM Red Y"),

125 
	`≤g_fixed
(
≤g_±r
, 
ªd_Z
, "cHRM Red Z"),

126 
	`≤g_fixed
(
≤g_±r
, 
gªí_X
, "cHRM Green X"),

127 
	`≤g_fixed
(
≤g_±r
, 
gªí_Y
, "cHRM Green Y"),

128 
	`≤g_fixed
(
≤g_±r
, 
gªí_Z
, "cHRM Green Z"),

129 
	`≤g_fixed
(
≤g_±r
, 
blue_X
, "cHRM Blue X"),

130 
	`≤g_fixed
(
≤g_±r
, 
blue_Y
, "cHRM Blue Y"),

131 
	`≤g_fixed
(
≤g_±r
, 
blue_Z
, "cHRM Blue Z"));

132 
	}
}

137 #ifde‡
PNG_eXIf_SUPPORTED


138 
PNGAPI


139 
	$≤g_£t_eXIf
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

140 
≤g_byãp
 
eXIf_buf
)

142 
	`≤g_w¨nög
(
≤g_±r
, "png_set_eXIf doesÇot work; useÖng_set_eXIf_1");

143 
	`PNG_UNUSED
(
öfo_±r
)

144 
	`PNG_UNUSED
(
eXIf_buf
)

145 
	}
}

147 
PNGAPI


148 
	$≤g_£t_eXIf_1
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

149 
≤g_uöt_32
 
num_exif
, 
≤g_byãp
 
eXIf_buf
)

151 
i
;

153 
	`≤g_debug1
(1, "in %s storage function", "eXIf");

155 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

158 i‡(
öfo_±r
->
exif
)

160 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
exif
);

161 
öfo_±r
->
exif
 = 
NULL
;

164 
öfo_±r
->
num_exif
 =Çum_exif;

166 
öfo_±r
->
exif
 = 
	`≤g_voidˇ°
(
≤g_byãp
, 
	`≤g_mÆloc_w¨n
(
≤g_±r
,

167 
öfo_±r
->
num_exif
));

169 i‡(
öfo_±r
->
exif
 =
NULL
)

171 
	`≤g_w¨nög
(
≤g_±r
, "Insufficient memory forÉXIf chunk data");

175 
öfo_±r
->
‰ì_me
 |
PNG_FREE_EXIF
;

177 
i
 = 0; i < (Ë
öfo_±r
->
num_exif
; i++)

178 
öfo_±r
->
exif
[
i
] = 
eXIf_buf
[i];

180 
öfo_±r
->
vÆid
 |
PNG_INFO_eXIf
;

181 
	}
}

184 #ifde‡
PNG_gAMA_SUPPORTED


185 
PNGFAPI


186 
	$≤g_£t_gAMA_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

187 
≤g_fixed_poöt
 
fûe_gamma
)

189 
	`≤g_debug1
(1, "in %s storage function", "gAMA");

191 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

194 
	`≤g_cﬁ‹•a˚_£t_gamma
(
≤g_±r
, &
öfo_±r
->
cﬁ‹•a˚
, 
fûe_gamma
);

195 
	`≤g_cﬁ‹•a˚_sync_öfo
(
≤g_±r
, 
öfo_±r
);

196 
	}
}

198 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


199 
PNGAPI


200 
	$≤g_£t_gAMA
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
fûe_gamma
)

202 
	`≤g_£t_gAMA_fixed
(
≤g_±r
, 
öfo_±r
, 
	`≤g_fixed
’ng_±r, 
fûe_gamma
,

204 
	}
}

208 #ifde‡
PNG_hIST_SUPPORTED


209 
PNGAPI


210 
	$≤g_£t_hIST
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

211 
≤g_c⁄°_uöt_16p
 
hi°
)

213 
i
;

215 
	`≤g_debug1
(1, "in %s storage function", "hIST");

217 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

220 i‡(
öfo_±r
->
num_∑Àâe
 == 0 || info_ptr->num_palette

221 > 
PNG_MAX_PALETTE_LENGTH
)

223 
	`≤g_w¨nög
(
≤g_±r
,

229 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
, 
PNG_FREE_HIST
, 0);

234 
öfo_±r
->
hi°
 = 
	`≤g_voidˇ°
(
≤g_uöt_16p
, 
	`≤g_mÆloc_w¨n
(
≤g_±r
,

235 
PNG_MAX_PALETTE_LENGTH
 * ( (
≤g_uöt_16
))));

237 i‡(
öfo_±r
->
hi°
 =
NULL
)

239 
	`≤g_w¨nög
(
≤g_±r
, "Insufficient memory for hIST chunk data");

244 
öfo_±r
->
‰ì_me
 |
PNG_FREE_HIST
;

246 
i
 = 0; i < 
öfo_±r
->
num_∑Àâe
; i++)

247 
öfo_±r
->
hi°
[
i
] = hist[i];

249 
öfo_±r
->
vÆid
 |
PNG_INFO_hIST
;

250 
	}
}

253 
PNGAPI


254 
	$≤g_£t_IHDR
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

255 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
, 
bô_dïth
,

256 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
,

257 
fûãr_ty≥
)

259 
	`≤g_debug1
(1, "in %s storage function", "IHDR");

261 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

264 
öfo_±r
->
width
 = width;

265 
öfo_±r
->
height
 = height;

266 
öfo_±r
->
bô_dïth
 = (
≤g_byã
)bit_depth;

267 
öfo_±r
->
cﬁ‹_ty≥
 = (
≤g_byã
)color_type;

268 
öfo_±r
->
com¥essi⁄_ty≥
 = (
≤g_byã
)compression_type;

269 
öfo_±r
->
fûãr_ty≥
 = (
≤g_byã
)filter_type;

270 
öfo_±r
->
öãæa˚_ty≥
 = (
≤g_byã
)interlace_type;

272 
	`≤g_check_IHDR
 (
≤g_±r
, 
öfo_±r
->
width
, info_±r->
height
,

273 
öfo_±r
->
bô_dïth
, info_±r->
cﬁ‹_ty≥
, info_±r->
öãæa˚_ty≥
,

274 
öfo_±r
->
com¥essi⁄_ty≥
, info_±r->
fûãr_ty≥
);

276 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

277 
öfo_±r
->
ch™√ls
 = 1;

279 i‡((
öfo_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

280 
öfo_±r
->
ch™√ls
 = 3;

283 
öfo_±r
->
ch™√ls
 = 1;

285 i‡((
öfo_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

286 
öfo_±r
->
ch™√ls
++;

288 
öfo_±r
->
pixñ_dïth
 = (
≤g_byã
)(öfo_±r->
ch™√ls
 * info_±r->
bô_dïth
);

290 
öfo_±r
->
rowbyãs
 = 
	`PNG_ROWBYTES
(öfo_±r->
pixñ_dïth
, 
width
);

291 
	}
}

293 #ifde‡
PNG_oFFs_SUPPORTED


294 
PNGAPI


295 
	$≤g_£t_oFFs
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

296 
≤g_öt_32
 
off£t_x
,Öng_öt_32 
off£t_y
, 
unô_ty≥
)

298 
	`≤g_debug1
(1, "in %s storage function", "oFFs");

300 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

303 
öfo_±r
->
x_off£t
 = 
off£t_x
;

304 
öfo_±r
->
y_off£t
 = 
off£t_y
;

305 
öfo_±r
->
off£t_unô_ty≥
 = (
≤g_byã
)
unô_ty≥
;

306 
öfo_±r
->
vÆid
 |
PNG_INFO_oFFs
;

307 
	}
}

310 #ifde‡
PNG_pCAL_SUPPORTED


311 
PNGAPI


312 
	$≤g_£t_pCAL
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

313 
≤g_c⁄°_ch¨p
 
puΩo£
, 
≤g_öt_32
 
X0
,Öng_öt_32 
X1
, 
ty≥
,

314 
≈¨ams
, 
≤g_c⁄°_ch¨p
 
unôs
, 
≤g_ch¨µ
 
∑øms
)

316 
size_t
 
Àngth
;

317 
i
;

319 
	`≤g_debug1
(1, "in %s storage function", "pCAL");

321 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 =NULL || 
puΩo£
 =NULL || 
unôs
 == NULL

322 || (
≈¨ams
 > 0 && 
∑øms
 =
NULL
))

325 
Àngth
 = 
	`°æí
(
puΩo£
) + 1;

326 
	`≤g_debug1
(3, "allocatingÖurpose for info (%lu bytes)",

327 ()
Àngth
);

332 i‡(
ty≥
 < 0 ||Åype > 3)

334 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "InvalidÖCALÉquationÅype",

335 
PNG_CHUNK_WRITE_ERROR
);

339 i‡(
≈¨ams
 < 0 ||Çparams > 255)

341 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "InvalidÖCALÖarameter count",

342 
PNG_CHUNK_WRITE_ERROR
);

347 
i
=0; i<
≈¨ams
; ++i)

349 i‡(
∑øms
[
i
] =
NULL
 ||

350 !
	`≤g_check_Â_°rög
(
∑øms
[
i
], 
	`°æí
(params[i])))

352 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "Invalid format forÖCALÖarameter",

353 
PNG_CHUNK_WRITE_ERROR
);

358 
öfo_±r
->
pˇl_puΩo£
 = 
	`≤g_voidˇ°
(
≤g_ch¨p
,

359 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
Àngth
));

361 i‡(
öfo_±r
->
pˇl_puΩo£
 =
NULL
)

363 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "Insufficient memory forÖCALÖurpose",

364 
PNG_CHUNK_WRITE_ERROR
);

368 
	`mem˝y
(
öfo_±r
->
pˇl_puΩo£
, 
puΩo£
, 
Àngth
);

370 
	`≤g_debug
(3, "storing X0, X1,Åype,ándÇparams in info");

371 
öfo_±r
->
pˇl_X0
 = 
X0
;

372 
öfo_±r
->
pˇl_X1
 = 
X1
;

373 
öfo_±r
->
pˇl_ty≥
 = (
≤g_byã
)
ty≥
;

374 
öfo_±r
->
pˇl_≈¨ams
 = (
≤g_byã
)
≈¨ams
;

376 
Àngth
 = 
	`°æí
(
unôs
) + 1;

377 
	`≤g_debug1
(3, "allocating units for info (%lu bytes)",

378 ()
Àngth
);

380 
öfo_±r
->
pˇl_unôs
 = 
	`≤g_voidˇ°
(
≤g_ch¨p
,

381 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
Àngth
));

383 i‡(
öfo_±r
->
pˇl_unôs
 =
NULL
)

385 
	`≤g_w¨nög
(
≤g_±r
, "Insufficient memory forÖCAL units");

390 
	`mem˝y
(
öfo_±r
->
pˇl_unôs
, 
unôs
, 
Àngth
);

392 
öfo_±r
->
pˇl_∑øms
 = 
	`≤g_voidˇ°
(
≤g_ch¨µ
, 
	`≤g_mÆloc_w¨n
(
≤g_±r
,

393 (
size_t
)((()
≈¨ams
 + 1Ë* ( (
≤g_ch¨p
)))));

395 i‡(
öfo_±r
->
pˇl_∑øms
 =
NULL
)

397 
	`≤g_w¨nög
(
≤g_±r
, "Insufficient memory forÖCALÖarams");

402 
	`mem£t
(
öfo_±r
->
pˇl_∑øms
, 0, (()
≈¨ams
 + 1) *

403 ( (
≤g_ch¨p
)));

405 
i
 = 0; i < 
≈¨ams
; i++)

407 
Àngth
 = 
	`°æí
(
∑øms
[
i
]) + 1;

408 
	`≤g_debug2
(3, "ÆloˇtögÖ¨amëî %d f‹ infÿ(%lu byãs)", 
i
,

409 ()
Àngth
);

411 
öfo_±r
->
pˇl_∑øms
[
i
] = (
≤g_ch¨p
)
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
Àngth
);

413 i‡(
öfo_±r
->
pˇl_∑øms
[
i
] =
NULL
)

415 
	`≤g_w¨nög
(
≤g_±r
, "Insufficient memory forÖCALÖarameter");

420 
	`mem˝y
(
öfo_±r
->
pˇl_∑øms
[
i
], 
∑øms
[i], 
Àngth
);

423 
öfo_±r
->
vÆid
 |
PNG_INFO_pCAL
;

424 
öfo_±r
->
‰ì_me
 |
PNG_FREE_PCAL
;

425 
	}
}

428 #ifde‡
PNG_sCAL_SUPPORTED


429 
PNGAPI


430 
	$≤g_£t_sCAL_s
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

431 
unô
, 
≤g_c⁄°_ch¨p
 
swidth
,Öng_c⁄°_ch¨∞
sheight
)

433 
size_t
 
Àngthw
 = 0, 
Àngthh
 = 0;

435 
	`≤g_debug1
(1, "in %s storage function", "sCAL");

437 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

443 i‡(
unô
 != 1 && unit != 2)

444 
	`≤g_îr‹
(
≤g_±r
, "Invalid sCAL unit");

446 i‡(
swidth
 =
NULL
 || (
Àngthw
 = 
	`°æí
(swidth)) == 0 ||

447 
swidth
[0] =45 || !
	`≤g_check_Â_°rög
(swidth, 
Àngthw
))

448 
	`≤g_îr‹
(
≤g_±r
, "Invalid sCAL width");

450 i‡(
sheight
 =
NULL
 || (
Àngthh
 = 
	`°æí
(sheight)) == 0 ||

451 
sheight
[0] =45 || !
	`≤g_check_Â_°rög
(sheight, 
Àngthh
))

452 
	`≤g_îr‹
(
≤g_±r
, "Invalid sCAL height");

454 
öfo_±r
->
sˇl_unô
 = (
≤g_byã
)
unô
;

456 ++
Àngthw
;

458 
	`≤g_debug1
(3, "Æloˇtög unô f‹ infÿ(%u byãs)", ()
Àngthw
);

460 
öfo_±r
->
sˇl_s_width
 = 
	`≤g_voidˇ°
(
≤g_ch¨p
,

461 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
Àngthw
));

463 i‡(
öfo_±r
->
sˇl_s_width
 =
NULL
)

465 
	`≤g_w¨nög
(
≤g_±r
, "Memoryállocation failed whileÖrocessing sCAL");

470 
	`mem˝y
(
öfo_±r
->
sˇl_s_width
, 
swidth
, 
Àngthw
);

472 ++
Àngthh
;

474 
	`≤g_debug1
(3, "Æloˇtög unô f‹ infÿ(%u byãs)", ()
Àngthh
);

476 
öfo_±r
->
sˇl_s_height
 = 
	`≤g_voidˇ°
(
≤g_ch¨p
,

477 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
Àngthh
));

479 i‡(
öfo_±r
->
sˇl_s_height
 =
NULL
)

481 
	`≤g_‰ì
 (
≤g_±r
, 
öfo_±r
->
sˇl_s_width
);

482 
öfo_±r
->
sˇl_s_width
 = 
NULL
;

484 
	`≤g_w¨nög
(
≤g_±r
, "Memoryállocation failed whileÖrocessing sCAL");

489 
	`mem˝y
(
öfo_±r
->
sˇl_s_height
, 
sheight
, 
Àngthh
);

491 
öfo_±r
->
vÆid
 |
PNG_INFO_sCAL
;

492 
öfo_±r
->
‰ì_me
 |
PNG_FREE_SCAL
;

493 
	}
}

495 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


496 
PNGAPI


497 
	$≤g_£t_sCAL
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
unô
,

498 
width
, 
height
)

500 
	`≤g_debug1
(1, "in %s storage function", "sCAL");

503 i‡(
width
 <= 0)

504 
	`≤g_w¨nög
(
≤g_±r
, "Invalid sCAL width ignored");

506 i‡(
height
 <= 0)

507 
	`≤g_w¨nög
(
≤g_±r
, "Invalid sCAL height ignored");

512 
swidth
[
PNG_sCAL_MAX_DIGITS
+1];

513 
sheight
[
PNG_sCAL_MAX_DIGITS
+1];

515 
	`≤g_ascii_‰om_Â
(
≤g_±r
, 
swidth
, ( swidth), 
width
,

516 
PNG_sCAL_PRECISION
);

517 
	`≤g_ascii_‰om_Â
(
≤g_±r
, 
sheight
, ( sheight), 
height
,

518 
PNG_sCAL_PRECISION
);

520 
	`≤g_£t_sCAL_s
(
≤g_±r
, 
öfo_±r
, 
unô
, 
swidth
, 
sheight
);

522 
	}
}

525 #ifde‡
PNG_FIXED_POINT_SUPPORTED


526 
PNGAPI


527 
	$≤g_£t_sCAL_fixed
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
unô
,

528 
≤g_fixed_poöt
 
width
,Öng_fixed_poöà
height
)

530 
	`≤g_debug1
(1, "in %s storage function", "sCAL");

533 i‡(
width
 <= 0)

534 
	`≤g_w¨nög
(
≤g_±r
, "Invalid sCAL width ignored");

536 i‡(
height
 <= 0)

537 
	`≤g_w¨nög
(
≤g_±r
, "Invalid sCAL height ignored");

542 
swidth
[
PNG_sCAL_MAX_DIGITS
+1];

543 
sheight
[
PNG_sCAL_MAX_DIGITS
+1];

545 
	`≤g_ascii_‰om_fixed
(
≤g_±r
, 
swidth
, ( swidth), 
width
);

546 
	`≤g_ascii_‰om_fixed
(
≤g_±r
, 
sheight
, ( sheight), 
height
);

548 
	`≤g_£t_sCAL_s
(
≤g_±r
, 
öfo_±r
, 
unô
, 
swidth
, 
sheight
);

550 
	}
}

554 #ifde‡
PNG_pHYs_SUPPORTED


555 
PNGAPI


556 
	$≤g_£t_pHYs
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

557 
≤g_uöt_32
 
ªs_x
,Öng_uöt_32 
ªs_y
, 
unô_ty≥
)

559 
	`≤g_debug1
(1, "in %s storage function", "pHYs");

561 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

564 
öfo_±r
->
x_pixñs_≥r_unô
 = 
ªs_x
;

565 
öfo_±r
->
y_pixñs_≥r_unô
 = 
ªs_y
;

566 
öfo_±r
->
phys_unô_ty≥
 = (
≤g_byã
)
unô_ty≥
;

567 
öfo_±r
->
vÆid
 |
PNG_INFO_pHYs
;

568 
	}
}

571 
PNGAPI


572 
	$≤g_£t_PLTE
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

573 
≤g_c⁄°_cﬁ‹p
 
∑Àâe
, 
num_∑Àâe
)

576 
≤g_uöt_32
 
max_∑Àâe_Àngth
;

578 
	`≤g_debug1
(1, "in %s storage function", "PLTE");

580 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

583 
max_∑Àâe_Àngth
 = (
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
) ?

584 (1 << 
öfo_±r
->
bô_dïth
Ë: 
PNG_MAX_PALETTE_LENGTH
;

586 i‡(
num_∑Àâe
 < 0 ||Çum_∑Àâê> (Ë
max_∑Àâe_Àngth
)

588 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

589 
	`≤g_îr‹
(
≤g_±r
, "InvalidÖaletteÜength");

593 
	`≤g_w¨nög
(
≤g_±r
, "InvalidÖaletteÜength");

599 i‡((
num_∑Àâe
 > 0 && 
∑Àâe
 =
NULL
) ||

600 (
num_∑Àâe
 == 0

601 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


602 && (
≤g_±r
->
mng_„©uªs_≥rmôãd
 & 
PNG_FLAG_MNG_EMPTY_PLTE
) == 0

606 
	`≤g_îr‹
(
≤g_±r
, "InvalidÖalette");

616 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
, 
PNG_FREE_PLTE
, 0);

622 
≤g_±r
->
∑Àâe
 = 
	`≤g_voidˇ°
(
≤g_cﬁ‹p
, 
	`≤g_ˇŒoc
(png_ptr,

623 
PNG_MAX_PALETTE_LENGTH
 * ( (
≤g_cﬁ‹
))));

625 i‡(
num_∑Àâe
 > 0)

626 
	`mem˝y
(
≤g_±r
->
∑Àâe
,ÖÆëã, ()
num_∑Àâe
 *

627 ( (
≤g_cﬁ‹
)));

628 
öfo_±r
->
∑Àâe
 = 
≤g_±r
->palette;

629 
öfo_±r
->
num_∑Àâe
 = 
≤g_±r
->num_∑Àâê(
≤g_uöt_16
)num_palette;

631 
öfo_±r
->
‰ì_me
 |
PNG_FREE_PLTE
;

633 
öfo_±r
->
vÆid
 |
PNG_INFO_PLTE
;

634 
	}
}

636 #ifde‡
PNG_sBIT_SUPPORTED


637 
PNGAPI


638 
	$≤g_£t_sBIT
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

639 
≤g_c⁄°_cﬁ‹_8p
 
sig_bô
)

641 
	`≤g_debug1
(1, "in %s storage function", "sBIT");

643 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 =NULL || 
sig_bô
 == NULL)

646 
öfo_±r
->
sig_bô
 = *sig_bit;

647 
öfo_±r
->
vÆid
 |
PNG_INFO_sBIT
;

648 
	}
}

651 #ifde‡
PNG_sRGB_SUPPORTED


652 
PNGAPI


653 
	$≤g_£t_sRGB
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
§gb_öã¡
)

655 
	`≤g_debug1
(1, "in %s storage function", "sRGB");

657 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

660 ()
	`≤g_cﬁ‹•a˚_£t_sRGB
(
≤g_±r
, &
öfo_±r
->
cﬁ‹•a˚
, 
§gb_öã¡
);

661 
	`≤g_cﬁ‹•a˚_sync_öfo
(
≤g_±r
, 
öfo_±r
);

662 
	}
}

664 
PNGAPI


665 
	$≤g_£t_sRGB_gAMA_™d_cHRM
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

666 
§gb_öã¡
)

668 
	`≤g_debug1
(1, "in %s storage function", "sRGB_gAMA_and_cHRM");

670 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

673 i‡(
	`≤g_cﬁ‹•a˚_£t_sRGB
(
≤g_±r
, &
öfo_±r
->
cﬁ‹•a˚
,

674 
§gb_öã¡
) != 0)

677 
öfo_±r
->
cﬁ‹•a˚
.
Êags
 |=

678 
PNG_COLORSPACE_FROM_gAMA
|
PNG_COLORSPACE_FROM_cHRM
;

681 
	`≤g_cﬁ‹•a˚_sync_öfo
(
≤g_±r
, 
öfo_±r
);

682 
	}
}

686 #ifde‡
PNG_iCCP_SUPPORTED


687 
PNGAPI


688 
	$≤g_£t_iCCP
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

689 
≤g_c⁄°_ch¨p
 
«me
, 
com¥essi⁄_ty≥
,

690 
≤g_c⁄°_byãp
 
¥ofûe
, 
≤g_uöt_32
 
¥oÊí
)

692 
≤g_ch¨p
 
√w_ic˝_«me
;

693 
≤g_byãp
 
√w_ic˝_¥ofûe
;

694 
size_t
 
Àngth
;

696 
	`≤g_debug1
(1, "in %s storage function", "iCCP");

698 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 =NULL || 
«me
 =NULL || 
¥ofûe
 == NULL)

701 i‡(
com¥essi⁄_ty≥
 !
PNG_COMPRESSION_TYPE_BASE
)

702 
	`≤g_≠p_îr‹
(
≤g_±r
, "Invalid iCCP compression method");

711 
ªsu…
 = 
	`≤g_cﬁ‹•a˚_£t_ICC
(
≤g_±r
, &
öfo_±r
->
cﬁ‹•a˚
, 
«me
,

712 
¥oÊí
, 
¥ofûe
, 
öfo_±r
->
cﬁ‹_ty≥
);

714 
	`≤g_cﬁ‹•a˚_sync_öfo
(
≤g_±r
, 
öfo_±r
);

717 i‡(
ªsu…
 == 0)

721 
öfo_±r
->
cﬁ‹•a˚
.
Êags
 |=

722 
PNG_COLORSPACE_FROM_gAMA
|
PNG_COLORSPACE_FROM_cHRM
;

725 
Àngth
 = 
	`°æí
(
«me
)+1;

726 
√w_ic˝_«me
 = 
	`≤g_voidˇ°
(
≤g_ch¨p
, 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
Àngth
));

728 i‡(
√w_ic˝_«me
 =
NULL
)

730 
	`≤g_bíign_îr‹
(
≤g_±r
, "Insufficient memoryÅoÖrocess iCCP chunk");

735 
	`mem˝y
(
√w_ic˝_«me
, 
«me
, 
Àngth
);

736 
√w_ic˝_¥ofûe
 = 
	`≤g_voidˇ°
(
≤g_byãp
,

737 
	`≤g_mÆloc_w¨n
(
≤g_±r
, 
¥oÊí
));

739 i‡(
√w_ic˝_¥ofûe
 =
NULL
)

741 
	`≤g_‰ì
(
≤g_±r
, 
√w_ic˝_«me
);

742 
	`≤g_bíign_îr‹
(
≤g_±r
,

748 
	`mem˝y
(
√w_ic˝_¥ofûe
, 
¥ofûe
, 
¥oÊí
);

750 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
, 
PNG_FREE_ICCP
, 0);

752 
öfo_±r
->
ic˝_¥oÊí
 = 
¥oÊí
;

753 
öfo_±r
->
ic˝_«me
 = 
√w_ic˝_«me
;

754 
öfo_±r
->
ic˝_¥ofûe
 = 
√w_ic˝_¥ofûe
;

755 
öfo_±r
->
‰ì_me
 |
PNG_FREE_ICCP
;

756 
öfo_±r
->
vÆid
 |
PNG_INFO_iCCP
;

757 
	}
}

760 #ifde‡
PNG_TEXT_SUPPORTED


761 
PNGAPI


762 
	$≤g_£t_ãxt
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

763 
≤g_c⁄°_ãxç
 
ãxt_±r
, 
num_ãxt
)

765 
ªt
;

766 
ªt
 = 
	`≤g_£t_ãxt_2
(
≤g_±r
, 
öfo_±r
, 
ãxt_±r
, 
num_ãxt
);

768 i‡(
ªt
 != 0)

769 
	`≤g_îr‹
(
≤g_±r
, "Insufficient memoryÅo storeÅext");

770 
	}
}

773 
	$≤g_£t_ãxt_2
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

774 
≤g_c⁄°_ãxç
 
ãxt_±r
, 
num_ãxt
)

776 
i
;

778 
	`≤g_debug1
(1, "ö %lx st‹agêfun˘i⁄", 
≤g_±r
 =
NULL
 ? 0xabadca11U :

779 ()
≤g_±r
->
chunk_«me
);

781 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 =NULL || 
num_ãxt
 <0 || 
ãxt_±r
 == NULL)

789 i‡(
num_ãxt
 > 
öfo_±r
->
max_ãxt
 - info_ptr->num_text)

791 
ﬁd_num_ãxt
 = 
öfo_±r
->
num_ãxt
;

792 
max_ãxt
;

793 
≤g_ãxç
 
√w_ãxt
 = 
NULL
;

796 
max_ãxt
 = 
ﬁd_num_ãxt
;

797 i‡(
num_ãxt
 <
INT_MAX
 - 
max_ãxt
)

799 
max_ãxt
 +
num_ãxt
;

802 i‡(
max_ãxt
 < 
INT_MAX
-8)

803 
max_ãxt
 = (max_text + 8) & ~0x7;

806 
max_ãxt
 = 
INT_MAX
;

811 
√w_ãxt
 = 
	`≤g_voidˇ°
(
≤g_ãxç
,
	`≤g_ªÆloc_¨øy
(
≤g_±r
,

812 
öfo_±r
->
ãxt
, 
ﬁd_num_ãxt
, 
max_ãxt
-old_num_text,

813  *
√w_ãxt
));

816 i‡(
√w_ãxt
 =
NULL
)

818 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "too manyÅext chunks",

819 
PNG_CHUNK_WRITE_ERROR
);

824 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
ãxt
);

826 
öfo_±r
->
ãxt
 = 
√w_ãxt
;

827 
öfo_±r
->
‰ì_me
 |
PNG_FREE_TEXT
;

828 
öfo_±r
->
max_ãxt
 = max_text;

831 
	`≤g_debug1
(3, "Æloˇãd %dÉ¡rõ†f‹ info_±r->ãxt", 
max_ãxt
);

834 
i
 = 0; i < 
num_ãxt
; i++)

836 
size_t
 
ãxt_Àngth
, 
key_Àn
;

837 
size_t
 
œng_Àn
, 
œng_key_Àn
;

838 
≤g_ãxç
 
ãxç
 = &(
öfo_±r
->
ãxt
[öfo_±r->
num_ãxt
]);

840 i‡(
ãxt_±r
[
i
].
key
 =
NULL
)

843 i‡(
ãxt_±r
[
i
].
com¥essi⁄
 < 
PNG_TEXT_COMPRESSION_NONE
 ||

844 
ãxt_±r
[
i
].
com¥essi⁄
 >
PNG_TEXT_COMPRESSION_LAST
)

846 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "text compression mode is out ofÑange",

847 
PNG_CHUNK_WRITE_ERROR
);

851 
key_Àn
 = 
	`°æí
(
ãxt_±r
[
i
].
key
);

853 i‡(
ãxt_±r
[
i
].
com¥essi⁄
 <= 0)

855 
œng_Àn
 = 0;

856 
œng_key_Àn
 = 0;

860 #ifde‡
PNG_iTXt_SUPPORTED


864 i‡(
ãxt_±r
[
i
].
œng
 !
NULL
)

865 
œng_Àn
 = 
	`°æí
(
ãxt_±r
[
i
].
œng
);

868 
œng_Àn
 = 0;

870 i‡(
ãxt_±r
[
i
].
œng_key
 !
NULL
)

871 
œng_key_Àn
 = 
	`°æí
(
ãxt_±r
[
i
].
œng_key
);

874 
œng_key_Àn
 = 0;

878 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "iTXt chunkÇot supported",

879 
PNG_CHUNK_WRITE_ERROR
);

884 i‡(
ãxt_±r
[
i
].
ãxt
 =
NULL
 ||Åext_ptr[i].text[0] == '\0')

886 
ãxt_Àngth
 = 0;

887 #ifde‡
PNG_iTXt_SUPPORTED


888 i‡(
ãxt_±r
[
i
].
com¥essi⁄
 > 0)

889 
ãxç
->
com¥essi⁄
 = 
PNG_ITXT_COMPRESSION_NONE
;

893 
ãxç
->
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

898 
ãxt_Àngth
 = 
	`°æí
(
ãxt_±r
[
i
].
ãxt
);

899 
ãxç
->
com¥essi⁄
 = 
ãxt_±r
[
i
].compression;

902 
ãxç
->
key
 = 
	`≤g_voidˇ°
(
≤g_ch¨p
,
	`≤g_mÆloc_ba£
(
≤g_±r
,

903 
key_Àn
 + 
ãxt_Àngth
 + 
œng_Àn
 + 
œng_key_Àn
 + 4));

905 i‡(
ãxç
->
key
 =
NULL
)

907 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "text chunk: out of memory",

908 
PNG_CHUNK_WRITE_ERROR
);

913 
	`≤g_debug2
(2, "Allocated %lu bytesát %p inÖng_set_text",

914 ()(
≤g_uöt_32
)

915 (
key_Àn
 + 
œng_Àn
 + 
œng_key_Àn
 + 
ãxt_Àngth
 + 4),

916 
ãxç
->
key
);

918 
	`mem˝y
(
ãxç
->
key
, 
ãxt_±r
[
i
].key, 
key_Àn
);

919 *(
ãxç
->
key
 + 
key_Àn
) = '\0';

921 i‡(
ãxt_±r
[
i
].
com¥essi⁄
 > 0)

923 
ãxç
->
œng
 =Åexç->
key
 + 
key_Àn
 + 1;

924 
	`mem˝y
(
ãxç
->
œng
, 
ãxt_±r
[
i
].œng, 
œng_Àn
);

925 *(
ãxç
->
œng
 + 
œng_Àn
) = '\0';

926 
ãxç
->
œng_key
 =Åexç->
œng
 + 
œng_Àn
 + 1;

927 
	`mem˝y
(
ãxç
->
œng_key
, 
ãxt_±r
[
i
].œng_key, 
œng_key_Àn
);

928 *(
ãxç
->
œng_key
 + 
œng_key_Àn
) = '\0';

929 
ãxç
->
ãxt
 =Åexç->
œng_key
 + 
œng_key_Àn
 + 1;

934 
ãxç
->
œng
=
NULL
;

935 
ãxç
->
œng_key
=
NULL
;

936 
ãxç
->
ãxt
 =Åexç->
key
 + 
key_Àn
 + 1;

939 i‡(
ãxt_Àngth
 != 0)

940 
	`mem˝y
(
ãxç
->
ãxt
, 
ãxt_±r
[
i
].ãxt, 
ãxt_Àngth
);

942 *(
ãxç
->
ãxt
 + 
ãxt_Àngth
) = '\0';

944 #ifde‡
PNG_iTXt_SUPPORTED


945 i‡(
ãxç
->
com¥essi⁄
 > 0)

947 
ãxç
->
ãxt_Àngth
 = 0;

948 
ãxç
->
ôxt_Àngth
 = 
ãxt_Àngth
;

954 
ãxç
->
ãxt_Àngth
 =Åext_length;

955 
ãxç
->
ôxt_Àngth
 = 0;

958 
öfo_±r
->
num_ãxt
++;

959 
	`≤g_debug1
(3, "å™s„ºedÅexàchunk %d", 
öfo_±r
->
num_ãxt
);

963 
	}
}

966 #ifde‡
PNG_tIME_SUPPORTED


967 
PNGAPI


968 
	$≤g_£t_tIME
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

969 
≤g_c⁄°_timï
 
mod_time
)

971 
	`≤g_debug1
(1, "in %s storage function", "tIME");

973 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 =NULL || 
mod_time
 == NULL ||

974 (
≤g_±r
->
mode
 & 
PNG_WROTE_tIME
) != 0)

977 i‡(
mod_time
->
m⁄th
 == 0 || mod_time->month > 12 ||

978 
mod_time
->
day
 == 0 || mod_time->day > 31 ||

979 
mod_time
->
hour
 > 23 || mod_time->
möuã
 > 59 ||

980 
mod_time
->
£c⁄d
 > 60)

982 
	`≤g_w¨nög
(
≤g_±r
, "Ignoring invalidÅime value");

987 
öfo_±r
->
mod_time
 = *mod_time;

988 
öfo_±r
->
vÆid
 |
PNG_INFO_tIME
;

989 
	}
}

992 #ifde‡
PNG_tRNS_SUPPORTED


993 
PNGAPI


994 
	$≤g_£t_tRNS
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

995 
≤g_c⁄°_byãp
 
å™s_Æpha
, 
num_å™s
, 
≤g_c⁄°_cﬁ‹_16p
 
å™s_cﬁ‹
)

997 
	`≤g_debug1
(1, "in %s storage function", "tRNS");

999 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

1003 i‡(
å™s_Æpha
 !
NULL
)

1014 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
, 
PNG_FREE_TRNS
, 0);

1016 i‡(
num_å™s
 > 0 &&Çum_å™†<
PNG_MAX_PALETTE_LENGTH
)

1019 
öfo_±r
->
å™s_Æpha
 = 
	`≤g_voidˇ°
(
≤g_byãp
,

1020 
	`≤g_mÆloc
(
≤g_±r
, 
PNG_MAX_PALETTE_LENGTH
));

1021 
	`mem˝y
(
öfo_±r
->
å™s_Æpha
,Åøns_Æpha, (
size_t
)
num_å™s
);

1023 
≤g_±r
->
å™s_Æpha
 = 
öfo_±r
->trans_alpha;

1026 i‡(
å™s_cﬁ‹
 !
NULL
)

1028 #ifde‡
PNG_WARNINGS_SUPPORTED


1029 i‡(
öfo_±r
->
bô_dïth
 < 16)

1031 
ßm∂e_max
 = (1 << 
öfo_±r
->
bô_dïth
) - 1;

1033 i‡((
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 &&

1034 
å™s_cﬁ‹
->
gøy
 > 
ßm∂e_max
) ||

1035 (
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 &&

1036 (
å™s_cﬁ‹
->
ªd
 > 
ßm∂e_max
 ||

1037 
å™s_cﬁ‹
->
gªí
 > 
ßm∂e_max
 ||

1038 
å™s_cﬁ‹
->
blue
 > 
ßm∂e_max
)))

1039 
	`≤g_w¨nög
(
≤g_±r
,

1044 
öfo_±r
->
å™s_cﬁ‹
 = *trans_color;

1046 i‡(
num_å™s
 == 0)

1047 
num_å™s
 = 1;

1050 
öfo_±r
->
num_å™s
 = (
≤g_uöt_16
)num_trans;

1052 i‡(
num_å™s
 != 0)

1054 
öfo_±r
->
vÆid
 |
PNG_INFO_tRNS
;

1055 
öfo_±r
->
‰ì_me
 |
PNG_FREE_TRNS
;

1057 
	}
}

1060 #ifde‡
PNG_sPLT_SUPPORTED


1061 
PNGAPI


1062 
	$≤g_£t_sPLT
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1063 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_sPLT_ç
 
íåõs
, 
√¡rõs
)

1073 
≤g_sPLT_ç
 
≈
;

1075 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 =NULL || 
√¡rõs
 <0 || 
íåõs
 == NULL)

1081 
≈
 = 
	`≤g_voidˇ°
(
≤g_sPLT_ç
,
	`≤g_ªÆloc_¨øy
(
≤g_±r
,

1082 
öfo_±r
->
•…_∑Àâes
, info_±r->
•…_∑Àâes_num
, 
√¡rõs
,

1083  *
≈
));

1085 i‡(
≈
 =
NULL
)

1088 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "toÿm™y sPLT chunks", 
PNG_CHUNK_WRITE_ERROR
);

1093 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
•…_∑Àâes
);

1094 
öfo_±r
->
•…_∑Àâes
 = 
≈
;

1095 
öfo_±r
->
‰ì_me
 |
PNG_FREE_SPLT
;

1097 
≈
 +
öfo_±r
->
•…_∑Àâes_num
;

1101 
size_t
 
Àngth
;

1104 i‡(
íåõs
->
«me
 =
NULL
 ||Éntries->entries == NULL)

1107 
	`≤g_≠p_îr‹
(
≤g_±r
, "png_set_sPLT: invalid sPLT");

1112 
≈
->
dïth
 = 
íåõs
->depth;

1117 
Àngth
 = 
	`°æí
(
íåõs
->
«me
) + 1;

1118 
≈
->
«me
 = 
	`≤g_voidˇ°
(
≤g_ch¨p
, 
	`≤g_mÆloc_ba£
(
≤g_±r
, 
Àngth
));

1120 i‡(
≈
->
«me
 =
NULL
)

1123 
	`mem˝y
(
≈
->
«me
, 
íåõs
->«me, 
Àngth
);

1129 
≈
->
íåõs
 = 
	`≤g_voidˇ°
(
≤g_sPLT_íåyp
, 
	`≤g_mÆloc_¨øy
(
≤g_±r
,

1130 
íåõs
->
√¡rõs
,  (
≤g_sPLT_íåy
)));

1132 i‡(
≈
->
íåõs
 =
NULL
)

1134 
	`≤g_‰ì
(
≤g_±r
, 
≈
->
«me
);

1135 
≈
->
«me
 = 
NULL
;

1139 
≈
->
√¡rõs
 = 
íåõs
->nentries;

1143 
	`mem˝y
(
≈
->
íåõs
,Éntries->entries,

1144 ()
íåõs
->
√¡rõs
 *  (
≤g_sPLT_íåy
));

1149 
öfo_±r
->
vÆid
 |
PNG_INFO_sPLT
;

1150 ++(
öfo_±r
->
•…_∑Àâes_num
);

1151 ++
≈
;

1152 ++
íåõs
;

1154 --
√¡rõs
);

1156 i‡(
√¡rõs
 > 0)

1157 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "sPLT ouào‡mem‹y", 
PNG_CHUNK_WRITE_ERROR
);

1158 
	}
}

1161 #ifde‡
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


1162 
≤g_byã


1163 
	$check_loˇti⁄
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
loˇti⁄
)

1165 
loˇti⁄
 &(
PNG_HAVE_IHDR
|
PNG_HAVE_PLTE
|
PNG_AFTER_IDAT
);

1171 i‡(
loˇti⁄
 =0 && (
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) == 0)

1174 
	`≤g_≠p_w¨nög
(
≤g_±r
,

1177 
loˇti⁄
 = (
≤g_byã
)(
≤g_±r
->
mode
 &

1178 (
PNG_HAVE_IHDR
|
PNG_HAVE_PLTE
|
PNG_AFTER_IDAT
));

1184 i‡(
loˇti⁄
 == 0)

1185 
	`≤g_îr‹
(
≤g_±r
, "invalidÜocation inÖng_set_unknown_chunks");

1190 
loˇti⁄
 != (location & -location))

1191 
loˇti⁄
 &= ~(location & -location);

1196  (
≤g_byã
)
loˇti⁄
;

1197 
	}
}

1199 
PNGAPI


1200 
	$≤g_£t_unknown_chunks
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
,

1201 
≤g_öf‹p
 
öfo_±r
, 
≤g_c⁄°_unknown_chunkp
 
unknowns
, 
num_unknowns
)

1203 
≤g_unknown_chunkp
 
≈
;

1205 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 =NULL || 
num_unknowns
 <= 0 ||

1206 
unknowns
 =
NULL
)

1215 #i‡!
	`deföed
(
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
) && \

1216 
	`deföed
(
PNG_READ_SUPPORTED
)

1217 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0)

1219 
	`≤g_≠p_îr‹
(
≤g_±r
, "no unknown chunk support onÑead");

1224 #i‡!
	`deföed
(
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
) && \

1225 
	`deföed
(
PNG_WRITE_SUPPORTED
)

1226 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) == 0)

1228 
	`≤g_≠p_îr‹
(
≤g_±r
, "no unknown chunk support on write");

1239 
≈
 = 
	`≤g_voidˇ°
(
≤g_unknown_chunkp
, 
	`≤g_ªÆloc_¨øy
(
≤g_±r
,

1240 
öfo_±r
->
unknown_chunks
, info_±r->
unknown_chunks_num
, 
num_unknowns
,

1241  *
≈
));

1243 i‡(
≈
 =
NULL
)

1245 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "too many unknown chunks",

1246 
PNG_CHUNK_WRITE_ERROR
);

1251 
	`≤g_‰ì
(
≤g_±r
, 
öfo_±r
->
unknown_chunks
);

1252 
öfo_±r
->
unknown_chunks
 = 
≈
;

1253 
öfo_±r
->
‰ì_me
 |
PNG_FREE_UNKN
;

1255 
≈
 +
öfo_±r
->
unknown_chunks_num
;

1260 ; 
num_unknowns
 > 0; --num_unknowns, ++
unknowns
)

1262 
	`mem˝y
(
≈
->
«me
, 
unknowns
->name, (Çp->name));

1263 
≈
->
«me
[(Çp->name)-1] = '\0';

1264 
≈
->
loˇti⁄
 = 
	`check_loˇti⁄
(
≤g_±r
, 
unknowns
->location);

1266 i‡(
unknowns
->
size
 == 0)

1268 
≈
->
d©a
 = 
NULL
;

1269 
≈
->
size
 = 0;

1274 
≈
->
d©a
 = 
	`≤g_voidˇ°
(
≤g_byãp
,

1275 
	`≤g_mÆloc_ba£
(
≤g_±r
, 
unknowns
->
size
));

1277 i‡(
≈
->
d©a
 =
NULL
)

1279 
	`≤g_chunk_ªp‹t
(
≤g_±r
, "unknown chunk: out of memory",

1280 
PNG_CHUNK_WRITE_ERROR
);

1285 
	`mem˝y
(
≈
->
d©a
, 
unknowns
->d©a, unknowns->
size
);

1286 
≈
->
size
 = 
unknowns
->size;

1293 ++
≈
;

1294 ++(
öfo_±r
->
unknown_chunks_num
);

1296 
	}
}

1298 
PNGAPI


1299 
	$≤g_£t_unknown_chunk_loˇti⁄
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1300 
chunk
, 
loˇti⁄
)

1307 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 !NULL && 
chunk
 >= 0 &&

1308 
chunk
 < 
öfo_±r
->
unknown_chunks_num
)

1310 i‡((
loˇti⁄
 & (
PNG_HAVE_IHDR
|
PNG_HAVE_PLTE
|
PNG_AFTER_IDAT
)) == 0)

1312 
	`≤g_≠p_îr‹
(
≤g_±r
, "invalid unknown chunkÜocation");

1314 i‡((()
loˇti⁄
 & 
PNG_HAVE_IDAT
) != 0)

1315 
loˇti⁄
 = 
PNG_AFTER_IDAT
;

1318 
loˇti⁄
 = 
PNG_HAVE_IHDR
;

1321 
öfo_±r
->
unknown_chunks
[
chunk
].
loˇti⁄
 =

1322 
	`check_loˇti⁄
(
≤g_±r
, 
loˇti⁄
);

1324 
	}
}

1327 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


1328 
≤g_uöt_32
 
PNGAPI


1329 
	$≤g_≥rmô_mng_„©uªs
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
mng_„©uªs
)

1331 
	`≤g_debug
(1, "inÖng_permit_mng_features");

1333 i‡(
≤g_±r
 =
NULL
)

1336 
≤g_±r
->
mng_„©uªs_≥rmôãd
 = 
mng_„©uªs
 & 
PNG_ALL_MNG_FEATURES
;

1338  
≤g_±r
->
mng_„©uªs_≥rmôãd
;

1339 
	}
}

1342 #ifde‡
PNG_HANDLE_AS_UNKNOWN_SUPPORTED


1344 
	$add_⁄e_chunk
(
≤g_byãp
 
li°
, 
cou¡
, 
≤g_c⁄°_byãp
 
add
, 
kìp
)

1346 
i
;

1351 
i
=0; i<
cou¡
; ++i, 
li°
 += 5)

1353 i‡(
	`memcmp
(
li°
, 
add
, 4) == 0)

1355 
li°
[4] = (
≤g_byã
)
kìp
;

1357  
cou¡
;

1361 i‡(
kìp
 !
PNG_HANDLE_CHUNK_AS_DEFAULT
)

1363 ++
cou¡
;

1364 
	`mem˝y
(
li°
, 
add
, 4);

1365 
li°
[4] = (
≤g_byã
)
kìp
;

1368  
cou¡
;

1369 
	}
}

1371 
PNGAPI


1372 
	$≤g_£t_kìp_unknown_chunks
(
≤g_°ru˘Ω
 
≤g_±r
, 
kìp
,

1373 
≤g_c⁄°_byãp
 
chunk_li°
, 
num_chunks_ö
)

1375 
≤g_byãp
 
√w_li°
;

1376 
num_chunks
, 
ﬁd_num_chunks
;

1378 i‡(
≤g_±r
 =
NULL
)

1381 i‡(
kìp
 < 0 || kì∞>
PNG_HANDLE_CHUNK_LAST
)

1383 
	`≤g_≠p_îr‹
(
≤g_±r
, "png_set_keep_unknown_chunks: invalid keep");

1388 i‡(
num_chunks_ö
 <= 0)

1390 
≤g_±r
->
unknown_deÁu…
 = 
kìp
;

1393 i‡(
num_chunks_ö
 == 0)

1397 i‡(
num_chunks_ö
 < 0)

1402 c⁄° 
≤g_byã
 
chunks_to_ign‹e
[] = {

1423 
chunk_li°
 = 
chunks_to_ign‹e
;

1424 
num_chunks
 = (Ë( 
chunks_to_ign‹e
)/5U;

1429 i‡(
chunk_li°
 =
NULL
)

1434 
	`≤g_≠p_îr‹
(
≤g_±r
, "png_set_keep_unknown_chunks:Ço chunkÜist");

1439 
num_chunks
 = ()
num_chunks_ö
;

1442 
ﬁd_num_chunks
 = 
≤g_±r
->
num_chunk_li°
;

1443 i‡(
≤g_±r
->
chunk_li°
 =
NULL
)

1444 
ﬁd_num_chunks
 = 0;

1448 i‡(
num_chunks
 + 
ﬁd_num_chunks
 > 
UINT_MAX
/5)

1450 
	`≤g_≠p_îr‹
(
≤g_±r
, "png_set_keep_unknown_chunks:Åoo many chunks");

1459 i‡(
kìp
 != 0)

1461 
√w_li°
 = 
	`≤g_voidˇ°
(
≤g_byãp
, 
	`≤g_mÆloc
(
≤g_±r
,

1462 5 * (
num_chunks
 + 
ﬁd_num_chunks
)));

1464 i‡(
ﬁd_num_chunks
 > 0)

1465 
	`mem˝y
(
√w_li°
, 
≤g_±r
->
chunk_li°
, 5*
ﬁd_num_chunks
);

1468 i‡(
ﬁd_num_chunks
 > 0)

1469 
√w_li°
 = 
≤g_±r
->
chunk_li°
;

1472 
√w_li°
 = 
NULL
;

1479 i‡(
√w_li°
 !
NULL
)

1481 
≤g_c⁄°_byãp
 
öli°
;

1482 
≤g_byãp
 
ouéi°
;

1483 
i
;

1485 
i
=0; i<
num_chunks
; ++i)

1487 
ﬁd_num_chunks
 = 
	`add_⁄e_chunk
(
√w_li°
, old_num_chunks,

1488 
chunk_li°
+5*
i
, 
kìp
);

1492 
num_chunks
 = 0;

1493 
i
=0, 
öli°
=
ouéi°
=
√w_li°
; i<
ﬁd_num_chunks
; ++i, inlist += 5)

1495 i‡(
öli°
[4])

1497 i‡(
ouéi°
 !
öli°
)

1498 
	`mem˝y
(
ouéi°
, 
öli°
, 5);

1499 
ouéi°
 += 5;

1500 ++
num_chunks
;

1505 i‡(
num_chunks
 == 0)

1507 i‡(
≤g_±r
->
chunk_li°
 !
√w_li°
)

1508 
	`≤g_‰ì
(
≤g_±r
, 
√w_li°
);

1510 
√w_li°
 = 
NULL
;

1515 
num_chunks
 = 0;

1517 
≤g_±r
->
num_chunk_li°
 = 
num_chunks
;

1519 i‡(
≤g_±r
->
chunk_li°
 !
√w_li°
)

1521 i‡(
≤g_±r
->
chunk_li°
 !
NULL
)

1522 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
chunk_li°
);

1524 
≤g_±r
->
chunk_li°
 = 
√w_li°
;

1526 
	}
}

1529 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


1530 
PNGAPI


1531 
	$≤g_£t_ªad_u£r_chunk_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
u£r_chunk_±r
,

1532 
≤g_u£r_chunk_±r
 
ªad_u£r_chunk_‚
)

1534 
	`≤g_debug
(1, "inÖng_set_read_user_chunk_fn");

1536 i‡(
≤g_±r
 =
NULL
)

1539 
≤g_±r
->
ªad_u£r_chunk_‚
 =Ñead_user_chunk_fn;

1540 
≤g_±r
->
u£r_chunk_±r
 = user_chunk_ptr;

1541 
	}
}

1544 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


1545 
PNGAPI


1546 
	$≤g_£t_rows
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1547 
≤g_byãµ
 
row_poöãrs
)

1549 
	`≤g_debug1
(1, "in %s storage function", "rows");

1551 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

1554 i‡(
öfo_±r
->
row_poöãrs
 !
NULL
 &&

1555 (
öfo_±r
->
row_poöãrs
 !=Ñow_pointers))

1556 
	`≤g_‰ì_d©a
(
≤g_±r
, 
öfo_±r
, 
PNG_FREE_ROWS
, 0);

1558 
öfo_±r
->
row_poöãrs
 =Ñow_pointers;

1560 i‡(
row_poöãrs
 !
NULL
)

1561 
öfo_±r
->
vÆid
 |
PNG_INFO_IDAT
;

1562 
	}
}

1565 
PNGAPI


1566 
	$≤g_£t_com¥essi⁄_buf„r_size
(
≤g_°ru˘Ω
 
≤g_±r
, 
size_t
 
size
)

1568 i‡(
≤g_±r
 =
NULL
)

1571 i‡(
size
 =0 || sizê> 
PNG_UINT_31_MAX
)

1572 
	`≤g_îr‹
(
≤g_±r
, "invalid compression buffer size");

1574 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


1575 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0)

1577 
≤g_±r
->
IDAT_ªad_size
 = (
≤g_uöt_32
)
size
;

1582 #ifde‡
PNG_WRITE_SUPPORTED


1583 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) == 0)

1585 i‡(
≤g_±r
->
zow√r
 != 0)

1587 
	`≤g_w¨nög
(
≤g_±r
,

1593 #i‚de‡
__COVERITY__


1597 i‡(
size
 > 
ZLIB_IO_MAX
)

1599 
	`≤g_w¨nög
(
≤g_±r
,

1601 
size
 = 
ZLIB_IO_MAX
;

1605 i‡(
size
 < 6)

1610 
	`≤g_w¨nög
(
≤g_±r
,

1616 i‡(
≤g_±r
->
zbuf„r_size
 !
size
)

1618 
	`≤g_‰ì_buf„r_li°
(
≤g_±r
, &≤g_±r->
zbuf„r_li°
);

1619 
≤g_±r
->
zbuf„r_size
 = (
uI¡
)
size
;

1623 
	}
}

1625 
PNGAPI


1626 
	$≤g_£t_övÆid
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
, 
mask
)

1628 i‡(
≤g_±r
 !
NULL
 && 
öfo_±r
 != NULL)

1629 
öfo_±r
->
vÆid
 &()(~
mask
);

1630 
	}
}

1633 #ifde‡
PNG_SET_USER_LIMITS_SUPPORTED


1635 
PNGAPI


1636 
	$≤g_£t_u£r_limôs
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
u£r_width_max
,

1637 
≤g_uöt_32
 
u£r_height_max
)

1643 i‡(
≤g_±r
 =
NULL
)

1646 
≤g_±r
->
u£r_width_max
 = user_width_max;

1647 
≤g_±r
->
u£r_height_max
 = user_height_max;

1648 
	}
}

1651 
PNGAPI


1652 
	$≤g_£t_chunk_ˇche_max
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
u£r_chunk_ˇche_max
)

1654 i‡(
≤g_±r
 !
NULL
)

1655 
≤g_±r
->
u£r_chunk_ˇche_max
 = user_chunk_cache_max;

1656 
	}
}

1659 
PNGAPI


1660 
	$≤g_£t_chunk_mÆloc_max
(
≤g_°ru˘Ω
 
≤g_±r
,

1661 
≤g_Æloc_size_t
 
u£r_chunk_mÆloc_max
)

1663 i‡(
≤g_±r
 !
NULL
)

1664 
≤g_±r
->
u£r_chunk_mÆloc_max
 = user_chunk_malloc_max;

1665 
	}
}

1669 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


1670 
PNGAPI


1671 
	$≤g_£t_bíign_îr‹s
(
≤g_°ru˘Ω
 
≤g_±r
, 
Ælowed
)

1673 
	`≤g_debug
(1, "inÖng_set_benign_errors");

1681 i‡(
Ælowed
 != 0)

1682 
≤g_±r
->
Êags
 |
PNG_FLAG_BENIGN_ERRORS_WARN
 |

1683 
PNG_FLAG_APP_WARNINGS_WARN
 | 
PNG_FLAG_APP_ERRORS_WARN
;

1686 
≤g_±r
->
Êags
 &~(
PNG_FLAG_BENIGN_ERRORS_WARN
 |

1687 
PNG_FLAG_APP_WARNINGS_WARN
 | 
PNG_FLAG_APP_ERRORS_WARN
);

1688 
	}
}

1691 #ifde‡
PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED


1700 
PNGAPI


1701 
	$≤g_£t_check_f‹_övÆid_ödex
(
≤g_°ru˘Ω
 
≤g_±r
, 
Ælowed
)

1703 
	`≤g_debug
(1, "inÖng_set_check_for_invalid_index");

1705 i‡(
Ælowed
 > 0)

1706 
≤g_±r
->
num_∑Àâe_max
 = 0;

1709 
≤g_±r
->
num_∑Àâe_max
 = -1;

1710 
	}
}

1713 #i‡
deföed
(
PNG_TEXT_SUPPORTED
Ë|| deföed(
PNG_pCAL_SUPPORTED
) || \

1714 
deföed
(
PNG_iCCP_SUPPORTED
Ë|| 
	$deföed
(
PNG_sPLT_SUPPORTED
)

1725 
≤g_uöt_32


1726 
	$≤g_check_keyw‹d
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
key
, 
≤g_byãp
 
√w_key
)

1728 #ifde‡
PNG_WARNINGS_SUPPORTED


1729 
≤g_c⁄°_ch¨p
 
‹ig_key
 = 
key
;

1731 
≤g_uöt_32
 
key_Àn
 = 0;

1732 
bad_ch¨a˘î
 = 0;

1733 
•a˚
 = 1;

1735 
	`≤g_debug
(1, "inÖng_check_keyword");

1737 i‡(
key
 =
NULL
)

1739 *
√w_key
 = 0;

1743 *
key
 && 
key_Àn
 < 79)

1745 
≤g_byã
 
ch
 = (≤g_byã)*
key
++;

1747 i‡((
ch
 > 32 && ch <= 126) || (ch >= 161 ))

1749 *
√w_key
++ = 
ch
; ++
key_Àn
; 
•a˚
 = 0;

1752 i‡(
•a˚
 == 0)

1757 *
√w_key
++ = 32; ++
key_Àn
; 
•a˚
 = 1;

1760 i‡(
ch
 != 32)

1761 
bad_ch¨a˘î
 = 
ch
;

1764 i‡(
bad_ch¨a˘î
 == 0)

1765 
bad_ch¨a˘î
 = 
ch
;

1768 i‡(
key_Àn
 > 0 && 
•a˚
 != 0)

1770 --
key_Àn
; --
√w_key
;

1771 i‡(
bad_ch¨a˘î
 == 0)

1772 
bad_ch¨a˘î
 = 32;

1776 *
√w_key
 = 0;

1778 i‡(
key_Àn
 == 0)

1781 #ifde‡
PNG_WARNINGS_SUPPORTED


1783 i‡(*
key
 != 0)

1784 
	`≤g_w¨nög
(
≤g_±r
, "keywordÅruncated");

1786 i‡(
bad_ch¨a˘î
 != 0)

1788 
	`PNG_WARNING_PARAMETERS
(
p
)

1790 
	`≤g_w¨nög_∑ømëî
(
p
, 1, 
‹ig_key
);

1791 
	`≤g_w¨nög_∑ømëî_sig√d
(
p
, 2, 
PNG_NUMBER_FORMAT_02x
, 
bad_ch¨a˘î
);

1793 
	`≤g_f‹m©ãd_w¨nög
(
≤g_±r
, 
p
, "keyword \"@1\": bad character '0x@2'");

1796 
	`PNG_UNUSED
(
≤g_±r
)

1799  
key_Àn
;

1800 
	}
}

	@pngstruct.h

20 #i‚de‡
PNGSTRUCT_H


21 
	#PNGSTRUCT_H


	)

26 #i‚de‡
ZLIB_CONST


28 
	#ZLIB_CONST


	)

30 
	~"zlib.h
"

39 #i‡
ZLIB_VERNUM
 < 0x1260

40 
	#PNGZ_MSG_CAST
(
s
Ë
	`≤g_c⁄°ˇ°
(*,s)

	)

41 
	#PNGZ_INPUT_CAST
(
b
Ë
	`≤g_c⁄°ˇ°
(
≤g_byãp
,b)

	)

43 
	#PNGZ_MSG_CAST
(
s
Ë(s)

	)

44 
	#PNGZ_INPUT_CAST
(
b
Ë(b)

	)

55 #i‚de‡
ZLIB_IO_MAX


56 
	#ZLIB_IO_MAX
 ((
uI¡
)-1)

	)

59 #ifde‡
PNG_WRITE_SUPPORTED


61 
	s≤g_com¥essi⁄_buf„r


63 
≤g_com¥essi⁄_buf„r
 *
	m√xt
;

64 
≤g_byã
 
	mouçut
[1];

65 } 
	t≤g_com¥essi⁄_buf„r
, *
	t≤g_com¥essi⁄_buf„Ω
;

67 
	#PNG_COMPRESSION_BUFFER_SIZE
(
µ
)\

68 (
	`off£tof
(
≤g_com¥essi⁄_buf„r
, 
ouçut
Ë+ (
µ
)->
zbuf„r_size
)

	)

79 #ifde‡
PNG_COLORSPACE_SUPPORTED


83 
	s≤g_xy


85 
≤g_fixed_poöt
 
	mªdx
, 
	mªdy
;

86 
≤g_fixed_poöt
 
	mgªíx
, 
	mgªíy
;

87 
≤g_fixed_poöt
 
	mbluex
, 
	mbluey
;

88 
≤g_fixed_poöt
 
	mwhôex
, 
	mwhôey
;

89 } 
	t≤g_xy
;

94 
	s≤g_XYZ


96 
≤g_fixed_poöt
 
	mªd_X
, 
	mªd_Y
, 
	mªd_Z
;

97 
≤g_fixed_poöt
 
	mgªí_X
, 
	mgªí_Y
, 
	mgªí_Z
;

98 
≤g_fixed_poöt
 
	mblue_X
, 
	mblue_Y
, 
	mblue_Z
;

99 } 
	t≤g_XYZ
;

102 #i‡
deföed
(
PNG_COLORSPACE_SUPPORTED
Ë|| deföed(
PNG_GAMMA_SUPPORTED
)

112 
	s≤g_cﬁ‹•a˚


114 #ifde‡
PNG_GAMMA_SUPPORTED


115 
≤g_fixed_poöt
 
	mgamma
;

118 #ifde‡
PNG_COLORSPACE_SUPPORTED


119 
≤g_xy
 
	míd_poöts_xy
;

120 
≤g_XYZ
 
	míd_poöts_XYZ
;

121 
≤g_uöt_16
 
	mªndîög_öã¡
;

125 
≤g_uöt_16
 
	mÊags
;

126 } 
	t≤g_cﬁ‹•a˚
, * 
	tPNG_RESTRICT
 
	t≤g_cﬁ‹•a˚Ω
;

128 c⁄° 
	t≤g_cﬁ‹•a˚
 * 
	tPNG_RESTRICT
 
	t≤g_c⁄°_cﬁ‹•a˚Ω
;

131 
	#PNG_COLORSPACE_HAVE_GAMMA
 0x0001

	)

132 
	#PNG_COLORSPACE_HAVE_ENDPOINTS
 0x0002

	)

133 
	#PNG_COLORSPACE_HAVE_INTENT
 0x0004

	)

134 
	#PNG_COLORSPACE_FROM_gAMA
 0x0008

	)

135 
	#PNG_COLORSPACE_FROM_cHRM
 0x0010

	)

136 
	#PNG_COLORSPACE_FROM_sRGB
 0x0020

	)

137 
	#PNG_COLORSPACE_ENDPOINTS_MATCH_sRGB
 0x0040

	)

138 
	#PNG_COLORSPACE_MATCHES_sRGB
 0x0080

	)

139 
	#PNG_COLORSPACE_INVALID
 0x8000

	)

140 
	#PNG_COLORSPACE_CANCEL
(
Êags
Ë(0xfff‡^ (Êags))

	)

143 
	s≤g_°ru˘_def


145 #ifde‡
PNG_SETJMP_SUPPORTED


146 
jmp_buf
 
	mjmp_buf_loˇl
;

147 
≤g_l⁄gjmp_±r
 
	ml⁄gjmp_‚
;

148 
jmp_buf
 *
	mjmp_buf_±r
;

149 
size_t
 
	mjmp_buf_size
;

151 
≤g_îr‹_±r
 
	mîr‹_‚
;

152 #ifde‡
PNG_WARNINGS_SUPPORTED


153 
≤g_îr‹_±r
 
	mw¨nög_‚
;

155 
≤g_voidp
 
	mîr‹_±r
;

156 
≤g_rw_±r
 
	mwrôe_d©a_‚
;

157 
≤g_rw_±r
 
	mªad_d©a_‚
;

158 
≤g_voidp
 
	mio_±r
;

160 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


161 
≤g_u£r_å™sf‹m_±r
 
	mªad_u£r_å™sf‹m_‚
;

164 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


165 
≤g_u£r_å™sf‹m_±r
 
	mwrôe_u£r_å™sf‹m_‚
;

169 #ifde‡
PNG_USER_TRANSFORM_PTR_SUPPORTED


170 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

171 
deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

172 
≤g_voidp
 
	mu£r_å™sf‹m_±r
;

173 
≤g_byã
 
	mu£r_å™sf‹m_dïth
;

174 
≤g_byã
 
	mu£r_å™sf‹m_ch™√ls
;

178 
≤g_uöt_32
 
	mmode
;

179 
≤g_uöt_32
 
	mÊags
;

180 
≤g_uöt_32
 
	må™sf‹m©i⁄s
;

182 
≤g_uöt_32
 
	mzow√r
;

183 
z_°ªam
 
	mz°ªam
;

185 #ifde‡
PNG_WRITE_SUPPORTED


186 
≤g_com¥essi⁄_buf„Ω
 
	mzbuf„r_li°
;

187 
uI¡
 
	mzbuf„r_size
;

189 
	mzlib_Àvñ
;

190 
	mzlib_mëhod
;

191 
	mzlib_wödow_bôs
;

192 
	mzlib_mem_Àvñ
;

193 
	mzlib_°øãgy
;

196 #ifde‡
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


197 
	mzlib_ãxt_Àvñ
;

198 
	mzlib_ãxt_mëhod
;

199 
	mzlib_ãxt_wödow_bôs
;

200 
	mzlib_ãxt_mem_Àvñ
;

201 
	mzlib_ãxt_°øãgy
;

205 #ifde‡
PNG_WRITE_SUPPORTED


206 
	mzlib_£t_Àvñ
;

207 
	mzlib_£t_mëhod
;

208 
	mzlib_£t_wödow_bôs
;

209 
	mzlib_£t_mem_Àvñ
;

210 
	mzlib_£t_°øãgy
;

213 
≤g_uöt_32
 
	mwidth
;

214 
≤g_uöt_32
 
	mheight
;

215 
≤g_uöt_32
 
	mnum_rows
;

216 
≤g_uöt_32
 
	mu§_width
;

217 
size_t
 
	mrowbyãs
;

218 
≤g_uöt_32
 
	miwidth
;

219 
≤g_uöt_32
 
	mrow_numbî
;

220 
≤g_uöt_32
 
	mchunk_«me
;

221 
≤g_byãp
 
	m¥ev_row
;

226 
≤g_byãp
 
	mrow_buf
;

231 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


232 
≤g_byãp
 
	måy_row
;

233 
≤g_byãp
 
	mt°_row
;

235 
size_t
 
	möfo_rowbyãs
;

237 
≤g_uöt_32
 
	mid©_size
;

238 
≤g_uöt_32
 
	m¸c
;

239 
≤g_cﬁ‹p
 
	m∑Àâe
;

240 
≤g_uöt_16
 
	mnum_∑Àâe
;

243 #ifde‡
PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED


244 
	mnum_∑Àâe_max
;

247 
≤g_uöt_16
 
	mnum_å™s
;

248 
≤g_byã
 
	mcom¥essi⁄
;

249 
≤g_byã
 
	mfûãr
;

250 
≤g_byã
 
	möãæa˚d
;

251 
≤g_byã
 
	m∑ss
;

252 
≤g_byã
 
	mdo_fûãr
;

253 
≤g_byã
 
	mcﬁ‹_ty≥
;

254 
≤g_byã
 
	mbô_dïth
;

255 
≤g_byã
 
	mu§_bô_dïth
;

256 
≤g_byã
 
	mpixñ_dïth
;

257 
≤g_byã
 
	mch™√ls
;

258 #ifde‡
PNG_WRITE_SUPPORTED


259 
≤g_byã
 
	mu§_ch™√ls
;

261 
≤g_byã
 
	msig_byãs
;

262 
≤g_byã
 
	mmaximum_pixñ_dïth
;

264 
≤g_byã
 
	må™sf‹med_pixñ_dïth
;

266 #i‡
ZLIB_VERNUM
 >= 0x1240

267 
≤g_byã
 
	mz°ªam_°¨t
;

269 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

270 
≤g_uöt_16
 
	mfûÀr
;

273 #i‡
deföed
(
PNG_bKGD_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
) ||\

274 
deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
)

275 
≤g_byã
 
	mbackground_gamma_ty≥
;

276 
≤g_fixed_poöt
 
	mbackground_gamma
;

277 
≤g_cﬁ‹_16
 
	mbackground
;

278 #ifde‡
PNG_READ_GAMMA_SUPPORTED


279 
≤g_cﬁ‹_16
 
	mbackground_1
;

283 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


284 
≤g_Êush_±r
 
	mouçut_Êush_‚
;

285 
≤g_uöt_32
 
	mÊush_di°
;

286 
≤g_uöt_32
 
	mÊush_rows
;

289 #ifde‡
PNG_READ_GAMMA_SUPPORTED


290 
	mgamma_shi·
;

291 
≤g_fixed_poöt
 
	ms¸ìn_gamma
;

293 
≤g_byãp
 
	mgamma_èbÀ
;

294 
≤g_uöt_16µ
 
	mgamma_16_èbÀ
;

295 #i‡
deföed
(
PNG_READ_BACKGROUND_SUPPORTED
) || \

296 
deföed
(
PNG_READ_ALPHA_MODE_SUPPORTED
) || \

297 
deföed
(
PNG_READ_RGB_TO_GRAY_SUPPORTED
)

298 
≤g_byãp
 
	mgamma_‰om_1
;

299 
≤g_byãp
 
	mgamma_to_1
;

300 
≤g_uöt_16µ
 
	mgamma_16_‰om_1
;

301 
≤g_uöt_16µ
 
	mgamma_16_to_1
;

305 #i‡
deföed
(
PNG_READ_GAMMA_SUPPORTED
Ë|| deföed(
PNG_sBIT_SUPPORTED
)

306 
≤g_cﬁ‹_8
 
	msig_bô
;

309 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

310 
≤g_cﬁ‹_8
 
	mshi·
;

313 #i‡
deföed
(
PNG_tRNS_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
) \

314 || 
deföed
(
PNG_READ_EXPAND_SUPPORTED
Ë|| deföed(
PNG_READ_BACKGROUND_SUPPORTED
)

315 
≤g_byãp
 
	må™s_Æpha
;

316 
≤g_cﬁ‹_16
 
	må™s_cﬁ‹
;

319 
≤g_ªad_°©us_±r
 
	mªad_row_‚
;

320 
≤g_wrôe_°©us_±r
 
	mwrôe_row_‚
;

321 #ifde‡
PNG_PROGRESSIVE_READ_SUPPORTED


322 
≤g_¥ogªssive_öfo_±r
 
	möfo_‚
;

323 
≤g_¥ogªssive_row_±r
 
	mrow_‚
;

324 
≤g_¥ogªssive_íd_±r
 
	míd_‚
;

325 
≤g_byãp
 
	mßve_buf„r_±r
;

326 
≤g_byãp
 
	mßve_buf„r
;

327 
≤g_byãp
 
	mcuºít_buf„r_±r
;

328 
≤g_byãp
 
	mcuºít_buf„r
;

329 
≤g_uöt_32
 
	mpush_Àngth
;

330 
≤g_uöt_32
 
	mskù_Àngth
;

331 
size_t
 
	mßve_buf„r_size
;

332 
size_t
 
	mßve_buf„r_max
;

333 
size_t
 
	mbuf„r_size
;

334 
size_t
 
	mcuºít_buf„r_size
;

335 
	m¥o˚ss_mode
;

336 
	mcur_∑Àâe
;

340 #i‡
deföed
(
__TURBOC__
Ë&& !deföed(
_Wödows
Ë&& !deföed(
__FLAT__
)

342 
≤g_byãµ
 
	moff£t_èbÀ_±r
;

343 
≤g_byãp
 
	moff£t_èbÀ
;

344 
≤g_uöt_16
 
	moff£t_èbÀ_numbî
;

345 
≤g_uöt_16
 
	moff£t_èbÀ_cou¡
;

346 
≤g_uöt_16
 
	moff£t_èbÀ_cou¡_‰ì
;

349 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


350 
≤g_byãp
 
	m∑Àâe_lookup
;

351 
≤g_byãp
 
	mqu™tize_ödex
;

355 #ifde‡
PNG_SET_OPTION_SUPPORTED


356 
≤g_uöt_32
 
	m›ti⁄s
;

359 #i‡
PNG_LIBPNG_VER
 < 10700

361 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


362 
	mtime_buf„r
[29];

368 
≤g_uöt_32
 
	m‰ì_me
;

370 #ifde‡
PNG_USER_CHUNKS_SUPPORTED


371 
≤g_voidp
 
	mu£r_chunk_±r
;

372 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


373 
≤g_u£r_chunk_±r
 
	mªad_u£r_chunk_‚
;

377 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


378 
	munknown_deÁu…
;

379 
	mnum_chunk_li°
;

380 
≤g_byãp
 
	mchunk_li°
;

385 #ifde‡
PNG_READ_RGB_TO_GRAY_SUPPORTED


386 
≤g_byã
 
	mrgb_to_gøy_°©us
;

388 
≤g_byã
 
	mrgb_to_gøy_c€fficõ¡s_£t
;

390 
≤g_uöt_16
 
	mrgb_to_gøy_ªd_c€ff
;

391 
≤g_uöt_16
 
	mrgb_to_gøy_gªí_c€ff
;

396 #i‡
deföed
(
PNG_READ_EXPAND_SUPPORTED
) && \

397 
deföed
(
PNG_ARM_NEON_IMPLEMENTATION
)

398 
≤g_byãp
 
	mrifÊed_∑Àâe
;

402 #i‡
deföed
(
PNG_MNG_FEATURES_SUPPORTED
)

404 
≤g_uöt_32
 
	mmng_„©uªs_≥rmôãd
;

408 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


409 
≤g_byã
 
	mfûãr_ty≥
;

415 #ifde‡
PNG_USER_MEM_SUPPORTED


416 
≤g_voidp
 
	mmem_±r
;

417 
≤g_mÆloc_±r
 
	mmÆloc_‚
;

418 
≤g_‰ì_±r
 
	m‰ì_‚
;

422 
≤g_byãp
 
	mbig_row_buf
;

424 #ifde‡
PNG_READ_QUANTIZE_SUPPORTED


426 
≤g_byãp
 
	mqu™tize_s‹t
;

427 
≤g_byãp
 
	mödex_to_∑Àâe
;

429 
≤g_byãp
 
	m∑Àâe_to_ödex
;

434 
≤g_byã
 
	mcom¥essi⁄_ty≥
;

436 #ifde‡
PNG_USER_LIMITS_SUPPORTED


437 
≤g_uöt_32
 
	mu£r_width_max
;

438 
≤g_uöt_32
 
	mu£r_height_max
;

443 
≤g_uöt_32
 
	mu£r_chunk_ˇche_max
;

448 
≤g_Æloc_size_t
 
	mu£r_chunk_mÆloc_max
;

452 #ifde‡
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


456 
≤g_unknown_chunk
 
	munknown_chunk
;

460 
size_t
 
	mﬁd_big_row_buf_size
;

462 #ifde‡
PNG_READ_SUPPORTED


464 
≤g_byãp
 
	mªad_buf„r
;

465 
≤g_Æloc_size_t
 
	mªad_buf„r_size
;

467 #ifde‡
PNG_SEQUENTIAL_READ_SUPPORTED


468 
uI¡
 
	mIDAT_ªad_size
;

471 #ifde‡
PNG_IO_STATE_SUPPORTED


473 
≤g_uöt_32
 
	mio_°©e
;

477 
≤g_byãp
 
	mbig_¥ev_row
;

480 (*
	mªad_fûãr
[
PNG_FILTER_VALUE_LAST
-1])(
≤g_row_öf›
 
	mrow_öfo
,

481 
≤g_byãp
 
	mrow
, 
≤g_c⁄°_byãp
 
	m¥ev_row
);

483 #ifde‡
PNG_READ_SUPPORTED


484 #i‡
deföed
(
PNG_COLORSPACE_SUPPORTED
Ë|| deföed(
PNG_GAMMA_SUPPORTED
)

485 
≤g_cﬁ‹•a˚
 
	mcﬁ‹•a˚
;

	@pngtest.c

34 
	#_POSIX_SOURCE
 1

	)

36 
	~<°dio.h
>

37 
	~<°dlib.h
>

38 
	~<°rög.h
>

42 
	#STDERR
 
°dout


	)

44 
	~"≤g.h
"

54 #i‡
deföed
 
PNG_READ_SUPPORTED
 && \

55 
deföed
 
	gPNG_READ_bKGD_SUPPORTED
 &&\

56 
deföed
 
	gPNG_READ_cHRM_SUPPORTED
 &&\

57 
deföed
 
	gPNG_READ_gAMA_SUPPORTED
 &&\

58 
deföed
 
	gPNG_READ_oFFs_SUPPORTED
 &&\

59 
deföed
 
	gPNG_READ_pCAL_SUPPORTED
 &&\

60 
deföed
 
	gPNG_READ_pHYs_SUPPORTED
 &&\

61 
deföed
 
	gPNG_READ_sBIT_SUPPORTED
 &&\

62 
deföed
 
	gPNG_READ_sCAL_SUPPORTED
 &&\

63 
deföed
 
	gPNG_READ_sRGB_SUPPORTED
 &&\

64 
deföed
 
	gPNG_READ_sPLT_SUPPORTED
 &&\

65 
deföed
 
	gPNG_READ_tEXt_SUPPORTED
 &&\

66 
deföed
 
	gPNG_READ_tIME_SUPPORTED
 &&\

67 
deföed
 
	gPNG_READ_zTXt_SUPPORTED
 &&\

68 (
deföed
 
	gPNG_WRITE_INTERLACING_SUPPORTED
 || 
	gPNG_LIBPNG_VER
 >= 10700)

70 #ifde‡
PNG_ZLIB_HEADER


71 #ö˛udê
PNG_ZLIB_HEADER


73 
	~"zlib.h
"

77 #i‚de‡
PNG_ZBUF_SIZE


78 
	#PNG_ZBUF_SIZE
 8192

	)

80 
	#FCLOSE
(
fûe
Ë
	`f˛o£
(fûe)

	)

82 #i‚de‡
PNG_STDIO_SUPPORTED


83 
FILE
 * 
	t≤g_FILE_p
;

87 #i‚de‡
PNG_DEBUG


88 
	#PNG_DEBUG
 0

	)

91 #i‡
PNG_DEBUG
 > 1

92 
	#≤gã°_debug
(
m
Ë(()
	`Ârötf
(
°dîr
, m "\n"))

	)

93 
	#≤gã°_debug1
(
m
,
p1
Ë(()
	`Ârötf
(
°dîr
, m "\n",Ö1))

	)

94 
	#≤gã°_debug2
(
m
,
p1
,
p2
Ë(()
	`Ârötf
(
°dîr
, m "\n",Ö1,Ö2))

	)

96 
	#≤gã°_debug
(
m
Ë(()0)

	)

97 
	#≤gã°_debug1
(
m
,
p1
Ë(()0)

	)

98 
	#≤gã°_debug2
(
m
,
p1
,
p2
Ë(()0)

	)

101 #i‡!
PNG_DEBUG


102 
	#SINGLE_ROWBUF_ALLOC


	)

105 #i‚de‡
PNG_UNUSED


106 
	#PNG_UNUSED
(
∑øm
Ë(Ì¨am;

	)

113 #i‚de‡
PNG_FLOATING_POINT_SUPPORTED


114 #unde‡
PNGTEST_TIMING


117 #ifde‡
PNGTEST_TIMING


118 
	gt_°¨t
, 
	gt_°›
, 
	gt_decode
, 
	gt_ícode
, 
	gt_misc
;

119 
	~<time.h
>

122 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


123 
	#PNG_tIME_STRING_LENGTH
 29

	)

124 
	gtIME_chunk_¥e£¡
 = 0;

125 
	gtIME_°rög
[
PNG_tIME_STRING_LENGTH
] = "tIME chunk isÇotÖresent";

127 #i‡
PNG_LIBPNG_VER
 < 10619

128 
	#≤g_c⁄vît_to_rfc1123_buf„r
(
ts
, 
t
Ë
	`tIME_to_°r
(
ªad_±r
,Ås,Å)

	)

131 
	$tIME_to_°r
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_ch¨p
 
ts
, 
≤g_c⁄°_timï
 
t
)

133 
≤g_c⁄°_ch¨p
 
°r
 = 
	`≤g_c⁄vît_to_rfc1123
(
≤g_±r
, 
t
);

135 i‡(
°r
 =
NULL
)

138 
	`°r˝y
(
ts
, 
°r
);

140 
	}
}

144 
	gvîbo£
 = 0;

145 
	g°ri˘
 = 0;

146 
	gªœxed
 = 0;

147 
	gxÁû
 = 0;

148 
	gunsuµ‹ãd_chunks
 = 0;

149 
	gîr‹_cou¡
 = 0;

150 
	gw¨nög_cou¡
 = 0;

153 #i‚de‡
≤g_jmpbuf


154 
	#≤g_jmpbuf
(
≤g_±r
Ë≤g_±r->
jmpbuf


	)

158 #i‚de‡
PNG_HANDLE_CHUNK_ALWAYS


159 
	#PNG_HANDLE_CHUNK_ALWAYS
 3

	)

161 #i‚de‡
PNG_HANDLE_CHUNK_IF_SAFE


162 
	#PNG_HANDLE_CHUNK_IF_SAFE
 2

	)

166 
	#MEMZERO
(
v¨
Ë(()
	`mem£t
(&v¨, 0,  v¨))

	)

169 
	g°©us_∑ss
 = 1;

170 
	g°©us_dŸs_ªque°ed
 = 0;

171 
	g°©us_dŸs
 = 1;

173 
PNGCBAPI


174 
	$ªad_row_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
row_numbî
, 
∑ss
)

176 i‡(
≤g_±r
 =
NULL
 || 
row_numbî
 > 
PNG_UINT_31_MAX
)

179 i‡(
°©us_∑ss
 !
∑ss
)

181 
	`Ârötf
(
°dout
, "\¿Pas†%d: ", 
∑ss
);

182 
°©us_∑ss
 = 
∑ss
;

183 
°©us_dŸs
 = 31;

186 
°©us_dŸs
--;

188 i‡(
°©us_dŸs
 == 0)

190 
	`Ârötf
(
°dout
, "\n ");

191 
°©us_dŸs
=30;

194 
	`Ârötf
(
°dout
, "r");

195 
	}
}

197 #ifde‡
PNG_WRITE_SUPPORTED


198 
PNGCBAPI


199 
	$wrôe_row_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_uöt_32
 
row_numbî
, 
∑ss
)

201 i‡(
≤g_±r
 =
NULL
 || 
row_numbî
 > 
PNG_UINT_31_MAX
 || 
∑ss
 > 7)

204 
	`Ârötf
(
°dout
, "w");

205 
	}
}

209 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


212 
PNGCBAPI


213 
	$ªad_u£r_ˇŒback
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
d©a
)

215 
	`PNG_UNUSED
(
≤g_±r
)

216 
	`PNG_UNUSED
(
row_öfo
)

217 
	`PNG_UNUSED
(
d©a
)

218 
	}
}

221 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


226 
≤g_uöt_32
 
	gzîo_ßm∂es
;

228 
PNGCBAPI


229 
	$cou¡_zîo_ßm∂es
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
d©a
)

231 
≤g_byãp
 
dp
 = 
d©a
;

232 i‡(
≤g_±r
 =
NULL
)

246 i‡(
row_öfo
->
cﬁ‹_ty≥
 == 0 ||Ñow_info->color_type == 3)

248 
pos
 = 0;

249 
≤g_uöt_32
 
n
, 
n°›
;

251 
n
 = 0, 
n°›
=
row_öfo
->
width
;Ç<nstop;Ç++)

253 i‡(
row_öfo
->
bô_dïth
 == 1)

255 i‡(((*
dp
 << 
pos
++ ) & 0x80) == 0)

256 
zîo_ßm∂es
++;

258 i‡(
pos
 == 8)

260 
pos
 = 0;

261 
dp
++;

265 i‡(
row_öfo
->
bô_dïth
 == 2)

267 i‡(((*
dp
 << (
pos
+=2)) & 0xc0) == 0)

268 
zîo_ßm∂es
++;

270 i‡(
pos
 == 8)

272 
pos
 = 0;

273 
dp
++;

277 i‡(
row_öfo
->
bô_dïth
 == 4)

279 i‡(((*
dp
 << (
pos
+=4)) & 0xf0) == 0)

280 
zîo_ßm∂es
++;

282 i‡(
pos
 == 8)

284 
pos
 = 0;

285 
dp
++;

289 i‡(
row_öfo
->
bô_dïth
 == 8)

290 i‡(*
dp
++ == 0)

291 
zîo_ßm∂es
++;

293 i‡(
row_öfo
->
bô_dïth
 == 16)

295 i‡((*
dp
 | *(dp+1)) == 0)

296 
zîo_ßm∂es
++;

297 
dp
+=2;

303 
≤g_uöt_32
 
n
, 
n°›
;

304 
ch™√l
;

305 
cﬁ‹_ch™√ls
 = 
row_öfo
->
ch™√ls
;

306 i‡(
row_öfo
->
cﬁ‹_ty≥
 > 3)

307 
cﬁ‹_ch™√ls
--;

309 
n
 = 0, 
n°›
=
row_öfo
->
width
;Ç<nstop;Ç++)

311 
ch™√l
 = 0; ch™√»< 
cﬁ‹_ch™√ls
; channel++)

313 i‡(
row_öfo
->
bô_dïth
 == 8)

314 i‡(*
dp
++ == 0)

315 
zîo_ßm∂es
++;

317 i‡(
row_öfo
->
bô_dïth
 == 16)

319 i‡((*
dp
 | *(dp+1)) == 0)

320 
zîo_ßm∂es
++;

322 
dp
+=2;

325 i‡(
row_öfo
->
cﬁ‹_ty≥
 > 3)

327 
dp
++;

328 i‡(
row_öfo
->
bô_dïth
 == 16)

329 
dp
++;

333 
	}
}

336 #i‚de‡
PNG_STDIO_SUPPORTED


346 #ifde‡
PNG_IO_STATE_SUPPORTED


348 
≤gã°_check_io_°©e
(
≤g_°ru˘p
 
≤g_±r
, 
size_t
 
d©a_Àngth
,

349 
≤g_uöt_32
 
io_›
);

351 
	$≤gã°_check_io_°©e
(
≤g_°ru˘p
 
≤g_±r
, 
size_t
 
d©a_Àngth
,

352 
≤g_uöt_32
 
io_›
)

354 
≤g_uöt_32
 
io_°©e
 = 
	`≤g_gë_io_°©e
(
≤g_±r
);

355 
îr
 = 0;

358 i‡((
io_°©e
 & 
PNG_IO_MASK_OP
Ë!
io_›
)

359 
	`≤g_îr‹
(
≤g_±r
, "Incorrect operation in I/O state");

364 
io_°©e
 & 
PNG_IO_MASK_LOC
)

366 
PNG_IO_SIGNATURE
:

367 i‡(
d©a_Àngth
 > 8)

368 
îr
 = 1;

370 
PNG_IO_CHUNK_HDR
:

371 i‡(
d©a_Àngth
 != 8)

372 
îr
 = 1;

374 
PNG_IO_CHUNK_DATA
:

376 
PNG_IO_CHUNK_CRC
:

377 i‡(
d©a_Àngth
 != 4)

378 
îr
 = 1;

381 
îr
 = 1;

383 i‡(
îr
 != 0)

384 
	`≤g_îr‹
(
≤g_±r
, "Bad I/O state or buffer size");

385 
	}
}

388 
PNGCBAPI


389 
	$≤gã°_ªad_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
)

391 
size_t
 
check
 = 0;

392 
≤g_voidp
 
io_±r
;

397 
io_±r
 = 
	`≤g_gë_io_±r
(
≤g_±r
);

398 i‡(
io_±r
 !
NULL
)

400 
check
 = 
	`‰ód
(
d©a
, 1, 
Àngth
, (
≤g_FILE_p
)
io_±r
);

403 i‡(
check
 !
Àngth
)

405 
	`≤g_îr‹
(
≤g_±r
, "Read Error");

408 #ifde‡
PNG_IO_STATE_SUPPORTED


409 
	`≤gã°_check_io_°©e
(
≤g_±r
, 
Àngth
, 
PNG_IO_READING
);

411 
	}
}

413 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


414 
PNGCBAPI


415 
	$≤gã°_Êush
(
≤g_°ru˘p
 
≤g_±r
)

418 
	`PNG_UNUSED
(
≤g_±r
)

419 
	}
}

427 
PNGCBAPI


428 
	$≤gã°_wrôe_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
)

430 
size_t
 
check
;

432 
check
 = 
	`fwrôe
(
d©a
, 1, 
Àngth
, (
≤g_FILE_p
)
	`≤g_gë_io_±r
(
≤g_±r
));

434 i‡(
check
 !
Àngth
)

436 
	`≤g_îr‹
(
≤g_±r
, "Write Error");

439 #ifde‡
PNG_IO_STATE_SUPPORTED


440 
	`≤gã°_check_io_°©e
(
≤g_±r
, 
Àngth
, 
PNG_IO_WRITING
);

442 
	}
}

452 c⁄° *
	mfûe_«me
;

453 } 
	t≤gã°_îr‹_∑ømëîs
;

455 
PNGCBAPI


456 
	$≤gã°_w¨nög
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
mesßge
)

458 c⁄° *
«me
 = "UNKNOWN (ERROR!)";

459 
≤gã°_îr‹_∑ømëîs
 *
ã°
 =

460 (
≤gã°_îr‹_∑ømëîs
*)
	`≤g_gë_îr‹_±r
(
≤g_±r
);

462 ++
w¨nög_cou¡
;

464 i‡(
ã°
 !
NULL
 &&Åe°->
fûe_«me
 != NULL)

465 
«me
 = 
ã°
->
fûe_«me
;

467 
	`Ârötf
(
STDERR
, "\n%s:Üib≤g w¨nög: %s\n", 
«me
, 
mesßge
);

468 
	}
}

475 
PNGCBAPI


476 
	$≤gã°_îr‹
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
mesßge
)

478 ++
îr‹_cou¡
;

480 
	`≤gã°_w¨nög
(
≤g_±r
, 
mesßge
);

484 
	}
}

489 #i‡
deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


500 
	smem‹y_öf‹m©i⁄


502 
≤g_Æloc_size_t
 
	msize
;

503 
≤g_voidp
 
	mpoöãr
;

504 
mem‹y_öf‹m©i⁄
 *
	m√xt
;

505 } 
	tmem‹y_öf‹m©i⁄
;

506 
mem‹y_öf‹m©i⁄
 *
	tmem‹y_öf›
;

508 
mem‹y_öf›
 
	gpöf‹m©i⁄
 = 
NULL
;

509 
	gcuºít_Æloˇti⁄
 = 0;

510 
	gmaximum_Æloˇti⁄
 = 0;

511 
	gtŸÆ_Æloˇti⁄
 = 0;

512 
	gnum_Æloˇti⁄s
 = 0;

514 
≤g_voidp
 
PNGCBAPI
 
≤g_debug_mÆloc
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
,

515 
≤g_Æloc_size_t
 
size
));

516 
PNGCBAPI
 
≤g_debug_‰ì
 
PNGARG
((
≤g_°ru˘p
 
≤g_±r
, 
≤g_voidp
 
±r
));

518 
≤g_voidp


519 
PNGCBAPI
 
	$≤g_debug_mÆloc
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_Æloc_size_t
 
size
)

526 i‡(
size
 == 0)

527  (
NULL
);

533 
mem‹y_öf›
 
pöfo
;

534 
	`≤g_£t_mem_‚
(
≤g_±r
, 
NULL
, NULL, NULL);

535 
pöfo
 = (
mem‹y_öf›
)
	`≤g_mÆloc
(
≤g_±r
,

536 ( *
pöfo
));

537 
pöfo
->
size
 = size;

538 
cuºít_Æloˇti⁄
 +
size
;

539 
tŸÆ_Æloˇti⁄
 +
size
;

540 
num_Æloˇti⁄s
 ++;

542 i‡(
cuºít_Æloˇti⁄
 > 
maximum_Æloˇti⁄
)

543 
maximum_Æloˇti⁄
 = 
cuºít_Æloˇti⁄
;

545 
pöfo
->
poöãr
 = 
	`≤g_mÆloc
(
≤g_±r
, 
size
);

548 
	`≤g_£t_mem_‚
(
≤g_±r
,

549 
NULL
, 
≤g_debug_mÆloc
, 
≤g_debug_‰ì
);

551 i‡(
size
 !0 && 
pöfo
->
poöãr
 =
NULL
)

553 
cuºít_Æloˇti⁄
 -
size
;

554 
tŸÆ_Æloˇti⁄
 -
size
;

555 
	`≤g_îr‹
(
≤g_±r
,

559 
pöfo
->
√xt
 = 
pöf‹m©i⁄
;

560 
pöf‹m©i⁄
 = 
pöfo
;

562 
	`mem£t
(
pöfo
->
poöãr
, 0xdd,Ööfo->
size
);

564 i‡(
vîbo£
 != 0)

565 
	`¥ötf
("≤g_mÆlo¯%lu byã†© %p\n", ()
size
,

566 
pöfo
->
poöãr
);

568  (
≤g_voidp
)(
pöfo
->
poöãr
);

570 
	}
}

573 
PNGCBAPI


574 
	$≤g_debug_‰ì
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_voidp
 
±r
)

576 i‡(
≤g_±r
 =
NULL
)

577 
	`Ârötf
(
STDERR
, "NULLÖointerÅoÖng_debug_free.\n");

579 i‡(
±r
 == 0)

582 
	`Ârötf
(
STDERR
, "WARNING: freeing NULLÖointer\n");

588 i‡(
pöf‹m©i⁄
 !
NULL
)

590 
mem‹y_öf›
 *
µöfo
 = &
pöf‹m©i⁄
;

594 
mem‹y_öf›
 
pöfo
 = *
µöfo
;

596 i‡(
pöfo
->
poöãr
 =
±r
)

598 *
µöfo
 = 
pöfo
->
√xt
;

599 
cuºít_Æloˇti⁄
 -
pöfo
->
size
;

600 i‡(
cuºít_Æloˇti⁄
 < 0)

601 
	`Ârötf
(
STDERR
, "Duplicate free of memory\n");

604 
	`mem£t
(
±r
, 0x55, 
pöfo
->
size
);

605 
	`‰ì
(
pöfo
);

606 
pöfo
 = 
NULL
;

610 i‡(
pöfo
->
√xt
 =
NULL
)

612 
	`Ârötf
(
STDERR
, "Poöã∏%∞nŸ found\n", 
±r
);

616 
µöfo
 = &
pöfo
->
√xt
;

621 i‡(
vîbo£
 != 0)

622 
	`¥ötf
("Fªeög %p\n", 
±r
);

624 i‡(
±r
 !
NULL
)

625 
	`‰ì
(
±r
);

626 
±r
 = 
NULL
;

627 
	}
}

632 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


638 
	su£r_chunk_d©a


640 
≤g_c⁄°_öf›
 
	möfo_±r
;

641 
≤g_uöt_32
 
	mvpAg_width
, 
	mvpAg_height
;

642 
≤g_byã
 
	mvpAg_unôs
;

643 
≤g_byã
 
	msTER_mode
;

644 
	mloˇti⁄
[2];

646 
	gu£r_chunk_d©a
;

649 
	#have_sTER
 0x01

	)

650 
	#have_vpAg
 0x02

	)

651 
	#bef‹e_PLTE
 0x10

	)

652 
	#bef‹e_IDAT
 0x20

	)

653 
	#a·î_IDAT
 0x40

	)

656 
	$öô_ˇŒback_öfo
(
≤g_c⁄°_öf›
 
öfo_±r
)

658 
	`MEMZERO
(
u£r_chunk_d©a
);

659 
u£r_chunk_d©a
.
öfo_±r
 = info_ptr;

660 
	}
}

663 
	$£t_loˇti⁄
(
≤g_°ru˘p
 
≤g_±r
, 
u£r_chunk_d©a
 *
d©a
, 
wh©
)

665 
loˇti⁄
;

667 i‡((
d©a
->
loˇti⁄
[0] & 
wh©
) != 0 || (data->location[1] & what) != 0)

673 i‡(
d©a
->
öfo_±r
 =
NULL
)

674 
loˇti⁄
 = 
wh©
 | 
a·î_IDAT
;

676 i‡(
	`≤g_gë_vÆid
(
≤g_±r
, 
d©a
->
öfo_±r
, 
PNG_INFO_PLTE
) != 0)

677 
loˇti⁄
 = 
wh©
 | 
bef‹e_IDAT
;

680 
loˇti⁄
 = 
wh©
 | 
bef‹e_PLTE
;

682 i‡(
d©a
->
loˇti⁄
[0] == 0)

683 
d©a
->
loˇti⁄
[0] =Üocation;

686 
d©a
->
loˇti⁄
[1] =Üocation;

689 
	}
}

691 
PNGCBAPI


692 
	$ªad_u£r_chunk_ˇŒback
(
≤g_°ru˘
 *
≤g_±r
, 
≤g_unknown_chunkp
 
chunk
)

694 
u£r_chunk_d©a
 *
my_u£r_chunk_d©a
 =

695 (
u£r_chunk_d©a
*)
	`≤g_gë_u£r_chunk_±r
(
≤g_±r
);

697 i‡(
my_u£r_chunk_d©a
 =
NULL
)

698 
	`≤g_îr‹
(
≤g_±r
, "lost user chunkÖointer");

713 i‡(
chunk
->
«me
[0] == 115 && chunk->name[1] == 84 &&

714 
chunk
->
«me
[2] == 69 && chunk->name[3] == 82)

717 i‡(
chunk
->
size
 != 1)

720 i‡(
chunk
->
d©a
[0] != 0 && chunk->data[0] != 1)

723 i‡(
	`£t_loˇti⁄
(
≤g_±r
, 
my_u£r_chunk_d©a
, 
have_sTER
) != 0)

725 
my_u£r_chunk_d©a
->
sTER_mode
=
chunk
->
d©a
[0];

733 i‡(
chunk
->
«me
[0] != 118 || chunk->name[1] != 112 ||

734 
chunk
->
«me
[2] != 65 || chunk->name[3] != 103)

739 i‡(
chunk
->
size
 != 9)

742 i‡(
	`£t_loˇti⁄
(
≤g_±r
, 
my_u£r_chunk_d©a
, 
have_vpAg
) == 0)

745 
my_u£r_chunk_d©a
->
vpAg_width
 = 
	`≤g_gë_uöt_31
(
≤g_±r
, 
chunk
->
d©a
);

746 
my_u£r_chunk_d©a
->
vpAg_height
 = 
	`≤g_gë_uöt_31
(
≤g_±r
, 
chunk
->
d©a
 + 4);

747 
my_u£r_chunk_d©a
->
vpAg_unôs
 = 
chunk
->
d©a
[8];

750 
	}
}

752 #ifde‡
PNG_WRITE_SUPPORTED


754 
	$wrôe_sTER_chunk
(
≤g_°ru˘p
 
wrôe_±r
)

756 
≤g_byã
 
sTER
[5] = {115, 84, 69, 82, '\0'};

758 i‡(
vîbo£
 != 0)

759 
	`Ârötf
(
STDERR
, "\¿°îeÿmodê%d\n", 
u£r_chunk_d©a
.
sTER_mode
);

761 
	`≤g_wrôe_chunk
(
wrôe_±r
, 
sTER
, &
u£r_chunk_d©a
.
sTER_mode
, 1);

762 
	}
}

765 
	$wrôe_vpAg_chunk
(
≤g_°ru˘p
 
wrôe_±r
)

767 
≤g_byã
 
vpAg
[5] = {118, 112, 65, 103, '\0'};

769 
≤g_byã
 
v∑g_chunk_d©a
[9];

771 i‡(
vîbo£
 != 0)

772 
	`Ârötf
(
STDERR
, " vpAg = %lu x %lu, units = %d\n",

773 ()
u£r_chunk_d©a
.
vpAg_width
,

774 ()
u£r_chunk_d©a
.
vpAg_height
,

775 
u£r_chunk_d©a
.
vpAg_unôs
);

777 
	`≤g_ßve_uöt_32
(
v∑g_chunk_d©a
, 
u£r_chunk_d©a
.
vpAg_width
);

778 
	`≤g_ßve_uöt_32
(
v∑g_chunk_d©a
 + 4, 
u£r_chunk_d©a
.
vpAg_height
);

779 
v∑g_chunk_d©a
[8] = 
u£r_chunk_d©a
.
vpAg_unôs
;

780 
	`≤g_wrôe_chunk
(
wrôe_±r
, 
vpAg
, 
v∑g_chunk_d©a
, 9);

781 
	}
}

784 
	$wrôe_chunks
(
≤g_°ru˘p
 
wrôe_±r
, 
loˇti⁄
)

786 
i
;

794 
i
=0; i<2; ++i)

796 i‡(
u£r_chunk_d©a
.
loˇti⁄
[
i
] =÷oˇti⁄ | 
have_sTER
))

797 
	`wrôe_sTER_chunk
(
wrôe_±r
);

799 i‡(
u£r_chunk_d©a
.
loˇti⁄
[
i
] =÷oˇti⁄ | 
have_vpAg
))

800 
	`wrôe_vpAg_chunk
(
wrôe_±r
);

802 
	}
}

805 
	#wrôe_chunks
(
µ
,
loc
Ë(()0)

	)

813 #ifde‡
PNG_TEXT_SUPPORTED


815 
	$≤gã°_check_ãxt_suµ‹t
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_ãxç
 
ãxt_±r
,

816 
num_ãxt
)

818 
num_ãxt
 > 0)

820 
ãxt_±r
[--
num_ãxt
].
com¥essi⁄
)

822 
PNG_TEXT_COMPRESSION_NONE
:

825 
PNG_TEXT_COMPRESSION_zTXt
:

826 #i‚de‡
PNG_WRITE_zTXt_SUPPORTED


827 ++
unsuµ‹ãd_chunks
;

829 
ãxt_±r
[
num_ãxt
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

833 
PNG_ITXT_COMPRESSION_NONE
:

834 
PNG_ITXT_COMPRESSION_zTXt
:

835 #i‚de‡
PNG_WRITE_iTXt_SUPPORTED


836 ++
unsuµ‹ãd_chunks
;

837 
ãxt_±r
[
num_ãxt
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE
;

843 
	`≤g_îr‹
(
≤g_±r
, "invalidÅext chunk compression field");

847 
	}
}

853 
	$ã°_⁄e_fûe
(c⁄° *
ö«me
, c⁄° *
ouäame
)

855 
≤g_FILE_p
 
Âö
;

856 
≤g_FILE_p
 
Âout
;

857 
≤gã°_îr‹_∑ømëîs
 
îr‹_∑ømëîs
;

858 
≤g_°ru˘p
 
ªad_±r
;

859 
≤g_öf›
 
ªad_öfo_±r
, 
íd_öfo_±r
;

860 #ifde‡
PNG_WRITE_SUPPORTED


861 
≤g_°ru˘p
 
wrôe_±r
;

862 
≤g_öf›
 
wrôe_öfo_±r
;

863 
≤g_öf›
 
wrôe_íd_öfo_±r
;

864 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


865 
öãæa˚_¥e£rved
 = 1;

868 
≤g_°ru˘p
 
wrôe_±r
 = 
NULL
;

869 
≤g_öf›
 
wrôe_öfo_±r
 = 
NULL
;

870 
≤g_öf›
 
wrôe_íd_öfo_±r
 = 
NULL
;

872 
≤g_byãp
 
row_buf
;

873 
≤g_uöt_32
 
y
;

874 
≤g_uöt_32
 
width
, 
height
;

875 vﬁ©ûê
num_∑s£s
;

876 
∑ss
;

877 
bô_dïth
, 
cﬁ‹_ty≥
;

879 
row_buf
 = 
NULL
;

880 
îr‹_∑ømëîs
.
fûe_«me
 = 
ö«me
;

882 i‡((
Âö
 = 
	`f›í
(
ö«me
, "rb")Ë=
NULL
)

884 
	`Ârötf
(
STDERR
, "CouldÇŸ föd i≈uàfûê%s\n", 
ö«me
);

888 i‡((
Âout
 = 
	`f›í
(
ouäame
, "wb")Ë=
NULL
)

890 
	`Ârötf
(
STDERR
, "CouldÇŸ o≥¿ouçuàfûê%s\n", 
ouäame
);

891 
	`FCLOSE
(
Âö
);

895 
	`≤gã°_debug
("AllocatingÑeadánd write structures");

896 #i‡
	`deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


897 
ªad_±r
 =

898 
	`≤g_¸óã_ªad_°ru˘_2
(
PNG_LIBPNG_VER_STRING
, 
NULL
,

899 
NULL
, NULL, NULL, 
≤g_debug_mÆloc
, 
≤g_debug_‰ì
);

901 
ªad_±r
 =

902 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
, NULL, NULL);

904 
	`≤g_£t_îr‹_‚
(
ªad_±r
, &
îr‹_∑ømëîs
, 
≤gã°_îr‹
,

905 
≤gã°_w¨nög
);

907 #ifde‡
PNG_WRITE_SUPPORTED


908 #i‡
	`deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


909 
wrôe_±r
 =

910 
	`≤g_¸óã_wrôe_°ru˘_2
(
PNG_LIBPNG_VER_STRING
, 
NULL
,

911 
NULL
, NULL, NULL, 
≤g_debug_mÆloc
, 
≤g_debug_‰ì
);

913 
wrôe_±r
 =

914 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
, NULL, NULL);

916 
	`≤g_£t_îr‹_‚
(
wrôe_±r
, &
îr‹_∑ømëîs
, 
≤gã°_îr‹
,

917 
≤gã°_w¨nög
);

919 
	`≤gã°_debug
("AllocatingÑead_info, write_infoándÉnd_info structures");

920 
ªad_öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
ªad_±r
);

921 
íd_öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
ªad_±r
);

922 #ifde‡
PNG_WRITE_SUPPORTED


923 
wrôe_öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
wrôe_±r
);

924 
wrôe_íd_öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
wrôe_±r
);

927 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


928 
	`öô_ˇŒback_öfo
(
ªad_öfo_±r
);

929 
	`≤g_£t_ªad_u£r_chunk_‚
(
ªad_±r
, &
u£r_chunk_d©a
,

930 
ªad_u£r_chunk_ˇŒback
);

933 #ifde‡
PNG_SETJMP_SUPPORTED


934 
	`≤gã°_debug
("Setting jmpbuf forÑead struct");

935 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
ªad_±r
)))

937 
	`Ârötf
(
STDERR
, "%†-> %s:Üib≤gÑódÉº‹\n", 
ö«me
, 
ouäame
);

938 
	`≤g_‰ì
(
ªad_±r
, 
row_buf
);

939 
row_buf
 = 
NULL
;

940 i‡(
vîbo£
 != 0)

941 
	`Ârötf
(
STDERR
, " destroyÑead structs\n");

942 
	`≤g_de°roy_ªad_°ru˘
(&
ªad_±r
, &
ªad_öfo_±r
, &
íd_öfo_±r
);

943 #ifde‡
PNG_WRITE_SUPPORTED


944 i‡(
vîbo£
 != 0)

945 
	`Ârötf
(
STDERR
, " destroy write structs\n");

946 
	`≤g_de°roy_öfo_°ru˘
(
wrôe_±r
, &
wrôe_íd_öfo_±r
);

947 
	`≤g_de°roy_wrôe_°ru˘
(&
wrôe_±r
, &
wrôe_öfo_±r
);

949 
	`FCLOSE
(
Âö
);

950 
	`FCLOSE
(
Âout
);

954 #ifde‡
PNG_WRITE_SUPPORTED


955 
	`≤gã°_debug
("Setting jmpbuf for write struct");

957 i‡(
	`£tjmp
(
	`≤g_jmpbuf
(
wrôe_±r
)))

959 
	`Ârötf
(
STDERR
, "%†-> %s:Üib≤g wrôêîr‹\n", 
ö«me
, 
ouäame
);

960 
	`≤g_‰ì
(
ªad_±r
, 
row_buf
);

961 
row_buf
 = 
NULL
;

962 i‡(
vîbo£
 != 0)

963 
	`Ârötf
(
STDERR
, " destroyingÑead structs\n");

964 
	`≤g_de°roy_ªad_°ru˘
(&
ªad_±r
, &
ªad_öfo_±r
, &
íd_öfo_±r
);

965 i‡(
vîbo£
 != 0)

966 
	`Ârötf
(
STDERR
, " destroying write structs\n");

967 
	`≤g_de°roy_öfo_°ru˘
(
wrôe_±r
, &
wrôe_íd_öfo_±r
);

968 
	`≤g_de°roy_wrôe_°ru˘
(&
wrôe_±r
, &
wrôe_öfo_±r
);

969 
	`FCLOSE
(
Âö
);

970 
	`FCLOSE
(
Âout
);

976 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


977 i‡(
°ri˘
 != 0)

980 
	`≤g_£t_bíign_îr‹s
(
ªad_±r
, 0);

982 #ifde‡
PNG_WRITE_SUPPORTED


984 
	`≤g_£t_bíign_îr‹s
(
wrôe_±r
, 0);

993 i‡(
ªœxed
 != 0)

996 
	`≤g_£t_bíign_îr‹s
(
ªad_±r
, 1);

999 
	`≤g_£t_¸c_a˘i⁄
(
ªad_±r
, 
PNG_CRC_QUIET_USE
, PNG_CRC_QUIET_USE);

1001 #ifde‡
PNG_IGNORE_ADLER32


1003 
	`≤g_£t_›ti⁄
(
ªad_±r
, 
PNG_IGNORE_ADLER32
, 
PNG_OPTION_ON
);

1006 #ifde‡
PNG_WRITE_SUPPORTED


1007 
	`≤g_£t_bíign_îr‹s
(
wrôe_±r
, 1);

1013 
	`≤gã°_debug
("Initializing inputánd output streams");

1014 #ifde‡
PNG_STDIO_SUPPORTED


1015 
	`≤g_öô_io
(
ªad_±r
, 
Âö
);

1016 #ifde‡
PNG_WRITE_SUPPORTED


1017 
	`≤g_öô_io
(
wrôe_±r
, 
Âout
);

1020 
	`≤g_£t_ªad_‚
(
ªad_±r
, (
≤g_voidp
)
Âö
, 
≤gã°_ªad_d©a
);

1021 #ifde‡
PNG_WRITE_SUPPORTED


1022 
	`≤g_£t_wrôe_‚
(
wrôe_±r
, (
≤g_voidp
)
Âout
, 
≤gã°_wrôe_d©a
,

1023 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


1024 
≤gã°_Êush
);

1026 
NULL
);

1031 i‡(
°©us_dŸs_ªque°ed
 == 1)

1033 #ifde‡
PNG_WRITE_SUPPORTED


1034 
	`≤g_£t_wrôe_°©us_‚
(
wrôe_±r
, 
wrôe_row_ˇŒback
);

1036 
	`≤g_£t_ªad_°©us_‚
(
ªad_±r
, 
ªad_row_ˇŒback
);

1041 #ifde‡
PNG_WRITE_SUPPORTED


1042 
	`≤g_£t_wrôe_°©us_‚
(
wrôe_±r
, 
NULL
);

1044 
	`≤g_£t_ªad_°©us_‚
(
ªad_±r
, 
NULL
);

1047 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


1048 
	`≤g_£t_ªad_u£r_å™sf‹m_‚
(
ªad_±r
, 
ªad_u£r_ˇŒback
);

1050 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


1051 
zîo_ßm∂es
 = 0;

1052 
	`≤g_£t_wrôe_u£r_å™sf‹m_‚
(
wrôe_±r
, 
cou¡_zîo_ßm∂es
);

1055 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


1064 #ifde‡
PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


1065 
	`≤g_£t_kìp_unknown_chunks
(
ªad_±r
, 
PNG_HANDLE_CHUNK_ALWAYS
,

1066 
NULL
, 0);

1068 #ifde‡
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


1069 
	`≤g_£t_kìp_unknown_chunks
(
wrôe_±r
, 
PNG_HANDLE_CHUNK_ALWAYS
,

1070 
NULL
, 0);

1074 
	`≤gã°_debug
("Reading info struct");

1075 
	`≤g_ªad_öfo
(
ªad_±r
, 
ªad_öfo_±r
);

1077 #ifde‡
PNG_READ_USER_CHUNKS_SUPPORTED


1083 
u£r_chunk_d©a
.
öfo_±r
 = 
NULL
;

1086 
	`≤gã°_debug
("Transferring info struct");

1088 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
, 
fûãr_ty≥
;

1090 i‡(
	`≤g_gë_IHDR
(
ªad_±r
, 
ªad_öfo_±r
, &
width
, &
height
, &
bô_dïth
,

1091 &
cﬁ‹_ty≥
, &
öãæa˚_ty≥
, &
com¥essi⁄_ty≥
, &
fûãr_ty≥
) != 0)

1093 
	`≤g_£t_IHDR
(
wrôe_±r
, 
wrôe_öfo_±r
, 
width
, 
height
, 
bô_dïth
,

1094 
cﬁ‹_ty≥
, 
öãæa˚_ty≥
, 
com¥essi⁄_ty≥
, 
fûãr_ty≥
);

1098 
öãæa˚_ty≥
)

1100 
PNG_INTERLACE_NONE
:

1101 
num_∑s£s
 = 1;

1104 
PNG_INTERLACE_ADAM7
:

1105 
num_∑s£s
 = 7;

1109 
	`≤g_îr‹
(
ªad_±r
, "invalid interlaceÅype");

1115 
	`≤g_îr‹
(
ªad_±r
, "png_get_IHDR failed");

1117 #ifde‡
PNG_FIXED_POINT_SUPPORTED


1118 #ifde‡
PNG_cHRM_SUPPORTED


1120 
≤g_fixed_poöt
 
whôe_x
, 
whôe_y
, 
ªd_x
, 
ªd_y
, 
gªí_x
, 
gªí_y
, 
blue_x
,

1121 
blue_y
;

1123 i‡(
	`≤g_gë_cHRM_fixed
(
ªad_±r
, 
ªad_öfo_±r
, &
whôe_x
, &
whôe_y
,

1124 &
ªd_x
, &
ªd_y
, &
gªí_x
, &
gªí_y
, &
blue_x
, &
blue_y
) != 0)

1126 
	`≤g_£t_cHRM_fixed
(
wrôe_±r
, 
wrôe_öfo_±r
, 
whôe_x
, 
whôe_y
, 
ªd_x
,

1127 
ªd_y
, 
gªí_x
, 
gªí_y
, 
blue_x
, 
blue_y
);

1131 #ifde‡
PNG_gAMA_SUPPORTED


1133 
≤g_fixed_poöt
 
gamma
;

1135 i‡(
	`≤g_gë_gAMA_fixed
(
ªad_±r
, 
ªad_öfo_±r
, &
gamma
) != 0)

1136 
	`≤g_£t_gAMA_fixed
(
wrôe_±r
, 
wrôe_öfo_±r
, 
gamma
);

1140 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1141 #ifde‡
PNG_cHRM_SUPPORTED


1143 
whôe_x
, 
whôe_y
, 
ªd_x
, 
ªd_y
, 
gªí_x
, 
gªí_y
, 
blue_x
,

1144 
blue_y
;

1146 i‡(
	`≤g_gë_cHRM
(
ªad_±r
, 
ªad_öfo_±r
, &
whôe_x
, &
whôe_y
, &
ªd_x
,

1147 &
ªd_y
, &
gªí_x
, &
gªí_y
, &
blue_x
, &
blue_y
) != 0)

1149 
	`≤g_£t_cHRM
(
wrôe_±r
, 
wrôe_öfo_±r
, 
whôe_x
, 
whôe_y
, 
ªd_x
,

1150 
ªd_y
, 
gªí_x
, 
gªí_y
, 
blue_x
, 
blue_y
);

1154 #ifde‡
PNG_gAMA_SUPPORTED


1156 
gamma
;

1158 i‡(
	`≤g_gë_gAMA
(
ªad_±r
, 
ªad_öfo_±r
, &
gamma
) != 0)

1159 
	`≤g_£t_gAMA
(
wrôe_±r
, 
wrôe_öfo_±r
, 
gamma
);

1164 #ifde‡
PNG_iCCP_SUPPORTED


1166 
≤g_ch¨p
 
«me
;

1167 
≤g_byãp
 
¥ofûe
;

1168 
≤g_uöt_32
 
¥oÊí
;

1169 
com¥essi⁄_ty≥
;

1171 i‡(
	`≤g_gë_iCCP
(
ªad_±r
, 
ªad_öfo_±r
, &
«me
, &
com¥essi⁄_ty≥
,

1172 &
¥ofûe
, &
¥oÊí
) != 0)

1174 
	`≤g_£t_iCCP
(
wrôe_±r
, 
wrôe_öfo_±r
, 
«me
, 
com¥essi⁄_ty≥
,

1175 
¥ofûe
, 
¥oÊí
);

1179 #ifde‡
PNG_sRGB_SUPPORTED


1181 
öã¡
;

1183 i‡(
	`≤g_gë_sRGB
(
ªad_±r
, 
ªad_öfo_±r
, &
öã¡
) != 0)

1184 
	`≤g_£t_sRGB
(
wrôe_±r
, 
wrôe_öfo_±r
, 
öã¡
);

1188 
≤g_cﬁ‹p
 
∑Àâe
;

1189 
num_∑Àâe
;

1191 i‡(
	`≤g_gë_PLTE
(
ªad_±r
, 
ªad_öfo_±r
, &
∑Àâe
, &
num_∑Àâe
) != 0)

1192 
	`≤g_£t_PLTE
(
wrôe_±r
, 
wrôe_öfo_±r
, 
∑Àâe
, 
num_∑Àâe
);

1194 #ifde‡
PNG_bKGD_SUPPORTED


1196 
≤g_cﬁ‹_16p
 
background
;

1198 i‡(
	`≤g_gë_bKGD
(
ªad_±r
, 
ªad_öfo_±r
, &
background
) != 0)

1200 
	`≤g_£t_bKGD
(
wrôe_±r
, 
wrôe_öfo_±r
, 
background
);

1204 #ifde‡
PNG_READ_eXIf_SUPPORTED


1206 
≤g_byãp
 
exif
=
NULL
;

1207 
≤g_uöt_32
 
exif_Àngth
;

1209 i‡(
	`≤g_gë_eXIf_1
(
ªad_±r
, 
ªad_öfo_±r
, &
exif_Àngth
, &
exif
) != 0)

1211 i‡(
exif_Àngth
 > 1)

1212 
	`Ârötf
(
STDERR
,"ÉXI‡ty≥ %c%c, %lu byãs\n",
exif
[0],exif[1],

1213 ()
exif_Àngth
);

1214 #ifde‡
PNG_WRITE_eXIf_SUPPORTED


1215 
	`≤g_£t_eXIf_1
(
wrôe_±r
, 
wrôe_öfo_±r
, 
exif_Àngth
, 
exif
);

1220 #ifde‡
PNG_hIST_SUPPORTED


1222 
≤g_uöt_16p
 
hi°
;

1224 i‡(
	`≤g_gë_hIST
(
ªad_±r
, 
ªad_öfo_±r
, &
hi°
) != 0)

1225 
	`≤g_£t_hIST
(
wrôe_±r
, 
wrôe_öfo_±r
, 
hi°
);

1228 #ifde‡
PNG_oFFs_SUPPORTED


1230 
≤g_öt_32
 
off£t_x
, 
off£t_y
;

1231 
unô_ty≥
;

1233 i‡(
	`≤g_gë_oFFs
(
ªad_±r
, 
ªad_öfo_±r
, &
off£t_x
, &
off£t_y
,

1234 &
unô_ty≥
) != 0)

1236 
	`≤g_£t_oFFs
(
wrôe_±r
, 
wrôe_öfo_±r
, 
off£t_x
, 
off£t_y
, 
unô_ty≥
);

1240 #ifde‡
PNG_pCAL_SUPPORTED


1242 
≤g_ch¨p
 
puΩo£
, 
unôs
;

1243 
≤g_ch¨µ
 
∑øms
;

1244 
≤g_öt_32
 
X0
, 
X1
;

1245 
ty≥
, 
≈¨ams
;

1247 i‡(
	`≤g_gë_pCAL
(
ªad_±r
, 
ªad_öfo_±r
, &
puΩo£
, &
X0
, &
X1
, &
ty≥
,

1248 &
≈¨ams
, &
unôs
, &
∑øms
) != 0)

1250 
	`≤g_£t_pCAL
(
wrôe_±r
, 
wrôe_öfo_±r
, 
puΩo£
, 
X0
, 
X1
, 
ty≥
,

1251 
≈¨ams
, 
unôs
, 
∑øms
);

1255 #ifde‡
PNG_pHYs_SUPPORTED


1257 
≤g_uöt_32
 
ªs_x
, 
ªs_y
;

1258 
unô_ty≥
;

1260 i‡(
	`≤g_gë_pHYs
(
ªad_±r
, 
ªad_öfo_±r
, &
ªs_x
, &
ªs_y
,

1261 &
unô_ty≥
) != 0)

1262 
	`≤g_£t_pHYs
(
wrôe_±r
, 
wrôe_öfo_±r
, 
ªs_x
, 
ªs_y
, 
unô_ty≥
);

1265 #ifde‡
PNG_sBIT_SUPPORTED


1267 
≤g_cﬁ‹_8p
 
sig_bô
;

1269 i‡(
	`≤g_gë_sBIT
(
ªad_±r
, 
ªad_öfo_±r
, &
sig_bô
) != 0)

1270 
	`≤g_£t_sBIT
(
wrôe_±r
, 
wrôe_öfo_±r
, 
sig_bô
);

1273 #ifde‡
PNG_sCAL_SUPPORTED


1274 #i‡
	`deföed
(
PNG_FLOATING_POINT_SUPPORTED
) && \

1275 
	`deföed
(
PNG_FLOATING_ARITHMETIC_SUPPORTED
)

1277 
unô
;

1278 
sˇl_width
, 
sˇl_height
;

1280 i‡(
	`≤g_gë_sCAL
(
ªad_±r
, 
ªad_öfo_±r
, &
unô
, &
sˇl_width
,

1281 &
sˇl_height
) != 0)

1283 
	`≤g_£t_sCAL
(
wrôe_±r
, 
wrôe_öfo_±r
, 
unô
, 
sˇl_width
, 
sˇl_height
);

1287 #ifde‡
PNG_FIXED_POINT_SUPPORTED


1289 
unô
;

1290 
≤g_ch¨p
 
sˇl_width
, 
sˇl_height
;

1292 i‡(
	`≤g_gë_sCAL_s
(
ªad_±r
, 
ªad_öfo_±r
, &
unô
, &
sˇl_width
,

1293 &
sˇl_height
) != 0)

1295 
	`≤g_£t_sCAL_s
(
wrôe_±r
, 
wrôe_öfo_±r
, 
unô
, 
sˇl_width
,

1296 
sˇl_height
);

1303 #ifde‡
PNG_sPLT_SUPPORTED


1305 
≤g_sPLT_ç
 
íåõs
;

1307 
num_íåõs
 = (Ë
	`≤g_gë_sPLT
(
ªad_±r
, 
ªad_öfo_±r
, &
íåõs
);

1308 i‡(
num_íåõs
)

1310 
	`≤g_£t_sPLT
(
wrôe_±r
, 
wrôe_öfo_±r
, 
íåõs
, 
num_íåõs
);

1315 #ifde‡
PNG_TEXT_SUPPORTED


1317 
≤g_ãxç
 
ãxt_±r
;

1318 
num_ãxt
;

1320 i‡(
	`≤g_gë_ãxt
(
ªad_±r
, 
ªad_öfo_±r
, &
ãxt_±r
, &
num_ãxt
) > 0)

1322 
	`≤gã°_debug1
("H™dlög %d iTXt/tEXt/zTXàchunks", 
num_ãxt
);

1324 
	`≤gã°_check_ãxt_suµ‹t
(
ªad_±r
, 
ãxt_±r
, 
num_ãxt
);

1326 i‡(
vîbo£
 != 0)

1328 
i
;

1330 
	`Ârötf
(
STDERR
,"\n");

1331 
i
=0; i<
num_ãxt
; i++)

1333 
	`Ârötf
(
STDERR
," Text compression[%d]=%d\n",

1334 
i
, 
ãxt_±r
[i].
com¥essi⁄
);

1338 
	`≤g_£t_ãxt
(
wrôe_±r
, 
wrôe_öfo_±r
, 
ãxt_±r
, 
num_ãxt
);

1342 #ifde‡
PNG_tIME_SUPPORTED


1344 
≤g_timï
 
mod_time
;

1346 i‡(
	`≤g_gë_tIME
(
ªad_±r
, 
ªad_öfo_±r
, &
mod_time
) != 0)

1348 
	`≤g_£t_tIME
(
wrôe_±r
, 
wrôe_öfo_±r
, 
mod_time
);

1349 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


1350 i‡(
	`≤g_c⁄vît_to_rfc1123_buf„r
(
tIME_°rög
, 
mod_time
) != 0)

1351 
tIME_°rög
[(ÅIME_string) - 1] = '\0';

1355 
	`°∫˝y
(
tIME_°rög
, "*** invalidÅime ***", (ÅIME_string));

1356 
tIME_°rög
[(ÅIME_string) - 1] = '\0';

1359 
tIME_chunk_¥e£¡
++;

1364 #ifde‡
PNG_tRNS_SUPPORTED


1366 
≤g_byãp
 
å™s_Æpha
;

1367 
num_å™s
;

1368 
≤g_cﬁ‹_16p
 
å™s_cﬁ‹
;

1370 i‡(
	`≤g_gë_tRNS
(
ªad_±r
, 
ªad_öfo_±r
, &
å™s_Æpha
, &
num_å™s
,

1371 &
å™s_cﬁ‹
) != 0)

1373 
ßm∂e_max
 = (1 << 
bô_dïth
);

1375 i‡(!((
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
 &&

1376 ()
å™s_cﬁ‹
->
gøy
 > 
ßm∂e_max
) ||

1377 (
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 &&

1378 (()
å™s_cﬁ‹
->
ªd
 > 
ßm∂e_max
 ||

1379 ()
å™s_cﬁ‹
->
gªí
 > 
ßm∂e_max
 ||

1380 ()
å™s_cﬁ‹
->
blue
 > 
ßm∂e_max
))))

1381 
	`≤g_£t_tRNS
(
wrôe_±r
, 
wrôe_öfo_±r
, 
å™s_Æpha
, 
num_å™s
,

1382 
å™s_cﬁ‹
);

1386 #ifde‡
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


1388 
≤g_unknown_chunkp
 
unknowns
;

1389 
num_unknowns
 = 
	`≤g_gë_unknown_chunks
(
ªad_±r
, 
ªad_öfo_±r
,

1390 &
unknowns
);

1392 i‡(
num_unknowns
 != 0)

1394 
	`≤g_£t_unknown_chunks
(
wrôe_±r
, 
wrôe_öfo_±r
, 
unknowns
,

1395 
num_unknowns
);

1396 #i‡
PNG_LIBPNG_VER
 < 10600

1402 
i
;

1403 
i
 = 0; i < 
num_unknowns
; i++)

1404 
	`≤g_£t_unknown_chunk_loˇti⁄
(
wrôe_±r
, 
wrôe_öfo_±r
, 
i
,

1405 
unknowns
[
i
].
loˇti⁄
);

1412 #ifde‡
PNG_WRITE_SUPPORTED


1413 
	`≤gã°_debug
("Writing info struct");

1418 
	`≤g_wrôe_öfo_bef‹e_PLTE
(
wrôe_±r
, 
wrôe_öfo_±r
);

1420 
	`wrôe_chunks
(
wrôe_±r
, 
bef‹e_PLTE
);

1422 
	`≤g_wrôe_öfo
(
wrôe_±r
, 
wrôe_öfo_±r
);

1424 
	`wrôe_chunks
(
wrôe_±r
, 
bef‹e_IDAT
);

1426 
	`≤g_wrôe_öfo
(
wrôe_±r
, 
wrôe_íd_öfo_±r
);

1428 
	`wrôe_chunks
(
wrôe_±r
, 
a·î_IDAT
);

1430 #ifde‡
PNG_COMPRESSION_COMPAT


1432 
	`≤g_£t_com¥essi⁄
(
wrôe_±r
, 
PNG_COMPRESSION_COMPAT
);

1436 #ifde‡
SINGLE_ROWBUF_ALLOC


1437 
	`≤gã°_debug
("AllocatingÑow buffer...");

1438 
row_buf
 = (
≤g_byãp
)
	`≤g_mÆloc
(
ªad_±r
,

1439 
	`≤g_gë_rowbyãs
(
ªad_±r
, 
ªad_öfo_±r
));

1441 
	`≤gã°_debug1
("\t%p", 
row_buf
);

1443 
	`≤gã°_debug
("WritingÑow data");

1445 #i‡
	`deföed
(
PNG_READ_INTERLACING_SUPPORTED
) &&\

1446 
	`deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

1451 i‡(
	`≤g_£t_öãæa˚_h™dlög
(
ªad_±r
Ë!
num_∑s£s
)

1452 
	`≤g_îr‹
(
wrôe_±r
,

1454 i‡(
	`≤g_£t_öãæa˚_h™dlög
(
wrôe_±r
Ë!
num_∑s£s
)

1455 
	`≤g_îr‹
(
wrôe_±r
,

1458 
	#ˇlc_∑ss_height


	)

1461 #ifde‡
PNGTEST_TIMING


1462 
t_°›
 = ()
	`˛ock
();

1463 
t_misc
 +(
t_°›
 - 
t_°¨t
);

1464 
t_°¨t
 = 
t_°›
;

1466 
∑ss
 = 0;Öas†< 
num_∑s£s
;Öass++)

1468 #ifde‡
ˇlc_∑ss_height


1469 
≤g_uöt_32
 
∑ss_height
;

1471 i‡(
num_∑s£s
 == 7)

1473 i‡(
	`PNG_PASS_COLS
(
width
, 
∑ss
) > 0)

1474 
∑ss_height
 = 
	`PNG_PASS_ROWS
(
height
, 
∑ss
);

1477 
∑ss_height
 = 0;

1481 
∑ss_height
 = 
height
;

1483 
	#∑ss_height
 
height


	)

1486 
	`≤gã°_debug1
("WrôögÑow d©®f‹Öas†%d", 
∑ss
);

1487 
y
 = 0; y < 
∑ss_height
; y++)

1489 #i‚de‡
SINGLE_ROWBUF_ALLOC


1490 
	`≤gã°_debug2
("AŒoˇtögÑow buf„∏’as†%d, y = %u)...", 
∑ss
, 
y
);

1492 
row_buf
 = (
≤g_byãp
)
	`≤g_mÆloc
(
ªad_±r
,

1493 
	`≤g_gë_rowbyãs
(
ªad_±r
, 
ªad_öfo_±r
));

1495 
	`≤gã°_debug2
("\t%∞(%lu byãs)", 
row_buf
,

1496 ()
	`≤g_gë_rowbyãs
(
ªad_±r
, 
ªad_öfo_±r
));

1499 
	`≤g_ªad_rows
(
ªad_±r
, (
≤g_byãµ
)&
row_buf
, 
NULL
, 1);

1501 #ifde‡
PNG_WRITE_SUPPORTED


1502 #ifde‡
PNGTEST_TIMING


1503 
t_°›
 = ()
	`˛ock
();

1504 
t_decode
 +(
t_°›
 - 
t_°¨t
);

1505 
t_°¨t
 = 
t_°›
;

1507 
	`≤g_wrôe_rows
(
wrôe_±r
, (
≤g_byãµ
)&
row_buf
, 1);

1508 #ifde‡
PNGTEST_TIMING


1509 
t_°›
 = ()
	`˛ock
();

1510 
t_ícode
 +(
t_°›
 - 
t_°¨t
);

1511 
t_°¨t
 = 
t_°›
;

1515 #i‚de‡
SINGLE_ROWBUF_ALLOC


1516 
	`≤gã°_debug2
("FªeögÑow buf„∏’as†%d, y = %u)", 
∑ss
, 
y
);

1517 
	`≤g_‰ì
(
ªad_±r
, 
row_buf
);

1518 
row_buf
 = 
NULL
;

1523 #ifde‡
PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


1524 #ifde‡
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


1525 
	`≤g_‰ì_d©a
(
ªad_±r
, 
ªad_öfo_±r
, 
PNG_FREE_UNKN
, -1);

1527 #ifde‡
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


1528 
	`≤g_‰ì_d©a
(
wrôe_±r
, 
wrôe_öfo_±r
, 
PNG_FREE_UNKN
, -1);

1532 
	`≤gã°_debug
("Readingánd writingÉnd_info data");

1534 
	`≤g_ªad_íd
(
ªad_±r
, 
íd_öfo_±r
);

1535 #ifde‡
PNG_TEXT_SUPPORTED


1537 
≤g_ãxç
 
ãxt_±r
;

1538 
num_ãxt
;

1540 i‡(
	`≤g_gë_ãxt
(
ªad_±r
, 
íd_öfo_±r
, &
ãxt_±r
, &
num_ãxt
) > 0)

1542 
	`≤gã°_debug1
("H™dlög %d iTXt/tEXt/zTXàchunks", 
num_ãxt
);

1544 
	`≤gã°_check_ãxt_suµ‹t
(
ªad_±r
, 
ãxt_±r
, 
num_ãxt
);

1546 i‡(
vîbo£
 != 0)

1548 
i
;

1550 
	`Ârötf
(
STDERR
,"\n");

1551 
i
=0; i<
num_ãxt
; i++)

1553 
	`Ârötf
(
STDERR
," Text compression[%d]=%d\n",

1554 
i
, 
ãxt_±r
[i].
com¥essi⁄
);

1558 
	`≤g_£t_ãxt
(
wrôe_±r
, 
wrôe_íd_öfo_±r
, 
ãxt_±r
, 
num_ãxt
);

1562 #ifde‡
PNG_READ_eXIf_SUPPORTED


1564 
≤g_byãp
 
exif
=
NULL
;

1565 
≤g_uöt_32
 
exif_Àngth
;

1567 i‡(
	`≤g_gë_eXIf_1
(
ªad_±r
, 
íd_öfo_±r
, &
exif_Àngth
, &
exif
) != 0)

1569 i‡(
exif_Àngth
 > 1)

1570 
	`Ârötf
(
STDERR
,"ÉXI‡ty≥ %c%c, %lu byãs\n",
exif
[0],exif[1],

1571 ()
exif_Àngth
);

1572 #ifde‡
PNG_WRITE_eXIf_SUPPORTED


1573 
	`≤g_£t_eXIf_1
(
wrôe_±r
, 
wrôe_íd_öfo_±r
, 
exif_Àngth
, 
exif
);

1578 #ifde‡
PNG_tIME_SUPPORTED


1580 
≤g_timï
 
mod_time
;

1582 i‡(
	`≤g_gë_tIME
(
ªad_±r
, 
íd_öfo_±r
, &
mod_time
) != 0)

1584 
	`≤g_£t_tIME
(
wrôe_±r
, 
wrôe_íd_öfo_±r
, 
mod_time
);

1585 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


1586 i‡(
	`≤g_c⁄vît_to_rfc1123_buf„r
(
tIME_°rög
, 
mod_time
) != 0)

1587 
tIME_°rög
[(ÅIME_string) - 1] = '\0';

1591 
	`°∫˝y
(
tIME_°rög
, "*** invalidÅime ***", ÅIME_string);

1592 
tIME_°rög
[(ÅIME_string)-1] = '\0';

1595 
tIME_chunk_¥e£¡
++;

1600 #ifde‡
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


1602 
≤g_unknown_chunkp
 
unknowns
;

1603 
num_unknowns
 = 
	`≤g_gë_unknown_chunks
(
ªad_±r
, 
íd_öfo_±r
,

1604 &
unknowns
);

1606 i‡(
num_unknowns
 != 0)

1608 
	`≤g_£t_unknown_chunks
(
wrôe_±r
, 
wrôe_íd_öfo_±r
, 
unknowns
,

1609 
num_unknowns
);

1610 #i‡
PNG_LIBPNG_VER
 < 10600

1616 
i
;

1617 
i
 = 0; i < 
num_unknowns
; i++)

1618 
	`≤g_£t_unknown_chunk_loˇti⁄
(
wrôe_±r
, 
wrôe_íd_öfo_±r
, 
i
,

1619 
unknowns
[
i
].
loˇti⁄
);

1626 #ifde‡
PNG_WRITE_SUPPORTED


1627 #ifde‡
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


1632 
	`≤g_£t_ãxt_com¥essi⁄_°øãgy
(
wrôe_±r
, 
Z_FILTERED
);

1641 
	`wrôe_chunks
(
wrôe_±r
, 
a·î_IDAT
);

1643 
	`≤g_wrôe_íd
(
wrôe_±r
, 
wrôe_íd_öfo_±r
);

1646 #ifde‡
PNG_EASY_ACCESS_SUPPORTED


1647 i‡(
vîbo£
 != 0)

1649 
≤g_uöt_32
 
iwidth
, 
iheight
;

1650 
iwidth
 = 
	`≤g_gë_image_width
(
wrôe_±r
, 
wrôe_öfo_±r
);

1651 
iheight
 = 
	`≤g_gë_image_height
(
wrôe_±r
, 
wrôe_öfo_±r
);

1652 
	`Ârötf
(
STDERR
, "\n Image width = %lu, height = %lu\n",

1653 ()
iwidth
, ()
iheight
);

1657 
	`≤gã°_debug
("Destroying data structs");

1658 #ifde‡
SINGLE_ROWBUF_ALLOC


1659 
	`≤gã°_debug
("destroyingÑow_buf forÑead_ptr");

1660 
	`≤g_‰ì
(
ªad_±r
, 
row_buf
);

1661 
row_buf
 = 
NULL
;

1663 
	`≤gã°_debug
("destroyingÑead_ptr,Ñead_info_ptr,Énd_info_ptr");

1664 
	`≤g_de°roy_ªad_°ru˘
(&
ªad_±r
, &
ªad_öfo_±r
, &
íd_öfo_±r
);

1665 #ifde‡
PNG_WRITE_SUPPORTED


1666 
	`≤gã°_debug
("destroying write_end_info_ptr");

1667 
	`≤g_de°roy_öfo_°ru˘
(
wrôe_±r
, &
wrôe_íd_öfo_±r
);

1668 
	`≤gã°_debug
("destroying write_ptr, write_info_ptr");

1669 
	`≤g_de°roy_wrôe_°ru˘
(&
wrôe_±r
, &
wrôe_öfo_±r
);

1671 
	`≤gã°_debug
("Destruction complete.");

1673 
	`FCLOSE
(
Âö
);

1674 
	`FCLOSE
(
Âout
);

1680 i‡(
îr‹_cou¡
 > 0)

1685 
	`Ârötf
(
STDERR
, "\n %s: %dÜibpngÉrrors found (%d warnings)",

1686 
ö«me
, 
îr‹_cou¡
, 
w¨nög_cou¡
);

1688 i‡(
°ri˘
 != 0)

1692 #ifde‡
PNG_WRITE_SUPPORTED


1694 i‡(
unsuµ‹ãd_chunks
 > 0)

1696 
	`Ârötf
(
STDERR
, "\n %s: unsupported chunks (%d)%s",

1697 
ö«me
, 
unsuµ‹ãd_chunks
, 
°ri˘
 ? ": IGNORED --strict!" : "");

1701 i‡(
w¨nög_cou¡
 > 0)

1703 
	`Ârötf
(
STDERR
, "\n %s: %dÜibpng warnings found",

1704 
ö«me
, 
w¨nög_cou¡
);

1706 i‡(
°ri˘
 != 0)

1710 
	`≤gã°_debug
("Opening files for comparison");

1711 i‡((
Âö
 = 
	`f›í
(
ö«me
, "rb")Ë=
NULL
)

1713 
	`Ârötf
(
STDERR
, "CouldÇŸ föd fûê%s\n", 
ö«me
);

1717 i‡((
Âout
 = 
	`f›í
(
ouäame
, "rb")Ë=
NULL
)

1719 
	`Ârötf
(
STDERR
, "CouldÇŸ föd fûê%s\n", 
ouäame
);

1720 
	`FCLOSE
(
Âö
);

1724 #i‡
	`deföed
 (
PNG_WRITE_SUPPORTED
) &&\

1725 
	`deföed
 (
PNG_WRITE_FILTER_SUPPORTED
)

1726 i‡(
öãæa˚_¥e£rved
 != 0)

1730 
wrŸe_que°i⁄
 = 0;

1731 
size_t
 
num_ö
, 
num_out
;

1732 
öbuf
[256], 
outbuf
[256];

1734 
num_ö
 = 
	`‰ód
(
öbuf
, 1,  inbuf, 
Âö
);

1735 
num_out
 = 
	`‰ód
(
outbuf
, 1,  outbuf, 
Âout
);

1737 i‡(
num_ö
 !
num_out
)

1739 
	`Ârötf
(
STDERR
, "\nFiles %sánd %sáre ofá different size\n",

1740 
ö«me
, 
ouäame
);

1742 i‡(
wrŸe_que°i⁄
 =0 && 
unsuµ‹ãd_chunks
 == 0)

1744 
	`Ârötf
(
STDERR
,

1747 
ö«me
, 
PNG_ZBUF_SIZE
);

1748 
	`Ârötf
(
STDERR
,

1750 
	`Ârötf
(
STDERR
,

1752 
ZLIB_VERSION
);

1753 
wrŸe_que°i⁄
 = 1;

1756 
	`FCLOSE
(
Âö
);

1757 
	`FCLOSE
(
Âout
);

1759 i‡(
°ri˘
 !0 && 
unsuµ‹ãd_chunks
 == 0)

1766 i‡(
num_ö
 == 0)

1769 i‡(
	`memcmp
(
öbuf
, 
outbuf
, 
num_ö
))

1771 
	`Ârötf
(
STDERR
, "\nFûe†%†™d %†¨êdif„ª¡\n", 
ö«me
,

1772 
ouäame
);

1774 i‡(
wrŸe_que°i⁄
 =0 && 
unsuµ‹ãd_chunks
 == 0)

1776 
	`Ârötf
(
STDERR
,

1779 
ö«me
, 
PNG_ZBUF_SIZE
);

1780 
	`Ârötf
(
STDERR
,

1782 
	`Ârötf
(
STDERR
,

1784 
ZLIB_VERSION
);

1785 
wrŸe_que°i⁄
 = 1;

1788 
	`FCLOSE
(
Âö
);

1789 
	`FCLOSE
(
Âout
);

1796 i‡(
°ri˘
 !0 && 
unsuµ‹ãd_chunks
 == 0)

1806 
	`FCLOSE
(
Âö
);

1807 
	`FCLOSE
(
Âout
);

1810 
	}
}

1813 #ifde‡
RISCOS


1814 c⁄° *
	gö«me
 = "pngtest/png";

1815 c⁄° *
	gouäame
 = "pngout/png";

1817 c⁄° *
	gö«me
 = "pngtest.png";

1818 c⁄° *
	gouäame
 = "pngout.png";

1822 
	$maö
(
¨gc
, *
¨gv
[])

1824 
mu…ùÀ
 = 0;

1825 
õº‹
 = 0;

1827 
≤g_°ru˘p
 
dummy_±r
;

1829 
	`Ârötf
(
STDERR
, "\¿Te°ögÜib≤g vîsi⁄ %s\n", 
PNG_LIBPNG_VER_STRING
);

1830 
	`Ârötf
(
STDERR
, " wôh zlib vîsi⁄ %s\n", 
ZLIB_VERSION
);

1831 
	`Ârötf
(
STDERR
, "%s", 
	`≤g_gë_c›yright
(
NULL
));

1833 
	`Ârötf
(
STDERR
, "Üibrary (%lu):%s",

1834 ()
	`≤g_ac˚ss_vîsi⁄_numbî
(),

1835 
	`≤g_gë_hódî_vîsi⁄
(
NULL
));

1838 
	`Ârötf
(
STDERR
, "Öngã° (%lu):%s", ()
PNG_LIBPNG_VER
,

1839 
PNG_HEADER_VERSION_STRING
);

1846 #i‡
	`deföed
(
MAXSEG_64K
Ë&& !deföed(
PNG_MAX_MALLOC_64K
)

1847 
	`Ârötf
(
STDERR
, " NOTE: Zlib compiled for max 64k,ÜibpngÇot\n");

1850 #i‡!
	`deföed
(
MAXSEG_64K
Ë&& deföed(
PNG_MAX_MALLOC_64K
)

1851 
	`Ârötf
(
STDERR
, " NOTE:Üibpng compiled for max 64k, zlibÇot\n");

1854 i‡(
	`°rcmp
(
≤g_lib≤g_vî
, 
PNG_LIBPNG_VER_STRING
))

1856 
	`Ârötf
(
STDERR
,

1858 
	`Ârötf
(
STDERR
, "Öng.h vîsi⁄: %s\n", 
PNG_LIBPNG_VER_STRING
);

1859 
	`Ârötf
(
STDERR
, "Öng.¯vîsi⁄: %s\n\n", 
≤g_lib≤g_vî
);

1860 ++
õº‹
;

1863 i‡(
¨gc
 > 1)

1865 i‡(
	`°rcmp
(
¨gv
[1], "-m") == 0)

1867 
mu…ùÀ
 = 1;

1868 
°©us_dŸs_ªque°ed
 = 0;

1871 i‡(
	`°rcmp
(
¨gv
[1], "-mv") == 0 ||

1872 
	`°rcmp
(
¨gv
[1], "-vm") == 0 )

1874 
mu…ùÀ
 = 1;

1875 
vîbo£
 = 1;

1876 
°©us_dŸs_ªque°ed
 = 1;

1879 i‡(
	`°rcmp
(
¨gv
[1], "-v") == 0)

1881 
vîbo£
 = 1;

1882 
°©us_dŸs_ªque°ed
 = 1;

1883 
ö«me
 = 
¨gv
[2];

1886 i‡(
	`°rcmp
(
¨gv
[1], "--strict") == 0)

1888 
°©us_dŸs_ªque°ed
 = 0;

1889 
vîbo£
 = 1;

1890 
ö«me
 = 
¨gv
[2];

1891 
°ri˘
++;

1892 
ªœxed
 = 0;

1893 
mu…ùÀ
=1;

1896 i‡(
	`°rcmp
(
¨gv
[1], "--relaxed") == 0)

1898 
°©us_dŸs_ªque°ed
 = 0;

1899 
vîbo£
 = 1;

1900 
ö«me
 = 
¨gv
[2];

1901 
°ri˘
 = 0;

1902 
ªœxed
++;

1903 
mu…ùÀ
=1;

1905 i‡(
	`°rcmp
(
¨gv
[1], "--xfail") == 0)

1907 
°©us_dŸs_ªque°ed
 = 0;

1908 
vîbo£
 = 1;

1909 
ö«me
 = 
¨gv
[2];

1910 
°ri˘
 = 0;

1911 
xÁû
++;

1912 
ªœxed
++;

1913 
mu…ùÀ
=1;

1918 
ö«me
 = 
¨gv
[1];

1919 
°©us_dŸs_ªque°ed
 = 0;

1923 i‡(
mu…ùÀ
 =0 && 
¨gc
 =3 + 
vîbo£
)

1924 
ouäame
 = 
¨gv
[2 + 
vîbo£
];

1926 i‡((
mu…ùÀ
 =0 && 
¨gc
 > 3 + 
vîbo£
) ||

1927 (
mu…ùÀ
 !0 && 
¨gc
 < 2))

1929 
	`Ârötf
(
STDERR
,

1931 
¨gv
[0],árgv[0]);

1932 
	`Ârötf
(
STDERR
,

1934 
	`Ârötf
(
STDERR
,

1935 " wôh -m %†i†u£dá†®ãmp‹¨y fûe\n", 
ouäame
);

1936 
	`exô
(1);

1939 i‡(
mu…ùÀ
 != 0)

1941 
i
;

1942 #i‡
	`deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


1943 
Æloˇti⁄_now
 = 
cuºít_Æloˇti⁄
;

1945 
i
=2; i<
¨gc
; ++i)

1947 
kîr‹
;

1948 
	`Ârötf
(
STDERR
, "\¿Te°ög %s:", 
¨gv
[
i
]);

1949 #i‡
PNG_DEBUG
 > 0

1950 
	`Ârötf
(
STDERR
, "\n");

1952 
kîr‹
 = 
	`ã°_⁄e_fûe
(
¨gv
[
i
], 
ouäame
);

1953 i‡(
kîr‹
 == 0)

1955 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


1956 
	`Ârötf
(
STDERR
, "\n PASS (%lu zero samples)\n",

1957 ()
zîo_ßm∂es
);

1959 
	`Ârötf
(
STDERR
, " PASS\n");

1961 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


1962 i‡(
tIME_chunk_¥e£¡
 != 0)

1963 
	`Ârötf
(
STDERR
, "ÅIME = %s\n", 
tIME_°rög
);

1965 
tIME_chunk_¥e£¡
 = 0;

1971 i‡(
xÁû
)

1972 
	`Ârötf
(
STDERR
, " XFAIL\n");

1975 
	`Ârötf
(
STDERR
, " FAIL\n");

1976 
õº‹
 +
kîr‹
;

1979 #i‡
	`deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


1980 i‡(
Æloˇti⁄_now
 !
cuºít_Æloˇti⁄
)

1981 
	`Ârötf
(
STDERR
, "MEMORY ERROR: %d bytesÜost\n",

1982 
cuºít_Æloˇti⁄
 - 
Æloˇti⁄_now
);

1984 i‡(
cuºít_Æloˇti⁄
 != 0)

1986 
mem‹y_öf›
 
pöfo
 = 
pöf‹m©i⁄
;

1988 
	`Ârötf
(
STDERR
, "MEMORY ERROR: %d bytes stillállocated\n",

1989 
cuºít_Æloˇti⁄
);

1991 
pöfo
 !
NULL
)

1993 
	`Ârötf
(
STDERR
, " %lu bytesát %p\n",

1994 ()
pöfo
->
size
,

1995 
pöfo
->
poöãr
);

1996 
pöfo
 =Ööfo->
√xt
;

2001 #i‡
	`deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


2002 
	`Ârötf
(
STDERR
, " Current memoryállocation: %10d bytes\n",

2003 
cuºít_Æloˇti⁄
);

2004 
	`Ârötf
(
STDERR
, " Maximum memoryállocation: %10d bytes\n",

2005 
maximum_Æloˇti⁄
);

2006 
	`Ârötf
(
STDERR
, " Total memoryállocation: %10d bytes\n",

2007 
tŸÆ_Æloˇti⁄
);

2008 
	`Ârötf
(
STDERR
, " Number ofállocations: %10d\n",

2009 
num_Æloˇti⁄s
);

2015 
i
;

2016 
i
 = 0; i<3; ++i)

2018 
kîr‹
;

2019 #i‡
	`deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


2020 
Æloˇti⁄_now
 = 
cuºít_Æloˇti⁄
;

2022 i‡(
i
 == 1)

2023 
°©us_dŸs_ªque°ed
 = 1;

2025 i‡(
vîbo£
 == 0)

2026 
°©us_dŸs_ªque°ed
 = 0;

2028 i‡(
i
 =0 || 
vîbo£
 =1 || 
õº‹
 != 0)

2030 
	`Ârötf
(
STDERR
, "\¿Te°ög %s:", 
ö«me
);

2031 #i‡
PNG_DEBUG
 > 0

2032 
	`Ârötf
(
STDERR
, "\n");

2036 
kîr‹
 = 
	`ã°_⁄e_fûe
(
ö«me
, 
ouäame
);

2038 i‡(
kîr‹
 == 0)

2040 i‡(
vîbo£
 =1 || 
i
 == 2)

2042 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


2043 
	`Ârötf
(
STDERR
, "\n PASS (%lu zero samples)\n",

2044 ()
zîo_ßm∂es
);

2046 
	`Ârötf
(
STDERR
, " PASS\n");

2048 #ifde‡
PNG_TIME_RFC1123_SUPPORTED


2049 i‡(
tIME_chunk_¥e£¡
 != 0)

2050 
	`Ârötf
(
STDERR
, "ÅIME = %s\n", 
tIME_°rög
);

2057 i‡(
vîbo£
 =0 && 
i
 != 2)

2059 
	`Ârötf
(
STDERR
, "\¿Te°ög %s:", 
ö«me
);

2060 #i‡
PNG_DEBUG
 > 0

2061 
	`Ârötf
(
STDERR
, "\n");

2065 i‡(
xÁû
)

2066 
	`Ârötf
(
STDERR
, " XFAIL\n");

2069 
	`Ârötf
(
STDERR
, " FAIL\n");

2070 
õº‹
 +
kîr‹
;

2073 #i‡
	`deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


2074 i‡(
Æloˇti⁄_now
 !
cuºít_Æloˇti⁄
)

2075 
	`Ârötf
(
STDERR
, "MEMORY ERROR: %d bytesÜost\n",

2076 
cuºít_Æloˇti⁄
 - 
Æloˇti⁄_now
);

2078 i‡(
cuºít_Æloˇti⁄
 != 0)

2080 
mem‹y_öf›
 
pöfo
 = 
pöf‹m©i⁄
;

2082 
	`Ârötf
(
STDERR
, "MEMORY ERROR: %d bytes stillállocated\n",

2083 
cuºít_Æloˇti⁄
);

2085 
pöfo
 !
NULL
)

2087 
	`Ârötf
(
STDERR
, " %lu bytesát %p\n",

2088 ()
pöfo
->
size
,Ööfo->
poöãr
);

2089 
pöfo
 =Ööfo->
√xt
;

2094 #i‡
	`deföed
(
PNG_USER_MEM_SUPPORTED
Ë&& 
PNG_DEBUG


2095 
	`Ârötf
(
STDERR
, " Current memoryállocation: %10d bytes\n",

2096 
cuºít_Æloˇti⁄
);

2097 
	`Ârötf
(
STDERR
, " Maximum memoryállocation: %10d bytes\n",

2098 
maximum_Æloˇti⁄
);

2099 
	`Ârötf
(
STDERR
, " Total memoryállocation: %10d bytes\n",

2100 
tŸÆ_Æloˇti⁄
);

2101 
	`Ârötf
(
STDERR
, " Number ofállocations: %10d\n",

2102 
num_Æloˇti⁄s
);

2106 #ifde‡
PNGTEST_TIMING


2107 
t_°›
 = ()
	`˛ock
();

2108 
t_misc
 +(
t_°›
 - 
t_°¨t
);

2109 
t_°¨t
 = 
t_°›
;

2110 
	`Ârötf
(
STDERR
, " CPUÅime used = %.3f seconds",

2111 (
t_misc
+
t_decode
+
t_ícode
)/()
CLOCKS_PER_SEC
);

2112 
	`Ârötf
(
STDERR
, " (decoding %.3f,\n",

2113 
t_decode
/()
CLOCKS_PER_SEC
);

2114 
	`Ârötf
(
STDERR
, "Éncoding %.3f ,",

2115 
t_ícode
/()
CLOCKS_PER_SEC
);

2116 
	`Ârötf
(
STDERR
, " other %.3f seconds)\n\n",

2117 
t_misc
/()
CLOCKS_PER_SEC
);

2120 i‡(
õº‹
 == 0)

2121 
	`Ârötf
(
STDERR
, "ÜibpngÖassesÅest\n");

2124 
	`Ârötf
(
STDERR
, "Üibpng FAILSÅest\n");

2126 
dummy_±r
 = 
	`≤g_¸óã_ªad_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
NULL
, NULL, NULL);

2127 
	`Ârötf
(
STDERR
, " DefaultÜimits:\n");

2128 
	`Ârötf
(
STDERR
, " width_max = %lu\n",

2129 (Ë
	`≤g_gë_u£r_width_max
(
dummy_±r
));

2130 
	`Ârötf
(
STDERR
, " height_max = %lu\n",

2131 (Ë
	`≤g_gë_u£r_height_max
(
dummy_±r
));

2132 i‡(
	`≤g_gë_chunk_ˇche_max
(
dummy_±r
) == 0)

2133 
	`Ârötf
(
STDERR
, " cache_max = unlimited\n");

2135 
	`Ârötf
(
STDERR
, " cache_max = %lu\n",

2136 (Ë
	`≤g_gë_chunk_ˇche_max
(
dummy_±r
));

2137 i‡(
	`≤g_gë_chunk_mÆloc_max
(
dummy_±r
) == 0)

2138 
	`Ârötf
(
STDERR
, " malloc_max = unlimited\n");

2140 
	`Ârötf
(
STDERR
, " malloc_max = %lu\n",

2141 (Ë
	`≤g_gë_chunk_mÆloc_max
(
dummy_±r
));

2142 
	`≤g_de°roy_ªad_°ru˘
(&
dummy_±r
, 
NULL
, NULL);

2144  ()(
õº‹
 != 0);

2145 
	}
}

2148 
	$maö
()

2150 
	`Ârötf
(
STDERR
,

2153  
PNG_LIBPNG_VER
 < 10600 ? 0 : 77;

2154 
	}
}

2158 
≤g_lib≤g_vîsi⁄_1_6_38_gô
 
	tYour_≤g_h_is_nŸ_vîsi⁄_1_6_38_gô
;

	@pngtrans.c

14 
	~"≤g¥iv.h
"

16 #i‡
deföed
(
PNG_READ_SUPPORTED
Ë|| deföed(
PNG_WRITE_SUPPORTED
)

18 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

20 
PNGAPI


21 
	$≤g_£t_bgr
(
≤g_°ru˘Ω
 
≤g_±r
)

23 
	`≤g_debug
(1, "inÖng_set_bgr");

25 i‡(
≤g_±r
 =
NULL
)

28 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_BGR
;

29 
	}
}

32 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

34 
PNGAPI


35 
	$≤g_£t_sw≠
(
≤g_°ru˘Ω
 
≤g_±r
)

37 
	`≤g_debug
(1, "inÖng_set_swap");

39 i‡(
≤g_±r
 =
NULL
)

42 i‡(
≤g_±r
->
bô_dïth
 == 16)

43 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_SWAP_BYTES
;

44 
	}
}

47 #i‡
deföed
(
PNG_READ_PACK_SUPPORTED
Ë|| deföed(
PNG_WRITE_PACK_SUPPORTED
)

49 
PNGAPI


50 
	$≤g_£t_∑ckög
(
≤g_°ru˘Ω
 
≤g_±r
)

52 
	`≤g_debug
(1, "inÖng_set_packing");

54 i‡(
≤g_±r
 =
NULL
)

57 i‡(
≤g_±r
->
bô_dïth
 < 8)

59 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_PACK
;

60 #ifde‡
PNG_WRITE_SUPPORTED


61 
≤g_±r
->
u§_bô_dïth
 = 8;

64 
	}
}

67 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
)||deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

69 
PNGAPI


70 
	$≤g_£t_∑cksw≠
(
≤g_°ru˘Ω
 
≤g_±r
)

72 
	`≤g_debug
(1, "inÖng_set_packswap");

74 i‡(
≤g_±r
 =
NULL
)

77 i‡(
≤g_±r
->
bô_dïth
 < 8)

78 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_PACKSWAP
;

79 
	}
}

82 #i‡
deföed
(
PNG_READ_SHIFT_SUPPORTED
Ë|| deföed(
PNG_WRITE_SHIFT_SUPPORTED
)

83 
PNGAPI


84 
	$≤g_£t_shi·
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_cﬁ‹_8p
 
åue_bôs
)

86 
	`≤g_debug
(1, "inÖng_set_shift");

88 i‡(
≤g_±r
 =
NULL
)

91 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_SHIFT
;

92 
≤g_±r
->
shi·
 = *
åue_bôs
;

93 
	}
}

96 #i‡
deföed
(
PNG_READ_INTERLACING_SUPPORTED
) || \

97 
	$deföed
(
PNG_WRITE_INTERLACING_SUPPORTED
)

98 
PNGAPI


99 
	$≤g_£t_öãæa˚_h™dlög
(
≤g_°ru˘Ω
 
≤g_±r
)

101 
	`≤g_debug
(1, "inÖng_set_interlace handling");

103 i‡(
≤g_±r
 !0 &&Öng_±r->
öãæa˚d
 != 0)

105 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_INTERLACE
;

110 
	}
}

113 #i‡
deföed
(
PNG_READ_FILLER_SUPPORTED
Ë|| deföed(
PNG_WRITE_FILLER_SUPPORTED
)

119 
PNGAPI


120 
	$≤g_£t_fûÀr
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
fûÀr
, 
fûÀr_loc
)

122 
	`≤g_debug
(1, "inÖng_set_filler");

124 i‡(
≤g_±r
 =
NULL
)

130 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0)

132 #ifde‡
PNG_READ_FILLER_SUPPORTED


141 
≤g_±r
->
fûÀr
 = (
≤g_uöt_16
)filler;

143 
	`≤g_≠p_îr‹
(
≤g_±r
, "png_set_fillerÇot supported onÑead");

144 
	`PNG_UNUSED
(
fûÀr
)

151 #ifde‡
PNG_WRITE_FILLER_SUPPORTED


155 
≤g_±r
->
cﬁ‹_ty≥
)

157 
PNG_COLOR_TYPE_RGB
:

158 
≤g_±r
->
u§_ch™√ls
 = 4;

161 
PNG_COLOR_TYPE_GRAY
:

162 i‡(
≤g_±r
->
bô_dïth
 >= 8)

164 
≤g_±r
->
u§_ch™√ls
 = 2;

174 
	`≤g_≠p_îr‹
(
≤g_±r
,

181 
	`≤g_≠p_îr‹
(
≤g_±r
,

186 
	`≤g_≠p_îr‹
(
≤g_±r
, "png_set_fillerÇot supported on write");

194 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_FILLER
;

196 i‡(
fûÀr_loc
 =
PNG_FILLER_AFTER
)

197 
≤g_±r
->
Êags
 |
PNG_FLAG_FILLER_AFTER
;

200 
≤g_±r
->
Êags
 &~
PNG_FLAG_FILLER_AFTER
;

201 
	}
}

204 
PNGAPI


205 
	$≤g_£t_add_Æpha
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
fûÀr
, 
fûÀr_loc
)

207 
	`≤g_debug
(1, "inÖng_set_add_alpha");

209 i‡(
≤g_±r
 =
NULL
)

212 
	`≤g_£t_fûÀr
(
≤g_±r
, 
fûÀr
, 
fûÀr_loc
);

214 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_FILLER
) != 0)

215 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_ADD_ALPHA
;

216 
	}
}

220 #i‡
deföed
(
PNG_READ_SWAP_ALPHA_SUPPORTED
) || \

221 
	$deföed
(
PNG_WRITE_SWAP_ALPHA_SUPPORTED
)

222 
PNGAPI


223 
	$≤g_£t_sw≠_Æpha
(
≤g_°ru˘Ω
 
≤g_±r
)

225 
	`≤g_debug
(1, "inÖng_set_swap_alpha");

227 i‡(
≤g_±r
 =
NULL
)

230 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_SWAP_ALPHA
;

231 
	}
}

234 #i‡
deföed
(
PNG_READ_INVERT_ALPHA_SUPPORTED
) || \

235 
	$deföed
(
PNG_WRITE_INVERT_ALPHA_SUPPORTED
)

236 
PNGAPI


237 
	$≤g_£t_övît_Æpha
(
≤g_°ru˘Ω
 
≤g_±r
)

239 
	`≤g_debug
(1, "inÖng_set_invert_alpha");

241 i‡(
≤g_±r
 =
NULL
)

244 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_INVERT_ALPHA
;

245 
	}
}

248 #i‡
deföed
(
PNG_READ_INVERT_SUPPORTED
Ë|| deföed(
PNG_WRITE_INVERT_SUPPORTED
)

249 
PNGAPI


250 
	$≤g_£t_övît_m⁄o
(
≤g_°ru˘Ω
 
≤g_±r
)

252 
	`≤g_debug
(1, "inÖng_set_invert_mono");

254 i‡(
≤g_±r
 =
NULL
)

257 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_INVERT_MONO
;

258 
	}
}

262 
	$≤g_do_övît
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

264 
	`≤g_debug
(1, "inÖng_do_invert");

269 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

271 
≤g_byãp
 
Ω
 = 
row
;

272 
size_t
 
i
;

273 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
;

275 
i
 = 0; i < 
i°›
; i++)

277 *
Ω
 = (
≤g_byã
)(~(*rp));

278 
Ω
++;

282 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
 &&

283 
row_öfo
->
bô_dïth
 == 8)

285 
≤g_byãp
 
Ω
 = 
row
;

286 
size_t
 
i
;

287 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
;

289 
i
 = 0; i < 
i°›
; i += 2)

291 *
Ω
 = (
≤g_byã
)(~(*rp));

292 
Ω
 += 2;

296 #ifde‡
PNG_16BIT_SUPPORTED


297 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
 &&

298 
row_öfo
->
bô_dïth
 == 16)

300 
≤g_byãp
 
Ω
 = 
row
;

301 
size_t
 
i
;

302 
size_t
 
i°›
 = 
row_öfo
->
rowbyãs
;

304 
i
 = 0; i < 
i°›
; i += 4)

306 *
Ω
 = (
≤g_byã
)(~(*rp));

307 *(
Ω
 + 1Ë(
≤g_byã
)(~(*(rp + 1)));

308 
Ω
 += 4;

312 
	}
}

315 #ifde‡
PNG_16BIT_SUPPORTED


316 #i‡
deföed
(
PNG_READ_SWAP_SUPPORTED
Ë|| deföed(
PNG_WRITE_SWAP_SUPPORTED
)

319 
	$≤g_do_sw≠
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

321 
	`≤g_debug
(1, "inÖng_do_swap");

323 i‡(
row_öfo
->
bô_dïth
 == 16)

325 
≤g_byãp
 
Ω
 = 
row
;

326 
≤g_uöt_32
 
i
;

327 
≤g_uöt_32
 
i°›

row_öfo
->
width
 *Ñow_öfo->
ch™√ls
;

329 
i
 = 0; i < 
i°›
; i++, 
Ω
 += 2)

331 #ifde‡
PNG_BUILTIN_BSWAP16_SUPPORTED


335 *(
≤g_uöt_16
*)
Ω
 = 
	`__buûtö_bsw≠16
(*(png_uint_16*)rp);

337 
≤g_byã
 
t
 = *
Ω
;

338 *
Ω
 = *(rp + 1);

339 *(
Ω
 + 1Ë
t
;

343 
	}
}

347 #i‡
deföed
(
PNG_READ_PACKSWAP_SUPPORTED
)||deföed(
PNG_WRITE_PACKSWAP_SUPPORTED
)

348 c⁄° 
≤g_byã
 
	g⁄ebµsw≠èbÀ
[256] = {

383 c⁄° 
≤g_byã
 
	gtwobµsw≠èbÀ
[256] = {

418 c⁄° 
≤g_byã
 
	gfourbµsw≠èbÀ
[256] = {

455 
	$≤g_do_∑cksw≠
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

457 
	`≤g_debug
(1, "inÖng_do_packswap");

459 i‡(
row_öfo
->
bô_dïth
 < 8)

461 
≤g_byãp
 
Ω
;

462 
≤g_c⁄°_byãp
 
íd
, 
èbÀ
;

464 
íd
 = 
row
 + 
row_öfo
->
rowbyãs
;

466 i‡(
row_öfo
->
bô_dïth
 == 1)

467 
èbÀ
 = 
⁄ebµsw≠èbÀ
;

469 i‡(
row_öfo
->
bô_dïth
 == 2)

470 
èbÀ
 = 
twobµsw≠èbÀ
;

472 i‡(
row_öfo
->
bô_dïth
 == 4)

473 
èbÀ
 = 
fourbµsw≠èbÀ
;

478 
Ω
 = 
row
;Ñ∞< 
íd
;Ñp++)

479 *
Ω
 = 
èbÀ
[*rp];

481 
	}
}

484 #i‡
deföed
(
PNG_WRITE_FILLER_SUPPORTED
) || \

485 
	$deföed
(
PNG_READ_STRIP_ALPHA_SUPPORTED
)

495 
	$≤g_do_°rù_ch™√l
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
, 
©_°¨t
)

497 
≤g_byãp
 
•
 = 
row
;

498 
≤g_byãp
 
dp
 = 
row
;

499 
≤g_byãp
 
ï
 = 
row
 + 
row_öfo
->
rowbyãs
;

510 i‡(
row_öfo
->
ch™√ls
 == 2)

512 i‡(
row_öfo
->
bô_dïth
 == 8)

514 i‡(
©_°¨t
 != 0)

515 ++
•
;

518 
•
 +2; ++
dp
;

522 
•
 < 
ï
)

524 *
dp
++ = *
•
; sp += 2;

527 
row_öfo
->
pixñ_dïth
 = 8;

530 i‡(
row_öfo
->
bô_dïth
 == 16)

532 i‡(
©_°¨t
 != 0)

533 
•
 += 2;

536 
•
 +4; 
dp
 += 2;

539 
•
 < 
ï
)

541 *
dp
++ = *
•
++; *dp++ = *sp; sp += 3;

544 
row_öfo
->
pixñ_dïth
 = 16;

550 
row_öfo
->
ch™√ls
 = 1;

553 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

554 
row_öfo
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_GRAY
;

558 i‡(
row_öfo
->
ch™√ls
 == 4)

560 i‡(
row_öfo
->
bô_dïth
 == 8)

562 i‡(
©_°¨t
 != 0)

563 ++
•
;

566 
•
 +4; 
dp
 += 3;

570 
•
 < 
ï
)

572 *
dp
++ = *
•
++; *dp++ = *sp++; *dp++ = *sp; sp += 2;

575 
row_öfo
->
pixñ_dïth
 = 24;

578 i‡(
row_öfo
->
bô_dïth
 == 16)

580 i‡(
©_°¨t
 != 0)

581 
•
 += 2;

584 
•
 +8; 
dp
 += 6;

587 
•
 < 
ï
)

590 *
dp
++ = *
•
++; *dp++ = *sp++;

591 *
dp
++ = *
•
++; *dp++ = *sp++;

592 *
dp
++ = *
•
++; *dp++ = *sp; sp += 3;

595 
row_öfo
->
pixñ_dïth
 = 48;

601 
row_öfo
->
ch™√ls
 = 3;

604 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

605 
row_öfo
->
cﬁ‹_ty≥
 = 
PNG_COLOR_TYPE_RGB
;

612 
row_öfo
->
rowbyãs
 = (
size_t
)(
dp
-
row
);

613 
	}
}

616 #i‡
deföed
(
PNG_READ_BGR_SUPPORTED
Ë|| deföed(
PNG_WRITE_BGR_SUPPORTED
)

619 
	$≤g_do_bgr
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

621 
	`≤g_debug
(1, "inÖng_do_bgr");

623 i‡((
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

625 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

626 i‡(
row_öfo
->
bô_dïth
 == 8)

628 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

630 
≤g_byãp
 
Ω
;

631 
≤g_uöt_32
 
i
;

633 
i
 = 0, 
Ω
 = 
row
; i < 
row_width
; i++,Ñp += 3)

635 
≤g_byã
 
ßve
 = *
Ω
;

636 *
Ω
 = *(rp + 2);

637 *(
Ω
 + 2Ë
ßve
;

641 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

643 
≤g_byãp
 
Ω
;

644 
≤g_uöt_32
 
i
;

646 
i
 = 0, 
Ω
 = 
row
; i < 
row_width
; i++,Ñp += 4)

648 
≤g_byã
 
ßve
 = *
Ω
;

649 *
Ω
 = *(rp + 2);

650 *(
Ω
 + 2Ë
ßve
;

655 #ifde‡
PNG_16BIT_SUPPORTED


656 i‡(
row_öfo
->
bô_dïth
 == 16)

658 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

660 
≤g_byãp
 
Ω
;

661 
≤g_uöt_32
 
i
;

663 
i
 = 0, 
Ω
 = 
row
; i < 
row_width
; i++,Ñp += 6)

665 
≤g_byã
 
ßve
 = *
Ω
;

666 *
Ω
 = *(rp + 4);

667 *(
Ω
 + 4Ë
ßve
;

668 
ßve
 = *(
Ω
 + 1);

669 *(
Ω
 + 1) = *(rp + 5);

670 *(
Ω
 + 5Ë
ßve
;

674 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

676 
≤g_byãp
 
Ω
;

677 
≤g_uöt_32
 
i
;

679 
i
 = 0, 
Ω
 = 
row
; i < 
row_width
; i++,Ñp += 8)

681 
≤g_byã
 
ßve
 = *
Ω
;

682 *
Ω
 = *(rp + 4);

683 *(
Ω
 + 4Ë
ßve
;

684 
ßve
 = *(
Ω
 + 1);

685 *(
Ω
 + 1) = *(rp + 5);

686 *(
Ω
 + 5Ë
ßve
;

692 
	}
}

695 #i‡
deföed
(
PNG_READ_CHECK_FOR_INVALID_INDEX_SUPPORTED
) || \

696 
	$deföed
(
PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED
)

699 
	$≤g_do_check_∑Àâe_ödexes
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
)

701 i‡(
≤g_±r
->
num_∑Àâe
 < (1 << 
row_öfo
->
bô_dïth
) &&

702 
≤g_±r
->
num_∑Àâe
 > 0)

710 
∑ddög
 = 
	`PNG_PADBITS
(
row_öfo
->
pixñ_dïth
,Ñow_öfo->
width
);

711 
≤g_byãp
 
Ω
 = 
≤g_±r
->
row_buf
 + 
row_öfo
->
rowbyãs
 - 1;

713 
row_öfo
->
bô_dïth
)

720 ; 
Ω
 > 
≤g_±r
->
row_buf
;Ñp--)

722 i‡((*
Ω
 >> 
∑ddög
) != 0)

723 
≤g_±r
->
num_∑Àâe_max
 = 1;

724 
∑ddög
 = 0;

732 ; 
Ω
 > 
≤g_±r
->
row_buf
;Ñp--)

734 
i
 = ((*
Ω
 >> 
∑ddög
) & 0x03);

736 i‡(
i
 > 
≤g_±r
->
num_∑Àâe_max
)

737 
≤g_±r
->
num_∑Àâe_max
 = 
i
;

739 
i
 = (((*
Ω
 >> 
∑ddög
) >> 2) & 0x03);

741 i‡(
i
 > 
≤g_±r
->
num_∑Àâe_max
)

742 
≤g_±r
->
num_∑Àâe_max
 = 
i
;

744 
i
 = (((*
Ω
 >> 
∑ddög
) >> 4) & 0x03);

746 i‡(
i
 > 
≤g_±r
->
num_∑Àâe_max
)

747 
≤g_±r
->
num_∑Àâe_max
 = 
i
;

749 
i
 = (((*
Ω
 >> 
∑ddög
) >> 6) & 0x03);

751 i‡(
i
 > 
≤g_±r
->
num_∑Àâe_max
)

752 
≤g_±r
->
num_∑Àâe_max
 = 
i
;

754 
∑ddög
 = 0;

762 ; 
Ω
 > 
≤g_±r
->
row_buf
;Ñp--)

764 
i
 = ((*
Ω
 >> 
∑ddög
) & 0x0f);

766 i‡(
i
 > 
≤g_±r
->
num_∑Àâe_max
)

767 
≤g_±r
->
num_∑Àâe_max
 = 
i
;

769 
i
 = (((*
Ω
 >> 
∑ddög
) >> 4) & 0x0f);

771 i‡(
i
 > 
≤g_±r
->
num_∑Àâe_max
)

772 
≤g_±r
->
num_∑Àâe_max
 = 
i
;

774 
∑ddög
 = 0;

782 ; 
Ω
 > 
≤g_±r
->
row_buf
;Ñp--)

784 i‡(*
Ω
 > 
≤g_±r
->
num_∑Àâe_max
)

785 
≤g_±r
->
num_∑Àâe_max
 = (Ë*
Ω
;

795 
	}
}

798 #i‡
deföed
(
PNG_READ_USER_TRANSFORM_SUPPORTED
) || \

799 
	$deföed
(
PNG_WRITE_USER_TRANSFORM_SUPPORTED
)

800 #ifde‡
PNG_USER_TRANSFORM_PTR_SUPPORTED


801 
PNGAPI


802 
	$≤g_£t_u£r_å™sf‹m_öfo
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp


803 
u£r_å™sf‹m_±r
, 
u£r_å™sf‹m_dïth
, 
u£r_å™sf‹m_ch™√ls
)

805 
	`≤g_debug
(1, "inÖng_set_user_transform_info");

807 i‡(
≤g_±r
 =
NULL
)

810 #ifde‡
PNG_READ_USER_TRANSFORM_SUPPORTED


811 i‡((
≤g_±r
->
mode
 & 
PNG_IS_READ_STRUCT
) != 0 &&

812 (
≤g_±r
->
Êags
 & 
PNG_FLAG_ROW_INIT
) != 0)

814 
	`≤g_≠p_îr‹
(
≤g_±r
,

820 
≤g_±r
->
u£r_å™sf‹m_±r
 = user_transform_ptr;

821 
≤g_±r
->
u£r_å™sf‹m_dïth
 = (
≤g_byã
)user_transform_depth;

822 
≤g_±r
->
u£r_å™sf‹m_ch™√ls
 = (
≤g_byã
)user_transform_channels;

823 
	}
}

831 #ifde‡
PNG_USER_TRANSFORM_PTR_SUPPORTED


832 
≤g_voidp
 
PNGAPI


833 
	$≤g_gë_u£r_å™sf‹m_±r
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

835 i‡(
≤g_±r
 =
NULL
)

836  (
NULL
);

838  
≤g_±r
->
u£r_å™sf‹m_±r
;

839 
	}
}

842 #ifde‡
PNG_USER_TRANSFORM_INFO_SUPPORTED


843 
≤g_uöt_32
 
PNGAPI


844 
	$≤g_gë_cuºít_row_numbî
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

849 i‡(
≤g_±r
 !
NULL
)

850  
≤g_±r
->
row_numbî
;

852  
PNG_UINT_32_MAX
;

853 
	}
}

855 
≤g_byã
 
PNGAPI


856 
	$≤g_gë_cuºít_∑ss_numbî
(
≤g_c⁄°_°ru˘Ω
 
≤g_±r
)

858 i‡(
≤g_±r
 !
NULL
)

859  
≤g_±r
->
∑ss
;

861 
	}
}

	@pngwio.c

21 
	~"≤g¥iv.h
"

23 #ifde‡
PNG_WRITE_SUPPORTED


33 
	$≤g_wrôe_d©a
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
d©a
, 
size_t
 
Àngth
)

36 i‡(
≤g_±r
->
wrôe_d©a_‚
 !
NULL
 )

37 (*(
≤g_±r
->
wrôe_d©a_‚
))’ng_±r, 
	`≤g_c⁄°ˇ°
(
≤g_byãp
,
d©a
),

38 
Àngth
);

41 
	`≤g_îr‹
(
≤g_±r
, "CallÅo NULL write function");

42 
	}
}

44 #ifde‡
PNG_STDIO_SUPPORTED


50 
PNGCBAPI


51 
	$≤g_deÁu…_wrôe_d©a
(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
Àngth
)

53 
size_t
 
check
;

55 i‡(
≤g_±r
 =
NULL
)

58 
check
 = 
	`fwrôe
(
d©a
, 1, 
Àngth
, (
≤g_FILE_p
)(
≤g_±r
->
io_±r
));

60 i‡(
check
 !
Àngth
)

61 
	`≤g_îr‹
(
≤g_±r
, "Write Error");

62 
	}
}

69 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


71 
	$≤g_Êush
(
≤g_°ru˘Ω
 
≤g_±r
)

73 i‡(
≤g_±r
->
ouçut_Êush_‚
 !
NULL
)

74 (*(
≤g_±r
->
ouçut_Êush_‚
))(png_ptr);

75 
	}
}

77 #ifde‡
PNG_STDIO_SUPPORTED


78 
PNGCBAPI


79 
	$≤g_deÁu…_Êush
(
≤g_°ru˘p
 
≤g_±r
)

81 
≤g_FILE_p
 
io_±r
;

83 i‡(
≤g_±r
 =
NULL
)

86 
io_±r
 = 
	`≤g_voidˇ°
(
≤g_FILE_p
, (
≤g_±r
->io_ptr));

87 
	`fÊush
(
io_±r
);

88 
	}
}

121 
PNGAPI


122 
	$≤g_£t_wrôe_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_voidp
 
io_±r
,

123 
≤g_rw_±r
 
wrôe_d©a_‚
, 
≤g_Êush_±r
 
ouçut_Êush_‚
)

125 i‡(
≤g_±r
 =
NULL
)

128 
≤g_±r
->
io_±r
 = io_ptr;

130 #ifde‡
PNG_STDIO_SUPPORTED


131 i‡(
wrôe_d©a_‚
 !
NULL
)

132 
≤g_±r
->
wrôe_d©a_‚
 = write_data_fn;

135 
≤g_±r
->
wrôe_d©a_‚
 = 
≤g_deÁu…_wrôe_d©a
;

137 
≤g_±r
->
wrôe_d©a_‚
 = write_data_fn;

140 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


141 #ifde‡
PNG_STDIO_SUPPORTED


143 i‡(
ouçut_Êush_‚
 !
NULL
)

144 
≤g_±r
->
ouçut_Êush_‚
 = output_flush_fn;

147 
≤g_±r
->
ouçut_Êush_‚
 = 
≤g_deÁu…_Êush
;

150 
≤g_±r
->
ouçut_Êush_‚
 = output_flush_fn;

153 
	`PNG_UNUSED
(
ouçut_Êush_‚
)

156 #ifde‡
PNG_READ_SUPPORTED


158 i‡(
≤g_±r
->
ªad_d©a_‚
 !
NULL
)

160 
≤g_±r
->
ªad_d©a_‚
 = 
NULL
;

162 
	`≤g_w¨nög
(
≤g_±r
,

167 
	}
}

	@pngwrite.c

14 
	~"≤g¥iv.h
"

15 #ifde‡
PNG_SIMPLIFIED_WRITE_STDIO_SUPPORTED


16 
	~<î∫o.h
>

19 #ifde‡
PNG_WRITE_SUPPORTED


21 #ifde‡
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


24 
	$wrôe_unknown_chunks
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
,

25 
whîe
)

27 i‡(
öfo_±r
->
unknown_chunks_num
 != 0)

29 
≤g_c⁄°_unknown_chunkp
 
up
;

31 
	`≤g_debug
(5, "writingÉxtra chunks");

33 
up
 = 
öfo_±r
->
unknown_chunks
;

34 
up
 < 
öfo_±r
->
unknown_chunks
 + info_±r->
unknown_chunks_num
;

35 ++
up
)

36 i‡((
up
->
loˇti⁄
 & 
whîe
) != 0)

41 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


42 
kìp
 = 
	`≤g_h™dÀ_as_unknown
(
≤g_±r
, 
up
->
«me
);

56 i‡(
kìp
 !
PNG_HANDLE_CHUNK_NEVER
 &&

57 ((
up
->
«me
[3] & 0x20) ||

58 
kìp
 =
PNG_HANDLE_CHUNK_ALWAYS
 ||

59 (
kìp
 =
PNG_HANDLE_CHUNK_AS_DEFAULT
 &&

60 
≤g_±r
->
unknown_deÁu…
 =
PNG_HANDLE_CHUNK_ALWAYS
)))

64 i‡(
up
->
size
 == 0)

65 
	`≤g_w¨nög
(
≤g_±r
, "Writing zero-length unknown chunk");

67 
	`≤g_wrôe_chunk
(
≤g_±r
, 
up
->
«me
, up->
d©a
, up->
size
);

71 
	}
}

83 
PNGAPI


84 
	$≤g_wrôe_öfo_bef‹e_PLTE
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

86 
	`≤g_debug
(1, "inÖng_write_info_before_PLTE");

88 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

91 i‡((
≤g_±r
->
mode
 & 
PNG_WROTE_INFO_BEFORE_PLTE
) == 0)

94 
	`≤g_wrôe_sig
(
≤g_±r
);

96 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


97 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_PNG_SIGNATURE
) != 0 && \

98 
≤g_±r
->
mng_„©uªs_≥rmôãd
 != 0)

100 
	`≤g_w¨nög
(
≤g_±r
,

102 
≤g_±r
->
mng_„©uªs_≥rmôãd
 = 0;

107 
	`≤g_wrôe_IHDR
(
≤g_±r
, 
öfo_±r
->
width
, info_±r->
height
,

108 
öfo_±r
->
bô_dïth
, info_±r->
cﬁ‹_ty≥
, info_±r->
com¥essi⁄_ty≥
,

109 
öfo_±r
->
fûãr_ty≥
,

110 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


111 
öfo_±r
->
öãæa˚_ty≥


131 #ifde‡
PNG_GAMMA_SUPPORTED


132 #ifde‡
PNG_WRITE_gAMA_SUPPORTED


133 i‡((
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_INVALID
) == 0 &&

134 (
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_FROM_gAMA
) != 0 &&

135 (
öfo_±r
->
vÆid
 & 
PNG_INFO_gAMA
) != 0)

136 
	`≤g_wrôe_gAMA_fixed
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
gamma
);

140 #ifde‡
PNG_COLORSPACE_SUPPORTED


144 #ifde‡
PNG_WRITE_iCCP_SUPPORTED


145 i‡((
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_INVALID
) == 0 &&

146 (
öfo_±r
->
vÆid
 & 
PNG_INFO_iCCP
) != 0)

148 #ifde‡
PNG_WRITE_sRGB_SUPPORTED


149 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_sRGB
) != 0)

150 
	`≤g_≠p_w¨nög
(
≤g_±r
,

154 
	`≤g_wrôe_iCCP
(
≤g_±r
, 
öfo_±r
->
ic˝_«me
,

155 
öfo_±r
->
ic˝_¥ofûe
);

157 #ifde‡
PNG_WRITE_sRGB_SUPPORTED


162 #ifde‡
PNG_WRITE_sRGB_SUPPORTED


163 i‡((
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_INVALID
) == 0 &&

164 (
öfo_±r
->
vÆid
 & 
PNG_INFO_sRGB
) != 0)

165 
	`≤g_wrôe_sRGB
(
≤g_±r
, 
öfo_±r
->
cﬁ‹•a˚
.
ªndîög_öã¡
);

169 #ifde‡
PNG_WRITE_sBIT_SUPPORTED


170 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_sBIT
) != 0)

171 
	`≤g_wrôe_sBIT
(
≤g_±r
, &(
öfo_±r
->
sig_bô
), info_±r->
cﬁ‹_ty≥
);

174 #ifde‡
PNG_COLORSPACE_SUPPORTED


175 #ifde‡
PNG_WRITE_cHRM_SUPPORTED


176 i‡((
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_INVALID
) == 0 &&

177 (
öfo_±r
->
cﬁ‹•a˚
.
Êags
 & 
PNG_COLORSPACE_FROM_cHRM
) != 0 &&

178 (
öfo_±r
->
vÆid
 & 
PNG_INFO_cHRM
) != 0)

179 
	`≤g_wrôe_cHRM_fixed
(
≤g_±r
, &
öfo_±r
->
cﬁ‹•a˚
.
íd_poöts_xy
);

183 #ifde‡
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


184 
	`wrôe_unknown_chunks
(
≤g_±r
, 
öfo_±r
, 
PNG_HAVE_IHDR
);

187 
≤g_±r
->
mode
 |
PNG_WROTE_INFO_BEFORE_PLTE
;

189 
	}
}

191 
PNGAPI


192 
	$≤g_wrôe_öfo
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_öf‹p
 
öfo_±r
)

194 #i‡
	`deföed
(
PNG_WRITE_TEXT_SUPPORTED
Ë|| deföed(
PNG_WRITE_sPLT_SUPPORTED
)

195 
i
;

198 
	`≤g_debug
(1, "inÖng_write_info");

200 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

203 
	`≤g_wrôe_öfo_bef‹e_PLTE
(
≤g_±r
, 
öfo_±r
);

205 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_PLTE
) != 0)

206 
	`≤g_wrôe_PLTE
(
≤g_±r
, 
öfo_±r
->
∑Àâe
,

207 (
≤g_uöt_32
)
öfo_±r
->
num_∑Àâe
);

209 i‡(
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

210 
	`≤g_îr‹
(
≤g_±r
, "ValidÖaletteÑequired forÖaletted images");

212 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


213 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_tRNS
) !=0)

215 #ifde‡
PNG_WRITE_INVERT_ALPHA_SUPPORTED


217 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INVERT_ALPHA
) != 0 &&

218 
öfo_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

220 
j
, 
jíd
;

222 
jíd
 = 
öfo_±r
->
num_å™s
;

223 i‡(
jíd
 > 
PNG_MAX_PALETTE_LENGTH
)

224 
jíd
 = 
PNG_MAX_PALETTE_LENGTH
;

226 
j
 = 0; j<
jíd
; ++j)

227 
öfo_±r
->
å™s_Æpha
[
j
] =

228 (
≤g_byã
)(255 - 
öfo_±r
->
å™s_Æpha
[
j
]);

231 
	`≤g_wrôe_tRNS
(
≤g_±r
, 
öfo_±r
->
å™s_Æpha
, &(öfo_±r->
å™s_cﬁ‹
),

232 
öfo_±r
->
num_å™s
, info_±r->
cﬁ‹_ty≥
);

235 #ifde‡
PNG_WRITE_bKGD_SUPPORTED


236 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_bKGD
) != 0)

237 
	`≤g_wrôe_bKGD
(
≤g_±r
, &(
öfo_±r
->
background
), info_±r->
cﬁ‹_ty≥
);

240 #ifde‡
PNG_WRITE_eXIf_SUPPORTED


241 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_eXIf
) != 0)

242 
	`≤g_wrôe_eXIf
(
≤g_±r
, 
öfo_±r
->
exif
, info_±r->
num_exif
);

245 #ifde‡
PNG_WRITE_hIST_SUPPORTED


246 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_hIST
) != 0)

247 
	`≤g_wrôe_hIST
(
≤g_±r
, 
öfo_±r
->
hi°
, info_±r->
num_∑Àâe
);

250 #ifde‡
PNG_WRITE_oFFs_SUPPORTED


251 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_oFFs
) != 0)

252 
	`≤g_wrôe_oFFs
(
≤g_±r
, 
öfo_±r
->
x_off£t
, info_±r->
y_off£t
,

253 
öfo_±r
->
off£t_unô_ty≥
);

256 #ifde‡
PNG_WRITE_pCAL_SUPPORTED


257 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_pCAL
) != 0)

258 
	`≤g_wrôe_pCAL
(
≤g_±r
, 
öfo_±r
->
pˇl_puΩo£
, info_±r->
pˇl_X0
,

259 
öfo_±r
->
pˇl_X1
, info_±r->
pˇl_ty≥
, info_±r->
pˇl_≈¨ams
,

260 
öfo_±r
->
pˇl_unôs
, info_±r->
pˇl_∑øms
);

263 #ifde‡
PNG_WRITE_sCAL_SUPPORTED


264 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_sCAL
) != 0)

265 
	`≤g_wrôe_sCAL_s
(
≤g_±r
, ()
öfo_±r
->
sˇl_unô
,

266 
öfo_±r
->
sˇl_s_width
, info_±r->
sˇl_s_height
);

269 #ifde‡
PNG_WRITE_pHYs_SUPPORTED


270 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_pHYs
) != 0)

271 
	`≤g_wrôe_pHYs
(
≤g_±r
, 
öfo_±r
->
x_pixñs_≥r_unô
,

272 
öfo_±r
->
y_pixñs_≥r_unô
, info_±r->
phys_unô_ty≥
);

275 #ifde‡
PNG_WRITE_tIME_SUPPORTED


276 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_tIME
) != 0)

278 
	`≤g_wrôe_tIME
(
≤g_±r
, &(
öfo_±r
->
mod_time
));

279 
≤g_±r
->
mode
 |
PNG_WROTE_tIME
;

283 #ifde‡
PNG_WRITE_sPLT_SUPPORTED


284 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_sPLT
) != 0)

285 
i
 = 0; i < ()
öfo_±r
->
•…_∑Àâes_num
; i++)

286 
	`≤g_wrôe_sPLT
(
≤g_±r
, 
öfo_±r
->
•…_∑Àâes
 + 
i
);

289 #ifde‡
PNG_WRITE_TEXT_SUPPORTED


291 
i
 = 0; i < 
öfo_±r
->
num_ãxt
; i++)

293 
	`≤g_debug2
(2, "Wrôög hódîÅexàchunk %d,Åy≥ %d", 
i
,

294 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
);

296 i‡(
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 > 0)

298 #ifde‡
PNG_WRITE_iTXt_SUPPORTED


300 
	`≤g_wrôe_iTXt
(
≤g_±r
,

301 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
,

302 
öfo_±r
->
ãxt
[
i
].
key
,

303 
öfo_±r
->
ãxt
[
i
].
œng
,

304 
öfo_±r
->
ãxt
[
i
].
œng_key
,

305 
öfo_±r
->
ãxt
[
i
].text);

307 i‡(
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 =
PNG_TEXT_COMPRESSION_NONE
)

308 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE_WR
;

310 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_zTXt_WR
;

312 
	`≤g_w¨nög
(
≤g_±r
, "UnableÅo write internationalÅext");

317 i‡(
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 =
PNG_TEXT_COMPRESSION_zTXt
)

319 #ifde‡
PNG_WRITE_zTXt_SUPPORTED


321 
	`≤g_wrôe_zTXt
(
≤g_±r
, 
öfo_±r
->
ãxt
[
i
].
key
,

322 
öfo_±r
->
ãxt
[
i
].ãxt, info_±r->ãxt[i].
com¥essi⁄
);

324 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_zTXt_WR
;

326 
	`≤g_w¨nög
(
≤g_±r
, "UnableÅo write compressedÅext");

330 i‡(
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 =
PNG_TEXT_COMPRESSION_NONE
)

332 #ifde‡
PNG_WRITE_tEXt_SUPPORTED


334 
	`≤g_wrôe_tEXt
(
≤g_±r
, 
öfo_±r
->
ãxt
[
i
].
key
,

335 
öfo_±r
->
ãxt
[
i
].text,

338 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE_WR
;

341 
	`≤g_w¨nög
(
≤g_±r
, "UnableÅo write uncompressedÅext");

347 #ifde‡
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


348 
	`wrôe_unknown_chunks
(
≤g_±r
, 
öfo_±r
, 
PNG_HAVE_PLTE
);

350 
	}
}

357 
PNGAPI


358 
	$≤g_wrôe_íd
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
)

360 
	`≤g_debug
(1, "inÖng_write_end");

362 i‡(
≤g_±r
 =
NULL
)

365 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) == 0)

366 
	`≤g_îr‹
(
≤g_±r
, "No IDATs written into file");

368 #ifde‡
PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED


369 i‡(
≤g_±r
->
num_∑Àâe_max
 >Öng_±r->
num_∑Àâe
)

370 
	`≤g_bíign_îr‹
(
≤g_±r
, "WroteÖalette indexÉxceedingÇum_palette");

374 i‡(
öfo_±r
 !
NULL
)

376 #ifde‡
PNG_WRITE_TEXT_SUPPORTED


377 
i
;

379 #ifde‡
PNG_WRITE_tIME_SUPPORTED


381 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_tIME
) != 0 &&

382 (
≤g_±r
->
mode
 & 
PNG_WROTE_tIME
) == 0)

383 
	`≤g_wrôe_tIME
(
≤g_±r
, &(
öfo_±r
->
mod_time
));

386 #ifde‡
PNG_WRITE_TEXT_SUPPORTED


388 
i
 = 0; i < 
öfo_±r
->
num_ãxt
; i++)

390 
	`≤g_debug2
(2, "WrôögÅøûîÅexàchunk %d,Åy≥ %d", 
i
,

391 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
);

393 i‡(
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 > 0)

395 #ifde‡
PNG_WRITE_iTXt_SUPPORTED


397 
	`≤g_wrôe_iTXt
(
≤g_±r
,

398 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
,

399 
öfo_±r
->
ãxt
[
i
].
key
,

400 
öfo_±r
->
ãxt
[
i
].
œng
,

401 
öfo_±r
->
ãxt
[
i
].
œng_key
,

402 
öfo_±r
->
ãxt
[
i
].text);

404 i‡(
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 =
PNG_TEXT_COMPRESSION_NONE
)

405 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE_WR
;

407 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_zTXt_WR
;

409 
	`≤g_w¨nög
(
≤g_±r
, "UnableÅo write internationalÅext");

413 i‡(
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 >
PNG_TEXT_COMPRESSION_zTXt
)

415 #ifde‡
PNG_WRITE_zTXt_SUPPORTED


417 
	`≤g_wrôe_zTXt
(
≤g_±r
, 
öfo_±r
->
ãxt
[
i
].
key
,

418 
öfo_±r
->
ãxt
[
i
].ãxt, info_±r->ãxt[i].
com¥essi⁄
);

420 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_zTXt_WR
;

422 
	`≤g_w¨nög
(
≤g_±r
, "UnableÅo write compressedÅext");

426 i‡(
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 =
PNG_TEXT_COMPRESSION_NONE
)

428 #ifde‡
PNG_WRITE_tEXt_SUPPORTED


430 
	`≤g_wrôe_tEXt
(
≤g_±r
, 
öfo_±r
->
ãxt
[
i
].
key
,

431 
öfo_±r
->
ãxt
[
i
].text, 0);

433 
öfo_±r
->
ãxt
[
i
].
com¥essi⁄
 = 
PNG_TEXT_COMPRESSION_NONE_WR
;

435 
	`≤g_w¨nög
(
≤g_±r
, "UnableÅo write uncompressedÅext");

441 #ifde‡
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


442 
	`wrôe_unknown_chunks
(
≤g_±r
, 
öfo_±r
, 
PNG_AFTER_IDAT
);

446 
≤g_±r
->
mode
 |
PNG_AFTER_IDAT
;

449 
	`≤g_wrôe_IEND
(
≤g_±r
);

458 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


459 #ifde‡
PNG_WRITE_FLUSH_AFTER_IEND_SUPPORTED


460 
	`≤g_Êush
(
≤g_±r
);

463 
	}
}

465 #ifde‡
PNG_CONVERT_tIME_SUPPORTED


466 
PNGAPI


467 
	$≤g_c⁄vît_‰om_°ru˘_tm
(
≤g_timï
 
±ime
, c⁄° 
tm
 * 
âime
)

469 
	`≤g_debug
(1, "inÖng_convert_from_struct_tm");

471 
±ime
->
yór
 = (
≤g_uöt_16
)(1900 + 
âime
->
tm_yór
);

472 
±ime
->
m⁄th
 = (
≤g_byã
)(
âime
->
tm_m⁄
 + 1);

473 
±ime
->
day
 = (
≤g_byã
)
âime
->
tm_mday
;

474 
±ime
->
hour
 = (
≤g_byã
)
âime
->
tm_hour
;

475 
±ime
->
möuã
 = (
≤g_byã
)
âime
->
tm_mö
;

476 
±ime
->
£c⁄d
 = (
≤g_byã
)
âime
->
tm_£c
;

477 
	}
}

479 
PNGAPI


480 
	$≤g_c⁄vît_‰om_time_t
(
≤g_timï
 
±ime
, 
time_t
 
âime
)

482 
tm
 *
tbuf
;

484 
	`≤g_debug
(1, "inÖng_convert_from_time_t");

486 
tbuf
 = 
	`gmtime
(&
âime
);

487 
	`≤g_c⁄vît_‰om_°ru˘_tm
(
±ime
, 
tbuf
);

488 
	}
}

492 
PNG_FUNCTION
(
≤g_°ru˘p
,
PNGAPI


493 
≤g_¸óã_wrôe_°ru˘
,(
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

494 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
),
PNG_ALLOCATED
)

496 #i‚de‡
PNG_USER_MEM_SUPPORTED


497 
≤g_°ru˘Ω
 
	g≤g_±r
 = 
≤g_¸óã_≤g_°ru˘
(
u£r_≤g_vî
, 
îr‹_±r
,

498 
îr‹_‚
, 
w¨n_‚
, 
NULL
, NULL, NULL);

500  
≤g_¸óã_wrôe_°ru˘_2
(
u£r_≤g_vî
, 
îr‹_±r
, 
îr‹_‚
,

501 
w¨n_‚
, 
NULL
, NULL, NULL);

505 
PNG_FUNCTION
(
≤g_°ru˘p
,
PNGAPI


506 
≤g_¸óã_wrôe_°ru˘_2
,(
≤g_c⁄°_ch¨p
 
u£r_≤g_vî
, 
≤g_voidp
 
îr‹_±r
,

507 
≤g_îr‹_±r
 
îr‹_‚
,Öng_îr‹_±∏
w¨n_‚
, 
≤g_voidp
 
mem_±r
,

508 
≤g_mÆloc_±r
 
mÆloc_‚
, 
≤g_‰ì_±r
 
‰ì_‚
),
PNG_ALLOCATED
)

510 
≤g_°ru˘Ω
 
	g≤g_±r
 = 
≤g_¸óã_≤g_°ru˘
(
u£r_≤g_vî
, 
îr‹_±r
,

511 
îr‹_‚
, 
w¨n_‚
, 
mem_±r
, 
mÆloc_‚
, 
‰ì_‚
);

513 i‡(
	g≤g_±r
 !
NULL
)

518 
≤g_±r
->
zbuf„r_size
 = 
PNG_ZBUF_SIZE
;

524 
	g≤g_±r
->
	gzlib_°øãgy
 = 
PNG_Z_DEFAULT_STRATEGY
;

525 
	g≤g_±r
->
	gzlib_Àvñ
 = 
PNG_Z_DEFAULT_COMPRESSION
;

526 
	g≤g_±r
->
	gzlib_mem_Àvñ
 = 8;

527 
	g≤g_±r
->
	gzlib_wödow_bôs
 = 15;

528 
	g≤g_±r
->
	gzlib_mëhod
 = 8;

530 #ifde‡
PNG_WRITE_COMPRESSED_TEXT_SUPPORTED


531 
	g≤g_±r
->
	gzlib_ãxt_°øãgy
 = 
PNG_TEXT_Z_DEFAULT_STRATEGY
;

532 
	g≤g_±r
->
	gzlib_ãxt_Àvñ
 = 
PNG_TEXT_Z_DEFAULT_COMPRESSION
;

533 
	g≤g_±r
->
	gzlib_ãxt_mem_Àvñ
 = 8;

534 
	g≤g_±r
->
	gzlib_ãxt_wödow_bôs
 = 15;

535 
	g≤g_±r
->
	gzlib_ãxt_mëhod
 = 8;

543 #ifde‡
PNG_BENIGN_WRITE_ERRORS_SUPPORTED


547 
	g≤g_±r
->
	gÊags
 |
PNG_FLAG_BENIGN_ERRORS_WARN
;

553 #i‡
PNG_RELEASE_BUILD


554 
	g≤g_±r
->
	gÊags
 |
PNG_FLAG_APP_WARNINGS_WARN
;

561 
≤g_£t_wrôe_‚
(
≤g_±r
, 
NULL
, NULL, NULL);

564  
	g≤g_±r
;

573 
PNGAPI


574 
	$≤g_wrôe_rows
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
row
,

575 
≤g_uöt_32
 
num_rows
)

577 
≤g_uöt_32
 
i
;

578 
≤g_byãµ
 
Ω
;

580 
	`≤g_debug
(1, "inÖng_write_rows");

582 i‡(
≤g_±r
 =
NULL
)

586 
i
 = 0, 
Ω
 = 
row
; i < 
num_rows
; i++,Ñp++)

588 
	`≤g_wrôe_row
(
≤g_±r
, *
Ω
);

590 
	}
}

595 
PNGAPI


596 
	$≤g_wrôe_image
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãµ
 
image
)

598 
≤g_uöt_32
 
i
;

599 
∑ss
, 
num_∑ss
;

600 
≤g_byãµ
 
Ω
;

602 i‡(
≤g_±r
 =
NULL
)

605 
	`≤g_debug
(1, "inÖng_write_image");

607 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


611 
num_∑ss
 = 
	`≤g_£t_öãæa˚_h™dlög
(
≤g_±r
);

613 
num_∑ss
 = 1;

616 
∑ss
 = 0;Öas†< 
num_∑ss
;Öass++)

619 
i
 = 0, 
Ω
 = 
image
; i < 
≤g_±r
->
height
; i++,Ñp++)

621 
	`≤g_wrôe_row
(
≤g_±r
, *
Ω
);

624 
	}
}

626 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


629 
	$≤g_do_wrôe_öå≠ixñ
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

631 
	`≤g_debug
(1, "inÖng_do_write_intrapixel");

633 i‡((
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

635 
byãs_≥r_pixñ
;

636 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

637 i‡(
row_öfo
->
bô_dïth
 == 8)

639 
≤g_byãp
 
Ω
;

640 
≤g_uöt_32
 
i
;

642 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

643 
byãs_≥r_pixñ
 = 3;

645 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

646 
byãs_≥r_pixñ
 = 4;

651 
i
 = 0, 
Ω
 = 
row
; i < 
row_width
; i++,Ñ∞+
byãs_≥r_pixñ
)

653 *(
Ω
Ë(
≤g_byã
)(*rp - *(rp + 1));

654 *(
Ω
 + 2Ë(
≤g_byã
)(*(rp + 2) - *(rp + 1));

658 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


659 i‡(
row_öfo
->
bô_dïth
 == 16)

661 
≤g_byãp
 
Ω
;

662 
≤g_uöt_32
 
i
;

664 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

665 
byãs_≥r_pixñ
 = 6;

667 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

668 
byãs_≥r_pixñ
 = 8;

673 
i
 = 0, 
Ω
 = 
row
; i < 
row_width
; i++,Ñ∞+
byãs_≥r_pixñ
)

675 
≤g_uöt_32
 
s0
 = (≤g_uöt_32)(*(
Ω
 ) << 8) | *(rp + 1);

676 
≤g_uöt_32
 
s1
 = (≤g_uöt_32)(*(
Ω
 + 2) << 8) | *(rp + 3);

677 
≤g_uöt_32
 
s2
 = (≤g_uöt_32)(*(
Ω
 + 4) << 8) | *(rp + 5);

678 
≤g_uöt_32
 
ªd
 = (≤g_uöt_32)((
s0
 - 
s1
) & 0xffffL);

679 
≤g_uöt_32
 
blue
 = (≤g_uöt_32)((
s2
 - 
s1
) & 0xffffL);

680 *(
Ω
 ) = (
≤g_byã
)(
ªd
 >> 8);

681 *(
Ω
 + 1Ë(
≤g_byã
)
ªd
;

682 *(
Ω
 + 4Ë(
≤g_byã
)(
blue
 >> 8);

683 *(
Ω
 + 5Ë(
≤g_byã
)
blue
;

688 
	}
}

692 
PNGAPI


693 
	$≤g_wrôe_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
row
)

696 
≤g_row_öfo
 
row_öfo
;

698 i‡(
≤g_±r
 =
NULL
)

701 
	`≤g_debug2
(1, "inÖng_write_row (row %u,Öass %d)",

702 
≤g_±r
->
row_numbî
,Öng_±r->
∑ss
);

705 i‡(
≤g_±r
->
row_numbî
 =0 &&Öng_±r->
∑ss
 == 0)

708 i‡((
≤g_±r
->
mode
 & 
PNG_WROTE_INFO_BEFORE_PLTE
) == 0)

709 
	`≤g_îr‹
(
≤g_±r
,

713 #i‡!
	`deföed
(
PNG_WRITE_INVERT_SUPPORTED
Ë&& deföed(
PNG_READ_INVERT_SUPPORTED
)

714 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INVERT_MONO
) != 0)

715 
	`≤g_w¨nög
(
≤g_±r
, "PNG_WRITE_INVERT_SUPPORTED isÇot defined");

718 #i‡!
	`deföed
(
PNG_WRITE_FILLER_SUPPORTED
Ë&& deföed(
PNG_READ_FILLER_SUPPORTED
)

719 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_FILLER
) != 0)

720 
	`≤g_w¨nög
(
≤g_±r
, "PNG_WRITE_FILLER_SUPPORTED isÇot defined");

722 #i‡!
	`deföed
(
PNG_WRITE_PACKSWAP_SUPPORTED
) && \

723 
	`deföed
(
PNG_READ_PACKSWAP_SUPPORTED
)

724 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

725 
	`≤g_w¨nög
(
≤g_±r
,

729 #i‡!
	`deföed
(
PNG_WRITE_PACK_SUPPORTED
Ë&& deföed(
PNG_READ_PACK_SUPPORTED
)

730 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACK
) != 0)

731 
	`≤g_w¨nög
(
≤g_±r
, "PNG_WRITE_PACK_SUPPORTED isÇot defined");

734 #i‡!
	`deföed
(
PNG_WRITE_SHIFT_SUPPORTED
Ë&& deföed(
PNG_READ_SHIFT_SUPPORTED
)

735 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SHIFT
) != 0)

736 
	`≤g_w¨nög
(
≤g_±r
, "PNG_WRITE_SHIFT_SUPPORTED isÇot defined");

739 #i‡!
	`deföed
(
PNG_WRITE_BGR_SUPPORTED
Ë&& deföed(
PNG_READ_BGR_SUPPORTED
)

740 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BGR
) != 0)

741 
	`≤g_w¨nög
(
≤g_±r
, "PNG_WRITE_BGR_SUPPORTED isÇot defined");

744 #i‡!
	`deföed
(
PNG_WRITE_SWAP_SUPPORTED
Ë&& deföed(
PNG_READ_SWAP_SUPPORTED
)

745 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SWAP_BYTES
) != 0)

746 
	`≤g_w¨nög
(
≤g_±r
, "PNG_WRITE_SWAP_SUPPORTED isÇot defined");

749 
	`≤g_wrôe_°¨t_row
(
≤g_±r
);

752 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


754 i‡(
≤g_±r
->
öãæa˚d
 != 0 &&

755 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0)

757 
≤g_±r
->
∑ss
)

760 i‡((
≤g_±r
->
row_numbî
 & 0x07) != 0)

762 
	`≤g_wrôe_föish_row
(
≤g_±r
);

768 i‡((
≤g_±r
->
row_numbî
 & 0x07Ë!0 ||Öng_±r->
width
 < 5)

770 
	`≤g_wrôe_föish_row
(
≤g_±r
);

776 i‡((
≤g_±r
->
row_numbî
 & 0x07) != 4)

778 
	`≤g_wrôe_föish_row
(
≤g_±r
);

784 i‡((
≤g_±r
->
row_numbî
 & 0x03Ë!0 ||Öng_±r->
width
 < 3)

786 
	`≤g_wrôe_föish_row
(
≤g_±r
);

792 i‡((
≤g_±r
->
row_numbî
 & 0x03) != 2)

794 
	`≤g_wrôe_föish_row
(
≤g_±r
);

800 i‡((
≤g_±r
->
row_numbî
 & 0x01Ë!0 ||Öng_±r->
width
 < 2)

802 
	`≤g_wrôe_föish_row
(
≤g_±r
);

808 i‡((
≤g_±r
->
row_numbî
 & 0x01) == 0)

810 
	`≤g_wrôe_föish_row
(
≤g_±r
);

822 
row_öfo
.
cﬁ‹_ty≥
 = 
≤g_±r
->color_type;

823 
row_öfo
.
width
 = 
≤g_±r
->
u§_width
;

824 
row_öfo
.
ch™√ls
 = 
≤g_±r
->
u§_ch™√ls
;

825 
row_öfo
.
bô_dïth
 = 
≤g_±r
->
u§_bô_dïth
;

826 
row_öfo
.
pixñ_dïth
 = (
≤g_byã
)‘ow_öfo.
bô_dïth
 *Ñow_öfo.
ch™√ls
);

827 
row_öfo
.
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo.
pixñ_dïth
,Ñow_öfo.
width
);

829 
	`≤g_debug1
(3, "row_öfo->cﬁ‹_ty≥ = %d", 
row_öfo
.
cﬁ‹_ty≥
);

830 
	`≤g_debug1
(3, "row_öfo->width = %u", 
row_öfo
.
width
);

831 
	`≤g_debug1
(3, "row_öfo->ch™√l†%d", 
row_öfo
.
ch™√ls
);

832 
	`≤g_debug1
(3, "row_öfo->bô_dïth = %d", 
row_öfo
.
bô_dïth
);

833 
	`≤g_debug1
(3, "row_öfo->pixñ_dïth = %d", 
row_öfo
.
pixñ_dïth
);

834 
	`≤g_debug1
(3, "row_öfo->rowbyã†%lu", ()
row_öfo
.
rowbyãs
);

837 
	`mem˝y
(
≤g_±r
->
row_buf
 + 1, 
row
, 
row_öfo
.
rowbyãs
);

839 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


841 i‡(
≤g_±r
->
öãæa˚d
 &&Öng_±r->
∑ss
 < 6 &&

842 (
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0)

844 
	`≤g_do_wrôe_öãæa˚
(&
row_öfo
, 
≤g_±r
->
row_buf
 + 1,Öng_±r->
∑ss
);

846 i‡(
row_öfo
.
width
 == 0)

848 
	`≤g_wrôe_föish_row
(
≤g_±r
);

854 #ifde‡
PNG_WRITE_TRANSFORMS_SUPPORTED


856 i‡(
≤g_±r
->
å™sf‹m©i⁄s
 != 0)

857 
	`≤g_do_wrôe_å™sf‹m©i⁄s
(
≤g_±r
, &
row_öfo
);

863 i‡(
row_öfo
.
pixñ_dïth
 !
≤g_±r
->pixel_depth ||

864 
row_öfo
.
pixñ_dïth
 !
≤g_±r
->
å™sf‹med_pixñ_dïth
)

865 
	`≤g_îr‹
(
≤g_±r
, "internal writeÅransformÜogicÉrror");

867 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


877 i‡((
≤g_±r
->
mng_„©uªs_≥rmôãd
 & 
PNG_FLAG_MNG_FILTER_64
) != 0 &&

878 (
≤g_±r
->
fûãr_ty≥
 =
PNG_INTRAPIXEL_DIFFERENCING
))

881 
	`≤g_do_wrôe_öå≠ixñ
(&
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

886 #ifde‡
PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED


888 i‡(
row_öfo
.
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 &&

889 
≤g_±r
->
num_∑Àâe_max
 >= 0)

890 
	`≤g_do_check_∑Àâe_ödexes
(
≤g_±r
, &
row_öfo
);

894 
	`≤g_wrôe_föd_fûãr
(
≤g_±r
, &
row_öfo
);

896 i‡(
≤g_±r
->
wrôe_row_‚
 !
NULL
)

897 (*(
≤g_±r
->
wrôe_row_‚
))’ng_±r,Öng_±r->
row_numbî
,Öng_±r->
∑ss
);

898 
	}
}

900 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


902 
PNGAPI


903 
	$≤g_£t_Êush
(
≤g_°ru˘Ω
 
≤g_±r
, 
ƒows
)

905 
	`≤g_debug
(1, "inÖng_set_flush");

907 i‡(
≤g_±r
 =
NULL
)

910 
≤g_±r
->
Êush_di°
 = (
ƒows
 < 0 ? 0 : (
≤g_uöt_32
)nrows);

911 
	}
}

914 
PNGAPI


915 
	$≤g_wrôe_Êush
(
≤g_°ru˘Ω
 
≤g_±r
)

917 
	`≤g_debug
(1, "inÖng_write_flush");

919 i‡(
≤g_±r
 =
NULL
)

923 i‡(
≤g_±r
->
row_numbî
 >≤g_±r->
num_rows
)

926 
	`≤g_com¥ess_IDAT
(
≤g_±r
, 
NULL
, 0, 
Z_SYNC_FLUSH
);

927 
≤g_±r
->
Êush_rows
 = 0;

928 
	`≤g_Êush
(
≤g_±r
);

929 
	}
}

934 
	$≤g_wrôe_de°roy
(
≤g_°ru˘Ω
 
≤g_±r
)

936 
	`≤g_debug
(1, "inÖng_write_destroy");

939 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_INITIALIZED
) != 0)

940 
	`deÊ©eEnd
(&
≤g_±r
->
z°ªam
);

943 
	`≤g_‰ì_buf„r_li°
(
≤g_±r
, &≤g_±r->
zbuf„r_li°
);

944 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
row_buf
);

945 
≤g_±r
->
row_buf
 = 
NULL
;

946 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


947 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
¥ev_row
);

948 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
åy_row
);

949 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
t°_row
);

950 
≤g_±r
->
¥ev_row
 = 
NULL
;

951 
≤g_±r
->
åy_row
 = 
NULL
;

952 
≤g_±r
->
t°_row
 = 
NULL
;

955 #ifde‡
PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


956 
	`≤g_‰ì
(
≤g_±r
,Öng_±r->
chunk_li°
);

957 
≤g_±r
->
chunk_li°
 = 
NULL
;

964 
	}
}

973 
PNGAPI


974 
	$≤g_de°roy_wrôe_°ru˘
(
≤g_°ru˘µ
 
≤g_±r_±r
, 
≤g_öf›p
 
öfo_±r_±r
)

976 
	`≤g_debug
(1, "inÖng_destroy_write_struct");

978 i‡(
≤g_±r_±r
 !
NULL
)

980 
≤g_°ru˘Ω
 
≤g_±r
 = *
≤g_±r_±r
;

982 i‡(
≤g_±r
 !
NULL
)

984 
	`≤g_de°roy_öfo_°ru˘
(
≤g_±r
, 
öfo_±r_±r
);

986 *
≤g_±r_±r
 = 
NULL
;

987 
	`≤g_wrôe_de°roy
(
≤g_±r
);

988 
	`≤g_de°roy_≤g_°ru˘
(
≤g_±r
);

991 
	}
}

994 
PNGAPI


995 
	$≤g_£t_fûãr
(
≤g_°ru˘Ω
 
≤g_±r
, 
mëhod
, 
fûãrs
)

997 
	`≤g_debug
(1, "inÖng_set_filter");

999 i‡(
≤g_±r
 =
NULL
)

1002 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


1003 i‡((
≤g_±r
->
mng_„©uªs_≥rmôãd
 & 
PNG_FLAG_MNG_FILTER_64
) != 0 &&

1004 (
mëhod
 =
PNG_INTRAPIXEL_DIFFERENCING
))

1005 
mëhod
 = 
PNG_FILTER_TYPE_BASE
;

1008 i‡(
mëhod
 =
PNG_FILTER_TYPE_BASE
)

1010 
fûãrs
 & (
PNG_ALL_FILTERS
 | 0x07))

1012 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


1015 7: 
	`≤g_≠p_îr‹
(
≤g_±r
, "UnknownÑow filter for method 0");

1018 
PNG_FILTER_VALUE_NONE
:

1019 
≤g_±r
->
do_fûãr
 = 
PNG_FILTER_NONE
; ;

1021 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


1022 
PNG_FILTER_VALUE_SUB
:

1023 
≤g_±r
->
do_fûãr
 = 
PNG_FILTER_SUB
; ;

1025 
PNG_FILTER_VALUE_UP
:

1026 
≤g_±r
->
do_fûãr
 = 
PNG_FILTER_UP
; ;

1028 
PNG_FILTER_VALUE_AVG
:

1029 
≤g_±r
->
do_fûãr
 = 
PNG_FILTER_AVG
; ;

1031 
PNG_FILTER_VALUE_PAETH
:

1032 
≤g_±r
->
do_fûãr
 = 
PNG_FILTER_PAETH
; ;

1035 
≤g_±r
->
do_fûãr
 = (
≤g_byã
)
fûãrs
; ;

1038 
	`≤g_≠p_îr‹
(
≤g_±r
, "UnknownÑow filter for method 0");

1042 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


1056 i‡(
≤g_±r
->
row_buf
 !
NULL
)

1058 
num_fûãrs
;

1059 
≤g_Æloc_size_t
 
buf_size
;

1065 i‡(
≤g_±r
->
height
 == 1)

1066 
fûãrs
 &~(
PNG_FILTER_UP
|
PNG_FILTER_AVG
|
PNG_FILTER_PAETH
);

1068 i‡(
≤g_±r
->
width
 == 1)

1069 
fûãrs
 &~(
PNG_FILTER_SUB
|
PNG_FILTER_AVG
|
PNG_FILTER_PAETH
);

1071 i‡((
fûãrs
 & (
PNG_FILTER_UP
|
PNG_FILTER_AVG
|
PNG_FILTER_PAETH
)) != 0

1072 && 
≤g_±r
->
¥ev_row
 =
NULL
)

1077 
	`≤g_≠p_w¨nög
(
≤g_±r
,

1079 
fûãrs
 &~(
PNG_FILTER_UP
|
PNG_FILTER_AVG
|
PNG_FILTER_PAETH
);

1082 
num_fûãrs
 = 0;

1084 i‡(
fûãrs
 & 
PNG_FILTER_SUB
)

1085 
num_fûãrs
++;

1087 i‡(
fûãrs
 & 
PNG_FILTER_UP
)

1088 
num_fûãrs
++;

1090 i‡(
fûãrs
 & 
PNG_FILTER_AVG
)

1091 
num_fûãrs
++;

1093 i‡(
fûãrs
 & 
PNG_FILTER_PAETH
)

1094 
num_fûãrs
++;

1099 
buf_size
 = 
	`PNG_ROWBYTES
(
≤g_±r
->
u§_ch™√ls
 *Öng_±r->
u§_bô_dïth
,

1100 
≤g_±r
->
width
) + 1;

1102 i‡(
≤g_±r
->
åy_row
 =
NULL
)

1103 
≤g_±r
->
åy_row
 = 
	`≤g_voidˇ°
(
≤g_byãp
,

1104 
	`≤g_mÆloc
(
≤g_±r
, 
buf_size
));

1106 i‡(
num_fûãrs
 > 1)

1108 i‡(
≤g_±r
->
t°_row
 =
NULL
)

1109 
≤g_±r
->
t°_row
 = 
	`≤g_voidˇ°
(
≤g_byãp
,

1110 
	`≤g_mÆloc
(
≤g_±r
, 
buf_size
));

1113 
≤g_±r
->
do_fûãr
 = (
≤g_byã
)
fûãrs
;

1117 
	`≤g_îr‹
(
≤g_±r
, "Unknown custom filter method");

1118 
	}
}

1120 #ifde‡
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


1122 #ifde‡
PNG_FLOATING_POINT_SUPPORTED


1123 
PNGAPI


1124 
	$≤g_£t_fûãr_heuri°ics
(
≤g_°ru˘Ω
 
≤g_±r
, 
heuri°ic_mëhod
,

1125 
num_weights
, 
≤g_c⁄°_doubÀp
 
fûãr_weights
,

1126 
≤g_c⁄°_doubÀp
 
fûãr_co°s
)

1128 
	`PNG_UNUSED
(
≤g_±r
)

1129 
	`PNG_UNUSED
(
heuri°ic_mëhod
)

1130 
	`PNG_UNUSED
(
num_weights
)

1131 
	`PNG_UNUSED
(
fûãr_weights
)

1132 
	`PNG_UNUSED
(
fûãr_co°s
)

1133 
	}
}

1136 #ifde‡
PNG_FIXED_POINT_SUPPORTED


1137 
PNGAPI


1138 
	$≤g_£t_fûãr_heuri°ics_fixed
(
≤g_°ru˘Ω
 
≤g_±r
, 
heuri°ic_mëhod
,

1139 
num_weights
, 
≤g_c⁄°_fixed_poöt_p
 
fûãr_weights
,

1140 
≤g_c⁄°_fixed_poöt_p
 
fûãr_co°s
)

1142 
	`PNG_UNUSED
(
≤g_±r
)

1143 
	`PNG_UNUSED
(
heuri°ic_mëhod
)

1144 
	`PNG_UNUSED
(
num_weights
)

1145 
	`PNG_UNUSED
(
fûãr_weights
)

1146 
	`PNG_UNUSED
(
fûãr_co°s
)

1147 
	}
}

1151 #ifde‡
PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED


1152 
PNGAPI


1153 
	$≤g_£t_com¥essi⁄_Àvñ
(
≤g_°ru˘Ω
 
≤g_±r
, 
Àvñ
)

1155 
	`≤g_debug
(1, "inÖng_set_compression_level");

1157 i‡(
≤g_±r
 =
NULL
)

1160 
≤g_±r
->
zlib_Àvñ
 = 
Àvñ
;

1161 
	}
}

1163 
PNGAPI


1164 
	$≤g_£t_com¥essi⁄_mem_Àvñ
(
≤g_°ru˘Ω
 
≤g_±r
, 
mem_Àvñ
)

1166 
	`≤g_debug
(1, "inÖng_set_compression_mem_level");

1168 i‡(
≤g_±r
 =
NULL
)

1171 
≤g_±r
->
zlib_mem_Àvñ
 = 
mem_Àvñ
;

1172 
	}
}

1174 
PNGAPI


1175 
	$≤g_£t_com¥essi⁄_°øãgy
(
≤g_°ru˘Ω
 
≤g_±r
, 
°øãgy
)

1177 
	`≤g_debug
(1, "inÖng_set_compression_strategy");

1179 i‡(
≤g_±r
 =
NULL
)

1184 
≤g_±r
->
Êags
 |
PNG_FLAG_ZLIB_CUSTOM_STRATEGY
;

1185 
≤g_±r
->
zlib_°øãgy
 = 
°øãgy
;

1186 
	}
}

1191 
PNGAPI


1192 
	$≤g_£t_com¥essi⁄_wödow_bôs
(
≤g_°ru˘Ω
 
≤g_±r
, 
wödow_bôs
)

1194 i‡(
≤g_±r
 =
NULL
)

1203 i‡(
wödow_bôs
 > 15)

1205 
	`≤g_w¨nög
(
≤g_±r
, "Only compression windows <= 32k supported by PNG");

1206 
wödow_bôs
 = 15;

1209 i‡(
wödow_bôs
 < 8)

1211 
	`≤g_w¨nög
(
≤g_±r
, "Only compression windows >= 256 supported by PNG");

1212 
wödow_bôs
 = 8;

1215 
≤g_±r
->
zlib_wödow_bôs
 = 
wödow_bôs
;

1216 
	}
}

1218 
PNGAPI


1219 
	$≤g_£t_com¥essi⁄_mëhod
(
≤g_°ru˘Ω
 
≤g_±r
, 
mëhod
)

1221 
	`≤g_debug
(1, "inÖng_set_compression_method");

1223 i‡(
≤g_±r
 =
NULL
)

1229 i‡(
mëhod
 != 8)

1230 
	`≤g_w¨nög
(
≤g_±r
, "Only compression method 8 is supported by PNG");

1232 
≤g_±r
->
zlib_mëhod
 = 
mëhod
;

1233 
	}
}

1237 #ifde‡
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


1238 
PNGAPI


1239 
	$≤g_£t_ãxt_com¥essi⁄_Àvñ
(
≤g_°ru˘Ω
 
≤g_±r
, 
Àvñ
)

1241 
	`≤g_debug
(1, "inÖng_set_text_compression_level");

1243 i‡(
≤g_±r
 =
NULL
)

1246 
≤g_±r
->
zlib_ãxt_Àvñ
 = 
Àvñ
;

1247 
	}
}

1249 
PNGAPI


1250 
	$≤g_£t_ãxt_com¥essi⁄_mem_Àvñ
(
≤g_°ru˘Ω
 
≤g_±r
, 
mem_Àvñ
)

1252 
	`≤g_debug
(1, "inÖng_set_text_compression_mem_level");

1254 i‡(
≤g_±r
 =
NULL
)

1257 
≤g_±r
->
zlib_ãxt_mem_Àvñ
 = 
mem_Àvñ
;

1258 
	}
}

1260 
PNGAPI


1261 
	$≤g_£t_ãxt_com¥essi⁄_°øãgy
(
≤g_°ru˘Ω
 
≤g_±r
, 
°øãgy
)

1263 
	`≤g_debug
(1, "inÖng_set_text_compression_strategy");

1265 i‡(
≤g_±r
 =
NULL
)

1268 
≤g_±r
->
zlib_ãxt_°øãgy
 = 
°øãgy
;

1269 
	}
}

1274 
PNGAPI


1275 
	$≤g_£t_ãxt_com¥essi⁄_wödow_bôs
(
≤g_°ru˘Ω
 
≤g_±r
, 
wödow_bôs
)

1277 i‡(
≤g_±r
 =
NULL
)

1280 i‡(
wödow_bôs
 > 15)

1282 
	`≤g_w¨nög
(
≤g_±r
, "Only compression windows <= 32k supported by PNG");

1283 
wödow_bôs
 = 15;

1286 i‡(
wödow_bôs
 < 8)

1288 
	`≤g_w¨nög
(
≤g_±r
, "Only compression windows >= 256 supported by PNG");

1289 
wödow_bôs
 = 8;

1292 
≤g_±r
->
zlib_ãxt_wödow_bôs
 = 
wödow_bôs
;

1293 
	}
}

1295 
PNGAPI


1296 
	$≤g_£t_ãxt_com¥essi⁄_mëhod
(
≤g_°ru˘Ω
 
≤g_±r
, 
mëhod
)

1298 
	`≤g_debug
(1, "inÖng_set_text_compression_method");

1300 i‡(
≤g_±r
 =
NULL
)

1303 i‡(
mëhod
 != 8)

1304 
	`≤g_w¨nög
(
≤g_±r
, "Only compression method 8 is supported by PNG");

1306 
≤g_±r
->
zlib_ãxt_mëhod
 = 
mëhod
;

1307 
	}
}

1311 
PNGAPI


1312 
	$≤g_£t_wrôe_°©us_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_wrôe_°©us_±r
 
wrôe_row_‚
)

1314 i‡(
≤g_±r
 =
NULL
)

1317 
≤g_±r
->
wrôe_row_‚
 = write_row_fn;

1318 
	}
}

1320 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


1321 
PNGAPI


1322 
	$≤g_£t_wrôe_u£r_å™sf‹m_‚
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_u£r_å™sf‹m_±r


1323 
wrôe_u£r_å™sf‹m_‚
)

1325 
	`≤g_debug
(1, "inÖng_set_write_user_transform_fn");

1327 i‡(
≤g_±r
 =
NULL
)

1330 
≤g_±r
->
å™sf‹m©i⁄s
 |
PNG_USER_TRANSFORM
;

1331 
≤g_±r
->
wrôe_u£r_å™sf‹m_‚
 = write_user_transform_fn;

1332 
	}
}

1336 #ifde‡
PNG_INFO_IMAGE_SUPPORTED


1337 
PNGAPI


1338 
	$≤g_wrôe_≤g
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öf‹p
 
öfo_±r
,

1339 
å™sf‹ms
, 
voidp
 
∑øms
)

1341 i‡(
≤g_±r
 =
NULL
 || 
öfo_±r
 == NULL)

1344 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_IDAT
) == 0)

1346 
	`≤g_≠p_îr‹
(
≤g_±r
, "noÑows forÖng_write_imageÅo write");

1351 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

1356 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_INVERT_MONO
) != 0)

1357 #ifde‡
PNG_WRITE_INVERT_SUPPORTED


1358 
	`≤g_£t_övît_m⁄o
(
≤g_±r
);

1360 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_INVERT_MONOÇot supported");

1366 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_SHIFT
) != 0)

1367 #ifde‡
PNG_WRITE_SHIFT_SUPPORTED


1368 i‡((
öfo_±r
->
vÆid
 & 
PNG_INFO_sBIT
) != 0)

1369 
	`≤g_£t_shi·
(
≤g_±r
, &
öfo_±r
->
sig_bô
);

1371 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_SHIFTÇot supported");

1375 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_PACKING
) != 0)

1376 #ifde‡
PNG_WRITE_PACK_SUPPORTED


1377 
	`≤g_£t_∑ckög
(
≤g_±r
);

1379 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_PACKINGÇot supported");

1383 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_SWAP_ALPHA
) != 0)

1384 #ifde‡
PNG_WRITE_SWAP_ALPHA_SUPPORTED


1385 
	`≤g_£t_sw≠_Æpha
(
≤g_±r
);

1387 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_SWAP_ALPHAÇot supported");

1394 i‡((
å™sf‹ms
 & (
PNG_TRANSFORM_STRIP_FILLER_AFTER
|

1395 
PNG_TRANSFORM_STRIP_FILLER_BEFORE
)) != 0)

1397 #ifde‡
PNG_WRITE_FILLER_SUPPORTED


1398 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_STRIP_FILLER_AFTER
) != 0)

1400 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_STRIP_FILLER_BEFORE
) != 0)

1401 
	`≤g_≠p_îr‹
(
≤g_±r
,

1405 
	`≤g_£t_fûÀr
(
≤g_±r
, 0, 
PNG_FILLER_AFTER
);

1408 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_STRIP_FILLER_BEFORE
) != 0)

1409 
	`≤g_£t_fûÀr
(
≤g_±r
, 0, 
PNG_FILLER_BEFORE
);

1411 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_STRIP_FILLERÇot supported");

1416 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_BGR
) != 0)

1417 #ifde‡
PNG_WRITE_BGR_SUPPORTED


1418 
	`≤g_£t_bgr
(
≤g_±r
);

1420 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_BGRÇot supported");

1424 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_SWAP_ENDIAN
) != 0)

1425 #ifde‡
PNG_WRITE_SWAP_SUPPORTED


1426 
	`≤g_£t_sw≠
(
≤g_±r
);

1428 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_SWAP_ENDIANÇot supported");

1432 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_PACKSWAP
) != 0)

1433 #ifde‡
PNG_WRITE_PACKSWAP_SUPPORTED


1434 
	`≤g_£t_∑cksw≠
(
≤g_±r
);

1436 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_PACKSWAPÇot supported");

1440 i‡((
å™sf‹ms
 & 
PNG_TRANSFORM_INVERT_ALPHA
) != 0)

1441 #ifde‡
PNG_WRITE_INVERT_ALPHA_SUPPORTED


1442 
	`≤g_£t_övît_Æpha
(
≤g_±r
);

1444 
	`≤g_≠p_îr‹
(
≤g_±r
, "PNG_TRANSFORM_INVERT_ALPHAÇot supported");

1450 
	`≤g_wrôe_image
(
≤g_±r
, 
öfo_±r
->
row_poöãrs
);

1453 
	`≤g_wrôe_íd
(
≤g_±r
, 
öfo_±r
);

1455 
	`PNG_UNUSED
(
∑øms
)

1456 
	}
}

1460 #ifde‡
PNG_SIMPLIFIED_WRITE_SUPPORTED


1463 
	$≤g_image_wrôe_öô
(
≤g_imagï
 
image
)

1465 
≤g_°ru˘p
 
≤g_±r
 = 
	`≤g_¸óã_wrôe_°ru˘
(
PNG_LIBPNG_VER_STRING
, 
image
,

1466 
≤g_ß„_îr‹
, 
≤g_ß„_w¨nög
);

1468 i‡(
≤g_±r
 !
NULL
)

1470 
≤g_öf›
 
öfo_±r
 = 
	`≤g_¸óã_öfo_°ru˘
(
≤g_±r
);

1472 i‡(
öfo_±r
 !
NULL
)

1474 
≤g_c⁄åﬁp
 
c⁄åﬁ
 = 
	`≤g_voidˇ°
(png_controlp,

1475 
	`≤g_mÆloc_w¨n
(
≤g_±r
, ( *
c⁄åﬁ
)));

1477 i‡(
c⁄åﬁ
 !
NULL
)

1479 
	`mem£t
(
c⁄åﬁ
, 0, ( *control));

1481 
c⁄åﬁ
->
≤g_±r
 =Öng_ptr;

1482 
c⁄åﬁ
->
öfo_±r
 = info_ptr;

1483 
c⁄åﬁ
->
f‹_wrôe
 = 1;

1485 
image
->
›aque
 = 
c⁄åﬁ
;

1490 
	`≤g_de°roy_öfo_°ru˘
(
≤g_±r
, &
öfo_±r
);

1493 
	`≤g_de°roy_wrôe_°ru˘
(&
≤g_±r
, 
NULL
);

1496  
	`≤g_image_îr‹
(
image
, "png_image_write_: out of memory");

1497 
	}
}

1503 
≤g_imagï
 
	mimage
;

1504 
≤g_c⁄°_voidp
 
	mbuf„r
;

1505 
≤g_öt_32
 
	mrow_°ride
;

1506 
≤g_c⁄°_voidp
 
	mcﬁ‹m≠
;

1507 
	mc⁄vît_to_8bô
;

1509 
≤g_c⁄°_voidp
 
	mfú°_row
;

1510 
±rdiff_t
 
	mrow_byãs
;

1511 
≤g_voidp
 
	mloˇl_row
;

1513 
≤g_byãp
 
	mmem‹y
;

1514 
≤g_Æloc_size_t
 
	mmem‹y_byãs
;

1515 
≤g_Æloc_size_t
 
	mouçut_byãs
;

1516 } 
	t≤g_image_wrôe_c⁄åﬁ
;

1523 
	$≤g_wrôe_image_16bô
(
≤g_voidp
 
¨gumít
)

1525 
≤g_image_wrôe_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_write_control*,

1526 
¨gumít
);

1527 
≤g_imagï
 
image
 = 
di•œy
->image;

1528 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

1530 
≤g_c⁄°_uöt_16p
 
öput_row
 = 
	`≤g_voidˇ°
(png_const_uint_16p,

1531 
di•œy
->
fú°_row
);

1532 
≤g_uöt_16p
 
ouçut_row
 = 
	`≤g_voidˇ°
’ng_uöt_16p, 
di•œy
->
loˇl_row
);

1533 
≤g_uöt_16p
 
row_íd
;

1534 
ch™√ls
 = (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) != 0 ?

1536 
aödex
 = 0;

1537 
≤g_uöt_32
 
y
 = 
image
->
height
;

1539 i‡((
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

1541 #ifde‡
PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED


1542 i‡((
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0)

1544 
aödex
 = -1;

1545 ++
öput_row
;

1546 ++
ouçut_row
;

1549 
aödex
 = ()
ch™√ls
;

1551 
aödex
 = ()
ch™√ls
;

1556 
	`≤g_îr‹
(
≤g_±r
, "png_write_image: internal callÉrror");

1562 
row_íd
 = 
ouçut_row
 + 
image
->
width
 * (
ch™√ls
+1);

1564 ; 
y
 > 0; --y)

1566 
≤g_c⁄°_uöt_16p
 
ö_±r
 = 
öput_row
;

1567 
≤g_uöt_16p
 
out_±r
 = 
ouçut_row
;

1569 
out_±r
 < 
row_íd
)

1571 
≤g_uöt_16
 
Æpha
 = 
ö_±r
[
aödex
];

1572 
≤g_uöt_32
 
ªcùroˇl
 = 0;

1573 
c
;

1575 
out_±r
[
aödex
] = 
Æpha
;

1582 i‡(
Æpha
 > 0 &&álpha < 65535)

1583 
ªcùroˇl
 = ((0xffff<<15)+(
Æpha
>>1))/alpha;

1585 
c
 = ()
ch™√ls
;

1588 
≤g_uöt_16
 
comp⁄ít
 = *
ö_±r
++;

1597 i‡(
comp⁄ít
 >
Æpha
)

1598 
comp⁄ít
 = 65535;

1603 i‡(
comp⁄ít
 > 0 && 
Æpha
 < 65535)

1605 
≤g_uöt_32
 
ˇlc
 = 
comp⁄ít
 * 
ªcùroˇl
;

1606 
ˇlc
 += 16384;

1607 
comp⁄ít
 = (
≤g_uöt_16
)(
ˇlc
 >> 15);

1610 *
out_±r
++ = 
comp⁄ít
;

1612 --
c
 > 0);

1615 ++
ö_±r
;

1616 ++
out_±r
;

1619 
	`≤g_wrôe_row
(
≤g_±r
, 
	`≤g_voidˇ°
(
≤g_c⁄°_byãp
, 
di•œy
->
loˇl_row
));

1620 
öput_row
 +(
≤g_uöt_16
)
di•œy
->
row_byãs
/( (png_uint_16));

1624 
	}
}

1634 
	#UNP_RECIPROCAL
(
Æpha
Ë((((0xffff*0xff)<<7)+(◊Õha)>>1))/◊Õha))

	)

1636 
≤g_byã


1637 
	$≤g_u≈ªmu…ùly
(
≤g_uöt_32
 
comp⁄ít
,Öng_uöt_32 
Æpha
,

1638 
≤g_uöt_32
 
ªcùroˇl
 )

1650 i‡(
comp⁄ít
 >
Æpha
 ||álpha < 128)

1656 i‡(
comp⁄ít
 > 0)

1663 i‡(
Æpha
 < 65407)

1665 
comp⁄ít
 *
ªcùroˇl
;

1666 
comp⁄ít
 += 64;

1667 
comp⁄ít
 >>= 7;

1671 
comp⁄ít
 *= 255;

1674  (
≤g_byã
)
	`PNG_sRGB_FROM_LINEAR
(
comp⁄ít
);

1679 
	}
}

1682 
	$≤g_wrôe_image_8bô
(
≤g_voidp
 
¨gumít
)

1684 
≤g_image_wrôe_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_write_control*,

1685 
¨gumít
);

1686 
≤g_imagï
 
image
 = 
di•œy
->image;

1687 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

1689 
≤g_c⁄°_uöt_16p
 
öput_row
 = 
	`≤g_voidˇ°
(png_const_uint_16p,

1690 
di•œy
->
fú°_row
);

1691 
≤g_byãp
 
ouçut_row
 = 
	`≤g_voidˇ°
’ng_byãp, 
di•œy
->
loˇl_row
);

1692 
≤g_uöt_32
 
y
 = 
image
->
height
;

1693 
ch™√ls
 = (
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) != 0 ?

1696 i‡((
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

1698 
≤g_byãp
 
row_íd
;

1699 
aödex
;

1701 #ifde‡
PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED


1702 i‡((
image
->
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0)

1704 
aödex
 = -1;

1705 ++
öput_row
;

1706 ++
ouçut_row
;

1711 
aödex
 = ()
ch™√ls
;

1714 
row_íd
 = 
ouçut_row
 + 
image
->
width
 * (
ch™√ls
+1);

1716 ; 
y
 > 0; --y)

1718 
≤g_c⁄°_uöt_16p
 
ö_±r
 = 
öput_row
;

1719 
≤g_byãp
 
out_±r
 = 
ouçut_row
;

1721 
out_±r
 < 
row_íd
)

1723 
≤g_uöt_16
 
Æpha
 = 
ö_±r
[
aödex
];

1724 
≤g_byã
 
Æphabyã
 = (≤g_byã)
	`PNG_DIV257
(
Æpha
);

1725 
≤g_uöt_32
 
ªcùroˇl
 = 0;

1726 
c
;

1729 
out_±r
[
aödex
] = 
Æphabyã
;

1731 i‡(
Æphabyã
 > 0 &&álphabyte < 255)

1732 
ªcùroˇl
 = 
	`UNP_RECIPROCAL
(
Æpha
);

1734 
c
 = ()
ch™√ls
;

1736 *
out_±r
++ = 
	`≤g_u≈ªmu…ùly
(*
ö_±r
++, 
Æpha
, 
ªcùroˇl
);

1737 --
c
 > 0);

1740 ++
ö_±r
;

1741 ++
out_±r
;

1744 
	`≤g_wrôe_row
(
≤g_±r
, 
	`≤g_voidˇ°
(
≤g_c⁄°_byãp
,

1745 
di•œy
->
loˇl_row
));

1746 
öput_row
 +(
≤g_uöt_16
)
di•œy
->
row_byãs
/( (png_uint_16));

1755 
≤g_byãp
 
row_íd
 = 
ouçut_row
 + 
image
->
width
 * 
ch™√ls
;

1757 ; 
y
 > 0; --y)

1759 
≤g_c⁄°_uöt_16p
 
ö_±r
 = 
öput_row
;

1760 
≤g_byãp
 
out_±r
 = 
ouçut_row
;

1762 
out_±r
 < 
row_íd
)

1764 
≤g_uöt_32
 
comp⁄ít
 = *
ö_±r
++;

1766 
comp⁄ít
 *= 255;

1767 *
out_±r
++ = (
≤g_byã
)
	`PNG_sRGB_FROM_LINEAR
(
comp⁄ít
);

1770 
	`≤g_wrôe_row
(
≤g_±r
, 
ouçut_row
);

1771 
öput_row
 +(
≤g_uöt_16
)
di•œy
->
row_byãs
/( (png_uint_16));

1776 
	}
}

1779 
	$≤g_image_£t_PLTE
(
≤g_image_wrôe_c⁄åﬁ
 *
di•œy
)

1781 
≤g_imagï
 
image
 = 
di•œy
->image;

1782 c⁄° *
cm≠
 = 
di•œy
->
cﬁ‹m≠
;

1783 
íåõs
 = 
image
->
cﬁ‹m≠_íåõs
 > 256 ? 256 :

1784 ()
image
->
cﬁ‹m≠_íåõs
;

1787 
≤g_uöt_32
 
f‹m©
 = 
image
->format;

1788 
ch™√ls
 = 
	`PNG_IMAGE_SAMPLE_CHANNELS
(
f‹m©
);

1790 #i‡
	`deföed
(
PNG_FORMAT_BGR_SUPPORTED
) &&\

1791 
	`deföed
(
PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED
)

1792 
afú°
 = (
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0 &&

1793 (
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0;

1795 
	#afú°
 0

	)

1798 #ifde‡
PNG_FORMAT_BGR_SUPPORTED


1799 
bgr
 = (
f‹m©
 & 
PNG_FORMAT_FLAG_BGR
) != 0 ? 2 : 0;

1801 
	#bgr
 0

	)

1804 
i
, 
num_å™s
;

1805 
≤g_cﬁ‹
 
∑Àâe
[256];

1806 
≤g_byã
 
tRNS
[256];

1808 
	`mem£t
(
tRNS
, 255, (ÅRNS));

1809 
	`mem£t
(
∑Àâe
, 0, (Öalette));

1811 
i
=
num_å™s
=0; i<
íåõs
; ++i)

1816 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
) != 0)

1818 
≤g_c⁄°_uöt_16p
 
íåy
 = 
	`≤g_voidˇ°
’ng_c⁄°_uöt_16p, 
cm≠
);

1820 
íåy
 +()
i
 * 
ch™√ls
;

1822 i‡((
ch™√ls
 & 1) != 0)

1824 i‡(
ch™√ls
 >= 3)

1826 
∑Àâe
[
i
].
blue
 = (
≤g_byã
)
	`PNG_sRGB_FROM_LINEAR
(255 *

1827 
íåy
[(2 ^ 
bgr
)]);

1828 
∑Àâe
[
i
].
gªí
 = (
≤g_byã
)
	`PNG_sRGB_FROM_LINEAR
(255 *

1829 
íåy
[1]);

1830 
∑Àâe
[
i
].
ªd
 = (
≤g_byã
)
	`PNG_sRGB_FROM_LINEAR
(255 *

1831 
íåy
[
bgr
]);

1835 
∑Àâe
[
i
].
blue
 =ÖÆëã[i].
ªd
 =ÖÆëã[i].
gªí
 =

1836 (
≤g_byã
)
	`PNG_sRGB_FROM_LINEAR
(255 * *
íåy
);

1841 
≤g_uöt_16
 
Æpha
 = 
íåy
[
afú°
 ? 0 : 
ch™√ls
-1];

1842 
≤g_byã
 
Æphabyã
 = (≤g_byã)
	`PNG_DIV257
(
Æpha
);

1843 
≤g_uöt_32
 
ªcùroˇl
 = 0;

1849 i‡(
Æphabyã
 > 0 &&álphabyte < 255)

1850 
ªcùroˇl
 = (((0xffff*0xff)<<7)+(
Æpha
>>1))/alpha;

1852 
tRNS
[
i
] = 
Æphabyã
;

1853 i‡(
Æphabyã
 < 255)

1854 
num_å™s
 = 
i
+1;

1856 i‡(
ch™√ls
 >= 3)

1858 
∑Àâe
[
i
].
blue
 = 
	`≤g_u≈ªmu…ùly
(
íåy
[
afú°
 + (2 ^ 
bgr
)],

1859 
Æpha
, 
ªcùroˇl
);

1860 
∑Àâe
[
i
].
gªí
 = 
	`≤g_u≈ªmu…ùly
(
íåy
[
afú°
 + 1], 
Æpha
,

1861 
ªcùroˇl
);

1862 
∑Àâe
[
i
].
ªd
 = 
	`≤g_u≈ªmu…ùly
(
íåy
[
afú°
 + 
bgr
], 
Æpha
,

1863 
ªcùroˇl
);

1867 
∑Àâe
[
i
].
blue
 =ÖÆëã[i].
ªd
 =ÖÆëã[i].
gªí
 =

1868 
	`≤g_u≈ªmu…ùly
(
íåy
[
afú°
], 
Æpha
, 
ªcùroˇl
);

1874 
≤g_c⁄°_byãp
 
íåy
 = 
	`≤g_voidˇ°
’ng_c⁄°_byãp, 
cm≠
);

1876 
íåy
 +()
i
 * 
ch™√ls
;

1878 
ch™√ls
)

1881 
tRNS
[
i
] = 
íåy
[
afú°
 ? 0 : 3];

1882 i‡(
tRNS
[
i
] < 255)

1883 
num_å™s
 = 
i
+1;

1886 
∑Àâe
[
i
].
blue
 = 
íåy
[
afú°
 + (2 ^ 
bgr
)];

1887 
∑Àâe
[
i
].
gªí
 = 
íåy
[
afú°
 + 1];

1888 
∑Àâe
[
i
].
ªd
 = 
íåy
[
afú°
 + 
bgr
];

1892 
tRNS
[
i
] = 
íåy
[1 ^ 
afú°
];

1893 i‡(
tRNS
[
i
] < 255)

1894 
num_å™s
 = 
i
+1;

1897 
∑Àâe
[
i
].
blue
 =ÖÆëã[i].
ªd
 =ÖÆëã[i].
gªí
 =

1898 
íåy
[
afú°
];

1907 #ifde‡
afú°


1908 #unde‡
afú°


1910 #ifde‡
bgr


1911 #unde‡
bgr


1914 
	`≤g_£t_PLTE
(
image
->
›aque
->
≤g_±r
, image->›aque->
öfo_±r
, 
∑Àâe
,

1915 
íåõs
);

1917 i‡(
num_å™s
 > 0)

1918 
	`≤g_£t_tRNS
(
image
->
›aque
->
≤g_±r
, image->›aque->
öfo_±r
, 
tRNS
,

1919 
num_å™s
, 
NULL
);

1921 
image
->
cﬁ‹m≠_íåõs
 = (
≤g_uöt_32
)
íåõs
;

1922 
	}
}

1925 
	$≤g_image_wrôe_maö
(
≤g_voidp
 
¨gumít
)

1927 
≤g_image_wrôe_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_write_control*,

1928 
¨gumít
);

1929 
≤g_imagï
 
image
 = 
di•œy
->image;

1930 
≤g_°ru˘Ω
 
≤g_±r
 = 
image
->
›aque
->png_ptr;

1931 
≤g_öf‹p
 
öfo_±r
 = 
image
->
›aque
->info_ptr;

1932 
≤g_uöt_32
 
f‹m©
 = 
image
->format;

1935 
cﬁ‹m≠
 = (
f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
);

1936 
löór
 = !
cﬁ‹m≠
 && (
f‹m©
 & 
PNG_FORMAT_FLAG_LINEAR
);

1937 
Æpha
 = !
cﬁ‹m≠
 && (
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
);

1938 
wrôe_16bô
 = 
löór
 && (
di•œy
->
c⁄vît_to_8bô
 == 0);

1940 #ifde‡
PNG_BENIGN_ERRORS_SUPPORTED


1942 
	`≤g_£t_bíign_îr‹s
(
≤g_±r
, 0 );

1949 
ch™√ls
 = 
	`PNG_IMAGE_PIXEL_CHANNELS
(
image
->
f‹m©
);

1951 i‡(
image
->
width
 <0x7fffffffU/
ch™√ls
)

1953 
≤g_uöt_32
 
check
;

1954 
≤g_uöt_32
 
≤g_row_°ride
 = 
image
->
width
 * 
ch™√ls
;

1956 i‡(
di•œy
->
row_°ride
 == 0)

1957 
di•œy
->
row_°ride
 = (
≤g_öt_32
Ë
≤g_row_°ride
;

1959 i‡(
di•œy
->
row_°ride
 < 0)

1960 
check
 = (
≤g_uöt_32
)(-
di•œy
->
row_°ride
);

1963 
check
 = (
≤g_uöt_32
)
di•œy
->
row_°ride
;

1965 i‡(
check
 >
≤g_row_°ride
)

1971 i‡(
image
->
height
 > 0xffffffffU/
≤g_row_°ride
)

1972 
	`≤g_îr‹
(
image
->
›aque
->
≤g_±r
, "memory imageÅooÜarge");

1976 
	`≤g_îr‹
(
image
->
›aque
->
≤g_±r
, "suppliedÑow strideÅoo small");

1980 
	`≤g_îr‹
(
image
->
›aque
->
≤g_±r
, "imageÑow strideÅooÜarge");

1984 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_COLORMAP
) != 0)

1986 i‡(
di•œy
->
cﬁ‹m≠
 !
NULL
 && 
image
->
cﬁ‹m≠_íåõs
 > 0)

1988 
≤g_uöt_32
 
íåõs
 = 
image
->
cﬁ‹m≠_íåõs
;

1990 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
image
->
width
, image->
height
,

1991 
íåõs
 > 16 ? 8 : (entries > 4 ? 4 : (entries > 2 ? 2 : 1)),

1992 
PNG_COLOR_TYPE_PALETTE
, 
PNG_INTERLACE_NONE
,

1993 
PNG_COMPRESSION_TYPE_BASE
, 
PNG_FILTER_TYPE_BASE
);

1995 
	`≤g_image_£t_PLTE
(
di•œy
);

1999 
	`≤g_îr‹
(
image
->
›aque
->
≤g_±r
,

2004 
	`≤g_£t_IHDR
(
≤g_±r
, 
öfo_±r
, 
image
->
width
, image->
height
,

2005 
wrôe_16bô
 ? 16 : 8,

2006 ((
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
Ë? 
PNG_COLOR_MASK_COLOR
 : 0) +

2007 ((
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
Ë? 
PNG_COLOR_MASK_ALPHA
 : 0),

2008 
PNG_INTERLACE_NONE
, 
PNG_COMPRESSION_TYPE_BASE
, 
PNG_FILTER_TYPE_BASE
);

2016 i‡(
wrôe_16bô
 != 0)

2019 
	`≤g_£t_gAMA_fixed
(
≤g_±r
, 
öfo_±r
, 
PNG_GAMMA_LINEAR
);

2021 i‡((
image
->
Êags
 & 
PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB
) == 0)

2022 
	`≤g_£t_cHRM_fixed
(
≤g_±r
, 
öfo_±r
,

2031 i‡((
image
->
Êags
 & 
PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB
) == 0)

2032 
	`≤g_£t_sRGB
(
≤g_±r
, 
öfo_±r
, 
PNG_sRGB_INTENT_PERCEPTUAL
);

2038 
	`≤g_£t_gAMA_fixed
(
≤g_±r
, 
öfo_±r
, 
PNG_GAMMA_sRGB_INVERSE
);

2041 
	`≤g_wrôe_öfo
(
≤g_±r
, 
öfo_±r
);

2048 i‡(
wrôe_16bô
 != 0)

2050 
≤g_uöt_16
 
À
 = 0x0001;

2052 i‡((*(
≤g_c⁄°_byãp
Ë& 
À
) != 0)

2053 
	`≤g_£t_sw≠
(
≤g_±r
);

2056 #ifde‡
PNG_SIMPLIFIED_WRITE_BGR_SUPPORTED


2057 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_BGR
) != 0)

2059 i‡(
cﬁ‹m≠
 =0 && (
f‹m©
 & 
PNG_FORMAT_FLAG_COLOR
) != 0)

2060 
	`≤g_£t_bgr
(
≤g_±r
);

2061 
f‹m©
 &~
PNG_FORMAT_FLAG_BGR
;

2065 #ifde‡
PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED


2066 i‡((
f‹m©
 & 
PNG_FORMAT_FLAG_AFIRST
) != 0)

2068 i‡(
cﬁ‹m≠
 =0 && (
f‹m©
 & 
PNG_FORMAT_FLAG_ALPHA
) != 0)

2069 
	`≤g_£t_sw≠_Æpha
(
≤g_±r
);

2070 
f‹m©
 &~
PNG_FORMAT_FLAG_AFIRST
;

2077 i‡(
cﬁ‹m≠
 !0 && 
image
->
cﬁ‹m≠_íåõs
 <= 16)

2078 
	`≤g_£t_∑ckög
(
≤g_±r
);

2081 i‡((
f‹m©
 & ~(
≤g_uöt_32
)(
PNG_FORMAT_FLAG_COLOR
 | 
PNG_FORMAT_FLAG_LINEAR
 |

2082 
PNG_FORMAT_FLAG_ALPHA
 | 
PNG_FORMAT_FLAG_COLORMAP
)) != 0)

2083 
	`≤g_îr‹
(
≤g_±r
, "png_write_image: unsupportedÅransformation");

2086 
≤g_c⁄°_byãp
 
row
 = 
	`≤g_voidˇ°
’ng_c⁄°_byãp, 
di•œy
->
buf„r
);

2087 
±rdiff_t
 
row_byãs
 = 
di•œy
->
row_°ride
;

2089 i‡(
löór
 != 0)

2090 
row_byãs
 *( (
≤g_uöt_16
));

2092 i‡(
row_byãs
 < 0)

2093 
row
 +(
image
->
height
-1Ë* (-
row_byãs
);

2095 
di•œy
->
fú°_row
 = 
row
;

2096 
di•œy
->
row_byãs
 =Ñow_bytes;

2100 i‡((
image
->
Êags
 & 
PNG_IMAGE_FLAG_FAST
) != 0)

2102 
	`≤g_£t_fûãr
(
≤g_±r
, 
PNG_FILTER_TYPE_BASE
, 
PNG_NO_FILTERS
);

2108 #ifde‡
PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED


2109 
	`≤g_£t_com¥essi⁄_Àvñ
(
≤g_±r
, 3);

2117 i‡((
löór
 !0 && 
Æpha
 != 0 ) ||

2118 (
cﬁ‹m≠
 =0 && 
di•œy
->
c⁄vît_to_8bô
 != 0))

2120 
≤g_byãp
 
row
 = 
	`≤g_voidˇ°
’ng_byãp, 
	`≤g_mÆloc
(
≤g_±r
,

2121 
	`≤g_gë_rowbyãs
(
≤g_±r
, 
öfo_±r
)));

2122 
ªsu…
;

2124 
di•œy
->
loˇl_row
 = 
row
;

2125 i‡(
wrôe_16bô
 != 0)

2126 
ªsu…
 = 
	`≤g_ß„_execuã
(
image
, 
≤g_wrôe_image_16bô
, 
di•œy
);

2128 
ªsu…
 = 
	`≤g_ß„_execuã
(
image
, 
≤g_wrôe_image_8bô
, 
di•œy
);

2129 
di•œy
->
loˇl_row
 = 
NULL
;

2131 
	`≤g_‰ì
(
≤g_±r
, 
row
);

2134 i‡(
ªsu…
 == 0)

2143 
≤g_c⁄°_byãp
 
row
 = 
	`≤g_voidˇ°
’ng_c⁄°_byãp, 
di•œy
->
fú°_row
);

2144 
±rdiff_t
 
row_byãs
 = 
di•œy
->row_bytes;

2145 
≤g_uöt_32
 
y
 = 
image
->
height
;

2147 ; 
y
 > 0; --y)

2149 
	`≤g_wrôe_row
(
≤g_±r
, 
row
);

2150 
row
 +
row_byãs
;

2154 
	`≤g_wrôe_íd
(
≤g_±r
, 
öfo_±r
);

2156 
	}
}

2159 (
PNGCBAPI


2160 
image_mem‹y_wrôe
)(
≤g_°ru˘p
 
≤g_±r
, 
≤g_byãp
 
d©a
, 
size_t
 
size
)

2162 
≤g_image_wrôe_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_write_control*,

2163 
≤g_±r
->
io_±r
 );

2164 
≤g_Æloc_size_t
 
ob
 = 
di•œy
->
ouçut_byãs
;

2167 i‡(
size
 <((
≤g_Æloc_size_t
)-1Ë- 
ob
)

2170 i‡(
size
 > 0)

2172 i‡(
di•œy
->
mem‹y_byãs
 >
ob
+
size
)

2173 
	`mem˝y
(
di•œy
->
mem‹y
+
ob
, 
d©a
, 
size
);

2176 
di•œy
->
ouçut_byãs
 = 
ob
+
size
;

2181 
	`≤g_îr‹
(
≤g_±r
, "png_image_write_to_memory: PNGÅoo big");

2182 
	}
}

2184 (
PNGCBAPI


2185 
image_mem‹y_Êush
)(
≤g_°ru˘p
 
≤g_±r
)

2187 
	`PNG_UNUSED
(
≤g_±r
)

2188 
	}
}

2191 
	$≤g_image_wrôe_mem‹y
(
≤g_voidp
 
¨gumít
)

2193 
≤g_image_wrôe_c⁄åﬁ
 *
di•œy
 = 
	`≤g_voidˇ°
(png_image_write_control*,

2194 
¨gumít
);

2200 
	`≤g_£t_wrôe_‚
(
di•œy
->
image
->
›aque
->
≤g_±r
, display ,

2201 
image_mem‹y_wrôe
, 
image_mem‹y_Êush
);

2203  
	`≤g_image_wrôe_maö
(
di•œy
);

2204 
	}
}

2206 
PNGAPI


2207 
	$≤g_image_wrôe_to_mem‹y
(
≤g_imagï
 
image
, *
mem‹y
,

2208 
≤g_Æloc_size_t
 * 
PNG_RESTRICT
 
mem‹y_byãs
, 
c⁄vît_to_8bô
,

2209 c⁄° *
buf„r
, 
≤g_öt_32
 
row_°ride
, c⁄° *
cﬁ‹m≠
)

2212 i‡(
image
 !
NULL
 && image->
vîsi⁄
 =
PNG_IMAGE_VERSION
)

2214 i‡(
mem‹y_byãs
 !
NULL
 && 
buf„r
 != NULL)

2219 i‡(
mem‹y
 =
NULL
)

2220 *
mem‹y_byãs
 = 0;

2222 i‡(
	`≤g_image_wrôe_öô
(
image
) != 0)

2224 
≤g_image_wrôe_c⁄åﬁ
 
di•œy
;

2225 
ªsu…
;

2227 
	`mem£t
(&
di•œy
, 0, ( display));

2228 
di•œy
.
image
 = image;

2229 
di•œy
.
buf„r
 = buffer;

2230 
di•œy
.
row_°ride
 =Ñow_stride;

2231 
di•œy
.
cﬁ‹m≠
 = colormap;

2232 
di•œy
.
c⁄vît_to_8bô
 = convert_to_8bit;

2233 
di•œy
.
mem‹y
 = 
	`≤g_voidˇ°
(
≤g_byãp
, memory);

2234 
di•œy
.
mem‹y_byãs
 = *memory_bytes;

2235 
di•œy
.
ouçut_byãs
 = 0;

2237 
ªsu…
 = 
	`≤g_ß„_execuã
(
image
, 
≤g_image_wrôe_mem‹y
, &
di•œy
);

2238 
	`≤g_image_‰ì
(
image
);

2241 i‡(
ªsu…
)

2246 i‡(
mem‹y
 !
NULL
 && 
di•œy
.
ouçut_byãs
 > *
mem‹y_byãs
)

2247 
ªsu…
 = 0;

2249 *
mem‹y_byãs
 = 
di•œy
.
ouçut_byãs
;

2252  
ªsu…
;

2260  
	`≤g_image_îr‹
(
image
,

2264 i‡(
image
 !
NULL
)

2265  
	`≤g_image_îr‹
(
image
,

2270 
	}
}

2272 #ifde‡
PNG_SIMPLIFIED_WRITE_STDIO_SUPPORTED


2273 
PNGAPI


2274 
	$≤g_image_wrôe_to_°dio
(
≤g_imagï
 
image
, 
FILE
 *
fûe
, 
c⁄vît_to_8bô
,

2275 c⁄° *
buf„r
, 
≤g_öt_32
 
row_°ride
, c⁄° *
cﬁ‹m≠
)

2278 i‡(
image
 !
NULL
 && image->
vîsi⁄
 =
PNG_IMAGE_VERSION
)

2280 i‡(
fûe
 !
NULL
 && 
buf„r
 != NULL)

2282 i‡(
	`≤g_image_wrôe_öô
(
image
) != 0)

2284 
≤g_image_wrôe_c⁄åﬁ
 
di•œy
;

2285 
ªsu…
;

2291 
image
->
›aque
->
≤g_±r
->
io_±r
 = 
fûe
;

2293 
	`mem£t
(&
di•œy
, 0, ( display));

2294 
di•œy
.
image
 = image;

2295 
di•œy
.
buf„r
 = buffer;

2296 
di•œy
.
row_°ride
 =Ñow_stride;

2297 
di•œy
.
cﬁ‹m≠
 = colormap;

2298 
di•œy
.
c⁄vît_to_8bô
 = convert_to_8bit;

2300 
ªsu…
 = 
	`≤g_ß„_execuã
(
image
, 
≤g_image_wrôe_maö
, &
di•œy
);

2301 
	`≤g_image_‰ì
(
image
);

2302  
ªsu…
;

2310  
	`≤g_image_îr‹
(
image
,

2314 i‡(
image
 !
NULL
)

2315  
	`≤g_image_îr‹
(
image
,

2320 
	}
}

2322 
PNGAPI


2323 
	$≤g_image_wrôe_to_fûe
(
≤g_imagï
 
image
, c⁄° *
fûe_«me
,

2324 
c⁄vît_to_8bô
, c⁄° *
buf„r
, 
≤g_öt_32
 
row_°ride
,

2325 c⁄° *
cﬁ‹m≠
)

2328 i‡(
image
 !
NULL
 && image->
vîsi⁄
 =
PNG_IMAGE_VERSION
)

2330 i‡(
fûe_«me
 !
NULL
 && 
buf„r
 != NULL)

2332 
FILE
 *
Â
 = 
	`f›í
(
fûe_«me
, "wb");

2334 i‡(
Â
 !
NULL
)

2336 i‡(
	`≤g_image_wrôe_to_°dio
(
image
, 
Â
, 
c⁄vît_to_8bô
, 
buf„r
,

2337 
row_°ride
, 
cﬁ‹m≠
) != 0)

2339 
îr‹
;

2342 i‡(
	`fÊush
(
Â
Ë=0 && 
	`„º‹
(fp) == 0)

2344 i‡(
	`f˛o£
(
Â
) == 0)

2347 
îr‹
 = 
î∫o
;

2352 
îr‹
 = 
î∫o
;

2353 ()
	`f˛o£
(
Â
);

2356 ()
	`ªmove
(
fûe_«me
);

2360  
	`≤g_image_îr‹
(
image
, 
	`°ªº‹
(
îr‹
));

2366 ()
	`f˛o£
(
Â
);

2367 ()
	`ªmove
(
fûe_«me
);

2373  
	`≤g_image_îr‹
(
image
, 
	`°ªº‹
(
î∫o
));

2377  
	`≤g_image_îr‹
(
image
,

2381 i‡(
image
 !
NULL
)

2382  
	`≤g_image_îr‹
(
image
,

2387 
	}
}

	@pngwtran.c

14 
	~"≤g¥iv.h
"

16 #ifde‡
PNG_WRITE_SUPPORTED


17 #ifde‡
PNG_WRITE_TRANSFORMS_SUPPORTED


19 #ifde‡
PNG_WRITE_PACK_SUPPORTED


25 
	$≤g_do_∑ck
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
, 
≤g_uöt_32
 
bô_dïth
)

27 
	`≤g_debug
(1, "inÖng_do_pack");

29 i‡(
row_öfo
->
bô_dïth
 == 8 &&

30 
row_öfo
->
ch™√ls
 == 1)

32 ()
bô_dïth
)

36 
≤g_byãp
 
•
, 
dp
;

37 
mask
, 
v
;

38 
≤g_uöt_32
 
i
;

39 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

41 
•
 = 
row
;

42 
dp
 = 
row
;

43 
mask
 = 0x80;

44 
v
 = 0;

46 
i
 = 0; i < 
row_width
; i++)

48 i‡(*
•
 != 0)

49 
v
 |
mask
;

51 
•
++;

53 i‡(
mask
 > 1)

54 
mask
 >>= 1;

58 
mask
 = 0x80;

59 *
dp
 = (
≤g_byã
)
v
;

60 
dp
++;

61 
v
 = 0;

65 i‡(
mask
 != 0x80)

66 *
dp
 = (
≤g_byã
)
v
;

73 
≤g_byãp
 
•
, 
dp
;

74 
shi·
;

75 
v
;

76 
≤g_uöt_32
 
i
;

77 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

79 
•
 = 
row
;

80 
dp
 = 
row
;

81 
shi·
 = 6;

82 
v
 = 0;

84 
i
 = 0; i < 
row_width
; i++)

86 
≤g_byã
 
vÆue
;

88 
vÆue
 = (
≤g_byã
)(*
•
 & 0x03);

89 
v
 |(
vÆue
 << 
shi·
);

91 i‡(
shi·
 == 0)

93 
shi·
 = 6;

94 *
dp
 = (
≤g_byã
)
v
;

95 
dp
++;

96 
v
 = 0;

100 
shi·
 -= 2;

102 
•
++;

105 i‡(
shi·
 != 6)

106 *
dp
 = (
≤g_byã
)
v
;

113 
≤g_byãp
 
•
, 
dp
;

114 
shi·
;

115 
v
;

116 
≤g_uöt_32
 
i
;

117 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

119 
•
 = 
row
;

120 
dp
 = 
row
;

121 
shi·
 = 4;

122 
v
 = 0;

124 
i
 = 0; i < 
row_width
; i++)

126 
≤g_byã
 
vÆue
;

128 
vÆue
 = (
≤g_byã
)(*
•
 & 0x0f);

129 
v
 |(
vÆue
 << 
shi·
);

131 i‡(
shi·
 == 0)

133 
shi·
 = 4;

134 *
dp
 = (
≤g_byã
)
v
;

135 
dp
++;

136 
v
 = 0;

140 
shi·
 -= 4;

142 
•
++;

145 i‡(
shi·
 != 4)

146 *
dp
 = (
≤g_byã
)
v
;

155 
row_öfo
->
bô_dïth
 = (
≤g_byã
)bit_depth;

156 
row_öfo
->
pixñ_dïth
 = (
≤g_byã
)(
bô_dïth
 *Ñow_öfo->
ch™√ls
);

157 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
,

158 
row_öfo
->
width
);

160 
	}
}

163 #ifde‡
PNG_WRITE_SHIFT_SUPPORTED


172 
	$≤g_do_shi·
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

173 
≤g_c⁄°_cﬁ‹_8p
 
bô_dïth
)

175 
	`≤g_debug
(1, "inÖng_do_shift");

177 i‡(
row_öfo
->
cﬁ‹_ty≥
 !
PNG_COLOR_TYPE_PALETTE
)

179 
shi·_°¨t
[4], 
shi·_dec
[4];

180 
ch™√ls
 = 0;

182 i‡((
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

184 
shi·_°¨t
[
ch™√ls
] = 
row_öfo
->
bô_dïth
 - bô_dïth->
ªd
;

185 
shi·_dec
[
ch™√ls
] = 
bô_dïth
->
ªd
;

186 
ch™√ls
++;

188 
shi·_°¨t
[
ch™√ls
] = 
row_öfo
->
bô_dïth
 - bô_dïth->
gªí
;

189 
shi·_dec
[
ch™√ls
] = 
bô_dïth
->
gªí
;

190 
ch™√ls
++;

192 
shi·_°¨t
[
ch™√ls
] = 
row_öfo
->
bô_dïth
 - bô_dïth->
blue
;

193 
shi·_dec
[
ch™√ls
] = 
bô_dïth
->
blue
;

194 
ch™√ls
++;

199 
shi·_°¨t
[
ch™√ls
] = 
row_öfo
->
bô_dïth
 - bô_dïth->
gøy
;

200 
shi·_dec
[
ch™√ls
] = 
bô_dïth
->
gøy
;

201 
ch™√ls
++;

204 i‡((
row_öfo
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

206 
shi·_°¨t
[
ch™√ls
] = 
row_öfo
->
bô_dïth
 - bô_dïth->
Æpha
;

207 
shi·_dec
[
ch™√ls
] = 
bô_dïth
->
Æpha
;

208 
ch™√ls
++;

212 i‡(
row_öfo
->
bô_dïth
 < 8)

214 
≤g_byãp
 
bp
 = 
row
;

215 
size_t
 
i
;

216 
mask
;

217 
size_t
 
row_byãs
 = 
row_öfo
->
rowbyãs
;

219 i‡(
bô_dïth
->
gøy
 =1 && 
row_öfo
->bit_depth == 2)

220 
mask
 = 0x55;

222 i‡(
row_öfo
->
bô_dïth
 =4 && bô_dïth->
gøy
 == 3)

223 
mask
 = 0x11;

226 
mask
 = 0xff;

228 
i
 = 0; i < 
row_byãs
; i++, 
bp
++)

230 
j
;

231 
v
, 
out
;

233 
v
 = *
bp
;

234 
out
 = 0;

236 
j
 = 
shi·_°¨t
[0]; j > -
shi·_dec
[0]; j -= shift_dec[0])

238 i‡(
j
 > 0)

239 
out
 |
v
 << 
j
;

242 
out
 |(
v
 >> (-
j
)Ë& 
mask
;

245 *
bp
 = (
≤g_byã
)(
out
 & 0xff);

249 i‡(
row_öfo
->
bô_dïth
 == 8)

251 
≤g_byãp
 
bp
 = 
row
;

252 
≤g_uöt_32
 
i
;

253 
≤g_uöt_32
 
i°›
 = 
ch™√ls
 * 
row_öfo
->
width
;

255 
i
 = 0; i < 
i°›
; i++, 
bp
++)

257 
c
 = 
i
%
ch™√ls
;

258 
j
;

259 
v
, 
out
;

261 
v
 = *
bp
;

262 
out
 = 0;

264 
j
 = 
shi·_°¨t
[
c
]; j > -
shi·_dec
[c]; j -= shift_dec[c])

266 i‡(
j
 > 0)

267 
out
 |
v
 << 
j
;

270 
out
 |
v
 >> (-
j
);

273 *
bp
 = (
≤g_byã
)(
out
 & 0xff);

279 
≤g_byãp
 
bp
;

280 
≤g_uöt_32
 
i
;

281 
≤g_uöt_32
 
i°›
 = 
ch™√ls
 * 
row_öfo
->
width
;

283 
bp
 = 
row
, 
i
 = 0; i < 
i°›
; i++)

285 
c
 = 
i
%
ch™√ls
;

286 
j
;

287 
vÆue
, 
v
;

289 
v
 = 
	`≤g_gë_uöt_16
(
bp
);

290 
vÆue
 = 0;

292 
j
 = 
shi·_°¨t
[
c
]; j > -
shi·_dec
[c]; j -= shift_dec[c])

294 i‡(
j
 > 0)

295 
vÆue
 |
v
 << 
j
;

298 
vÆue
 |
v
 >> (-
j
);

300 *
bp
++ = (
≤g_byã
)((
vÆue
 >> 8) & 0xff);

301 *
bp
++ = (
≤g_byã
)(
vÆue
 & 0xff);

305 
	}
}

308 #ifde‡
PNG_WRITE_SWAP_ALPHA_SUPPORTED


310 
	$≤g_do_wrôe_sw≠_Æpha
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

312 
	`≤g_debug
(1, "inÖng_do_write_swap_alpha");

315 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

317 i‡(
row_öfo
->
bô_dïth
 == 8)

320 
≤g_byãp
 
•
, 
dp
;

321 
≤g_uöt_32
 
i
;

322 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

324 
i
 = 0, 
•
 = 
dp
 = 
row
; i < 
row_width
; i++)

326 
≤g_byã
 
ßve
 = *(
•
++);

327 *(
dp
++Ë*(
•
++);

328 *(
dp
++Ë*(
•
++);

329 *(
dp
++Ë*(
•
++);

330 *(
dp
++Ë
ßve
;

334 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


338 
≤g_byãp
 
•
, 
dp
;

339 
≤g_uöt_32
 
i
;

340 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

342 
i
 = 0, 
•
 = 
dp
 = 
row
; i < 
row_width
; i++)

344 
≤g_byã
 
ßve
[2];

345 
ßve
[0] = *(
•
++);

346 
ßve
[1] = *(
•
++);

347 *(
dp
++Ë*(
•
++);

348 *(
dp
++Ë*(
•
++);

349 *(
dp
++Ë*(
•
++);

350 *(
dp
++Ë*(
•
++);

351 *(
dp
++Ë*(
•
++);

352 *(
dp
++Ë*(
•
++);

353 *(
dp
++Ë
ßve
[0];

354 *(
dp
++Ë
ßve
[1];

360 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

362 i‡(
row_öfo
->
bô_dïth
 == 8)

365 
≤g_byãp
 
•
, 
dp
;

366 
≤g_uöt_32
 
i
;

367 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

369 
i
 = 0, 
•
 = 
dp
 = 
row
; i < 
row_width
; i++)

371 
≤g_byã
 
ßve
 = *(
•
++);

372 *(
dp
++Ë*(
•
++);

373 *(
dp
++Ë
ßve
;

377 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


381 
≤g_byãp
 
•
, 
dp
;

382 
≤g_uöt_32
 
i
;

383 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

385 
i
 = 0, 
•
 = 
dp
 = 
row
; i < 
row_width
; i++)

387 
≤g_byã
 
ßve
[2];

388 
ßve
[0] = *(
•
++);

389 
ßve
[1] = *(
•
++);

390 *(
dp
++Ë*(
•
++);

391 *(
dp
++Ë*(
•
++);

392 *(
dp
++Ë
ßve
[0];

393 *(
dp
++Ë
ßve
[1];

399 
	}
}

402 #ifde‡
PNG_WRITE_INVERT_ALPHA_SUPPORTED


404 
	$≤g_do_wrôe_övît_Æpha
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
)

406 
	`≤g_debug
(1, "inÖng_do_write_invert_alpha");

409 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
)

411 i‡(
row_öfo
->
bô_dïth
 == 8)

414 
≤g_byãp
 
•
, 
dp
;

415 
≤g_uöt_32
 
i
;

416 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

418 
i
 = 0, 
•
 = 
dp
 = 
row
; i < 
row_width
; i++)

425 
•
+=3; 
dp
 = sp;

426 *
dp
 = (
≤g_byã
)(255 - *(
•
++));

430 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


434 
≤g_byãp
 
•
, 
dp
;

435 
≤g_uöt_32
 
i
;

436 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

438 
i
 = 0, 
•
 = 
dp
 = 
row
; i < 
row_width
; i++)

448 
•
+=6; 
dp
 = sp;

449 *(
dp
++Ë(
≤g_byã
)(255 - *(
•
++));

450 *
dp
 = (
≤g_byã
)(255 - *(
•
++));

456 i‡(
row_öfo
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY_ALPHA
)

458 i‡(
row_öfo
->
bô_dïth
 == 8)

461 
≤g_byãp
 
•
, 
dp
;

462 
≤g_uöt_32
 
i
;

463 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

465 
i
 = 0, 
•
 = 
dp
 = 
row
; i < 
row_width
; i++)

467 *(
dp
++Ë*(
•
++);

468 *(
dp
++Ë(
≤g_byã
)(255 - *(
•
++));

472 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


476 
≤g_byãp
 
•
, 
dp
;

477 
≤g_uöt_32
 
i
;

478 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

480 
i
 = 0, 
•
 = 
dp
 = 
row
; i < 
row_width
; i++)

486 
•
+=2; 
dp
 = sp;

487 *(
dp
++Ë(
≤g_byã
)(255 - *(
•
++));

488 *
dp
 = (
≤g_byã
)(255 - *(
•
++));

494 
	}
}

501 
	$≤g_do_wrôe_å™sf‹m©i⁄s
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
)

503 
	`≤g_debug
(1, "inÖng_do_write_transformations");

505 i‡(
≤g_±r
 =
NULL
)

508 #ifde‡
PNG_WRITE_USER_TRANSFORM_SUPPORTED


509 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_USER_TRANSFORM
) != 0)

510 i‡(
≤g_±r
->
wrôe_u£r_å™sf‹m_‚
 !
NULL
)

511 (*(
≤g_±r
->
wrôe_u£r_å™sf‹m_‚
))

513 (
≤g_±r
,

514 
row_öfo
,

521 
≤g_±r
->
row_buf
 + 1);

524 #ifde‡
PNG_WRITE_FILLER_SUPPORTED


525 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_FILLER
) != 0)

526 
	`≤g_do_°rù_ch™√l
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

527 !(
≤g_±r
->
Êags
 & 
PNG_FLAG_FILLER_AFTER
));

530 #ifde‡
PNG_WRITE_PACKSWAP_SUPPORTED


531 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACKSWAP
) != 0)

532 
	`≤g_do_∑cksw≠
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

535 #ifde‡
PNG_WRITE_PACK_SUPPORTED


536 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_PACK
) != 0)

537 
	`≤g_do_∑ck
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

538 (
≤g_uöt_32
)
≤g_±r
->
bô_dïth
);

541 #ifde‡
PNG_WRITE_SWAP_SUPPORTED


542 #ifde‡
PNG_16BIT_SUPPORTED


543 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SWAP_BYTES
) != 0)

544 
	`≤g_do_sw≠
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

548 #ifde‡
PNG_WRITE_SHIFT_SUPPORTED


549 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SHIFT
) != 0)

550 
	`≤g_do_shi·
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1,

551 &(
≤g_±r
->
shi·
));

554 #ifde‡
PNG_WRITE_SWAP_ALPHA_SUPPORTED


555 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_SWAP_ALPHA
) != 0)

556 
	`≤g_do_wrôe_sw≠_Æpha
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

559 #ifde‡
PNG_WRITE_INVERT_ALPHA_SUPPORTED


560 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INVERT_ALPHA
) != 0)

561 
	`≤g_do_wrôe_övît_Æpha
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

564 #ifde‡
PNG_WRITE_BGR_SUPPORTED


565 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_BGR
) != 0)

566 
	`≤g_do_bgr
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

569 #ifde‡
PNG_WRITE_INVERT_SUPPORTED


570 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INVERT_MONO
) != 0)

571 
	`≤g_do_övît
(
row_öfo
, 
≤g_±r
->
row_buf
 + 1);

573 
	}
}

	@pngwutil.c

14 
	~"≤g¥iv.h
"

16 #ifde‡
PNG_WRITE_SUPPORTED


18 #ifde‡
PNG_WRITE_INT_FUNCTIONS_SUPPORTED


23 
PNGAPI


24 
	$≤g_ßve_uöt_32
(
≤g_byãp
 
buf
, 
≤g_uöt_32
 
i
)

26 
buf
[0] = (
≤g_byã
)((
i
 >> 24) & 0xffU);

27 
buf
[1] = (
≤g_byã
)((
i
 >> 16) & 0xffU);

28 
buf
[2] = (
≤g_byã
)((
i
 >> 8) & 0xffU);

29 
buf
[3] = (
≤g_byã
)–
i
 & 0xffU);

30 
	}
}

36 
PNGAPI


37 
	$≤g_ßve_uöt_16
(
≤g_byãp
 
buf
, 
i
)

39 
buf
[0] = (
≤g_byã
)((
i
 >> 8) & 0xffU);

40 
buf
[1] = (
≤g_byã
)–
i
 & 0xffU);

41 
	}
}

50 
PNGAPI


51 
	$≤g_wrôe_sig
(
≤g_°ru˘Ω
 
≤g_±r
)

53 
≤g_byã
 
≤g_sig«tuª
[8] = {137, 80, 78, 71, 13, 10, 26, 10};

55 #ifde‡
PNG_IO_STATE_SUPPORTED


57 
≤g_±r
->
io_°©e
 = 
PNG_IO_WRITING
 | 
PNG_IO_SIGNATURE
;

61 
	`≤g_wrôe_d©a
(
≤g_±r
, &
≤g_sig«tuª
[≤g_±r->
sig_byãs
],

62 (
size_t
)(8 - 
≤g_±r
->
sig_byãs
));

64 i‡(
≤g_±r
->
sig_byãs
 < 3)

65 
≤g_±r
->
mode
 |
PNG_HAVE_PNG_SIGNATURE
;

66 
	}
}

73 
	$≤g_wrôe_chunk_hódî
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
chunk_«me
,

74 
≤g_uöt_32
 
Àngth
)

76 
≤g_byã
 
buf
[8];

78 #i‡
	`deföed
(
PNG_DEBUG
) && (PNG_DEBUG > 0)

79 
	`PNG_CSTRING_FROM_CHUNK
(
buf
, 
chunk_«me
);

80 
	`≤g_debug2
(0, "Wrôög %†chunk,Üígth = %lu", 
buf
, ()
Àngth
);

83 i‡(
≤g_±r
 =
NULL
)

86 #ifde‡
PNG_IO_STATE_SUPPORTED


90 
≤g_±r
->
io_°©e
 = 
PNG_IO_WRITING
 | 
PNG_IO_CHUNK_HDR
;

94 
	`≤g_ßve_uöt_32
(
buf
, 
Àngth
);

95 
	`≤g_ßve_uöt_32
(
buf
 + 4, 
chunk_«me
);

96 
	`≤g_wrôe_d©a
(
≤g_±r
, 
buf
, 8);

99 
≤g_±r
->
chunk_«me
 = chunk_name;

102 
	`≤g_ª£t_¸c
(
≤g_±r
);

104 
	`≤g_ˇlcuœã_¸c
(
≤g_±r
, 
buf
 + 4, 4);

106 #ifde‡
PNG_IO_STATE_SUPPORTED


110 
≤g_±r
->
io_°©e
 = 
PNG_IO_WRITING
 | 
PNG_IO_CHUNK_DATA
;

112 
	}
}

114 
PNGAPI


115 
	$≤g_wrôe_chunk_°¨t
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
chunk_°rög
,

116 
≤g_uöt_32
 
Àngth
)

118 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
	`PNG_CHUNK_FROM_STRING
(
chunk_°rög
), 
Àngth
);

119 
	}
}

126 
PNGAPI


127 
	$≤g_wrôe_chunk_d©a
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
d©a
, 
size_t
 
Àngth
)

130 i‡(
≤g_±r
 =
NULL
)

133 i‡(
d©a
 !
NULL
 && 
Àngth
 > 0)

135 
	`≤g_wrôe_d©a
(
≤g_±r
, 
d©a
, 
Àngth
);

140 
	`≤g_ˇlcuœã_¸c
(
≤g_±r
, 
d©a
, 
Àngth
);

142 
	}
}

145 
PNGAPI


146 
	$≤g_wrôe_chunk_íd
(
≤g_°ru˘Ω
 
≤g_±r
)

148 
≤g_byã
 
buf
[4];

150 i‡(
≤g_±r
 =
NULL
) ;

152 #ifde‡
PNG_IO_STATE_SUPPORTED


156 
≤g_±r
->
io_°©e
 = 
PNG_IO_WRITING
 | 
PNG_IO_CHUNK_CRC
;

160 
	`≤g_ßve_uöt_32
(
buf
, 
≤g_±r
->
¸c
);

162 
	`≤g_wrôe_d©a
(
≤g_±r
, 
buf
, 4);

163 
	}
}

175 
	$≤g_wrôe_com∂ëe_chunk
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
chunk_«me
,

176 
≤g_c⁄°_byãp
 
d©a
, 
size_t
 
Àngth
)

178 i‡(
≤g_±r
 =
NULL
)

182 i‡(
Àngth
 > 
PNG_UINT_31_MAX
)

183 
	`≤g_îr‹
(
≤g_±r
, "lengthÉxceeds PNG maximum");

185 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
chunk_«me
, (
≤g_uöt_32
)
Àngth
);

186 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
d©a
, 
Àngth
);

187 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

188 
	}
}

191 
PNGAPI


192 
	$≤g_wrôe_chunk
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
chunk_°rög
,

193 
≤g_c⁄°_byãp
 
d©a
, 
size_t
 
Àngth
)

195 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
	`PNG_CHUNK_FROM_STRING
(
chunk_°rög
), 
d©a
,

196 
Àngth
);

197 
	}
}

203 
≤g_Æloc_size_t


204 
	$≤g_image_size
(
≤g_°ru˘Ω
 
≤g_±r
)

209 
≤g_uöt_32
 
h
 = 
≤g_±r
->
height
;

211 i‡(
≤g_±r
->
rowbyãs
 < 32768 && 
h
 < 32768)

213 i‡(
≤g_±r
->
öãæa˚d
 != 0)

218 
≤g_uöt_32
 
w
 = 
≤g_±r
->
width
;

219 
pd
 = 
≤g_±r
->
pixñ_dïth
;

220 
≤g_Æloc_size_t
 
cb_ba£
;

221 
∑ss
;

223 
cb_ba£
=0, 
∑ss
=0;Öass<=6; ++pass)

225 
≤g_uöt_32
 
pw
 = 
	`PNG_PASS_COLS
(
w
, 
∑ss
);

227 i‡(
pw
 > 0)

228 
cb_ba£
 +(
	`PNG_ROWBYTES
(
pd
, 
pw
)+1Ë* 
	`PNG_PASS_ROWS
(
h
, 
∑ss
);

231  
cb_ba£
;

235  (
≤g_±r
->
rowbyãs
+1Ë* 
h
;

240 
	}
}

242 #ifde‡
PNG_WRITE_OPTIMIZE_CMF_SUPPORTED


250 
	$›timize_cmf
(
≤g_byãp
 
d©a
, 
≤g_Æloc_size_t
 
d©a_size
)

255 i‡(
d©a_size
 <= 16384)

257 
z_cmf
 = 
d©a
[0];

259 i‡((
z_cmf
 & 0x0f) == 8 && (z_cmf & 0xf0) <= 0x70)

261 
z_cöfo
;

262 
hÆf_z_wödow_size
;

264 
z_cöfo
 = 
z_cmf
 >> 4;

265 
hÆf_z_wödow_size
 = 1U << (
z_cöfo
 + 7);

267 i‡(
d©a_size
 <
hÆf_z_wödow_size
)

269 
tmp
;

273 
hÆf_z_wödow_size
 >>= 1;

274 --
z_cöfo
;

276 
z_cöfo
 > 0 && 
d©a_size
 <
hÆf_z_wödow_size
);

278 
z_cmf
 = (z_cm‡& 0x0fË| (
z_cöfo
 << 4);

280 
d©a
[0] = (
≤g_byã
)
z_cmf
;

281 
tmp
 = 
d©a
[1] & 0xe0;

282 
tmp
 +0x1‡- ((
z_cmf
 << 8) +Åmp) % 0x1f;

283 
d©a
[1] = (
≤g_byã
)
tmp
;

287 
	}
}

292 
	$≤g_deÊ©e_˛aim
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
ow√r
,

293 
≤g_Æloc_size_t
 
d©a_size
)

295 i‡(
≤g_±r
->
zow√r
 != 0)

297 #i‡
	`deföed
(
PNG_WARNINGS_SUPPORTED
Ë|| deföed(
PNG_ERROR_TEXT_SUPPORTED
)

298 
msg
[64];

300 
	`PNG_STRING_FROM_CHUNK
(
msg
, 
ow√r
);

301 
msg
[4] = ':';

302 
msg
[5] = ' ';

303 
	`PNG_STRING_FROM_CHUNK
(
msg
+6, 
≤g_±r
->
zow√r
);

308 ()
	`≤g_ß„ˇt
(
msg
, ( msg), 10, " using zstream");

310 #i‡
PNG_RELEASE_BUILD


311 
	`≤g_w¨nög
(
≤g_±r
, 
msg
);

314 i‡(
≤g_±r
->
zow√r
 =
≤g_IDAT
)

316 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("in use by IDAT");

317  
Z_STREAM_ERROR
;

320 
≤g_±r
->
zow√r
 = 0;

322 
	`≤g_îr‹
(
≤g_±r
, 
msg
);

327 
Àvñ
 = 
≤g_±r
->
zlib_Àvñ
;

328 
mëhod
 = 
≤g_±r
->
zlib_mëhod
;

329 
wödowBôs
 = 
≤g_±r
->
zlib_wödow_bôs
;

330 
memLevñ
 = 
≤g_±r
->
zlib_mem_Àvñ
;

331 
°øãgy
;

332 
ªt
;

334 i‡(
ow√r
 =
≤g_IDAT
)

336 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ZLIB_CUSTOM_STRATEGY
) != 0)

337 
°øãgy
 = 
≤g_±r
->
zlib_°øãgy
;

339 i‡(
≤g_±r
->
do_fûãr
 !
PNG_FILTER_NONE
)

340 
°øãgy
 = 
PNG_Z_DEFAULT_STRATEGY
;

343 
°øãgy
 = 
PNG_Z_DEFAULT_NOFILTER_STRATEGY
;

348 #ifde‡
PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


349 
Àvñ
 = 
≤g_±r
->
zlib_ãxt_Àvñ
;

350 
mëhod
 = 
≤g_±r
->
zlib_ãxt_mëhod
;

351 
wödowBôs
 = 
≤g_±r
->
zlib_ãxt_wödow_bôs
;

352 
memLevñ
 = 
≤g_±r
->
zlib_ãxt_mem_Àvñ
;

353 
°øãgy
 = 
≤g_±r
->
zlib_ãxt_°øãgy
;

360 
°øãgy
 = 
Z_DEFAULT_STRATEGY
;

371 i‡(
d©a_size
 <= 16384)

378 
hÆf_wödow_size
 = 1U << (
wödowBôs
-1);

380 
d©a_size
 + 262 <
hÆf_wödow_size
)

382 
hÆf_wödow_size
 >>= 1;

383 --
wödowBôs
;

388 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_INITIALIZED
) != 0 &&

389 (
≤g_±r
->
zlib_£t_Àvñ
 !
Àvñ
 ||

390 
≤g_±r
->
zlib_£t_mëhod
 !
mëhod
 ||

391 
≤g_±r
->
zlib_£t_wödow_bôs
 !
wödowBôs
 ||

392 
≤g_±r
->
zlib_£t_mem_Àvñ
 !
memLevñ
 ||

393 
≤g_±r
->
zlib_£t_°øãgy
 !
°øãgy
))

395 i‡(
	`deÊ©eEnd
(&
≤g_±r
->
z°ªam
Ë!
Z_OK
)

396 
	`≤g_w¨nög
(
≤g_±r
, "deflateEnd failed (ignored)");

398 
≤g_±r
->
Êags
 &~
PNG_FLAG_ZSTREAM_INITIALIZED
;

404 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
NULL
;

405 
≤g_±r
->
z°ªam
.
avaû_ö
 = 0;

406 
≤g_±r
->
z°ªam
.
√xt_out
 = 
NULL
;

407 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

412 i‡((
≤g_±r
->
Êags
 & 
PNG_FLAG_ZSTREAM_INITIALIZED
) != 0)

413 
ªt
 = 
	`deÊ©eRe£t
(&
≤g_±r
->
z°ªam
);

417 
ªt
 = 
	`deÊ©eInô2
(&
≤g_±r
->
z°ªam
, 
Àvñ
, 
mëhod
, 
wödowBôs
,

418 
memLevñ
, 
°øãgy
);

420 i‡(
ªt
 =
Z_OK
)

421 
≤g_±r
->
Êags
 |
PNG_FLAG_ZSTREAM_INITIALIZED
;

427 i‡(
ªt
 =
Z_OK
)

428 
≤g_±r
->
zow√r
 = 
ow√r
;

431 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
ªt
);

433  
ªt
;

435 
	}
}

439 
	$≤g_‰ì_buf„r_li°
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_com¥essi⁄_buf„Ω
 *
li°p
)

441 
≤g_com¥essi⁄_buf„Ω
 
li°
 = *
li°p
;

443 i‡(
li°
 !
NULL
)

445 *
li°p
 = 
NULL
;

449 
≤g_com¥essi⁄_buf„Ω
 
√xt
 = 
li°
->next;

451 
	`≤g_‰ì
(
≤g_±r
, 
li°
);

452 
li°
 = 
√xt
;

454 
li°
 !
NULL
);

456 
	}
}

458 #ifde‡
PNG_WRITE_COMPRESSED_TEXT_SUPPORTED


471 
≤g_c⁄°_byãp
 
	möput
;

472 
≤g_Æloc_size_t
 
	möput_Àn
;

473 
≤g_uöt_32
 
	mouçut_Àn
;

474 
≤g_byã
 
	mouçut
[1024];

475 } 
	tcom¥essi⁄_°©e
;

478 
	$≤g_ãxt_com¥ess_öô
(
com¥essi⁄_°©e
 *
comp
, 
≤g_c⁄°_byãp
 
öput
,

479 
≤g_Æloc_size_t
 
öput_Àn
)

481 
comp
->
öput
 = input;

482 
comp
->
öput_Àn
 = input_len;

483 
comp
->
ouçut_Àn
 = 0;

484 
	}
}

488 
	$≤g_ãxt_com¥ess
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
chunk_«me
,

489 
com¥essi⁄_°©e
 *
comp
, 
≤g_uöt_32
 
¥efix_Àn
)

491 
ªt
;

503 
ªt
 = 
	`≤g_deÊ©e_˛aim
(
≤g_±r
, 
chunk_«me
, 
comp
->
öput_Àn
);

505 i‡(
ªt
 !
Z_OK
)

506  
ªt
;

515 
≤g_com¥essi⁄_buf„Ω
 *
íd
 = &
≤g_±r
->
zbuf„r_li°
;

516 
≤g_Æloc_size_t
 
öput_Àn
 = 
comp
->input_len;

517 
≤g_uöt_32
 
ouçut_Àn
;

520 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
	`PNGZ_INPUT_CAST
(
comp
->
öput
);

521 
≤g_±r
->
z°ªam
.
avaû_ö
 = 0;

522 
≤g_±r
->
z°ªam
.
√xt_out
 = 
comp
->
ouçut
;

523 
≤g_±r
->
z°ªam
.
avaû_out
 = ( 
comp
->
ouçut
);

525 
ouçut_Àn
 = 
≤g_±r
->
z°ªam
.
avaû_out
;

529 
uI¡
 
avaû_ö
 = 
ZLIB_IO_MAX
;

531 i‡(
avaû_ö
 > 
öput_Àn
)

532 
avaû_ö
 = (
uI¡
)
öput_Àn
;

534 
öput_Àn
 -
avaû_ö
;

536 
≤g_±r
->
z°ªam
.
avaû_ö
 =ávail_in;

538 i‡(
≤g_±r
->
z°ªam
.
avaû_out
 == 0)

540 
≤g_com¥essi⁄_buf„r
 *
√xt
;

545 i‡(
ouçut_Àn
 + 
¥efix_Àn
 > 
PNG_UINT_31_MAX
)

547 
ªt
 = 
Z_MEM_ERROR
;

554 
√xt
 = *
íd
;

555 i‡(
√xt
 =
NULL
)

557 
√xt
 = 
	`≤g_voidˇ°
(
≤g_com¥essi⁄_buf„Ω
, 
≤g_mÆloc_ba£


558 (
≤g_±r
, 
	`PNG_COMPRESSION_BUFFER_SIZE
(png_ptr)));

560 i‡(
√xt
 =
NULL
)

562 
ªt
 = 
Z_MEM_ERROR
;

567 
√xt
->√xà
NULL
;

568 *
íd
 = 
√xt
;

571 
≤g_±r
->
z°ªam
.
√xt_out
 = 
√xt
->
ouçut
;

572 
≤g_±r
->
z°ªam
.
avaû_out
 =Öng_±r->
zbuf„r_size
;

573 
ouçut_Àn
 +
≤g_±r
->
z°ªam
.
avaû_out
;

576 
íd
 = &
√xt
->next;

580 
ªt
 = 
	`deÊ©e
(&
≤g_±r
->
z°ªam
,

581 
öput_Àn
 > 0 ? 
Z_NO_FLUSH
 : 
Z_FINISH
);

586 
öput_Àn
 +
≤g_±r
->
z°ªam
.
avaû_ö
;

587 
≤g_±r
->
z°ªam
.
avaû_ö
 = 0;

589 
ªt
 =
Z_OK
);

594 
ouçut_Àn
 -
≤g_±r
->
z°ªam
.
avaû_out
;

595 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

596 
comp
->
ouçut_Àn
 = output_len;

602 i‡(
ouçut_Àn
 + 
¥efix_Àn
 >
PNG_UINT_31_MAX
)

604 
≤g_±r
->
z°ªam
.
msg
 = 
	`PNGZ_MSG_CAST
("compressed dataÅooÜong");

605 
ªt
 = 
Z_MEM_ERROR
;

609 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
ªt
);

612 
≤g_±r
->
zow√r
 = 0;

617 i‡(
ªt
 =
Z_STREAM_END
 && 
öput_Àn
 == 0)

619 #ifde‡
PNG_WRITE_OPTIMIZE_CMF_SUPPORTED


621 
	`›timize_cmf
(
comp
->
ouçut
, comp->
öput_Àn
);

627  
Z_OK
;

631  
ªt
;

633 
	}
}

637 
	$≤g_wrôe_com¥es£d_d©a_out
(
≤g_°ru˘Ω
 
≤g_±r
, 
com¥essi⁄_°©e
 *
comp
)

639 
≤g_uöt_32
 
ouçut_Àn
 = 
comp
->output_len;

640 
≤g_c⁄°_byãp
 
ouçut
 = 
comp
->output;

641 
≤g_uöt_32
 
avaû
 = ( 
comp
->
ouçut
);

642 
≤g_com¥essi⁄_buf„r
 *
√xt
 = 
≤g_±r
->
zbuf„r_li°
;

646 i‡(
avaû
 > 
ouçut_Àn
)

647 
avaû
 = 
ouçut_Àn
;

649 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
ouçut
, 
avaû
);

651 
ouçut_Àn
 -
avaû
;

653 i‡(
ouçut_Àn
 =0 || 
√xt
 =
NULL
)

656 
avaû
 = 
≤g_±r
->
zbuf„r_size
;

657 
ouçut
 = 
√xt
->output;

658 
√xt
 =Çext->next;

662 i‡(
ouçut_Àn
 > 0)

663 
	`≤g_îr‹
(
≤g_±r
, "error writingáncillary chunked compressed data");

664 
	}
}

672 
	$≤g_wrôe_IHDR
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
width
,Öng_uöt_32 
height
,

673 
bô_dïth
, 
cﬁ‹_ty≥
, 
com¥essi⁄_ty≥
, 
fûãr_ty≥
,

674 
öãæa˚_ty≥
)

676 
≤g_byã
 
buf
[13];

677 
is_övÆid_dïth
;

679 
	`≤g_debug
(1, "inÖng_write_IHDR");

682 
cﬁ‹_ty≥
)

684 
PNG_COLOR_TYPE_GRAY
:

685 
bô_dïth
)

691 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


694 
≤g_±r
->
ch™√ls
 = 1; ;

697 
	`≤g_îr‹
(
≤g_±r
,

702 
PNG_COLOR_TYPE_RGB
:

703 
is_övÆid_dïth
 = (
bô_dïth
 != 8);

704 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


705 
is_övÆid_dïth
 = (is_övÆid_dïth && 
bô_dïth
 != 16);

707 i‡(
is_övÆid_dïth
)

708 
	`≤g_îr‹
(
≤g_±r
, "Invalid bit depth for RGB image");

710 
≤g_±r
->
ch™√ls
 = 3;

713 
PNG_COLOR_TYPE_PALETTE
:

714 
bô_dïth
)

720 
≤g_±r
->
ch™√ls
 = 1;

724 
	`≤g_îr‹
(
≤g_±r
, "Invalid bit depth forÖaletted image");

728 
PNG_COLOR_TYPE_GRAY_ALPHA
:

729 
is_övÆid_dïth
 = (
bô_dïth
 != 8);

730 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


731 
is_övÆid_dïth
 = (is_övÆid_dïth && 
bô_dïth
 != 16);

733 i‡(
is_övÆid_dïth
)

734 
	`≤g_îr‹
(
≤g_±r
, "Invalid bit depth for grayscale+alpha image");

736 
≤g_±r
->
ch™√ls
 = 2;

739 
PNG_COLOR_TYPE_RGB_ALPHA
:

740 
is_övÆid_dïth
 = (
bô_dïth
 != 8);

741 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


742 
is_övÆid_dïth
 = (is_övÆid_dïth && 
bô_dïth
 != 16);

744 i‡(
is_övÆid_dïth
)

745 
	`≤g_îr‹
(
≤g_±r
, "Invalid bit depth for RGBA image");

747 
≤g_±r
->
ch™√ls
 = 4;

751 
	`≤g_îr‹
(
≤g_±r
, "Invalid image colorÅype specified");

754 i‡(
com¥essi⁄_ty≥
 !
PNG_COMPRESSION_TYPE_BASE
)

756 
	`≤g_w¨nög
(
≤g_±r
, "Invalid compressionÅype specified");

757 
com¥essi⁄_ty≥
 = 
PNG_COMPRESSION_TYPE_BASE
;

770 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


771 !((
≤g_±r
->
mng_„©uªs_≥rmôãd
 & 
PNG_FLAG_MNG_FILTER_64
) != 0 &&

772 ((
≤g_±r
->
mode
 & 
PNG_HAVE_PNG_SIGNATURE
) == 0) &&

773 (
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
 ||

774 
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB_ALPHA
) &&

775 (
fûãr_ty≥
 =
PNG_INTRAPIXEL_DIFFERENCING
)) &&

777 
fûãr_ty≥
 !
PNG_FILTER_TYPE_BASE
)

779 
	`≤g_w¨nög
(
≤g_±r
, "Invalid filterÅype specified");

780 
fûãr_ty≥
 = 
PNG_FILTER_TYPE_BASE
;

783 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


784 i‡(
öãæa˚_ty≥
 !
PNG_INTERLACE_NONE
 &&

785 
öãæa˚_ty≥
 !
PNG_INTERLACE_ADAM7
)

787 
	`≤g_w¨nög
(
≤g_±r
, "Invalid interlaceÅype specified");

788 
öãæa˚_ty≥
 = 
PNG_INTERLACE_ADAM7
;

791 
öãæa˚_ty≥
=
PNG_INTERLACE_NONE
;

795 
≤g_±r
->
bô_dïth
 = (
≤g_byã
)bit_depth;

796 
≤g_±r
->
cﬁ‹_ty≥
 = (
≤g_byã
)color_type;

797 
≤g_±r
->
öãæa˚d
 = (
≤g_byã
)
öãæa˚_ty≥
;

798 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


799 
≤g_±r
->
fûãr_ty≥
 = (
≤g_byã
)filter_type;

801 
≤g_±r
->
com¥essi⁄_ty≥
 = (
≤g_byã
)compression_type;

802 
≤g_±r
->
width
 = width;

803 
≤g_±r
->
height
 = height;

805 
≤g_±r
->
pixñ_dïth
 = (
≤g_byã
)(
bô_dïth
 *Öng_±r->
ch™√ls
);

806 
≤g_±r
->
rowbyãs
 = 
	`PNG_ROWBYTES
’ng_±r->
pixñ_dïth
, 
width
);

808 
≤g_±r
->
u§_width
 =Öng_±r->
width
;

809 
≤g_±r
->
u§_bô_dïth
 =Öng_±r->
bô_dïth
;

810 
≤g_±r
->
u§_ch™√ls
 =Öng_±r->
ch™√ls
;

813 
	`≤g_ßve_uöt_32
(
buf
, 
width
);

814 
	`≤g_ßve_uöt_32
(
buf
 + 4, 
height
);

815 
buf
[8] = (
≤g_byã
)
bô_dïth
;

816 
buf
[9] = (
≤g_byã
)
cﬁ‹_ty≥
;

817 
buf
[10] = (
≤g_byã
)
com¥essi⁄_ty≥
;

818 
buf
[11] = (
≤g_byã
)
fûãr_ty≥
;

819 
buf
[12] = (
≤g_byã
)
öãæa˚_ty≥
;

822 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_IHDR
, 
buf
, 13);

824 i‡((
≤g_±r
->
do_fûãr
Ë=
PNG_NO_FILTERS
)

826 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
 ||

827 
≤g_±r
->
bô_dïth
 < 8)

828 
≤g_±r
->
do_fûãr
 = 
PNG_FILTER_NONE
;

831 
≤g_±r
->
do_fûãr
 = 
PNG_ALL_FILTERS
;

834 
≤g_±r
->
mode
 = 
PNG_HAVE_IHDR
;

835 
	}
}

842 
	$≤g_wrôe_PLTE
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_cﬁ‹p
 
∑Àâe
,

843 
≤g_uöt_32
 
num_∑l
)

845 
≤g_uöt_32
 
max_∑Àâe_Àngth
, 
i
;

846 
≤g_c⁄°_cﬁ‹p
 
∑l_±r
;

847 
≤g_byã
 
buf
[3];

849 
	`≤g_debug
(1, "inÖng_write_PLTE");

851 
max_∑Àâe_Àngth
 = (
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
) ?

852 (1 << 
≤g_±r
->
bô_dïth
Ë: 
PNG_MAX_PALETTE_LENGTH
;

855 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


856 (
≤g_±r
->
mng_„©uªs_≥rmôãd
 & 
PNG_FLAG_MNG_EMPTY_PLTE
) == 0 &&

858 
num_∑l
 =0Ë||Çum_∑»> 
max_∑Àâe_Àngth
)

860 i‡(
≤g_±r
->
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

862 
	`≤g_îr‹
(
≤g_±r
, "InvalidÇumber of colors inÖalette");

867 
	`≤g_w¨nög
(
≤g_±r
, "InvalidÇumber of colors inÖalette");

872 i‡((
≤g_±r
->
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) == 0)

874 
	`≤g_w¨nög
(
≤g_±r
,

880 
≤g_±r
->
num_∑Àâe
 = (
≤g_uöt_16
)
num_∑l
;

881 
	`≤g_debug1
(3, "num_∑Àâê%d", 
≤g_±r
->
num_∑Àâe
);

883 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_PLTE
, (
≤g_uöt_32
)(
num_∑l
 * 3));

884 #ifde‡
PNG_POINTER_INDEXING_SUPPORTED


886 
i
 = 0, 
∑l_±r
 = 
∑Àâe
; i < 
num_∑l
; i++,Öal_ptr++)

888 
buf
[0] = 
∑l_±r
->
ªd
;

889 
buf
[1] = 
∑l_±r
->
gªí
;

890 
buf
[2] = 
∑l_±r
->
blue
;

891 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
buf
, 3);

898 
∑l_±r
=
∑Àâe
;

900 
i
 = 0; i < 
num_∑l
; i++)

902 
buf
[0] = 
∑l_±r
[
i
].
ªd
;

903 
buf
[1] = 
∑l_±r
[
i
].
gªí
;

904 
buf
[2] = 
∑l_±r
[
i
].
blue
;

905 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
buf
, 3);

909 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

910 
≤g_±r
->
mode
 |
PNG_HAVE_PLTE
;

911 
	}
}

931 
	$≤g_com¥ess_IDAT
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
öput
,

932 
≤g_Æloc_size_t
 
öput_Àn
, 
Êush
)

934 i‡(
≤g_±r
->
zow√r
 !
≤g_IDAT
)

941 i‡(
≤g_±r
->
zbuf„r_li°
 =
NULL
)

943 
≤g_±r
->
zbuf„r_li°
 = 
	`≤g_voidˇ°
(
≤g_com¥essi⁄_buf„Ω
,

944 
	`≤g_mÆloc
(
≤g_±r
, 
	`PNG_COMPRESSION_BUFFER_SIZE
(png_ptr)));

945 
≤g_±r
->
zbuf„r_li°
->
√xt
 = 
NULL
;

949 
	`≤g_‰ì_buf„r_li°
(
≤g_±r
, &≤g_±r->
zbuf„r_li°
->
√xt
);

952 i‡(
	`≤g_deÊ©e_˛aim
(
≤g_±r
, 
≤g_IDAT
, 
	`≤g_image_size
’ng_±r)Ë!
Z_OK
)

953 
	`≤g_îr‹
(
≤g_±r
,Öng_±r->
z°ªam
.
msg
);

958 
≤g_±r
->
z°ªam
.
√xt_out
 =Öng_±r->
zbuf„r_li°
->
ouçut
;

959 
≤g_±r
->
z°ªam
.
avaû_out
 =Öng_±r->
zbuf„r_size
;

966 
≤g_±r
->
z°ªam
.
√xt_ö
 = 
	`PNGZ_INPUT_CAST
(
öput
);

967 
≤g_±r
->
z°ªam
.
avaû_ö
 = 0;

970 
ªt
;

973 
uI¡
 
avaû
 = 
ZLIB_IO_MAX
;

975 i‡(
avaû
 > 
öput_Àn
)

976 
avaû
 = (
uI¡
)
öput_Àn
;

978 
≤g_±r
->
z°ªam
.
avaû_ö
 = 
avaû
;

979 
öput_Àn
 -
avaû
;

981 
ªt
 = 
	`deÊ©e
(&
≤g_±r
->
z°ªam
, 
öput_Àn
 > 0 ? 
Z_NO_FLUSH
 : 
Êush
);

984 
öput_Àn
 +
≤g_±r
->
z°ªam
.
avaû_ö
;

985 
≤g_±r
->
z°ªam
.
avaû_ö
 = 0;

991 i‡(
≤g_±r
->
z°ªam
.
avaû_out
 == 0)

993 
≤g_byãp
 
d©a
 = 
≤g_±r
->
zbuf„r_li°
->
ouçut
;

994 
uI¡
 
size
 = 
≤g_±r
->
zbuf„r_size
;

999 #ifde‡
PNG_WRITE_OPTIMIZE_CMF_SUPPORTED


1000 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) == 0 &&

1001 
≤g_±r
->
com¥essi⁄_ty≥
 =
PNG_COMPRESSION_TYPE_BASE
)

1002 
	`›timize_cmf
(
d©a
, 
	`≤g_image_size
(
≤g_±r
));

1005 i‡(
size
 > 0)

1006 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_IDAT
, 
d©a
, 
size
);

1007 
≤g_±r
->
mode
 |
PNG_HAVE_IDAT
;

1009 
≤g_±r
->
z°ªam
.
√xt_out
 = 
d©a
;

1010 
≤g_±r
->
z°ªam
.
avaû_out
 = 
size
;

1016 i‡(
ªt
 =
Z_OK
 && 
Êush
 !
Z_NO_FLUSH
)

1023 i‡(
ªt
 =
Z_OK
)

1029 i‡(
öput_Àn
 == 0)

1031 i‡(
Êush
 =
Z_FINISH
)

1032 
	`≤g_îr‹
(
≤g_±r
, "Z_OK on Z_FINISH with output space");

1038 i‡(
ªt
 =
Z_STREAM_END
 && 
Êush
 =
Z_FINISH
)

1043 
≤g_byãp
 
d©a
 = 
≤g_±r
->
zbuf„r_li°
->
ouçut
;

1044 
uI¡
 
size
 = 
≤g_±r
->
zbuf„r_size
 -Öng_±r->
z°ªam
.
avaû_out
;

1046 #ifde‡
PNG_WRITE_OPTIMIZE_CMF_SUPPORTED


1047 i‡((
≤g_±r
->
mode
 & 
PNG_HAVE_IDAT
) == 0 &&

1048 
≤g_±r
->
com¥essi⁄_ty≥
 =
PNG_COMPRESSION_TYPE_BASE
)

1049 
	`›timize_cmf
(
d©a
, 
	`≤g_image_size
(
≤g_±r
));

1052 i‡(
size
 > 0)

1053 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_IDAT
, 
d©a
, 
size
);

1054 
≤g_±r
->
z°ªam
.
avaû_out
 = 0;

1055 
≤g_±r
->
z°ªam
.
√xt_out
 = 
NULL
;

1056 
≤g_±r
->
mode
 |
PNG_HAVE_IDAT
 | 
PNG_AFTER_IDAT
;

1058 
≤g_±r
->
zow√r
 = 0;

1065 
	`≤g_z°ªam_îr‹
(
≤g_±r
, 
ªt
);

1066 
	`≤g_îr‹
(
≤g_±r
,Öng_±r->
z°ªam
.
msg
);

1069 
	}
}

1073 
	$≤g_wrôe_IEND
(
≤g_°ru˘Ω
 
≤g_±r
)

1075 
	`≤g_debug
(1, "inÖng_write_IEND");

1077 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_IEND
, 
NULL
, 0);

1078 
≤g_±r
->
mode
 |
PNG_HAVE_IEND
;

1079 
	}
}

1081 #ifde‡
PNG_WRITE_gAMA_SUPPORTED


1084 
	$≤g_wrôe_gAMA_fixed
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_fixed_poöt
 
fûe_gamma
)

1086 
≤g_byã
 
buf
[4];

1088 
	`≤g_debug
(1, "inÖng_write_gAMA");

1091 
	`≤g_ßve_uöt_32
(
buf
, (
≤g_uöt_32
)
fûe_gamma
);

1092 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_gAMA
, 
buf
, 4);

1093 
	}
}

1096 #ifde‡
PNG_WRITE_sRGB_SUPPORTED


1099 
	$≤g_wrôe_sRGB
(
≤g_°ru˘Ω
 
≤g_±r
, 
§gb_öã¡
)

1101 
≤g_byã
 
buf
[1];

1103 
	`≤g_debug
(1, "inÖng_write_sRGB");

1105 i‡(
§gb_öã¡
 >
PNG_sRGB_INTENT_LAST
)

1106 
	`≤g_w¨nög
(
≤g_±r
,

1109 
buf
[0]=(
≤g_byã
)
§gb_öã¡
;

1110 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_sRGB
, 
buf
, 1);

1111 
	}
}

1114 #ifde‡
PNG_WRITE_iCCP_SUPPORTED


1117 
	$≤g_wrôe_iCCP
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
«me
,

1118 
≤g_c⁄°_byãp
 
¥ofûe
)

1120 
≤g_uöt_32
 
«me_Àn
;

1121 
≤g_uöt_32
 
¥ofûe_Àn
;

1122 
≤g_byã
 
√w_«me
[81];

1123 
com¥essi⁄_°©e
 
comp
;

1124 
≤g_uöt_32
 
ãmp
;

1126 
	`≤g_debug
(1, "inÖng_write_iCCP");

1131 i‡(
¥ofûe
 =
NULL
)

1132 
	`≤g_îr‹
(
≤g_±r
, "NoÖrofile for iCCP chunk");

1134 
¥ofûe_Àn
 = 
	`≤g_gë_uöt_32
(
¥ofûe
);

1136 i‡(
¥ofûe_Àn
 < 132)

1137 
	`≤g_îr‹
(
≤g_±r
, "ICCÖrofileÅoo short");

1139 
ãmp
 = (
≤g_uöt_32
Ë(*(
¥ofûe
+8));

1140 i‡(
ãmp
 > 3 && (
¥ofûe_Àn
 & 0x03))

1141 
	`≤g_îr‹
(
≤g_±r
, "ICCÖrofileÜength invalid (notá multiple of 4)");

1144 
≤g_uöt_32
 
embedded_¥ofûe_Àn
 = 
	`≤g_gë_uöt_32
(
¥ofûe
);

1146 i‡(
¥ofûe_Àn
 !
embedded_¥ofûe_Àn
)

1147 
	`≤g_îr‹
(
≤g_±r
, "ProfileÜength doesÇot matchÖrofile");

1150 
«me_Àn
 = 
	`≤g_check_keyw‹d
(
≤g_±r
, 
«me
, 
√w_«me
);

1152 i‡(
«me_Àn
 == 0)

1153 
	`≤g_îr‹
(
≤g_±r
, "iCCP: invalid keyword");

1155 
√w_«me
[++
«me_Àn
] = 
PNG_COMPRESSION_TYPE_BASE
;

1158 ++
«me_Àn
;

1160 
	`≤g_ãxt_com¥ess_öô
(&
comp
, 
¥ofûe
, 
¥ofûe_Àn
);

1163 i‡(
	`≤g_ãxt_com¥ess
(
≤g_±r
, 
≤g_iCCP
, &
comp
, 
«me_Àn
Ë!
Z_OK
)

1164 
	`≤g_îr‹
(
≤g_±r
,Öng_±r->
z°ªam
.
msg
);

1166 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_iCCP
, 
«me_Àn
 + 
comp
.
ouçut_Àn
);

1168 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
√w_«me
, 
«me_Àn
);

1170 
	`≤g_wrôe_com¥es£d_d©a_out
(
≤g_±r
, &
comp
);

1172 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

1173 
	}
}

1176 #ifde‡
PNG_WRITE_sPLT_SUPPORTED


1179 
	$≤g_wrôe_sPLT
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_sPLT_ç
 
•Æëã
)

1181 
≤g_uöt_32
 
«me_Àn
;

1182 
≤g_byã
 
√w_«me
[80];

1183 
≤g_byã
 
íåybuf
[10];

1184 
size_t
 
íåy_size
 = (
•Æëã
->
dïth
 == 8 ? 6 : 10);

1185 
size_t
 
∑Àâe_size
 = 
íåy_size
 * (size_t)
•Æëã
->
√¡rõs
;

1186 
≤g_sPLT_íåyp
 
ï
;

1187 #i‚de‡
PNG_POINTER_INDEXING_SUPPORTED


1188 
i
;

1191 
	`≤g_debug
(1, "inÖng_write_sPLT");

1193 
«me_Àn
 = 
	`≤g_check_keyw‹d
(
≤g_±r
, 
•Æëã
->
«me
, 
√w_«me
);

1195 i‡(
«me_Àn
 == 0)

1196 
	`≤g_îr‹
(
≤g_±r
, "sPLT: invalid keyword");

1199 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_sPLT
,

1200 (
≤g_uöt_32
)(
«me_Àn
 + 2 + 
∑Àâe_size
));

1202 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, (
≤g_byãp
)
√w_«me
, (
size_t
)(
«me_Àn
 + 1));

1204 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, &
•Æëã
->
dïth
, 1);

1207 #ifde‡
PNG_POINTER_INDEXING_SUPPORTED


1208 
ï
 = 
•Æëã
->
íåõs
;Ép<•Æëã->íåõ†+ s∑Àâe->
√¡rõs
;Ép++)

1210 i‡(
•Æëã
->
dïth
 == 8)

1212 
íåybuf
[0] = (
≤g_byã
)
ï
->
ªd
;

1213 
íåybuf
[1] = (
≤g_byã
)
ï
->
gªí
;

1214 
íåybuf
[2] = (
≤g_byã
)
ï
->
blue
;

1215 
íåybuf
[3] = (
≤g_byã
)
ï
->
Æpha
;

1216 
	`≤g_ßve_uöt_16
(
íåybuf
 + 4, 
ï
->
‰equícy
);

1221 
	`≤g_ßve_uöt_16
(
íåybuf
 + 0, 
ï
->
ªd
);

1222 
	`≤g_ßve_uöt_16
(
íåybuf
 + 2, 
ï
->
gªí
);

1223 
	`≤g_ßve_uöt_16
(
íåybuf
 + 4, 
ï
->
blue
);

1224 
	`≤g_ßve_uöt_16
(
íåybuf
 + 6, 
ï
->
Æpha
);

1225 
	`≤g_ßve_uöt_16
(
íåybuf
 + 8, 
ï
->
‰equícy
);

1228 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
íåybuf
, 
íåy_size
);

1231 
ï
=
•Æëã
->
íåõs
;

1232 
i
 = 0; i>
•Æëã
->
√¡rõs
; i++)

1234 i‡(
•Æëã
->
dïth
 == 8)

1236 
íåybuf
[0] = (
≤g_byã
)
ï
[
i
].
ªd
;

1237 
íåybuf
[1] = (
≤g_byã
)
ï
[
i
].
gªí
;

1238 
íåybuf
[2] = (
≤g_byã
)
ï
[
i
].
blue
;

1239 
íåybuf
[3] = (
≤g_byã
)
ï
[
i
].
Æpha
;

1240 
	`≤g_ßve_uöt_16
(
íåybuf
 + 4, 
ï
[
i
].
‰equícy
);

1245 
	`≤g_ßve_uöt_16
(
íåybuf
 + 0, 
ï
[
i
].
ªd
);

1246 
	`≤g_ßve_uöt_16
(
íåybuf
 + 2, 
ï
[
i
].
gªí
);

1247 
	`≤g_ßve_uöt_16
(
íåybuf
 + 4, 
ï
[
i
].
blue
);

1248 
	`≤g_ßve_uöt_16
(
íåybuf
 + 6, 
ï
[
i
].
Æpha
);

1249 
	`≤g_ßve_uöt_16
(
íåybuf
 + 8, 
ï
[
i
].
‰equícy
);

1252 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
íåybuf
, 
íåy_size
);

1256 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

1257 
	}
}

1260 #ifde‡
PNG_WRITE_sBIT_SUPPORTED


1263 
	$≤g_wrôe_sBIT
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_cﬁ‹_8p
 
sbô
, 
cﬁ‹_ty≥
)

1265 
≤g_byã
 
buf
[4];

1266 
size_t
 
size
;

1268 
	`≤g_debug
(1, "inÖng_write_sBIT");

1271 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

1273 
≤g_byã
 
maxbôs
;

1275 
maxbôs
 = (
≤g_byã
)(
cﬁ‹_ty≥
==
PNG_COLOR_TYPE_PALETTE
 ? 8 :

1276 
≤g_±r
->
u§_bô_dïth
);

1278 i‡(
sbô
->
ªd
 =0 || sbô->ªd > 
maxbôs
 ||

1279 
sbô
->
gªí
 =0 || sbô->gªí > 
maxbôs
 ||

1280 
sbô
->
blue
 =0 || sbô->bluê> 
maxbôs
)

1282 
	`≤g_w¨nög
(
≤g_±r
, "Invalid sBIT depth specified");

1286 
buf
[0] = 
sbô
->
ªd
;

1287 
buf
[1] = 
sbô
->
gªí
;

1288 
buf
[2] = 
sbô
->
blue
;

1289 
size
 = 3;

1294 i‡(
sbô
->
gøy
 =0 || sbô->gøy > 
≤g_±r
->
u§_bô_dïth
)

1296 
	`≤g_w¨nög
(
≤g_±r
, "Invalid sBIT depth specified");

1300 
buf
[0] = 
sbô
->
gøy
;

1301 
size
 = 1;

1304 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_ALPHA
) != 0)

1306 i‡(
sbô
->
Æpha
 =0 || sbô->Æph®> 
≤g_±r
->
u§_bô_dïth
)

1308 
	`≤g_w¨nög
(
≤g_±r
, "Invalid sBIT depth specified");

1312 
buf
[
size
++] = 
sbô
->
Æpha
;

1315 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_sBIT
, 
buf
, 
size
);

1316 
	}
}

1319 #ifde‡
PNG_WRITE_cHRM_SUPPORTED


1322 
	$≤g_wrôe_cHRM_fixed
(
≤g_°ru˘Ω
 
≤g_±r
, c⁄° 
≤g_xy
 *
xy
)

1324 
≤g_byã
 
buf
[32];

1326 
	`≤g_debug
(1, "inÖng_write_cHRM");

1329 
	`≤g_ßve_öt_32
(
buf
, 
xy
->
whôex
);

1330 
	`≤g_ßve_öt_32
(
buf
 + 4, 
xy
->
whôey
);

1332 
	`≤g_ßve_öt_32
(
buf
 + 8, 
xy
->
ªdx
);

1333 
	`≤g_ßve_öt_32
(
buf
 + 12, 
xy
->
ªdy
);

1335 
	`≤g_ßve_öt_32
(
buf
 + 16, 
xy
->
gªíx
);

1336 
	`≤g_ßve_öt_32
(
buf
 + 20, 
xy
->
gªíy
);

1338 
	`≤g_ßve_öt_32
(
buf
 + 24, 
xy
->
bluex
);

1339 
	`≤g_ßve_öt_32
(
buf
 + 28, 
xy
->
bluey
);

1341 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_cHRM
, 
buf
, 32);

1342 
	}
}

1345 #ifde‡
PNG_WRITE_tRNS_SUPPORTED


1348 
	$≤g_wrôe_tRNS
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_byãp
 
å™s_Æpha
,

1349 
≤g_c⁄°_cﬁ‹_16p
 
å™
, 
num_å™s
, 
cﬁ‹_ty≥
)

1351 
≤g_byã
 
buf
[6];

1353 
	`≤g_debug
(1, "inÖng_write_tRNS");

1355 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1357 i‡(
num_å™s
 <0 ||Çum_å™†> ()
≤g_±r
->
num_∑Àâe
)

1359 
	`≤g_≠p_w¨nög
(
≤g_±r
,

1365 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_tRNS
, 
å™s_Æpha
,

1366 (
size_t
)
num_å™s
);

1369 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_GRAY
)

1372 i‡(
å™
->
gøy
 >(1 << 
≤g_±r
->
bô_dïth
))

1374 
	`≤g_≠p_w¨nög
(
≤g_±r
,

1380 
	`≤g_ßve_uöt_16
(
buf
, 
å™
->
gøy
);

1381 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_tRNS
, 
buf
, 2);

1384 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_RGB
)

1387 
	`≤g_ßve_uöt_16
(
buf
, 
å™
->
ªd
);

1388 
	`≤g_ßve_uöt_16
(
buf
 + 2, 
å™
->
gªí
);

1389 
	`≤g_ßve_uöt_16
(
buf
 + 4, 
å™
->
blue
);

1390 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


1391 i‡(
≤g_±r
->
bô_dïth
 =8 && (
buf
[0] | buf[2] | buf[4]) != 0)

1393 i‡((
buf
[0] | buf[2] | buf[4]) != 0)

1396 
	`≤g_≠p_w¨nög
(
≤g_±r
,

1401 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_tRNS
, 
buf
, 6);

1406 
	`≤g_≠p_w¨nög
(
≤g_±r
, "Can't writeÅRNS withánálpha channel");

1408 
	}
}

1411 #ifde‡
PNG_WRITE_bKGD_SUPPORTED


1414 
	$≤g_wrôe_bKGD
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_cﬁ‹_16p
 
back
, 
cﬁ‹_ty≥
)

1416 
≤g_byã
 
buf
[6];

1418 
	`≤g_debug
(1, "inÖng_write_bKGD");

1420 i‡(
cﬁ‹_ty≥
 =
PNG_COLOR_TYPE_PALETTE
)

1423 #ifde‡
PNG_MNG_FEATURES_SUPPORTED


1424 (
≤g_±r
->
num_∑Àâe
 != 0 ||

1425 (
≤g_±r
->
mng_„©uªs_≥rmôãd
 & 
PNG_FLAG_MNG_EMPTY_PLTE
) == 0) &&

1427 
back
->
ödex
 >
≤g_±r
->
num_∑Àâe
)

1429 
	`≤g_w¨nög
(
≤g_±r
, "Invalid backgroundÖalette index");

1433 
buf
[0] = 
back
->
ödex
;

1434 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_bKGD
, 
buf
, 1);

1437 i‡((
cﬁ‹_ty≥
 & 
PNG_COLOR_MASK_COLOR
) != 0)

1439 
	`≤g_ßve_uöt_16
(
buf
, 
back
->
ªd
);

1440 
	`≤g_ßve_uöt_16
(
buf
 + 2, 
back
->
gªí
);

1441 
	`≤g_ßve_uöt_16
(
buf
 + 4, 
back
->
blue
);

1442 #ifde‡
PNG_WRITE_16BIT_SUPPORTED


1443 i‡(
≤g_±r
->
bô_dïth
 =8 && (
buf
[0] | buf[2] | buf[4]) != 0)

1445 i‡((
buf
[0] | buf[2] | buf[4]) != 0)

1448 
	`≤g_w¨nög
(
≤g_±r
,

1455 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_bKGD
, 
buf
, 6);

1460 i‡(
back
->
gøy
 >(1 << 
≤g_±r
->
bô_dïth
))

1462 
	`≤g_w¨nög
(
≤g_±r
,

1468 
	`≤g_ßve_uöt_16
(
buf
, 
back
->
gøy
);

1469 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_bKGD
, 
buf
, 2);

1471 
	}
}

1474 #ifde‡
PNG_WRITE_eXIf_SUPPORTED


1477 
	$≤g_wrôe_eXIf
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
exif
, 
num_exif
)

1479 
i
;

1480 
≤g_byã
 
buf
[1];

1482 
	`≤g_debug
(1, "inÖng_write_eXIf");

1484 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_eXIf
, (
≤g_uöt_32
)(
num_exif
));

1486 
i
 = 0; i < 
num_exif
; i++)

1488 
buf
[0] = 
exif
[
i
];

1489 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
buf
, 1);

1492 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

1493 
	}
}

1496 #ifde‡
PNG_WRITE_hIST_SUPPORTED


1499 
	$≤g_wrôe_hIST
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_uöt_16p
 
hi°
, 
num_hi°
)

1501 
i
;

1502 
≤g_byã
 
buf
[3];

1504 
	`≤g_debug
(1, "inÖng_write_hIST");

1506 i‡(
num_hi°
 > ()
≤g_±r
->
num_∑Àâe
)

1508 
	`≤g_debug2
(3, "num_hi° = %d,Çum_∑Àâê%d", 
num_hi°
,

1509 
≤g_±r
->
num_∑Àâe
);

1511 
	`≤g_w¨nög
(
≤g_±r
, "InvalidÇumber of histogramÉntries specified");

1515 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_hIST
, (
≤g_uöt_32
)(
num_hi°
 * 2));

1517 
i
 = 0; i < 
num_hi°
; i++)

1519 
	`≤g_ßve_uöt_16
(
buf
, 
hi°
[
i
]);

1520 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
buf
, 2);

1523 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

1524 
	}
}

1527 #ifde‡
PNG_WRITE_tEXt_SUPPORTED


1530 
	$≤g_wrôe_tEXt
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
key
,Öng_c⁄°_ch¨∞
ãxt
,

1531 
size_t
 
ãxt_Àn
)

1533 
≤g_uöt_32
 
key_Àn
;

1534 
≤g_byã
 
√w_key
[80];

1536 
	`≤g_debug
(1, "inÖng_write_tEXt");

1538 
key_Àn
 = 
	`≤g_check_keyw‹d
(
≤g_±r
, 
key
, 
√w_key
);

1540 i‡(
key_Àn
 == 0)

1541 
	`≤g_îr‹
(
≤g_±r
, "tEXt: invalid keyword");

1543 i‡(
ãxt
 =
NULL
 || *text == '\0')

1544 
ãxt_Àn
 = 0;

1547 
ãxt_Àn
 = 
	`°æí
(
ãxt
);

1549 i‡(
ãxt_Àn
 > 
PNG_UINT_31_MAX
 - (
key_Àn
+1))

1550 
	`≤g_îr‹
(
≤g_±r
, "tEXt:ÅextÅooÜong");

1553 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_tEXt
,

1554 (
≤g_uöt_32
Ë(
key_Àn
 + 
ãxt_Àn
 + 1));

1561 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
√w_key
, 
key_Àn
 + 1);

1563 i‡(
ãxt_Àn
 != 0)

1564 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, (
≤g_c⁄°_byãp
)
ãxt
, 
ãxt_Àn
);

1566 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

1567 
	}
}

1570 #ifde‡
PNG_WRITE_zTXt_SUPPORTED


1573 
	$≤g_wrôe_zTXt
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_ch¨p
 
key
,Öng_c⁄°_ch¨∞
ãxt
,

1574 
com¥essi⁄
)

1576 
≤g_uöt_32
 
key_Àn
;

1577 
≤g_byã
 
√w_key
[81];

1578 
com¥essi⁄_°©e
 
comp
;

1580 
	`≤g_debug
(1, "inÖng_write_zTXt");

1582 i‡(
com¥essi⁄
 =
PNG_TEXT_COMPRESSION_NONE
)

1584 
	`≤g_wrôe_tEXt
(
≤g_±r
, 
key
, 
ãxt
, 0);

1588 i‡(
com¥essi⁄
 !
PNG_TEXT_COMPRESSION_zTXt
)

1589 
	`≤g_îr‹
(
≤g_±r
, "zTXt: invalid compressionÅype");

1591 
key_Àn
 = 
	`≤g_check_keyw‹d
(
≤g_±r
, 
key
, 
√w_key
);

1593 i‡(
key_Àn
 == 0)

1594 
	`≤g_îr‹
(
≤g_±r
, "zTXt: invalid keyword");

1597 
√w_key
[++
key_Àn
] = 
PNG_COMPRESSION_TYPE_BASE
;

1598 ++
key_Àn
;

1601 
	`≤g_ãxt_com¥ess_öô
(&
comp
, (
≤g_c⁄°_byãp
)
ãxt
,

1602 
ãxt
 =
NULL
 ? 0 : 
	`°æí
(text));

1604 i‡(
	`≤g_ãxt_com¥ess
(
≤g_±r
, 
≤g_zTXt
, &
comp
, 
key_Àn
Ë!
Z_OK
)

1605 
	`≤g_îr‹
(
≤g_±r
,Öng_±r->
z°ªam
.
msg
);

1608 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_zTXt
, 
key_Àn
 + 
comp
.
ouçut_Àn
);

1611 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
√w_key
, 
key_Àn
);

1614 
	`≤g_wrôe_com¥es£d_d©a_out
(
≤g_±r
, &
comp
);

1617 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

1618 
	}
}

1621 #ifde‡
PNG_WRITE_iTXt_SUPPORTED


1624 
	$≤g_wrôe_iTXt
(
≤g_°ru˘Ω
 
≤g_±r
, 
com¥essi⁄
, 
≤g_c⁄°_ch¨p
 
key
,

1625 
≤g_c⁄°_ch¨p
 
œng
,Öng_c⁄°_ch¨∞
œng_key
,Öng_c⁄°_ch¨∞
ãxt
)

1627 
≤g_uöt_32
 
key_Àn
, 
¥efix_Àn
;

1628 
size_t
 
œng_Àn
, 
œng_key_Àn
;

1629 
≤g_byã
 
√w_key
[82];

1630 
com¥essi⁄_°©e
 
comp
;

1632 
	`≤g_debug
(1, "inÖng_write_iTXt");

1634 
key_Àn
 = 
	`≤g_check_keyw‹d
(
≤g_±r
, 
key
, 
√w_key
);

1636 i‡(
key_Àn
 == 0)

1637 
	`≤g_îr‹
(
≤g_±r
, "iTXt: invalid keyword");

1640 
com¥essi⁄
)

1642 
PNG_ITXT_COMPRESSION_NONE
:

1643 
PNG_TEXT_COMPRESSION_NONE
:

1644 
com¥essi⁄
 = 
√w_key
[++
key_Àn
] = 0;

1647 
PNG_TEXT_COMPRESSION_zTXt
:

1648 
PNG_ITXT_COMPRESSION_zTXt
:

1649 
com¥essi⁄
 = 
√w_key
[++
key_Àn
] = 1;

1653 
	`≤g_îr‹
(
≤g_±r
, "iTXt: invalid compression");

1656 
√w_key
[++
key_Àn
] = 
PNG_COMPRESSION_TYPE_BASE
;

1657 ++
key_Àn
;

1669 i‡(
œng
 =
NULL
)Üang = "";

1670 
œng_Àn
 = 
	`°æí
(
œng
)+1;

1671 i‡(
œng_key
 =
NULL
)Üang_key = "";

1672 
œng_key_Àn
 = 
	`°æí
(
œng_key
)+1;

1673 i‡(
ãxt
 =
NULL
)Åext = "";

1675 
¥efix_Àn
 = 
key_Àn
;

1676 i‡(
œng_Àn
 > 
PNG_UINT_31_MAX
-
¥efix_Àn
)

1677 
¥efix_Àn
 = 
PNG_UINT_31_MAX
;

1679 
¥efix_Àn
 = (
≤g_uöt_32
)’ªfix_À¿+ 
œng_Àn
);

1681 i‡(
œng_key_Àn
 > 
PNG_UINT_31_MAX
-
¥efix_Àn
)

1682 
¥efix_Àn
 = 
PNG_UINT_31_MAX
;

1684 
¥efix_Àn
 = (
≤g_uöt_32
)’ªfix_À¿+ 
œng_key_Àn
);

1686 
	`≤g_ãxt_com¥ess_öô
(&
comp
, (
≤g_c⁄°_byãp
)
ãxt
, 
	`°æí
(text));

1688 i‡(
com¥essi⁄
 != 0)

1690 i‡(
	`≤g_ãxt_com¥ess
(
≤g_±r
, 
≤g_iTXt
, &
comp
, 
¥efix_Àn
Ë!
Z_OK
)

1691 
	`≤g_îr‹
(
≤g_±r
,Öng_±r->
z°ªam
.
msg
);

1696 i‡(
comp
.
öput_Àn
 > 
PNG_UINT_31_MAX
-
¥efix_Àn
)

1697 
	`≤g_îr‹
(
≤g_±r
, "iTXt: uncompressedÅextÅooÜong");

1700 
comp
.
ouçut_Àn
 = (
≤g_uöt_32
Ëcomp.
öput_Àn
;

1703 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_iTXt
, 
comp
.
ouçut_Àn
 + 
¥efix_Àn
);

1705 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
√w_key
, 
key_Àn
);

1707 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, (
≤g_c⁄°_byãp
)
œng
, 
œng_Àn
);

1709 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, (
≤g_c⁄°_byãp
)
œng_key
, 
œng_key_Àn
);

1711 i‡(
com¥essi⁄
 != 0)

1712 
	`≤g_wrôe_com¥es£d_d©a_out
(
≤g_±r
, &
comp
);

1715 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, (
≤g_c⁄°_byãp
)
ãxt
, 
comp
.
ouçut_Àn
);

1717 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

1718 
	}
}

1721 #ifde‡
PNG_WRITE_oFFs_SUPPORTED


1724 
	$≤g_wrôe_oFFs
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_öt_32
 
x_off£t
,Öng_öt_32 
y_off£t
,

1725 
unô_ty≥
)

1727 
≤g_byã
 
buf
[9];

1729 
	`≤g_debug
(1, "inÖng_write_oFFs");

1731 i‡(
unô_ty≥
 >
PNG_OFFSET_LAST
)

1732 
	`≤g_w¨nög
(
≤g_±r
, "Unrecognized unitÅype for oFFs chunk");

1734 
	`≤g_ßve_öt_32
(
buf
, 
x_off£t
);

1735 
	`≤g_ßve_öt_32
(
buf
 + 4, 
y_off£t
);

1736 
buf
[8] = (
≤g_byã
)
unô_ty≥
;

1738 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_oFFs
, 
buf
, 9);

1739 
	}
}

1741 #ifde‡
PNG_WRITE_pCAL_SUPPORTED


1744 
	$≤g_wrôe_pCAL
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_ch¨p
 
puΩo£
, 
≤g_öt_32
 
X0
,

1745 
≤g_öt_32
 
X1
, 
ty≥
, 
≈¨ams
, 
≤g_c⁄°_ch¨p
 
unôs
,

1746 
≤g_ch¨µ
 
∑øms
)

1748 
≤g_uöt_32
 
puΩo£_Àn
;

1749 
size_t
 
unôs_Àn
, 
tŸÆ_Àn
;

1750 
≤g_size_ç
 
∑øms_Àn
;

1751 
≤g_byã
 
buf
[10];

1752 
≤g_byã
 
√w_puΩo£
[80];

1753 
i
;

1755 
	`≤g_debug1
(1, "öÖng_wrôe_pCAL (%dÖ¨amëîs)", 
≈¨ams
);

1757 i‡(
ty≥
 >
PNG_EQUATION_LAST
)

1758 
	`≤g_îr‹
(
≤g_±r
, "UnrecognizedÉquationÅype forÖCAL chunk");

1760 
puΩo£_Àn
 = 
	`≤g_check_keyw‹d
(
≤g_±r
, 
puΩo£
, 
√w_puΩo£
);

1762 i‡(
puΩo£_Àn
 == 0)

1763 
	`≤g_îr‹
(
≤g_±r
, "pCAL: invalid keyword");

1765 ++
puΩo£_Àn
;

1767 
	`≤g_debug1
(3, "pCALÖuΩo£Üígth = %d", ()
puΩo£_Àn
);

1768 
unôs_Àn
 = 
	`°æí
(
unôs
Ë+ (
≈¨ams
 == 0 ? 0 : 1);

1769 
	`≤g_debug1
(3, "pCAL unô†Àngth = %d", ()
unôs_Àn
);

1770 
tŸÆ_Àn
 = 
puΩo£_Àn
 + 
unôs_Àn
 + 10;

1772 
∑øms_Àn
 = (
≤g_size_ç
)
	`≤g_mÆloc
(
≤g_±r
,

1773 (
≤g_Æloc_size_t
)(’ng_Æloc_size_t)
≈¨ams
 * ( (
size_t
))));

1778 
i
 = 0; i < 
≈¨ams
; i++)

1780 
∑øms_Àn
[
i
] = 
	`°æí
(
∑øms
[i]Ë+ (ò=
≈¨ams
 - 1 ? 0 : 1);

1781 
	`≤g_debug2
(3, "pCALÖ¨amëî %dÜígth = %lu", 
i
,

1782 ()
∑øms_Àn
[
i
]);

1783 
tŸÆ_Àn
 +
∑øms_Àn
[
i
];

1786 
	`≤g_debug1
(3, "pCALÅŸÆÜígth = %d", ()
tŸÆ_Àn
);

1787 
	`≤g_wrôe_chunk_hódî
(
≤g_±r
, 
≤g_pCAL
, (
≤g_uöt_32
)
tŸÆ_Àn
);

1788 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
√w_puΩo£
, 
puΩo£_Àn
);

1789 
	`≤g_ßve_öt_32
(
buf
, 
X0
);

1790 
	`≤g_ßve_öt_32
(
buf
 + 4, 
X1
);

1791 
buf
[8] = (
≤g_byã
)
ty≥
;

1792 
buf
[9] = (
≤g_byã
)
≈¨ams
;

1793 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, 
buf
, 10);

1794 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, (
≤g_c⁄°_byãp
)
unôs
, (
size_t
)
unôs_Àn
);

1796 
i
 = 0; i < 
≈¨ams
; i++)

1798 
	`≤g_wrôe_chunk_d©a
(
≤g_±r
, (
≤g_c⁄°_byãp
)
∑øms
[
i
], 
∑øms_Àn
[i]);

1801 
	`≤g_‰ì
(
≤g_±r
, 
∑øms_Àn
);

1802 
	`≤g_wrôe_chunk_íd
(
≤g_±r
);

1803 
	}
}

1806 #ifde‡
PNG_WRITE_sCAL_SUPPORTED


1809 
	$≤g_wrôe_sCAL_s
(
≤g_°ru˘Ω
 
≤g_±r
, 
unô
, 
≤g_c⁄°_ch¨p
 
width
,

1810 
≤g_c⁄°_ch¨p
 
height
)

1812 
≤g_byã
 
buf
[64];

1813 
size_t
 
wÀn
, 
hÀn
, 
tŸÆ_Àn
;

1815 
	`≤g_debug
(1, "inÖng_write_sCAL_s");

1817 
wÀn
 = 
	`°æí
(
width
);

1818 
hÀn
 = 
	`°æí
(
height
);

1819 
tŸÆ_Àn
 = 
wÀn
 + 
hÀn
 + 2;

1821 i‡(
tŸÆ_Àn
 > 64)

1823 
	`≤g_w¨nög
(
≤g_±r
, "Can't write sCAL (bufferÅoo small)");

1827 
buf
[0] = (
≤g_byã
)
unô
;

1828 
	`mem˝y
(
buf
 + 1, 
width
, 
wÀn
 + 1);

1829 
	`mem˝y
(
buf
 + 
wÀn
 + 2, 
height
, 
hÀn
);

1831 
	`≤g_debug1
(3, "sCALÅŸÆÜígth = %u", ()
tŸÆ_Àn
);

1832 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_sCAL
, 
buf
, 
tŸÆ_Àn
);

1833 
	}
}

1836 #ifde‡
PNG_WRITE_pHYs_SUPPORTED


1839 
	$≤g_wrôe_pHYs
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
x_pixñs_≥r_unô
,

1840 
≤g_uöt_32
 
y_pixñs_≥r_unô
,

1841 
unô_ty≥
)

1843 
≤g_byã
 
buf
[9];

1845 
	`≤g_debug
(1, "inÖng_write_pHYs");

1847 i‡(
unô_ty≥
 >
PNG_RESOLUTION_LAST
)

1848 
	`≤g_w¨nög
(
≤g_±r
, "Unrecognized unitÅype forÖHYs chunk");

1850 
	`≤g_ßve_uöt_32
(
buf
, 
x_pixñs_≥r_unô
);

1851 
	`≤g_ßve_uöt_32
(
buf
 + 4, 
y_pixñs_≥r_unô
);

1852 
buf
[8] = (
≤g_byã
)
unô_ty≥
;

1854 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_pHYs
, 
buf
, 9);

1855 
	}
}

1858 #ifde‡
PNG_WRITE_tIME_SUPPORTED


1863 
	$≤g_wrôe_tIME
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_c⁄°_timï
 
mod_time
)

1865 
≤g_byã
 
buf
[7];

1867 
	`≤g_debug
(1, "inÖng_write_tIME");

1869 i‡(
mod_time
->
m⁄th
 > 12 || mod_time->month < 1 ||

1870 
mod_time
->
day
 > 31 || mod_time->day < 1 ||

1871 
mod_time
->
hour
 > 23 || mod_time->
£c⁄d
 > 60)

1873 
	`≤g_w¨nög
(
≤g_±r
, "InvalidÅime specified forÅIME chunk");

1877 
	`≤g_ßve_uöt_16
(
buf
, 
mod_time
->
yór
);

1878 
buf
[2] = 
mod_time
->
m⁄th
;

1879 
buf
[3] = 
mod_time
->
day
;

1880 
buf
[4] = 
mod_time
->
hour
;

1881 
buf
[5] = 
mod_time
->
möuã
;

1882 
buf
[6] = 
mod_time
->
£c⁄d
;

1884 
	`≤g_wrôe_com∂ëe_chunk
(
≤g_±r
, 
≤g_tIME
, 
buf
, 7);

1885 
	}
}

1890 
	$≤g_wrôe_°¨t_row
(
≤g_°ru˘Ω
 
≤g_±r
)

1892 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


1896 c⁄° 
≤g_byã
 
≤g_∑ss_°¨t
[7] = {0, 4, 0, 2, 0, 1, 0};

1899 c⁄° 
≤g_byã
 
≤g_∑ss_öc
[7] = {8, 8, 4, 4, 2, 2, 1};

1902 c⁄° 
≤g_byã
 
≤g_∑ss_y°¨t
[7] = {0, 0, 4, 0, 2, 0, 1};

1905 c⁄° 
≤g_byã
 
≤g_∑ss_yöc
[7] = {8, 8, 8, 4, 4, 2, 2};

1908 
≤g_Æloc_size_t
 
buf_size
;

1909 
u§_pixñ_dïth
;

1911 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


1912 
≤g_byã
 
fûãrs
;

1915 
	`≤g_debug
(1, "inÖng_write_start_row");

1917 
u§_pixñ_dïth
 = 
≤g_±r
->
u§_ch™√ls
 *Öng_±r->
u§_bô_dïth
;

1918 
buf_size
 = 
	`PNG_ROWBYTES
(
u§_pixñ_dïth
, 
≤g_±r
->
width
) + 1;

1921 
≤g_±r
->
å™sf‹med_pixñ_dïth
 =Öng_±r->
pixñ_dïth
;

1922 
≤g_±r
->
maximum_pixñ_dïth
 = (
≤g_byã
)
u§_pixñ_dïth
;

1925 
≤g_±r
->
row_buf
 = 
	`≤g_voidˇ°
(
≤g_byãp
, 
	`≤g_mÆloc
’ng_±r, 
buf_size
));

1927 
≤g_±r
->
row_buf
[0] = 
PNG_FILTER_VALUE_NONE
;

1929 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


1930 
fûãrs
 = 
≤g_±r
->
do_fûãr
;

1932 i‡(
≤g_±r
->
height
 == 1)

1933 
fûãrs
 &0xf‡& ~(
PNG_FILTER_UP
|
PNG_FILTER_AVG
|
PNG_FILTER_PAETH
);

1935 i‡(
≤g_±r
->
width
 == 1)

1936 
fûãrs
 &0xf‡& ~(
PNG_FILTER_SUB
|
PNG_FILTER_AVG
|
PNG_FILTER_PAETH
);

1938 i‡(
fûãrs
 == 0)

1939 
fûãrs
 = 
PNG_FILTER_NONE
;

1941 
≤g_±r
->
do_fûãr
 = 
fûãrs
;

1943 i‡(((
fûãrs
 & (
PNG_FILTER_SUB
 | 
PNG_FILTER_UP
 | 
PNG_FILTER_AVG
 |

1944 
PNG_FILTER_PAETH
)Ë!0Ë&& 
≤g_±r
->
åy_row
 =
NULL
)

1946 
num_fûãrs
 = 0;

1948 
≤g_±r
->
åy_row
 = 
	`≤g_voidˇ°
(
≤g_byãp
, 
	`≤g_mÆloc
’ng_±r, 
buf_size
));

1950 i‡(
fûãrs
 & 
PNG_FILTER_SUB
)

1951 
num_fûãrs
++;

1953 i‡(
fûãrs
 & 
PNG_FILTER_UP
)

1954 
num_fûãrs
++;

1956 i‡(
fûãrs
 & 
PNG_FILTER_AVG
)

1957 
num_fûãrs
++;

1959 i‡(
fûãrs
 & 
PNG_FILTER_PAETH
)

1960 
num_fûãrs
++;

1962 i‡(
num_fûãrs
 > 1)

1963 
≤g_±r
->
t°_row
 = 
	`≤g_voidˇ°
(
≤g_byãp
, 
	`≤g_mÆloc
(png_ptr,

1964 
buf_size
));

1970 i‡((
fûãrs
 & (
PNG_FILTER_AVG
 | 
PNG_FILTER_UP
 | 
PNG_FILTER_PAETH
)) != 0)

1971 
≤g_±r
->
¥ev_row
 = 
	`≤g_voidˇ°
(
≤g_byãp
,

1972 
	`≤g_ˇŒoc
(
≤g_±r
, 
buf_size
));

1975 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


1977 i‡(
≤g_±r
->
öãæa˚d
 != 0)

1979 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) == 0)

1981 
≤g_±r
->
num_rows
 = (≤g_±r->
height
 + 
≤g_∑ss_yöc
[0] - 1 -

1982 
≤g_∑ss_y°¨t
[0]Ë/ 
≤g_∑ss_yöc
[0];

1984 
≤g_±r
->
u§_width
 = (≤g_±r->
width
 + 
≤g_∑ss_öc
[0] - 1 -

1985 
≤g_∑ss_°¨t
[0]Ë/ 
≤g_∑ss_öc
[0];

1990 
≤g_±r
->
num_rows
 =Öng_±r->
height
;

1991 
≤g_±r
->
u§_width
 =Öng_±r->
width
;

1998 
≤g_±r
->
num_rows
 =Öng_±r->
height
;

1999 
≤g_±r
->
u§_width
 =Öng_±r->
width
;

2001 
	}
}

2005 
	$≤g_wrôe_föish_row
(
≤g_°ru˘Ω
 
≤g_±r
)

2007 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


2011 c⁄° 
≤g_byã
 
≤g_∑ss_°¨t
[7] = {0, 4, 0, 2, 0, 1, 0};

2014 c⁄° 
≤g_byã
 
≤g_∑ss_öc
[7] = {8, 8, 4, 4, 2, 2, 1};

2017 c⁄° 
≤g_byã
 
≤g_∑ss_y°¨t
[7] = {0, 0, 4, 0, 2, 0, 1};

2020 c⁄° 
≤g_byã
 
≤g_∑ss_yöc
[7] = {8, 8, 8, 4, 4, 2, 2};

2023 
	`≤g_debug
(1, "inÖng_write_finish_row");

2026 
≤g_±r
->
row_numbî
++;

2029 i‡(
≤g_±r
->
row_numbî
 <Öng_±r->
num_rows
)

2032 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


2034 i‡(
≤g_±r
->
öãæa˚d
 != 0)

2036 
≤g_±r
->
row_numbî
 = 0;

2037 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0)

2039 
≤g_±r
->
∑ss
++;

2047 
≤g_±r
->
∑ss
++;

2049 i‡(
≤g_±r
->
∑ss
 >= 7)

2052 
≤g_±r
->
u§_width
 = (≤g_±r->
width
 +

2053 
≤g_∑ss_öc
[
≤g_±r
->
∑ss
] - 1 -

2054 
≤g_∑ss_°¨t
[
≤g_±r
->
∑ss
]) /

2055 
≤g_∑ss_öc
[
≤g_±r
->
∑ss
];

2057 
≤g_±r
->
num_rows
 = (≤g_±r->
height
 +

2058 
≤g_∑ss_yöc
[
≤g_±r
->
∑ss
] - 1 -

2059 
≤g_∑ss_y°¨t
[
≤g_±r
->
∑ss
]) /

2060 
≤g_∑ss_yöc
[
≤g_±r
->
∑ss
];

2062 i‡((
≤g_±r
->
å™sf‹m©i⁄s
 & 
PNG_INTERLACE
) != 0)

2065 } 
≤g_±r
->
u§_width
 =0 ||Öng_±r->
num_rows
 == 0);

2070 i‡(
≤g_±r
->
∑ss
 < 7)

2072 i‡(
≤g_±r
->
¥ev_row
 !
NULL
)

2073 
	`mem£t
(
≤g_±r
->
¥ev_row
, 0,

2074 
	`PNG_ROWBYTES
(
≤g_±r
->
u§_ch™√ls
 *

2075 
≤g_±r
->
u§_bô_dïth
,Öng_±r->
width
) + 1);

2084 
	`≤g_com¥ess_IDAT
(
≤g_±r
, 
NULL
, 0, 
Z_FINISH
);

2085 
	}
}

2087 #ifde‡
PNG_WRITE_INTERLACING_SUPPORTED


2096 
	$≤g_do_wrôe_öãæa˚
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
, 
∑ss
)

2101 c⁄° 
≤g_byã
 
≤g_∑ss_°¨t
[7] = {0, 4, 0, 2, 0, 1, 0};

2104 c⁄° 
≤g_byã
 
≤g_∑ss_öc
[7] = {8, 8, 4, 4, 2, 2, 1};

2106 
	`≤g_debug
(1, "inÖng_do_write_interlace");

2109 i‡(
∑ss
 < 6)

2112 
row_öfo
->
pixñ_dïth
)

2116 
≤g_byãp
 
•
;

2117 
≤g_byãp
 
dp
;

2118 
shi·
;

2119 
d
;

2120 
vÆue
;

2121 
≤g_uöt_32
 
i
;

2122 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

2124 
dp
 = 
row
;

2125 
d
 = 0;

2126 
shi·
 = 7;

2128 
i
 = 
≤g_∑ss_°¨t
[
∑ss
]; i < 
row_width
;

2129 
i
 +
≤g_∑ss_öc
[
∑ss
])

2131 
•
 = 
row
 + (
size_t
)(
i
 >> 3);

2132 
vÆue
 = ()(*
•
 >> (7 - ()(
i
 & 0x07))) & 0x01;

2133 
d
 |(
vÆue
 << 
shi·
);

2135 i‡(
shi·
 == 0)

2137 
shi·
 = 7;

2138 *
dp
++ = (
≤g_byã
)
d
;

2139 
d
 = 0;

2143 
shi·
--;

2146 i‡(
shi·
 != 7)

2147 *
dp
 = (
≤g_byã
)
d
;

2154 
≤g_byãp
 
•
;

2155 
≤g_byãp
 
dp
;

2156 
shi·
;

2157 
d
;

2158 
vÆue
;

2159 
≤g_uöt_32
 
i
;

2160 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

2162 
dp
 = 
row
;

2163 
shi·
 = 6;

2164 
d
 = 0;

2166 
i
 = 
≤g_∑ss_°¨t
[
∑ss
]; i < 
row_width
;

2167 
i
 +
≤g_∑ss_öc
[
∑ss
])

2169 
•
 = 
row
 + (
size_t
)(
i
 >> 2);

2170 
vÆue
 = (*
•
 >> ((3 - ()(
i
 & 0x03)) << 1)) & 0x03;

2171 
d
 |(
vÆue
 << 
shi·
);

2173 i‡(
shi·
 == 0)

2175 
shi·
 = 6;

2176 *
dp
++ = (
≤g_byã
)
d
;

2177 
d
 = 0;

2181 
shi·
 -= 2;

2183 i‡(
shi·
 != 6)

2184 *
dp
 = (
≤g_byã
)
d
;

2191 
≤g_byãp
 
•
;

2192 
≤g_byãp
 
dp
;

2193 
shi·
;

2194 
d
;

2195 
vÆue
;

2196 
≤g_uöt_32
 
i
;

2197 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

2199 
dp
 = 
row
;

2200 
shi·
 = 4;

2201 
d
 = 0;

2202 
i
 = 
≤g_∑ss_°¨t
[
∑ss
]; i < 
row_width
;

2203 
i
 +
≤g_∑ss_öc
[
∑ss
])

2205 
•
 = 
row
 + (
size_t
)(
i
 >> 1);

2206 
vÆue
 = (*
•
 >> ((1 - ()(
i
 & 0x01)) << 2)) & 0x0f;

2207 
d
 |(
vÆue
 << 
shi·
);

2209 i‡(
shi·
 == 0)

2211 
shi·
 = 4;

2212 *
dp
++ = (
≤g_byã
)
d
;

2213 
d
 = 0;

2217 
shi·
 -= 4;

2219 i‡(
shi·
 != 4)

2220 *
dp
 = (
≤g_byã
)
d
;

2227 
≤g_byãp
 
•
;

2228 
≤g_byãp
 
dp
;

2229 
≤g_uöt_32
 
i
;

2230 
≤g_uöt_32
 
row_width
 = 
row_öfo
->
width
;

2231 
size_t
 
pixñ_byãs
;

2234 
dp
 = 
row
;

2237 
pixñ_byãs
 = (
row_öfo
->
pixñ_dïth
 >> 3);

2240 
i
 = 
≤g_∑ss_°¨t
[
∑ss
]; i < 
row_width
;

2241 
i
 +
≤g_∑ss_öc
[
∑ss
])

2244 
•
 = 
row
 + (
size_t
)
i
 * 
pixñ_byãs
;

2247 i‡(
dp
 !
•
)

2248 
	`mem˝y
(
dp
, 
•
, 
pixñ_byãs
);

2251 
dp
 +
pixñ_byãs
;

2257 
row_öfo
->
width
 = (row_info->width +

2258 
≤g_∑ss_öc
[
∑ss
] - 1 -

2259 
≤g_∑ss_°¨t
[
∑ss
]) /

2260 
≤g_∑ss_öc
[
∑ss
];

2262 
row_öfo
->
rowbyãs
 = 
	`PNG_ROWBYTES
‘ow_öfo->
pixñ_dïth
,

2263 
row_öfo
->
width
);

2265 
	}
}

2274 
≤g_wrôe_fûãªd_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
fûãªd_row
,

2275 
size_t
 
row_byãs
);

2277 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


2278 
size_t


2279 
	$≤g_£tup_sub_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
bµ
,

2280 
size_t
 
row_byãs
, size_à
lmös
)

2282 
≤g_byãp
 
Ω
, 
dp
, 
Õ
;

2283 
size_t
 
i
;

2284 
size_t
 
sum
 = 0;

2285 
v
;

2287 
≤g_±r
->
åy_row
[0] = 
PNG_FILTER_VALUE_SUB
;

2289 
i
 = 0, 
Ω
 = 
≤g_±r
->
row_buf
 + 1, 
dp
 =Öng_±r->
åy_row
 + 1; i < 
bµ
;

2290 
i
++, 
Ω
++, 
dp
++)

2292 
v
 = *
dp
 = *
Ω
;

2293 #ifde‡
PNG_USE_ABS


2294 
sum
 +128 - 
	`abs
(()
v
 - 128);

2296 
sum
 +(
v
 < 128) ? v : 256 - v;

2300 
Õ
 = 
≤g_±r
->
row_buf
 + 1; 
i
 < 
row_byãs
;

2301 
i
++, 
Ω
++, 
Õ
++, 
dp
++)

2303 
v
 = *
dp
 = (
≤g_byã
)((()*
Ω
 - ()*
Õ
) & 0xff);

2304 #ifde‡
PNG_USE_ABS


2305 
sum
 +128 - 
	`abs
(()
v
 - 128);

2307 
sum
 +(
v
 < 128) ? v : 256 - v;

2310 i‡(
sum
 > 
lmös
)

2314  (
sum
);

2315 
	}
}

2318 
	$≤g_£tup_sub_row_⁄ly
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
bµ
,

2319 
size_t
 
row_byãs
)

2321 
≤g_byãp
 
Ω
, 
dp
, 
Õ
;

2322 
size_t
 
i
;

2324 
≤g_±r
->
åy_row
[0] = 
PNG_FILTER_VALUE_SUB
;

2326 
i
 = 0, 
Ω
 = 
≤g_±r
->
row_buf
 + 1, 
dp
 =Öng_±r->
åy_row
 + 1; i < 
bµ
;

2327 
i
++, 
Ω
++, 
dp
++)

2329 *
dp
 = *
Ω
;

2332 
Õ
 = 
≤g_±r
->
row_buf
 + 1; 
i
 < 
row_byãs
;

2333 
i
++, 
Ω
++, 
Õ
++, 
dp
++)

2335 *
dp
 = (
≤g_byã
)((()*
Ω
 - ()*
Õ
) & 0xff);

2337 
	}
}

2339 
size_t


2340 
	$≤g_£tup_up_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
size_t
 
row_byãs
, size_à
lmös
)

2342 
≤g_byãp
 
Ω
, 
dp
, 
µ
;

2343 
size_t
 
i
;

2344 
size_t
 
sum
 = 0;

2345 
v
;

2347 
≤g_±r
->
åy_row
[0] = 
PNG_FILTER_VALUE_UP
;

2349 
i
 = 0, 
Ω
 = 
≤g_±r
->
row_buf
 + 1, 
dp
 =Öng_±r->
åy_row
 + 1,

2350 
µ
 = 
≤g_±r
->
¥ev_row
 + 1; 
i
 < 
row_byãs
;

2351 
i
++, 
Ω
++, 
µ
++, 
dp
++)

2353 
v
 = *
dp
 = (
≤g_byã
)((()*
Ω
 - ()*
µ
) & 0xff);

2354 #ifde‡
PNG_USE_ABS


2355 
sum
 +128 - 
	`abs
(()
v
 - 128);

2357 
sum
 +(
v
 < 128) ? v : 256 - v;

2360 i‡(
sum
 > 
lmös
)

2364  (
sum
);

2365 
	}
}

2367 
	$≤g_£tup_up_row_⁄ly
(
≤g_°ru˘Ω
 
≤g_±r
, 
size_t
 
row_byãs
)

2369 
≤g_byãp
 
Ω
, 
dp
, 
µ
;

2370 
size_t
 
i
;

2372 
≤g_±r
->
åy_row
[0] = 
PNG_FILTER_VALUE_UP
;

2374 
i
 = 0, 
Ω
 = 
≤g_±r
->
row_buf
 + 1, 
dp
 =Öng_±r->
åy_row
 + 1,

2375 
µ
 = 
≤g_±r
->
¥ev_row
 + 1; 
i
 < 
row_byãs
;

2376 
i
++, 
Ω
++, 
µ
++, 
dp
++)

2378 *
dp
 = (
≤g_byã
)((()*
Ω
 - ()*
µ
) & 0xff);

2380 
	}
}

2382 
size_t


2383 
	$≤g_£tup_avg_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
bµ
,

2384 
size_t
 
row_byãs
, size_à
lmös
)

2386 
≤g_byãp
 
Ω
, 
dp
, 
µ
, 
Õ
;

2387 
≤g_uöt_32
 
i
;

2388 
size_t
 
sum
 = 0;

2389 
v
;

2391 
≤g_±r
->
åy_row
[0] = 
PNG_FILTER_VALUE_AVG
;

2393 
i
 = 0, 
Ω
 = 
≤g_±r
->
row_buf
 + 1, 
dp
 =Öng_±r->
åy_row
 + 1,

2394 
µ
 = 
≤g_±r
->
¥ev_row
 + 1; 
i
 < 
bµ
; i++)

2396 
v
 = *
dp
++ = (
≤g_byã
)((()*
Ω
++ - (()*
µ
++ / 2)) & 0xff);

2398 #ifde‡
PNG_USE_ABS


2399 
sum
 +128 - 
	`abs
(()
v
 - 128);

2401 
sum
 +(
v
 < 128) ? v : 256 - v;

2405 
Õ
 = 
≤g_±r
->
row_buf
 + 1; 
i
 < 
row_byãs
; i++)

2407 
v
 = *
dp
++ = (
≤g_byã
)((()*
Ω
++ - ((()*
µ
++ + ()*
Õ
++) / 2))

2410 #ifde‡
PNG_USE_ABS


2411 
sum
 +128 - 
	`abs
(()
v
 - 128);

2413 
sum
 +(
v
 < 128) ? v : 256 - v;

2416 i‡(
sum
 > 
lmös
)

2420  (
sum
);

2421 
	}
}

2423 
	$≤g_£tup_avg_row_⁄ly
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
bµ
,

2424 
size_t
 
row_byãs
)

2426 
≤g_byãp
 
Ω
, 
dp
, 
µ
, 
Õ
;

2427 
≤g_uöt_32
 
i
;

2429 
≤g_±r
->
åy_row
[0] = 
PNG_FILTER_VALUE_AVG
;

2431 
i
 = 0, 
Ω
 = 
≤g_±r
->
row_buf
 + 1, 
dp
 =Öng_±r->
åy_row
 + 1,

2432 
µ
 = 
≤g_±r
->
¥ev_row
 + 1; 
i
 < 
bµ
; i++)

2434 *
dp
++ = (
≤g_byã
)((()*
Ω
++ - (()*
µ
++ / 2)) & 0xff);

2437 
Õ
 = 
≤g_±r
->
row_buf
 + 1; 
i
 < 
row_byãs
; i++)

2439 *
dp
++ = (
≤g_byã
)((()*
Ω
++ - ((()*
µ
++ + ()*
Õ
++) / 2))

2442 
	}
}

2444 
size_t


2445 
	$≤g_£tup_∑ëh_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
bµ
,

2446 
size_t
 
row_byãs
, size_à
lmös
)

2448 
≤g_byãp
 
Ω
, 
dp
, 
µ
, 
˝
, 
Õ
;

2449 
size_t
 
i
;

2450 
size_t
 
sum
 = 0;

2451 
v
;

2453 
≤g_±r
->
åy_row
[0] = 
PNG_FILTER_VALUE_PAETH
;

2455 
i
 = 0, 
Ω
 = 
≤g_±r
->
row_buf
 + 1, 
dp
 =Öng_±r->
åy_row
 + 1,

2456 
µ
 = 
≤g_±r
->
¥ev_row
 + 1; 
i
 < 
bµ
; i++)

2458 
v
 = *
dp
++ = (
≤g_byã
)((()*
Ω
++ - ()*
µ
++) & 0xff);

2460 #ifde‡
PNG_USE_ABS


2461 
sum
 +128 - 
	`abs
(()
v
 - 128);

2463 
sum
 +(
v
 < 128) ? v : 256 - v;

2467 
Õ
 = 
≤g_±r
->
row_buf
 + 1, 
˝
 =Öng_±r->
¥ev_row
 + 1; 
i
 < 
row_byãs
;

2468 
i
++)

2470 
a
, 
b
, 
c
, 
∑
, 
pb
, 
pc
, 
p
;

2472 
b
 = *
µ
++;

2473 
c
 = *
˝
++;

2474 
a
 = *
Õ
++;

2476 
p
 = 
b
 - 
c
;

2477 
pc
 = 
a
 - 
c
;

2479 #ifde‡
PNG_USE_ABS


2480 
∑
 = 
	`abs
(
p
);

2481 
pb
 = 
	`abs
(
pc
);

2482 
pc
 = 
	`abs
(
p
 +Öc);

2484 
∑
 = 
p
 < 0 ? -p :Ö;

2485 
pb
 = 
pc
 < 0 ? -pc :Öc;

2486 
pc
 = (
p
 +Öc) < 0 ? -(p +Öc) :Ö +Öc;

2489 
p
 = (
∑
 <
pb
 &&Ö®<=
pc
Ë? 
a
 : (pb <pcË? 
b
 : 
c
;

2491 
v
 = *
dp
++ = (
≤g_byã
)((()*
Ω
++ - 
p
) & 0xff);

2493 #ifde‡
PNG_USE_ABS


2494 
sum
 +128 - 
	`abs
(()
v
 - 128);

2496 
sum
 +(
v
 < 128) ? v : 256 - v;

2499 i‡(
sum
 > 
lmös
)

2503  (
sum
);

2504 
	}
}

2506 
	$≤g_£tup_∑ëh_row_⁄ly
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_uöt_32
 
bµ
,

2507 
size_t
 
row_byãs
)

2509 
≤g_byãp
 
Ω
, 
dp
, 
µ
, 
˝
, 
Õ
;

2510 
size_t
 
i
;

2512 
≤g_±r
->
åy_row
[0] = 
PNG_FILTER_VALUE_PAETH
;

2514 
i
 = 0, 
Ω
 = 
≤g_±r
->
row_buf
 + 1, 
dp
 =Öng_±r->
åy_row
 + 1,

2515 
µ
 = 
≤g_±r
->
¥ev_row
 + 1; 
i
 < 
bµ
; i++)

2517 *
dp
++ = (
≤g_byã
)((()*
Ω
++ - ()*
µ
++) & 0xff);

2520 
Õ
 = 
≤g_±r
->
row_buf
 + 1, 
˝
 =Öng_±r->
¥ev_row
 + 1; 
i
 < 
row_byãs
;

2521 
i
++)

2523 
a
, 
b
, 
c
, 
∑
, 
pb
, 
pc
, 
p
;

2525 
b
 = *
µ
++;

2526 
c
 = *
˝
++;

2527 
a
 = *
Õ
++;

2529 
p
 = 
b
 - 
c
;

2530 
pc
 = 
a
 - 
c
;

2532 #ifde‡
PNG_USE_ABS


2533 
∑
 = 
	`abs
(
p
);

2534 
pb
 = 
	`abs
(
pc
);

2535 
pc
 = 
	`abs
(
p
 +Öc);

2537 
∑
 = 
p
 < 0 ? -p :Ö;

2538 
pb
 = 
pc
 < 0 ? -pc :Öc;

2539 
pc
 = (
p
 +Öc) < 0 ? -(p +Öc) :Ö +Öc;

2542 
p
 = (
∑
 <
pb
 &&Ö®<=
pc
Ë? 
a
 : (pb <pcË? 
b
 : 
c
;

2544 *
dp
++ = (
≤g_byã
)((()*
Ω
++ - 
p
) & 0xff);

2546 
	}
}

2550 
	$≤g_wrôe_föd_fûãr
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_row_öf›
 
row_öfo
)

2552 #i‚de‡
PNG_WRITE_FILTER_SUPPORTED


2553 
	`≤g_wrôe_fûãªd_row
(
≤g_±r
,Öng_±r->
row_buf
, 
row_öfo
->
rowbyãs
+1);

2555 
fûãr_to_do
 = 
≤g_±r
->
do_fûãr
;

2556 
≤g_byãp
 
row_buf
;

2557 
≤g_byãp
 
be°_row
;

2558 
≤g_uöt_32
 
bµ
;

2559 
size_t
 
mös
;

2560 
size_t
 
row_byãs
 = 
row_öfo
->
rowbyãs
;

2562 
	`≤g_debug
(1, "inÖng_write_find_filter");

2565 
bµ
 = (
row_öfo
->
pixñ_dïth
 + 7) >> 3;

2567 
row_buf
 = 
≤g_±r
->row_buf;

2568 
mös
 = 
PNG_SIZE_MAX
 - 256

2599 
be°_row
 = 
≤g_±r
->
row_buf
;

2601 i‡(
PNG_SIZE_MAX
/128 <
row_byãs
)

2606 
fûãr_to_do
 &= 0U-filter_to_do;

2608 i‡((
fûãr_to_do
 & 
PNG_FILTER_NONE
) != 0 &&

2609 
fûãr_to_do
 !
PNG_FILTER_NONE
)

2614 
≤g_byãp
 
Ω
;

2615 
size_t
 
sum
 = 0;

2616 
size_t
 
i
;

2617 
v
;

2620 
i
 = 0, 
Ω
 = 
row_buf
 + 1; i < 
row_byãs
; i++,Ñp++)

2622 
v
 = *
Ω
;

2623 #ifde‡
PNG_USE_ABS


2624 
sum
 +128 - 
	`abs
(()
v
 - 128);

2626 
sum
 +(
v
 < 128) ? v : 256 - v;

2631 
mös
 = 
sum
;

2635 i‡(
fûãr_to_do
 =
PNG_FILTER_SUB
)

2638 
	`≤g_£tup_sub_row_⁄ly
(
≤g_±r
, 
bµ
, 
row_byãs
);

2639 
be°_row
 = 
≤g_±r
->
åy_row
;

2642 i‡((
fûãr_to_do
 & 
PNG_FILTER_SUB
) != 0)

2644 
size_t
 
sum
;

2645 
size_t
 
lmös
 = 
mös
;

2647 
sum
 = 
	`≤g_£tup_sub_row
(
≤g_±r
, 
bµ
, 
row_byãs
, 
lmös
);

2649 i‡(
sum
 < 
mös
)

2651 
mös
 = 
sum
;

2652 
be°_row
 = 
≤g_±r
->
åy_row
;

2653 i‡(
≤g_±r
->
t°_row
 !
NULL
)

2655 
≤g_±r
->
åy_row
 =Öng_±r->
t°_row
;

2656 
≤g_±r
->
t°_row
 = 
be°_row
;

2662 i‡(
fûãr_to_do
 =
PNG_FILTER_UP
)

2664 
	`≤g_£tup_up_row_⁄ly
(
≤g_±r
, 
row_byãs
);

2665 
be°_row
 = 
≤g_±r
->
åy_row
;

2668 i‡((
fûãr_to_do
 & 
PNG_FILTER_UP
) != 0)

2670 
size_t
 
sum
;

2671 
size_t
 
lmös
 = 
mös
;

2673 
sum
 = 
	`≤g_£tup_up_row
(
≤g_±r
, 
row_byãs
, 
lmös
);

2675 i‡(
sum
 < 
mös
)

2677 
mös
 = 
sum
;

2678 
be°_row
 = 
≤g_±r
->
åy_row
;

2679 i‡(
≤g_±r
->
t°_row
 !
NULL
)

2681 
≤g_±r
->
åy_row
 =Öng_±r->
t°_row
;

2682 
≤g_±r
->
t°_row
 = 
be°_row
;

2688 i‡(
fûãr_to_do
 =
PNG_FILTER_AVG
)

2690 
	`≤g_£tup_avg_row_⁄ly
(
≤g_±r
, 
bµ
, 
row_byãs
);

2691 
be°_row
 = 
≤g_±r
->
åy_row
;

2694 i‡((
fûãr_to_do
 & 
PNG_FILTER_AVG
) != 0)

2696 
size_t
 
sum
;

2697 
size_t
 
lmös
 = 
mös
;

2699 
sum

	`≤g_£tup_avg_row
(
≤g_±r
, 
bµ
, 
row_byãs
, 
lmös
);

2701 i‡(
sum
 < 
mös
)

2703 
mös
 = 
sum
;

2704 
be°_row
 = 
≤g_±r
->
åy_row
;

2705 i‡(
≤g_±r
->
t°_row
 !
NULL
)

2707 
≤g_±r
->
åy_row
 =Öng_±r->
t°_row
;

2708 
≤g_±r
->
t°_row
 = 
be°_row
;

2714 i‡(
fûãr_to_do
 =
PNG_FILTER_PAETH
)

2716 
	`≤g_£tup_∑ëh_row_⁄ly
(
≤g_±r
, 
bµ
, 
row_byãs
);

2717 
be°_row
 = 
≤g_±r
->
åy_row
;

2720 i‡((
fûãr_to_do
 & 
PNG_FILTER_PAETH
) != 0)

2722 
size_t
 
sum
;

2723 
size_t
 
lmös
 = 
mös
;

2725 
sum
 = 
	`≤g_£tup_∑ëh_row
(
≤g_±r
, 
bµ
, 
row_byãs
, 
lmös
);

2727 i‡(
sum
 < 
mös
)

2729 
be°_row
 = 
≤g_±r
->
åy_row
;

2730 i‡(
≤g_±r
->
t°_row
 !
NULL
)

2732 
≤g_±r
->
åy_row
 =Öng_±r->
t°_row
;

2733 
≤g_±r
->
t°_row
 = 
be°_row
;

2739 
	`≤g_wrôe_fûãªd_row
(
≤g_±r
, 
be°_row
, 
row_öfo
->
rowbyãs
+1);

2742 
	}
}

2747 
	$≤g_wrôe_fûãªd_row
(
≤g_°ru˘Ω
 
≤g_±r
, 
≤g_byãp
 
fûãªd_row
,

2748 
size_t
 
fuŒ_row_Àngth
 )

2750 
	`≤g_debug
(1, "inÖng_write_filtered_row");

2752 
	`≤g_debug1
(2, "fûã∏%d", 
fûãªd_row
[0]);

2754 
	`≤g_com¥ess_IDAT
(
≤g_±r
, 
fûãªd_row
, 
fuŒ_row_Àngth
, 
Z_NO_FLUSH
);

2756 #ifde‡
PNG_WRITE_FILTER_SUPPORTED


2758 i‡(
≤g_±r
->
¥ev_row
 !
NULL
)

2760 
≤g_byãp
 
çå
;

2762 
çå
 = 
≤g_±r
->
¥ev_row
;

2763 
≤g_±r
->
¥ev_row
 =Öng_±r->
row_buf
;

2764 
≤g_±r
->
row_buf
 = 
çå
;

2769 
	`≤g_wrôe_föish_row
(
≤g_±r
);

2771 #ifde‡
PNG_WRITE_FLUSH_SUPPORTED


2772 
≤g_±r
->
Êush_rows
++;

2774 i‡(
≤g_±r
->
Êush_di°
 > 0 &&

2775 
≤g_±r
->
Êush_rows
 >≤g_±r->
Êush_di°
)

2777 
	`≤g_wrôe_Êush
(
≤g_±r
);

2780 
	}
}

	@powerpc/filter_vsx_intrinsics.c

12 
	~<°dio.h
>

13 
	~<°döt.h
>

14 
	~"../≤g¥iv.h
"

16 #ifde‡
PNG_READ_SUPPORTED


19 #i‡
PNG_POWERPC_VSX_IMPLEMENTATION
 == 1

21 
	~<Ætivec.h
>

23 #i‡
PNG_POWERPC_VSX_OPT
 > 0

25 #i‚de‡
__VSX__


29 
	#vec_ld_u«lig√d
(
vec
,
d©a
Ëve¯
	`vec_vsx_ld
(0,d©a)

	)

30 
	#vec_°_u«lig√d
(
vec
,
d©a
Ë
	`vec_vsx_°
(vec,0,d©a)

	)

42 
	#vsx_de˛¨e_comm⁄_v¨s
(
row_öfo
,
row
,
¥ev_row
,
off£t
) \

43 
≤g_byã
 
i
;\

44 
≤g_byãp
 
Ω
 = 
row
 + 
off£t
;\

45 
≤g_c⁄°_byãp
 
µ
 = 
¥ev_row
;\

46 
size_t
 
u«lig√d_t›
 = 16 - (((size_t)
Ω
 % 16));\

47 
size_t
 
i°›
;\

48 if(
u«lig√d_t›
 == 16)\

49 
u«lig√d_t›
 = 0;\

50 
i°›
 = 
row_öfo
->
rowbyãs
;\

51 if((
u«lig√d_t›
 < 
i°›
))\

52 
i°›
 -
u«lig√d_t›
;\

54 
u«lig√d_t›
 = 
i°›
;\

55 
i°›
 = 0;\

56 }

	)

58 
	$≤g_ªad_fûãr_row_up_vsx
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

59 
≤g_c⁄°_byãp
 
¥ev_row
)

61 
ve˘‹
 
Ω_vec
;

62 
ve˘‹
 
µ_vec
;

63 
	`vsx_de˛¨e_comm⁄_v¨s
(
row_öfo
,
row
,
¥ev_row
,0)

69 
i
 = 0; i < 
u«lig√d_t›
; i++)

71 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*
µ
++)) & 0xff);

72 
Ω
++;

76  
i°›
 >= 16 )

78 
Ω_vec
 = 
	`vec_ld
(0,
Ω
);

79 
	`vec_ld_u«lig√d
(
µ_vec
,
µ
);

81 
Ω_vec
 = 
	`vec_add
‘p_vec,
µ_vec
);

83 
	`vec_°
(
Ω_vec
,0,
Ω
);

85 
µ
 += 16;

86 
Ω
 += 16;

87 
i°›
 -= 16;

90 if(
i°›
 > 0)

95 
i
 = 0; i < 
i°›
; i++)

97 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*
µ
++)) & 0xff);

98 
Ω
++;

102 
	}
}

104 c⁄° 
ve˘‹
 
	gVSX_LEFTSHIFTED1_4
 = {16,16,16,16, 0, 1, 2, 3,16,16,16,16,16,16,16,16};

105 c⁄° 
ve˘‹
 
	gVSX_LEFTSHIFTED2_4
 = {16,16,16,16,16,16,16,16, 4, 5, 6, 7,16,16,16,16};

106 c⁄° 
ve˘‹
 
	gVSX_LEFTSHIFTED3_4
 = {16,16,16,16,16,16,16,16,16,16,16,16, 8, 9,10,11};

108 c⁄° 
ve˘‹
 
	gVSX_LEFTSHIFTED1_3
 = {16,16,16, 0, 1, 2,16,16,16,16,16,16,16,16,16,16};

109 c⁄° 
ve˘‹
 
	gVSX_LEFTSHIFTED2_3
 = {16,16,16,16,16,16, 3, 4, 5,16,16,16,16,16,16,16};

110 c⁄° 
ve˘‹
 
	gVSX_LEFTSHIFTED3_3
 = {16,16,16,16,16,16,16,16,16, 6, 7, 8,16,16,16,16};

111 c⁄° 
ve˘‹
 
	gVSX_LEFTSHIFTED4_3
 = {16,16,16,16,16,16,16,16,16,16,16,16, 9,10,11,16};

113 c⁄° 
ve˘‹
 
	gVSX_NOT_SHIFTED1_4
 = {16,16,16,16, 4, 5, 6, 7,16,16,16,16,16,16,16,16};

114 c⁄° 
ve˘‹
 
	gVSX_NOT_SHIFTED2_4
 = {16,16,16,16,16,16,16,16, 8, 9,10,11,16,16,16,16};

115 c⁄° 
ve˘‹
 
	gVSX_NOT_SHIFTED3_4
 = {16,16,16,16,16,16,16,16,16,16,16,16,12,13,14,15};

117 c⁄° 
ve˘‹
 
	gVSX_NOT_SHIFTED1_3
 = {16,16,16, 3, 4, 5,16,16,16,16,16,16,16,16,16,16};

118 c⁄° 
ve˘‹
 
	gVSX_NOT_SHIFTED2_3
 = {16,16,16,16,16,16, 6, 7, 8,16,16,16,16,16,16,16};

119 c⁄° 
ve˘‹
 
	gVSX_NOT_SHIFTED3_3
 = {16,16,16,16,16,16,16,16,16, 9,10,11,16,16,16,16};

120 c⁄° 
ve˘‹
 
	gVSX_NOT_SHIFTED4_3
 = {16,16,16,16,16,16,16,16,16,16,16,16,12,13,14,16};

122 c⁄° 
ve˘‹
 
	gVSX_CHAR_ZERO
 = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

123 #ifde‡
__LITTLE_ENDIAN__


125 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT1_4
 = { 4,16, 5,16, 6,16, 7,16,16,16,16,16,16,16,16,16};

126 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT2_4
 = { 8,16, 9,16,10,16,11,16,16,16,16,16,16,16,16,16};

127 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT3_4
 = {12,16,13,16,14,16,15,16,16,16,16,16,16,16,16,16};

129 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR1_4
 = {16,16,16,16, 0, 2, 4, 6,16,16,16,16,16,16,16,16};

130 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR2_4
 = {16,16,16,16,16,16,16,16, 0, 2, 4, 6,16,16,16,16};

131 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR3_4
 = {16,16,16,16,16,16,16,16,16,16,16,16, 0, 2, 4, 6};

133 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT1_3
 = { 3,16, 4,16, 5,16,16,16,16,16,16,16,16,16,16,16};

134 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT2_3
 = { 6,16, 7,16, 8,16,16,16,16,16,16,16,16,16,16,16};

135 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT3_3
 = { 9,16,10,16,11,16,16,16,16,16,16,16,16,16,16,16};

136 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT4_3
 = {12,16,13,16,14,16,16,16,16,16,16,16,16,16,16,16};

138 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR1_3
 = {16,16,16, 0, 2, 4,16,16,16,16,16,16,16,16,16,16};

139 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR2_3
 = {16,16,16,16,16,16, 0, 2, 4,16,16,16,16,16,16,16};

140 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR3_3
 = {16,16,16,16,16,16,16,16,16, 0, 2, 4,16,16,16,16};

141 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR4_3
 = {16,16,16,16,16,16,16,16,16,16,16,16, 0, 2, 4,16};

143 #ñi‡
deföed
(
__BIG_ENDIAN__
)

145 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT1_4
 = {16, 4,16, 5,16, 6,16, 7,16,16,16,16,16,16,16,16};

146 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT2_4
 = {16, 8,16, 9,16,10,16,11,16,16,16,16,16,16,16,16};

147 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT3_4
 = {16,12,16,13,16,14,16,15,16,16,16,16,16,16,16,16};

149 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR1_4
 = {16,16,16,16, 1, 3, 5, 7,16,16,16,16,16,16,16,16};

150 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR2_4
 = {16,16,16,16,16,16,16,16, 1, 3, 5, 7,16,16,16,16};

151 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR3_4
 = {16,16,16,16,16,16,16,16,16,16,16,16, 1, 3, 5, 7};

153 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT1_3
 = {16, 3,16, 4,16, 5,16,16,16,16,16,16,16,16,16,16};

154 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT2_3
 = {16, 6,16, 7,16, 8,16,16,16,16,16,16,16,16,16,16};

155 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT3_3
 = {16, 9,16,10,16,11,16,16,16,16,16,16,16,16,16,16};

156 c⁄° 
ve˘‹
 
	gVSX_CHAR_TO_SHORT4_3
 = {16,12,16,13,16,14,16,16,16,16,16,16,16,16,16,16};

158 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR1_3
 = {16,16,16, 1, 3, 5,16,16,16,16,16,16,16,16,16,16};

159 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR2_3
 = {16,16,16,16,16,16, 1, 3, 5,16,16,16,16,16,16,16};

160 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR3_3
 = {16,16,16,16,16,16,16,16,16, 1, 3, 5,16,16,16,16};

161 c⁄° 
ve˘‹
 
	gVSX_SHORT_TO_CHAR4_3
 = {16,16,16,16,16,16,16,16,16,16,16,16, 1, 3, 5,16};

165 
	#vsx_ch¨_to_sh‹t
(
vec
,
off£t
,
bµ
Ë(
ve˘‹
 )
	`vec_≥rm
((vec),
VSX_CHAR_ZERO
,
VSX_CHAR_TO_SHORT
##off£t##
_
##bµ)

	)

166 
	#vsx_sh‹t_to_ch¨
(
vec
,
off£t
,
bµ
Ë
	`vec_≥rm
(((
ve˘‹
 )(vec)),
VSX_CHAR_ZERO
,
VSX_SHORT_TO_CHAR
##off£t##
_
##bµ)

	)

168 #ifde‡
PNG_USE_ABS


169 
	#vsx_abs
(
numbî
Ë
	`abs
“umbî)

	)

171 
	#vsx_abs
(
numbî
Ë“umbî > 0Ë? (numbîË: -“umbî)

	)

174 
	$≤g_ªad_fûãr_row_sub4_vsx
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

175 
≤g_c⁄°_byãp
 
¥ev_row
)

177 
≤g_byã
 
bµ
 = 4;

179 
ve˘‹
 
Ω_vec
;

180 
ve˘‹
 
∑π_vec
;

182 
	`vsx_de˛¨e_comm⁄_v¨s
(
row_öfo
,
row
,
¥ev_row
,
bµ
)

184 
	`PNG_UNUSED
(
µ
)

190 
i
 = 0; i < 
u«lig√d_t›
; i++)

192 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*‘p-
bµ
))) & 0xff);

193 
Ω
++;

197  
i°›
 >= 16 )

199 
i
=0;ò< 
bµ
 ; i++)

201 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*‘p-
bµ
))) & 0xff);

202 
Ω
++;

204 
Ω
 -
bµ
;

206 
Ω_vec
 = 
	`vec_ld
(0,
Ω
);

207 
∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED1_4
);

208 
Ω_vec
 = 
	`vec_add
‘p_vec,
∑π_vec
);

210 
∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED2_4
);

211 
Ω_vec
 = 
	`vec_add
‘p_vec,
∑π_vec
);

213 
∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED3_4
);

214 
Ω_vec
 = 
	`vec_add
‘p_vec,
∑π_vec
);

216 
	`vec_°
(
Ω_vec
,0,
Ω
);

218 
Ω
 += 16;

219 
i°›
 -= 16;

222 if(
i°›
 > 0)

223 
i
 = 0; i < 
i°›
 % 16; i++)

225 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*‘∞- 
bµ
))) & 0xff);

226 
Ω
++;

229 
	}
}

231 
	$≤g_ªad_fûãr_row_sub3_vsx
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

232 
≤g_c⁄°_byãp
 
¥ev_row
)

234 
≤g_byã
 
bµ
 = 3;

236 
ve˘‹
 
Ω_vec
;

237 
ve˘‹
 
∑π_vec
;

239 
	`vsx_de˛¨e_comm⁄_v¨s
(
row_öfo
,
row
,
¥ev_row
,
bµ
)

241 
	`PNG_UNUSED
(
µ
)

247 
i
 = 0; i < 
u«lig√d_t›
; i++)

249 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*‘p-
bµ
))) & 0xff);

250 
Ω
++;

254  
i°›
 >= 16 )

256 
i
=0;ò< 
bµ
 ; i++)

258 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*‘p-
bµ
))) & 0xff);

259 
Ω
++;

261 
Ω
 -
bµ
;

263 
Ω_vec
 = 
	`vec_ld
(0,
Ω
);

264 
∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED1_3
);

265 
Ω_vec
 = 
	`vec_add
‘p_vec,
∑π_vec
);

267 
∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED2_3
);

268 
Ω_vec
 = 
	`vec_add
‘p_vec,
∑π_vec
);

270 
∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED3_3
);

271 
Ω_vec
 = 
	`vec_add
‘p_vec,
∑π_vec
);

273 
∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED4_3
);

274 
Ω_vec
 = 
	`vec_add
‘p_vec,
∑π_vec
);

276 
	`vec_°
(
Ω_vec
,0,
Ω
);

277 
Ω
 += 15;

278 
i°›
 -= 16;

283 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*‘p-
bµ
))) & 0xff);

284 
Ω
++;

287 if(
i°›
 > 0)

288 
i
 = 0; i < 
i°›
 % 16; i++)

290 *
Ω
 = (
≤g_byã
)((()(*ΩË+ ()(*‘p-
bµ
))) & 0xff);

291 
Ω
++;

293 
	}
}

295 
	$≤g_ªad_fûãr_row_avg4_vsx
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

296 
≤g_c⁄°_byãp
 
¥ev_row
)

298 
≤g_byã
 
bµ
 = 4;

300 
ve˘‹
 
Ω_vec
;

301 
ve˘‹
 
µ_vec
;

302 
ve˘‹
 
µ_∑π_vec
;

303 
ve˘‹
 
Ω_∑π_vec
;

304 
ve˘‹
 
avg_vec
;

306 
	`vsx_de˛¨e_comm⁄_v¨s
(
row_öfo
,
row
,
¥ev_row
,
bµ
)

307 
Ω
 -
bµ
;

308 if(
i°›
 >
bµ
)

309 
i°›
 -
bµ
;

311 
i
 = 0; i < 
bµ
; i++)

313 *
Ω
 = (
≤g_byã
)((()(*rp) +

314 (()(*
µ
++) / 2 )) & 0xff);

316 
Ω
++;

323 
i
 = 0; i < 
u«lig√d_t›
; i++)

325 *
Ω
 = (
≤g_byã
)((()(*rp) +

326 ()(*
µ
++ + *(
Ω
-
bµ
)) / 2 ) & 0xff);

328 
Ω
++;

332  
i°›
 >= 16 )

334 
i
=0;ò< 
bµ
 ; i++)

336 *
Ω
 = (
≤g_byã
)((()(*rp) +

337 ()(*
µ
++ + *(
Ω
-
bµ
)) / 2 ) & 0xff);

339 
Ω
++;

341 
Ω
 -
bµ
;

342 
µ
 -
bµ
;

344 
	`vec_ld_u«lig√d
(
µ_vec
,
µ
);

345 
Ω_vec
 = 
	`vec_ld
(0,
Ω
);

347 
Ω_∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED1_4
);

348 
µ_∑π_vec
 = 
	`vec_≥rm
(
µ_vec
,
VSX_CHAR_ZERO
,
VSX_NOT_SHIFTED1_4
);

349 
avg_vec
 = 
	`vec_avg
(
Ω_∑π_vec
,
µ_∑π_vec
);

350 
avg_vec
 = 
	`vec_sub
◊vg_vec, 
	`vec_™d
(
	`vec_x‹
(
Ω_∑π_vec
,
µ_∑π_vec
),
	`vec_•œt_u8
(1)));

351 
Ω_vec
 = 
	`vec_add
‘p_vec,
avg_vec
);

353 
Ω_∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED2_4
);

354 
µ_∑π_vec
 = 
	`vec_≥rm
(
µ_vec
,
VSX_CHAR_ZERO
,
VSX_NOT_SHIFTED2_4
);

355 
avg_vec
 = 
	`vec_avg
(
Ω_∑π_vec
,
µ_∑π_vec
);

356 
avg_vec
 = 
	`vec_sub
◊vg_vec, 
	`vec_™d
(
	`vec_x‹
(
Ω_∑π_vec
,
µ_∑π_vec
),
	`vec_•œt_u8
(1)));

357 
Ω_vec
 = 
	`vec_add
‘p_vec,
avg_vec
);

359 
Ω_∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED3_4
);

360 
µ_∑π_vec
 = 
	`vec_≥rm
(
µ_vec
,
VSX_CHAR_ZERO
,
VSX_NOT_SHIFTED3_4
);

361 
avg_vec
 = 
	`vec_avg
(
Ω_∑π_vec
,
µ_∑π_vec
);

362 
avg_vec
 = 
	`vec_sub
◊vg_vec, 
	`vec_™d
(
	`vec_x‹
(
Ω_∑π_vec
,
µ_∑π_vec
),
	`vec_•œt_u8
(1)));

363 
Ω_vec
 = 
	`vec_add
‘p_vec,
avg_vec
);

365 
	`vec_°
(
Ω_vec
,0,
Ω
);

367 
Ω
 += 16;

368 
µ
 += 16;

369 
i°›
 -= 16;

372 if(
i°›
 > 0)

373 
i
 = 0; i < 
i°›
 % 16; i++)

375 *
Ω
 = (
≤g_byã
)((()(*rp) +

376 ()(*
µ
++ + *(
Ω
-
bµ
)) / 2 ) & 0xff);

378 
Ω
++;

380 
	}
}

382 
	$≤g_ªad_fûãr_row_avg3_vsx
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

383 
≤g_c⁄°_byãp
 
¥ev_row
)

385 
≤g_byã
 
bµ
 = 3;

387 
ve˘‹
 
Ω_vec
;

388 
ve˘‹
 
µ_vec
;

389 
ve˘‹
 
µ_∑π_vec
;

390 
ve˘‹
 
Ω_∑π_vec
;

391 
ve˘‹
 
avg_vec
;

393 
	`vsx_de˛¨e_comm⁄_v¨s
(
row_öfo
,
row
,
¥ev_row
,
bµ
)

394 
Ω
 -
bµ
;

395 if(
i°›
 >
bµ
)

396 
i°›
 -
bµ
;

398 
i
 = 0; i < 
bµ
; i++)

400 *
Ω
 = (
≤g_byã
)((()(*rp) +

401 (()(*
µ
++) / 2 )) & 0xff);

403 
Ω
++;

410 
i
 = 0; i < 
u«lig√d_t›
; i++)

412 *
Ω
 = (
≤g_byã
)((()(*rp) +

413 ()(*
µ
++ + *(
Ω
-
bµ
)) / 2 ) & 0xff);

415 
Ω
++;

419  
i°›
 >= 16 )

421 
i
=0;ò< 
bµ
 ; i++)

423 *
Ω
 = (
≤g_byã
)((()(*rp) +

424 ()(*
µ
++ + *(
Ω
-
bµ
)) / 2 ) & 0xff);

426 
Ω
++;

428 
Ω
 -
bµ
;

429 
µ
 -
bµ
;

431 
	`vec_ld_u«lig√d
(
µ_vec
,
µ
);

432 
Ω_vec
 = 
	`vec_ld
(0,
Ω
);

434 
Ω_∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED1_3
);

435 
µ_∑π_vec
 = 
	`vec_≥rm
(
µ_vec
,
VSX_CHAR_ZERO
,
VSX_NOT_SHIFTED1_3
);

436 
avg_vec
 = 
	`vec_avg
(
Ω_∑π_vec
,
µ_∑π_vec
);

437 
avg_vec
 = 
	`vec_sub
◊vg_vec, 
	`vec_™d
(
	`vec_x‹
(
Ω_∑π_vec
,
µ_∑π_vec
),
	`vec_•œt_u8
(1)));

438 
Ω_vec
 = 
	`vec_add
‘p_vec,
avg_vec
);

440 
Ω_∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED2_3
);

441 
µ_∑π_vec
 = 
	`vec_≥rm
(
µ_vec
,
VSX_CHAR_ZERO
,
VSX_NOT_SHIFTED2_3
);

442 
avg_vec
 = 
	`vec_avg
(
Ω_∑π_vec
,
µ_∑π_vec
);

443 
avg_vec
 = 
	`vec_sub
◊vg_vec, 
	`vec_™d
(
	`vec_x‹
(
Ω_∑π_vec
,
µ_∑π_vec
),
	`vec_•œt_u8
(1)));

444 
Ω_vec
 = 
	`vec_add
‘p_vec,
avg_vec
);

446 
Ω_∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED3_3
);

447 
µ_∑π_vec
 = 
	`vec_≥rm
(
µ_vec
,
VSX_CHAR_ZERO
,
VSX_NOT_SHIFTED3_3
);

448 
avg_vec
 = 
	`vec_avg
(
Ω_∑π_vec
,
µ_∑π_vec
);

449 
avg_vec
 = 
	`vec_sub
◊vg_vec, 
	`vec_™d
(
	`vec_x‹
(
Ω_∑π_vec
,
µ_∑π_vec
),
	`vec_•œt_u8
(1)));

450 
Ω_vec
 = 
	`vec_add
‘p_vec,
avg_vec
);

452 
Ω_∑π_vec
 = 
	`vec_≥rm
(
Ω_vec
,
VSX_CHAR_ZERO
,
VSX_LEFTSHIFTED4_3
);

453 
µ_∑π_vec
 = 
	`vec_≥rm
(
µ_vec
,
VSX_CHAR_ZERO
,
VSX_NOT_SHIFTED4_3
);

454 
avg_vec
 = 
	`vec_avg
(
Ω_∑π_vec
,
µ_∑π_vec
);

455 
avg_vec
 = 
	`vec_sub
◊vg_vec, 
	`vec_™d
(
	`vec_x‹
(
Ω_∑π_vec
,
µ_∑π_vec
),
	`vec_•œt_u8
(1)));

456 
Ω_vec
 = 
	`vec_add
‘p_vec,
avg_vec
);

458 
	`vec_°
(
Ω_vec
,0,
Ω
);

460 
Ω
 += 15;

461 
µ
 += 15;

462 
i°›
 -= 16;

467 *
Ω
 = (
≤g_byã
)((()(*rp) +

468 ()(*
µ
++ + *(
Ω
-
bµ
)) / 2 ) & 0xff);

469 
Ω
++;

472 if(
i°›
 > 0)

473 
i
 = 0; i < 
i°›
 % 16; i++)

475 *
Ω
 = (
≤g_byã
)((()(*rp) +

476 ()(*
µ
++ + *(
Ω
-
bµ
)) / 2 ) & 0xff);

478 
Ω
++;

480 
	}
}

483 
	#if_thí_ñ£
(
c
,
t
,
e
Ë
	`vec_£l
”,t,c)

	)

485 
	#vsx_∑ëh_¥o˚ss
(
Ω
,
µ
,
a
,
b
,
c
,
∑
,
pb
,
pc
,
bµ
) {\

486 
c
 = *(
µ
 - 
bµ
);\

487 
a
 = *(
Ω
 - 
bµ
);\

488 
b
 = *
µ
++;\

489 
p
 = 
b
 - 
c
;\

490 
pc
 = 
a
 - 
c
;\

491 
∑
 = 
	`vsx_abs
(
p
);\

492 
pb
 = 
	`vsx_abs
(
pc
);\

493 
pc
 = 
	`vsx_abs
(
p
 +Öc);\

494 i‡(
pb
 < 
∑
Ë∑ =Öb, 
a
 = 
b
;\

495 i‡(
pc
 < 
∑
Ë
a
 = 
c
;\

496 
a
 +*
Ω
;\

497 *
Ω
++ = (
≤g_byã
)
a
;\

498 }

	)

500 
	$≤g_ªad_fûãr_row_∑ëh4_vsx
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

501 
≤g_c⁄°_byãp
 
¥ev_row
)

503 
≤g_byã
 
bµ
 = 4;

505 
a
, 
b
, 
c
, 
∑
, 
pb
, 
pc
, 
p
;

506 
ve˘‹
 
Ω_vec
;

507 
ve˘‹
 
µ_vec
;

508 
ve˘‹
 
a_vec
,
b_vec
,
c_vec
,
√¨e°_vec
;

509 
ve˘‹
 sig√d 
∑_vec
,
pb_vec
,
pc_vec
,
smÆÀ°_vec
;

511 
	`vsx_de˛¨e_comm⁄_v¨s
(
row_öfo
,
row
,
¥ev_row
,
bµ
)

512 
Ω
 -
bµ
;

513 if(
i°›
 >
bµ
)

514 
i°›
 -
bµ
;

519 
i
 = 0; i < 
bµ
 ; i++)

521 *
Ω
 = (
≤g_byã
)–*Ω + *
µ
);

522 
Ω
++;

523 
µ
++;

526 
i
 = 0; i < 
u«lig√d_t›
 ; i++)

528 
	`vsx_∑ëh_¥o˚ss
(
Ω
,
µ
,
a
,
b
,
c
,
∑
,
pb
,
pc
,
bµ
)

531  
i°›
 >= 16)

533 
i
 = 0; i < 
bµ
 ; i++)

535 
	`vsx_∑ëh_¥o˚ss
(
Ω
,
µ
,
a
,
b
,
c
,
∑
,
pb
,
pc
,
bµ
)

538 
Ω
 -
bµ
;

539 
µ
 -
bµ
;

540 
Ω_vec
 = 
	`vec_ld
(0,
Ω
);

541 
	`vec_ld_u«lig√d
(
µ_vec
,
µ
);

543 
a_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
Ω_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED1_4
),1,4);

544 
b_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_NOT_SHIFTED1_4
),1,4);

545 
c_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED1_4
),1,4);

546 
∑_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
b_vec
,
c_vec
);

547 
pb_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
a_vec
 , 
c_vec
);

548 
pc_vec
 = 
	`vec_add
(
∑_vec
,
pb_vec
);

549 
∑_vec
 = 
	`vec_abs
(pa_vec);

550 
pb_vec
 = 
	`vec_abs
(pb_vec);

551 
pc_vec
 = 
	`vec_abs
(pc_vec);

552 
smÆÀ°_vec
 = 
	`vec_mö
(
pc_vec
, vec_mö(
∑_vec
,
pb_vec
));

553 
√¨e°_vec
 = 
	`if_thí_ñ£
(

554 
	`vec_cm≥q
(
∑_vec
,
smÆÀ°_vec
),

555 
a_vec
,

556 
	`if_thí_ñ£
(

557 
	`vec_cm≥q
(
pb_vec
,
smÆÀ°_vec
),

558 
b_vec
,

559 
c_vec


562 
Ω_vec
 = 
	`vec_add
‘p_vec,(
	`vsx_sh‹t_to_ch¨
(
√¨e°_vec
,1,4)));

564 
a_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
Ω_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED2_4
),2,4);

565 
b_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_NOT_SHIFTED2_4
),2,4);

566 
c_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED2_4
),2,4);

567 
∑_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
b_vec
,
c_vec
);

568 
pb_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
a_vec
 , 
c_vec
);

569 
pc_vec
 = 
	`vec_add
(
∑_vec
,
pb_vec
);

570 
∑_vec
 = 
	`vec_abs
(pa_vec);

571 
pb_vec
 = 
	`vec_abs
(pb_vec);

572 
pc_vec
 = 
	`vec_abs
(pc_vec);

573 
smÆÀ°_vec
 = 
	`vec_mö
(
pc_vec
, vec_mö(
∑_vec
,
pb_vec
));

574 
√¨e°_vec
 = 
	`if_thí_ñ£
(

575 
	`vec_cm≥q
(
∑_vec
,
smÆÀ°_vec
),

576 
a_vec
,

577 
	`if_thí_ñ£
(

578 
	`vec_cm≥q
(
pb_vec
,
smÆÀ°_vec
),

579 
b_vec
,

580 
c_vec


583 
Ω_vec
 = 
	`vec_add
‘p_vec,(
	`vsx_sh‹t_to_ch¨
(
√¨e°_vec
,2,4)));

585 
a_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
Ω_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED3_4
),3,4);

586 
b_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_NOT_SHIFTED3_4
),3,4);

587 
c_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED3_4
),3,4);

588 
∑_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
b_vec
,
c_vec
);

589 
pb_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
a_vec
 , 
c_vec
);

590 
pc_vec
 = 
	`vec_add
(
∑_vec
,
pb_vec
);

591 
∑_vec
 = 
	`vec_abs
(pa_vec);

592 
pb_vec
 = 
	`vec_abs
(pb_vec);

593 
pc_vec
 = 
	`vec_abs
(pc_vec);

594 
smÆÀ°_vec
 = 
	`vec_mö
(
pc_vec
, vec_mö(
∑_vec
,
pb_vec
));

595 
√¨e°_vec
 = 
	`if_thí_ñ£
(

596 
	`vec_cm≥q
(
∑_vec
,
smÆÀ°_vec
),

597 
a_vec
,

598 
	`if_thí_ñ£
(

599 
	`vec_cm≥q
(
pb_vec
,
smÆÀ°_vec
),

600 
b_vec
,

601 
c_vec


604 
Ω_vec
 = 
	`vec_add
‘p_vec,(
	`vsx_sh‹t_to_ch¨
(
√¨e°_vec
,3,4)));

606 
	`vec_°
(
Ω_vec
,0,
Ω
);

608 
Ω
 += 16;

609 
µ
 += 16;

610 
i°›
 -= 16;

613 if(
i°›
 > 0)

614 
i
 = 0; i < 
i°›
 % 16; i++)

616 
	`vsx_∑ëh_¥o˚ss
(
Ω
,
µ
,
a
,
b
,
c
,
∑
,
pb
,
pc
,
bµ
)

618 
	}
}

620 
	$≤g_ªad_fûãr_row_∑ëh3_vsx
(
≤g_row_öf›
 
row_öfo
, 
≤g_byãp
 
row
,

621 
≤g_c⁄°_byãp
 
¥ev_row
)

623 
≤g_byã
 
bµ
 = 3;

625 
a
, 
b
, 
c
, 
∑
, 
pb
, 
pc
, 
p
;

626 
ve˘‹
 
Ω_vec
;

627 
ve˘‹
 
µ_vec
;

628 
ve˘‹
 
a_vec
,
b_vec
,
c_vec
,
√¨e°_vec
;

629 
ve˘‹
 sig√d 
∑_vec
,
pb_vec
,
pc_vec
,
smÆÀ°_vec
;

631 
	`vsx_de˛¨e_comm⁄_v¨s
(
row_öfo
,
row
,
¥ev_row
,
bµ
)

632 
Ω
 -
bµ
;

633 if(
i°›
 >
bµ
)

634 
i°›
 -
bµ
;

639 
i
 = 0; i < 
bµ
 ; i++)

641 *
Ω
 = (
≤g_byã
)–*Ω + *
µ
);

642 
Ω
++;

643 
µ
++;

646 
i
 = 0; i < 
u«lig√d_t›
 ; i++)

648 
	`vsx_∑ëh_¥o˚ss
(
Ω
,
µ
,
a
,
b
,
c
,
∑
,
pb
,
pc
,
bµ
)

651  
i°›
 >= 16)

653 
i
 = 0; i < 
bµ
 ; i++)

655 
	`vsx_∑ëh_¥o˚ss
(
Ω
,
µ
,
a
,
b
,
c
,
∑
,
pb
,
pc
,
bµ
)

658 
Ω
 -
bµ
;

659 
µ
 -
bµ
;

660 
Ω_vec
 = 
	`vec_ld
(0,
Ω
);

661 
	`vec_ld_u«lig√d
(
µ_vec
,
µ
);

663 
a_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
Ω_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED1_3
),1,3);

664 
b_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_NOT_SHIFTED1_3
),1,3);

665 
c_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED1_3
),1,3);

666 
∑_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
b_vec
,
c_vec
);

667 
pb_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
a_vec
 , 
c_vec
);

668 
pc_vec
 = 
	`vec_add
(
∑_vec
,
pb_vec
);

669 
∑_vec
 = 
	`vec_abs
(pa_vec);

670 
pb_vec
 = 
	`vec_abs
(pb_vec);

671 
pc_vec
 = 
	`vec_abs
(pc_vec);

672 
smÆÀ°_vec
 = 
	`vec_mö
(
pc_vec
, vec_mö(
∑_vec
,
pb_vec
));

673 
√¨e°_vec
 = 
	`if_thí_ñ£
(

674 
	`vec_cm≥q
(
∑_vec
,
smÆÀ°_vec
),

675 
a_vec
,

676 
	`if_thí_ñ£
(

677 
	`vec_cm≥q
(
pb_vec
,
smÆÀ°_vec
),

678 
b_vec
,

679 
c_vec


682 
Ω_vec
 = 
	`vec_add
‘p_vec,(
	`vsx_sh‹t_to_ch¨
(
√¨e°_vec
,1,3)));

684 
a_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
Ω_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED2_3
),2,3);

685 
b_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_NOT_SHIFTED2_3
),2,3);

686 
c_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED2_3
),2,3);

687 
∑_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
b_vec
,
c_vec
);

688 
pb_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
a_vec
 , 
c_vec
);

689 
pc_vec
 = 
	`vec_add
(
∑_vec
,
pb_vec
);

690 
∑_vec
 = 
	`vec_abs
(pa_vec);

691 
pb_vec
 = 
	`vec_abs
(pb_vec);

692 
pc_vec
 = 
	`vec_abs
(pc_vec);

693 
smÆÀ°_vec
 = 
	`vec_mö
(
pc_vec
, vec_mö(
∑_vec
,
pb_vec
));

694 
√¨e°_vec
 = 
	`if_thí_ñ£
(

695 
	`vec_cm≥q
(
∑_vec
,
smÆÀ°_vec
),

696 
a_vec
,

697 
	`if_thí_ñ£
(

698 
	`vec_cm≥q
(
pb_vec
,
smÆÀ°_vec
),

699 
b_vec
,

700 
c_vec


703 
Ω_vec
 = 
	`vec_add
‘p_vec,(
	`vsx_sh‹t_to_ch¨
(
√¨e°_vec
,2,3)));

705 
a_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
Ω_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED3_3
),3,3);

706 
b_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_NOT_SHIFTED3_3
),3,3);

707 
c_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED3_3
),3,3);

708 
∑_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
b_vec
,
c_vec
);

709 
pb_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
a_vec
 , 
c_vec
);

710 
pc_vec
 = 
	`vec_add
(
∑_vec
,
pb_vec
);

711 
∑_vec
 = 
	`vec_abs
(pa_vec);

712 
pb_vec
 = 
	`vec_abs
(pb_vec);

713 
pc_vec
 = 
	`vec_abs
(pc_vec);

714 
smÆÀ°_vec
 = 
	`vec_mö
(
pc_vec
, vec_mö(
∑_vec
,
pb_vec
));

715 
√¨e°_vec
 = 
	`if_thí_ñ£
(

716 
	`vec_cm≥q
(
∑_vec
,
smÆÀ°_vec
),

717 
a_vec
,

718 
	`if_thí_ñ£
(

719 
	`vec_cm≥q
(
pb_vec
,
smÆÀ°_vec
),

720 
b_vec
,

721 
c_vec


724 
Ω_vec
 = 
	`vec_add
‘p_vec,(
	`vsx_sh‹t_to_ch¨
(
√¨e°_vec
,3,3)));

726 
a_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
Ω_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED4_3
),4,3);

727 
b_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_NOT_SHIFTED4_3
),4,3);

728 
c_vec
 = 
	`vsx_ch¨_to_sh‹t
(
	`vec_≥rm
(
µ_vec
 , 
VSX_CHAR_ZERO
 , 
VSX_LEFTSHIFTED4_3
),4,3);

729 
∑_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
b_vec
,
c_vec
);

730 
pb_vec
 = (
ve˘‹
 sig√d Ë
	`vec_sub
(
a_vec
 , 
c_vec
);

731 
pc_vec
 = 
	`vec_add
(
∑_vec
,
pb_vec
);

732 
∑_vec
 = 
	`vec_abs
(pa_vec);

733 
pb_vec
 = 
	`vec_abs
(pb_vec);

734 
pc_vec
 = 
	`vec_abs
(pc_vec);

735 
smÆÀ°_vec
 = 
	`vec_mö
(
pc_vec
, vec_mö(
∑_vec
,
pb_vec
));

736 
√¨e°_vec
 = 
	`if_thí_ñ£
(

737 
	`vec_cm≥q
(
∑_vec
,
smÆÀ°_vec
),

738 
a_vec
,

739 
	`if_thí_ñ£
(

740 
	`vec_cm≥q
(
pb_vec
,
smÆÀ°_vec
),

741 
b_vec
,

742 
c_vec


745 
Ω_vec
 = 
	`vec_add
‘p_vec,(
	`vsx_sh‹t_to_ch¨
(
√¨e°_vec
,4,3)));

747 
	`vec_°
(
Ω_vec
,0,
Ω
);

749 
Ω
 += 15;

750 
µ
 += 15;

751 
i°›
 -= 16;

756 
	`vsx_∑ëh_¥o˚ss
(
Ω
,
µ
,
a
,
b
,
c
,
∑
,
pb
,
pc
,
bµ
)

759 if(
i°›
 > 0)

760 
i
 = 0; i < 
i°›
 % 16; i++)

762 
	`vsx_∑ëh_¥o˚ss
(
Ω
,
µ
,
a
,
b
,
c
,
∑
,
pb
,
pc
,
bµ
)

764 
	}
}

	@powerpc/powerpc_init.c

16 
	#_POSIX_SOURCE
 1

	)

18 
	~<°dio.h
>

19 
	~"../≤g¥iv.h
"

21 #ifde‡
PNG_READ_SUPPORTED


23 #i‡
PNG_POWERPC_VSX_OPT
 > 0

24 #ifde‡
PNG_POWERPC_VSX_CHECK_SUPPORTED


37 #i‚de‡
PNG_POWERPC_VSX_FILE


38 #ifde‡
__löux__


39 
	#PNG_POWERPC_VSX_FILE
 "c⁄åib/powîpc-vsx/löux_aux.c"

	)

43 #ifde‡
PNG_POWERPC_VSX_FILE


45 
	~<sig«l.h
>

46 
≤g_have_vsx
(
≤g_°ru˘p
 
≤g_±r
);

47 #ö˛udê
PNG_POWERPC_VSX_FILE


55 
	$≤g_öô_fûãr_fun˘i⁄s_vsx
(
≤g_°ru˘p
 
µ
, 
bµ
)

63 #ifde‡
PNG_POWERPC_VSX_API_SUPPORTED


64 (
µ
->
›ti⁄s
 >> 
PNG_POWERPC_VSX
) & 3)

66 
PNG_OPTION_UNSET
:

73 #ifde‡
PNG_POWERPC_VSX_CHECK_SUPPORTED


75 vﬁ©ûê
sig_©omic_t
 
no_vsx
 = -1;

77 i‡(
no_vsx
 < 0)

78 
no_vsx
 = !
	`≤g_have_vsx
(
µ
);

80 i‡(
no_vsx
)

83 #ifde‡
PNG_POWERPC_VSX_API_SUPPORTED


88 #ifde‡
PNG_POWERPC_VSX_API_SUPPORTED


92 
PNG_OPTION_ON
:

95 
	}
}

109 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_UP
-1] = 
≤g_ªad_fûãr_row_up_vsx
;

111 i‡(
	gbµ
 == 3)

113 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub3_vsx
;

114 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg3_vsx
;

115 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] = 
≤g_ªad_fûãr_row_∑ëh3_vsx
;

118 i‡(
	gbµ
 == 4)

120 
µ
->
ªad_fûãr
[
PNG_FILTER_VALUE_SUB
-1] = 
≤g_ªad_fûãr_row_sub4_vsx
;

121 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_AVG
-1] = 
≤g_ªad_fûãr_row_avg4_vsx
;

122 
	gµ
->
	gªad_fûãr
[
PNG_FILTER_VALUE_PAETH
-1] = 
≤g_ªad_fûãr_row_∑ëh4_vsx
;

	@scripts/intprefix.c

12 
	#PNG_INTERNAL_DATA
(
ty≥
, 
«me
, 
¨øy
)\

13 
PNG_DFN
 "@" 
«me
 "@"

	)

15 
	#PNG_INTERNAL_FUNCTION
(
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

16 
PNG_DFN
 "@" 
«me
 "@"

	)

18 
	#PNG_INTERNAL_CALLBACK
(
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

19 
PNG_DFN
 "@" 
«me
 "@"

	)

21 
	#PNGPREFIX_H


	)

22 
	~"../≤g¥iv.h
"

	@scripts/prefix.c

12 
	#PNG_EXPORTA
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

13 
PNG_DFN
 "@" 
«me
 "@"

	)

18 
	~"≤glibc⁄f.out
"

20 
	gPNG_DFN_START_SORT
 1

22 
	~"../≤g.h
"

24 
	gPNG_DFN_END_SORT


	@scripts/sym.c

12 
	#PNG_EXPORTA
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

13 
PNG_DFN
 "@" 
SYMBOL_PREFIX
 "@@" 
«me
 "@"

	)

15 
	~"../≤g.h
"

	@scripts/symbols.c

19 
	#PNG_EXPORTA
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

20 
PNG_DFN
 "@" 
«me
 "@ @@" 
‹döÆ
 "@"

	)

21 
	#PNG_REMOVED
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

22 
PNG_DFN
 "; @" 
«me
 "@ @@" 
‹döÆ
 "@"

	)

23 
	#PNG_EXPORT_LAST_ORDINAL
(
‹döÆ
)\

24 
PNG_DFN
 "; @@" 
‹döÆ
 "@"

	)

29 
	~"≤glibc⁄f.h.¥ebuût
"

30 
	~"../≤g.h
"

40 
	#PNG_BENIGN_ERRORS_SUPPORTED


	)

41 
	#PNG_ERROR_NUMBERS_SUPPORTED


	)

42 
	#PNG_READ_BIG_ENDIAN_SUPPORTED


	)

43 
	#PNG_INCH_CONVERSIONS_SUPPORTED


	)

44 
	#PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED


	)

45 
	#PNG_SET_OPTION_SUPPORTED


	)

47 #unde‡
PNG_H


48 
	~"../≤g.h
"

54 #unde‡
PNG_FLOATING_POINT_SUPPORTED


55 #unde‡
PNG_ERROR_TEXT_SUPPORTED


57 #unde‡
PNG_H


58 
	~"../≤g.h
"

	@scripts/vers.c

12 
	#PNG_EXPORTA
(
‹döÆ
, 
ty≥
, 
«me
, 
¨gs
, 
©åibuãs
)\

13 
PNG_DFN
 " @" 
SYMBOL_PREFIX
 "@@" 
«me
 "@;"

	)

15 
	gPNG_DFN
 "@" 
	gPNGLIB_LIBNAME
 "@ {global:"

17 
	~"../≤g.h
"

19 
	gPNG_DFN
 "local: *; };"

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

63 
_XmbÀn
(

64 *
°r
,

65 
Àn


70 
	#X_HAVE_UTF8_STRING
 1

	)

75 #ifde‡
__˛™g__


76 #¥agm®
˛™g
 
dügno°ic
 
push


77 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

80 *
	tXPoöãr
;

82 
	#Boﬁ
 

	)

83 
	#Sètus
 

	)

84 
	#True
 1

	)

85 
	#FÆ£
 0

	)

87 
	#QueuedAÃódy
 0

	)

88 
	#QueuedA·îRódög
 1

	)

89 
	#QueuedA·îFlush
 2

	)

91 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
fd
)

	)

92 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

93 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
deÁu…_s¸ìn
)

	)

94 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

95 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

96 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

97 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

98 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

99 
	#AŒPœ√s
 (()~0L)

	)

100 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
qÀn
)

	)

101 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

102 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

103 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

104 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

105 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

106 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

107 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ns¸ìns
)

	)

108 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
víd‹
)

	)

109 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
¥Ÿo_maj‹_vîsi⁄
)

	)

110 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
¥Ÿo_mö‹_vîsi⁄
)

	)

111 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ªÀa£
)

	)

112 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
di•œy_«me
)

	)

113 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

114 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

115 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_unô
)

	)

116 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_bô_‹dî
)

	)

117 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
bôm≠_∑d
)

	)

118 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
byã_‹dî
)

	)

119 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
ªque°
 + 1)

	)

120 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)(dpy))->
œ°_ªque°_ªad
)

	)

123 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)(dpy))->
s¸ìns
[s¸])

	)

124 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

125 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

126 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

127 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

128 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

129 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

130 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

131 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

132 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

133 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

134 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

135 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

136 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

137 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

138 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

139 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

140 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

141 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

142 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

143 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

148 
	s_XExtD©a
 {

149 
	mnumbî
;

150 
_XExtD©a
 *
	m√xt
;

151 (*
	m‰ì_¥iv©e
)(

152 
_XExtD©a
 *
	mexãnsi⁄


154 
XPoöãr
 
	m¥iv©e_d©a
;

155 } 
	tXExtD©a
;

161 
	mexãnsi⁄
;

162 
	mmaj‹_›code
;

163 
	mfú°_evít
;

164 
	mfú°_îr‹
;

165 } 
	tXExtCodes
;

172 
	mdïth
;

173 
	mbôs_≥r_pixñ
;

174 
	msˇ∆öe_∑d
;

175 } 
	tXPixm≠F‹m©VÆues
;

182 
	mfun˘i⁄
;

183 
	m∂™e_mask
;

184 
	mf‹eground
;

185 
	mbackground
;

186 
	mlöe_width
;

187 
	mlöe_°yÀ
;

188 
	mˇp_°yÀ
;

190 
	mjoö_°yÀ
;

191 
	mfûl_°yÀ
;

193 
	mfûl_ruÀ
;

194 
	m¨c_mode
;

195 
Pixm≠
 
	mtûe
;

196 
Pixm≠
 
	m°ù∂e
;

197 
	mts_x_‹igö
;

198 
	mts_y_‹igö
;

199 
F⁄t
 
	mf⁄t
;

200 
	msubwödow_mode
;

201 
Boﬁ
 
	mgøphics_exposuªs
;

202 
	m˛ù_x_‹igö
;

203 
	m˛ù_y_‹igö
;

204 
Pixm≠
 
	m˛ù_mask
;

205 
	mdash_off£t
;

206 
	mdashes
;

207 } 
	tXGCVÆues
;

214 
	g_XGC


215 #ifde‡
	tXLIB_ILLEGAL_ACCESS


217 
XExtD©a
 *
	gext_d©a
;

218 
GC⁄ãxt
 
	ggid
;

222 *
	tGC
;

228 
XExtD©a
 *
	mext_d©a
;

229 
VisuÆID
 
	mvisuÆid
;

230 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

231 
	mc_˛ass
;

233 
	m˛ass
;

235 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

236 
	mbôs_≥r_rgb
;

237 
	mm≠_íåõs
;

238 } 
	tVisuÆ
;

244 
	mdïth
;

245 
	mnvisuÆs
;

246 
VisuÆ
 *
	mvisuÆs
;

247 } 
	tDïth
;

255 
	g_XDi•œy
;

258 
XExtD©a
 *
	mext_d©a
;

259 
_XDi•œy
 *
	mdi•œy
;

260 
Wödow
 
	mroŸ
;

261 
	mwidth
, 
	mheight
;

262 
	mmwidth
, 
	mmheight
;

263 
	mndïths
;

264 
Dïth
 *
	mdïths
;

265 
	mroŸ_dïth
;

266 
VisuÆ
 *
	mroŸ_visuÆ
;

267 
GC
 
	mdeÁu…_gc
;

268 
Cﬁ‹m≠
 
	mcm≠
;

269 
	mwhôe_pixñ
;

270 
	mbœck_pixñ
;

271 
	mmax_m≠s
, 
	mmö_m≠s
;

272 
	mbackög_°‹e
;

273 
Boﬁ
 
	mßve_undîs
;

274 
	mroŸ_öput_mask
;

275 } 
	tS¸ìn
;

281 
XExtD©a
 *
	mext_d©a
;

282 
	mdïth
;

283 
	mbôs_≥r_pixñ
;

284 
	msˇ∆öe_∑d
;

285 } 
	tS¸ìnF‹m©
;

291 
Pixm≠
 
	mbackground_pixm≠
;

292 
	mbackground_pixñ
;

293 
Pixm≠
 
	mb‹dî_pixm≠
;

294 
	mb‹dî_pixñ
;

295 
	mbô_gøvôy
;

296 
	mwö_gøvôy
;

297 
	mbackög_°‹e
;

298 
	mbackög_∂™es
;

299 
	mbackög_pixñ
;

300 
Boﬁ
 
	mßve_undî
;

301 
	mevít_mask
;

302 
	mdo_nŸ_¥›ag©e_mask
;

303 
Boﬁ
 
	movîride_ªdúe˘
;

304 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

305 
Curs‹
 
	mcurs‹
;

306 } 
	tXSëWödowAâribuãs
;

309 
	mx
, 
	my
;

310 
	mwidth
, 
	mheight
;

311 
	mb‹dî_width
;

312 
	mdïth
;

313 
VisuÆ
 *
	mvisuÆ
;

314 
Wödow
 
	mroŸ
;

315 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

316 
	mc_˛ass
;

318 
	m˛ass
;

320 
	mbô_gøvôy
;

321 
	mwö_gøvôy
;

322 
	mbackög_°‹e
;

323 
	mbackög_∂™es
;

324 
	mbackög_pixñ
;

325 
Boﬁ
 
	mßve_undî
;

326 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

327 
Boﬁ
 
	mm≠_ö°ÆÀd
;

328 
	mm≠_°©e
;

329 
	mÆl_evít_masks
;

330 
	myour_evít_mask
;

331 
	mdo_nŸ_¥›ag©e_mask
;

332 
Boﬁ
 
	movîride_ªdúe˘
;

333 
S¸ìn
 *
	ms¸ìn
;

334 } 
	tXWödowAâribuãs
;

342 
	mÁmûy
;

343 
	mÀngth
;

344 *
	maddªss
;

345 } 
	tXHo°Addªss
;

351 
	mty≥Àngth
;

352 
	mvÆuñígth
;

353 *
	mty≥
;

354 *
	mvÆue
;

355 } 
	tXSîvîI¡î¥ëedAddªss
;

360 
	s_XImage
 {

361 
	mwidth
, 
	mheight
;

362 
	mxoff£t
;

363 
	mf‹m©
;

364 *
	md©a
;

365 
	mbyã_‹dî
;

366 
	mbôm≠_unô
;

367 
	mbôm≠_bô_‹dî
;

368 
	mbôm≠_∑d
;

369 
	mdïth
;

370 
	mbyãs_≥r_löe
;

371 
	mbôs_≥r_pixñ
;

372 
	mªd_mask
;

373 
	mgªí_mask
;

374 
	mblue_mask
;

375 
XPoöãr
 
	mobd©a
;

376 
	sfuncs
 {

377 
	m_XImage
 *(*
	m¸óã_image
)(

378 
	m_XDi•œy
* ,

379 
	mVisuÆ
* ,

388 (*
	mde°roy_image
Ë(
	m_XImage
 *);

389 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

390 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

391 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

392 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

393 } 
	mf
;

394 } 
	tXImage
;

400 
	mx
, 
	my
;

401 
	mwidth
, 
	mheight
;

402 
	mb‹dî_width
;

403 
Wödow
 
	msiblög
;

404 
	m°ack_mode
;

405 } 
	tXWödowCh™ges
;

411 
	mpixñ
;

412 
	mªd
, 
	mgªí
, 
	mblue
;

413 
	mÊags
;

414 
	m∑d
;

415 } 
	tXCﬁ‹
;

423 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

424 } 
	tXSegmít
;

427 
	mx
, 
	my
;

428 } 
	tXPoöt
;

431 
	mx
, 
	my
;

432 
	mwidth
, 
	mheight
;

433 } 
	tXRe˘™gÀ
;

436 
	mx
, 
	my
;

437 
	mwidth
, 
	mheight
;

438 
	m™gÀ1
, 
	m™gÀ2
;

439 } 
	tXArc
;

445 
	mkey_˛ick_≥r˚¡
;

446 
	mbñl_≥r˚¡
;

447 
	mbñl_pôch
;

448 
	mbñl_duøti⁄
;

449 
	mÀd
;

450 
	mÀd_mode
;

451 
	mkey
;

452 
	mauto_ª≥©_mode
;

453 } 
	tXKeybﬂrdC⁄åﬁ
;

458 
	mkey_˛ick_≥r˚¡
;

459 
	mbñl_≥r˚¡
;

460 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

461 
	mÀd_mask
;

462 
	mglobÆ_auto_ª≥©
;

463 
	mauto_ª≥©s
[32];

464 } 
	tXKeybﬂrdSèã
;

469 
Time
 
	mtime
;

470 
	mx
, 
	my
;

471 } 
	tXTimeCo‹d
;

476 
	mmax_key≥rmod
;

477 
KeyCode
 *
	mmodifõrm≠
;

478 } 
	tXModifõrKeym≠
;

486 #i‚de‡
XLIB_ILLEGAL_ACCESS


487 
_XDi•œy
 
	tDi•œy
;

490 
	g_XPriv©e
;

491 
	g_XrmHashBuckëRec
;

494 #ifde‡
XLIB_ILLEGAL_ACCESS


495 
	t_XDi•œy


498 
XExtD©a
 *
	gext_d©a
;

499 
_XPriv©e
 *
	g¥iv©e1
;

500 
	gfd
;

501 
	g¥iv©e2
;

502 
	g¥Ÿo_maj‹_vîsi⁄
;

503 
	g¥Ÿo_mö‹_vîsi⁄
;

504 *
	gvíd‹
;

505 
XID
 
	g¥iv©e3
;

506 
XID
 
	g¥iv©e4
;

507 
XID
 
	g¥iv©e5
;

508 
	g¥iv©e6
;

509 
XID
 (*
ªsour˚_Æloc
)(

510 
	g_XDi•œy
*

512 
	gbyã_‹dî
;

513 
	gbôm≠_unô
;

514 
	gbôm≠_∑d
;

515 
	gbôm≠_bô_‹dî
;

516 
	gnf‹m©s
;

517 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

518 
	g¥iv©e8
;

519 
	gªÀa£
;

520 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

521 
	gqÀn
;

522 
	gœ°_ªque°_ªad
;

523 
	gªque°
;

524 
XPoöãr
 
	g¥iv©e11
;

525 
XPoöãr
 
	g¥iv©e12
;

526 
XPoöãr
 
	g¥iv©e13
;

527 
XPoöãr
 
	g¥iv©e14
;

528 
	gmax_ªque°_size
;

529 
_XrmHashBuckëRec
 *
	gdb
;

530 (*
	g¥iv©e15
)(

531 
	g_XDi•œy
*

533 *
	gdi•œy_«me
;

534 
	gdeÁu…_s¸ìn
;

535 
	gns¸ìns
;

536 
S¸ìn
 *
	gs¸ìns
;

537 
	gmŸi⁄_buf„r
;

538 
	g¥iv©e16
;

539 
	gmö_keycode
;

540 
	gmax_keycode
;

541 
XPoöãr
 
	g¥iv©e17
;

542 
XPoöãr
 
	g¥iv©e18
;

543 
	g¥iv©e19
;

544 *
	gxdeÁu…s
;

547 #ifde‡
	tXLIB_ILLEGAL_ACCESS


548 
	tDi•œy
,

550 *
	t_XPrivDi•œy
;

552 #unde‡
_XEVENT_


553 #i‚de‡
_XEVENT_


558 
	mty≥
;

559 
	m£rül
;

560 
Boﬁ
 
	m£nd_evít
;

561 
Di•œy
 *
	mdi•œy
;

562 
Wödow
 
	mwödow
;

563 
Wödow
 
	mroŸ
;

564 
Wödow
 
	msubwödow
;

565 
Time
 
	mtime
;

566 
	mx
, 
	my
;

567 
	mx_roŸ
, 
	my_roŸ
;

568 
	m°©e
;

569 
	mkeycode
;

570 
Boﬁ
 
	mßme_s¸ìn
;

571 } 
	tXKeyEvít
;

572 
XKeyEvít
 
	tXKeyPªs£dEvít
;

573 
XKeyEvít
 
	tXKeyRñó£dEvít
;

576 
	mty≥
;

577 
	m£rül
;

578 
Boﬁ
 
	m£nd_evít
;

579 
Di•œy
 *
	mdi•œy
;

580 
Wödow
 
	mwödow
;

581 
Wödow
 
	mroŸ
;

582 
Wödow
 
	msubwödow
;

583 
Time
 
	mtime
;

584 
	mx
, 
	my
;

585 
	mx_roŸ
, 
	my_roŸ
;

586 
	m°©e
;

587 
	mbuâ⁄
;

588 
Boﬁ
 
	mßme_s¸ìn
;

589 } 
	tXBuâ⁄Evít
;

590 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

591 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

594 
	mty≥
;

595 
	m£rül
;

596 
Boﬁ
 
	m£nd_evít
;

597 
Di•œy
 *
	mdi•œy
;

598 
Wödow
 
	mwödow
;

599 
Wödow
 
	mroŸ
;

600 
Wödow
 
	msubwödow
;

601 
Time
 
	mtime
;

602 
	mx
, 
	my
;

603 
	mx_roŸ
, 
	my_roŸ
;

604 
	m°©e
;

605 
	mis_höt
;

606 
Boﬁ
 
	mßme_s¸ìn
;

607 } 
	tXMŸi⁄Evít
;

608 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

611 
	mty≥
;

612 
	m£rül
;

613 
Boﬁ
 
	m£nd_evít
;

614 
Di•œy
 *
	mdi•œy
;

615 
Wödow
 
	mwödow
;

616 
Wödow
 
	mroŸ
;

617 
Wödow
 
	msubwödow
;

618 
Time
 
	mtime
;

619 
	mx
, 
	my
;

620 
	mx_roŸ
, 
	my_roŸ
;

621 
	mmode
;

622 
	mdëaû
;

627 
Boﬁ
 
	mßme_s¸ìn
;

628 
Boﬁ
 
	mfocus
;

629 
	m°©e
;

630 } 
	tXCrossögEvít
;

631 
XCrossögEvít
 
	tXE¡îWödowEvít
;

632 
XCrossögEvít
 
	tXLóveWödowEvít
;

635 
	mty≥
;

636 
	m£rül
;

637 
Boﬁ
 
	m£nd_evít
;

638 
Di•œy
 *
	mdi•œy
;

639 
Wödow
 
	mwödow
;

640 
	mmode
;

642 
	mdëaû
;

648 } 
	tXFocusCh™geEvít
;

649 
XFocusCh™geEvít
 
	tXFocusInEvít
;

650 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

654 
	mty≥
;

655 
	m£rül
;

656 
Boﬁ
 
	m£nd_evít
;

657 
Di•œy
 *
	mdi•œy
;

658 
Wödow
 
	mwödow
;

659 
	mkey_ve˘‹
[32];

660 } 
	tXKeym≠Evít
;

663 
	mty≥
;

664 
	m£rül
;

665 
Boﬁ
 
	m£nd_evít
;

666 
Di•œy
 *
	mdi•œy
;

667 
Wödow
 
	mwödow
;

668 
	mx
, 
	my
;

669 
	mwidth
, 
	mheight
;

670 
	mcou¡
;

671 } 
	tXExpo£Evít
;

674 
	mty≥
;

675 
	m£rül
;

676 
Boﬁ
 
	m£nd_evít
;

677 
Di•œy
 *
	mdi•œy
;

678 
DøwabÀ
 
	mdøwabÀ
;

679 
	mx
, 
	my
;

680 
	mwidth
, 
	mheight
;

681 
	mcou¡
;

682 
	mmaj‹_code
;

683 
	mmö‹_code
;

684 } 
	tXGøphicsExpo£Evít
;

687 
	mty≥
;

688 
	m£rül
;

689 
Boﬁ
 
	m£nd_evít
;

690 
Di•œy
 *
	mdi•œy
;

691 
DøwabÀ
 
	mdøwabÀ
;

692 
	mmaj‹_code
;

693 
	mmö‹_code
;

694 } 
	tXNoExpo£Evít
;

697 
	mty≥
;

698 
	m£rül
;

699 
Boﬁ
 
	m£nd_evít
;

700 
Di•œy
 *
	mdi•œy
;

701 
Wödow
 
	mwödow
;

702 
	m°©e
;

703 } 
	tXVisibûôyEvít
;

706 
	mty≥
;

707 
	m£rül
;

708 
Boﬁ
 
	m£nd_evít
;

709 
Di•œy
 *
	mdi•œy
;

710 
Wödow
 
	m∑ª¡
;

711 
Wödow
 
	mwödow
;

712 
	mx
, 
	my
;

713 
	mwidth
, 
	mheight
;

714 
	mb‹dî_width
;

715 
Boﬁ
 
	movîride_ªdúe˘
;

716 } 
	tXCª©eWödowEvít
;

719 
	mty≥
;

720 
	m£rül
;

721 
Boﬁ
 
	m£nd_evít
;

722 
Di•œy
 *
	mdi•œy
;

723 
Wödow
 
	mevít
;

724 
Wödow
 
	mwödow
;

725 } 
	tXDe°royWödowEvít
;

728 
	mty≥
;

729 
	m£rül
;

730 
Boﬁ
 
	m£nd_evít
;

731 
Di•œy
 *
	mdi•œy
;

732 
Wödow
 
	mevít
;

733 
Wödow
 
	mwödow
;

734 
Boﬁ
 
	m‰om_c⁄figuª
;

735 } 
	tXUnm≠Evít
;

738 
	mty≥
;

739 
	m£rül
;

740 
Boﬁ
 
	m£nd_evít
;

741 
Di•œy
 *
	mdi•œy
;

742 
Wödow
 
	mevít
;

743 
Wödow
 
	mwödow
;

744 
Boﬁ
 
	movîride_ªdúe˘
;

745 } 
	tXM≠Evít
;

748 
	mty≥
;

749 
	m£rül
;

750 
Boﬁ
 
	m£nd_evít
;

751 
Di•œy
 *
	mdi•œy
;

752 
Wödow
 
	m∑ª¡
;

753 
Wödow
 
	mwödow
;

754 } 
	tXM≠Reque°Evít
;

757 
	mty≥
;

758 
	m£rül
;

759 
Boﬁ
 
	m£nd_evít
;

760 
Di•œy
 *
	mdi•œy
;

761 
Wödow
 
	mevít
;

762 
Wödow
 
	mwödow
;

763 
Wödow
 
	m∑ª¡
;

764 
	mx
, 
	my
;

765 
Boﬁ
 
	movîride_ªdúe˘
;

766 } 
	tXRï¨ítEvít
;

769 
	mty≥
;

770 
	m£rül
;

771 
Boﬁ
 
	m£nd_evít
;

772 
Di•œy
 *
	mdi•œy
;

773 
Wödow
 
	mevít
;

774 
Wödow
 
	mwödow
;

775 
	mx
, 
	my
;

776 
	mwidth
, 
	mheight
;

777 
	mb‹dî_width
;

778 
Wödow
 
	mabove
;

779 
Boﬁ
 
	movîride_ªdúe˘
;

780 } 
	tXC⁄figuªEvít
;

783 
	mty≥
;

784 
	m£rül
;

785 
Boﬁ
 
	m£nd_evít
;

786 
Di•œy
 *
	mdi•œy
;

787 
Wödow
 
	mevít
;

788 
Wödow
 
	mwödow
;

789 
	mx
, 
	my
;

790 } 
	tXGøvôyEvít
;

793 
	mty≥
;

794 
	m£rül
;

795 
Boﬁ
 
	m£nd_evít
;

796 
Di•œy
 *
	mdi•œy
;

797 
Wödow
 
	mwödow
;

798 
	mwidth
, 
	mheight
;

799 } 
	tXResizeReque°Evít
;

802 
	mty≥
;

803 
	m£rül
;

804 
Boﬁ
 
	m£nd_evít
;

805 
Di•œy
 *
	mdi•œy
;

806 
Wödow
 
	m∑ª¡
;

807 
Wödow
 
	mwödow
;

808 
	mx
, 
	my
;

809 
	mwidth
, 
	mheight
;

810 
	mb‹dî_width
;

811 
Wödow
 
	mabove
;

812 
	mdëaû
;

813 
	mvÆue_mask
;

814 } 
	tXC⁄figuªReque°Evít
;

817 
	mty≥
;

818 
	m£rül
;

819 
Boﬁ
 
	m£nd_evít
;

820 
Di•œy
 *
	mdi•œy
;

821 
Wödow
 
	mevít
;

822 
Wödow
 
	mwödow
;

823 
	m∂a˚
;

824 } 
	tXCúcuœãEvít
;

827 
	mty≥
;

828 
	m£rül
;

829 
Boﬁ
 
	m£nd_evít
;

830 
Di•œy
 *
	mdi•œy
;

831 
Wödow
 
	m∑ª¡
;

832 
Wödow
 
	mwödow
;

833 
	m∂a˚
;

834 } 
	tXCúcuœãReque°Evít
;

837 
	mty≥
;

838 
	m£rül
;

839 
Boﬁ
 
	m£nd_evít
;

840 
Di•œy
 *
	mdi•œy
;

841 
Wödow
 
	mwödow
;

842 
Atom
 
	m©om
;

843 
Time
 
	mtime
;

844 
	m°©e
;

845 } 
	tXPr›îtyEvít
;

848 
	mty≥
;

849 
	m£rül
;

850 
Boﬁ
 
	m£nd_evít
;

851 
Di•œy
 *
	mdi•œy
;

852 
Wödow
 
	mwödow
;

853 
Atom
 
	m£À˘i⁄
;

854 
Time
 
	mtime
;

855 } 
	tXSñe˘i⁄CÀ¨Evít
;

858 
	mty≥
;

859 
	m£rül
;

860 
Boﬁ
 
	m£nd_evít
;

861 
Di•œy
 *
	mdi•œy
;

862 
Wödow
 
	mow√r
;

863 
Wödow
 
	mªque°‹
;

864 
Atom
 
	m£À˘i⁄
;

865 
Atom
 
	mèrgë
;

866 
Atom
 
	m¥›îty
;

867 
Time
 
	mtime
;

868 } 
	tXSñe˘i⁄Reque°Evít
;

871 
	mty≥
;

872 
	m£rül
;

873 
Boﬁ
 
	m£nd_evít
;

874 
Di•œy
 *
	mdi•œy
;

875 
Wödow
 
	mªque°‹
;

876 
Atom
 
	m£À˘i⁄
;

877 
Atom
 
	mèrgë
;

878 
Atom
 
	m¥›îty
;

879 
Time
 
	mtime
;

880 } 
	tXSñe˘i⁄Evít
;

883 
	mty≥
;

884 
	m£rül
;

885 
Boﬁ
 
	m£nd_evít
;

886 
Di•œy
 *
	mdi•œy
;

887 
Wödow
 
	mwödow
;

888 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

889 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

890 
Boﬁ
 
	mc_√w
;

892 
Boﬁ
 
	m√w
;

894 
	m°©e
;

895 } 
	tXCﬁ‹m≠Evít
;

898 
	mty≥
;

899 
	m£rül
;

900 
Boﬁ
 
	m£nd_evít
;

901 
Di•œy
 *
	mdi•œy
;

902 
Wödow
 
	mwödow
;

903 
Atom
 
	mmesßge_ty≥
;

904 
	mf‹m©
;

906 
	mb
[20];

907 
	ms
[10];

908 
	ml
[5];

909 } 
	md©a
;

910 } 
	tXClõ¡MesßgeEvít
;

913 
	mty≥
;

914 
	m£rül
;

915 
Boﬁ
 
	m£nd_evít
;

916 
Di•œy
 *
	mdi•œy
;

917 
Wödow
 
	mwödow
;

918 
	mªque°
;

920 
	mfú°_keycode
;

921 
	mcou¡
;

922 } 
	tXM≠pögEvít
;

925 
	mty≥
;

926 
Di•œy
 *
	mdi•œy
;

927 
XID
 
	mªsour˚id
;

928 
	m£rül
;

929 
	mîr‹_code
;

930 
	mªque°_code
;

931 
	mmö‹_code
;

932 } 
	tXEº‹Evít
;

935 
	mty≥
;

936 
	m£rül
;

937 
Boﬁ
 
	m£nd_evít
;

938 
Di•œy
 *
	mdi•œy
;

939 
Wödow
 
	mwödow
;

940 } 
	tXAnyEvít
;

950 
	mty≥
;

951 
	m£rül
;

952 
Boﬁ
 
	m£nd_evít
;

953 
Di•œy
 *
	mdi•œy
;

954 
	mexãnsi⁄
;

955 
	mevty≥
;

956 } 
	tXGíîicEvít
;

959 
	mty≥
;

960 
	m£rül
;

961 
Boﬁ
 
	m£nd_evít
;

962 
Di•œy
 *
	mdi•œy
;

963 
	mexãnsi⁄
;

964 
	mevty≥
;

965 
	mcookõ
;

966 *
	md©a
;

967 } 
	tXGíîicEvítCookõ
;

973 
	u_XEvít
 {

974 
	mty≥
;

975 
XAnyEvít
 
	mx™y
;

976 
XKeyEvít
 
	mxkey
;

977 
XBuâ⁄Evít
 
	mxbuâ⁄
;

978 
XMŸi⁄Evít
 
	mxmŸi⁄
;

979 
XCrossögEvít
 
	mx¸ossög
;

980 
XFocusCh™geEvít
 
	mxfocus
;

981 
XExpo£Evít
 
	mxexpo£
;

982 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

983 
XNoExpo£Evít
 
	mxn€xpo£
;

984 
XVisibûôyEvít
 
	mxvisibûôy
;

985 
XCª©eWödowEvít
 
	mx¸óãwödow
;

986 
XDe°royWödowEvít
 
	mxde°roywödow
;

987 
XUnm≠Evít
 
	mxunm≠
;

988 
XM≠Evít
 
	mxm≠
;

989 
XM≠Reque°Evít
 
	mxm≠ªque°
;

990 
XRï¨ítEvít
 
	mxª∑ª¡
;

991 
XC⁄figuªEvít
 
	mxc⁄figuª
;

992 
XGøvôyEvít
 
	mxgøvôy
;

993 
XResizeReque°Evít
 
	mxªsizîeque°
;

994 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

995 
XCúcuœãEvít
 
	mxcúcuœã
;

996 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

997 
XPr›îtyEvít
 
	mx¥›îty
;

998 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

999 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1000 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1001 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1002 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1003 
XM≠pögEvít
 
	mxm≠pög
;

1004 
XEº‹Evít
 
	mxîr‹
;

1005 
XKeym≠Evít
 
	mxkeym≠
;

1006 
XGíîicEvít
 
	mxgíîic
;

1007 
XGíîicEvítCookõ
 
	mxcookõ
;

1008 
	m∑d
[24];

1009 } 
	tXEvít
;

1012 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)(dpy))->
ªsour˚_Æloc
)((dpy)))

	)

1018 
	mlbórög
;

1019 
	mrbórög
;

1020 
	mwidth
;

1021 
	mas˚¡
;

1022 
	mdes˚¡
;

1023 
	m©åibuãs
;

1024 } 
	tXCh¨Såu˘
;

1031 
Atom
 
	m«me
;

1032 
	mˇrd32
;

1033 } 
	tXF⁄tPr›
;

1036 
XExtD©a
 *
	mext_d©a
;

1037 
F⁄t
 
	mfid
;

1038 
	mdúe˘i⁄
;

1039 
	mmö_ch¨_‹_byã2
;

1040 
	mmax_ch¨_‹_byã2
;

1041 
	mmö_byã1
;

1042 
	mmax_byã1
;

1043 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1044 
	mdeÁu…_ch¨
;

1045 
	mn_¥›îtõs
;

1046 
XF⁄tPr›
 *
	m¥›îtõs
;

1047 
XCh¨Såu˘
 
	mmö_bounds
;

1048 
XCh¨Såu˘
 
	mmax_bounds
;

1049 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1050 
	mas˚¡
;

1051 
	mdes˚¡
;

1052 } 
	tXF⁄tSåu˘
;

1058 *
	mch¨s
;

1059 
	mnch¨s
;

1060 
	mdñè
;

1061 
F⁄t
 
	mf⁄t
;

1062 } 
	tXTextIãm
;

1065 
	mbyã1
;

1066 
	mbyã2
;

1067 } 
	tXCh¨2b
;

1070 
XCh¨2b
 *
	mch¨s
;

1071 
	mnch¨s
;

1072 
	mdñè
;

1073 
F⁄t
 
	mf⁄t
;

1074 } 
	tXTextIãm16
;

1077 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1078 
GC
 
	mgc
;

1079 
VisuÆ
 *
	mvisuÆ
;

1080 
S¸ìn
 *
	ms¸ìn
;

1081 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1082 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1085 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1086 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1087 } 
	tXF⁄tSëExã¡s
;

1093 
_XOM
 *
	tXOM
;

1094 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1097 *
	mch¨s
;

1098 
	mnch¨s
;

1099 
	mdñè
;

1100 
XF⁄tSë
 
	mf⁄t_£t
;

1101 } 
	tXmbTextIãm
;

1104 
wch¨_t
 *
	mch¨s
;

1105 
	mnch¨s
;

1106 
	mdñè
;

1107 
XF⁄tSë
 
	mf⁄t_£t
;

1108 } 
	tXwcTextIãm
;

1110 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1111 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1112 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1113 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1114 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1115 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1116 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1117 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1118 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1119 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1122 
	mch¨£t_cou¡
;

1123 **
	mch¨£t_li°
;

1124 } 
	tXOMCh¨SëLi°
;

1127 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1128 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1129 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1130 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1131 
	mXOMOrõ¡©i⁄_C⁄ãxt


1132 } 
	tXOrõ¡©i⁄
;

1135 
	mnum_‹õ¡©i⁄
;

1136 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1137 } 
	tXOMOrõ¡©i⁄
;

1140 
	mnum_f⁄t
;

1141 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1142 **
	mf⁄t_«me_li°
;

1143 } 
	tXOMF⁄tInfo
;

1145 
_XIM
 *
	tXIM
;

1146 
_XIC
 *
	tXIC
;

1148 (*
	tXIMProc
)(

1149 
	tXIM
,

1150 
	tXPoöãr
,

1151 
	tXPoöãr


1154 
	$Boﬁ
 (*
	tXICProc
)(

1155 
	tXIC
,

1156 
	tXPoöãr
,

1157 
	tXPoöãr


1160 (*
	tXIDProc
)(

1161 
	tDi•œy
*,

1162 
	tXPoöãr
,

1163 
	tXPoöãr


1166 
	tXIMStyÀ
;

1169 
cou¡_°yÀs
;

1170 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1171 } 
	tXIMStyÀs
;

1173 
	#XIMPªedôAªa
 0x0001L

	)

1174 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1175 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1176 
	#XIMPªedôNŸhög
 0x0008L

	)

1177 
	#XIMPªedôN⁄e
 0x0010L

	)

1178 
	#XIMSètusAªa
 0x0100L

	)

1179 
	#XIMSètusCÆlbacks
 0x0200L

	)

1180 
	#XIMSètusNŸhög
 0x0400L

	)

1181 
	#XIMSètusN⁄e
 0x0800L

	)

1183 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1184 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1185 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1186 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1187 
	#XNFocusWödow
 "focusWödow"

	)

1188 
	#XNResour˚Name
 "ªsour˚Name"

	)

1189 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1190 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1191 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1192 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1193 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1194 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1195 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1196 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1197 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1198 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1199 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1200 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1201 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1202 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1203 
	#XNAªa
 "¨ó"

	)

1204 
	#XNAªaNìded
 "¨óNìded"

	)

1205 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1206 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1207 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1208 
	#XNF‹eground
 "f‹eground"

	)

1209 
	#XNBackground
 "background"

	)

1210 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1211 
	#XNF⁄tSë
 "f⁄tSë"

	)

1212 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1213 
	#XNCurs‹
 "curs‹"

	)

1215 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1216 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1217 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1218 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1219 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1220 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1221 
	#XNRe£tSèã
 "ª£tSèã"

	)

1222 
	#XNHŸKey
 "hŸKey"

	)

1223 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1224 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1225 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1227 
	#XBuf„rOvîÊow
 -1

	)

1228 
	#XLookupN⁄e
 1

	)

1229 
	#XLookupCh¨s
 2

	)

1230 
	#XLookupKeySym
 3

	)

1231 
	#XLookupBŸh
 4

	)

1233 *
	tXVaNe°edLi°
;

1236 
XPoöãr
 
˛õ¡_d©a
;

1237 
XIMProc
 
ˇŒback
;

1238 } 
	tXIMCÆlback
;

1241 
XPoöãr
 
˛õ¡_d©a
;

1242 
XICProc
 
ˇŒback
;

1243 } 
	tXICCÆlback
;

1245 
	tXIMFìdback
;

1247 
	#XIMRevî£
 1L

	)

1248 
	#XIMUndîlöe
 (1L<<1)

	)

1249 
	#XIMHighlight
 (1L<<2)

	)

1250 
	#XIMPrim¨y
 (1L<<5)

	)

1251 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1252 
	#XIMTîtüry
 (1L<<7)

	)

1253 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1254 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1255 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1257 
	s_XIMText
 {

1258 
Àngth
;

1259 
XIMFìdback
 *
„edback
;

1260 
Boﬁ
 
ícodög_is_wch¨
;

1262 *
mu…i_byã
;

1263 
wch¨_t
 *
wide_ch¨
;

1264 } 
°rög
;

1265 } 
	tXIMText
;

1267 
	tXIMPªedôSèã
;

1269 
	#XIMPªedôUnKnown
 0L

	)

1270 
	#XIMPªedôE«bÀ
 1L

	)

1271 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1273 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1274 
XIMPªedôSèã
 
°©e
;

1275 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1277 
	tXIMRe£tSèã
;

1279 
	#XIMInôülSèã
 1L

	)

1280 
	#XIMPª£rveSèã
 (1L<<1)

	)

1282 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1284 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1285 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1286 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1287 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1288 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1289 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1291 
	s_XIMSåögC⁄vîsi⁄Text
 {

1292 
Àngth
;

1293 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1294 
Boﬁ
 
ícodög_is_wch¨
;

1296 *
mbs
;

1297 
wch¨_t
 *
wcs
;

1298 } 
°rög
;

1299 } 
	tXIMSåögC⁄vîsi⁄Text
;

1301 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1303 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1305 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1306 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1307 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1308 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1310 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1312 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1313 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1316 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1317 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1318 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1319 
XIMNextLöe
, 
XIMPªviousLöe
,

1320 
XIMLöeSèπ
, 
XIMLöeEnd
,

1321 
XIMAbsﬁuãPosôi⁄
,

1322 
XIMD⁄tCh™ge


1323 } 
	tXIMC¨ëDúe˘i⁄
;

1325 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1326 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1327 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1328 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1329 
Á˘‹
;

1330 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1331 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1333 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1334 
ˇªt
;

1335 
chg_fú°
;

1336 
chg_Àngth
;

1337 
XIMText
 *
ãxt
;

1338 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1341 
XIMIsInvisibÀ
,

1342 
XIMIsPrim¨y
,

1343 
XIMIsSec⁄d¨y


1344 } 
	tXIMC¨ëStyÀ
;

1346 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1347 
posôi⁄
;

1348 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1349 
XIMC¨ëStyÀ
 
°yÀ
;

1350 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1353 
XIMTextTy≥
,

1354 
XIMBôm≠Ty≥


1355 } 
	tXIMSètusD©aTy≥
;

1357 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1358 
XIMSètusD©aTy≥
 
ty≥
;

1360 
XIMText
 *
ãxt
;

1361 
Pixm≠
 
bôm≠
;

1362 } 
d©a
;

1363 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1365 
	s_XIMHŸKeyTriggî
 {

1366 
KeySym
 
keysym
;

1367 
modifõr
;

1368 
modifõr_mask
;

1369 } 
	tXIMHŸKeyTriggî
;

1371 
	s_XIMHŸKeyTriggîs
 {

1372 
num_hŸ_key
;

1373 
XIMHŸKeyTriggî
 *
key
;

1374 } 
	tXIMHŸKeyTriggîs
;

1376 
	tXIMHŸKeySèã
;

1378 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1379 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1382 
cou¡_vÆues
;

1383 **
suµ‹ãd_vÆues
;

1384 } 
	tXIMVÆuesLi°
;

1386 
_XFUNCPROTOBEGIN


1388 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1389 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1392 
_Xdebug
;

1394 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1395 
Di•œy
* ,

1396 
_Xc⁄°
 *

1399 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1400 
Di•œy
* ,

1401 
XID


1405 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1406 
Di•œy
* ,

1407 
Wödow
 ,

1408 
Time
 ,

1409 
Time
 ,

1413 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1414 
XModifõrKeym≠
* ,

1415 #i‡
NìdWidePrŸŸy≥s


1418 
KeyCode
 ,

1423 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1424 
Di•œy
*

1427 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1428 
XModifõrKeym≠
* ,

1429 #i‡
NìdWidePrŸŸy≥s


1432 
KeyCode
 ,

1437 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1441 
XImage
 *
	`XCª©eImage
(

1442 
Di•œy
* ,

1443 
VisuÆ
* ,

1453 
Sètus
 
	`XInôImage
(

1454 
XImage
*

1456 
XImage
 *
	`XGëImage
(

1457 
Di•œy
* ,

1458 
DøwabÀ
 ,

1466 
XImage
 *
	`XGëSubImage
(

1467 
Di•œy
* ,

1468 
DøwabÀ
 ,

1475 
XImage
* ,

1483 
Di•œy
 *
	`XO≥nDi•œy
(

1484 
_Xc⁄°
 *

1487 
	`XrmInôülize
(

1491 *
	`XFëchByãs
(

1492 
Di•œy
* ,

1495 *
	`XFëchBuf„r
(

1496 
Di•œy
* ,

1500 *
	`XGëAtomName
(

1501 
Di•œy
* ,

1502 
Atom


1504 
Sètus
 
	`XGëAtomNames
(

1505 
Di•œy
* ,

1506 
Atom
* ,

1510 *
	`XGëDeÁu…
(

1511 
Di•œy
* ,

1512 
_Xc⁄°
 * ,

1513 
_Xc⁄°
 *

1515 *
	`XDi•œyName
(

1516 
_Xc⁄°
 *

1518 *
	`XKeysymToSåög
(

1519 
KeySym


1522 (*
	$XSynchr⁄ize
(

1523 
Di•œy
* ,

1524 
Boﬁ


1526 
Di•œy
*

1528 (*
	`XSëA·îFun˘i⁄
(

1529 
Di•œy
* ,

1531 
Di•œy
*

1534 
Di•œy
*

1536 
Atom
 
	`XI¡înAtom
(

1537 
Di•œy
* ,

1538 
_Xc⁄°
 * ,

1539 
Boﬁ


1541 
Sètus
 
	`XI¡înAtoms
(

1542 
Di•œy
* ,

1545 
Boﬁ
 ,

1546 
Atom
*

1548 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1549 
Di•œy
* ,

1550 
Cﬁ‹m≠


1552 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1553 
Di•œy
* ,

1554 
Wödow
 ,

1555 
VisuÆ
* ,

1558 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1559 
Di•œy
* ,

1560 
Pixm≠
 ,

1561 
Pixm≠
 ,

1562 
XCﬁ‹
* ,

1563 
XCﬁ‹
* ,

1567 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1568 
Di•œy
* ,

1569 
F⁄t
 ,

1570 
F⁄t
 ,

1573 
XCﬁ‹
 
_Xc⁄°
 * ,

1574 
XCﬁ‹
 
_Xc⁄°
 *

1576 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1577 
Di•œy
* ,

1580 
F⁄t
 
	`XLﬂdF⁄t
(

1581 
Di•œy
* ,

1582 
_Xc⁄°
 *

1584 
GC
 
	`XCª©eGC
(

1585 
Di•œy
* ,

1586 
DøwabÀ
 ,

1588 
XGCVÆues
*

1590 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1591 
GC


1593 
	`XFlushGC
(

1594 
Di•œy
* ,

1595 
GC


1597 
Pixm≠
 
	`XCª©ePixm≠
(

1598 
Di•œy
* ,

1599 
DøwabÀ
 ,

1604 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1605 
Di•œy
* ,

1606 
DøwabÀ
 ,

1607 
_Xc⁄°
 * ,

1611 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1612 
Di•œy
* ,

1613 
DøwabÀ
 ,

1621 
Wödow
 
	`XCª©eSim∂eWödow
(

1622 
Di•œy
* ,

1623 
Wödow
 ,

1632 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1633 
Di•œy
* ,

1634 
Atom


1636 
Wödow
 
	`XCª©eWödow
(

1637 
Di•œy
* ,

1638 
Wödow
 ,

1646 
VisuÆ
* ,

1648 
XSëWödowAâribuãs
*

1650 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1651 
Di•œy
* ,

1652 
Wödow
 ,

1655 **
	`XLi°F⁄ts
(

1656 
Di•œy
* ,

1657 
_Xc⁄°
 * ,

1661 **
	`XLi°F⁄tsWôhInfo
(

1662 
Di•œy
* ,

1663 
_Xc⁄°
 * ,

1666 
XF⁄tSåu˘
**

1668 **
	`XGëF⁄tP©h
(

1669 
Di•œy
* ,

1672 **
	`XLi°Exãnsi⁄s
(

1673 
Di•œy
* ,

1676 
Atom
 *
	`XLi°Pr›îtõs
(

1677 
Di•œy
* ,

1678 
Wödow
 ,

1681 
XHo°Addªss
 *
	`XLi°Ho°s
(

1682 
Di•œy
* ,

1684 
Boﬁ
*

1686 
_X_DEPRECATED


1687 
KeySym
 
	`XKeycodeToKeysym
(

1688 
Di•œy
* ,

1689 #i‡
NìdWidePrŸŸy≥s


1692 
KeyCode
 ,

1696 
KeySym
 
	`XLookupKeysym
(

1697 
XKeyEvít
* ,

1700 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1701 
Di•œy
* ,

1702 #i‡
NìdWidePrŸŸy≥s


1705 
KeyCode
 ,

1710 
KeySym
 
	`XSåögToKeysym
(

1711 
_Xc⁄°
 *

1713 
	`XMaxReque°Size
(

1714 
Di•œy
*

1716 
	`XExãndedMaxReque°Size
(

1717 
Di•œy
*

1719 *
	`XResour˚M™agîSåög
(

1720 
Di•œy
*

1722 *
	`XS¸ìnResour˚Såög
(

1723 
S¸ìn
*

1725 
	`XDi•œyMŸi⁄Buf„rSize
(

1726 
Di•œy
*

1728 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1729 
VisuÆ
*

1734 
Sètus
 
	`XInôThªads
(

1738 
	`XLockDi•œy
(

1739 
Di•œy
*

1742 
	`XU∆ockDi•œy
(

1743 
Di•œy
*

1748 
XExtCodes
 *
	`XInôExãnsi⁄
(

1749 
Di•œy
* ,

1750 
_Xc⁄°
 *

1753 
XExtCodes
 *
	`XAddExãnsi⁄
(

1754 
Di•œy
*

1756 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1757 
XExtD©a
** ,

1760 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1761 
XED©aObje˘


1765 
Wödow
 
	`XRoŸWödow
(

1766 
Di•œy
* ,

1769 
Wödow
 
	`XDeÁu…RoŸWödow
(

1770 
Di•œy
*

1772 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1773 
S¸ìn
*

1775 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1776 
Di•œy
* ,

1779 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1780 
S¸ìn
*

1782 
GC
 
	`XDeÁu…GC
(

1783 
Di•œy
* ,

1786 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1787 
S¸ìn
*

1789 
	`XBœckPixñ
(

1790 
Di•œy
* ,

1793 
	`XWhôePixñ
(

1794 
Di•œy
* ,

1797 
	`XAŒPœ√s
(

1800 
	`XBœckPixñOfS¸ìn
(

1801 
S¸ìn
*

1803 
	`XWhôePixñOfS¸ìn
(

1804 
S¸ìn
*

1806 
	`XNextReque°
(

1807 
Di•œy
*

1809 
	`XLa°KnownReque°Pro˚s£d
(

1810 
Di•œy
*

1812 *
	`XSîvîVíd‹
(

1813 
Di•œy
*

1815 *
	`XDi•œySåög
(

1816 
Di•œy
*

1818 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1819 
Di•œy
* ,

1822 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1823 
S¸ìn
*

1825 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1826 
S¸ìn
*

1828 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1829 
Di•œy
* ,

1832 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1833 
Di•œy
*

1835 
	`XEvítMaskOfS¸ìn
(

1836 
S¸ìn
*

1839 
	`XS¸ìnNumbîOfS¸ìn
(

1840 
S¸ìn
*

1843 (*
	tXEº‹H™dÀr
) (

1844 
	tDi•œy
* ,

1845 
	tXEº‹Evít
*

1848 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1849 
XEº‹H™dÀr


1853 (*
	tXIOEº‹H™dÀr
) (

1854 
	tDi•œy
*

1857 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1858 
XIOEº‹H™dÀr


1861 (*
	tXIOEº‹ExôH™dÀr
) (

1862 
	tDi•œy
*,

1866 
	`XSëIOEº‹ExôH™dÀr
 (

1867 
Di•œy
*,

1868 
XIOEº‹ExôH™dÀr
,

1872 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1873 
Di•œy
* ,

1876 *
	`XLi°Dïths
(

1877 
Di•œy
* ,

1884 
Sètus
 
	`XRec⁄figuªWMWödow
(

1885 
Di•œy
* ,

1886 
Wödow
 ,

1889 
XWödowCh™ges
*

1892 
Sètus
 
	`XGëWMPrŸocﬁs
(

1893 
Di•œy
* ,

1894 
Wödow
 ,

1895 
Atom
** ,

1898 
Sètus
 
	`XSëWMPrŸocﬁs
(

1899 
Di•œy
* ,

1900 
Wödow
 ,

1901 
Atom
* ,

1904 
Sètus
 
	`XIc⁄ifyWödow
(

1905 
Di•œy
* ,

1906 
Wödow
 ,

1909 
Sètus
 
	`XWôhdøwWödow
(

1910 
Di•œy
* ,

1911 
Wödow
 ,

1914 
Sètus
 
	`XGëComm™d
(

1915 
Di•œy
* ,

1916 
Wödow
 ,

1920 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1921 
Di•œy
* ,

1922 
Wödow
 ,

1923 
Wödow
** ,

1926 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1927 
Di•œy
* ,

1928 
Wödow
 ,

1929 
Wödow
* ,

1932 
	`XFªeSåögLi°
(

1935 
	`XSëTønsõ¡F‹Höt
(

1936 
Di•œy
* ,

1937 
Wödow
 ,

1938 
Wödow


1943 
	`XA˘iv©eS¸ìnSavî
(

1944 
Di•œy
*

1947 
	`XAddHo°
(

1948 
Di•œy
* ,

1949 
XHo°Addªss
*

1952 
	`XAddHo°s
(

1953 
Di•œy
* ,

1954 
XHo°Addªss
* ,

1958 
	`XAddToExãnsi⁄Li°
(

1959 
_XExtD©a
** ,

1960 
XExtD©a
*

1963 
	`XAddToSaveSë
(

1964 
Di•œy
* ,

1965 
Wödow


1968 
Sètus
 
	`XAŒocCﬁ‹
(

1969 
Di•œy
* ,

1970 
Cﬁ‹m≠
 ,

1971 
XCﬁ‹
*

1974 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1975 
Di•œy
* ,

1976 
Cﬁ‹m≠
 ,

1977 
Boﬁ
 ,

1984 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1985 
Di•œy
* ,

1986 
Cﬁ‹m≠
 ,

1987 
Boﬁ
 ,

1998 
Sètus
 
	`XAŒocNamedCﬁ‹
(

1999 
Di•œy
* ,

2000 
Cﬁ‹m≠
 ,

2001 
_Xc⁄°
 * ,

2002 
XCﬁ‹
* ,

2003 
XCﬁ‹
*

2006 
	`XAŒowEvíts
(

2007 
Di•œy
* ,

2009 
Time


2012 
	`XAutoRïótOff
(

2013 
Di•œy
*

2016 
	`XAutoRïótOn
(

2017 
Di•œy
*

2020 
	`XBñl
(

2021 
Di•œy
* ,

2025 
	`XBôm≠BôOrdî
(

2026 
Di•œy
*

2029 
	`XBôm≠Pad
(

2030 
Di•œy
*

2033 
	`XBôm≠Unô
(

2034 
Di•œy
*

2037 
	`XCñlsOfS¸ìn
(

2038 
S¸ìn
*

2041 
	`XCh™geA˘ivePoöãrGøb
(

2042 
Di•œy
* ,

2044 
Curs‹
 ,

2045 
Time


2048 
	`XCh™geGC
(

2049 
Di•œy
* ,

2050 
GC
 ,

2052 
XGCVÆues
*

2055 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2056 
Di•œy
* ,

2058 
XKeybﬂrdC⁄åﬁ
*

2061 
	`XCh™geKeybﬂrdM≠pög
(

2062 
Di•œy
* ,

2065 
KeySym
* ,

2069 
	`XCh™gePoöãrC⁄åﬁ
(

2070 
Di•œy
* ,

2071 
Boﬁ
 ,

2072 
Boﬁ
 ,

2078 
	`XCh™gePr›îty
(

2079 
Di•œy
* ,

2080 
Wödow
 ,

2081 
Atom
 ,

2082 
Atom
 ,

2085 
_Xc⁄°
 * ,

2089 
	`XCh™geSaveSë
(

2090 
Di•œy
* ,

2091 
Wödow
 ,

2095 
	`XCh™geWödowAâribuãs
(

2096 
Di•œy
* ,

2097 
Wödow
 ,

2099 
XSëWödowAâribuãs
*

2102 
Boﬁ
 
	`XCheckIfEvít
(

2103 
Di•œy
* ,

2104 
XEvít
* ,

2105 
	$Boﬁ
 (*) (

2106 
Di•œy
* ,

2107 
XEvít
* ,

2108 
XPoöãr


2110 
XPoöãr


2113 
Boﬁ
 
	`XCheckMaskEvít
(

2114 
Di•œy
* ,

2116 
XEvít
*

2119 
Boﬁ
 
	`XCheckTy≥dEvít
(

2120 
Di•œy
* ,

2122 
XEvít
*

2125 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2126 
Di•œy
* ,

2127 
Wödow
 ,

2129 
XEvít
*

2132 
Boﬁ
 
	`XCheckWödowEvít
(

2133 
Di•œy
* ,

2134 
Wödow
 ,

2136 
XEvít
*

2139 
	`XCúcuœãSubwödows
(

2140 
Di•œy
* ,

2141 
Wödow
 ,

2145 
	`XCúcuœãSubwödowsDown
(

2146 
Di•œy
* ,

2147 
Wödow


2150 
	`XCúcuœãSubwödowsUp
(

2151 
Di•œy
* ,

2152 
Wödow


2155 
	`XCÀ¨Aªa
(

2156 
Di•œy
* ,

2157 
Wödow
 ,

2162 
Boﬁ


2165 
	`XCÀ¨Wödow
(

2166 
Di•œy
* ,

2167 
Wödow


2170 
	`XClo£Di•œy
(

2171 
Di•œy
*

2174 
	`XC⁄figuªWödow
(

2175 
Di•œy
* ,

2176 
Wödow
 ,

2178 
XWödowCh™ges
*

2181 
	`XC⁄√˘i⁄Numbî
(

2182 
Di•œy
*

2185 
	`XC⁄vîtSñe˘i⁄
(

2186 
Di•œy
* ,

2187 
Atom
 ,

2188 
Atom
 ,

2189 
Atom
 ,

2190 
Wödow
 ,

2191 
Time


2194 
	`XC›yAªa
(

2195 
Di•œy
* ,

2196 
DøwabÀ
 ,

2197 
DøwabÀ
 ,

2198 
GC
 ,

2207 
	`XC›yGC
(

2208 
Di•œy
* ,

2209 
GC
 ,

2211 
GC


2214 
	`XC›yPœ√
(

2215 
Di•œy
* ,

2216 
DøwabÀ
 ,

2217 
DøwabÀ
 ,

2218 
GC
 ,

2228 
	`XDeÁu…Dïth
(

2229 
Di•œy
* ,

2233 
	`XDeÁu…DïthOfS¸ìn
(

2234 
S¸ìn
*

2237 
	`XDeÁu…S¸ìn
(

2238 
Di•œy
*

2241 
	`XDeföeCurs‹
(

2242 
Di•œy
* ,

2243 
Wödow
 ,

2244 
Curs‹


2247 
	`XDñëePr›îty
(

2248 
Di•œy
* ,

2249 
Wödow
 ,

2250 
Atom


2253 
	`XDe°royWödow
(

2254 
Di•œy
* ,

2255 
Wödow


2258 
	`XDe°roySubwödows
(

2259 
Di•œy
* ,

2260 
Wödow


2263 
	`XD€sBackögSt‹e
(

2264 
S¸ìn
*

2267 
Boﬁ
 
	`XD€sSaveUndîs
(

2268 
S¸ìn
*

2271 
	`XDißbÀAc˚ssC⁄åﬁ
(

2272 
Di•œy
*

2276 
	`XDi•œyCñls
(

2277 
Di•œy
* ,

2281 
	`XDi•œyHeight
(

2282 
Di•œy
* ,

2286 
	`XDi•œyHeightMM
(

2287 
Di•œy
* ,

2291 
	`XDi•œyKeycodes
(

2292 
Di•œy
* ,

2297 
	`XDi•œyPœ√s
(

2298 
Di•œy
* ,

2302 
	`XDi•œyWidth
(

2303 
Di•œy
* ,

2307 
	`XDi•œyWidthMM
(

2308 
Di•œy
* ,

2312 
	`XDøwArc
(

2313 
Di•œy
* ,

2314 
DøwabÀ
 ,

2315 
GC
 ,

2324 
	`XDøwArcs
(

2325 
Di•œy
* ,

2326 
DøwabÀ
 ,

2327 
GC
 ,

2328 
XArc
* ,

2332 
	`XDøwImageSåög
(

2333 
Di•œy
* ,

2334 
DøwabÀ
 ,

2335 
GC
 ,

2338 
_Xc⁄°
 * ,

2342 
	`XDøwImageSåög16
(

2343 
Di•œy
* ,

2344 
DøwabÀ
 ,

2345 
GC
 ,

2348 
_Xc⁄°
 
XCh¨2b
* ,

2352 
	`XDøwLöe
(

2353 
Di•œy
* ,

2354 
DøwabÀ
 ,

2355 
GC
 ,

2362 
	`XDøwLöes
(

2363 
Di•œy
* ,

2364 
DøwabÀ
 ,

2365 
GC
 ,

2366 
XPoöt
* ,

2371 
	`XDøwPoöt
(

2372 
Di•œy
* ,

2373 
DøwabÀ
 ,

2374 
GC
 ,

2379 
	`XDøwPoöts
(

2380 
Di•œy
* ,

2381 
DøwabÀ
 ,

2382 
GC
 ,

2383 
XPoöt
* ,

2388 
	`XDøwRe˘™gÀ
(

2389 
Di•œy
* ,

2390 
DøwabÀ
 ,

2391 
GC
 ,

2398 
	`XDøwRe˘™gÀs
(

2399 
Di•œy
* ,

2400 
DøwabÀ
 ,

2401 
GC
 ,

2402 
XRe˘™gÀ
* ,

2406 
	`XDøwSegmíts
(

2407 
Di•œy
* ,

2408 
DøwabÀ
 ,

2409 
GC
 ,

2410 
XSegmít
* ,

2414 
	`XDøwSåög
(

2415 
Di•œy
* ,

2416 
DøwabÀ
 ,

2417 
GC
 ,

2420 
_Xc⁄°
 * ,

2424 
	`XDøwSåög16
(

2425 
Di•œy
* ,

2426 
DøwabÀ
 ,

2427 
GC
 ,

2430 
_Xc⁄°
 
XCh¨2b
* ,

2434 
	`XDøwText
(

2435 
Di•œy
* ,

2436 
DøwabÀ
 ,

2437 
GC
 ,

2440 
XTextIãm
* ,

2444 
	`XDøwText16
(

2445 
Di•œy
* ,

2446 
DøwabÀ
 ,

2447 
GC
 ,

2450 
XTextIãm16
* ,

2454 
	`XE«bÀAc˚ssC⁄åﬁ
(

2455 
Di•œy
*

2458 
	`XEvítsQueued
(

2459 
Di•œy
* ,

2463 
Sètus
 
	`XFëchName
(

2464 
Di•œy
* ,

2465 
Wödow
 ,

2469 
	`XFûlArc
(

2470 
Di•œy
* ,

2471 
DøwabÀ
 ,

2472 
GC
 ,

2481 
	`XFûlArcs
(

2482 
Di•œy
* ,

2483 
DøwabÀ
 ,

2484 
GC
 ,

2485 
XArc
* ,

2489 
	`XFûlPﬁyg⁄
(

2490 
Di•œy
* ,

2491 
DøwabÀ
 ,

2492 
GC
 ,

2493 
XPoöt
* ,

2499 
	`XFûlRe˘™gÀ
(

2500 
Di•œy
* ,

2501 
DøwabÀ
 ,

2502 
GC
 ,

2509 
	`XFûlRe˘™gÀs
(

2510 
Di•œy
* ,

2511 
DøwabÀ
 ,

2512 
GC
 ,

2513 
XRe˘™gÀ
* ,

2517 
	`XFlush
(

2518 
Di•œy
*

2521 
	`XF‹˚S¸ìnSavî
(

2522 
Di•œy
* ,

2526 
	`XFªe
(

2530 
	`XFªeCﬁ‹m≠
(

2531 
Di•œy
* ,

2532 
Cﬁ‹m≠


2535 
	`XFªeCﬁ‹s
(

2536 
Di•œy
* ,

2537 
Cﬁ‹m≠
 ,

2543 
	`XFªeCurs‹
(

2544 
Di•œy
* ,

2545 
Curs‹


2548 
	`XFªeExãnsi⁄Li°
(

2552 
	`XFªeF⁄t
(

2553 
Di•œy
* ,

2554 
XF⁄tSåu˘
*

2557 
	`XFªeF⁄tInfo
(

2559 
XF⁄tSåu˘
* ,

2563 
	`XFªeF⁄tNames
(

2567 
	`XFªeF⁄tP©h
(

2571 
	`XFªeGC
(

2572 
Di•œy
* ,

2573 
GC


2576 
	`XFªeModifõrm≠
(

2577 
XModifõrKeym≠
*

2580 
	`XFªePixm≠
(

2581 
Di•œy
* ,

2582 
Pixm≠


2585 
	`XGeomëry
(

2586 
Di•œy
* ,

2588 
_Xc⁄°
 * ,

2589 
_Xc⁄°
 * ,

2601 
	`XGëEº‹D©aba£Text
(

2602 
Di•œy
* ,

2603 
_Xc⁄°
 * ,

2604 
_Xc⁄°
 * ,

2605 
_Xc⁄°
 * ,

2610 
	`XGëEº‹Text
(

2611 
Di•œy
* ,

2617 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2618 
XF⁄tSåu˘
* ,

2619 
Atom
 ,

2623 
Sètus
 
	`XGëGCVÆues
(

2624 
Di•œy
* ,

2625 
GC
 ,

2627 
XGCVÆues
*

2630 
Sètus
 
	`XGëGeomëry
(

2631 
Di•œy
* ,

2632 
DøwabÀ
 ,

2633 
Wödow
* ,

2642 
Sètus
 
	`XGëIc⁄Name
(

2643 
Di•œy
* ,

2644 
Wödow
 ,

2648 
	`XGëI≈utFocus
(

2649 
Di•œy
* ,

2650 
Wödow
* ,

2654 
	`XGëKeybﬂrdC⁄åﬁ
(

2655 
Di•œy
* ,

2656 
XKeybﬂrdSèã
*

2659 
	`XGëPoöãrC⁄åﬁ
(

2660 
Di•œy
* ,

2666 
	`XGëPoöãrM≠pög
(

2667 
Di•œy
* ,

2672 
	`XGëS¸ìnSavî
(

2673 
Di•œy
* ,

2680 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2681 
Di•œy
* ,

2682 
Wödow
 ,

2683 
Wödow
*

2686 
	`XGëWödowPr›îty
(

2687 
Di•œy
* ,

2688 
Wödow
 ,

2689 
Atom
 ,

2692 
Boﬁ
 ,

2693 
Atom
 ,

2694 
Atom
* ,

2701 
Sètus
 
	`XGëWödowAâribuãs
(

2702 
Di•œy
* ,

2703 
Wödow
 ,

2704 
XWödowAâribuãs
*

2707 
	`XGøbBuâ⁄
(

2708 
Di•œy
* ,

2711 
Wödow
 ,

2712 
Boﬁ
 ,

2716 
Wödow
 ,

2717 
Curs‹


2720 
	`XGøbKey
(

2721 
Di•œy
* ,

2724 
Wödow
 ,

2725 
Boﬁ
 ,

2730 
	`XGøbKeybﬂrd
(

2731 
Di•œy
* ,

2732 
Wödow
 ,

2733 
Boﬁ
 ,

2736 
Time


2739 
	`XGøbPoöãr
(

2740 
Di•œy
* ,

2741 
Wödow
 ,

2742 
Boﬁ
 ,

2746 
Wödow
 ,

2747 
Curs‹
 ,

2748 
Time


2751 
	`XGøbSîvî
(

2752 
Di•œy
*

2755 
	`XHeightMMOfS¸ìn
(

2756 
S¸ìn
*

2759 
	`XHeightOfS¸ìn
(

2760 
S¸ìn
*

2763 
	`XIfEvít
(

2764 
Di•œy
* ,

2765 
XEvít
* ,

2766 
	$Boﬁ
 (*) (

2767 
Di•œy
* ,

2768 
XEvít
* ,

2769 
XPoöãr


2771 
XPoöãr


2774 
	`XImageByãOrdî
(

2775 
Di•œy
*

2778 
	`XIn°ÆlCﬁ‹m≠
(

2779 
Di•œy
* ,

2780 
Cﬁ‹m≠


2783 
KeyCode
 
	`XKeysymToKeycode
(

2784 
Di•œy
* ,

2785 
KeySym


2788 
	`XKûlClõ¡
(

2789 
Di•œy
* ,

2790 
XID


2793 
Sètus
 
	`XLookupCﬁ‹
(

2794 
Di•œy
* ,

2795 
Cﬁ‹m≠
 ,

2796 
_Xc⁄°
 * ,

2797 
XCﬁ‹
* ,

2798 
XCﬁ‹
*

2801 
	`XLowîWödow
(

2802 
Di•œy
* ,

2803 
Wödow


2806 
	`XM≠Rai£d
(

2807 
Di•œy
* ,

2808 
Wödow


2811 
	`XM≠Subwödows
(

2812 
Di•œy
* ,

2813 
Wödow


2816 
	`XM≠Wödow
(

2817 
Di•œy
* ,

2818 
Wödow


2821 
	`XMaskEvít
(

2822 
Di•œy
* ,

2824 
XEvít
*

2827 
	`XMaxCm≠sOfS¸ìn
(

2828 
S¸ìn
*

2831 
	`XMöCm≠sOfS¸ìn
(

2832 
S¸ìn
*

2835 
	`XMoveResizeWödow
(

2836 
Di•œy
* ,

2837 
Wödow
 ,

2844 
	`XMoveWödow
(

2845 
Di•œy
* ,

2846 
Wödow
 ,

2851 
	`XNextEvít
(

2852 
Di•œy
* ,

2853 
XEvít
*

2856 
	`XNoOp
(

2857 
Di•œy
*

2860 
Sètus
 
	`XP¨£Cﬁ‹
(

2861 
Di•œy
* ,

2862 
Cﬁ‹m≠
 ,

2863 
_Xc⁄°
 * ,

2864 
XCﬁ‹
*

2867 
	`XP¨£Geomëry
(

2868 
_Xc⁄°
 * ,

2875 
	`XPìkEvít
(

2876 
Di•œy
* ,

2877 
XEvít
*

2880 
	`XPìkIfEvít
(

2881 
Di•œy
* ,

2882 
XEvít
* ,

2883 
	$Boﬁ
 (*) (

2884 
Di•œy
* ,

2885 
XEvít
* ,

2886 
XPoöãr


2888 
XPoöãr


2891 
	`XPídög
(

2892 
Di•œy
*

2895 
	`XPœ√sOfS¸ìn
(

2896 
S¸ìn
*

2899 
	`XPrŸocﬁRevisi⁄
(

2900 
Di•œy
*

2903 
	`XPrŸocﬁVîsi⁄
(

2904 
Di•œy
*

2908 
	`XPutBackEvít
(

2909 
Di•œy
* ,

2910 
XEvít
*

2913 
	`XPutImage
(

2914 
Di•œy
* ,

2915 
DøwabÀ
 ,

2916 
GC
 ,

2917 
XImage
* ,

2926 
	`XQLígth
(

2927 
Di•œy
*

2930 
Sètus
 
	`XQuîyBe°Curs‹
(

2931 
Di•œy
* ,

2932 
DøwabÀ
 ,

2939 
Sètus
 
	`XQuîyBe°Size
(

2940 
Di•œy
* ,

2942 
DøwabÀ
 ,

2949 
Sètus
 
	`XQuîyBe°Stù∂e
(

2950 
Di•œy
* ,

2951 
DøwabÀ
 ,

2958 
Sètus
 
	`XQuîyBe°Tûe
(

2959 
Di•œy
* ,

2960 
DøwabÀ
 ,

2967 
	`XQuîyCﬁ‹
(

2968 
Di•œy
* ,

2969 
Cﬁ‹m≠
 ,

2970 
XCﬁ‹
*

2973 
	`XQuîyCﬁ‹s
(

2974 
Di•œy
* ,

2975 
Cﬁ‹m≠
 ,

2976 
XCﬁ‹
* ,

2980 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2981 
Di•œy
* ,

2982 
_Xc⁄°
 * ,

2988 
	`XQuîyKeym≠
(

2989 
Di•œy
* ,

2993 
Boﬁ
 
	`XQuîyPoöãr
(

2994 
Di•œy
* ,

2995 
Wödow
 ,

2996 
Wödow
* ,

2997 
Wödow
* ,

3005 
	`XQuîyTextExã¡s
(

3006 
Di•œy
* ,

3007 
XID
 ,

3008 
_Xc⁄°
 * ,

3013 
XCh¨Såu˘
*

3016 
	`XQuîyTextExã¡s16
(

3017 
Di•œy
* ,

3018 
XID
 ,

3019 
_Xc⁄°
 
XCh¨2b
* ,

3024 
XCh¨Såu˘
*

3027 
Sètus
 
	`XQuîyTªe
(

3028 
Di•œy
* ,

3029 
Wödow
 ,

3030 
Wödow
* ,

3031 
Wödow
* ,

3032 
Wödow
** ,

3036 
	`XRai£Wödow
(

3037 
Di•œy
* ,

3038 
Wödow


3041 
	`XRódBôm≠Fûe
(

3042 
Di•œy
* ,

3043 
DøwabÀ
 ,

3044 
_Xc⁄°
 * ,

3047 
Pixm≠
* ,

3052 
	`XRódBôm≠FûeD©a
(

3053 
_Xc⁄°
 * ,

3061 
	`XRebödKeysym
(

3062 
Di•œy
* ,

3063 
KeySym
 ,

3064 
KeySym
* ,

3066 
_Xc⁄°
 * ,

3070 
	`XRecﬁ‹Curs‹
(

3071 
Di•œy
* ,

3072 
Curs‹
 ,

3073 
XCﬁ‹
* ,

3074 
XCﬁ‹
*

3077 
	`XRe‰eshKeybﬂrdM≠pög
(

3078 
XM≠pögEvít
*

3081 
	`XRemoveFromSaveSë
(

3082 
Di•œy
* ,

3083 
Wödow


3086 
	`XRemoveHo°
(

3087 
Di•œy
* ,

3088 
XHo°Addªss
*

3091 
	`XRemoveHo°s
(

3092 
Di•œy
* ,

3093 
XHo°Addªss
* ,

3097 
	`XRï¨ítWödow
(

3098 
Di•œy
* ,

3099 
Wödow
 ,

3100 
Wödow
 ,

3105 
	`XRe£tS¸ìnSavî
(

3106 
Di•œy
*

3109 
	`XResizeWödow
(

3110 
Di•œy
* ,

3111 
Wödow
 ,

3116 
	`XRe°ackWödows
(

3117 
Di•œy
* ,

3118 
Wödow
* ,

3122 
	`XRŸ©eBuf„rs
(

3123 
Di•œy
* ,

3127 
	`XRŸ©eWödowPr›îtõs
(

3128 
Di•œy
* ,

3129 
Wödow
 ,

3130 
Atom
* ,

3135 
	`XS¸ìnCou¡
(

3136 
Di•œy
*

3139 
	`XSñe˘I≈ut
(

3140 
Di•œy
* ,

3141 
Wödow
 ,

3145 
Sètus
 
	`XSídEvít
(

3146 
Di•œy
* ,

3147 
Wödow
 ,

3148 
Boﬁ
 ,

3150 
XEvít
*

3153 
	`XSëAc˚ssC⁄åﬁ
(

3154 
Di•œy
* ,

3158 
	`XSëArcMode
(

3159 
Di•œy
* ,

3160 
GC
 ,

3164 
	`XSëBackground
(

3165 
Di•œy
* ,

3166 
GC
 ,

3170 
	`XSëClùMask
(

3171 
Di•œy
* ,

3172 
GC
 ,

3173 
Pixm≠


3176 
	`XSëClùOrigö
(

3177 
Di•œy
* ,

3178 
GC
 ,

3183 
	`XSëClùRe˘™gÀs
(

3184 
Di•œy
* ,

3185 
GC
 ,

3188 
XRe˘™gÀ
* ,

3193 
	`XSëClo£DownMode
(

3194 
Di•œy
* ,

3198 
	`XSëComm™d
(

3199 
Di•œy
* ,

3200 
Wödow
 ,

3205 
	`XSëDashes
(

3206 
Di•œy
* ,

3207 
GC
 ,

3209 
_Xc⁄°
 * ,

3213 
	`XSëFûlRuÀ
(

3214 
Di•œy
* ,

3215 
GC
 ,

3219 
	`XSëFûlStyÀ
(

3220 
Di•œy
* ,

3221 
GC
 ,

3225 
	`XSëF⁄t
(

3226 
Di•œy
* ,

3227 
GC
 ,

3228 
F⁄t


3231 
	`XSëF⁄tP©h
(

3232 
Di•œy
* ,

3237 
	`XSëF‹eground
(

3238 
Di•œy
* ,

3239 
GC
 ,

3243 
	`XSëFun˘i⁄
(

3244 
Di•œy
* ,

3245 
GC
 ,

3249 
	`XSëGøphicsExposuªs
(

3250 
Di•œy
* ,

3251 
GC
 ,

3252 
Boﬁ


3255 
	`XSëIc⁄Name
(

3256 
Di•œy
* ,

3257 
Wödow
 ,

3258 
_Xc⁄°
 *

3261 
	`XSëI≈utFocus
(

3262 
Di•œy
* ,

3263 
Wödow
 ,

3265 
Time


3268 
	`XSëLöeAâribuãs
(

3269 
Di•œy
* ,

3270 
GC
 ,

3277 
	`XSëModifõrM≠pög
(

3278 
Di•œy
* ,

3279 
XModifõrKeym≠
*

3282 
	`XSëPœ√Mask
(

3283 
Di•œy
* ,

3284 
GC
 ,

3288 
	`XSëPoöãrM≠pög
(

3289 
Di•œy
* ,

3290 
_Xc⁄°
 * ,

3294 
	`XSëS¸ìnSavî
(

3295 
Di•œy
* ,

3302 
	`XSëSñe˘i⁄Ow√r
(

3303 
Di•œy
* ,

3304 
Atom
 ,

3305 
Wödow
 ,

3306 
Time


3309 
	`XSëSèã
(

3310 
Di•œy
* ,

3311 
GC
 ,

3318 
	`XSëStù∂e
(

3319 
Di•œy
* ,

3320 
GC
 ,

3321 
Pixm≠


3324 
	`XSëSubwödowMode
(

3325 
Di•œy
* ,

3326 
GC
 ,

3330 
	`XSëTSOrigö
(

3331 
Di•œy
* ,

3332 
GC
 ,

3337 
	`XSëTûe
(

3338 
Di•œy
* ,

3339 
GC
 ,

3340 
Pixm≠


3343 
	`XSëWödowBackground
(

3344 
Di•œy
* ,

3345 
Wödow
 ,

3349 
	`XSëWödowBackgroundPixm≠
(

3350 
Di•œy
* ,

3351 
Wödow
 ,

3352 
Pixm≠


3355 
	`XSëWödowB‹dî
(

3356 
Di•œy
* ,

3357 
Wödow
 ,

3361 
	`XSëWödowB‹dîPixm≠
(

3362 
Di•œy
* ,

3363 
Wödow
 ,

3364 
Pixm≠


3367 
	`XSëWödowB‹dîWidth
(

3368 
Di•œy
* ,

3369 
Wödow
 ,

3373 
	`XSëWödowCﬁ‹m≠
(

3374 
Di•œy
* ,

3375 
Wödow
 ,

3376 
Cﬁ‹m≠


3379 
	`XSt‹eBuf„r
(

3380 
Di•œy
* ,

3381 
_Xc⁄°
 * ,

3386 
	`XSt‹eByãs
(

3387 
Di•œy
* ,

3388 
_Xc⁄°
 * ,

3392 
	`XSt‹eCﬁ‹
(

3393 
Di•œy
* ,

3394 
Cﬁ‹m≠
 ,

3395 
XCﬁ‹
*

3398 
	`XSt‹eCﬁ‹s
(

3399 
Di•œy
* ,

3400 
Cﬁ‹m≠
 ,

3401 
XCﬁ‹
* ,

3405 
	`XSt‹eName
(

3406 
Di•œy
* ,

3407 
Wödow
 ,

3408 
_Xc⁄°
 *

3411 
	`XSt‹eNamedCﬁ‹
(

3412 
Di•œy
* ,

3413 
Cﬁ‹m≠
 ,

3414 
_Xc⁄°
 * ,

3419 
	`XSync
(

3420 
Di•œy
* ,

3421 
Boﬁ


3424 
	`XTextExã¡s
(

3425 
XF⁄tSåu˘
* ,

3426 
_Xc⁄°
 * ,

3431 
XCh¨Såu˘
*

3434 
	`XTextExã¡s16
(

3435 
XF⁄tSåu˘
* ,

3436 
_Xc⁄°
 
XCh¨2b
* ,

3441 
XCh¨Såu˘
*

3444 
	`XTextWidth
(

3445 
XF⁄tSåu˘
* ,

3446 
_Xc⁄°
 * ,

3450 
	`XTextWidth16
(

3451 
XF⁄tSåu˘
* ,

3452 
_Xc⁄°
 
XCh¨2b
* ,

3456 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3457 
Di•œy
* ,

3458 
Wödow
 ,

3459 
Wödow
 ,

3464 
Wödow
*

3467 
	`XUndeföeCurs‹
(

3468 
Di•œy
* ,

3469 
Wödow


3472 
	`XUngøbBuâ⁄
(

3473 
Di•œy
* ,

3476 
Wödow


3479 
	`XUngøbKey
(

3480 
Di•œy
* ,

3483 
Wödow


3486 
	`XUngøbKeybﬂrd
(

3487 
Di•œy
* ,

3488 
Time


3491 
	`XUngøbPoöãr
(

3492 
Di•œy
* ,

3493 
Time


3496 
	`XUngøbSîvî
(

3497 
Di•œy
*

3500 
	`XUnö°ÆlCﬁ‹m≠
(

3501 
Di•œy
* ,

3502 
Cﬁ‹m≠


3505 
	`XU∆ﬂdF⁄t
(

3506 
Di•œy
* ,

3507 
F⁄t


3510 
	`XUnm≠Subwödows
(

3511 
Di•œy
* ,

3512 
Wödow


3515 
	`XUnm≠Wödow
(

3516 
Di•œy
* ,

3517 
Wödow


3520 
	`XVíd‹Rñó£
(

3521 
Di•œy
*

3524 
	`XW¨pPoöãr
(

3525 
Di•œy
* ,

3526 
Wödow
 ,

3527 
Wödow
 ,

3536 
	`XWidthMMOfS¸ìn
(

3537 
S¸ìn
*

3540 
	`XWidthOfS¸ìn
(

3541 
S¸ìn
*

3544 
	`XWödowEvít
(

3545 
Di•œy
* ,

3546 
Wödow
 ,

3548 
XEvít
*

3551 
	`XWrôeBôm≠Fûe
(

3552 
Di•œy
* ,

3553 
_Xc⁄°
 * ,

3554 
Pixm≠
 ,

3561 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3563 *
	`XSëLoˇÀModifõrs
(

3567 
XOM
 
	`XO≥nOM
(

3568 
Di•œy
* ,

3569 
_XrmHashBuckëRec
* ,

3570 
_Xc⁄°
 * ,

3571 
_Xc⁄°
 *

3574 
Sètus
 
	`XClo£OM
(

3575 
XOM


3578 *
	$XSëOMVÆues
(

3579 
XOM
 ,

3581 Ë
	`_X_SENTINEL
(0);

3583 *
	$XGëOMVÆues
(

3584 
XOM
 ,

3586 Ë
	`_X_SENTINEL
(0);

3588 
Di•œy
 *
	`XDi•œyOfOM
(

3589 
XOM


3592 *
	`XLoˇÀOfOM
(

3593 
XOM


3596 
XOC
 
	$XCª©eOC
(

3597 
XOM
 ,

3599 Ë
	`_X_SENTINEL
(0);

3601 
	`XDe°royOC
(

3602 
XOC


3605 
XOM
 
	`XOMOfOC
(

3606 
XOC


3609 *
	$XSëOCVÆues
(

3610 
XOC
 ,

3612 Ë
	`_X_SENTINEL
(0);

3614 *
	$XGëOCVÆues
(

3615 
XOC
 ,

3617 Ë
	`_X_SENTINEL
(0);

3619 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3620 
Di•œy
* ,

3621 
_Xc⁄°
 * ,

3627 
	`XFªeF⁄tSë
(

3628 
Di•œy
* ,

3629 
XF⁄tSë


3632 
	`XF⁄tsOfF⁄tSë
(

3633 
XF⁄tSë
 ,

3634 
XF⁄tSåu˘
*** ,

3638 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3639 
XF⁄tSë


3642 *
	`XLoˇÀOfF⁄tSë
(

3643 
XF⁄tSë


3646 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3647 
XF⁄tSë


3650 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3651 
XF⁄tSë


3654 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3655 
XF⁄tSë


3658 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3659 
XF⁄tSë


3662 
	`XmbTextEsˇ≥mít
(

3663 
XF⁄tSë
 ,

3664 
_Xc⁄°
 * ,

3668 
	`XwcTextEsˇ≥mít
(

3669 
XF⁄tSë
 ,

3670 
_Xc⁄°
 
wch¨_t
* ,

3674 
	`Xutf8TextEsˇ≥mít
(

3675 
XF⁄tSë
 ,

3676 
_Xc⁄°
 * ,

3680 
	`XmbTextExã¡s
(

3681 
XF⁄tSë
 ,

3682 
_Xc⁄°
 * ,

3684 
XRe˘™gÀ
* ,

3685 
XRe˘™gÀ
*

3688 
	`XwcTextExã¡s
(

3689 
XF⁄tSë
 ,

3690 
_Xc⁄°
 
wch¨_t
* ,

3692 
XRe˘™gÀ
* ,

3693 
XRe˘™gÀ
*

3696 
	`Xutf8TextExã¡s
(

3697 
XF⁄tSë
 ,

3698 
_Xc⁄°
 * ,

3700 
XRe˘™gÀ
* ,

3701 
XRe˘™gÀ
*

3704 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3705 
XF⁄tSë
 ,

3706 
_Xc⁄°
 * ,

3708 
XRe˘™gÀ
* ,

3709 
XRe˘™gÀ
* ,

3712 
XRe˘™gÀ
* ,

3713 
XRe˘™gÀ
*

3716 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3717 
XF⁄tSë
 ,

3718 
_Xc⁄°
 
wch¨_t
* ,

3720 
XRe˘™gÀ
* ,

3721 
XRe˘™gÀ
* ,

3724 
XRe˘™gÀ
* ,

3725 
XRe˘™gÀ
*

3728 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3729 
XF⁄tSë
 ,

3730 
_Xc⁄°
 * ,

3732 
XRe˘™gÀ
* ,

3733 
XRe˘™gÀ
* ,

3736 
XRe˘™gÀ
* ,

3737 
XRe˘™gÀ
*

3740 
	`XmbDøwText
(

3741 
Di•œy
* ,

3742 
DøwabÀ
 ,

3743 
GC
 ,

3746 
XmbTextIãm
* ,

3750 
	`XwcDøwText
(

3751 
Di•œy
* ,

3752 
DøwabÀ
 ,

3753 
GC
 ,

3756 
XwcTextIãm
* ,

3760 
	`Xutf8DøwText
(

3761 
Di•œy
* ,

3762 
DøwabÀ
 ,

3763 
GC
 ,

3766 
XmbTextIãm
* ,

3770 
	`XmbDøwSåög
(

3771 
Di•œy
* ,

3772 
DøwabÀ
 ,

3773 
XF⁄tSë
 ,

3774 
GC
 ,

3777 
_Xc⁄°
 * ,

3781 
	`XwcDøwSåög
(

3782 
Di•œy
* ,

3783 
DøwabÀ
 ,

3784 
XF⁄tSë
 ,

3785 
GC
 ,

3788 
_Xc⁄°
 
wch¨_t
* ,

3792 
	`Xutf8DøwSåög
(

3793 
Di•œy
* ,

3794 
DøwabÀ
 ,

3795 
XF⁄tSë
 ,

3796 
GC
 ,

3799 
_Xc⁄°
 * ,

3803 
	`XmbDøwImageSåög
(

3804 
Di•œy
* ,

3805 
DøwabÀ
 ,

3806 
XF⁄tSë
 ,

3807 
GC
 ,

3810 
_Xc⁄°
 * ,

3814 
	`XwcDøwImageSåög
(

3815 
Di•œy
* ,

3816 
DøwabÀ
 ,

3817 
XF⁄tSë
 ,

3818 
GC
 ,

3821 
_Xc⁄°
 
wch¨_t
* ,

3825 
	`Xutf8DøwImageSåög
(

3826 
Di•œy
* ,

3827 
DøwabÀ
 ,

3828 
XF⁄tSë
 ,

3829 
GC
 ,

3832 
_Xc⁄°
 * ,

3836 
XIM
 
	`XO≥nIM
(

3837 
Di•œy
* ,

3838 
_XrmHashBuckëRec
* ,

3843 
Sètus
 
	`XClo£IM
(

3844 
XIM


3847 *
	$XGëIMVÆues
(

3848 
XIM
 , ...

3849 Ë
	`_X_SENTINEL
(0);

3851 *
	$XSëIMVÆues
(

3852 
XIM
 , ...

3853 Ë
	`_X_SENTINEL
(0);

3855 
Di•œy
 *
	`XDi•œyOfIM
(

3856 
XIM


3859 *
	`XLoˇÀOfIM
(

3860 
XIM


3863 
XIC
 
	$XCª©eIC
(

3864 
XIM
 , ...

3865 Ë
	`_X_SENTINEL
(0);

3867 
	`XDe°royIC
(

3868 
XIC


3871 
	`XSëICFocus
(

3872 
XIC


3875 
	`XUn£tICFocus
(

3876 
XIC


3879 
wch¨_t
 *
	`XwcRe£tIC
(

3880 
XIC


3883 *
	`XmbRe£tIC
(

3884 
XIC


3887 *
	`Xutf8Re£tIC
(

3888 
XIC


3891 *
	$XSëICVÆues
(

3892 
XIC
 , ...

3893 Ë
	`_X_SENTINEL
(0);

3895 *
	$XGëICVÆues
(

3896 
XIC
 , ...

3897 Ë
	`_X_SENTINEL
(0);

3899 
XIM
 
	`XIMOfIC
(

3900 
XIC


3903 
Boﬁ
 
	`XFûãrEvít
(

3904 
XEvít
* ,

3905 
Wödow


3908 
	`XmbLookupSåög
(

3909 
XIC
 ,

3910 
XKeyPªs£dEvít
* ,

3913 
KeySym
* ,

3914 
Sètus
*

3917 
	`XwcLookupSåög
(

3918 
XIC
 ,

3919 
XKeyPªs£dEvít
* ,

3920 
wch¨_t
* ,

3922 
KeySym
* ,

3923 
Sètus
*

3926 
	`Xutf8LookupSåög
(

3927 
XIC
 ,

3928 
XKeyPªs£dEvít
* ,

3931 
KeySym
* ,

3932 
Sètus
*

3935 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3937 Ë
	`_X_SENTINEL
(0);

3941 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3942 
Di•œy
* ,

3943 
_XrmHashBuckëRec
* ,

3946 
XIDProc
 ,

3947 
XPoöãr


3950 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3951 
Di•œy
* ,

3952 
_XrmHashBuckëRec
* ,

3955 
XIDProc
 ,

3956 
XPoöãr


3959 (*
	tXC⁄√˘i⁄W©chProc
)(

3960 
	tDi•œy
* ,

3961 
	tXPoöãr
 ,

3963 
	tBoﬁ
 ,

3964 
	tXPoöãr
*

3968 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3969 
Di•œy
* ,

3974 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3975 
Di•œy
* ,

3979 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3980 
Di•œy
* ,

3981 
XC⁄√˘i⁄W©chProc
 ,

3982 
XPoöãr


3985 
	`XRemoveC⁄√˘i⁄W©ch
(

3986 
Di•œy
* ,

3987 
XC⁄√˘i⁄W©chProc
 ,

3988 
XPoöãr


3991 
	`XSëAuth‹iz©i⁄
(

3998 
	`_Xmbtowc
(

3999 
wch¨_t
 * ,

4004 
	`_Xw˘omb
(

4006 
wch¨_t


4009 
Boﬁ
 
	`XGëEvítD©a
(

4010 
Di•œy
* ,

4011 
XGíîicEvítCookõ
*

4014 
	`XFªeEvítD©a
(

4015 
Di•œy
* ,

4016 
XGíîicEvítCookõ
*

4019 #ifde‡
__˛™g__


4020 #¥agm®
˛™g
 
dügno°ic
 
p›


4023 
_XFUNCPROTOEND


	@/usr/include/X11/Xos.h

33 #i‚de‡
_XOS_H_


34 
	#_XOS_H_


	)

36 
	~<X11/Xosdefs.h
>

42 
	~<sys/ty≥s.h
>

44 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

45 
	~<°döt.h
>

62 
	~<°rög.h
>

63 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
Ë|| deföed(
__sun
Ë|| deföed(
__CYGWIN__
Ë|| deföed(
_AIX
Ë|| deföed(
__APPLE__
)

64 
	~<°rögs.h
>

66 #i‚de‡
ödex


67 
	#ödex
(
s
,
c
Ë(
	`°rchr
((s),(c)))

	)

69 #i‚de‡
rödex


70 
	#rödex
(
s
,
c
Ë(
	`°ºchr
((s),(c)))

	)

77 #i‡
deföed
(
X_NOT_POSIX
)

78 
	~<f˙é.h
>

79 #i‡
deföed
(
USL
Ë|| deföed(
__i386__
Ë&& (deföed(
SYSV
Ë|| deföed(
SVR4
))

80 
	~<uni°d.h
>

82 #ifde‡
WIN32


83 
	~<X11/Xw32defs.h
>

85 
	~<sys/fûe.h
>

88 
	~<f˙é.h
>

89 
	~<uni°d.h
>

96 #i‡
deföed
(
_POSIX_SOURCE
Ë&& deföed(
SVR4
)

98 #unde‡
_POSIX_SOURCE


99 
	~<sys/time.h
>

100 
	#_POSIX_SOURCE


	)

101 #ñi‡
deföed
(
WIN32
)

102 
	~<time.h
>

103 #i‡!
deföed
(
_WINSOCKAPI_
Ë&& !deföed(
_WILLWINSOCK_
Ë&& !deföed(
_TIMEVAL_DEFINED
Ë&& !deföed(
_STRUCT_TIMEVAL
)

104 
	stimevÆ
 {

105 
	mtv_£c
;

106 
	mtv_u£c
;

108 
	#_TIMEVAL_DEFINED


	)

110 
	~<sys/timeb.h
>

111 
	#gëtimeofday
(
t
) \

113 
_timeb
 
_gtodtmp
; \

114 
	`_·ime
 (&
_gtodtmp
); \

115 (
t
)->
tv_£c
 = 
_gtodtmp
.
time
; \

116 (
t
)->
tv_u£c
 = 
_gtodtmp
.
mûlôm
 * 1000; \

117 }

	)

119 
	~<sys/time.h
>

120 
	~<time.h
>

124 #i‡
deföed
(
_XOPEN_XPG4
Ë|| deföed(
_XOPEN_UNIX
)

125 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—, (
timez⁄e
*)0)

	)

127 #i‡
deföed
(
SVR4
Ë|| deföed(
__SVR4
Ë|| deföed(
WIN32
)

128 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—)

	)

130 
	#X_GETTIMEOFDAY
(
t
Ë
	`gëtimeofday
—, (
timez⁄e
*)0)

	)

135 #ifde‡
__GNU__


136 
	#PATH_MAX
 4096

	)

137 
	#MAXPATHLEN
 4096

	)

138 
	#OPEN_MAX
 256

	)

142 #i‡
deföed
(
X_NOT_POSIX
Ë&& deföed(
SYSV
Ë&& !deföed(
SIGCHLD
)

143 
	#SIGCHLD
 
SIGCLD


	)

146 
	~<X11/X¨ch.h
>

	@/usr/include/X11/Xutil.h

49 #i‚de‡
_X11_XUTIL_H_


50 
	#_X11_XUTIL_H_


	)

53 
	~<X11/Xlib.h
>

54 
	~<X11/keysym.h
>

59 #ifde‡
__˛™g__


60 #¥agm®
˛™g
 
dügno°ic
 
push


61 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

68 
	#NoVÆue
 0x0000

	)

69 
	#XVÆue
 0x0001

	)

70 
	#YVÆue
 0x0002

	)

71 
	#WidthVÆue
 0x0004

	)

72 
	#HeightVÆue
 0x0008

	)

73 
	#AŒVÆues
 0x000F

	)

74 
	#XNeg©ive
 0x0010

	)

75 
	#YNeg©ive
 0x0020

	)

82 
	mÊags
;

83 
	mx
, 
	my
;

84 
	mwidth
, 
	mheight
;

85 
	mmö_width
, 
	mmö_height
;

86 
	mmax_width
, 
	mmax_height
;

87 
	mwidth_öc
, 
	mheight_öc
;

89 
	mx
;

90 
	my
;

91 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

92 
	mba£_width
, 
	mba£_height
;

93 
	mwö_gøvôy
;

94 } 
	tXSizeHöts
;

102 
	#USPosôi⁄
 (1L << 0Ë

	)

103 
	#USSize
 (1L << 1Ë

	)

105 
	#PPosôi⁄
 (1L << 2Ë

	)

106 
	#PSize
 (1L << 3Ë

	)

107 
	#PMöSize
 (1L << 4Ë

	)

108 
	#PMaxSize
 (1L << 5Ë

	)

109 
	#PResizeInc
 (1L << 6Ë

	)

110 
	#PA•e˘
 (1L << 7Ë

	)

111 
	#PBa£Size
 (1L << 8Ë

	)

112 
	#PWöGøvôy
 (1L << 9Ë

	)

115 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

120 
	mÊags
;

121 
Boﬁ
 
	möput
;

123 
	möôül_°©e
;

124 
Pixm≠
 
	mic⁄_pixm≠
;

125 
Wödow
 
	mic⁄_wödow
;

126 
	mic⁄_x
, 
	mic⁄_y
;

127 
Pixm≠
 
	mic⁄_mask
;

128 
XID
 
	mwödow_group
;

130 } 
	tXWMHöts
;

134 
	#I≈utHöt
 (1L << 0)

	)

135 
	#SèãHöt
 (1L << 1)

	)

136 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

137 
	#Ic⁄WödowHöt
 (1L << 3)

	)

138 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

139 
	#Ic⁄MaskHöt
 (1L << 5)

	)

140 
	#WödowGroupHöt
 (1L << 6)

	)

141 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

142 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

143 
	#XUrgícyHöt
 (1L << 8)

	)

146 
	#WôhdøwnSèã
 0

	)

147 
	#N‹mÆSèã
 1

	)

148 
	#Ic⁄icSèã
 3

	)

153 
	#D⁄tC¨eSèã
 0

	)

154 
	#ZoomSèã
 2

	)

155 
	#I«˘iveSèã
 4

	)

164 *
	mvÆue
;

165 
Atom
 
	mícodög
;

166 
	mf‹m©
;

167 
	mnôems
;

168 } 
	tXTextPr›îty
;

170 
	#XNoMem‹y
 -1

	)

171 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

172 
	#XC⁄vîãrNŸFound
 -3

	)

175 
	mXSåögStyÀ
,

176 
	mXCompoundTextStyÀ
,

177 
	mXTextStyÀ
,

178 
	mXStdICCTextStyÀ
,

180 
	mXUTF8SåögStyÀ


181 } 
	tXICCEncodögStyÀ
;

184 
	mmö_width
, 
	mmö_height
;

185 
	mmax_width
, 
	mmax_height
;

186 
	mwidth_öc
, 
	mheight_öc
;

187 } 
	tXIc⁄Size
;

190 *
	mªs_«me
;

191 *
	mªs_˛ass
;

192 } 
	tXCœssHöt
;

194 #ifde‡
XUTIL_DEFINE_FUNCTIONS


195 
XDe°royImage
(

196 
XImage
 *
ximage
);

197 
XGëPixñ
(

198 
XImage
 *
ximage
,

199 
x
, 
y
);

200 
XPutPixñ
(

201 
XImage
 *
ximage
,

202 
x
, 
y
,

203 
pixñ
);

204 
XImage
 *
XSubImage
(

205 
XImage
 *
ximage
,

206 
x
, 
y
,

207 
width
, 
height
);

208 
XAddPixñ
(

209 
XImage
 *
ximage
,

210 
vÆue
);

216 
	#XDe°royImage
(
ximage
) \

217 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

218 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

219 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

220 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

221 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

222 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

223 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

224 
	#XAddPixñ
(
ximage
, 
vÆue
) \

225 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

231 
	s_XCompo£Sètus
 {

232 
XPoöãr
 
	mcompo£_±r
;

233 
	mch¨s_m©ched
;

234 } 
	tXCompo£Sètus
;

239 
	#IsKey∑dKey
(
keysym
) \

240 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

242 
	#IsPriv©eKey∑dKey
(
keysym
) \

243 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

245 
	#IsCurs‹Key
(
keysym
) \

246 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

248 
	#IsPFKey
(
keysym
) \

249 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

251 
	#IsFun˘i⁄Key
(
keysym
) \

252 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

254 
	#IsMiscFun˘i⁄Key
(
keysym
) \

255 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

257 #ifde‡
XK_XKB_KEYS


258 
	#IsModifõrKey
(
keysym
) \

259 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

260 || (((
KeySym
)(
keysym
Ë>
XK_ISO_Lock
) && \

261 ((
KeySym
)(
keysym
Ë<
XK_ISO_Levñ5_Lock
)) \

262 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

263 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

265 
	#IsModifõrKey
(
keysym
) \

266 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

267 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

268 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

273 
_XRegi⁄
 *
	tRegi⁄
;

277 
	#Re˘™gÀOut
 0

	)

278 
	#Re˘™gÀIn
 1

	)

279 
	#Re˘™gÀP¨t
 2

	)

288 
VisuÆ
 *
	mvisuÆ
;

289 
VisuÆID
 
	mvisuÆid
;

290 
	ms¸ìn
;

291 
	mdïth
;

292 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

293 
	mc_˛ass
;

295 
	m˛ass
;

297 
	mªd_mask
;

298 
	mgªí_mask
;

299 
	mblue_mask
;

300 
	mcﬁ‹m≠_size
;

301 
	mbôs_≥r_rgb
;

302 } 
	tXVisuÆInfo
;

304 
	#VisuÆNoMask
 0x0

	)

305 
	#VisuÆIDMask
 0x1

	)

306 
	#VisuÆS¸ìnMask
 0x2

	)

307 
	#VisuÆDïthMask
 0x4

	)

308 
	#VisuÆCœssMask
 0x8

	)

309 
	#VisuÆRedMaskMask
 0x10

	)

310 
	#VisuÆGªíMaskMask
 0x20

	)

311 
	#VisuÆBlueMaskMask
 0x40

	)

312 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

313 
	#VisuÆBôsPîRGBMask
 0x100

	)

314 
	#VisuÆAŒMask
 0x1FF

	)

321 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

322 
	mªd_max
;

323 
	mªd_mu…
;

324 
	mgªí_max
;

325 
	mgªí_mu…
;

326 
	mblue_max
;

327 
	mblue_mu…
;

328 
	mba£_pixñ
;

329 
VisuÆID
 
	mvisuÆid
;

330 
XID
 
	mkûlid
;

331 } 
	tXSènd¨dCﬁ‹m≠
;

333 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

339 
	#Bôm≠Suc˚ss
 0

	)

340 
	#Bôm≠O≥nFaûed
 1

	)

341 
	#Bôm≠FûeInvÆid
 2

	)

342 
	#Bôm≠NoMem‹y
 3

	)

353 
	#XCSUCCESS
 0

	)

354 
	#XCNOMEM
 1

	)

355 
	#XCNOENT
 2

	)

357 
	tXC⁄ãxt
;

359 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

360 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

362 
_XFUNCPROTOBEGIN


366 
XCœssHöt
 *
XAŒocCœssHöt
 (

370 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

374 
XSizeHöts
 *
XAŒocSizeHöts
 (

378 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

382 
XWMHöts
 *
XAŒocWMHöts
 (

386 
XClùBox
(

387 
Regi⁄
 ,

388 
XRe˘™gÀ
*

391 
Regi⁄
 
XCª©eRegi⁄
(

395 c⁄° *
XDeÁu…Såög
 ();

397 
XDñëeC⁄ãxt
(

398 
Di•œy
* ,

399 
XID
 ,

400 
XC⁄ãxt


403 
XDe°royRegi⁄
(

404 
Regi⁄


407 
XEm±yRegi⁄
(

408 
Regi⁄


411 
XEquÆRegi⁄
(

412 
Regi⁄
 ,

413 
Regi⁄


416 
XFödC⁄ãxt
(

417 
Di•œy
* ,

418 
XID
 ,

419 
XC⁄ãxt
 ,

420 
XPoöãr
*

423 
Sètus
 
XGëCœssHöt
(

424 
Di•œy
* ,

425 
Wödow
 ,

426 
XCœssHöt
*

429 
Sètus
 
XGëIc⁄Sizes
(

430 
Di•œy
* ,

431 
Wödow
 ,

432 
XIc⁄Size
** ,

436 
Sètus
 
XGëN‹mÆHöts
(

437 
Di•œy
* ,

438 
Wödow
 ,

439 
XSizeHöts
*

442 
Sètus
 
XGëRGBCﬁ‹m≠s
(

443 
Di•œy
* ,

444 
Wödow
 ,

445 
XSènd¨dCﬁ‹m≠
** ,

447 
Atom


450 
Sètus
 
XGëSizeHöts
(

451 
Di•œy
* ,

452 
Wödow
 ,

453 
XSizeHöts
* ,

454 
Atom


457 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

458 
Di•œy
* ,

459 
Wödow
 ,

460 
XSènd¨dCﬁ‹m≠
* ,

461 
Atom


464 
Sètus
 
XGëTextPr›îty
(

465 
Di•œy
* ,

466 
Wödow
 ,

467 
XTextPr›îty
* ,

468 
Atom


471 
XVisuÆInfo
 *
XGëVisuÆInfo
(

472 
Di•œy
* ,

474 
XVisuÆInfo
* ,

478 
Sètus
 
XGëWMClõ¡Machöe
(

479 
Di•œy
* ,

480 
Wödow
 ,

481 
XTextPr›îty
*

484 
XWMHöts
 *
XGëWMHöts
(

485 
Di•œy
* ,

486 
Wödow


489 
Sètus
 
XGëWMIc⁄Name
(

490 
Di•œy
* ,

491 
Wödow
 ,

492 
XTextPr›îty
*

495 
Sètus
 
XGëWMName
(

496 
Di•œy
* ,

497 
Wödow
 ,

498 
XTextPr›îty
*

501 
Sètus
 
XGëWMN‹mÆHöts
(

502 
Di•œy
* ,

503 
Wödow
 ,

504 
XSizeHöts
* ,

508 
Sètus
 
XGëWMSizeHöts
(

509 
Di•œy
* ,

510 
Wödow
 ,

511 
XSizeHöts
* ,

513 
Atom


516 
Sètus
 
XGëZoomHöts
(

517 
Di•œy
* ,

518 
Wödow
 ,

519 
XSizeHöts
*

522 
XI¡î£˘Regi⁄
(

523 
Regi⁄
 ,

524 
Regi⁄
 ,

525 
Regi⁄


528 
XC⁄vîtCa£
(

529 
KeySym
 ,

530 
KeySym
* ,

531 
KeySym
*

534 
XLookupSåög
(

535 
XKeyEvít
* ,

538 
KeySym
* ,

539 
XCompo£Sètus
*

542 
Sètus
 
XM©chVisuÆInfo
(

543 
Di•œy
* ,

547 
XVisuÆInfo
*

550 
XOff£tRegi⁄
(

551 
Regi⁄
 ,

556 
Boﬁ
 
XPoötInRegi⁄
(

557 
Regi⁄
 ,

562 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

563 
XPoöt
* ,

568 
XRe˘InRegi⁄
(

569 
Regi⁄
 ,

576 
XSaveC⁄ãxt
(

577 
Di•œy
* ,

578 
XID
 ,

579 
XC⁄ãxt
 ,

580 
_Xc⁄°
 *

583 
XSëCœssHöt
(

584 
Di•œy
* ,

585 
Wödow
 ,

586 
XCœssHöt
*

589 
XSëIc⁄Sizes
(

590 
Di•œy
* ,

591 
Wödow
 ,

592 
XIc⁄Size
* ,

596 
XSëN‹mÆHöts
(

597 
Di•œy
* ,

598 
Wödow
 ,

599 
XSizeHöts
*

602 
XSëRGBCﬁ‹m≠s
(

603 
Di•œy
* ,

604 
Wödow
 ,

605 
XSènd¨dCﬁ‹m≠
* ,

607 
Atom


610 
XSëSizeHöts
(

611 
Di•œy
* ,

612 
Wödow
 ,

613 
XSizeHöts
* ,

614 
Atom


617 
XSëSènd¨dPr›îtõs
(

618 
Di•œy
* ,

619 
Wödow
 ,

620 
_Xc⁄°
 * ,

621 
_Xc⁄°
 * ,

622 
Pixm≠
 ,

625 
XSizeHöts
*

628 
XSëTextPr›îty
(

629 
Di•œy
* ,

630 
Wödow
 ,

631 
XTextPr›îty
* ,

632 
Atom


635 
XSëWMClõ¡Machöe
(

636 
Di•œy
* ,

637 
Wödow
 ,

638 
XTextPr›îty
*

641 
XSëWMHöts
(

642 
Di•œy
* ,

643 
Wödow
 ,

644 
XWMHöts
*

647 
XSëWMIc⁄Name
(

648 
Di•œy
* ,

649 
Wödow
 ,

650 
XTextPr›îty
*

653 
XSëWMName
(

654 
Di•œy
* ,

655 
Wödow
 ,

656 
XTextPr›îty
*

659 
XSëWMN‹mÆHöts
(

660 
Di•œy
* ,

661 
Wödow
 ,

662 
XSizeHöts
*

665 
XSëWMPr›îtõs
(

666 
Di•œy
* ,

667 
Wödow
 ,

668 
XTextPr›îty
* ,

669 
XTextPr›îty
* ,

672 
XSizeHöts
* ,

673 
XWMHöts
* ,

674 
XCœssHöt
*

677 
XmbSëWMPr›îtõs
(

678 
Di•œy
* ,

679 
Wödow
 ,

680 
_Xc⁄°
 * ,

681 
_Xc⁄°
 * ,

684 
XSizeHöts
* ,

685 
XWMHöts
* ,

686 
XCœssHöt
*

689 
Xutf8SëWMPr›îtõs
(

690 
Di•œy
* ,

691 
Wödow
 ,

692 
_Xc⁄°
 * ,

693 
_Xc⁄°
 * ,

696 
XSizeHöts
* ,

697 
XWMHöts
* ,

698 
XCœssHöt
*

701 
XSëWMSizeHöts
(

702 
Di•œy
* ,

703 
Wödow
 ,

704 
XSizeHöts
* ,

705 
Atom


708 
XSëRegi⁄
(

709 
Di•œy
* ,

710 
GC
 ,

711 
Regi⁄


714 
XSëSènd¨dCﬁ‹m≠
(

715 
Di•œy
* ,

716 
Wödow
 ,

717 
XSènd¨dCﬁ‹m≠
* ,

718 
Atom


721 
XSëZoomHöts
(

722 
Di•œy
* ,

723 
Wödow
 ,

724 
XSizeHöts
*

727 
XShrökRegi⁄
(

728 
Regi⁄
 ,

733 
Sètus
 
XSåögLi°ToTextPr›îty
(

736 
XTextPr›îty
*

739 
XSubåa˘Regi⁄
(

740 
Regi⁄
 ,

741 
Regi⁄
 ,

742 
Regi⁄


745 
XmbTextLi°ToTextPr›îty
(

746 
Di•œy
* 
di•œy
,

747 ** 
li°
,

748 
cou¡
,

749 
XICCEncodögStyÀ
 
°yÀ
,

750 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


753 
XwcTextLi°ToTextPr›îty
(

754 
Di•œy
* 
di•œy
,

755 
wch¨_t
** 
li°
,

756 
cou¡
,

757 
XICCEncodögStyÀ
 
°yÀ
,

758 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


761 
Xutf8TextLi°ToTextPr›îty
(

762 
Di•œy
* 
di•œy
,

763 ** 
li°
,

764 
cou¡
,

765 
XICCEncodögStyÀ
 
°yÀ
,

766 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


769 
XwcFªeSåögLi°
(

770 
wch¨_t
** 
li°


773 
Sètus
 
XTextPr›îtyToSåögLi°
(

774 
XTextPr›îty
* ,

779 
XmbTextPr›îtyToTextLi°
(

780 
Di•œy
* 
di•œy
,

781 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

782 *** 
li°_ªtu∫
,

783 * 
cou¡_ªtu∫


786 
XwcTextPr›îtyToTextLi°
(

787 
Di•œy
* 
di•œy
,

788 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

789 
wch¨_t
*** 
li°_ªtu∫
,

790 * 
cou¡_ªtu∫


793 
Xutf8TextPr›îtyToTextLi°
(

794 
Di•œy
* 
di•œy
,

795 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

796 *** 
li°_ªtu∫
,

797 * 
cou¡_ªtu∫


800 
XUni⁄Re˘WôhRegi⁄
(

801 
XRe˘™gÀ
* ,

802 
Regi⁄
 ,

803 
Regi⁄


806 
XUni⁄Regi⁄
(

807 
Regi⁄
 ,

808 
Regi⁄
 ,

809 
Regi⁄


812 
XWMGeomëry
(

813 
Di•œy
* ,

815 
_Xc⁄°
 * ,

816 
_Xc⁄°
 * ,

818 
XSizeHöts
* ,

826 
XX‹Regi⁄
(

827 
Regi⁄
 ,

828 
Regi⁄
 ,

829 
Regi⁄


832 #ifde‡
__˛™g__


833 #¥agm®
˛™g
 
dügno°ic
 
p›


836 
	g_XFUNCPROTOEND


	@/usr/include/X11/keysym.h

49 
	#XK_MISCELLANY


	)

50 
	#XK_XKB_KEYS


	)

51 
	#XK_LATIN1


	)

52 
	#XK_LATIN2


	)

53 
	#XK_LATIN3


	)

54 
	#XK_LATIN4


	)

55 
	#XK_LATIN8


	)

56 
	#XK_LATIN9


	)

57 
	#XK_CAUCASUS


	)

58 
	#XK_GREEK


	)

59 
	#XK_KATAKANA


	)

60 
	#XK_ARABIC


	)

61 
	#XK_CYRILLIC


	)

62 
	#XK_HEBREW


	)

63 
	#XK_THAI


	)

64 
	#XK_KOREAN


	)

65 
	#XK_ARMENIAN


	)

66 
	#XK_GEORGIAN


	)

67 
	#XK_VIETNAMESE


	)

68 
	#XK_CURRENCY


	)

69 
	#XK_MATHEMATICAL


	)

70 
	#XK_BRAILLE


	)

71 
	#XK_SINHALA


	)

73 
	~<X11/keysymdef.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_IAMCU
 6

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

195 
	#EM_SPU
 23

	)

197 
	#EM_V800
 36

	)

198 
	#EM_FR20
 37

	)

199 
	#EM_RH32
 38

	)

200 
	#EM_RCE
 39

	)

201 
	#EM_ARM
 40

	)

202 
	#EM_FAKE_ALPHA
 41

	)

203 
	#EM_SH
 42

	)

204 
	#EM_SPARCV9
 43

	)

205 
	#EM_TRICORE
 44

	)

206 
	#EM_ARC
 45

	)

207 
	#EM_H8_300
 46

	)

208 
	#EM_H8_300H
 47

	)

209 
	#EM_H8S
 48

	)

210 
	#EM_H8_500
 49

	)

211 
	#EM_IA_64
 50

	)

212 
	#EM_MIPS_X
 51

	)

213 
	#EM_COLDFIRE
 52

	)

214 
	#EM_68HC12
 53

	)

215 
	#EM_MMA
 54

	)

216 
	#EM_PCP
 55

	)

217 
	#EM_NCPU
 56

	)

218 
	#EM_NDR1
 57

	)

219 
	#EM_STARCORE
 58

	)

220 
	#EM_ME16
 59

	)

221 
	#EM_ST100
 60

	)

222 
	#EM_TINYJ
 61

	)

223 
	#EM_X86_64
 62

	)

224 
	#EM_PDSP
 63

	)

225 
	#EM_PDP10
 64

	)

226 
	#EM_PDP11
 65

	)

227 
	#EM_FX66
 66

	)

228 
	#EM_ST9PLUS
 67

	)

229 
	#EM_ST7
 68

	)

230 
	#EM_68HC16
 69

	)

231 
	#EM_68HC11
 70

	)

232 
	#EM_68HC08
 71

	)

233 
	#EM_68HC05
 72

	)

234 
	#EM_SVX
 73

	)

235 
	#EM_ST19
 74

	)

236 
	#EM_VAX
 75

	)

237 
	#EM_CRIS
 76

	)

238 
	#EM_JAVELIN
 77

	)

239 
	#EM_FIREPATH
 78

	)

240 
	#EM_ZSP
 79

	)

241 
	#EM_MMIX
 80

	)

242 
	#EM_HUANY
 81

	)

243 
	#EM_PRISM
 82

	)

244 
	#EM_AVR
 83

	)

245 
	#EM_FR30
 84

	)

246 
	#EM_D10V
 85

	)

247 
	#EM_D30V
 86

	)

248 
	#EM_V850
 87

	)

249 
	#EM_M32R
 88

	)

250 
	#EM_MN10300
 89

	)

251 
	#EM_MN10200
 90

	)

252 
	#EM_PJ
 91

	)

253 
	#EM_OPENRISC
 92

	)

254 
	#EM_ARC_COMPACT
 93

	)

255 
	#EM_XTENSA
 94

	)

256 
	#EM_VIDEOCORE
 95

	)

257 
	#EM_TMM_GPP
 96

	)

258 
	#EM_NS32K
 97

	)

259 
	#EM_TPC
 98

	)

260 
	#EM_SNP1K
 99

	)

261 
	#EM_ST200
 100

	)

262 
	#EM_IP2K
 101

	)

263 
	#EM_MAX
 102

	)

264 
	#EM_CR
 103

	)

265 
	#EM_F2MC16
 104

	)

266 
	#EM_MSP430
 105

	)

267 
	#EM_BLACKFIN
 106

	)

268 
	#EM_SE_C33
 107

	)

269 
	#EM_SEP
 108

	)

270 
	#EM_ARCA
 109

	)

271 
	#EM_UNICORE
 110

	)

272 
	#EM_EXCESS
 111

	)

273 
	#EM_DXP
 112

	)

274 
	#EM_ALTERA_NIOS2
 113

	)

275 
	#EM_CRX
 114

	)

276 
	#EM_XGATE
 115

	)

277 
	#EM_C166
 116

	)

278 
	#EM_M16C
 117

	)

279 
	#EM_DSPIC30F
 118

	)

280 
	#EM_CE
 119

	)

281 
	#EM_M32C
 120

	)

283 
	#EM_TSK3000
 131

	)

284 
	#EM_RS08
 132

	)

285 
	#EM_SHARC
 133

	)

286 
	#EM_ECOG2
 134

	)

287 
	#EM_SCORE7
 135

	)

288 
	#EM_DSP24
 136

	)

289 
	#EM_VIDEOCORE3
 137

	)

290 
	#EM_LATTICEMICO32
 138

	)

291 
	#EM_SE_C17
 139

	)

292 
	#EM_TI_C6000
 140

	)

293 
	#EM_TI_C2000
 141

	)

294 
	#EM_TI_C5500
 142

	)

295 
	#EM_TI_ARP32
 143

	)

296 
	#EM_TI_PRU
 144

	)

298 
	#EM_MMDSP_PLUS
 160

	)

299 
	#EM_CYPRESS_M8C
 161

	)

300 
	#EM_R32C
 162

	)

301 
	#EM_TRIMEDIA
 163

	)

302 
	#EM_QDSP6
 164

	)

303 
	#EM_8051
 165

	)

304 
	#EM_STXP7X
 166

	)

305 
	#EM_NDS32
 167

	)

306 
	#EM_ECOG1X
 168

	)

307 
	#EM_MAXQ30
 169

	)

308 
	#EM_XIMO16
 170

	)

309 
	#EM_MANIK
 171

	)

310 
	#EM_CRAYNV2
 172

	)

311 
	#EM_RX
 173

	)

312 
	#EM_METAG
 174

	)

313 
	#EM_MCST_ELBRUS
 175

	)

314 
	#EM_ECOG16
 176

	)

315 
	#EM_CR16
 177

	)

316 
	#EM_ETPU
 178

	)

317 
	#EM_SLE9X
 179

	)

318 
	#EM_L10M
 180

	)

319 
	#EM_K10M
 181

	)

321 
	#EM_AARCH64
 183

	)

323 
	#EM_AVR32
 185

	)

324 
	#EM_STM8
 186

	)

325 
	#EM_TILE64
 187

	)

326 
	#EM_TILEPRO
 188

	)

327 
	#EM_MICROBLAZE
 189

	)

328 
	#EM_CUDA
 190

	)

329 
	#EM_TILEGX
 191

	)

330 
	#EM_CLOUDSHIELD
 192

	)

331 
	#EM_COREA_1ST
 193

	)

332 
	#EM_COREA_2ND
 194

	)

333 
	#EM_ARC_COMPACT2
 195

	)

334 
	#EM_OPEN8
 196

	)

335 
	#EM_RL78
 197

	)

336 
	#EM_VIDEOCORE5
 198

	)

337 
	#EM_78KOR
 199

	)

338 
	#EM_56800EX
 200

	)

339 
	#EM_BA1
 201

	)

340 
	#EM_BA2
 202

	)

341 
	#EM_XCORE
 203

	)

342 
	#EM_MCHP_PIC
 204

	)

344 
	#EM_KM32
 210

	)

345 
	#EM_KMX32
 211

	)

346 
	#EM_EMX16
 212

	)

347 
	#EM_EMX8
 213

	)

348 
	#EM_KVARC
 214

	)

349 
	#EM_CDP
 215

	)

350 
	#EM_COGE
 216

	)

351 
	#EM_COOL
 217

	)

352 
	#EM_NORC
 218

	)

353 
	#EM_CSR_KALIMBA
 219

	)

354 
	#EM_Z80
 220

	)

355 
	#EM_VISIUM
 221

	)

356 
	#EM_FT32
 222

	)

357 
	#EM_MOXIE
 223

	)

358 
	#EM_AMDGPU
 224

	)

360 
	#EM_RISCV
 243

	)

362 
	#EM_BPF
 247

	)

363 
	#EM_CSKY
 252

	)

365 
	#EM_NUM
 253

	)

369 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

375 
	#EM_ALPHA
 0x9026

	)

379 
	#EV_NONE
 0

	)

380 
	#EV_CURRENT
 1

	)

381 
	#EV_NUM
 2

	)

387 
Elf32_W‹d
 
	msh_«me
;

388 
Elf32_W‹d
 
	msh_ty≥
;

389 
Elf32_W‹d
 
	msh_Êags
;

390 
Elf32_Addr
 
	msh_addr
;

391 
Elf32_Off
 
	msh_off£t
;

392 
Elf32_W‹d
 
	msh_size
;

393 
Elf32_W‹d
 
	msh_lök
;

394 
Elf32_W‹d
 
	msh_öfo
;

395 
Elf32_W‹d
 
	msh_addølign
;

396 
Elf32_W‹d
 
	msh_ítsize
;

397 } 
	tElf32_Shdr
;

401 
Elf64_W‹d
 
	msh_«me
;

402 
Elf64_W‹d
 
	msh_ty≥
;

403 
Elf64_Xw‹d
 
	msh_Êags
;

404 
Elf64_Addr
 
	msh_addr
;

405 
Elf64_Off
 
	msh_off£t
;

406 
Elf64_Xw‹d
 
	msh_size
;

407 
Elf64_W‹d
 
	msh_lök
;

408 
Elf64_W‹d
 
	msh_öfo
;

409 
Elf64_Xw‹d
 
	msh_addølign
;

410 
Elf64_Xw‹d
 
	msh_ítsize
;

411 } 
	tElf64_Shdr
;

415 
	#SHN_UNDEF
 0

	)

416 
	#SHN_LORESERVE
 0xff00

	)

417 
	#SHN_LOPROC
 0xff00

	)

418 
	#SHN_BEFORE
 0xff00

	)

420 
	#SHN_AFTER
 0xff01

	)

422 
	#SHN_HIPROC
 0xff1‡

	)

423 
	#SHN_LOOS
 0xff20

	)

424 
	#SHN_HIOS
 0xff3‡

	)

425 
	#SHN_ABS
 0xfff1

	)

426 
	#SHN_COMMON
 0xfff2

	)

427 
	#SHN_XINDEX
 0xfff‡

	)

428 
	#SHN_HIRESERVE
 0xfff‡

	)

432 
	#SHT_NULL
 0

	)

433 
	#SHT_PROGBITS
 1

	)

434 
	#SHT_SYMTAB
 2

	)

435 
	#SHT_STRTAB
 3

	)

436 
	#SHT_RELA
 4

	)

437 
	#SHT_HASH
 5

	)

438 
	#SHT_DYNAMIC
 6

	)

439 
	#SHT_NOTE
 7

	)

440 
	#SHT_NOBITS
 8

	)

441 
	#SHT_REL
 9

	)

442 
	#SHT_SHLIB
 10

	)

443 
	#SHT_DYNSYM
 11

	)

444 
	#SHT_INIT_ARRAY
 14

	)

445 
	#SHT_FINI_ARRAY
 15

	)

446 
	#SHT_PREINIT_ARRAY
 16

	)

447 
	#SHT_GROUP
 17

	)

448 
	#SHT_SYMTAB_SHNDX
 18

	)

449 
	#SHT_NUM
 19

	)

450 
	#SHT_LOOS
 0x60000000

	)

451 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

452 
	#SHT_GNU_HASH
 0x6ffffff6

	)

453 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

454 
	#SHT_CHECKSUM
 0x6ffffff8

	)

455 
	#SHT_LOSUNW
 0x6fffffÁ

	)

456 
	#SHT_SUNW_move
 0x6fffffÁ

	)

457 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

458 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

459 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

460 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

461 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

462 
	#SHT_HISUNW
 0x6ffffff‡

	)

463 
	#SHT_HIOS
 0x6ffffff‡

	)

464 
	#SHT_LOPROC
 0x70000000

	)

465 
	#SHT_HIPROC
 0x7ffffff‡

	)

466 
	#SHT_LOUSER
 0x80000000

	)

467 
	#SHT_HIUSER
 0x8ffffff‡

	)

471 
	#SHF_WRITE
 (1 << 0Ë

	)

472 
	#SHF_ALLOC
 (1 << 1Ë

	)

473 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

474 
	#SHF_MERGE
 (1 << 4Ë

	)

475 
	#SHF_STRINGS
 (1 << 5Ë

	)

476 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

477 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

478 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

480 
	#SHF_GROUP
 (1 << 9Ë

	)

481 
	#SHF_TLS
 (1 << 10Ë

	)

482 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

483 
	#SHF_MASKOS
 0x0ff00000

	)

484 
	#SHF_MASKPROC
 0xf0000000

	)

485 
	#SHF_ORDERED
 (1 << 30Ë

	)

487 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

494 
Elf32_W‹d
 
	mch_ty≥
;

495 
Elf32_W‹d
 
	mch_size
;

496 
Elf32_W‹d
 
	mch_addølign
;

497 } 
	tElf32_Chdr
;

501 
Elf64_W‹d
 
	mch_ty≥
;

502 
Elf64_W‹d
 
	mch_ª£rved
;

503 
Elf64_Xw‹d
 
	mch_size
;

504 
Elf64_Xw‹d
 
	mch_addølign
;

505 } 
	tElf64_Chdr
;

508 
	#ELFCOMPRESS_ZLIB
 1

	)

509 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

510 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

511 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

512 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

515 
	#GRP_COMDAT
 0x1

	)

521 
Elf32_W‹d
 
	m°_«me
;

522 
Elf32_Addr
 
	m°_vÆue
;

523 
Elf32_W‹d
 
	m°_size
;

524 
	m°_öfo
;

525 
	m°_Ÿhî
;

526 
Elf32_Se˘i⁄
 
	m°_shndx
;

527 } 
	tElf32_Sym
;

531 
Elf64_W‹d
 
	m°_«me
;

532 
	m°_öfo
;

533 
	m°_Ÿhî
;

534 
Elf64_Se˘i⁄
 
	m°_shndx
;

535 
Elf64_Addr
 
	m°_vÆue
;

536 
Elf64_Xw‹d
 
	m°_size
;

537 } 
	tElf64_Sym
;

544 
Elf32_HÆf
 
	msi_boundto
;

545 
Elf32_HÆf
 
	msi_Êags
;

546 } 
	tElf32_Symöfo
;

550 
Elf64_HÆf
 
	msi_boundto
;

551 
Elf64_HÆf
 
	msi_Êags
;

552 } 
	tElf64_Symöfo
;

555 
	#SYMINFO_BT_SELF
 0xfff‡

	)

556 
	#SYMINFO_BT_PARENT
 0xff„

	)

557 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

560 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

561 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

562 
	#SYMINFO_FLG_COPY
 0x0004

	)

563 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

566 
	#SYMINFO_NONE
 0

	)

567 
	#SYMINFO_CURRENT
 1

	)

568 
	#SYMINFO_NUM
 2

	)

573 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

574 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

575 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

578 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

579 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

580 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

584 
	#STB_LOCAL
 0

	)

585 
	#STB_GLOBAL
 1

	)

586 
	#STB_WEAK
 2

	)

587 
	#STB_NUM
 3

	)

588 
	#STB_LOOS
 10

	)

589 
	#STB_GNU_UNIQUE
 10

	)

590 
	#STB_HIOS
 12

	)

591 
	#STB_LOPROC
 13

	)

592 
	#STB_HIPROC
 15

	)

596 
	#STT_NOTYPE
 0

	)

597 
	#STT_OBJECT
 1

	)

598 
	#STT_FUNC
 2

	)

599 
	#STT_SECTION
 3

	)

600 
	#STT_FILE
 4

	)

601 
	#STT_COMMON
 5

	)

602 
	#STT_TLS
 6

	)

603 
	#STT_NUM
 7

	)

604 
	#STT_LOOS
 10

	)

605 
	#STT_GNU_IFUNC
 10

	)

606 
	#STT_HIOS
 12

	)

607 
	#STT_LOPROC
 13

	)

608 
	#STT_HIPROC
 15

	)

615 
	#STN_UNDEF
 0

	)

620 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

623 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

626 
	#STV_DEFAULT
 0

	)

627 
	#STV_INTERNAL
 1

	)

628 
	#STV_HIDDEN
 2

	)

629 
	#STV_PROTECTED
 3

	)

636 
Elf32_Addr
 
	mr_off£t
;

637 
Elf32_W‹d
 
	mr_öfo
;

638 } 
	tElf32_Rñ
;

647 
Elf64_Addr
 
	mr_off£t
;

648 
Elf64_Xw‹d
 
	mr_öfo
;

649 } 
	tElf64_Rñ
;

655 
Elf32_Addr
 
	mr_off£t
;

656 
Elf32_W‹d
 
	mr_öfo
;

657 
Elf32_Sw‹d
 
	mr_addíd
;

658 } 
	tElf32_Rña
;

662 
Elf64_Addr
 
	mr_off£t
;

663 
Elf64_Xw‹d
 
	mr_öfo
;

664 
Elf64_Sxw‹d
 
	mr_addíd
;

665 } 
	tElf64_Rña
;

669 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

670 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

671 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

673 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

674 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

675 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

681 
Elf32_W‹d
 
	mp_ty≥
;

682 
Elf32_Off
 
	mp_off£t
;

683 
Elf32_Addr
 
	mp_vaddr
;

684 
Elf32_Addr
 
	mp_∑ddr
;

685 
Elf32_W‹d
 
	mp_fûesz
;

686 
Elf32_W‹d
 
	mp_memsz
;

687 
Elf32_W‹d
 
	mp_Êags
;

688 
Elf32_W‹d
 
	mp_Æign
;

689 } 
	tElf32_Phdr
;

693 
Elf64_W‹d
 
	mp_ty≥
;

694 
Elf64_W‹d
 
	mp_Êags
;

695 
Elf64_Off
 
	mp_off£t
;

696 
Elf64_Addr
 
	mp_vaddr
;

697 
Elf64_Addr
 
	mp_∑ddr
;

698 
Elf64_Xw‹d
 
	mp_fûesz
;

699 
Elf64_Xw‹d
 
	mp_memsz
;

700 
Elf64_Xw‹d
 
	mp_Æign
;

701 } 
	tElf64_Phdr
;

707 
	#PN_XNUM
 0xffff

	)

711 
	#PT_NULL
 0

	)

712 
	#PT_LOAD
 1

	)

713 
	#PT_DYNAMIC
 2

	)

714 
	#PT_INTERP
 3

	)

715 
	#PT_NOTE
 4

	)

716 
	#PT_SHLIB
 5

	)

717 
	#PT_PHDR
 6

	)

718 
	#PT_TLS
 7

	)

719 
	#PT_NUM
 8

	)

720 
	#PT_LOOS
 0x60000000

	)

721 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

722 
	#PT_GNU_STACK
 0x6474e551

	)

723 
	#PT_GNU_RELRO
 0x6474e552

	)

724 
	#PT_LOSUNW
 0x6fffffÁ

	)

725 
	#PT_SUNWBSS
 0x6fffffÁ

	)

726 
	#PT_SUNWSTACK
 0x6ffffffb

	)

727 
	#PT_HISUNW
 0x6fffffff

	)

728 
	#PT_HIOS
 0x6ffffff‡

	)

729 
	#PT_LOPROC
 0x70000000

	)

730 
	#PT_HIPROC
 0x7ffffff‡

	)

734 
	#PF_X
 (1 << 0Ë

	)

735 
	#PF_W
 (1 << 1Ë

	)

736 
	#PF_R
 (1 << 2Ë

	)

737 
	#PF_MASKOS
 0x0ff00000

	)

738 
	#PF_MASKPROC
 0xf0000000

	)

742 
	#NT_PRSTATUS
 1

	)

743 
	#NT_PRFPREG
 2

	)

745 
	#NT_FPREGSET
 2

	)

746 
	#NT_PRPSINFO
 3

	)

747 
	#NT_PRXREG
 4

	)

748 
	#NT_TASKSTRUCT
 4

	)

749 
	#NT_PLATFORM
 5

	)

750 
	#NT_AUXV
 6

	)

751 
	#NT_GWINDOWS
 7

	)

752 
	#NT_ASRS
 8

	)

753 
	#NT_PSTATUS
 10

	)

754 
	#NT_PSINFO
 13

	)

755 
	#NT_PRCRED
 14

	)

756 
	#NT_UTSNAME
 15

	)

757 
	#NT_LWPSTATUS
 16

	)

758 
	#NT_LWPSINFO
 17

	)

759 
	#NT_PRFPXREG
 20

	)

760 
	#NT_SIGINFO
 0x53494749

	)

762 
	#NT_FILE
 0x46494c45

	)

764 
	#NT_PRXFPREG
 0x46e62b7‡

	)

765 
	#NT_PPC_VMX
 0x100

	)

766 
	#NT_PPC_SPE
 0x101

	)

767 
	#NT_PPC_VSX
 0x102

	)

768 
	#NT_PPC_TAR
 0x103

	)

769 
	#NT_PPC_PPR
 0x104

	)

770 
	#NT_PPC_DSCR
 0x105

	)

771 
	#NT_PPC_EBB
 0x106

	)

772 
	#NT_PPC_PMU
 0x107

	)

773 
	#NT_PPC_TM_CGPR
 0x108

	)

774 
	#NT_PPC_TM_CFPR
 0x109

	)

775 
	#NT_PPC_TM_CVMX
 0x10®

	)

776 
	#NT_PPC_TM_CVSX
 0x10b

	)

777 
	#NT_PPC_TM_SPR
 0x10¯

	)

778 
	#NT_PPC_TM_CTAR
 0x10d

	)

780 
	#NT_PPC_TM_CPPR
 0x10ê

	)

782 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

784 
	#NT_PPC_PKEY
 0x110

	)

786 
	#NT_386_TLS
 0x200

	)

787 
	#NT_386_IOPERM
 0x201

	)

788 
	#NT_X86_XSTATE
 0x202

	)

789 
	#NT_S390_HIGH_GPRS
 0x300

	)

790 
	#NT_S390_TIMER
 0x301

	)

791 
	#NT_S390_TODCMP
 0x302

	)

792 
	#NT_S390_TODPREG
 0x303

	)

793 
	#NT_S390_CTRS
 0x304

	)

794 
	#NT_S390_PREFIX
 0x305

	)

795 
	#NT_S390_LAST_BREAK
 0x306

	)

796 
	#NT_S390_SYSTEM_CALL
 0x307

	)

797 
	#NT_S390_TDB
 0x308

	)

798 
	#NT_S390_VXRS_LOW
 0x309

	)

800 
	#NT_S390_VXRS_HIGH
 0x30®

	)

801 
	#NT_S390_GS_CB
 0x30b

	)

802 
	#NT_S390_GS_BC
 0x30¯

	)

804 
	#NT_S390_RI_CB
 0x30d

	)

805 
	#NT_ARM_VFP
 0x400

	)

806 
	#NT_ARM_TLS
 0x401

	)

807 
	#NT_ARM_HW_BREAK
 0x402

	)

808 
	#NT_ARM_HW_WATCH
 0x403

	)

809 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

810 
	#NT_ARM_SVE
 0x405

	)

812 
	#NT_ARM_PAC_MASK
 0x406

	)

814 
	#NT_ARM_PACA_KEYS
 0x407

	)

816 
	#NT_ARM_PACG_KEYS
 0x408

	)

818 
	#NT_VMCOREDD
 0x700

	)

819 
	#NT_MIPS_DSP
 0x800

	)

820 
	#NT_MIPS_FP_MODE
 0x801

	)

821 
	#NT_MIPS_MSA
 0x802

	)

825 
	#NT_VERSION
 1

	)

832 
Elf32_Sw‹d
 
	md_èg
;

835 
Elf32_W‹d
 
	md_vÆ
;

836 
Elf32_Addr
 
	md_±r
;

837 } 
	md_un
;

838 } 
	tElf32_Dyn
;

842 
Elf64_Sxw‹d
 
	md_èg
;

845 
Elf64_Xw‹d
 
	md_vÆ
;

846 
Elf64_Addr
 
	md_±r
;

847 } 
	md_un
;

848 } 
	tElf64_Dyn
;

852 
	#DT_NULL
 0

	)

853 
	#DT_NEEDED
 1

	)

854 
	#DT_PLTRELSZ
 2

	)

855 
	#DT_PLTGOT
 3

	)

856 
	#DT_HASH
 4

	)

857 
	#DT_STRTAB
 5

	)

858 
	#DT_SYMTAB
 6

	)

859 
	#DT_RELA
 7

	)

860 
	#DT_RELASZ
 8

	)

861 
	#DT_RELAENT
 9

	)

862 
	#DT_STRSZ
 10

	)

863 
	#DT_SYMENT
 11

	)

864 
	#DT_INIT
 12

	)

865 
	#DT_FINI
 13

	)

866 
	#DT_SONAME
 14

	)

867 
	#DT_RPATH
 15

	)

868 
	#DT_SYMBOLIC
 16

	)

869 
	#DT_REL
 17

	)

870 
	#DT_RELSZ
 18

	)

871 
	#DT_RELENT
 19

	)

872 
	#DT_PLTREL
 20

	)

873 
	#DT_DEBUG
 21

	)

874 
	#DT_TEXTREL
 22

	)

875 
	#DT_JMPREL
 23

	)

876 
	#DT_BIND_NOW
 24

	)

877 
	#DT_INIT_ARRAY
 25

	)

878 
	#DT_FINI_ARRAY
 26

	)

879 
	#DT_INIT_ARRAYSZ
 27

	)

880 
	#DT_FINI_ARRAYSZ
 28

	)

881 
	#DT_RUNPATH
 29

	)

882 
	#DT_FLAGS
 30

	)

883 
	#DT_ENCODING
 32

	)

884 
	#DT_PREINIT_ARRAY
 32

	)

885 
	#DT_PREINIT_ARRAYSZ
 33

	)

886 
	#DT_SYMTAB_SHNDX
 34

	)

887 
	#DT_NUM
 35

	)

888 
	#DT_LOOS
 0x6000000d

	)

889 
	#DT_HIOS
 0x6ffff000

	)

890 
	#DT_LOPROC
 0x70000000

	)

891 
	#DT_HIPROC
 0x7ffffff‡

	)

892 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

897 
	#DT_VALRNGLO
 0x6ffffd00

	)

898 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

899 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

900 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

901 
	#DT_CHECKSUM
 0x6ffffdf8

	)

902 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

903 
	#DT_MOVEENT
 0x6ffffdÁ

	)

904 
	#DT_MOVESZ
 0x6ffffdfb

	)

905 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

906 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

908 
	#DT_SYMINSZ
 0x6ffffd„

	)

909 
	#DT_SYMINENT
 0x6ffffdf‡

	)

910 
	#DT_VALRNGHI
 0x6ffffdff

	)

911 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

912 
	#DT_VALNUM
 12

	)

919 
	#DT_ADDRRNGLO
 0x6fff„00

	)

920 
	#DT_GNU_HASH
 0x6fff„f5

	)

921 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

922 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

923 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

924 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

925 
	#DT_CONFIG
 0x6fff„Á

	)

926 
	#DT_DEPAUDIT
 0x6fff„fb

	)

927 
	#DT_AUDIT
 0x6fff„f¯

	)

928 
	#DT_PLTPAD
 0x6fff„fd

	)

929 
	#DT_MOVETAB
 0x6fff„„

	)

930 
	#DT_SYMINFO
 0x6fff„f‡

	)

931 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

932 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

933 
	#DT_ADDRNUM
 11

	)

937 
	#DT_VERSYM
 0x6ffffff0

	)

939 
	#DT_RELACOUNT
 0x6ffffff9

	)

940 
	#DT_RELCOUNT
 0x6fffffÁ

	)

943 
	#DT_FLAGS_1
 0x6ffffffb

	)

944 
	#DT_VERDEF
 0x6ffffff¯

	)

946 
	#DT_VERDEFNUM
 0x6ffffffd

	)

947 
	#DT_VERNEED
 0x6fffff„

	)

949 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

950 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

951 
	#DT_VERSIONTAGNUM
 16

	)

955 
	#DT_AUXILIARY
 0x7ffffffd

	)

956 
	#DT_FILTER
 0x7ffffff‡

	)

957 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

958 
	#DT_EXTRANUM
 3

	)

961 
	#DF_ORIGIN
 0x00000001

	)

962 
	#DF_SYMBOLIC
 0x00000002

	)

963 
	#DF_TEXTREL
 0x00000004

	)

964 
	#DF_BIND_NOW
 0x00000008

	)

965 
	#DF_STATIC_TLS
 0x00000010

	)

969 
	#DF_1_NOW
 0x00000001

	)

970 
	#DF_1_GLOBAL
 0x00000002

	)

971 
	#DF_1_GROUP
 0x00000004

	)

972 
	#DF_1_NODELETE
 0x00000008

	)

973 
	#DF_1_LOADFLTR
 0x00000010

	)

974 
	#DF_1_INITFIRST
 0x00000020

	)

975 
	#DF_1_NOOPEN
 0x00000040

	)

976 
	#DF_1_ORIGIN
 0x00000080

	)

977 
	#DF_1_DIRECT
 0x00000100

	)

978 
	#DF_1_TRANS
 0x00000200

	)

979 
	#DF_1_INTERPOSE
 0x00000400

	)

980 
	#DF_1_NODEFLIB
 0x00000800

	)

981 
	#DF_1_NODUMP
 0x00001000

	)

982 
	#DF_1_CONFALT
 0x00002000

	)

983 
	#DF_1_ENDFILTEE
 0x00004000

	)

984 
	#DF_1_DISPRELDNE
 0x00008000

	)

985 
	#DF_1_DISPRELPND
 0x00010000

	)

986 
	#DF_1_NODIRECT
 0x00020000

	)

987 
	#DF_1_IGNMULDEF
 0x00040000

	)

988 
	#DF_1_NOKSYMS
 0x00080000

	)

989 
	#DF_1_NOHDR
 0x00100000

	)

990 
	#DF_1_EDITED
 0x00200000

	)

991 
	#DF_1_NORELOC
 0x00400000

	)

992 
	#DF_1_SYMINTPOSE
 0x00800000

	)

993 
	#DF_1_GLOBAUDIT
 0x01000000

	)

994 
	#DF_1_SINGLETON
 0x02000000

	)

995 
	#DF_1_STUB
 0x04000000

	)

996 
	#DF_1_PIE
 0x08000000

	)

997 
	#DF_1_KMOD
 0x10000000

	)

998 
	#DF_1_WEAKFILTER
 0x20000000

	)

999 
	#DF_1_NOCOMMON
 0x40000000

	)

1002 
	#DTF_1_PARINIT
 0x00000001

	)

1003 
	#DTF_1_CONFEXP
 0x00000002

	)

1006 
	#DF_P1_LAZYLOAD
 0x00000001

	)

1007 
	#DF_P1_GROUPPERM
 0x00000002

	)

1014 
Elf32_HÆf
 
	mvd_vîsi⁄
;

1015 
Elf32_HÆf
 
	mvd_Êags
;

1016 
Elf32_HÆf
 
	mvd_ndx
;

1017 
Elf32_HÆf
 
	mvd_˙t
;

1018 
Elf32_W‹d
 
	mvd_hash
;

1019 
Elf32_W‹d
 
	mvd_aux
;

1020 
Elf32_W‹d
 
	mvd_√xt
;

1022 } 
	tElf32_Vîdef
;

1026 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1027 
Elf64_HÆf
 
	mvd_Êags
;

1028 
Elf64_HÆf
 
	mvd_ndx
;

1029 
Elf64_HÆf
 
	mvd_˙t
;

1030 
Elf64_W‹d
 
	mvd_hash
;

1031 
Elf64_W‹d
 
	mvd_aux
;

1032 
Elf64_W‹d
 
	mvd_√xt
;

1034 } 
	tElf64_Vîdef
;

1038 
	#VER_DEF_NONE
 0

	)

1039 
	#VER_DEF_CURRENT
 1

	)

1040 
	#VER_DEF_NUM
 2

	)

1043 
	#VER_FLG_BASE
 0x1

	)

1044 
	#VER_FLG_WEAK
 0x2

	)

1047 
	#VER_NDX_LOCAL
 0

	)

1048 
	#VER_NDX_GLOBAL
 1

	)

1049 
	#VER_NDX_LORESERVE
 0xff00

	)

1050 
	#VER_NDX_ELIMINATE
 0xff01

	)

1056 
Elf32_W‹d
 
	mvda_«me
;

1057 
Elf32_W‹d
 
	mvda_√xt
;

1059 } 
	tElf32_Vîdaux
;

1063 
Elf64_W‹d
 
	mvda_«me
;

1064 
Elf64_W‹d
 
	mvda_√xt
;

1066 } 
	tElf64_Vîdaux
;

1073 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1074 
Elf32_HÆf
 
	mvn_˙t
;

1075 
Elf32_W‹d
 
	mvn_fûe
;

1077 
Elf32_W‹d
 
	mvn_aux
;

1078 
Elf32_W‹d
 
	mvn_√xt
;

1080 } 
	tElf32_Vî√ed
;

1084 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1085 
Elf64_HÆf
 
	mvn_˙t
;

1086 
Elf64_W‹d
 
	mvn_fûe
;

1088 
Elf64_W‹d
 
	mvn_aux
;

1089 
Elf64_W‹d
 
	mvn_√xt
;

1091 } 
	tElf64_Vî√ed
;

1095 
	#VER_NEED_NONE
 0

	)

1096 
	#VER_NEED_CURRENT
 1

	)

1097 
	#VER_NEED_NUM
 2

	)

1103 
Elf32_W‹d
 
	mv«_hash
;

1104 
Elf32_HÆf
 
	mv«_Êags
;

1105 
Elf32_HÆf
 
	mv«_Ÿhî
;

1106 
Elf32_W‹d
 
	mv«_«me
;

1107 
Elf32_W‹d
 
	mv«_√xt
;

1109 } 
	tElf32_Vî«ux
;

1113 
Elf64_W‹d
 
	mv«_hash
;

1114 
Elf64_HÆf
 
	mv«_Êags
;

1115 
Elf64_HÆf
 
	mv«_Ÿhî
;

1116 
Elf64_W‹d
 
	mv«_«me
;

1117 
Elf64_W‹d
 
	mv«_√xt
;

1119 } 
	tElf64_Vî«ux
;

1123 
	#VER_FLG_WEAK
 0x2

	)

1137 
uöt32_t
 
	ma_ty≥
;

1140 
uöt32_t
 
	ma_vÆ
;

1144 } 
	ma_un
;

1145 } 
	tElf32_auxv_t
;

1149 
uöt64_t
 
	ma_ty≥
;

1152 
uöt64_t
 
	ma_vÆ
;

1156 } 
	ma_un
;

1157 } 
	tElf64_auxv_t
;

1159 
	~<bôs/auxv.h
>

1165 
Elf32_W‹d
 
	mn_«mesz
;

1166 
Elf32_W‹d
 
	mn_descsz
;

1167 
Elf32_W‹d
 
	mn_ty≥
;

1168 } 
	tElf32_Nhdr
;

1172 
Elf64_W‹d
 
	mn_«mesz
;

1173 
Elf64_W‹d
 
	mn_descsz
;

1174 
Elf64_W‹d
 
	mn_ty≥
;

1175 } 
	tElf64_Nhdr
;

1180 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1183 
	#ELF_NOTE_GNU
 "GNU"

	)

1189 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1200 
	#NT_GNU_ABI_TAG
 1

	)

1201 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1205 
	#ELF_NOTE_OS_LINUX
 0

	)

1206 
	#ELF_NOTE_OS_GNU
 1

	)

1207 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1208 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1216 
	#NT_GNU_HWCAP
 2

	)

1220 
	#NT_GNU_BUILD_ID
 3

	)

1223 
	#NT_GNU_GOLD_VERSION
 4

	)

1226 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1229 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1234 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1236 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1239 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1241 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1243 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1245 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1249 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0000000

	)

1252 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0000001

	)

1254 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1256 
	#GNU_PROPERTY_X86_ISA_1_486
 (1U << 0)

	)

1257 
	#GNU_PROPERTY_X86_ISA_1_586
 (1U << 1)

	)

1258 
	#GNU_PROPERTY_X86_ISA_1_686
 (1U << 2)

	)

1259 
	#GNU_PROPERTY_X86_ISA_1_SSE
 (1U << 3)

	)

1260 
	#GNU_PROPERTY_X86_ISA_1_SSE2
 (1U << 4)

	)

1261 
	#GNU_PROPERTY_X86_ISA_1_SSE3
 (1U << 5)

	)

1262 
	#GNU_PROPERTY_X86_ISA_1_SSSE3
 (1U << 6)

	)

1263 
	#GNU_PROPERTY_X86_ISA_1_SSE4_1
 (1U << 7)

	)

1264 
	#GNU_PROPERTY_X86_ISA_1_SSE4_2
 (1U << 8)

	)

1265 
	#GNU_PROPERTY_X86_ISA_1_AVX
 (1U << 9)

	)

1266 
	#GNU_PROPERTY_X86_ISA_1_AVX2
 (1U << 10)

	)

1267 
	#GNU_PROPERTY_X86_ISA_1_AVX512F
 (1U << 11)

	)

1268 
	#GNU_PROPERTY_X86_ISA_1_AVX512CD
 (1U << 12)

	)

1269 
	#GNU_PROPERTY_X86_ISA_1_AVX512ER
 (1U << 13)

	)

1270 
	#GNU_PROPERTY_X86_ISA_1_AVX512PF
 (1U << 14)

	)

1271 
	#GNU_PROPERTY_X86_ISA_1_AVX512VL
 (1U << 15)

	)

1272 
	#GNU_PROPERTY_X86_ISA_1_AVX512DQ
 (1U << 16)

	)

1273 
	#GNU_PROPERTY_X86_ISA_1_AVX512BW
 (1U << 17)

	)

1277 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1280 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1285 
Elf32_Xw‹d
 
	mm_vÆue
;

1286 
Elf32_W‹d
 
	mm_öfo
;

1287 
Elf32_W‹d
 
	mm_poff£t
;

1288 
Elf32_HÆf
 
	mm_ª≥©
;

1289 
Elf32_HÆf
 
	mm_°ride
;

1290 } 
	tElf32_Move
;

1294 
Elf64_Xw‹d
 
	mm_vÆue
;

1295 
Elf64_Xw‹d
 
	mm_öfo
;

1296 
Elf64_Xw‹d
 
	mm_poff£t
;

1297 
Elf64_HÆf
 
	mm_ª≥©
;

1298 
Elf64_HÆf
 
	mm_°ride
;

1299 } 
	tElf64_Move
;

1302 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1303 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1304 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1306 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1307 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1308 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1314 
	#EF_CPU32
 0x00810000

	)

1318 
	#R_68K_NONE
 0

	)

1319 
	#R_68K_32
 1

	)

1320 
	#R_68K_16
 2

	)

1321 
	#R_68K_8
 3

	)

1322 
	#R_68K_PC32
 4

	)

1323 
	#R_68K_PC16
 5

	)

1324 
	#R_68K_PC8
 6

	)

1325 
	#R_68K_GOT32
 7

	)

1326 
	#R_68K_GOT16
 8

	)

1327 
	#R_68K_GOT8
 9

	)

1328 
	#R_68K_GOT32O
 10

	)

1329 
	#R_68K_GOT16O
 11

	)

1330 
	#R_68K_GOT8O
 12

	)

1331 
	#R_68K_PLT32
 13

	)

1332 
	#R_68K_PLT16
 14

	)

1333 
	#R_68K_PLT8
 15

	)

1334 
	#R_68K_PLT32O
 16

	)

1335 
	#R_68K_PLT16O
 17

	)

1336 
	#R_68K_PLT8O
 18

	)

1337 
	#R_68K_COPY
 19

	)

1338 
	#R_68K_GLOB_DAT
 20

	)

1339 
	#R_68K_JMP_SLOT
 21

	)

1340 
	#R_68K_RELATIVE
 22

	)

1341 
	#R_68K_TLS_GD32
 25

	)

1342 
	#R_68K_TLS_GD16
 26

	)

1343 
	#R_68K_TLS_GD8
 27

	)

1344 
	#R_68K_TLS_LDM32
 28

	)

1345 
	#R_68K_TLS_LDM16
 29

	)

1346 
	#R_68K_TLS_LDM8
 30

	)

1347 
	#R_68K_TLS_LDO32
 31

	)

1348 
	#R_68K_TLS_LDO16
 32

	)

1349 
	#R_68K_TLS_LDO8
 33

	)

1350 
	#R_68K_TLS_IE32
 34

	)

1351 
	#R_68K_TLS_IE16
 35

	)

1352 
	#R_68K_TLS_IE8
 36

	)

1353 
	#R_68K_TLS_LE32
 37

	)

1355 
	#R_68K_TLS_LE16
 38

	)

1357 
	#R_68K_TLS_LE8
 39

	)

1359 
	#R_68K_TLS_DTPMOD32
 40

	)

1360 
	#R_68K_TLS_DTPREL32
 41

	)

1361 
	#R_68K_TLS_TPREL32
 42

	)

1363 
	#R_68K_NUM
 43

	)

1369 
	#R_386_NONE
 0

	)

1370 
	#R_386_32
 1

	)

1371 
	#R_386_PC32
 2

	)

1372 
	#R_386_GOT32
 3

	)

1373 
	#R_386_PLT32
 4

	)

1374 
	#R_386_COPY
 5

	)

1375 
	#R_386_GLOB_DAT
 6

	)

1376 
	#R_386_JMP_SLOT
 7

	)

1377 
	#R_386_RELATIVE
 8

	)

1378 
	#R_386_GOTOFF
 9

	)

1379 
	#R_386_GOTPC
 10

	)

1380 
	#R_386_32PLT
 11

	)

1381 
	#R_386_TLS_TPOFF
 14

	)

1382 
	#R_386_TLS_IE
 15

	)

1384 
	#R_386_TLS_GOTIE
 16

	)

1386 
	#R_386_TLS_LE
 17

	)

1388 
	#R_386_TLS_GD
 18

	)

1390 
	#R_386_TLS_LDM
 19

	)

1393 
	#R_386_16
 20

	)

1394 
	#R_386_PC16
 21

	)

1395 
	#R_386_8
 22

	)

1396 
	#R_386_PC8
 23

	)

1397 
	#R_386_TLS_GD_32
 24

	)

1399 
	#R_386_TLS_GD_PUSH
 25

	)

1400 
	#R_386_TLS_GD_CALL
 26

	)

1402 
	#R_386_TLS_GD_POP
 27

	)

1403 
	#R_386_TLS_LDM_32
 28

	)

1405 
	#R_386_TLS_LDM_PUSH
 29

	)

1406 
	#R_386_TLS_LDM_CALL
 30

	)

1408 
	#R_386_TLS_LDM_POP
 31

	)

1409 
	#R_386_TLS_LDO_32
 32

	)

1410 
	#R_386_TLS_IE_32
 33

	)

1412 
	#R_386_TLS_LE_32
 34

	)

1414 
	#R_386_TLS_DTPMOD32
 35

	)

1415 
	#R_386_TLS_DTPOFF32
 36

	)

1416 
	#R_386_TLS_TPOFF32
 37

	)

1417 
	#R_386_SIZE32
 38

	)

1418 
	#R_386_TLS_GOTDESC
 39

	)

1419 
	#R_386_TLS_DESC_CALL
 40

	)

1422 
	#R_386_TLS_DESC
 41

	)

1426 
	#R_386_IRELATIVE
 42

	)

1427 
	#R_386_GOT32X
 43

	)

1430 
	#R_386_NUM
 44

	)

1436 
	#STT_SPARC_REGISTER
 13

	)

1440 
	#EF_SPARCV9_MM
 3

	)

1441 
	#EF_SPARCV9_TSO
 0

	)

1442 
	#EF_SPARCV9_PSO
 1

	)

1443 
	#EF_SPARCV9_RMO
 2

	)

1444 
	#EF_SPARC_LEDATA
 0x800000

	)

1445 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1446 
	#EF_SPARC_32PLUS
 0x000100

	)

1447 
	#EF_SPARC_SUN_US1
 0x000200

	)

1448 
	#EF_SPARC_HAL_R1
 0x000400

	)

1449 
	#EF_SPARC_SUN_US3
 0x000800

	)

1453 
	#R_SPARC_NONE
 0

	)

1454 
	#R_SPARC_8
 1

	)

1455 
	#R_SPARC_16
 2

	)

1456 
	#R_SPARC_32
 3

	)

1457 
	#R_SPARC_DISP8
 4

	)

1458 
	#R_SPARC_DISP16
 5

	)

1459 
	#R_SPARC_DISP32
 6

	)

1460 
	#R_SPARC_WDISP30
 7

	)

1461 
	#R_SPARC_WDISP22
 8

	)

1462 
	#R_SPARC_HI22
 9

	)

1463 
	#R_SPARC_22
 10

	)

1464 
	#R_SPARC_13
 11

	)

1465 
	#R_SPARC_LO10
 12

	)

1466 
	#R_SPARC_GOT10
 13

	)

1467 
	#R_SPARC_GOT13
 14

	)

1468 
	#R_SPARC_GOT22
 15

	)

1469 
	#R_SPARC_PC10
 16

	)

1470 
	#R_SPARC_PC22
 17

	)

1471 
	#R_SPARC_WPLT30
 18

	)

1472 
	#R_SPARC_COPY
 19

	)

1473 
	#R_SPARC_GLOB_DAT
 20

	)

1474 
	#R_SPARC_JMP_SLOT
 21

	)

1475 
	#R_SPARC_RELATIVE
 22

	)

1476 
	#R_SPARC_UA32
 23

	)

1480 
	#R_SPARC_PLT32
 24

	)

1481 
	#R_SPARC_HIPLT22
 25

	)

1482 
	#R_SPARC_LOPLT10
 26

	)

1483 
	#R_SPARC_PCPLT32
 27

	)

1484 
	#R_SPARC_PCPLT22
 28

	)

1485 
	#R_SPARC_PCPLT10
 29

	)

1486 
	#R_SPARC_10
 30

	)

1487 
	#R_SPARC_11
 31

	)

1488 
	#R_SPARC_64
 32

	)

1489 
	#R_SPARC_OLO10
 33

	)

1490 
	#R_SPARC_HH22
 34

	)

1491 
	#R_SPARC_HM10
 35

	)

1492 
	#R_SPARC_LM22
 36

	)

1493 
	#R_SPARC_PC_HH22
 37

	)

1494 
	#R_SPARC_PC_HM10
 38

	)

1495 
	#R_SPARC_PC_LM22
 39

	)

1496 
	#R_SPARC_WDISP16
 40

	)

1497 
	#R_SPARC_WDISP19
 41

	)

1498 
	#R_SPARC_GLOB_JMP
 42

	)

1499 
	#R_SPARC_7
 43

	)

1500 
	#R_SPARC_5
 44

	)

1501 
	#R_SPARC_6
 45

	)

1502 
	#R_SPARC_DISP64
 46

	)

1503 
	#R_SPARC_PLT64
 47

	)

1504 
	#R_SPARC_HIX22
 48

	)

1505 
	#R_SPARC_LOX10
 49

	)

1506 
	#R_SPARC_H44
 50

	)

1507 
	#R_SPARC_M44
 51

	)

1508 
	#R_SPARC_L44
 52

	)

1509 
	#R_SPARC_REGISTER
 53

	)

1510 
	#R_SPARC_UA64
 54

	)

1511 
	#R_SPARC_UA16
 55

	)

1512 
	#R_SPARC_TLS_GD_HI22
 56

	)

1513 
	#R_SPARC_TLS_GD_LO10
 57

	)

1514 
	#R_SPARC_TLS_GD_ADD
 58

	)

1515 
	#R_SPARC_TLS_GD_CALL
 59

	)

1516 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1517 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1518 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1519 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1520 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1521 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1522 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1523 
	#R_SPARC_TLS_IE_HI22
 67

	)

1524 
	#R_SPARC_TLS_IE_LO10
 68

	)

1525 
	#R_SPARC_TLS_IE_LD
 69

	)

1526 
	#R_SPARC_TLS_IE_LDX
 70

	)

1527 
	#R_SPARC_TLS_IE_ADD
 71

	)

1528 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1529 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1530 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1531 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1532 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1533 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1534 
	#R_SPARC_TLS_TPOFF32
 78

	)

1535 
	#R_SPARC_TLS_TPOFF64
 79

	)

1536 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1537 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1538 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1539 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1540 
	#R_SPARC_GOTDATA_OP
 84

	)

1541 
	#R_SPARC_H34
 85

	)

1542 
	#R_SPARC_SIZE32
 86

	)

1543 
	#R_SPARC_SIZE64
 87

	)

1544 
	#R_SPARC_WDISP10
 88

	)

1545 
	#R_SPARC_JMP_IREL
 248

	)

1546 
	#R_SPARC_IRELATIVE
 249

	)

1547 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1548 
	#R_SPARC_GNU_VTENTRY
 251

	)

1549 
	#R_SPARC_REV32
 252

	)

1551 
	#R_SPARC_NUM
 253

	)

1555 
	#DT_SPARC_REGISTER
 0x70000001

	)

1556 
	#DT_SPARC_NUM
 2

	)

1562 
	#EF_MIPS_NOREORDER
 1

	)

1563 
	#EF_MIPS_PIC
 2

	)

1564 
	#EF_MIPS_CPIC
 4

	)

1565 
	#EF_MIPS_XGOT
 8

	)

1566 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1567 
	#EF_MIPS_ABI2
 32

	)

1568 
	#EF_MIPS_ABI_ON32
 64

	)

1569 
	#EF_MIPS_FP64
 512

	)

1570 
	#EF_MIPS_NAN2008
 1024

	)

1571 
	#EF_MIPS_ARCH
 0xf0000000

	)

1575 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1576 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1577 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1578 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1579 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1580 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1581 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1582 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1583 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1587 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1588 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1589 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1590 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1591 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1592 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1593 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1597 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1598 
	#SHN_MIPS_TEXT
 0xff01

	)

1599 
	#SHN_MIPS_DATA
 0xff02

	)

1600 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1601 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1605 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1606 
	#SHT_MIPS_MSYM
 0x70000001

	)

1607 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1608 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1609 
	#SHT_MIPS_UCODE
 0x70000004

	)

1610 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1611 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1612 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1613 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1614 
	#SHT_MIPS_RELD
 0x70000009

	)

1615 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1616 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1617 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1618 
	#SHT_MIPS_SHDR
 0x70000010

	)

1619 
	#SHT_MIPS_FDESC
 0x70000011

	)

1620 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1621 
	#SHT_MIPS_DENSE
 0x70000013

	)

1622 
	#SHT_MIPS_PDESC
 0x70000014

	)

1623 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1624 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1625 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1626 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1627 
	#SHT_MIPS_LINE
 0x70000019

	)

1628 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1629 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1630 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1631 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1632 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1633 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1634 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1635 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1636 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1637 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1638 
	#SHT_MIPS_XLATE
 0x70000024

	)

1639 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1640 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1641 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1642 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1643 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1644 
	#SHT_MIPS_XHASH
 0x7000002b

	)

1648 
	#SHF_MIPS_GPREL
 0x10000000

	)

1649 
	#SHF_MIPS_MERGE
 0x20000000

	)

1650 
	#SHF_MIPS_ADDR
 0x40000000

	)

1651 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1652 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1653 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1654 
	#SHF_MIPS_NAMES
 0x02000000

	)

1655 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1661 
	#STO_MIPS_DEFAULT
 0x0

	)

1662 
	#STO_MIPS_INTERNAL
 0x1

	)

1663 
	#STO_MIPS_HIDDEN
 0x2

	)

1664 
	#STO_MIPS_PROTECTED
 0x3

	)

1665 
	#STO_MIPS_PLT
 0x8

	)

1666 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1669 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1677 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1678 
Elf32_W‹d
 
	mgt_unu£d
;

1679 } 
	mgt_hódî
;

1682 
Elf32_W‹d
 
	mgt_g_vÆue
;

1683 
Elf32_W‹d
 
	mgt_byãs
;

1684 } 
	mgt_íåy
;

1685 } 
	tElf32_g±ab
;

1691 
Elf32_W‹d
 
	mri_g¥mask
;

1692 
Elf32_W‹d
 
	mri_˝rmask
[4];

1693 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1694 } 
	tElf32_RegInfo
;

1700 
	mköd
;

1702 
	msize
;

1703 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1705 
Elf32_W‹d
 
	möfo
;

1706 } 
	tElf_O±i⁄s
;

1710 
	#ODK_NULL
 0

	)

1711 
	#ODK_REGINFO
 1

	)

1712 
	#ODK_EXCEPTIONS
 2

	)

1713 
	#ODK_PAD
 3

	)

1714 
	#ODK_HWPATCH
 4

	)

1715 
	#ODK_FILL
 5

	)

1716 
	#ODK_TAGS
 6

	)

1717 
	#ODK_HWAND
 7

	)

1718 
	#ODK_HWOR
 8

	)

1722 
	#OEX_FPU_MIN
 0x1‡

	)

1723 
	#OEX_FPU_MAX
 0x1f00

	)

1724 
	#OEX_PAGE0
 0x10000

	)

1725 
	#OEX_SMM
 0x20000

	)

1726 
	#OEX_FPDBUG
 0x40000

	)

1727 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1728 
	#OEX_DISMISS
 0x80000

	)

1730 
	#OEX_FPU_INVAL
 0x10

	)

1731 
	#OEX_FPU_DIV0
 0x08

	)

1732 
	#OEX_FPU_OFLO
 0x04

	)

1733 
	#OEX_FPU_UFLO
 0x02

	)

1734 
	#OEX_FPU_INEX
 0x01

	)

1738 
	#OHW_R4KEOP
 0x1

	)

1739 
	#OHW_R8KPFETCH
 0x2

	)

1740 
	#OHW_R5KEOP
 0x4

	)

1741 
	#OHW_R5KCVTL
 0x8

	)

1743 
	#OPAD_PREFIX
 0x1

	)

1744 
	#OPAD_POSTFIX
 0x2

	)

1745 
	#OPAD_SYMBOL
 0x4

	)

1751 
Elf32_W‹d
 
	mhwp_Êags1
;

1752 
Elf32_W‹d
 
	mhwp_Êags2
;

1753 } 
	tElf_O±i⁄s_Hw
;

1757 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1758 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1762 
	#R_MIPS_NONE
 0

	)

1763 
	#R_MIPS_16
 1

	)

1764 
	#R_MIPS_32
 2

	)

1765 
	#R_MIPS_REL32
 3

	)

1766 
	#R_MIPS_26
 4

	)

1767 
	#R_MIPS_HI16
 5

	)

1768 
	#R_MIPS_LO16
 6

	)

1769 
	#R_MIPS_GPREL16
 7

	)

1770 
	#R_MIPS_LITERAL
 8

	)

1771 
	#R_MIPS_GOT16
 9

	)

1772 
	#R_MIPS_PC16
 10

	)

1773 
	#R_MIPS_CALL16
 11

	)

1774 
	#R_MIPS_GPREL32
 12

	)

1776 
	#R_MIPS_SHIFT5
 16

	)

1777 
	#R_MIPS_SHIFT6
 17

	)

1778 
	#R_MIPS_64
 18

	)

1779 
	#R_MIPS_GOT_DISP
 19

	)

1780 
	#R_MIPS_GOT_PAGE
 20

	)

1781 
	#R_MIPS_GOT_OFST
 21

	)

1782 
	#R_MIPS_GOT_HI16
 22

	)

1783 
	#R_MIPS_GOT_LO16
 23

	)

1784 
	#R_MIPS_SUB
 24

	)

1785 
	#R_MIPS_INSERT_A
 25

	)

1786 
	#R_MIPS_INSERT_B
 26

	)

1787 
	#R_MIPS_DELETE
 27

	)

1788 
	#R_MIPS_HIGHER
 28

	)

1789 
	#R_MIPS_HIGHEST
 29

	)

1790 
	#R_MIPS_CALL_HI16
 30

	)

1791 
	#R_MIPS_CALL_LO16
 31

	)

1792 
	#R_MIPS_SCN_DISP
 32

	)

1793 
	#R_MIPS_REL16
 33

	)

1794 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1795 
	#R_MIPS_PJUMP
 35

	)

1796 
	#R_MIPS_RELGOT
 36

	)

1797 
	#R_MIPS_JALR
 37

	)

1798 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1799 
	#R_MIPS_TLS_DTPREL32
 39

	)

1800 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1801 
	#R_MIPS_TLS_DTPREL64
 41

	)

1802 
	#R_MIPS_TLS_GD
 42

	)

1803 
	#R_MIPS_TLS_LDM
 43

	)

1804 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1805 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1806 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1807 
	#R_MIPS_TLS_TPREL32
 47

	)

1808 
	#R_MIPS_TLS_TPREL64
 48

	)

1809 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1810 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1811 
	#R_MIPS_GLOB_DAT
 51

	)

1812 
	#R_MIPS_COPY
 126

	)

1813 
	#R_MIPS_JUMP_SLOT
 127

	)

1815 
	#R_MIPS_NUM
 128

	)

1819 
	#PT_MIPS_REGINFO
 0x70000000

	)

1820 
	#PT_MIPS_RTPROC
 0x70000001

	)

1821 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1822 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1826 
	#PF_MIPS_LOCAL
 0x10000000

	)

1830 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1831 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1832 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1833 
	#DT_MIPS_IVERSION
 0x70000004

	)

1834 
	#DT_MIPS_FLAGS
 0x70000005

	)

1835 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1836 
	#DT_MIPS_MSYM
 0x70000007

	)

1837 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1838 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1839 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1840 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1841 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1842 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1843 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1844 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1845 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1846 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1847 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1848 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1850 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1851 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1853 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1854 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1856 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1858 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1860 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1862 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1864 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1865 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1866 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1867 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1868 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1869 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1870 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1871 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1872 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1873 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1874 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1875 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1877 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1879 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1880 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1881 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1883 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1887 
	#DT_MIPS_RWPLT
 0x70000034

	)

1891 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1893 
	#DT_MIPS_XHASH
 0x70000036

	)

1894 
	#DT_MIPS_NUM
 0x37

	)

1898 
	#RHF_NONE
 0

	)

1899 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1900 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1901 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1902 
	#RHF_NO_MOVE
 (1 << 3)

	)

1903 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1904 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1905 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1906 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1907 
	#RHF_PIXIE
 (1 << 8)

	)

1908 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1909 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1910 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1911 
	#RHF_CORD
 (1 << 12)

	)

1912 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1913 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1919 
Elf32_W‹d
 
	ml_«me
;

1920 
Elf32_W‹d
 
	ml_time_°amp
;

1921 
Elf32_W‹d
 
	ml_checksum
;

1922 
Elf32_W‹d
 
	ml_vîsi⁄
;

1923 
Elf32_W‹d
 
	ml_Êags
;

1924 } 
	tElf32_Lib
;

1928 
Elf64_W‹d
 
	ml_«me
;

1929 
Elf64_W‹d
 
	ml_time_°amp
;

1930 
Elf64_W‹d
 
	ml_checksum
;

1931 
Elf64_W‹d
 
	ml_vîsi⁄
;

1932 
Elf64_W‹d
 
	ml_Êags
;

1933 } 
	tElf64_Lib
;

1938 
	#LL_NONE
 0

	)

1939 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1940 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1941 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1942 
	#LL_EXPORTS
 (1 << 3)

	)

1943 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1944 
	#LL_DELTA
 (1 << 5)

	)

1948 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1953 
Elf32_HÆf
 
	mvîsi⁄
;

1955 
	miß_Àvñ
;

1957 
	miß_ªv
;

1959 
	mg¥_size
;

1961 
	m˝r1_size
;

1963 
	m˝r2_size
;

1965 
	mÂ_abi
;

1967 
Elf32_W‹d
 
	miß_ext
;

1969 
Elf32_W‹d
 
	ma£s
;

1971 
Elf32_W‹d
 
	mÊags1
;

1972 
Elf32_W‹d
 
	mÊags2
;

1973 } 
	tElf_MIPS_ABIFœgs_v0
;

1977 
	#MIPS_AFL_REG_NONE
 0x00

	)

1978 
	#MIPS_AFL_REG_32
 0x01

	)

1979 
	#MIPS_AFL_REG_64
 0x02

	)

1980 
	#MIPS_AFL_REG_128
 0x03

	)

1984 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1985 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1986 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1987 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1988 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1989 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1990 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1991 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1992 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1993 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1994 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1995 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1996 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1997 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

2001 
	#MIPS_AFL_EXT_XLR
 1

	)

2002 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

2003 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

2004 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

2005 
	#MIPS_AFL_EXT_OCTEON
 5

	)

2006 
	#MIPS_AFL_EXT_5900
 6

	)

2007 
	#MIPS_AFL_EXT_4650
 7

	)

2008 
	#MIPS_AFL_EXT_4010
 8

	)

2009 
	#MIPS_AFL_EXT_4100
 9

	)

2010 
	#MIPS_AFL_EXT_3900
 10

	)

2011 
	#MIPS_AFL_EXT_10000
 11

	)

2012 
	#MIPS_AFL_EXT_SB1
 12

	)

2013 
	#MIPS_AFL_EXT_4111
 13

	)

2014 
	#MIPS_AFL_EXT_4120
 14

	)

2015 
	#MIPS_AFL_EXT_5400
 15

	)

2016 
	#MIPS_AFL_EXT_5500
 16

	)

2017 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

2018 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

2021 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

2027 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2029 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2031 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2033 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2035 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2037 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2039 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2041 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2043 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2050 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2051 
	#EF_PARISC_EXT
 0x00020000

	)

2052 
	#EF_PARISC_LSB
 0x00040000

	)

2053 
	#EF_PARISC_WIDE
 0x00080000

	)

2054 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2056 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2057 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2061 
	#EFA_PARISC_1_0
 0x020b

	)

2062 
	#EFA_PARISC_1_1
 0x0210

	)

2063 
	#EFA_PARISC_2_0
 0x0214

	)

2067 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2069 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2073 
	#SHT_PARISC_EXT
 0x70000000

	)

2074 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2075 
	#SHT_PARISC_DOC
 0x70000002

	)

2079 
	#SHF_PARISC_SHORT
 0x20000000

	)

2080 
	#SHF_PARISC_HUGE
 0x40000000

	)

2081 
	#SHF_PARISC_SBP
 0x80000000

	)

2085 
	#STT_PARISC_MILLICODE
 13

	)

2087 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2088 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2092 
	#R_PARISC_NONE
 0

	)

2093 
	#R_PARISC_DIR32
 1

	)

2094 
	#R_PARISC_DIR21L
 2

	)

2095 
	#R_PARISC_DIR17R
 3

	)

2096 
	#R_PARISC_DIR17F
 4

	)

2097 
	#R_PARISC_DIR14R
 6

	)

2098 
	#R_PARISC_PCREL32
 9

	)

2099 
	#R_PARISC_PCREL21L
 10

	)

2100 
	#R_PARISC_PCREL17R
 11

	)

2101 
	#R_PARISC_PCREL17F
 12

	)

2102 
	#R_PARISC_PCREL14R
 14

	)

2103 
	#R_PARISC_DPREL21L
 18

	)

2104 
	#R_PARISC_DPREL14R
 22

	)

2105 
	#R_PARISC_GPREL21L
 26

	)

2106 
	#R_PARISC_GPREL14R
 30

	)

2107 
	#R_PARISC_LTOFF21L
 34

	)

2108 
	#R_PARISC_LTOFF14R
 38

	)

2109 
	#R_PARISC_SECREL32
 41

	)

2110 
	#R_PARISC_SEGBASE
 48

	)

2111 
	#R_PARISC_SEGREL32
 49

	)

2112 
	#R_PARISC_PLTOFF21L
 50

	)

2113 
	#R_PARISC_PLTOFF14R
 54

	)

2114 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2115 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2116 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2117 
	#R_PARISC_FPTR64
 64

	)

2118 
	#R_PARISC_PLABEL32
 65

	)

2119 
	#R_PARISC_PLABEL21L
 66

	)

2120 
	#R_PARISC_PLABEL14R
 70

	)

2121 
	#R_PARISC_PCREL64
 72

	)

2122 
	#R_PARISC_PCREL22F
 74

	)

2123 
	#R_PARISC_PCREL14WR
 75

	)

2124 
	#R_PARISC_PCREL14DR
 76

	)

2125 
	#R_PARISC_PCREL16F
 77

	)

2126 
	#R_PARISC_PCREL16WF
 78

	)

2127 
	#R_PARISC_PCREL16DF
 79

	)

2128 
	#R_PARISC_DIR64
 80

	)

2129 
	#R_PARISC_DIR14WR
 83

	)

2130 
	#R_PARISC_DIR14DR
 84

	)

2131 
	#R_PARISC_DIR16F
 85

	)

2132 
	#R_PARISC_DIR16WF
 86

	)

2133 
	#R_PARISC_DIR16DF
 87

	)

2134 
	#R_PARISC_GPREL64
 88

	)

2135 
	#R_PARISC_GPREL14WR
 91

	)

2136 
	#R_PARISC_GPREL14DR
 92

	)

2137 
	#R_PARISC_GPREL16F
 93

	)

2138 
	#R_PARISC_GPREL16WF
 94

	)

2139 
	#R_PARISC_GPREL16DF
 95

	)

2140 
	#R_PARISC_LTOFF64
 96

	)

2141 
	#R_PARISC_LTOFF14WR
 99

	)

2142 
	#R_PARISC_LTOFF14DR
 100

	)

2143 
	#R_PARISC_LTOFF16F
 101

	)

2144 
	#R_PARISC_LTOFF16WF
 102

	)

2145 
	#R_PARISC_LTOFF16DF
 103

	)

2146 
	#R_PARISC_SECREL64
 104

	)

2147 
	#R_PARISC_SEGREL64
 112

	)

2148 
	#R_PARISC_PLTOFF14WR
 115

	)

2149 
	#R_PARISC_PLTOFF14DR
 116

	)

2150 
	#R_PARISC_PLTOFF16F
 117

	)

2151 
	#R_PARISC_PLTOFF16WF
 118

	)

2152 
	#R_PARISC_PLTOFF16DF
 119

	)

2153 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2154 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2155 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2156 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2157 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2158 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2159 
	#R_PARISC_LORESERVE
 128

	)

2160 
	#R_PARISC_COPY
 128

	)

2161 
	#R_PARISC_IPLT
 129

	)

2162 
	#R_PARISC_EPLT
 130

	)

2163 
	#R_PARISC_TPREL32
 153

	)

2164 
	#R_PARISC_TPREL21L
 154

	)

2165 
	#R_PARISC_TPREL14R
 158

	)

2166 
	#R_PARISC_LTOFF_TP21L
 162

	)

2167 
	#R_PARISC_LTOFF_TP14R
 166

	)

2168 
	#R_PARISC_LTOFF_TP14F
 167

	)

2169 
	#R_PARISC_TPREL64
 216

	)

2170 
	#R_PARISC_TPREL14WR
 219

	)

2171 
	#R_PARISC_TPREL14DR
 220

	)

2172 
	#R_PARISC_TPREL16F
 221

	)

2173 
	#R_PARISC_TPREL16WF
 222

	)

2174 
	#R_PARISC_TPREL16DF
 223

	)

2175 
	#R_PARISC_LTOFF_TP64
 224

	)

2176 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2177 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2178 
	#R_PARISC_LTOFF_TP16F
 229

	)

2179 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2180 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2181 
	#R_PARISC_GNU_VTENTRY
 232

	)

2182 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2183 
	#R_PARISC_TLS_GD21L
 234

	)

2184 
	#R_PARISC_TLS_GD14R
 235

	)

2185 
	#R_PARISC_TLS_GDCALL
 236

	)

2186 
	#R_PARISC_TLS_LDM21L
 237

	)

2187 
	#R_PARISC_TLS_LDM14R
 238

	)

2188 
	#R_PARISC_TLS_LDMCALL
 239

	)

2189 
	#R_PARISC_TLS_LDO21L
 240

	)

2190 
	#R_PARISC_TLS_LDO14R
 241

	)

2191 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2192 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2193 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2194 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2195 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2196 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2197 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2198 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2199 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2200 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2201 
	#R_PARISC_HIRESERVE
 255

	)

2205 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2206 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2207 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2208 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2209 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2210 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2211 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2212 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2213 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2214 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2215 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2216 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2217 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2218 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2219 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2221 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2222 
	#PT_PARISC_UNWIND
 0x70000001

	)

2226 
	#PF_PARISC_SBP
 0x08000000

	)

2228 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2229 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2230 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2231 
	#PF_HP_CODE
 0x01000000

	)

2232 
	#PF_HP_MODIFY
 0x02000000

	)

2233 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2234 
	#PF_HP_SBP
 0x08000000

	)

2241 
	#EF_ALPHA_32BIT
 1

	)

2242 
	#EF_ALPHA_CANRELAX
 2

	)

2247 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2248 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2252 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2255 
	#STO_ALPHA_NOPV
 0x80

	)

2256 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2260 
	#R_ALPHA_NONE
 0

	)

2261 
	#R_ALPHA_REFLONG
 1

	)

2262 
	#R_ALPHA_REFQUAD
 2

	)

2263 
	#R_ALPHA_GPREL32
 3

	)

2264 
	#R_ALPHA_LITERAL
 4

	)

2265 
	#R_ALPHA_LITUSE
 5

	)

2266 
	#R_ALPHA_GPDISP
 6

	)

2267 
	#R_ALPHA_BRADDR
 7

	)

2268 
	#R_ALPHA_HINT
 8

	)

2269 
	#R_ALPHA_SREL16
 9

	)

2270 
	#R_ALPHA_SREL32
 10

	)

2271 
	#R_ALPHA_SREL64
 11

	)

2272 
	#R_ALPHA_GPRELHIGH
 17

	)

2273 
	#R_ALPHA_GPRELLOW
 18

	)

2274 
	#R_ALPHA_GPREL16
 19

	)

2275 
	#R_ALPHA_COPY
 24

	)

2276 
	#R_ALPHA_GLOB_DAT
 25

	)

2277 
	#R_ALPHA_JMP_SLOT
 26

	)

2278 
	#R_ALPHA_RELATIVE
 27

	)

2279 
	#R_ALPHA_TLS_GD_HI
 28

	)

2280 
	#R_ALPHA_TLSGD
 29

	)

2281 
	#R_ALPHA_TLS_LDM
 30

	)

2282 
	#R_ALPHA_DTPMOD64
 31

	)

2283 
	#R_ALPHA_GOTDTPREL
 32

	)

2284 
	#R_ALPHA_DTPREL64
 33

	)

2285 
	#R_ALPHA_DTPRELHI
 34

	)

2286 
	#R_ALPHA_DTPRELLO
 35

	)

2287 
	#R_ALPHA_DTPREL16
 36

	)

2288 
	#R_ALPHA_GOTTPREL
 37

	)

2289 
	#R_ALPHA_TPREL64
 38

	)

2290 
	#R_ALPHA_TPRELHI
 39

	)

2291 
	#R_ALPHA_TPRELLO
 40

	)

2292 
	#R_ALPHA_TPREL16
 41

	)

2294 
	#R_ALPHA_NUM
 46

	)

2297 
	#LITUSE_ALPHA_ADDR
 0

	)

2298 
	#LITUSE_ALPHA_BASE
 1

	)

2299 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2300 
	#LITUSE_ALPHA_JSR
 3

	)

2301 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2302 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2305 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2306 
	#DT_ALPHA_NUM
 1

	)

2311 
	#EF_PPC_EMB
 0x80000000

	)

2314 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2315 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2319 
	#R_PPC_NONE
 0

	)

2320 
	#R_PPC_ADDR32
 1

	)

2321 
	#R_PPC_ADDR24
 2

	)

2322 
	#R_PPC_ADDR16
 3

	)

2323 
	#R_PPC_ADDR16_LO
 4

	)

2324 
	#R_PPC_ADDR16_HI
 5

	)

2325 
	#R_PPC_ADDR16_HA
 6

	)

2326 
	#R_PPC_ADDR14
 7

	)

2327 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2328 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2329 
	#R_PPC_REL24
 10

	)

2330 
	#R_PPC_REL14
 11

	)

2331 
	#R_PPC_REL14_BRTAKEN
 12

	)

2332 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2333 
	#R_PPC_GOT16
 14

	)

2334 
	#R_PPC_GOT16_LO
 15

	)

2335 
	#R_PPC_GOT16_HI
 16

	)

2336 
	#R_PPC_GOT16_HA
 17

	)

2337 
	#R_PPC_PLTREL24
 18

	)

2338 
	#R_PPC_COPY
 19

	)

2339 
	#R_PPC_GLOB_DAT
 20

	)

2340 
	#R_PPC_JMP_SLOT
 21

	)

2341 
	#R_PPC_RELATIVE
 22

	)

2342 
	#R_PPC_LOCAL24PC
 23

	)

2343 
	#R_PPC_UADDR32
 24

	)

2344 
	#R_PPC_UADDR16
 25

	)

2345 
	#R_PPC_REL32
 26

	)

2346 
	#R_PPC_PLT32
 27

	)

2347 
	#R_PPC_PLTREL32
 28

	)

2348 
	#R_PPC_PLT16_LO
 29

	)

2349 
	#R_PPC_PLT16_HI
 30

	)

2350 
	#R_PPC_PLT16_HA
 31

	)

2351 
	#R_PPC_SDAREL16
 32

	)

2352 
	#R_PPC_SECTOFF
 33

	)

2353 
	#R_PPC_SECTOFF_LO
 34

	)

2354 
	#R_PPC_SECTOFF_HI
 35

	)

2355 
	#R_PPC_SECTOFF_HA
 36

	)

2358 
	#R_PPC_TLS
 67

	)

2359 
	#R_PPC_DTPMOD32
 68

	)

2360 
	#R_PPC_TPREL16
 69

	)

2361 
	#R_PPC_TPREL16_LO
 70

	)

2362 
	#R_PPC_TPREL16_HI
 71

	)

2363 
	#R_PPC_TPREL16_HA
 72

	)

2364 
	#R_PPC_TPREL32
 73

	)

2365 
	#R_PPC_DTPREL16
 74

	)

2366 
	#R_PPC_DTPREL16_LO
 75

	)

2367 
	#R_PPC_DTPREL16_HI
 76

	)

2368 
	#R_PPC_DTPREL16_HA
 77

	)

2369 
	#R_PPC_DTPREL32
 78

	)

2370 
	#R_PPC_GOT_TLSGD16
 79

	)

2371 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2372 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2373 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2374 
	#R_PPC_GOT_TLSLD16
 83

	)

2375 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2376 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2377 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2378 
	#R_PPC_GOT_TPREL16
 87

	)

2379 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2380 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2381 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2382 
	#R_PPC_GOT_DTPREL16
 91

	)

2383 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2384 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2385 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2386 
	#R_PPC_TLSGD
 95

	)

2387 
	#R_PPC_TLSLD
 96

	)

2391 
	#R_PPC_EMB_NADDR32
 101

	)

2392 
	#R_PPC_EMB_NADDR16
 102

	)

2393 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2394 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2395 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2396 
	#R_PPC_EMB_SDAI16
 106

	)

2397 
	#R_PPC_EMB_SDA2I16
 107

	)

2398 
	#R_PPC_EMB_SDA2REL
 108

	)

2399 
	#R_PPC_EMB_SDA21
 109

	)

2400 
	#R_PPC_EMB_MRKREF
 110

	)

2401 
	#R_PPC_EMB_RELSEC16
 111

	)

2402 
	#R_PPC_EMB_RELST_LO
 112

	)

2403 
	#R_PPC_EMB_RELST_HI
 113

	)

2404 
	#R_PPC_EMB_RELST_HA
 114

	)

2405 
	#R_PPC_EMB_BIT_FLD
 115

	)

2406 
	#R_PPC_EMB_RELSDA
 116

	)

2409 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2410 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2411 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2412 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2413 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2414 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2417 
	#R_PPC_IRELATIVE
 248

	)

2420 
	#R_PPC_REL16
 249

	)

2421 
	#R_PPC_REL16_LO
 250

	)

2422 
	#R_PPC_REL16_HI
 251

	)

2423 
	#R_PPC_REL16_HA
 252

	)

2427 
	#R_PPC_TOC16
 255

	)

2430 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2431 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2432 
	#DT_PPC_NUM
 2

	)

2435 
	#PPC_OPT_TLS
 1

	)

2438 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2439 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2440 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2441 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2442 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2443 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2444 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2445 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2446 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2447 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2448 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2449 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2450 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2451 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2452 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2453 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2454 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2455 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2457 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2458 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2459 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2460 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2462 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2463 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2464 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2465 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2466 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2467 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2468 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2469 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2471 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2472 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2473 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2474 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2475 
	#R_PPC64_ADDR30
 37

	)

2476 
	#R_PPC64_ADDR64
 38

	)

2477 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2478 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2479 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2480 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2481 
	#R_PPC64_UADDR64
 43

	)

2482 
	#R_PPC64_REL64
 44

	)

2483 
	#R_PPC64_PLT64
 45

	)

2484 
	#R_PPC64_PLTREL64
 46

	)

2485 
	#R_PPC64_TOC16
 47

	)

2486 
	#R_PPC64_TOC16_LO
 48

	)

2487 
	#R_PPC64_TOC16_HI
 49

	)

2488 
	#R_PPC64_TOC16_HA
 50

	)

2489 
	#R_PPC64_TOC
 51

	)

2490 
	#R_PPC64_PLTGOT16
 52

	)

2491 
	#R_PPC64_PLTGOT16_LO
 53

	)

2492 
	#R_PPC64_PLTGOT16_HI
 54

	)

2493 
	#R_PPC64_PLTGOT16_HA
 55

	)

2495 
	#R_PPC64_ADDR16_DS
 56

	)

2496 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2497 
	#R_PPC64_GOT16_DS
 58

	)

2498 
	#R_PPC64_GOT16_LO_DS
 59

	)

2499 
	#R_PPC64_PLT16_LO_DS
 60

	)

2500 
	#R_PPC64_SECTOFF_DS
 61

	)

2501 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2502 
	#R_PPC64_TOC16_DS
 63

	)

2503 
	#R_PPC64_TOC16_LO_DS
 64

	)

2504 
	#R_PPC64_PLTGOT16_DS
 65

	)

2505 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2508 
	#R_PPC64_TLS
 67

	)

2509 
	#R_PPC64_DTPMOD64
 68

	)

2510 
	#R_PPC64_TPREL16
 69

	)

2511 
	#R_PPC64_TPREL16_LO
 70

	)

2512 
	#R_PPC64_TPREL16_HI
 71

	)

2513 
	#R_PPC64_TPREL16_HA
 72

	)

2514 
	#R_PPC64_TPREL64
 73

	)

2515 
	#R_PPC64_DTPREL16
 74

	)

2516 
	#R_PPC64_DTPREL16_LO
 75

	)

2517 
	#R_PPC64_DTPREL16_HI
 76

	)

2518 
	#R_PPC64_DTPREL16_HA
 77

	)

2519 
	#R_PPC64_DTPREL64
 78

	)

2520 
	#R_PPC64_GOT_TLSGD16
 79

	)

2521 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2522 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2523 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2524 
	#R_PPC64_GOT_TLSLD16
 83

	)

2525 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2526 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2527 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2528 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2529 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2530 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2531 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2532 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2533 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2534 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2535 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2536 
	#R_PPC64_TPREL16_DS
 95

	)

2537 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2538 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2539 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2540 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2541 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2542 
	#R_PPC64_DTPREL16_DS
 101

	)

2543 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2544 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2545 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2546 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2547 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2548 
	#R_PPC64_TLSGD
 107

	)

2549 
	#R_PPC64_TLSLD
 108

	)

2550 
	#R_PPC64_TOCSAVE
 109

	)

2553 
	#R_PPC64_ADDR16_HIGH
 110

	)

2554 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2555 
	#R_PPC64_TPREL16_HIGH
 112

	)

2556 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2557 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2558 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2561 
	#R_PPC64_JMP_IREL
 247

	)

2562 
	#R_PPC64_IRELATIVE
 248

	)

2563 
	#R_PPC64_REL16
 249

	)

2564 
	#R_PPC64_REL16_LO
 250

	)

2565 
	#R_PPC64_REL16_HI
 251

	)

2566 
	#R_PPC64_REL16_HA
 252

	)

2572 
	#EF_PPC64_ABI
 3

	)

2575 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2576 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2577 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2578 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2579 
	#DT_PPC64_NUM
 4

	)

2582 
	#PPC64_OPT_TLS
 1

	)

2583 
	#PPC64_OPT_MULTI_TOC
 2

	)

2584 
	#PPC64_OPT_LOCALENTRY
 4

	)

2587 
	#STO_PPC64_LOCAL_BIT
 5

	)

2588 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2589 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2590 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2596 
	#EF_ARM_RELEXEC
 0x01

	)

2597 
	#EF_ARM_HASENTRY
 0x02

	)

2598 
	#EF_ARM_INTERWORK
 0x04

	)

2599 
	#EF_ARM_APCS_26
 0x08

	)

2600 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2601 
	#EF_ARM_PIC
 0x20

	)

2602 
	#EF_ARM_ALIGN8
 0x40

	)

2603 
	#EF_ARM_NEW_ABI
 0x80

	)

2604 
	#EF_ARM_OLD_ABI
 0x100

	)

2605 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2606 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2607 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2609 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2610 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2615 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2616 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2617 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2618 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2621 
	#EF_ARM_BE8
 0x00800000

	)

2622 
	#EF_ARM_LE8
 0x00400000

	)

2624 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2625 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2626 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2627 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2628 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2629 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2630 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2633 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2634 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2637 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2638 
	#SHF_ARM_COMDEF
 0x80000000

	)

2642 
	#PF_ARM_SB
 0x10000000

	)

2644 
	#PF_ARM_PI
 0x20000000

	)

2645 
	#PF_ARM_ABS
 0x40000000

	)

2648 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2651 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2652 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2653 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2658 
	#R_AARCH64_NONE
 0

	)

2661 
	#R_AARCH64_P32_ABS32
 1

	)

2662 
	#R_AARCH64_P32_COPY
 180

	)

2663 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2664 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2665 
	#R_AARCH64_P32_RELATIVE
 183

	)

2666 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2667 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2668 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2669 
	#R_AARCH64_P32_TLSDESC
 187

	)

2670 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2673 
	#R_AARCH64_ABS64
 257

	)

2674 
	#R_AARCH64_ABS32
 258

	)

2675 
	#R_AARCH64_ABS16
 259

	)

2676 
	#R_AARCH64_PREL64
 260

	)

2677 
	#R_AARCH64_PREL32
 261

	)

2678 
	#R_AARCH64_PREL16
 262

	)

2679 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2680 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2681 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2682 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2683 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2684 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2685 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2686 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2687 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2688 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2689 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2690 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2691 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2692 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2693 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2694 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2695 
	#R_AARCH64_TSTBR14
 279

	)

2696 
	#R_AARCH64_CONDBR19
 280

	)

2697 
	#R_AARCH64_JUMP26
 282

	)

2698 
	#R_AARCH64_CALL26
 283

	)

2699 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2700 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2701 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2702 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2703 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2704 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2705 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2706 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2707 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2708 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2709 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2710 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2711 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2712 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2713 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2714 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2715 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2716 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2717 
	#R_AARCH64_GOTREL64
 307

	)

2718 
	#R_AARCH64_GOTREL32
 308

	)

2719 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2720 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2721 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2722 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2723 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2724 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2725 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2726 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2727 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2728 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2729 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2730 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2731 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2732 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2733 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2734 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2735 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2736 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2737 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2738 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2739 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2740 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2741 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2742 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2743 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2744 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2745 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2746 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2747 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2748 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2749 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2750 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2751 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2752 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2753 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2754 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2755 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2756 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2757 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2758 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2759 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2760 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2761 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2762 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2763 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2764 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2765 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2766 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2767 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2768 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2769 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2770 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2771 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2772 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2773 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2774 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2775 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2776 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2777 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2778 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2779 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2780 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2781 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2782 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2783 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2784 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2785 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2786 
	#R_AARCH64_COPY
 1024

	)

2787 
	#R_AARCH64_GLOB_DAT
 1025

	)

2788 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2789 
	#R_AARCH64_RELATIVE
 1027

	)

2790 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2791 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2792 
	#R_AARCH64_TLS_TPREL
 1030

	)

2793 
	#R_AARCH64_TLSDESC
 1031

	)

2794 
	#R_AARCH64_IRELATIVE
 1032

	)

2797 
	#DT_AARCH64_VARIANT_PCS
 (
DT_LOPROC
 + 5)

	)

2798 
	#DT_AARCH64_NUM
 6

	)

2801 
	#STO_AARCH64_VARIANT_PCS
 0x80

	)

2805 
	#R_ARM_NONE
 0

	)

2806 
	#R_ARM_PC24
 1

	)

2808 
	#R_ARM_ABS32
 2

	)

2809 
	#R_ARM_REL32
 3

	)

2810 
	#R_ARM_PC13
 4

	)

2811 
	#R_ARM_ABS16
 5

	)

2812 
	#R_ARM_ABS12
 6

	)

2813 
	#R_ARM_THM_ABS5
 7

	)

2814 
	#R_ARM_ABS8
 8

	)

2815 
	#R_ARM_SBREL32
 9

	)

2816 
	#R_ARM_THM_PC22
 10

	)

2817 
	#R_ARM_THM_PC8
 11

	)

2819 
	#R_ARM_AMP_VCALL9
 12

	)

2820 
	#R_ARM_SWI24
 13

	)

2821 
	#R_ARM_TLS_DESC
 13

	)

2822 
	#R_ARM_THM_SWI8
 14

	)

2823 
	#R_ARM_XPC25
 15

	)

2824 
	#R_ARM_THM_XPC22
 16

	)

2825 
	#R_ARM_TLS_DTPMOD32
 17

	)

2826 
	#R_ARM_TLS_DTPOFF32
 18

	)

2827 
	#R_ARM_TLS_TPOFF32
 19

	)

2828 
	#R_ARM_COPY
 20

	)

2829 
	#R_ARM_GLOB_DAT
 21

	)

2830 
	#R_ARM_JUMP_SLOT
 22

	)

2831 
	#R_ARM_RELATIVE
 23

	)

2832 
	#R_ARM_GOTOFF
 24

	)

2833 
	#R_ARM_GOTPC
 25

	)

2834 
	#R_ARM_GOT32
 26

	)

2835 
	#R_ARM_PLT32
 27

	)

2836 
	#R_ARM_CALL
 28

	)

2837 
	#R_ARM_JUMP24
 29

	)

2839 
	#R_ARM_THM_JUMP24
 30

	)

2840 
	#R_ARM_BASE_ABS
 31

	)

2841 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2842 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2843 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2844 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2845 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2846 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2847 
	#R_ARM_TARGET1
 38

	)

2848 
	#R_ARM_SBREL31
 39

	)

2849 
	#R_ARM_V4BX
 40

	)

2850 
	#R_ARM_TARGET2
 41

	)

2851 
	#R_ARM_PREL31
 42

	)

2852 
	#R_ARM_MOVW_ABS_NC
 43

	)

2853 
	#R_ARM_MOVT_ABS
 44

	)

2854 
	#R_ARM_MOVW_PREL_NC
 45

	)

2855 
	#R_ARM_MOVT_PREL
 46

	)

2856 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2857 
	#R_ARM_THM_MOVT_ABS
 48

	)

2859 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2861 
	#R_ARM_THM_MOVT_PREL
 50

	)

2863 
	#R_ARM_THM_JUMP19
 51

	)

2865 
	#R_ARM_THM_JUMP6
 52

	)

2867 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2869 
	#R_ARM_THM_PC12
 54

	)

2871 
	#R_ARM_ABS32_NOI
 55

	)

2872 
	#R_ARM_REL32_NOI
 56

	)

2873 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2874 
	#R_ARM_ALU_PC_G0
 58

	)

2875 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2876 
	#R_ARM_ALU_PC_G1
 60

	)

2877 
	#R_ARM_ALU_PC_G2
 61

	)

2878 
	#R_ARM_LDR_PC_G1
 62

	)

2879 
	#R_ARM_LDR_PC_G2
 63

	)

2880 
	#R_ARM_LDRS_PC_G0
 64

	)

2882 
	#R_ARM_LDRS_PC_G1
 65

	)

2884 
	#R_ARM_LDRS_PC_G2
 66

	)

2886 
	#R_ARM_LDC_PC_G0
 67

	)

2887 
	#R_ARM_LDC_PC_G1
 68

	)

2888 
	#R_ARM_LDC_PC_G2
 69

	)

2889 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2890 
	#R_ARM_ALU_SB_G0
 71

	)

2891 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2892 
	#R_ARM_ALU_SB_G1
 73

	)

2893 
	#R_ARM_ALU_SB_G2
 74

	)

2894 
	#R_ARM_LDR_SB_G0
 75

	)

2896 
	#R_ARM_LDR_SB_G1
 76

	)

2898 
	#R_ARM_LDR_SB_G2
 77

	)

2900 
	#R_ARM_LDRS_SB_G0
 78

	)

2902 
	#R_ARM_LDRS_SB_G1
 79

	)

2904 
	#R_ARM_LDRS_SB_G2
 80

	)

2906 
	#R_ARM_LDC_SB_G0
 81

	)

2907 
	#R_ARM_LDC_SB_G1
 82

	)

2908 
	#R_ARM_LDC_SB_G2
 83

	)

2909 
	#R_ARM_MOVW_BREL_NC
 84

	)

2911 
	#R_ARM_MOVT_BREL
 85

	)

2913 
	#R_ARM_MOVW_BREL
 86

	)

2915 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2917 
	#R_ARM_THM_MOVT_BREL
 88

	)

2919 
	#R_ARM_THM_MOVW_BREL
 89

	)

2921 
	#R_ARM_TLS_GOTDESC
 90

	)

2922 
	#R_ARM_TLS_CALL
 91

	)

2923 
	#R_ARM_TLS_DESCSEQ
 92

	)

2924 
	#R_ARM_THM_TLS_CALL
 93

	)

2925 
	#R_ARM_PLT32_ABS
 94

	)

2926 
	#R_ARM_GOT_ABS
 95

	)

2927 
	#R_ARM_GOT_PREL
 96

	)

2928 
	#R_ARM_GOT_BREL12
 97

	)

2930 
	#R_ARM_GOTOFF12
 98

	)

2932 
	#R_ARM_GOTRELAX
 99

	)

2933 
	#R_ARM_GNU_VTENTRY
 100

	)

2934 
	#R_ARM_GNU_VTINHERIT
 101

	)

2935 
	#R_ARM_THM_PC11
 102

	)

2936 
	#R_ARM_THM_PC9
 103

	)

2938 
	#R_ARM_TLS_GD32
 104

	)

2940 
	#R_ARM_TLS_LDM32
 105

	)

2942 
	#R_ARM_TLS_LDO32
 106

	)

2944 
	#R_ARM_TLS_IE32
 107

	)

2946 
	#R_ARM_TLS_LE32
 108

	)

2948 
	#R_ARM_TLS_LDO12
 109

	)

2950 
	#R_ARM_TLS_LE12
 110

	)

2952 
	#R_ARM_TLS_IE12GP
 111

	)

2954 
	#R_ARM_ME_TOO
 128

	)

2955 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2956 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2957 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2958 
	#R_ARM_THM_GOT_BREL12
 131

	)

2960 
	#R_ARM_IRELATIVE
 160

	)

2961 
	#R_ARM_RXPC25
 249

	)

2962 
	#R_ARM_RSBREL32
 250

	)

2963 
	#R_ARM_THM_RPC22
 251

	)

2964 
	#R_ARM_RREL32
 252

	)

2965 
	#R_ARM_RABS22
 253

	)

2966 
	#R_ARM_RPC24
 254

	)

2967 
	#R_ARM_RBASE
 255

	)

2969 
	#R_ARM_NUM
 256

	)

2972 
	#R_CKCORE_NONE
 0

	)

2973 
	#R_CKCORE_ADDR32
 1

	)

2974 
	#R_CKCORE_PCRELIMM8BY4
 2

	)

2975 
	#R_CKCORE_PCRELIMM11BY2
 3

	)

2976 
	#R_CKCORE_PCREL32
 5

	)

2977 
	#R_CKCORE_PCRELJSR_IMM11BY2
 6

	)

2978 
	#R_CKCORE_RELATIVE
 9

	)

2979 
	#R_CKCORE_COPY
 10

	)

2980 
	#R_CKCORE_GLOB_DAT
 11

	)

2981 
	#R_CKCORE_JUMP_SLOT
 12

	)

2982 
	#R_CKCORE_GOTOFF
 13

	)

2983 
	#R_CKCORE_GOTPC
 14

	)

2984 
	#R_CKCORE_GOT32
 15

	)

2985 
	#R_CKCORE_PLT32
 16

	)

2986 
	#R_CKCORE_ADDRGOT
 17

	)

2987 
	#R_CKCORE_ADDRPLT
 18

	)

2988 
	#R_CKCORE_PCREL_IMM26BY2
 19

	)

2989 
	#R_CKCORE_PCREL_IMM16BY2
 20

	)

2990 
	#R_CKCORE_PCREL_IMM16BY4
 21

	)

2991 
	#R_CKCORE_PCREL_IMM10BY2
 22

	)

2992 
	#R_CKCORE_PCREL_IMM10BY4
 23

	)

2993 
	#R_CKCORE_ADDR_HI16
 24

	)

2995 
	#R_CKCORE_ADDR_LO16
 25

	)

2996 
	#R_CKCORE_GOTPC_HI16
 26

	)

2998 
	#R_CKCORE_GOTPC_LO16
 27

	)

2999 
	#R_CKCORE_GOTOFF_HI16
 28

	)

3001 
	#R_CKCORE_GOTOFF_LO16
 29

	)

3002 
	#R_CKCORE_GOT12
 30

	)

3003 
	#R_CKCORE_GOT_HI16
 31

	)

3005 
	#R_CKCORE_GOT_LO16
 32

	)

3006 
	#R_CKCORE_PLT12
 33

	)

3007 
	#R_CKCORE_PLT_HI16
 34

	)

3009 
	#R_CKCORE_PLT_LO16
 35

	)

3010 
	#R_CKCORE_ADDRGOT_HI16
 36

	)

3012 
	#R_CKCORE_ADDRGOT_LO16
 37

	)

3013 
	#R_CKCORE_ADDRPLT_HI16
 38

	)

3015 
	#R_CKCORE_ADDRPLT_LO16
 39

	)

3016 
	#R_CKCORE_PCREL_JSR_IMM26BY2
 40

	)

3017 
	#R_CKCORE_TOFFSET_LO16
 41

	)

3018 
	#R_CKCORE_DOFFSET_LO16
 42

	)

3019 
	#R_CKCORE_PCREL_IMM18BY2
 43

	)

3020 
	#R_CKCORE_DOFFSET_IMM18
 44

	)

3021 
	#R_CKCORE_DOFFSET_IMM18BY2
 45

	)

3022 
	#R_CKCORE_DOFFSET_IMM18BY4
 46

	)

3023 
	#R_CKCORE_GOT_IMM18BY4
 48

	)

3024 
	#R_CKCORE_PLT_IMM18BY4
 49

	)

3025 
	#R_CKCORE_PCREL_IMM7BY4
 50

	)

3026 
	#R_CKCORE_TLS_LE32
 51

	)

3027 
	#R_CKCORE_TLS_IE32
 52

	)

3028 
	#R_CKCORE_TLS_GD32
 53

	)

3029 
	#R_CKCORE_TLS_LDM32
 54

	)

3030 
	#R_CKCORE_TLS_LDO32
 55

	)

3031 
	#R_CKCORE_TLS_DTPMOD32
 56

	)

3032 
	#R_CKCORE_TLS_DTPOFF32
 57

	)

3033 
	#R_CKCORE_TLS_TPOFF32
 58

	)

3036 
	#EF_CSKY_ABIMASK
 0XF0000000

	)

3037 
	#EF_CSKY_OTHER
 0X0FFF0000

	)

3038 
	#EF_CSKY_PROCESSOR
 0X0000FFFF

	)

3040 
	#EF_CSKY_ABIV1
 0X10000000

	)

3041 
	#EF_CSKY_ABIV2
 0X20000000

	)

3044 
	#SHT_CSKY_ATTRIBUTES
 (
SHT_LOPROC
 + 1)

	)

3049 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

3050 
	#EF_IA_64_ABI64
 0x00000010

	)

3051 
	#EF_IA_64_ARCH
 0xff000000

	)

3054 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

3055 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

3056 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

3057 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

3058 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

3061 
	#PF_IA_64_NORECOV
 0x80000000

	)

3064 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

3065 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

3068 
	#SHF_IA_64_SHORT
 0x10000000

	)

3069 
	#SHF_IA_64_NORECOV
 0x20000000

	)

3072 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

3073 
	#DT_IA_64_NUM
 1

	)

3076 
	#R_IA64_NONE
 0x00

	)

3077 
	#R_IA64_IMM14
 0x21

	)

3078 
	#R_IA64_IMM22
 0x22

	)

3079 
	#R_IA64_IMM64
 0x23

	)

3080 
	#R_IA64_DIR32MSB
 0x24

	)

3081 
	#R_IA64_DIR32LSB
 0x25

	)

3082 
	#R_IA64_DIR64MSB
 0x26

	)

3083 
	#R_IA64_DIR64LSB
 0x27

	)

3084 
	#R_IA64_GPREL22
 0x2®

	)

3085 
	#R_IA64_GPREL64I
 0x2b

	)

3086 
	#R_IA64_GPREL32MSB
 0x2¯

	)

3087 
	#R_IA64_GPREL32LSB
 0x2d

	)

3088 
	#R_IA64_GPREL64MSB
 0x2ê

	)

3089 
	#R_IA64_GPREL64LSB
 0x2‡

	)

3090 
	#R_IA64_LTOFF22
 0x32

	)

3091 
	#R_IA64_LTOFF64I
 0x33

	)

3092 
	#R_IA64_PLTOFF22
 0x3®

	)

3093 
	#R_IA64_PLTOFF64I
 0x3b

	)

3094 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

3095 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

3096 
	#R_IA64_FPTR64I
 0x43

	)

3097 
	#R_IA64_FPTR32MSB
 0x44

	)

3098 
	#R_IA64_FPTR32LSB
 0x45

	)

3099 
	#R_IA64_FPTR64MSB
 0x46

	)

3100 
	#R_IA64_FPTR64LSB
 0x47

	)

3101 
	#R_IA64_PCREL60B
 0x48

	)

3102 
	#R_IA64_PCREL21B
 0x49

	)

3103 
	#R_IA64_PCREL21M
 0x4®

	)

3104 
	#R_IA64_PCREL21F
 0x4b

	)

3105 
	#R_IA64_PCREL32MSB
 0x4¯

	)

3106 
	#R_IA64_PCREL32LSB
 0x4d

	)

3107 
	#R_IA64_PCREL64MSB
 0x4ê

	)

3108 
	#R_IA64_PCREL64LSB
 0x4‡

	)

3109 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

3110 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3111 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3112 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3113 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3114 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3115 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3116 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3117 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3118 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3119 
	#R_IA64_SECREL32MSB
 0x64

	)

3120 
	#R_IA64_SECREL32LSB
 0x65

	)

3121 
	#R_IA64_SECREL64MSB
 0x66

	)

3122 
	#R_IA64_SECREL64LSB
 0x67

	)

3123 
	#R_IA64_REL32MSB
 0x6¯

	)

3124 
	#R_IA64_REL32LSB
 0x6d

	)

3125 
	#R_IA64_REL64MSB
 0x6ê

	)

3126 
	#R_IA64_REL64LSB
 0x6‡

	)

3127 
	#R_IA64_LTV32MSB
 0x74

	)

3128 
	#R_IA64_LTV32LSB
 0x75

	)

3129 
	#R_IA64_LTV64MSB
 0x76

	)

3130 
	#R_IA64_LTV64LSB
 0x77

	)

3131 
	#R_IA64_PCREL21BI
 0x79

	)

3132 
	#R_IA64_PCREL22
 0x7®

	)

3133 
	#R_IA64_PCREL64I
 0x7b

	)

3134 
	#R_IA64_IPLTMSB
 0x80

	)

3135 
	#R_IA64_IPLTLSB
 0x81

	)

3136 
	#R_IA64_COPY
 0x84

	)

3137 
	#R_IA64_SUB
 0x85

	)

3138 
	#R_IA64_LTOFF22X
 0x86

	)

3139 
	#R_IA64_LDXMOV
 0x87

	)

3140 
	#R_IA64_TPREL14
 0x91

	)

3141 
	#R_IA64_TPREL22
 0x92

	)

3142 
	#R_IA64_TPREL64I
 0x93

	)

3143 
	#R_IA64_TPREL64MSB
 0x96

	)

3144 
	#R_IA64_TPREL64LSB
 0x97

	)

3145 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3146 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3147 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3148 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3149 
	#R_IA64_DTPREL14
 0xb1

	)

3150 
	#R_IA64_DTPREL22
 0xb2

	)

3151 
	#R_IA64_DTPREL64I
 0xb3

	)

3152 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3153 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3154 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3155 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3156 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3161 
	#EF_SH_MACH_MASK
 0x1f

	)

3162 
	#EF_SH_UNKNOWN
 0x0

	)

3163 
	#EF_SH1
 0x1

	)

3164 
	#EF_SH2
 0x2

	)

3165 
	#EF_SH3
 0x3

	)

3166 
	#EF_SH_DSP
 0x4

	)

3167 
	#EF_SH3_DSP
 0x5

	)

3168 
	#EF_SH4AL_DSP
 0x6

	)

3169 
	#EF_SH3E
 0x8

	)

3170 
	#EF_SH4
 0x9

	)

3171 
	#EF_SH2E
 0xb

	)

3172 
	#EF_SH4A
 0xc

	)

3173 
	#EF_SH2A
 0xd

	)

3174 
	#EF_SH4_NOFPU
 0x10

	)

3175 
	#EF_SH4A_NOFPU
 0x11

	)

3176 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3177 
	#EF_SH2A_NOFPU
 0x13

	)

3178 
	#EF_SH3_NOMMU
 0x14

	)

3179 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3180 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3181 
	#EF_SH2A_SH4
 0x17

	)

3182 
	#EF_SH2A_SH3E
 0x18

	)

3185 
	#R_SH_NONE
 0

	)

3186 
	#R_SH_DIR32
 1

	)

3187 
	#R_SH_REL32
 2

	)

3188 
	#R_SH_DIR8WPN
 3

	)

3189 
	#R_SH_IND12W
 4

	)

3190 
	#R_SH_DIR8WPL
 5

	)

3191 
	#R_SH_DIR8WPZ
 6

	)

3192 
	#R_SH_DIR8BP
 7

	)

3193 
	#R_SH_DIR8W
 8

	)

3194 
	#R_SH_DIR8L
 9

	)

3195 
	#R_SH_SWITCH16
 25

	)

3196 
	#R_SH_SWITCH32
 26

	)

3197 
	#R_SH_USES
 27

	)

3198 
	#R_SH_COUNT
 28

	)

3199 
	#R_SH_ALIGN
 29

	)

3200 
	#R_SH_CODE
 30

	)

3201 
	#R_SH_DATA
 31

	)

3202 
	#R_SH_LABEL
 32

	)

3203 
	#R_SH_SWITCH8
 33

	)

3204 
	#R_SH_GNU_VTINHERIT
 34

	)

3205 
	#R_SH_GNU_VTENTRY
 35

	)

3206 
	#R_SH_TLS_GD_32
 144

	)

3207 
	#R_SH_TLS_LD_32
 145

	)

3208 
	#R_SH_TLS_LDO_32
 146

	)

3209 
	#R_SH_TLS_IE_32
 147

	)

3210 
	#R_SH_TLS_LE_32
 148

	)

3211 
	#R_SH_TLS_DTPMOD32
 149

	)

3212 
	#R_SH_TLS_DTPOFF32
 150

	)

3213 
	#R_SH_TLS_TPOFF32
 151

	)

3214 
	#R_SH_GOT32
 160

	)

3215 
	#R_SH_PLT32
 161

	)

3216 
	#R_SH_COPY
 162

	)

3217 
	#R_SH_GLOB_DAT
 163

	)

3218 
	#R_SH_JMP_SLOT
 164

	)

3219 
	#R_SH_RELATIVE
 165

	)

3220 
	#R_SH_GOTOFF
 166

	)

3221 
	#R_SH_GOTPC
 167

	)

3223 
	#R_SH_NUM
 256

	)

3229 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3233 
	#R_390_NONE
 0

	)

3234 
	#R_390_8
 1

	)

3235 
	#R_390_12
 2

	)

3236 
	#R_390_16
 3

	)

3237 
	#R_390_32
 4

	)

3238 
	#R_390_PC32
 5

	)

3239 
	#R_390_GOT12
 6

	)

3240 
	#R_390_GOT32
 7

	)

3241 
	#R_390_PLT32
 8

	)

3242 
	#R_390_COPY
 9

	)

3243 
	#R_390_GLOB_DAT
 10

	)

3244 
	#R_390_JMP_SLOT
 11

	)

3245 
	#R_390_RELATIVE
 12

	)

3246 
	#R_390_GOTOFF32
 13

	)

3247 
	#R_390_GOTPC
 14

	)

3248 
	#R_390_GOT16
 15

	)

3249 
	#R_390_PC16
 16

	)

3250 
	#R_390_PC16DBL
 17

	)

3251 
	#R_390_PLT16DBL
 18

	)

3252 
	#R_390_PC32DBL
 19

	)

3253 
	#R_390_PLT32DBL
 20

	)

3254 
	#R_390_GOTPCDBL
 21

	)

3255 
	#R_390_64
 22

	)

3256 
	#R_390_PC64
 23

	)

3257 
	#R_390_GOT64
 24

	)

3258 
	#R_390_PLT64
 25

	)

3259 
	#R_390_GOTENT
 26

	)

3260 
	#R_390_GOTOFF16
 27

	)

3261 
	#R_390_GOTOFF64
 28

	)

3262 
	#R_390_GOTPLT12
 29

	)

3263 
	#R_390_GOTPLT16
 30

	)

3264 
	#R_390_GOTPLT32
 31

	)

3265 
	#R_390_GOTPLT64
 32

	)

3266 
	#R_390_GOTPLTENT
 33

	)

3267 
	#R_390_PLTOFF16
 34

	)

3268 
	#R_390_PLTOFF32
 35

	)

3269 
	#R_390_PLTOFF64
 36

	)

3270 
	#R_390_TLS_LOAD
 37

	)

3271 
	#R_390_TLS_GDCALL
 38

	)

3273 
	#R_390_TLS_LDCALL
 39

	)

3275 
	#R_390_TLS_GD32
 40

	)

3277 
	#R_390_TLS_GD64
 41

	)

3279 
	#R_390_TLS_GOTIE12
 42

	)

3281 
	#R_390_TLS_GOTIE32
 43

	)

3283 
	#R_390_TLS_GOTIE64
 44

	)

3285 
	#R_390_TLS_LDM32
 45

	)

3287 
	#R_390_TLS_LDM64
 46

	)

3289 
	#R_390_TLS_IE32
 47

	)

3291 
	#R_390_TLS_IE64
 48

	)

3293 
	#R_390_TLS_IEENT
 49

	)

3295 
	#R_390_TLS_LE32
 50

	)

3297 
	#R_390_TLS_LE64
 51

	)

3299 
	#R_390_TLS_LDO32
 52

	)

3301 
	#R_390_TLS_LDO64
 53

	)

3303 
	#R_390_TLS_DTPMOD
 54

	)

3304 
	#R_390_TLS_DTPOFF
 55

	)

3305 
	#R_390_TLS_TPOFF
 56

	)

3307 
	#R_390_20
 57

	)

3308 
	#R_390_GOT20
 58

	)

3309 
	#R_390_GOTPLT20
 59

	)

3310 
	#R_390_TLS_GOTIE20
 60

	)

3312 
	#R_390_IRELATIVE
 61

	)

3314 
	#R_390_NUM
 62

	)

3318 
	#R_CRIS_NONE
 0

	)

3319 
	#R_CRIS_8
 1

	)

3320 
	#R_CRIS_16
 2

	)

3321 
	#R_CRIS_32
 3

	)

3322 
	#R_CRIS_8_PCREL
 4

	)

3323 
	#R_CRIS_16_PCREL
 5

	)

3324 
	#R_CRIS_32_PCREL
 6

	)

3325 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3326 
	#R_CRIS_GNU_VTENTRY
 8

	)

3327 
	#R_CRIS_COPY
 9

	)

3328 
	#R_CRIS_GLOB_DAT
 10

	)

3329 
	#R_CRIS_JUMP_SLOT
 11

	)

3330 
	#R_CRIS_RELATIVE
 12

	)

3331 
	#R_CRIS_16_GOT
 13

	)

3332 
	#R_CRIS_32_GOT
 14

	)

3333 
	#R_CRIS_16_GOTPLT
 15

	)

3334 
	#R_CRIS_32_GOTPLT
 16

	)

3335 
	#R_CRIS_32_GOTREL
 17

	)

3336 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3337 
	#R_CRIS_32_PLT_PCREL
 19

	)

3339 
	#R_CRIS_NUM
 20

	)

3343 
	#R_X86_64_NONE
 0

	)

3344 
	#R_X86_64_64
 1

	)

3345 
	#R_X86_64_PC32
 2

	)

3346 
	#R_X86_64_GOT32
 3

	)

3347 
	#R_X86_64_PLT32
 4

	)

3348 
	#R_X86_64_COPY
 5

	)

3349 
	#R_X86_64_GLOB_DAT
 6

	)

3350 
	#R_X86_64_JUMP_SLOT
 7

	)

3351 
	#R_X86_64_RELATIVE
 8

	)

3352 
	#R_X86_64_GOTPCREL
 9

	)

3354 
	#R_X86_64_32
 10

	)

3355 
	#R_X86_64_32S
 11

	)

3356 
	#R_X86_64_16
 12

	)

3357 
	#R_X86_64_PC16
 13

	)

3358 
	#R_X86_64_8
 14

	)

3359 
	#R_X86_64_PC8
 15

	)

3360 
	#R_X86_64_DTPMOD64
 16

	)

3361 
	#R_X86_64_DTPOFF64
 17

	)

3362 
	#R_X86_64_TPOFF64
 18

	)

3363 
	#R_X86_64_TLSGD
 19

	)

3365 
	#R_X86_64_TLSLD
 20

	)

3367 
	#R_X86_64_DTPOFF32
 21

	)

3368 
	#R_X86_64_GOTTPOFF
 22

	)

3370 
	#R_X86_64_TPOFF32
 23

	)

3371 
	#R_X86_64_PC64
 24

	)

3372 
	#R_X86_64_GOTOFF64
 25

	)

3373 
	#R_X86_64_GOTPC32
 26

	)

3375 
	#R_X86_64_GOT64
 27

	)

3376 
	#R_X86_64_GOTPCREL64
 28

	)

3378 
	#R_X86_64_GOTPC64
 29

	)

3379 
	#R_X86_64_GOTPLT64
 30

	)

3380 
	#R_X86_64_PLTOFF64
 31

	)

3382 
	#R_X86_64_SIZE32
 32

	)

3383 
	#R_X86_64_SIZE64
 33

	)

3384 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3385 
	#R_X86_64_TLSDESC_CALL
 35

	)

3387 
	#R_X86_64_TLSDESC
 36

	)

3388 
	#R_X86_64_IRELATIVE
 37

	)

3389 
	#R_X86_64_RELATIVE64
 38

	)

3392 
	#R_X86_64_GOTPCRELX
 41

	)

3395 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3398 
	#R_X86_64_NUM
 43

	)

3401 
	#SHT_X86_64_UNWIND
 0x70000001

	)

3405 
	#R_MN10300_NONE
 0

	)

3406 
	#R_MN10300_32
 1

	)

3407 
	#R_MN10300_16
 2

	)

3408 
	#R_MN10300_8
 3

	)

3409 
	#R_MN10300_PCREL32
 4

	)

3410 
	#R_MN10300_PCREL16
 5

	)

3411 
	#R_MN10300_PCREL8
 6

	)

3412 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3413 
	#R_MN10300_GNU_VTENTRY
 8

	)

3414 
	#R_MN10300_24
 9

	)

3415 
	#R_MN10300_GOTPC32
 10

	)

3416 
	#R_MN10300_GOTPC16
 11

	)

3417 
	#R_MN10300_GOTOFF32
 12

	)

3418 
	#R_MN10300_GOTOFF24
 13

	)

3419 
	#R_MN10300_GOTOFF16
 14

	)

3420 
	#R_MN10300_PLT32
 15

	)

3421 
	#R_MN10300_PLT16
 16

	)

3422 
	#R_MN10300_GOT32
 17

	)

3423 
	#R_MN10300_GOT24
 18

	)

3424 
	#R_MN10300_GOT16
 19

	)

3425 
	#R_MN10300_COPY
 20

	)

3426 
	#R_MN10300_GLOB_DAT
 21

	)

3427 
	#R_MN10300_JMP_SLOT
 22

	)

3428 
	#R_MN10300_RELATIVE
 23

	)

3429 
	#R_MN10300_TLS_GD
 24

	)

3430 
	#R_MN10300_TLS_LD
 25

	)

3431 
	#R_MN10300_TLS_LDO
 26

	)

3432 
	#R_MN10300_TLS_GOTIE
 27

	)

3434 
	#R_MN10300_TLS_IE
 28

	)

3436 
	#R_MN10300_TLS_LE
 29

	)

3438 
	#R_MN10300_TLS_DTPMOD
 30

	)

3439 
	#R_MN10300_TLS_DTPOFF
 31

	)

3440 
	#R_MN10300_TLS_TPOFF
 32

	)

3441 
	#R_MN10300_SYM_DIFF
 33

	)

3443 
	#R_MN10300_ALIGN
 34

	)

3445 
	#R_MN10300_NUM
 35

	)

3449 
	#R_M32R_NONE
 0

	)

3450 
	#R_M32R_16
 1

	)

3451 
	#R_M32R_32
 2

	)

3452 
	#R_M32R_24
 3

	)

3453 
	#R_M32R_10_PCREL
 4

	)

3454 
	#R_M32R_18_PCREL
 5

	)

3455 
	#R_M32R_26_PCREL
 6

	)

3456 
	#R_M32R_HI16_ULO
 7

	)

3457 
	#R_M32R_HI16_SLO
 8

	)

3458 
	#R_M32R_LO16
 9

	)

3459 
	#R_M32R_SDA16
 10

	)

3460 
	#R_M32R_GNU_VTINHERIT
 11

	)

3461 
	#R_M32R_GNU_VTENTRY
 12

	)

3463 
	#R_M32R_16_RELA
 33

	)

3464 
	#R_M32R_32_RELA
 34

	)

3465 
	#R_M32R_24_RELA
 35

	)

3466 
	#R_M32R_10_PCREL_RELA
 36

	)

3467 
	#R_M32R_18_PCREL_RELA
 37

	)

3468 
	#R_M32R_26_PCREL_RELA
 38

	)

3469 
	#R_M32R_HI16_ULO_RELA
 39

	)

3470 
	#R_M32R_HI16_SLO_RELA
 40

	)

3471 
	#R_M32R_LO16_RELA
 41

	)

3472 
	#R_M32R_SDA16_RELA
 42

	)

3473 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3474 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3475 
	#R_M32R_REL32
 45

	)

3477 
	#R_M32R_GOT24
 48

	)

3478 
	#R_M32R_26_PLTREL
 49

	)

3479 
	#R_M32R_COPY
 50

	)

3480 
	#R_M32R_GLOB_DAT
 51

	)

3481 
	#R_M32R_JMP_SLOT
 52

	)

3482 
	#R_M32R_RELATIVE
 53

	)

3483 
	#R_M32R_GOTOFF
 54

	)

3484 
	#R_M32R_GOTPC24
 55

	)

3485 
	#R_M32R_GOT16_HI_ULO
 56

	)

3487 
	#R_M32R_GOT16_HI_SLO
 57

	)

3489 
	#R_M32R_GOT16_LO
 58

	)

3490 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3492 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3494 
	#R_M32R_GOTPC_LO
 61

	)

3496 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3498 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3500 
	#R_M32R_GOTOFF_LO
 64

	)

3501 
	#R_M32R_NUM
 256

	)

3504 
	#R_MICROBLAZE_NONE
 0

	)

3505 
	#R_MICROBLAZE_32
 1

	)

3506 
	#R_MICROBLAZE_32_PCREL
 2

	)

3507 
	#R_MICROBLAZE_64_PCREL
 3

	)

3508 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3509 
	#R_MICROBLAZE_64
 5

	)

3510 
	#R_MICROBLAZE_32_LO
 6

	)

3511 
	#R_MICROBLAZE_SRO32
 7

	)

3512 
	#R_MICROBLAZE_SRW32
 8

	)

3513 
	#R_MICROBLAZE_64_NONE
 9

	)

3514 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3515 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3516 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3517 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3518 
	#R_MICROBLAZE_GOT_64
 14

	)

3519 
	#R_MICROBLAZE_PLT_64
 15

	)

3520 
	#R_MICROBLAZE_REL
 16

	)

3521 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3522 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3523 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3524 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3525 
	#R_MICROBLAZE_COPY
 21

	)

3526 
	#R_MICROBLAZE_TLS
 22

	)

3527 
	#R_MICROBLAZE_TLSGD
 23

	)

3528 
	#R_MICROBLAZE_TLSLD
 24

	)

3529 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3530 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3531 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3532 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3533 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3536 
	#DT_NIOS2_GP
 0x70000002

	)

3539 
	#R_NIOS2_NONE
 0

	)

3540 
	#R_NIOS2_S16
 1

	)

3541 
	#R_NIOS2_U16
 2

	)

3542 
	#R_NIOS2_PCREL16
 3

	)

3543 
	#R_NIOS2_CALL26
 4

	)

3544 
	#R_NIOS2_IMM5
 5

	)

3545 
	#R_NIOS2_CACHE_OPX
 6

	)

3546 
	#R_NIOS2_IMM6
 7

	)

3547 
	#R_NIOS2_IMM8
 8

	)

3548 
	#R_NIOS2_HI16
 9

	)

3549 
	#R_NIOS2_LO16
 10

	)

3550 
	#R_NIOS2_HIADJ16
 11

	)

3551 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3552 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3553 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3554 
	#R_NIOS2_GPREL
 15

	)

3555 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3556 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3557 
	#R_NIOS2_UJMP
 18

	)

3558 
	#R_NIOS2_CJMP
 19

	)

3559 
	#R_NIOS2_CALLR
 20

	)

3560 
	#R_NIOS2_ALIGN
 21

	)

3562 
	#R_NIOS2_GOT16
 22

	)

3563 
	#R_NIOS2_CALL16
 23

	)

3564 
	#R_NIOS2_GOTOFF_LO
 24

	)

3565 
	#R_NIOS2_GOTOFF_HA
 25

	)

3566 
	#R_NIOS2_PCREL_LO
 26

	)

3567 
	#R_NIOS2_PCREL_HA
 27

	)

3568 
	#R_NIOS2_TLS_GD16
 28

	)

3569 
	#R_NIOS2_TLS_LDM16
 29

	)

3570 
	#R_NIOS2_TLS_LDO16
 30

	)

3571 
	#R_NIOS2_TLS_IE16
 31

	)

3572 
	#R_NIOS2_TLS_LE16
 32

	)

3573 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3574 
	#R_NIOS2_TLS_DTPREL
 34

	)

3575 
	#R_NIOS2_TLS_TPREL
 35

	)

3576 
	#R_NIOS2_COPY
 36

	)

3577 
	#R_NIOS2_GLOB_DAT
 37

	)

3578 
	#R_NIOS2_JUMP_SLOT
 38

	)

3579 
	#R_NIOS2_RELATIVE
 39

	)

3580 
	#R_NIOS2_GOTOFF
 40

	)

3581 
	#R_NIOS2_CALL26_NOAT
 41

	)

3582 
	#R_NIOS2_GOT_LO
 42

	)

3583 
	#R_NIOS2_GOT_HA
 43

	)

3584 
	#R_NIOS2_CALL_LO
 44

	)

3585 
	#R_NIOS2_CALL_HA
 45

	)

3588 
	#R_TILEPRO_NONE
 0

	)

3589 
	#R_TILEPRO_32
 1

	)

3590 
	#R_TILEPRO_16
 2

	)

3591 
	#R_TILEPRO_8
 3

	)

3592 
	#R_TILEPRO_32_PCREL
 4

	)

3593 
	#R_TILEPRO_16_PCREL
 5

	)

3594 
	#R_TILEPRO_8_PCREL
 6

	)

3595 
	#R_TILEPRO_LO16
 7

	)

3596 
	#R_TILEPRO_HI16
 8

	)

3597 
	#R_TILEPRO_HA16
 9

	)

3598 
	#R_TILEPRO_COPY
 10

	)

3599 
	#R_TILEPRO_GLOB_DAT
 11

	)

3600 
	#R_TILEPRO_JMP_SLOT
 12

	)

3601 
	#R_TILEPRO_RELATIVE
 13

	)

3602 
	#R_TILEPRO_BROFF_X1
 14

	)

3603 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3604 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3605 
	#R_TILEPRO_IMM8_X0
 17

	)

3606 
	#R_TILEPRO_IMM8_Y0
 18

	)

3607 
	#R_TILEPRO_IMM8_X1
 19

	)

3608 
	#R_TILEPRO_IMM8_Y1
 20

	)

3609 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3610 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3611 
	#R_TILEPRO_IMM16_X0
 23

	)

3612 
	#R_TILEPRO_IMM16_X1
 24

	)

3613 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3614 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3615 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3616 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3617 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3618 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3619 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3620 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3621 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3622 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3623 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3624 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3625 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3626 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3627 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3628 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3629 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3630 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3631 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3632 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3633 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3634 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3635 
	#R_TILEPRO_MMSTART_X0
 47

	)

3636 
	#R_TILEPRO_MMEND_X0
 48

	)

3637 
	#R_TILEPRO_MMSTART_X1
 49

	)

3638 
	#R_TILEPRO_MMEND_X1
 50

	)

3639 
	#R_TILEPRO_SHAMT_X0
 51

	)

3640 
	#R_TILEPRO_SHAMT_X1
 52

	)

3641 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3642 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3643 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3645 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3646 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3647 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3648 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3649 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3650 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3651 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3652 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3653 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3654 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3655 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3656 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3657 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3658 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3659 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3660 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3661 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3662 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3663 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3664 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3665 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3666 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3667 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3668 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3669 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3670 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3671 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3672 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3673 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3674 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3675 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3676 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3677 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3679 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3680 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3682 
	#R_TILEPRO_NUM
 130

	)

3686 
	#R_TILEGX_NONE
 0

	)

3687 
	#R_TILEGX_64
 1

	)

3688 
	#R_TILEGX_32
 2

	)

3689 
	#R_TILEGX_16
 3

	)

3690 
	#R_TILEGX_8
 4

	)

3691 
	#R_TILEGX_64_PCREL
 5

	)

3692 
	#R_TILEGX_32_PCREL
 6

	)

3693 
	#R_TILEGX_16_PCREL
 7

	)

3694 
	#R_TILEGX_8_PCREL
 8

	)

3695 
	#R_TILEGX_HW0
 9

	)

3696 
	#R_TILEGX_HW1
 10

	)

3697 
	#R_TILEGX_HW2
 11

	)

3698 
	#R_TILEGX_HW3
 12

	)

3699 
	#R_TILEGX_HW0_LAST
 13

	)

3700 
	#R_TILEGX_HW1_LAST
 14

	)

3701 
	#R_TILEGX_HW2_LAST
 15

	)

3702 
	#R_TILEGX_COPY
 16

	)

3703 
	#R_TILEGX_GLOB_DAT
 17

	)

3704 
	#R_TILEGX_JMP_SLOT
 18

	)

3705 
	#R_TILEGX_RELATIVE
 19

	)

3706 
	#R_TILEGX_BROFF_X1
 20

	)

3707 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3708 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3709 
	#R_TILEGX_IMM8_X0
 23

	)

3710 
	#R_TILEGX_IMM8_Y0
 24

	)

3711 
	#R_TILEGX_IMM8_X1
 25

	)

3712 
	#R_TILEGX_IMM8_Y1
 26

	)

3713 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3714 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3715 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3716 
	#R_TILEGX_MMSTART_X0
 30

	)

3717 
	#R_TILEGX_MMEND_X0
 31

	)

3718 
	#R_TILEGX_SHAMT_X0
 32

	)

3719 
	#R_TILEGX_SHAMT_X1
 33

	)

3720 
	#R_TILEGX_SHAMT_Y0
 34

	)

3721 
	#R_TILEGX_SHAMT_Y1
 35

	)

3722 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3723 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3724 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3725 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3726 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3727 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3728 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3729 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3730 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3731 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3732 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3733 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3734 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3735 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3736 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3737 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3738 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3739 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3740 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3741 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3742 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3743 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3744 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3745 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3746 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3747 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3748 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3749 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3750 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3751 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3752 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3753 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3754 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3755 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3756 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3757 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3758 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3759 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3760 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3761 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3762 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3763 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3764 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3765 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3766 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3767 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3768 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3769 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3770 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3771 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3772 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3773 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3774 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3775 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3777 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3778 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3779 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3780 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3781 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3782 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3783 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3784 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3785 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3786 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3787 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3788 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3790 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3791 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3792 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3793 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3794 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3795 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3796 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3797 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3798 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3799 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3800 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3801 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3802 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3803 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3804 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3805 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3807 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3808 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3810 
	#R_TILEGX_NUM
 130

	)

3813 
	#EF_RISCV_RVC
 0x0001

	)

3814 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3815 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3816 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3817 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3818 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3821 
	#R_RISCV_NONE
 0

	)

3822 
	#R_RISCV_32
 1

	)

3823 
	#R_RISCV_64
 2

	)

3824 
	#R_RISCV_RELATIVE
 3

	)

3825 
	#R_RISCV_COPY
 4

	)

3826 
	#R_RISCV_JUMP_SLOT
 5

	)

3827 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3828 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3829 
	#R_RISCV_TLS_DTPREL32
 8

	)

3830 
	#R_RISCV_TLS_DTPREL64
 9

	)

3831 
	#R_RISCV_TLS_TPREL32
 10

	)

3832 
	#R_RISCV_TLS_TPREL64
 11

	)

3833 
	#R_RISCV_BRANCH
 16

	)

3834 
	#R_RISCV_JAL
 17

	)

3835 
	#R_RISCV_CALL
 18

	)

3836 
	#R_RISCV_CALL_PLT
 19

	)

3837 
	#R_RISCV_GOT_HI20
 20

	)

3838 
	#R_RISCV_TLS_GOT_HI20
 21

	)

3839 
	#R_RISCV_TLS_GD_HI20
 22

	)

3840 
	#R_RISCV_PCREL_HI20
 23

	)

3841 
	#R_RISCV_PCREL_LO12_I
 24

	)

3842 
	#R_RISCV_PCREL_LO12_S
 25

	)

3843 
	#R_RISCV_HI20
 26

	)

3844 
	#R_RISCV_LO12_I
 27

	)

3845 
	#R_RISCV_LO12_S
 28

	)

3846 
	#R_RISCV_TPREL_HI20
 29

	)

3847 
	#R_RISCV_TPREL_LO12_I
 30

	)

3848 
	#R_RISCV_TPREL_LO12_S
 31

	)

3849 
	#R_RISCV_TPREL_ADD
 32

	)

3850 
	#R_RISCV_ADD8
 33

	)

3851 
	#R_RISCV_ADD16
 34

	)

3852 
	#R_RISCV_ADD32
 35

	)

3853 
	#R_RISCV_ADD64
 36

	)

3854 
	#R_RISCV_SUB8
 37

	)

3855 
	#R_RISCV_SUB16
 38

	)

3856 
	#R_RISCV_SUB32
 39

	)

3857 
	#R_RISCV_SUB64
 40

	)

3858 
	#R_RISCV_GNU_VTINHERIT
 41

	)

3859 
	#R_RISCV_GNU_VTENTRY
 42

	)

3860 
	#R_RISCV_ALIGN
 43

	)

3861 
	#R_RISCV_RVC_BRANCH
 44

	)

3862 
	#R_RISCV_RVC_JUMP
 45

	)

3863 
	#R_RISCV_RVC_LUI
 46

	)

3864 
	#R_RISCV_GPREL_I
 47

	)

3865 
	#R_RISCV_GPREL_S
 48

	)

3866 
	#R_RISCV_TPREL_I
 49

	)

3867 
	#R_RISCV_TPREL_S
 50

	)

3868 
	#R_RISCV_RELAX
 51

	)

3869 
	#R_RISCV_SUB6
 52

	)

3870 
	#R_RISCV_SET6
 53

	)

3871 
	#R_RISCV_SET8
 54

	)

3872 
	#R_RISCV_SET16
 55

	)

3873 
	#R_RISCV_SET32
 56

	)

3874 
	#R_RISCV_32_PCREL
 57

	)

3876 
	#R_RISCV_NUM
 58

	)

3880 
	#R_BPF_NONE
 0

	)

3881 
	#R_BPF_64_64
 1

	)

3882 
	#R_BPF_64_32
 10

	)

3886 
	#R_METAG_HIADDR16
 0

	)

3887 
	#R_METAG_LOADDR16
 1

	)

3888 
	#R_METAG_ADDR32
 2

	)

3889 
	#R_METAG_NONE
 3

	)

3890 
	#R_METAG_RELBRANCH
 4

	)

3891 
	#R_METAG_GETSETOFF
 5

	)

3894 
	#R_METAG_REG32OP1
 6

	)

3895 
	#R_METAG_REG32OP2
 7

	)

3896 
	#R_METAG_REG32OP3
 8

	)

3897 
	#R_METAG_REG16OP1
 9

	)

3898 
	#R_METAG_REG16OP2
 10

	)

3899 
	#R_METAG_REG16OP3
 11

	)

3900 
	#R_METAG_REG32OP4
 12

	)

3902 
	#R_METAG_HIOG
 13

	)

3903 
	#R_METAG_LOOG
 14

	)

3905 
	#R_METAG_REL8
 15

	)

3906 
	#R_METAG_REL16
 16

	)

3909 
	#R_METAG_GNU_VTINHERIT
 30

	)

3910 
	#R_METAG_GNU_VTENTRY
 31

	)

3913 
	#R_METAG_HI16_GOTOFF
 32

	)

3914 
	#R_METAG_LO16_GOTOFF
 33

	)

3915 
	#R_METAG_GETSET_GOTOFF
 34

	)

3916 
	#R_METAG_GETSET_GOT
 35

	)

3917 
	#R_METAG_HI16_GOTPC
 36

	)

3918 
	#R_METAG_LO16_GOTPC
 37

	)

3919 
	#R_METAG_HI16_PLT
 38

	)

3920 
	#R_METAG_LO16_PLT
 39

	)

3921 
	#R_METAG_RELBRANCH_PLT
 40

	)

3922 
	#R_METAG_GOTOFF
 41

	)

3923 
	#R_METAG_PLT
 42

	)

3924 
	#R_METAG_COPY
 43

	)

3925 
	#R_METAG_JMP_SLOT
 44

	)

3926 
	#R_METAG_RELATIVE
 45

	)

3927 
	#R_METAG_GLOB_DAT
 46

	)

3930 
	#R_METAG_TLS_GD
 47

	)

3931 
	#R_METAG_TLS_LDM
 48

	)

3932 
	#R_METAG_TLS_LDO_HI16
 49

	)

3933 
	#R_METAG_TLS_LDO_LO16
 50

	)

3934 
	#R_METAG_TLS_LDO
 51

	)

3935 
	#R_METAG_TLS_IE
 52

	)

3936 
	#R_METAG_TLS_IENONPIC
 53

	)

3937 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

3938 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

3939 
	#R_METAG_TLS_TPOFF
 56

	)

3940 
	#R_METAG_TLS_DTPMOD
 57

	)

3941 
	#R_METAG_TLS_DTPOFF
 58

	)

3942 
	#R_METAG_TLS_LE
 59

	)

3943 
	#R_METAG_TLS_LE_HI16
 60

	)

3944 
	#R_METAG_TLS_LE_LO16
 61

	)

3947 
	#R_NDS32_NONE
 0

	)

3948 
	#R_NDS32_32_RELA
 20

	)

3949 
	#R_NDS32_COPY
 39

	)

3950 
	#R_NDS32_GLOB_DAT
 40

	)

3951 
	#R_NDS32_JMP_SLOT
 41

	)

3952 
	#R_NDS32_RELATIVE
 42

	)

3953 
	#R_NDS32_TLS_TPOFF
 102

	)

3954 
	#R_NDS32_TLS_DESC
 119

	)

3956 
	g__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_FILE_OFFSET64


148 
f˙é
 (
__fd
, 
__cmd
, ...);

150 #ifde‡
__REDIRECT


151 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

153 
	#f˙é
 
f˙é64


	)

156 #ifde‡
__USE_LARGEFILE64


157 
f˙é64
 (
__fd
, 
__cmd
, ...);

167 #i‚de‡
__USE_FILE_OFFSET64


168 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__REDIRECT


171 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

172 
	`__n⁄nuŒ
 ((1));

174 
	#›í
 
›í64


	)

177 #ifde‡
__USE_LARGEFILE64


178 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__USE_ATFILE


191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

195 #ifde‡
__REDIRECT


196 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

197 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

199 
	#›í©
 
›í©64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

213 #i‚de‡
__USE_FILE_OFFSET64


214 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #ifde‡
__REDIRECT


217 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

218 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

220 
	#¸ót
 
¸ót64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

228 && !
deföed
 
__USE_POSIX
))

237 
	#F_ULOCK
 0

	)

238 
	#F_LOCK
 1

	)

239 
	#F_TLOCK
 2

	)

240 
	#F_TEST
 3

	)

242 #i‚de‡
__USE_FILE_OFFSET64


243 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

245 #ifde‡
__REDIRECT


246 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

248 
	#lockf
 
lockf64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

256 #ifde‡
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


260 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

261 
__advi£
Ë
__THROW
;

263 #ifde‡
__REDIRECT_NTH


264 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

265 
__off64_t
 
__Àn
, 
__advi£
),

266 
posix_Ádvi£64
);

268 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

273 
__advi£
Ë
__THROW
;

281 #i‚de‡
__USE_FILE_OFFSET64


282 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

284 #ifde‡
__REDIRECT


285 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

286 
__off64_t
 
__Àn
),

287 
posix_ÁŒoˇã64
);

289 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

292 #ifde‡
__USE_LARGEFILE64


293 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

299 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

300 && 
deföed
 
__va_¨g_∑ck_Àn


301 
	~<bôs/f˙é2.h
>

304 
__END_DECLS


	@/usr/include/fenv.h

22 #i‚de‡
_FENV_H


23 
	#_FENV_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

64 
	~<bôs/„nv.h
>

66 
__BEGIN_DECLS


71 
	$„˛óªx˚±
 (
__ex˚±s
Ë
__THROW
;

75 
	$„gëex˚±Êag
 (
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

78 
	$„øi£ex˚±
 (
__ex˚±s
Ë
__THROW
;

80 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

83 
	$„£ãx˚±
 (
__ex˚±s
Ë
__THROW
;

88 
	$„£ãx˚±Êag
 (c⁄° 
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

92 
	$„ã°ex˚±
 (
__ex˚±s
Ë
__THROW
;

94 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

97 
	$„ã°ex˚±Êag
 (c⁄° 
„x˚±_t
 *
__Êagp
, 
__ex˚±s
Ë
__THROW
;

104 
	$„gëround
 (Ë
__THROW
 
__©åibuã_puª__
;

107 
	$„£åound
 (
__roundög_dúe˘i⁄
Ë
__THROW
;

114 
	$„gëív
 (
„nv_t
 *
__ívp
Ë
__THROW
;

119 
	$„hﬁdex˚±
 (
„nv_t
 *
__ívp
Ë
__THROW
;

123 
	$„£ãnv
 (c⁄° 
„nv_t
 *
__ívp
Ë
__THROW
;

128 
	$„upd©ìnv
 (c⁄° 
„nv_t
 *
__ívp
Ë
__THROW
;

133 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

136 
	$„gëmode
 (
„mode_t
 *
__modï
Ë
__THROW
;

140 
	$„£tmode
 (c⁄° 
„mode_t
 *
__modï
Ë
__THROW
;

144 #ifde‡
__OPTIMIZE__


145 
	~<bôs/„nvölöe.h
>

150 #i‡(
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
) \

151 && 
deföed
 
FE_INVALID
 \

152 && 
deföed
 
__SUPPORT_SNAN__
)

153 
	#FE_SNANS_ALWAYS_SIGNAL
 1

	)

156 #ifde‡
__USE_GNU


161 
	$„íabÀex˚±
 (
__ex˚±s
Ë
__THROW
;

166 
	$„dißbÀex˚±
 (
__ex˚±s
Ë
__THROW
;

169 
	$„gëex˚±
 (Ë
__THROW
;

172 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 
	#__MATHCALL_NARROW_ARGS_1
 (
_M¨g_
 
__x
)

	)

488 
	#__MATHCALL_NARROW_ARGS_2
 (
_M¨g_
 
__x
, _M¨g_ 
__y
)

	)

489 
	#__MATHCALL_NARROW_ARGS_3
 (
_M¨g_
 
__x
, _M¨g_ 
__y
, _M¨g_ 
__z
)

	)

490 
	#__MATHCALL_NARROW_NORMAL
(
func
, 
«rgs
) \

491 
_Mªt_
 
func
 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
 
__THROW


	)

492 
	#__MATHCALL_NARROW_REDIR
(
func
, 
ªdú
, 
«rgs
) \

493 
_Mªt_
 
	`__REDIRECT_NTH
 (
func
, 
__MATHCALL_NARROW_ARGS_
 ## 
«rgs
, \

494 
ªdú
)

	)

495 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

496 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

498 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

500 
	#_Mªt_
 

	)

501 
	#_M¨g_
 

	)

502 
	#__MATHCALL_NAME
(
«me
Ë
f
 ## 
	)
name

503 
	~<bôs/m©hˇŒs-«ºow.h
>

504 #unde‡
_Mªt_


505 #unde‡
_M¨g_


506 #unde‡
__MATHCALL_NAME


508 
	#_Mªt_
 

	)

509 
	#_M¨g_
 

	)

510 
	#__MATHCALL_NAME
(
«me
Ë
f
 ##Çamê## 
l


	)

511 #ifde‡
__LDBL_COMPAT


512 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
f
 ## 
	)
name

513 #unde‡
__MATHCALL_NARROW


514 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

515 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

517 
	~<bôs/m©hˇŒs-«ºow.h
>

518 #unde‡
_Mªt_


519 #unde‡
_M¨g_


520 #unde‡
__MATHCALL_NAME


521 #ifde‡
__LDBL_COMPAT


522 #unde‡
__MATHCALL_REDIR_NAME


523 #unde‡
__MATHCALL_NARROW


524 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

525 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

528 
	#_Mªt_
 

	)

529 
	#_M¨g_
 

	)

530 
	#__MATHCALL_NAME
(
«me
Ë
d
 ##Çamê## 
l


	)

531 #ifde‡
__LDBL_COMPAT


532 
	#__MATHCALL_REDIR_NAME
(
«me
Ë
__∆dbl_d
 ##Çamê## 
l


	)

533 #unde‡
__MATHCALL_NARROW


534 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

535 
	`__MATHCALL_NARROW_REDIR
 (
func
, 
ªdú
, 
«rgs
)

	)

537 
	~<bôs/m©hˇŒs-«ºow.h
>

538 #unde‡
_Mªt_


539 #unde‡
_M¨g_


540 #unde‡
__MATHCALL_NAME


541 #ifde‡
__LDBL_COMPAT


542 #unde‡
__MATHCALL_REDIR_NAME


543 #unde‡
__MATHCALL_NARROW


544 
	#__MATHCALL_NARROW
(
func
, 
ªdú
, 
«rgs
) \

545 
	`__MATHCALL_NARROW_NORMAL
 (
func
, 
«rgs
)

	)

550 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

552 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32


553 
	#_Mªt_
 
_Flﬂt16


	)

554 
	#_M¨g_
 
_Flﬂt32


	)

555 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32


	)

556 
	~<bôs/m©hˇŒs-«ºow.h
>

557 #unde‡
_Mªt_


558 #unde‡
_M¨g_


559 #unde‡
__MATHCALL_NAME


562 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT32X


563 
	#_Mªt_
 
_Flﬂt16


	)

564 
	#_M¨g_
 
_Flﬂt32x


	)

565 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f32x


	)

566 
	~<bôs/m©hˇŒs-«ºow.h
>

567 #unde‡
_Mªt_


568 #unde‡
_M¨g_


569 #unde‡
__MATHCALL_NAME


572 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64


573 
	#_Mªt_
 
_Flﬂt16


	)

574 
	#_M¨g_
 
_Flﬂt64


	)

575 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64


	)

576 
	~<bôs/m©hˇŒs-«ºow.h
>

577 #unde‡
_Mªt_


578 #unde‡
_M¨g_


579 #unde‡
__MATHCALL_NAME


582 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT64X


583 
	#_Mªt_
 
_Flﬂt16


	)

584 
	#_M¨g_
 
_Flﬂt64x


	)

585 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f64x


	)

586 
	~<bôs/m©hˇŒs-«ºow.h
>

587 #unde‡
_Mªt_


588 #unde‡
_M¨g_


589 #unde‡
__MATHCALL_NAME


592 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128


593 
	#_Mªt_
 
_Flﬂt16


	)

594 
	#_M¨g_
 
_Flﬂt128


	)

595 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128


	)

596 
	~<bôs/m©hˇŒs-«ºow.h
>

597 #unde‡
_Mªt_


598 #unde‡
_M¨g_


599 #unde‡
__MATHCALL_NAME


602 #i‡
__HAVE_FLOAT16
 && 
__HAVE_FLOAT128X


603 
	#_Mªt_
 
_Flﬂt16


	)

604 
	#_M¨g_
 
_Flﬂt128x


	)

605 
	#__MATHCALL_NAME
(
«me
Ë
f16
 ##Çamê## 
f128x


	)

606 
	~<bôs/m©hˇŒs-«ºow.h
>

607 #unde‡
_Mªt_


608 #unde‡
_M¨g_


609 #unde‡
__MATHCALL_NAME


612 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT32X


613 
	#_Mªt_
 
_Flﬂt32


	)

614 
	#_M¨g_
 
_Flﬂt32x


	)

615 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f32x


	)

616 
	~<bôs/m©hˇŒs-«ºow.h
>

617 #unde‡
_Mªt_


618 #unde‡
_M¨g_


619 #unde‡
__MATHCALL_NAME


622 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64


623 
	#_Mªt_
 
_Flﬂt32


	)

624 
	#_M¨g_
 
_Flﬂt64


	)

625 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64


	)

626 
	~<bôs/m©hˇŒs-«ºow.h
>

627 #unde‡
_Mªt_


628 #unde‡
_M¨g_


629 #unde‡
__MATHCALL_NAME


632 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT64X


633 
	#_Mªt_
 
_Flﬂt32


	)

634 
	#_M¨g_
 
_Flﬂt64x


	)

635 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f64x


	)

636 
	~<bôs/m©hˇŒs-«ºow.h
>

637 #unde‡
_Mªt_


638 #unde‡
_M¨g_


639 #unde‡
__MATHCALL_NAME


642 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128


643 
	#_Mªt_
 
_Flﬂt32


	)

644 
	#_M¨g_
 
_Flﬂt128


	)

645 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128


	)

646 
	~<bôs/m©hˇŒs-«ºow.h
>

647 #unde‡
_Mªt_


648 #unde‡
_M¨g_


649 #unde‡
__MATHCALL_NAME


652 #i‡
__HAVE_FLOAT32
 && 
__HAVE_FLOAT128X


653 
	#_Mªt_
 
_Flﬂt32


	)

654 
	#_M¨g_
 
_Flﬂt128x


	)

655 
	#__MATHCALL_NAME
(
«me
Ë
f32
 ##Çamê## 
f128x


	)

656 
	~<bôs/m©hˇŒs-«ºow.h
>

657 #unde‡
_Mªt_


658 #unde‡
_M¨g_


659 #unde‡
__MATHCALL_NAME


662 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64


663 
	#_Mªt_
 
_Flﬂt32x


	)

664 
	#_M¨g_
 
_Flﬂt64


	)

665 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64


	)

666 
	~<bôs/m©hˇŒs-«ºow.h
>

667 #unde‡
_Mªt_


668 #unde‡
_M¨g_


669 #unde‡
__MATHCALL_NAME


672 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT64X


673 
	#_Mªt_
 
_Flﬂt32x


	)

674 
	#_M¨g_
 
_Flﬂt64x


	)

675 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f64x


	)

676 
	~<bôs/m©hˇŒs-«ºow.h
>

677 #unde‡
_Mªt_


678 #unde‡
_M¨g_


679 #unde‡
__MATHCALL_NAME


682 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128


683 
	#_Mªt_
 
_Flﬂt32x


	)

684 
	#_M¨g_
 
_Flﬂt128


	)

685 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128


	)

686 
	~<bôs/m©hˇŒs-«ºow.h
>

687 #unde‡
_Mªt_


688 #unde‡
_M¨g_


689 #unde‡
__MATHCALL_NAME


692 #i‡
__HAVE_FLOAT32X
 && 
__HAVE_FLOAT128X


693 
	#_Mªt_
 
_Flﬂt32x


	)

694 
	#_M¨g_
 
_Flﬂt128x


	)

695 
	#__MATHCALL_NAME
(
«me
Ë
f32x
 ##Çamê## 
f128x


	)

696 
	~<bôs/m©hˇŒs-«ºow.h
>

697 #unde‡
_Mªt_


698 #unde‡
_M¨g_


699 #unde‡
__MATHCALL_NAME


702 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT64X


703 
	#_Mªt_
 
_Flﬂt64


	)

704 
	#_M¨g_
 
_Flﬂt64x


	)

705 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f64x


	)

706 
	~<bôs/m©hˇŒs-«ºow.h
>

707 #unde‡
_Mªt_


708 #unde‡
_M¨g_


709 #unde‡
__MATHCALL_NAME


712 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128


713 
	#_Mªt_
 
_Flﬂt64


	)

714 
	#_M¨g_
 
_Flﬂt128


	)

715 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128


	)

716 
	~<bôs/m©hˇŒs-«ºow.h
>

717 #unde‡
_Mªt_


718 #unde‡
_M¨g_


719 #unde‡
__MATHCALL_NAME


722 #i‡
__HAVE_FLOAT64
 && 
__HAVE_FLOAT128X


723 
	#_Mªt_
 
_Flﬂt64


	)

724 
	#_M¨g_
 
_Flﬂt128x


	)

725 
	#__MATHCALL_NAME
(
«me
Ë
f64
 ##Çamê## 
f128x


	)

726 
	~<bôs/m©hˇŒs-«ºow.h
>

727 #unde‡
_Mªt_


728 #unde‡
_M¨g_


729 #unde‡
__MATHCALL_NAME


732 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128


733 
	#_Mªt_
 
_Flﬂt64x


	)

734 
	#_M¨g_
 
_Flﬂt128


	)

735 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128


	)

736 
	~<bôs/m©hˇŒs-«ºow.h
>

737 #unde‡
_Mªt_


738 #unde‡
_M¨g_


739 #unde‡
__MATHCALL_NAME


742 #i‡
__HAVE_FLOAT64X
 && 
__HAVE_FLOAT128X


743 
	#_Mªt_
 
_Flﬂt64x


	)

744 
	#_M¨g_
 
_Flﬂt128x


	)

745 
	#__MATHCALL_NAME
(
«me
Ë
f64x
 ##Çamê## 
f128x


	)

746 
	~<bôs/m©hˇŒs-«ºow.h
>

747 #unde‡
_Mªt_


748 #unde‡
_M¨g_


749 #unde‡
__MATHCALL_NAME


752 #i‡
__HAVE_FLOAT128
 && 
__HAVE_FLOAT128X


753 
	#_Mªt_
 
_Flﬂt128


	)

754 
	#_M¨g_
 
_Flﬂt128x


	)

755 
	#__MATHCALL_NAME
(
«me
Ë
f128
 ##Çamê## 
f128x


	)

756 
	~<bôs/m©hˇŒs-«ºow.h
>

757 #unde‡
_Mªt_


758 #unde‡
_M¨g_


759 #unde‡
__MATHCALL_NAME


764 #unde‡
__MATHCALL_NARROW_ARGS_1


765 #unde‡
__MATHCALL_NARROW_ARGS_2


766 #unde‡
__MATHCALL_NARROW_ARGS_3


767 #unde‡
__MATHCALL_NARROW_NORMAL


768 #unde‡
__MATHCALL_NARROW_REDIR


769 #unde‡
__MATHCALL_NARROW


771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


773 
signgam
;

776 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

777 || 
__HAVE_DISTINCT_FLOAT32
 \

778 || 
__HAVE_DISTINCT_FLOAT64
 \

779 || 
__HAVE_DISTINCT_FLOAT32X
 \

780 || 
__HAVE_DISTINCT_FLOAT64X
 \

781 || 
__HAVE_DISTINCT_FLOAT128X
)

794 #ifde‡
__NO_LONG_DOUBLE_MATH


795 #i‡
__HAVE_DISTINCT_FLOAT128


798 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

799 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

800 #ñi‡
__HAVE_DISTINCT_FLOAT128


801 #i‡
__HAVE_GENERIC_SELECTION


802 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


803 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

805 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

807 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


808 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


809 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

811 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

814 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

816 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

817 
	`_Gíîic
 ((
TG_ARG
), \

818 : 
FUNC
 ## 
f
 
ARGS
, \

819 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

820 : 
FUNC
 
ARGS
, \

821 : 
FUNC
 ## 
l
 
ARGS
, \

822 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

823 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

825 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


828 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

829 
__buûtö_choo£_ex¥
 \

830 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

831 
FUNC
 ## 
f
 
ARGS
, \

832 
__buûtö_choo£_ex¥
 \

833 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

834 
FUNC
 
ARGS
, \

835 
__buûtö_choo£_ex¥
 \

836 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

837 
FUNC
 ## 
l
 
ARGS
, \

838 
FUNC
 ## 
f128
 
ARGS
)))

	)

841 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

842 ( (
TG_ARG
) ==  () \

843 ? 
FUNC
 ## 
f
 
ARGS
 \

844 :  (
TG_ARG
) ==  () \

845 ? 
FUNC
 
ARGS
 \

846 : 
FUNC
 ## 
l
 
ARGS
)

	)

850 #ifde‡
__USE_ISOC99


855 
FP_NAN
 =

856 
	#FP_NAN
 0

	)

857 
FP_NAN
,

858 
FP_INFINITE
 =

859 
	#FP_INFINITE
 1

	)

860 
FP_INFINITE
,

861 
FP_ZERO
 =

862 
	#FP_ZERO
 2

	)

863 
FP_ZERO
,

864 
FP_SUBNORMAL
 =

865 
	#FP_SUBNORMAL
 3

	)

866 
FP_SUBNORMAL
,

867 
FP_NORMAL
 =

868 
	#FP_NORMAL
 4

	)

869 
FP_NORMAL


877 #i‡((
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

878 || 
	`__glibc_˛™g_¥îeq
 (2,8)) \

879 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

886 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

887 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

889 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

893 #i‡
	`__GNUC_PREREQ
 (6,0Ë|| 
	`__glibc_˛™g_¥îeq
 (3,3)

894 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

895 #ñi‡
deföed
 
__˝lu•lus


903 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

904 #ñi‡
	`__GNUC_PREREQ
 (4,0)

905 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

907 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

911 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

912 || 
	$__glibc_˛™g_¥îeq
 (2,8)

913 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

915 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

919 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

920 || 
	$__glibc_˛™g_¥îeq
 (2,8)

921 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

923 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

928 #i‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

929 || 
	$__glibc_˛™g_¥îeq
 (2,8)

930 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

932 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

936 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

937 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


943 
	#isöf
(
x
) \

944 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

945 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

946 #ñi‡(
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
) \

947 || 
	$__glibc_˛™g_¥îeq
 (3,7)

948 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

950 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

954 
	#MATH_ERRNO
 1

	)

955 
	#MATH_ERREXCEPT
 2

	)

962 #ifde‡
__FAST_MATH__


963 
	#m©h_îrh™dlög
 0

	)

964 #ñi‡
deföed
 
__NO_MATH_ERRNO__


965 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

967 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

972 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

973 
	~<bôs/isˇn⁄iˇl.h
>

976 #i‚de‡
__˝lu•lus


977 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

986 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

987 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

988 
ölöe
 

989 
	`issig«lög
 (
__vÆ
)

991 #ifde‡
__NO_LONG_DOUBLE_MATH


992  
	`__issig«lög
 (
__vÆ
);

994  
	`__issig«lögl
 (
__vÆ
);

997 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1000 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

1002 
	}
}

1006 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

1009 #i‚de‡
__˝lu•lus


1010 #ifde‡
__SUPPORT_SNAN__


1011 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

1013 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

1017 #ifde‡
__SUPPORT_SNAN__


1018 
ölöe
 

1019 
iszîo
 (
__vÆ
)

1021  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

1023 
ölöe
 

1024 
iszîo
 (
__vÆ
)

1026  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1028 
ölöe
 

1029 
iszîo
 (
__vÆ
)

1031 #ifde‡
__NO_LONG_DOUBLE_MATH


1032  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

1034  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

1037 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1040 
ölöe
 

1041 
iszîo
 (
_Flﬂt128
 
__vÆ
)

1043  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

1047 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


1048 
iszîo
 (
__T
 
__vÆ
)

1050  
__vÆ
 == 0;

1057 #ifde‡
__USE_XOPEN


1059 
	#MAXFLOAT
 3.40282347e+38F

	)

1064 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


1065 
	#M_E
 2.7182818284590452354

	)

1066 
	#M_LOG2E
 1.4426950408889634074

	)

1067 
	#M_LOG10E
 0.43429448190325182765

	)

1068 
	#M_LN2
 0.69314718055994530942

	)

1069 
	#M_LN10
 2.30258509299404568402

	)

1070 
	#M_PI
 3.14159265358979323846

	)

1071 
	#M_PI_2
 1.57079632679489661923

	)

1072 
	#M_PI_4
 0.78539816339744830962

	)

1073 
	#M_1_PI
 0.31830988618379067154

	)

1074 
	#M_2_PI
 0.63661977236758134308

	)

1075 
	#M_2_SQRTPI
 1.12837916709551257390

	)

1076 
	#M_SQRT2
 1.41421356237309504880

	)

1077 
	#M_SQRT1_2
 0.70710678118654752440

	)

1083 #ifde‡
__USE_GNU


1084 
	#M_El
 2.718281828459045235360287471352662498L

	)

1085 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

1086 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

1087 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

1088 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

1089 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

1090 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

1091 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

1092 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

1093 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

1094 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

1095 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

1096 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

1099 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


1100 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

1101 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

1102 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

1103 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

1104 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

1105 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

1106 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

1107 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

1108 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

1109 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

1110 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

1111 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

1112 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

1115 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


1116 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

1117 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

1118 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

1119 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

1120 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

1121 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

1122 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

1123 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

1124 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

1125 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

1126 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

1127 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

1128 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

1131 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


1132 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

1133 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

1134 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

1135 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

1136 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

1137 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

1138 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

1139 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

1140 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

1141 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

1142 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

1143 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

1144 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

1147 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


1148 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

1149 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

1150 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

1151 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

1152 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

1153 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

1154 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

1155 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

1156 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

1157 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

1158 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

1159 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

1160 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

1163 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


1164 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

1165 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

1166 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

1167 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

1168 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

1169 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

1170 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

1171 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

1172 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

1173 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

1174 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

1175 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

1176 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

1179 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


1180 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

1181 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

1182 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

1183 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

1184 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

1185 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

1186 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

1187 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

1188 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

1189 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

1190 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

1191 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

1192 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

1195 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


1202 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


1203 
	#__NO_MATH_INLINES
 1

	)

1206 #ifde‡
__USE_ISOC99


1207 #i‡
__GNUC_PREREQ
 (3, 1)

1214 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

1215 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

1216 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

1217 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

1218 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

1219 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

1221 
	#isgª©î
(
x
, 
y
) \

1222 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1223 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

1224 
	#isgª©îequÆ
(
x
, 
y
) \

1225 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1226 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

1227 
	#i¶ess
(
x
, 
y
) \

1228 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1229 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

1230 
	#i¶es£quÆ
(
x
, 
y
) \

1231 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1232 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

1233 
	#i¶essgª©î
(
x
, 
y
) \

1234 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

1235 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

1237 
	#isun‹dîed
(
x
, 
y
) \

1238 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

1239 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

1244 #ifde‡
__USE_EXTERN_INLINES


1245 
	~<bôs/m©hölöe.h
>

1249 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

1252 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1253 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1254 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1255 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1256 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1257 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1259 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1264 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1265 
	#i£qsig
(
x
, 
y
) \

1266 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1279 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1281 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1283 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1285  
__i£qsigf
 (
__x
, 
__y
);

1289 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1291 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1293  
__i£qsig
 (
__x
, 
__y
);

1297 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1299 
__ˇŒ
 (
__x
, 
__y
Ë
throw
 ()

1301 #i‚de‡
__NO_LONG_DOUBLE_MATH


1302  
__i£qsigl
 (
__x
, 
__y
);

1304  
__i£qsig
 (
__x
, 
__y
);

1309 #i‡
__HAVE_FLOAT128_UNLIKE_LDBL


1312 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1314 
__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
throw
 ()

1316  
__i£qsigf128
 (
__x
, 
__y
);

1321 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1322 
ölöe
 

1323 
i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
throw
 ()

1325 #i‡
__˝lu•lus
 >= 201103L

1326 
de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1328 
__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1330  
__i£qsig_ty≥
<
_T3
>::
__ˇŒ
 (
__x
, 
__y
);

1338 
__END_DECLS


	@/usr/include/pnglibconf.h

15 #i‚de‡
PNGLCONF_H


16 
	#PNGLCONF_H


	)

18 
	#PNG_16BIT_SUPPORTED


	)

19 
	#PNG_ALIGNED_MEMORY_SUPPORTED


	)

22 
	#PNG_BENIGN_ERRORS_SUPPORTED


	)

23 
	#PNG_BENIGN_READ_ERRORS_SUPPORTED


	)

25 
	#PNG_BUILD_GRAYSCALE_PALETTE_SUPPORTED


	)

26 
	#PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED


	)

27 
	#PNG_COLORSPACE_SUPPORTED


	)

28 
	#PNG_CONSOLE_IO_SUPPORTED


	)

29 
	#PNG_CONVERT_tIME_SUPPORTED


	)

30 
	#PNG_EASY_ACCESS_SUPPORTED


	)

32 
	#PNG_ERROR_TEXT_SUPPORTED


	)

33 
	#PNG_FIXED_POINT_SUPPORTED


	)

34 
	#PNG_FLOATING_ARITHMETIC_SUPPORTED


	)

35 
	#PNG_FLOATING_POINT_SUPPORTED


	)

36 
	#PNG_FORMAT_AFIRST_SUPPORTED


	)

37 
	#PNG_FORMAT_BGR_SUPPORTED


	)

38 
	#PNG_GAMMA_SUPPORTED


	)

39 
	#PNG_GET_PALETTE_MAX_SUPPORTED


	)

40 
	#PNG_HANDLE_AS_UNKNOWN_SUPPORTED


	)

41 
	#PNG_INCH_CONVERSIONS_SUPPORTED


	)

42 
	#PNG_INFO_IMAGE_SUPPORTED


	)

43 
	#PNG_IO_STATE_SUPPORTED


	)

44 
	#PNG_MNG_FEATURES_SUPPORTED


	)

45 
	#PNG_POINTER_INDEXING_SUPPORTED


	)

48 
	#PNG_PROGRESSIVE_READ_SUPPORTED


	)

49 
	#PNG_READ_16BIT_SUPPORTED


	)

50 
	#PNG_READ_ALPHA_MODE_SUPPORTED


	)

51 
	#PNG_READ_ANCILLARY_CHUNKS_SUPPORTED


	)

52 
	#PNG_READ_BACKGROUND_SUPPORTED


	)

53 
	#PNG_READ_BGR_SUPPORTED


	)

54 
	#PNG_READ_CHECK_FOR_INVALID_INDEX_SUPPORTED


	)

55 
	#PNG_READ_COMPOSITE_NODIV_SUPPORTED


	)

56 
	#PNG_READ_COMPRESSED_TEXT_SUPPORTED


	)

57 
	#PNG_READ_EXPAND_16_SUPPORTED


	)

58 
	#PNG_READ_EXPAND_SUPPORTED


	)

59 
	#PNG_READ_FILLER_SUPPORTED


	)

60 
	#PNG_READ_GAMMA_SUPPORTED


	)

61 
	#PNG_READ_GET_PALETTE_MAX_SUPPORTED


	)

62 
	#PNG_READ_GRAY_TO_RGB_SUPPORTED


	)

63 
	#PNG_READ_INTERLACING_SUPPORTED


	)

64 
	#PNG_READ_INT_FUNCTIONS_SUPPORTED


	)

65 
	#PNG_READ_INVERT_ALPHA_SUPPORTED


	)

66 
	#PNG_READ_INVERT_SUPPORTED


	)

67 
	#PNG_READ_OPT_PLTE_SUPPORTED


	)

68 
	#PNG_READ_PACKSWAP_SUPPORTED


	)

69 
	#PNG_READ_PACK_SUPPORTED


	)

70 
	#PNG_READ_QUANTIZE_SUPPORTED


	)

71 
	#PNG_READ_RGB_TO_GRAY_SUPPORTED


	)

72 
	#PNG_READ_SCALE_16_TO_8_SUPPORTED


	)

73 
	#PNG_READ_SHIFT_SUPPORTED


	)

74 
	#PNG_READ_STRIP_16_TO_8_SUPPORTED


	)

75 
	#PNG_READ_STRIP_ALPHA_SUPPORTED


	)

76 
	#PNG_READ_SUPPORTED


	)

77 
	#PNG_READ_SWAP_ALPHA_SUPPORTED


	)

78 
	#PNG_READ_SWAP_SUPPORTED


	)

79 
	#PNG_READ_TEXT_SUPPORTED


	)

80 
	#PNG_READ_TRANSFORMS_SUPPORTED


	)

81 
	#PNG_READ_UNKNOWN_CHUNKS_SUPPORTED


	)

82 
	#PNG_READ_USER_CHUNKS_SUPPORTED


	)

83 
	#PNG_READ_USER_TRANSFORM_SUPPORTED


	)

84 
	#PNG_READ_bKGD_SUPPORTED


	)

85 
	#PNG_READ_cHRM_SUPPORTED


	)

86 
	#PNG_READ_eXIf_SUPPORTED


	)

87 
	#PNG_READ_gAMA_SUPPORTED


	)

88 
	#PNG_READ_hIST_SUPPORTED


	)

89 
	#PNG_READ_iCCP_SUPPORTED


	)

90 
	#PNG_READ_iTXt_SUPPORTED


	)

91 
	#PNG_READ_oFFs_SUPPORTED


	)

92 
	#PNG_READ_pCAL_SUPPORTED


	)

93 
	#PNG_READ_pHYs_SUPPORTED


	)

94 
	#PNG_READ_sBIT_SUPPORTED


	)

95 
	#PNG_READ_sCAL_SUPPORTED


	)

96 
	#PNG_READ_sPLT_SUPPORTED


	)

97 
	#PNG_READ_sRGB_SUPPORTED


	)

98 
	#PNG_READ_tEXt_SUPPORTED


	)

99 
	#PNG_READ_tIME_SUPPORTED


	)

100 
	#PNG_READ_tRNS_SUPPORTED


	)

101 
	#PNG_READ_zTXt_SUPPORTED


	)

102 
	#PNG_SAVE_INT_32_SUPPORTED


	)

103 
	#PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED


	)

104 
	#PNG_SEQUENTIAL_READ_SUPPORTED


	)

105 
	#PNG_SETJMP_SUPPORTED


	)

106 
	#PNG_SET_OPTION_SUPPORTED


	)

107 
	#PNG_SET_UNKNOWN_CHUNKS_SUPPORTED


	)

108 
	#PNG_SET_USER_LIMITS_SUPPORTED


	)

109 
	#PNG_SIMPLIFIED_READ_AFIRST_SUPPORTED


	)

110 
	#PNG_SIMPLIFIED_READ_BGR_SUPPORTED


	)

111 
	#PNG_SIMPLIFIED_READ_SUPPORTED


	)

112 
	#PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED


	)

113 
	#PNG_SIMPLIFIED_WRITE_BGR_SUPPORTED


	)

114 
	#PNG_SIMPLIFIED_WRITE_STDIO_SUPPORTED


	)

115 
	#PNG_SIMPLIFIED_WRITE_SUPPORTED


	)

116 
	#PNG_STDIO_SUPPORTED


	)

117 
	#PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED


	)

118 
	#PNG_TEXT_SUPPORTED


	)

119 
	#PNG_TIME_RFC1123_SUPPORTED


	)

120 
	#PNG_UNKNOWN_CHUNKS_SUPPORTED


	)

121 
	#PNG_USER_CHUNKS_SUPPORTED


	)

122 
	#PNG_USER_LIMITS_SUPPORTED


	)

123 
	#PNG_USER_MEM_SUPPORTED


	)

124 
	#PNG_USER_TRANSFORM_INFO_SUPPORTED


	)

125 
	#PNG_USER_TRANSFORM_PTR_SUPPORTED


	)

126 
	#PNG_WARNINGS_SUPPORTED


	)

127 
	#PNG_WRITE_16BIT_SUPPORTED


	)

128 
	#PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED


	)

129 
	#PNG_WRITE_BGR_SUPPORTED


	)

130 
	#PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED


	)

131 
	#PNG_WRITE_COMPRESSED_TEXT_SUPPORTED


	)

132 
	#PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED


	)

133 
	#PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED


	)

134 
	#PNG_WRITE_FILLER_SUPPORTED


	)

135 
	#PNG_WRITE_FILTER_SUPPORTED


	)

136 
	#PNG_WRITE_FLUSH_SUPPORTED


	)

137 
	#PNG_WRITE_GET_PALETTE_MAX_SUPPORTED


	)

138 
	#PNG_WRITE_INTERLACING_SUPPORTED


	)

139 
	#PNG_WRITE_INT_FUNCTIONS_SUPPORTED


	)

140 
	#PNG_WRITE_INVERT_ALPHA_SUPPORTED


	)

141 
	#PNG_WRITE_INVERT_SUPPORTED


	)

142 
	#PNG_WRITE_OPTIMIZE_CMF_SUPPORTED


	)

143 
	#PNG_WRITE_PACKSWAP_SUPPORTED


	)

144 
	#PNG_WRITE_PACK_SUPPORTED


	)

145 
	#PNG_WRITE_SHIFT_SUPPORTED


	)

146 
	#PNG_WRITE_SUPPORTED


	)

147 
	#PNG_WRITE_SWAP_ALPHA_SUPPORTED


	)

148 
	#PNG_WRITE_SWAP_SUPPORTED


	)

149 
	#PNG_WRITE_TEXT_SUPPORTED


	)

150 
	#PNG_WRITE_TRANSFORMS_SUPPORTED


	)

151 
	#PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED


	)

152 
	#PNG_WRITE_USER_TRANSFORM_SUPPORTED


	)

153 
	#PNG_WRITE_WEIGHTED_FILTER_SUPPORTED


	)

154 
	#PNG_WRITE_bKGD_SUPPORTED


	)

155 
	#PNG_WRITE_cHRM_SUPPORTED


	)

156 
	#PNG_WRITE_eXIf_SUPPORTED


	)

157 
	#PNG_WRITE_gAMA_SUPPORTED


	)

158 
	#PNG_WRITE_hIST_SUPPORTED


	)

159 
	#PNG_WRITE_iCCP_SUPPORTED


	)

160 
	#PNG_WRITE_iTXt_SUPPORTED


	)

161 
	#PNG_WRITE_oFFs_SUPPORTED


	)

162 
	#PNG_WRITE_pCAL_SUPPORTED


	)

163 
	#PNG_WRITE_pHYs_SUPPORTED


	)

164 
	#PNG_WRITE_sBIT_SUPPORTED


	)

165 
	#PNG_WRITE_sCAL_SUPPORTED


	)

166 
	#PNG_WRITE_sPLT_SUPPORTED


	)

167 
	#PNG_WRITE_sRGB_SUPPORTED


	)

168 
	#PNG_WRITE_tEXt_SUPPORTED


	)

169 
	#PNG_WRITE_tIME_SUPPORTED


	)

170 
	#PNG_WRITE_tRNS_SUPPORTED


	)

171 
	#PNG_WRITE_zTXt_SUPPORTED


	)

172 
	#PNG_bKGD_SUPPORTED


	)

173 
	#PNG_cHRM_SUPPORTED


	)

174 
	#PNG_eXIf_SUPPORTED


	)

175 
	#PNG_gAMA_SUPPORTED


	)

176 
	#PNG_hIST_SUPPORTED


	)

177 
	#PNG_iCCP_SUPPORTED


	)

178 
	#PNG_iTXt_SUPPORTED


	)

179 
	#PNG_oFFs_SUPPORTED


	)

180 
	#PNG_pCAL_SUPPORTED


	)

181 
	#PNG_pHYs_SUPPORTED


	)

182 
	#PNG_sBIT_SUPPORTED


	)

183 
	#PNG_sCAL_SUPPORTED


	)

184 
	#PNG_sPLT_SUPPORTED


	)

185 
	#PNG_sRGB_SUPPORTED


	)

186 
	#PNG_tEXt_SUPPORTED


	)

187 
	#PNG_tIME_SUPPORTED


	)

188 
	#PNG_tRNS_SUPPORTED


	)

189 
	#PNG_zTXt_SUPPORTED


	)

192 
	#PNG_API_RULE
 0

	)

193 
	#PNG_DEFAULT_READ_MACROS
 1

	)

194 
	#PNG_GAMMA_THRESHOLD_FIXED
 5000

	)

195 
	#PNG_IDAT_READ_SIZE
 
PNG_ZBUF_SIZE


	)

196 
	#PNG_INFLATE_BUF_SIZE
 1024

	)

197 
	#PNG_LINKAGE_API
 

	)

198 
	#PNG_LINKAGE_CALLBACK
 

	)

199 
	#PNG_LINKAGE_DATA
 

	)

200 
	#PNG_LINKAGE_FUNCTION
 

	)

201 
	#PNG_MAX_GAMMA_8
 11

	)

202 
	#PNG_QUANTIZE_BLUE_BITS
 5

	)

203 
	#PNG_QUANTIZE_GREEN_BITS
 5

	)

204 
	#PNG_QUANTIZE_RED_BITS
 5

	)

205 
	#PNG_TEXT_Z_DEFAULT_COMPRESSION
 (-1)

	)

206 
	#PNG_TEXT_Z_DEFAULT_STRATEGY
 0

	)

207 
	#PNG_USER_CHUNK_CACHE_MAX
 1000

	)

208 
	#PNG_USER_CHUNK_MALLOC_MAX
 8000000

	)

209 
	#PNG_USER_HEIGHT_MAX
 1000000

	)

210 
	#PNG_USER_WIDTH_MAX
 1000000

	)

211 
	#PNG_ZBUF_SIZE
 8192

	)

212 
	#PNG_ZLIB_VERNUM
 0x12b0

	)

213 
	#PNG_Z_DEFAULT_COMPRESSION
 (-1)

	)

214 
	#PNG_Z_DEFAULT_NOFILTER_STRATEGY
 0

	)

215 
	#PNG_Z_DEFAULT_STRATEGY
 1

	)

216 
	#PNG_sCAL_PRECISION
 5

	)

217 
	#PNG_sRGB_PROFILE_CHECKS
 2

	)

	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/ty≥s/__sig£t_t.h
>

33 
	s__jmp_buf_èg


39 
__jmp_buf
 
	m__jmpbuf
;

40 
	m__mask_was_ßved
;

41 
__sig£t_t
 
	m__ßved_mask
;

45 
__jmp_buf_èg
 
	tjmp_buf
[1];

49 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

58 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

62 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

67 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

68 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

70 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


74 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

79 #ifdef 
__USE_POSIX


83 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

87 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

93 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

94 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

99 #i‡
__USE_FORTIFY_LEVEL
 > 0

100 
	~<bôs/£tjmp2.h
>

103 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

160 #ifde‡
__USE_MISC


167 
	#sigmask
(
sig
Ë(()(1u << ((sigË- 1)))

	)

170 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

173 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

180 #ifde‡
__USE_MISC


181 
	#NSIG
 
_NSIG


	)

184 #ifde‡
__USE_GNU


185 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

189 #ifde‡
__USE_MISC


190 
__sigh™dÀr_t
 
	tsig_t
;

193 #ifde‡
__USE_POSIX


196 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

209 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__USE_GNU


213 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

217 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

220 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

221 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

226 
	~<bôs/siga˘i⁄.h
>

229 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

230 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

237 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

240 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

241 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

244 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__USE_POSIX199506


252 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

253 
	`__n⁄nuŒ
 ((1, 2));

256 #ifde‡
__USE_POSIX199309


261 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

262 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

269 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

270 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

271 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

272 
	`__n⁄nuŒ
 ((1));

276 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

277 
__THROW
;

282 #ifde‡
__USE_MISC


286 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

287 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

291 
	~<bôs/sigc⁄ãxt.h
>

294 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

299 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


300 
	#__√ed_size_t


	)

301 
	~<°ddef.h
>

303 
	~<bôs/ty≥s/°ack_t.h
>

304 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


306 
	~<sys/uc⁄ãxt.h
>

310 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


314 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

316 
	~<bôs/sig°ack.h
>

317 
	~<bôs/ss_Êags.h
>

321 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

322 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

325 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

326 || 
deföed
 
__USE_MISC
)

327 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

330 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

331 || 
deföed
 
__USE_MISC
)

335 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

336 
__THROW
 
__©åibuã_dïªˇãd__
;

339 #ifde‡
__USE_XOPEN_EXTENDED


343 
	$sighﬁd
 (
__sig
Ë
__THROW
;

346 
	$sigªl£
 (
__sig
Ë
__THROW
;

349 
	$sigign‹e
 (
__sig
Ë
__THROW
;

352 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

355 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


358 
	~<bôs/±hªadty≥s.h
>

359 
	~<bôs/sigthªad.h
>

366 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

368 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

370 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

371 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

374 
	~<bôs/sig«l_ext.h
>

376 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

137 
FILE
 *
°dö
;

138 
FILE
 *
°dout
;

139 
FILE
 *
°dîr
;

141 
	#°dö
 
°dö


	)

142 
	#°dout
 
°dout


	)

143 
	#°dîr
 
°dîr


	)

146 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

148 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

150 #ifde‡
__USE_ATFILE


152 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

153 c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_GNU


158 
	#RENAME_NOREPLACE
 (1 << 0)

	)

159 
	#RENAME_EXCHANGE
 (1 << 1)

	)

160 
	#RENAME_WHITEOUT
 (1 << 2)

	)

164 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

165 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

172 #i‚de‡
__USE_FILE_OFFSET64


173 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

175 #ifde‡
__REDIRECT


176 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

178 
	#tmpfûe
 
tmpfûe64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

187 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

213 
	`f˛o£
 (
FILE
 *
__°ªam
);

218 
	`fÊush
 (
FILE
 *
__°ªam
);

220 #ifde‡
__USE_MISC


227 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

230 #ifde‡
__USE_GNU


237 
	`f˛o£Æl
 ();

241 #i‚de‡
__USE_FILE_OFFSET64


246 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

252 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

253 c⁄° *
__ª°ri˘
 
__modes
,

254 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

256 #ifde‡
__REDIRECT


257 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

258 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

259 
__wur
;

260 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

261 c⁄° *
__ª°ri˘
 
__modes
,

262 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

263 
__wur
;

265 
	#f›í
 
f›í64


	)

266 
	#‰e›í
 
‰e›í64


	)

269 #ifde‡
__USE_LARGEFILE64


270 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

272 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
,

274 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

277 #ifdef 
__USE_POSIX


279 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

282 #ifdef 
__USE_GNU


285 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

286 c⁄° *
__ª°ri˘
 
__modes
,

287 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

290 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

292 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

293 
__THROW
 
__wur
;

298 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

304 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

308 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
__modes
, 
size_t
 
__n
Ë
__THROW
;

311 #ifdef 
__USE_MISC


314 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

315 
size_t
 
__size
Ë
__THROW
;

318 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

326 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

327 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

332 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

334 
	$•rötf
 (*
__ª°ri˘
 
__s
,

335 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

341 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

342 
__gnuc_va_li°
 
__¨g
);

347 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

349 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

350 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

352 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


354 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

355 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

356 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

358 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

360 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

363 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

366 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

367 
__gnuc_va_li°
 
__¨g
)

368 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

369 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

370 c⁄° *
__ª°ri˘
 
__fmt
, ...)

371 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

372 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

373 c⁄° *
__ª°ri˘
 
__fmt
, ...)

374 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

377 #ifde‡
__USE_XOPEN2K8


379 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

380 
__gnuc_va_li°
 
__¨g
)

381 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

382 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

383 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

391 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

392 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

397 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

399 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

400 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

405 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT


406 #ifde‡
__REDIRECT


407 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

409 
__isoc99_fsˇnf
Ë
__wur
;

410 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

411 
__isoc99_sˇnf
Ë
__wur
;

412 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

413 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

414 
__isoc99_ssˇnf
);

416 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

417 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

418 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

419 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

420 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

421 
	#fsˇnf
 
__isoc99_fsˇnf


	)

422 
	#sˇnf
 
__isoc99_sˇnf


	)

423 
	#ssˇnf
 
__isoc99_ssˇnf


	)

427 #ifdef 
__USE_ISOC99


432 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

433 
__gnuc_va_li°
 
__¨g
)

434 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

440 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

441 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

444 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

446 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

449 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

450 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT


451 
	`__REDIRECT
 (
vfsˇnf
,

452 (
FILE
 *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

454 
__isoc99_vfsˇnf
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

456 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

457 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

458 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

459 
	`__REDIRECT_NTH
 (
vssˇnf
,

460 (c⁄° *
__ª°ri˘
 
__s
,

461 c⁄° *
__ª°ri˘
 
__f‹m©
,

462 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

463 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

464 #ñi‡!
deföed
 
__REDIRECT


465 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

466 c⁄° *
__ª°ri˘
 
__f‹m©
,

467 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

468 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

469 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

470 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

471 c⁄° *
__ª°ri˘
 
__f‹m©
,

472 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

473 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

474 
	#vsˇnf
 
__isoc99_vsˇnf


	)

475 
	#vssˇnf
 
__isoc99_vssˇnf


	)

485 
	`fgëc
 (
FILE
 *
__°ªam
);

486 
	`gëc
 (
FILE
 *
__°ªam
);

492 
	`gëch¨
 ();

494 #ifde‡
__USE_POSIX199506


499 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

500 
	`gëch¨_u∆ocked
 ();

503 #ifde‡
__USE_MISC


510 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

521 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

522 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

528 
	`putch¨
 (
__c
);

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
__gnuc_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 
	`__uÊow
 (
FILE
 *);

859 
	`__ovîÊow
 (
FILE
 *, );

863 #ifde‡
__USE_EXTERN_INLINES


864 
	~<bôs/°dio.h
>

866 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


867 
	~<bôs/°dio2.h
>

869 #ifde‡
__LDBL_COMPAT


870 
	~<bôs/°dio-ldbl.h
>

873 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


540 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

542 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

543 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

550 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

551 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

553 #ifde‡
__USE_MISC


559 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

560 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


561 
	`__©åibuã_Æloc_size__
 ((2, 3));

565 
	$‰ì
 (*
__±r
Ë
__THROW
;

567 #ifde‡
__USE_MISC


568 
	~<Æloˇ.h
>

571 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

572 || 
deföed
 
__USE_MISC


574 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


575 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

578 #ifde‡
__USE_XOPEN2K


580 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

584 #ifde‡
__USE_ISOC11


586 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

591 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

595 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

597 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


599 #ifde‡
__˝lu•lus


600 "C++" 
	$©_quick_exô
 ((*
__func
) ())

601 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

603 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

607 #ifdef 
__USE_MISC


610 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

611 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

619 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


623 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #ifde‡
__USE_ISOC99


629 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

634 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__USE_GNU


639 *
	$£cuª_gëív
 (c⁄° *
__«me
)

640 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


647 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

650 #ifde‡
__USE_XOPEN2K


653 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

654 
__THROW
 
	`__n⁄nuŒ
 ((2));

657 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

660 #ifdef 
__USE_MISC


664 
	$˛óªnv
 (Ë
__THROW
;

668 #i‡
deföed
 
__USE_MISC
 \

669 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

675 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

678 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


687 #i‚de‡
__USE_FILE_OFFSET64


688 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

690 #ifde‡
__REDIRECT


691 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

692 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

694 
	#mk°emp
 
mk°emp64


	)

697 #ifde‡
__USE_LARGEFILE64


698 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 #ifde‡
__USE_MISC


709 #i‚de‡
__USE_FILE_OFFSET64


710 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

714 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

716 
	#mk°emps
 
mk°emps64


	)

719 #ifde‡
__USE_LARGEFILE64


720 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

721 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

725 #ifde‡
__USE_XOPEN2K8


731 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

734 #ifde‡
__USE_GNU


741 #i‚de‡
__USE_FILE_OFFSET64


742 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

744 #ifde‡
__REDIRECT


745 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

746 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

748 
	#mko°emp
 
mko°emp64


	)

751 #ifde‡
__USE_LARGEFILE64


752 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

761 #i‚de‡
__USE_FILE_OFFSET64


762 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

763 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

765 #ifde‡
__REDIRECT


766 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

767 
__Êags
), 
mko°emps64
)

768 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

770 
	#mko°emps
 
mko°emps64


	)

773 #ifde‡
__USE_LARGEFILE64


774 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

784 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

787 #ifdef 
__USE_GNU


790 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

794 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


800 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

801 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

806 #i‚de‡
__COMPAR_FN_T


807 
	#__COMPAR_FN_T


	)

808 (*
	t__com∑r_‚_t
) (const *, const *);

810 #ifdef 
__USE_GNU


811 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

814 #ifde‡
__USE_GNU


815 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

820 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

821 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

822 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

824 #ifde‡
__USE_EXTERN_INLINES


825 
	~<bôs/°dlib-b£¨ch.h
>

830 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

832 #ifde‡
__USE_GNU


833 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

834 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

835 
	`__n⁄nuŒ
 ((1, 4));

840 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

841 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

843 #ifde‡
__USE_ISOC99


844 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

845 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

852 
div_t
 
	$div
 (
__numî
, 
__díom
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

855 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

857 #ifde‡
__USE_ISOC99


858 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

859 
__díom
)

860 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

864 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

865 || 
deföed
 
__USE_MISC


872 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

873 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

878 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

879 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

884 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

885 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

888 #ifde‡
__USE_MISC


890 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

894 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

895 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

896 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

897 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

902 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

905 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

906 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

907 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

909 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

910 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

911 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

912 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

914 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

915 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

922 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

925 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

926 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

929 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

933 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

936 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

937 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

938 
__THROW
;

941 #ifde‡
__USE_MISC


946 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


957 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

958 *c⁄° *
__ª°ri˘
 
__tokís
,

959 **
__ª°ri˘
 
__vÆuï
)

960 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

966 #ifde‡
__USE_XOPEN2KXSI


968 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

971 #ifde‡
__USE_XOPEN_EXTENDED


976 
	$gø¡±
 (
__fd
Ë
__THROW
;

980 
	$u∆ock±
 (
__fd
Ë
__THROW
;

985 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

988 #ifde‡
__USE_GNU


992 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

993 
__THROW
 
	`__n⁄nuŒ
 ((2));

996 
	`gë±
 ();

999 #ifde‡
__USE_MISC


1003 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1010 
	$ây¶Ÿ
 (Ë
__THROW
;

1013 
	~<bôs/°dlib-Êﬂt.h
>

1016 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1017 
	~<bôs/°dlib.h
>

1019 #ifde‡
__LDBL_COMPAT


1020 
	~<bôs/°dlib-ldbl.h
>

1023 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

68 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


71 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

72 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

74 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__OPTIMIZE__


77 
__exã∫_Æways_ölöe
 *

78 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


80  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

83 
__exã∫_Æways_ölöe
 const *

84 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


86  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

89 
	}
}

91 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

92 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 #ifde‡
__USE_GNU


98 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


99 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

100 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

104 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


110 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

111 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

112 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

122 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

125 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

126 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

138 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

148 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
 
	`__n⁄nuŒ
 ((2));

151 #ifde‡
__USE_XOPEN2K8


153 
	~<bôs/ty≥s/loˇÀ_t.h
>

156 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

160 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

161 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

164 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

165 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

167 *
	$°rdup
 (c⁄° *
__s
)

168 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

174 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

175 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


181 
	#°rdu∑
(
s
) \

182 (
__exãnsi⁄__
 \

184 c⁄° *
__ﬁd
 = (
s
); \

185 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

186 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

187 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

188 
	}
}))

	)

191 
	#°∫du∑
(
s
, 
n
) \

192 (
__exãnsi⁄__
 \

194 c⁄° *
__ﬁd
 = (
s
); \

195 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

196 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

197 
__√w
[
__Àn
] = '\0'; \

198 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

199 }))

	)

203 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


206 *
°rchr
 (*
__s
, 
__c
)

207 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

208 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

209 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

211 #ifde‡
__OPTIMIZE__


212 
__exã∫_Æways_ölöe
 *

213 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


215  
__buûtö_°rchr
 (
__s
, 
__c
);

218 
__exã∫_Æways_ölöe
 const *

219 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

226 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


233 *
	`°ºchr
 (*
__s
, 
__c
)

234 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__OPTIMIZE__


239 
__exã∫_Æways_ölöe
 *

240 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


242  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

245 
__exã∫_Æways_ölöe
 const *

246 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
	}
}

253 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

254 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

257 #ifde‡
__USE_GNU


260 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


261 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

262 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

267 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

277 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


283 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

284 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__OPTIMIZE__


289 
__exã∫_Æways_ölöe
 *

290 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


292  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

295 
__exã∫_Æways_ölöe
 const *

296 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


298  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

301 
	}
}

303 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


310 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

311 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

312 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

313 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__OPTIMIZE__


316 
__exã∫_Æways_ölöe
 *

317 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


319  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

322 
__exã∫_Æways_ölöe
 const *

323 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


325  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

328 
	}
}

330 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

337 
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

342 c⁄° *
__ª°ri˘
 
__dñim
,

343 **
__ª°ri˘
 
__ßve_±r
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

345 #ifde‡
__USE_POSIX


346 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

347 **
__ª°ri˘
 
__ßve_±r
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

351 #ifde‡
__USE_GNU


353 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


354 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

355 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

357 c⁄° *
__√edÀ
)

358 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

360 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

361 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 #ifde‡
__USE_GNU


369 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

370 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

371 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

375 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

376 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

379 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

380 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

385 
size_t
 
	$°æí
 (c⁄° *
__s
)

386 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

388 #ifdef 
__USE_XOPEN2K8


391 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

392 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

398 #ifde‡
__USE_XOPEN2K


406 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

411 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

412 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

414 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

416 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

421 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

426 #ifde‡
__USE_XOPEN2K8


428 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

431 #ifde‡
__USE_MISC


432 
	~<°rögs.h
>

436 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

440 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

441 c⁄° *
__ª°ri˘
 
__dñim
)

442 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

445 #ifdef 
__USE_XOPEN2K8


447 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

450 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

452 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

453 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

458 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

459 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

460 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

461 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

462 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifdef 
__USE_GNU


467 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

468 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

471 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

474 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

476 #i‚de‡
ba£«me


481 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


482 "C++" *
	$ba£«me
 (*
__fûíame
)

483 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

484 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

485 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

487 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

492 #i‡
	`__GNUC_PREREQ
 (3,4)

493 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


495 
	~<bôs/°rög_f‹tifõd.h
>

499 
__END_DECLS


	@/usr/include/sys/auxv.h

19 #i‚de‡
_SYS_AUXV_H


20 
	#_SYS_AUXV_H
 1

	)

22 
	~<ñf.h
>

23 
	~<bôs/auxv.h
>

24 
	~<sys/cdefs.h
>

25 
	~<bôs/hwˇp.h
>

27 
__BEGIN_DECLS


32 
	$gëauxvÆ
 (
__ty≥
)

33 
__THROW
;

35 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #ifde‡
__USE_XOPEN2K8


30 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 
	~<bôs/ty≥s/time_t.h
>

39 #i‚de‡
__dev_t_deföed


40 
__dev_t
 
	tdev_t
;

41 
	#__dev_t_deföed


	)

44 #i‚de‡
__gid_t_deföed


45 
__gid_t
 
	tgid_t
;

46 
	#__gid_t_deföed


	)

49 #i‚de‡
__öo_t_deföed


50 #i‚de‡
__USE_FILE_OFFSET64


51 
__öo_t
 
	töo_t
;

53 
__öo64_t
 
	töo_t
;

55 
	#__öo_t_deföed


	)

58 #i‚de‡
__mode_t_deföed


59 
__mode_t
 
	tmode_t
;

60 
	#__mode_t_deföed


	)

63 #i‚de‡
__∆ök_t_deföed


64 
__∆ök_t
 
	t∆ök_t
;

65 
	#__∆ök_t_deföed


	)

68 #i‚de‡
__off_t_deföed


69 #i‚de‡
__USE_FILE_OFFSET64


70 
__off_t
 
	toff_t
;

72 
__off64_t
 
	toff_t
;

74 
	#__off_t_deföed


	)

77 #i‚de‡
__uid_t_deföed


78 
__uid_t
 
	tuid_t
;

79 
	#__uid_t_deföed


	)

83 #ifde‡
__USE_UNIX98


84 #i‚de‡
__blk˙t_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__blk˙t_t
 
	tblk˙t_t
;

88 
__blk˙t64_t
 
	tblk˙t_t
;

90 
	#__blk˙t_t_deföed


	)

93 #i‚de‡
__blksize_t_deföed


94 
__blksize_t
 
	tblksize_t
;

95 
	#__blksize_t_deföed


	)

99 
	g__BEGIN_DECLS


101 
	~<bôs/°©.h
>

103 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


104 
	#S_IFMT
 
__S_IFMT


	)

105 
	#S_IFDIR
 
__S_IFDIR


	)

106 
	#S_IFCHR
 
__S_IFCHR


	)

107 
	#S_IFBLK
 
__S_IFBLK


	)

108 
	#S_IFREG
 
__S_IFREG


	)

109 #ifde‡
__S_IFIFO


110 
	#S_IFIFO
 
__S_IFIFO


	)

112 #ifde‡
__S_IFLNK


113 
	#S_IFLNK
 
__S_IFLNK


	)

115 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
) \

116 && 
deföed
 
	g__S_IFSOCK


117 
	#S_IFSOCK
 
__S_IFSOCK


	)

123 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

125 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

126 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

127 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

128 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

129 #ifde‡
__S_IFIFO


130 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

132 #ifde‡
__S_IFLNK


133 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

136 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë0

	)

140 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K
) \

141 && 
deföed
 
	g__S_IFSOCK


142 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

143 #ñi‡
deföed
 
__USE_XOPEN2K


144 
	#S_ISSOCK
(
mode
Ë0

	)

151 #ifdef 
__USE_POSIX199309


152 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

153 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

154 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

160 
	#S_ISUID
 
__S_ISUID


	)

161 
	#S_ISGID
 
__S_ISGID


	)

163 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


165 
	#S_ISVTX
 
__S_ISVTX


	)

168 
	#S_IRUSR
 
__S_IREAD


	)

169 
	#S_IWUSR
 
__S_IWRITE


	)

170 
	#S_IXUSR
 
__S_IEXEC


	)

172 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

174 #ifde‡
__USE_MISC


175 
	#S_IREAD
 
S_IRUSR


	)

176 
	#S_IWRITE
 
S_IWUSR


	)

177 
	#S_IEXEC
 
S_IXUSR


	)

180 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

181 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

182 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

184 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

186 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

187 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

188 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

190 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

193 #ifdef 
__USE_MISC


195 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

196 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

197 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

199 
	#S_BLKSIZE
 512

	)

203 #i‚de‡
__USE_FILE_OFFSET64


205 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

206 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

210 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

212 #ifde‡
__REDIRECT_NTH


213 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

214 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

215 
	`__n⁄nuŒ
 ((1, 2));

216 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

217 
	`__n⁄nuŒ
 ((2));

219 
	#°©
 
°©64


	)

220 
	#f°©
 
f°©64


	)

223 #ifde‡
__USE_LARGEFILE64


224 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

225 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

226 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

229 #ifde‡
__USE_ATFILE


233 #i‚de‡
__USE_FILE_OFFSET64


234 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

235 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

236 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

238 #ifde‡
__REDIRECT_NTH


239 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
,

241 
__Êag
),

242 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

244 
	#f°©©
 
f°©©64


	)

248 #ifde‡
__USE_LARGEFILE64


249 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

250 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

251 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

255 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


256 #i‚de‡
__USE_FILE_OFFSET64


259 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

260 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT_NTH


263 
	`__REDIRECT_NTH
 (
l°©
,

264 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

266 
	`__n⁄nuŒ
 ((1, 2));

268 
	#l°©
 
l°©64


	)

271 #ifde‡
__USE_LARGEFILE64


272 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

273 
°©64
 *
__ª°ri˘
 
__buf
)

274 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

280 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 #ifde‡
__USE_MISC


287 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


293 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

296 #ifde‡
__USE_ATFILE


299 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

300 
__Êag
)

301 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

308 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

310 #ifdef 
__USE_GNU


313 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

317 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1));

320 #ifde‡
__USE_ATFILE


324 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

325 
__THROW
 
	`__n⁄nuŒ
 ((2));

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


332 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 #ifde‡
__USE_ATFILE


339 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

340 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 #ifde‡
__USE_ATFILE


353 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

354 
__THROW
 
	`__n⁄nuŒ
 ((2));

357 #ifde‡
__USE_ATFILE


360 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

361 c⁄° 
time•ec
 
__times
[2],

362 
__Êags
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 #ifde‡
__USE_XOPEN2K8


368 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

386 #i‚de‡
_STAT_VER


387 
	#_STAT_VER
 0

	)

389 #i‚de‡
_MKNOD_VER


390 
	#_MKNOD_VER
 0

	)

394 #i‚de‡
__USE_FILE_OFFSET64


395 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

396 
__THROW
 
	`__n⁄nuŒ
 ((3));

397 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

398 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

399 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

400 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

401 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
, 
__Êag
)

403 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

405 #ifde‡
__REDIRECT_NTH


406 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

407 
°©
 *
__°©_buf
), 
__fx°©64
)

408 
	`__n⁄nuŒ
 ((3));

409 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

410 
°©
 *
__°©_buf
), 
__x°©64
)

411 
	`__n⁄nuŒ
 ((2, 3));

412 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__lx°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

416 c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
, 
__Êag
),

418 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

421 
	#__fx°©
 
__fx°©64


	)

422 
	#__x°©
 
__x°©64


	)

423 
	#__lx°©
 
__lx°©64


	)

427 #ifde‡
__USE_LARGEFILE64


428 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

429 
__THROW
 
	`__n⁄nuŒ
 ((3));

430 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

431 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

432 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

433 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
, 
__Êag
)

436 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

438 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

439 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

441 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

442 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

443 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

445 #ifde‡
__USE_GNU


446 
	~<bôs/°©x.h
>

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #ifde‡
__USE_MISC


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

42 
__loff_t
 
	tloff_t
;

45 #i‚de‡
__öo_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__öo_t
 
	töo_t
;

49 
__öo64_t
 
	töo_t
;

51 
	#__öo_t_deföed


	)

53 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


54 
__öo64_t
 
	töo64_t
;

55 
	#__öo64_t_deföed


	)

58 #i‚de‡
__dev_t_deföed


59 
__dev_t
 
	tdev_t
;

60 
	#__dev_t_deföed


	)

63 #i‚de‡
__gid_t_deföed


64 
__gid_t
 
	tgid_t
;

65 
	#__gid_t_deföed


	)

68 #i‚de‡
__mode_t_deföed


69 
__mode_t
 
	tmode_t
;

70 
	#__mode_t_deföed


	)

73 #i‚de‡
__∆ök_t_deföed


74 
__∆ök_t
 
	t∆ök_t
;

75 
	#__∆ök_t_deföed


	)

78 #i‚de‡
__uid_t_deföed


79 
__uid_t
 
	tuid_t
;

80 
	#__uid_t_deföed


	)

83 #i‚de‡
__off_t_deföed


84 #i‚de‡
__USE_FILE_OFFSET64


85 
__off_t
 
	toff_t
;

87 
__off64_t
 
	toff_t
;

89 
	#__off_t_deföed


	)

91 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


92 
__off64_t
 
	toff64_t
;

93 
	#__off64_t_deföed


	)

96 #i‚de‡
__pid_t_deföed


97 
__pid_t
 
	tpid_t
;

98 
	#__pid_t_deföed


	)

101 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

102 && !
deföed
 
__id_t_deföed


103 
__id_t
 
	tid_t
;

104 
	#__id_t_deföed


	)

107 #i‚de‡
__ssize_t_deföed


108 
__ssize_t
 
	tssize_t
;

109 
	#__ssize_t_deföed


	)

112 #ifdef 
__USE_MISC


113 #i‚de‡
__daddr_t_deföed


114 
__daddr_t
 
	tdaddr_t
;

115 
__ˇddr_t
 
	tˇddr_t
;

116 
	#__daddr_t_deföed


	)

120 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


121 
__key_t
 
	tkey_t
;

122 
	#__key_t_deföed


	)

125 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


126 
	~<bôs/ty≥s/˛ock_t.h
>

128 
	~<bôs/ty≥s/˛ockid_t.h
>

129 
	~<bôs/ty≥s/time_t.h
>

130 
	~<bôs/ty≥s/timî_t.h
>

132 #ifde‡
__USE_XOPEN


133 #i‚de‡
__u£c⁄ds_t_deföed


134 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

135 
	#__u£c⁄ds_t_deföed


	)

137 #i‚de‡
__su£c⁄ds_t_deföed


138 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

139 
	#__su£c⁄ds_t_deföed


	)

143 
	#__√ed_size_t


	)

144 
	~<°ddef.h
>

146 #ifde‡
__USE_MISC


148 
	tul⁄g
;

149 
	tush‹t
;

150 
	tuöt
;

155 
	~<bôs/°döt-öä.h
>

158 
__uöt8_t
 
	tu_öt8_t
;

159 
__uöt16_t
 
	tu_öt16_t
;

160 
__uöt32_t
 
	tu_öt32_t
;

161 
__uöt64_t
 
	tu_öt64_t
;

163 #i‡
__GNUC_PREREQ
 (2, 7)

164 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

166 
	tªgi°î_t
;

171 
	#__BIT_TYPES_DEFINED__
 1

	)

174 #ifdef 
__USE_MISC


176 
	~<ídün.h
>

179 
	~<sys/£À˘.h
>

183 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

184 && !
deföed
 
__blksize_t_deföed


185 
__blksize_t
 
	tblksize_t
;

186 
	#__blksize_t_deföed


	)

190 #i‚de‡
__USE_FILE_OFFSET64


191 #i‚de‡
__blk˙t_t_deföed


192 
__blk˙t_t
 
	tblk˙t_t
;

193 
	#__blk˙t_t_deföed


	)

195 #i‚de‡
__fsblk˙t_t_deföed


196 
__fsblk˙t_t
 
	tfsblk˙t_t
;

197 
	#__fsblk˙t_t_deföed


	)

199 #i‚de‡
__fsfû˙t_t_deföed


200 
__fsfû˙t_t
 
	tfsfû˙t_t
;

201 
	#__fsfû˙t_t_deföed


	)

204 #i‚de‡
__blk˙t_t_deföed


205 
__blk˙t64_t
 
	tblk˙t_t
;

206 
	#__blk˙t_t_deföed


	)

208 #i‚de‡
__fsblk˙t_t_deföed


209 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

210 
	#__fsblk˙t_t_deföed


	)

212 #i‚de‡
__fsfû˙t_t_deföed


213 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

214 
	#__fsfû˙t_t_deföed


	)

218 #ifde‡
__USE_LARGEFILE64


219 
__blk˙t64_t
 
	tblk˙t64_t
;

220 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

221 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

226 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


227 
	~<bôs/±hªadty≥s.h
>

230 
	g__END_DECLS


	@/usr/include/termio.h

5 
	~<ãrmios.h
>

6 
	~<sys/io˘l.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

181 
	#__i¶óp
(
yór
) \

182 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

185 #ifde‡
__USE_MISC


190 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

193 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

196 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

200 #ifde‡
__USE_POSIX199309


205 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

206 
time•ec
 *
__ªmaöög
);

210 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

213 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

216 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

217 
__THROW
;

219 #ifde‡
__USE_XOPEN2K


224 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

225 c⁄° 
time•ec
 *
__ªq
,

226 
time•ec
 *
__ªm
);

229 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

234 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

235 
sigevít
 *
__ª°ri˘
 
__evp
,

236 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

239 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

242 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

243 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

244 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

247 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

248 
__THROW
;

251 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

255 #ifde‡
__USE_ISOC11


257 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1));

262 #ifde‡
__USE_XOPEN_EXTENDED


274 
gëd©e_îr
;

283 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

286 #ifde‡
__USE_GNU


297 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

298 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

301 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #ifde‡
__USE_MISC


784 
	$ây¶Ÿ
 (Ë
__THROW
;

789 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

792 #ifde‡
__USE_ATFILE


795 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

796 c⁄° *
__to
, 
__Êags
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

800 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


802 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

803 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

808 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

809 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

813 #ifde‡
__USE_ATFILE


815 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

816 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

819 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

820 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

825 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

827 #ifde‡
__USE_ATFILE


829 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

830 
__THROW
 
	`__n⁄nuŒ
 ((2));

834 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

841 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

848 *
	`gëlogö
 ();

849 #ifde‡
__USE_POSIX199506


856 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

859 #ifdef 
__USE_MISC


861 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

865 #ifdef 
__USE_POSIX2


869 
	~<bôs/gë›t_posix.h
>

873 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


877 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

881 #i‡
deföed
 
__USE_MISC


884 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

895 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

897 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

904 
	$vh™gup
 (Ë
__THROW
;

907 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

916 
size_t
 
__off£t
, 
__sˇÀ
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1));

923 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

927 *
	$gëu£rshñl
 (Ë
__THROW
;

928 
	$ídu£rshñl
 (Ë
__THROW
;

929 
	$£tu£rshñl
 (Ë
__THROW
;

935 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

939 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

942 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

946 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

954 
	`fsync
 (
__fd
);

957 #ifde‡
__USE_GNU


960 
	$syncfs
 (
__fd
Ë
__THROW
;

964 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


967 
	`gëho°id
 ();

970 
	$sync
 (Ë
__THROW
;

973 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


976 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

981 
	$gëdèbÀsize
 (Ë
__THROW
;

987 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


990 #i‚de‡
__USE_FILE_OFFSET64


991 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

992 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

994 #ifde‡
__REDIRECT_NTH


995 
	`__REDIRECT_NTH
 (
åunˇã
,

996 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

997 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 
	#åunˇã
 
åunˇã64


	)

1002 #ifde‡
__USE_LARGEFILE64


1003 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1009 #i‡
deföed
 
__USE_POSIX199309
 \

1010 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1013 #i‚de‡
__USE_FILE_OFFSET64


1014 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1016 #ifde‡
__REDIRECT_NTH


1017 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1018 
·runˇã64
Ë
__wur
;

1020 
	#·runˇã
 
·runˇã64


	)

1023 #ifde‡
__USE_LARGEFILE64


1024 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1030 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1031 || 
deföed
 
__USE_MISC


1035 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1041 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1045 #ifde‡
__USE_MISC


1056 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1061 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1073 
	#F_ULOCK
 0

	)

1074 
	#F_LOCK
 1

	)

1075 
	#F_TLOCK
 2

	)

1076 
	#F_TEST
 3

	)

1078 #i‚de‡
__USE_FILE_OFFSET64


1079 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1081 #ifde‡
__REDIRECT


1082 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1083 
lockf64
Ë
__wur
;

1085 
	#lockf
 
lockf64


	)

1088 #ifde‡
__USE_LARGEFILE64


1089 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1094 #ifde‡
__USE_GNU


1099 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1100 (
__exãnsi⁄__
 \

1101 ({ 
__ªsu…
; \

1102 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1103 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1104 
__ªsu…
; 
	}
}))

	)

1107 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1108 
__outfd
, 
__off64_t
 *
__poutoff
,

1109 
size_t
 
__Àngth
, 
__Êags
);

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1118 #ifde‡
__USE_MISC


1124 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1125 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 #ifdef 
__USE_XOPEN


1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1141 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1143 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1146 *
	`cu£rid
 (*
__s
);

1152 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1153 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1154 (*
__∑ª¡
) (),

1155 (*
__chûd
Ë()Ë
__THROW
;

1158 #ifde‡
__USE_MISC


1161 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1165 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1166 
	~<bôs/uni°d.h
>

1170 
	~<bôs/uni°d_ext.h
>

1172 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.11"

	)

41 
	#ZLIB_VERNUM
 0x12b0

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 11

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

81 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

82 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

84 
öã∫Æ_°©e
;

86 
	sz_°ªam_s
 {

87 
z_c⁄°
 
Byãf
 *
√xt_ö
;

88 
uI¡
 
avaû_ö
;

89 
uL⁄g
 
tŸÆ_ö
;

91 
Byãf
 *
√xt_out
;

92 
uI¡
 
avaû_out
;

93 
uL⁄g
 
tŸÆ_out
;

95 
z_c⁄°
 *
msg
;

96 
öã∫Æ_°©e
 
FAR
 *
°©e
;

98 
Æloc_func
 
zÆloc
;

99 
‰ì_func
 
z‰ì
;

100 
voidpf
 
›aque
;

102 
d©a_ty≥
;

104 
uL⁄g
 
adÀr
;

105 
uL⁄g
 
ª£rved
;

106 } 
	tz_°ªam
;

108 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

114 
	sgz_hódî_s
 {

115 
ãxt
;

116 
uL⁄g
 
time
;

117 
xÊags
;

118 
os
;

119 
Byãf
 *
exåa
;

120 
uI¡
 
exåa_Àn
;

121 
uI¡
 
exåa_max
;

122 
Byãf
 *
«me
;

123 
uI¡
 
«me_max
;

124 
Byãf
 *
commít
;

125 
uI¡
 
comm_max
;

126 
h¸c
;

127 
d⁄e
;

129 } 
	tgz_hódî
;

131 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

168 
	#Z_NO_FLUSH
 0

	)

169 
	#Z_PARTIAL_FLUSH
 1

	)

170 
	#Z_SYNC_FLUSH
 2

	)

171 
	#Z_FULL_FLUSH
 3

	)

172 
	#Z_FINISH
 4

	)

173 
	#Z_BLOCK
 5

	)

174 
	#Z_TREES
 6

	)

177 
	#Z_OK
 0

	)

178 
	#Z_STREAM_END
 1

	)

179 
	#Z_NEED_DICT
 2

	)

180 
	#Z_ERRNO
 (-1)

	)

181 
	#Z_STREAM_ERROR
 (-2)

	)

182 
	#Z_DATA_ERROR
 (-3)

	)

183 
	#Z_MEM_ERROR
 (-4)

	)

184 
	#Z_BUF_ERROR
 (-5)

	)

185 
	#Z_VERSION_ERROR
 (-6)

	)

190 
	#Z_NO_COMPRESSION
 0

	)

191 
	#Z_BEST_SPEED
 1

	)

192 
	#Z_BEST_COMPRESSION
 9

	)

193 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

196 
	#Z_FILTERED
 1

	)

197 
	#Z_HUFFMAN_ONLY
 2

	)

198 
	#Z_RLE
 3

	)

199 
	#Z_FIXED
 4

	)

200 
	#Z_DEFAULT_STRATEGY
 0

	)

203 
	#Z_BINARY
 0

	)

204 
	#Z_TEXT
 1

	)

205 
	#Z_ASCII
 
Z_TEXT


	)

206 
	#Z_UNKNOWN
 2

	)

209 
	#Z_DEFLATED
 8

	)

212 
	#Z_NULL
 0

	)

214 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

220 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

250 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

363 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

400 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

520 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

611 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

612 c⁄° 
Byãf
 *
di˘i⁄¨y
,

613 
uI¡
 
di˘Lígth
));

655 
ZEXTERN
 
ZEXPORT
 
deÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

656 
Byãf
 *
di˘i⁄¨y
,

657 
uI¡
 *
di˘Lígth
));

677 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

678 
z_°ªamp
 
sour˚
));

695 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

706 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

707 
Àvñ
,

708 
°øãgy
));

743 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

744 
good_Àngth
,

745 
max_œzy
,

746 
ni˚_Àngth
,

747 
max_chaö
));

760 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

761 
uL⁄g
 
sour˚Lí
));

775 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

776 *
≥ndög
,

777 *
bôs
));

790 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

791 
bôs
,

792 
vÆue
));

807 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

808 
gz_hódîp
 
hód
));

884 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

885 c⁄° 
Byãf
 *
di˘i⁄¨y
,

886 
uI¡
 
di˘Lígth
));

907 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

908 
Byãf
 *
di˘i⁄¨y
,

909 
uI¡
 *
di˘Lígth
));

922 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

941 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

942 
z_°ªamp
 
sour˚
));

957 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

967 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

968 
wödowBôs
));

981 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

982 
bôs
,

983 
vÆue
));

1002 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

1030 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

1031 
gz_hódîp
 
hód
));

1092 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1093 
	tz_c⁄°
 
	tFAR
 * FAR *));

1094 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1096 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1097 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1098 
out_func
 
out
, 
FAR
 *
out_desc
));

1166 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1174 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1215 #i‚de‡
Z_SOLO


1227 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1228 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1242 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1243 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1244 
Àvñ
));

1258 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1265 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1266 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1283 
ZEXTERN
 
ZEXPORT
 
uncom¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1284 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 *
sour˚Lí
));

1300 
gzFûe_s
 *
	tgzFûe
;

1340 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1363 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1379 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1390 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1420 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gz‰ód
 
OF
((
voidp
 
buf
, z_size_à
size
, z_size_à
nôems
,

1421 
gzFûe
 
fûe
));

1446 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1447 
voidpc
 
buf
, 
Àn
));

1454 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gzfwrôe
 
OF
((
voidpc
 
buf
, z_size_à
size
,

1455 
z_size_t
 
nôems
, 
gzFûe
 
fûe
));

1468 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1483 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1491 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1504 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1510 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1519 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1531 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1566 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1594 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1609 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1630 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1643 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1644 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1655 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1671 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1688 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1707 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1708 
z_size_t
 
Àn
));

1725 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1742 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1743 
z_size_t
 
Àn
));

1764 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1765 c⁄° *
vîsi⁄
, 
°ªam_size
));

1766 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1767 c⁄° *
vîsi⁄
, 
°ªam_size
));

1768 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1769 
wödowBôs
, 
memLevñ
,

1770 
°øãgy
, c⁄° *
vîsi⁄
,

1771 
°ªam_size
));

1772 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1773 c⁄° *
vîsi⁄
, 
°ªam_size
));

1774 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1775 
FAR
 *
wödow
,

1776 c⁄° *
vîsi⁄
,

1777 
°ªam_size
));

1778 #ifde‡
Z_PREFIX_SET


1779 
	#z_deÊ©eInô
(
°rm
, 
Àvñ
) \

1780 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1781 
	#z_öÊ©eInô
(
°rm
) \

1782 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1783 
	#z_deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1784 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1785 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1786 
	#z_öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1787 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1788 ()(
z_°ªam
))

	)

1789 
	#z_öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1790 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1791 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1793 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1794 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1795 
	#öÊ©eInô
(
°rm
) \

1796 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1797 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1798 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1799 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1800 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1801 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1802 ()(
z_°ªam
))

	)

1803 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1804 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1805 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1808 #i‚de‡
Z_SOLO


1817 
	sgzFûe_s
 {

1818 
have
;

1819 *
√xt
;

1820 
z_off64_t
 
pos
;

1822 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1823 #ifde‡
Z_PREFIX_SET


1824 #unde‡
z_gzgëc


1825 
	#z_gzgëc
(
g
) \

1826 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1828 
	#gzgëc
(
g
) \

1829 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1838 #ifde‡
Z_LARGE64


1839 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1840 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1841 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1842 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1843 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1844 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1847 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1848 #ifde‡
Z_PREFIX_SET


1849 
	#z_gz›í
 
z_gz›í64


	)

1850 
	#z_gz£ek
 
z_gz£ek64


	)

1851 
	#z_gzãŒ
 
z_gzãŒ64


	)

1852 
	#z_gzoff£t
 
z_gzoff£t64


	)

1853 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1854 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1856 
	#gz›í
 
gz›í64


	)

1857 
	#gz£ek
 
gz£ek64


	)

1858 
	#gzãŒ
 
gzãŒ64


	)

1859 
	#gzoff£t
 
gzoff£t64


	)

1860 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1861 
	#¸c32_comböe
 
¸c32_comböe64


	)

1863 #i‚de‡
Z_LARGE64


1864 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1865 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1866 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1867 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1868 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1869 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1872 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1873 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1874 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1875 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1876 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1877 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1882 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1883 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1888 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1889 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1890 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1891 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1892 
ZEXTERN
 
ZEXPORT
 
öÊ©eVÆid©e
 
OF
((
z_°ªamp
, ));

1893 
ZEXTERN
 
ZEXPORT
 
öÊ©eCodesU£d
 
OF
 ((
z_°ªamp
));

1894 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1895 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1896 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__CYGWIN__
)Ë&& !deföed(
Z_SOLO
)

1897 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1898 c⁄° *
mode
));

1900 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1901 #i‚de‡
Z_SOLO


1902 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1903 c⁄° *
f‹m©
,

1904 
va_li°
 
va
));

1908 #ifde‡
__˝lu•lus


	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xarch.h

1 #i‚de‡
_XARCH_H_


2 
	#_XARCH_H_


	)

35 #ifde‡
X_BYTE_ORDER


37 
	#X_BIG_ENDIAN
 4321

	)

38 
	#X_LITTLE_ENDIAN
 1234

	)

42 #i‡
deföed
(
SVR4
Ë|| deföed(
__SVR4
)

43 
	~<sys/ty≥s.h
>

44 
	~<sys/byã‹dî.h
>

45 #ñi‡
deföed
(
CSRG_BASED
)

46 #i‡
deföed
(
__NëBSD__
Ë|| deföed(
__O≥nBSD__
)

47 
	~<sys/ty≥s.h
>

49 
	~<machöe/ídün.h
>

50 #ñi‡
deföed
(
löux
)

51 #i‡
deföed
 
__STRICT_ANSI__


52 #unde‡
__STRICT_ANSI__


53 
	~<ídün.h
>

54 
	#__STRICT_ANSI__


	)

56 
	~<ídün.h
>

59 #i‡!
deföed
(
LITTLE_ENDIAN
Ë&& deföed(
__LITTLE_ENDIAN
)

60 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

62 #i‡!
deföed
(
BIG_ENDIAN
Ë&& deföed(
__BIG_ENDIAN
)

63 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

65 #i‡!
deföed
(
PDP_ENDIAN
Ë&& deföed(
__PDP_ENDIAN
)

66 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

68 #i‡!
deföed
(
BYTE_ORDER
Ë&& deföed(
__BYTE_ORDER
)

69 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

73 #i‚de‡
BYTE_ORDER


74 
	#LITTLE_ENDIAN
 1234

	)

75 
	#BIG_ENDIAN
 4321

	)

77 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

78 
	~<sys/iß_defs.h
>

79 #ifde‡
_LITTLE_ENDIAN


80 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

82 #ifde‡
_BIG_ENDIAN


83 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

88 
	#X_BYTE_ORDER
 
BYTE_ORDER


	)

89 
	#X_BIG_ENDIAN
 
BIG_ENDIAN


	)

90 
	#X_LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

	@/usr/include/X11/Xfuncproto.h

29 #i‚de‡
_XFUNCPROTO_H_


30 
	#_XFUNCPROTO_H_


	)

32 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


33 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

36 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


37 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

40 #i‡
NìdFun˘i⁄PrŸŸy≥s


42 #i‚de‡
NìdNe°edPrŸŸy≥s


43 
	#NìdNe°edPrŸŸy≥s
 1

	)

46 #i‚de‡
_Xc⁄°


47 
	#_Xc⁄°
 c⁄°

	)

51 #i‡!
deföed
(
NARROWPROTO
) && \

52 (
deföed
(
__löux__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
__NëBSD__
Ë|| 
	$deföed
(
__O≥nBSD__
))

53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
	`deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 
	}

	)
}

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‚de‡
__has_©åibuã


81 
	#__has_©åibuã
(
x
Ë0

	)

83 #i‚de‡
__has_„©uª


84 
	#__has_„©uª
(
x
Ë0

	)

86 #i‚de‡
__has_exãnsi⁄


87 
	#__has_exãnsi⁄
(
x
Ë0

	)

91 #i‡
__has_©åibuã
(
__£¡öñ__
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))

92 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

94 
	#_X_SENTINEL
(
x
)

	)

98 #i‡(
__has_©åibuã
(
visibûôy
Ë|| (
deföed
(
__GNUC__
) && (__GNUC__ >= 4))) \

99 && !
deföed
(
__CYGWIN__
Ë&& !
	$deföed
(
__MINGW32__
)

100 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

101 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

102 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

103 #ñi‡
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

104 
	#_X_EXPORT
 
__globÆ


	)

105 
	#_X_HIDDEN
 
__hiddí


	)

106 
	#_X_INTERNAL
 
__hiddí


	)

108 
	#_X_EXPORT


	)

109 
	#_X_HIDDEN


	)

110 
	#_X_INTERNAL


	)

115 #i‡
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

116 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

117 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

119 
	#_X_LIKELY
(
x
Ë(x)

	)

120 
	#_X_UNLIKELY
(
x
Ë(x)

	)

125 #i‡
	`__has_©åibuã
(
__cﬁd__
) || \

126 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 403))

127 
	#_X_COLD
 
	`__©åibuã__
((
__cﬁd__
))

	)

129 
	#_X_COLD


	)

133 #i‡
	`__has_©åibuã
(
dïªˇãd
) \

134 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)) \

135 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x5130))

136 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

138 
	#_X_DEPRECATED


	)

142 #i‡
	`__has_exãnsi⁄
(
©åibuã_dïªˇãd_wôh_mesßge
) || \

143 (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ >5Ë|| ((__GNUC__ =4Ë&& (
__GNUC_MINOR__
 >= 5))))

144 
	#_X_DEPRECATED_MSG
(
_msg
Ë
	`__©åibuã__
((
	`dïªˇãd
(_msg)))

	)

146 
	#_X_DEPRECATED_MSG
(
_msg
Ë
_X_DEPRECATED


	)

150 #i‡
	`__has_©åibuã
(
n‹ëu∫
) \

151 || (
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

152 || (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

153 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

155 
	#_X_NORETURN


	)

159 #i‡
	`__has_©åibuã
(
__f‹m©__
) \

160 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

161 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

163 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

169 #i‡
	`__has_©åibuã
(
n⁄nuŒ
) \

170 && 
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

171 
	#_X_NONNULL
(...Ë
	`__©åibuã__
((
	`n⁄nuŒ
(
__VA_ARGS__
)))

	)

172 #ñi‡
	`__has_©åibuã
(
n⁄nuŒ
) \

173 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

174 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

175 #ñi‡
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

176 
	#_X_NONNULL
(...Ë

	)

180 #i‡
	`__has_©åibuã
(
__unu£d__
) \

181 || 
	`deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

182 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

184 
	#_X_UNUSED


	)

190 #i‡
	`deföed
(
ölöe
) || \

191 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

192 (
	`deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

193 
	#_X_INLINE
 
ölöe


	)

194 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

195 
	#_X_INLINE
 
__ölöe__


	)

197 
	#_X_INLINE


	)

202 #i‚de‡
_X_RESTRICT_KYWD


203 #i‡
	`deföed
(
ª°ri˘
) || \

204 (
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L) \

205 && !
	$deföed
(
__˝lu•lus
))

206 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

207 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

208 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

210 
	#_X_RESTRICT_KYWD


	)

215 #i‡
	`__has_©åibuã
(
no_ßnôize_thªad
)

216 
	#_X_NOTSAN
 
	`__©åibuã__
((
no_ßnôize_thªad
))

	)

218 
	#_X_NOTSAN


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/X11/Xw32defs.h

1 #i‚de‡
_XW32DEFS_H


2 
	#_XW32DEFS_H


	)

4 #ifde‡
__GNUC__


5 #i‡!
deföed
(
__daddr_t_deföed
)

6 *
	tˇddr_t
;

8 
	#l°©
 
°©


	)

11 *
	tˇddr_t
;

13 
	#ac˚ss
 
_ac˚ss


	)

14 
	#Æloˇ
 
_Æloˇ


	)

15 
	#chdú
 
_chdú


	)

16 
	#chmod
 
_chmod


	)

17 
	#˛o£
 
_˛o£


	)

18 
	#¸ót
 
_¸ót


	)

19 
	#dup
 
_dup


	)

20 
	#dup2
 
_dup2


	)

21 
	#ívú⁄
 
_ívú⁄


	)

22 
	#exe˛
 
_exe˛


	)

23 
	#exe˛e
 
_exe˛e


	)

24 
	#exe˛p
 
_exe˛p


	)

25 
	#exe˛≥
 
_exe˛≥


	)

26 
	#execv
 
_execv


	)

27 
	#execve
 
_execve


	)

28 
	#execvp
 
_execvp


	)

29 
	#execv≥
 
_execv≥


	)

30 
	#fd›í
 
_fd›í


	)

31 
	#fûío
 
_fûío


	)

32 
	#f°©
 
_f°©


	)

33 
	#gëcwd
 
_gëcwd


	)

34 
	#gëpid
 
_gëpid


	)

35 
	#hypŸ
 
_hypŸ


	)

36 
	#ißscii
 
__ißscii


	)

37 
	#ißây
 
_ißây


	)

38 
	#l£ek
 
_l£ek


	)

39 
	#mkdú
 
_mkdú


	)

40 
	#mkãmp
 
_mkãmp


	)

41 
	#›í
 
_›í


	)

42 
	#puãnv
 
_puãnv


	)

43 
	#ªad
 
_ªad


	)

44 
	#rmdú
 
_rmdú


	)

45 
	#¶ìp
(
x
Ë
	`SÀï
((xË* 1000)

	)

46 
	#°©
 
_°©


	)

47 
	#sys_îæi°
 
_sys_îæi°


	)

48 
	#sys_√º
 
_sys_√º


	)

49 
	#umask
 
_umask


	)

50 
	#u∆ök
 
_u∆ök


	)

51 
	#wrôe
 
_wrôe


	)

52 
	#øndom
 
ønd


	)

53 
	#§™dom
 
§™d


	)

55 
	#O_RDONLY
 
_O_RDONLY


	)

56 
	#O_WRONLY
 
_O_WRONLY


	)

57 
	#O_RDWR
 
_O_RDWR


	)

58 
	#O_APPEND
 
_O_APPEND


	)

59 
	#O_CREAT
 
_O_CREAT


	)

60 
	#O_TRUNC
 
_O_TRUNC


	)

61 
	#O_EXCL
 
_O_EXCL


	)

62 
	#O_TEXT
 
_O_TEXT


	)

63 
	#O_BINARY
 
_O_BINARY


	)

64 
	#O_RAW
 
_O_BINARY


	)

66 
	#S_IFMT
 
_S_IFMT


	)

67 
	#S_IFDIR
 
_S_IFDIR


	)

68 
	#S_IFCHR
 
_S_IFCHR


	)

69 
	#S_IFREG
 
_S_IFREG


	)

70 
	#S_IREAD
 
_S_IREAD


	)

71 
	#S_IWRITE
 
_S_IWRITE


	)

72 
	#S_IEXEC
 
_S_IEXEC


	)

74 
	#F_OK
 0

	)

75 
	#X_OK
 1

	)

76 
	#W_OK
 2

	)

77 
	#R_OK
 4

	)

	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_lowlöe
 0x„90

	)

419 
	#XK_dód_abovevîtiˇŒöe
 0x„91

	)

420 
	#XK_dód_bñowvîtiˇŒöe
 0x„92

	)

421 
	#XK_dód_l⁄gsﬁidusovîœy
 0x„93

	)

424 
	#XK_dód_a
 0x„80

	)

425 
	#XK_dód_A
 0x„81

	)

426 
	#XK_dód_e
 0x„82

	)

427 
	#XK_dód_E
 0x„83

	)

428 
	#XK_dód_i
 0x„84

	)

429 
	#XK_dód_I
 0x„85

	)

430 
	#XK_dód_o
 0x„86

	)

431 
	#XK_dód_O
 0x„87

	)

432 
	#XK_dód_u
 0x„88

	)

433 
	#XK_dód_U
 0x„89

	)

434 
	#XK_dód_smÆl_schwa
 0x„8a

	)

435 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

437 
	#XK_dód_gªek
 0x„8c

	)

439 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

440 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

441 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

442 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

443 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

445 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

446 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

447 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

448 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

449 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

450 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

451 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

452 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

453 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

454 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

455 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

457 
	#XK_Poöãr_Le·
 0x„e0

	)

458 
	#XK_Poöãr_Right
 0x„e1

	)

459 
	#XK_Poöãr_Up
 0x„e2

	)

460 
	#XK_Poöãr_Down
 0x„e3

	)

461 
	#XK_Poöãr_UpLe·
 0x„e4

	)

462 
	#XK_Poöãr_UpRight
 0x„e5

	)

463 
	#XK_Poöãr_DownLe·
 0x„e6

	)

464 
	#XK_Poöãr_DownRight
 0x„e7

	)

465 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

466 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

467 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

468 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

469 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

470 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

471 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

472 
	#XK_Poöãr_DblClick1
 0x„ef

	)

473 
	#XK_Poöãr_DblClick2
 0x„f0

	)

474 
	#XK_Poöãr_DblClick3
 0x„f1

	)

475 
	#XK_Poöãr_DblClick4
 0x„f2

	)

476 
	#XK_Poöãr_DblClick5
 0x„f3

	)

477 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

478 
	#XK_Poöãr_Døg1
 0x„f5

	)

479 
	#XK_Poöãr_Døg2
 0x„f6

	)

480 
	#XK_Poöãr_Døg3
 0x„f7

	)

481 
	#XK_Poöãr_Døg4
 0x„f8

	)

482 
	#XK_Poöãr_Døg5
 0x„fd

	)

484 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

485 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

486 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

487 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

491 
	#XK_ch
 0x„a0

	)

492 
	#XK_Ch
 0x„a1

	)

493 
	#XK_CH
 0x„a2

	)

494 
	#XK_c_h
 0x„a3

	)

495 
	#XK_C_h
 0x„a4

	)

496 
	#XK_C_H
 0x„a5

	)

505 #ifde‡
XK_3270


506 
	#XK_3270_Du∂iˇã
 0xfd01

	)

507 
	#XK_3270_FõldM¨k
 0xfd02

	)

508 
	#XK_3270_Right2
 0xfd03

	)

509 
	#XK_3270_Le·2
 0xfd04

	)

510 
	#XK_3270_BackTab
 0xfd05

	)

511 
	#XK_3270_Eø£EOF
 0xfd06

	)

512 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

513 
	#XK_3270_Re£t
 0xfd08

	)

514 
	#XK_3270_Quô
 0xfd09

	)

515 
	#XK_3270_PA1
 0xfd0a

	)

516 
	#XK_3270_PA2
 0xfd0b

	)

517 
	#XK_3270_PA3
 0xfd0c

	)

518 
	#XK_3270_Te°
 0xfd0d

	)

519 
	#XK_3270_Aân
 0xfd0e

	)

520 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

521 
	#XK_3270_A…Curs‹
 0xfd10

	)

522 
	#XK_3270_KeyClick
 0xfd11

	)

523 
	#XK_3270_Jump
 0xfd12

	)

524 
	#XK_3270_Idít
 0xfd13

	)

525 
	#XK_3270_RuÀ
 0xfd14

	)

526 
	#XK_3270_C›y
 0xfd15

	)

527 
	#XK_3270_Pœy
 0xfd16

	)

528 
	#XK_3270_Sëup
 0xfd17

	)

529 
	#XK_3270_Rec‹d
 0xfd18

	)

530 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

531 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

532 
	#XK_3270_ExSñe˘
 0xfd1b

	)

533 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

534 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

535 
	#XK_3270_E¡î
 0xfd1e

	)

543 #ifde‡
XK_LATIN1


544 
	#XK_•a˚
 0x0020

	)

545 
	#XK_ex˛am
 0x0021

	)

546 
	#XK_quŸedbl
 0x0022

	)

547 
	#XK_numbîsign
 0x0023

	)

548 
	#XK_dﬁœr
 0x0024

	)

549 
	#XK_≥r˚¡
 0x0025

	)

550 
	#XK_am≥rßnd
 0x0026

	)

551 
	#XK_≠o°r›he
 0x0027

	)

552 
	#XK_quŸîight
 0x0027

	)

553 
	#XK_∑ª∆e·
 0x0028

	)

554 
	#XK_∑ªƒight
 0x0029

	)

555 
	#XK_a°îisk
 0x002®

	)

556 
	#XK_∂us
 0x002b

	)

557 
	#XK_comma
 0x002¯

	)

558 
	#XK_möus
 0x002d

	)

559 
	#XK_≥riod
 0x002ê

	)

560 
	#XK_¶ash
 0x002‡

	)

561 
	#XK_0
 0x0030

	)

562 
	#XK_1
 0x0031

	)

563 
	#XK_2
 0x0032

	)

564 
	#XK_3
 0x0033

	)

565 
	#XK_4
 0x0034

	)

566 
	#XK_5
 0x0035

	)

567 
	#XK_6
 0x0036

	)

568 
	#XK_7
 0x0037

	)

569 
	#XK_8
 0x0038

	)

570 
	#XK_9
 0x0039

	)

571 
	#XK_cﬁ⁄
 0x003®

	)

572 
	#XK_£micﬁ⁄
 0x003b

	)

573 
	#XK_Àss
 0x003¯

	)

574 
	#XK_equÆ
 0x003d

	)

575 
	#XK_gª©î
 0x003ê

	)

576 
	#XK_que°i⁄
 0x003‡

	)

577 
	#XK_©
 0x0040

	)

578 
	#XK_A
 0x0041

	)

579 
	#XK_B
 0x0042

	)

580 
	#XK_C
 0x0043

	)

581 
	#XK_D
 0x0044

	)

582 
	#XK_E
 0x0045

	)

583 
	#XK_F
 0x0046

	)

584 
	#XK_G
 0x0047

	)

585 
	#XK_H
 0x0048

	)

586 
	#XK_I
 0x0049

	)

587 
	#XK_J
 0x004®

	)

588 
	#XK_K
 0x004b

	)

589 
	#XK_L
 0x004¯

	)

590 
	#XK_M
 0x004d

	)

591 
	#XK_N
 0x004ê

	)

592 
	#XK_O
 0x004‡

	)

593 
	#XK_P
 0x0050

	)

594 
	#XK_Q
 0x0051

	)

595 
	#XK_R
 0x0052

	)

596 
	#XK_S
 0x0053

	)

597 
	#XK_T
 0x0054

	)

598 
	#XK_U
 0x0055

	)

599 
	#XK_V
 0x0056

	)

600 
	#XK_W
 0x0057

	)

601 
	#XK_X
 0x0058

	)

602 
	#XK_Y
 0x0059

	)

603 
	#XK_Z
 0x005®

	)

604 
	#XK_bøckëÀ·
 0x005b

	)

605 
	#XK_back¶ash
 0x005¯

	)

606 
	#XK_bøckëright
 0x005d

	)

607 
	#XK_asciicúcum
 0x005ê

	)

608 
	#XK_undîsc‹e
 0x005‡

	)

609 
	#XK_gøve
 0x0060

	)

610 
	#XK_quŸñe·
 0x0060

	)

611 
	#XK_a
 0x0061

	)

612 
	#XK_b
 0x0062

	)

613 
	#XK_c
 0x0063

	)

614 
	#XK_d
 0x0064

	)

615 
	#XK_e
 0x0065

	)

616 
	#XK_f
 0x0066

	)

617 
	#XK_g
 0x0067

	)

618 
	#XK_h
 0x0068

	)

619 
	#XK_i
 0x0069

	)

620 
	#XK_j
 0x006®

	)

621 
	#XK_k
 0x006b

	)

622 
	#XK_l
 0x006¯

	)

623 
	#XK_m
 0x006d

	)

624 
	#XK_n
 0x006ê

	)

625 
	#XK_o
 0x006‡

	)

626 
	#XK_p
 0x0070

	)

627 
	#XK_q
 0x0071

	)

628 
	#XK_r
 0x0072

	)

629 
	#XK_s
 0x0073

	)

630 
	#XK_t
 0x0074

	)

631 
	#XK_u
 0x0075

	)

632 
	#XK_v
 0x0076

	)

633 
	#XK_w
 0x0077

	)

634 
	#XK_x
 0x0078

	)

635 
	#XK_y
 0x0079

	)

636 
	#XK_z
 0x007®

	)

637 
	#XK_bø˚À·
 0x007b

	)

638 
	#XK_b¨
 0x007¯

	)

639 
	#XK_bø˚right
 0x007d

	)

640 
	#XK_asciôûde
 0x007ê

	)

642 
	#XK_nobªak•a˚
 0x00a0

	)

643 
	#XK_ex˛amdown
 0x00a1

	)

644 
	#XK_˚¡
 0x00a2

	)

645 
	#XK_°îlög
 0x00a3

	)

646 
	#XK_cuºícy
 0x00a4

	)

647 
	#XK_yí
 0x00a5

	)

648 
	#XK_brokíb¨
 0x00a6

	)

649 
	#XK_£˘i⁄
 0x00a7

	)

650 
	#XK_düîesis
 0x00a8

	)

651 
	#XK_c›yright
 0x00a9

	)

652 
	#XK_‹d„mööe
 0x00Ø

	)

653 
	#XK_guûÀmŸÀ·
 0x00ab

	)

654 
	#XK_nŸsign
 0x00a¯

	)

655 
	#XK_hyphí
 0x00ad

	)

656 
	#XK_ªgi°îed
 0x00´

	)

657 
	#XK_ma¸⁄
 0x00a‡

	)

658 
	#XK_degªe
 0x00b0

	)

659 
	#XK_∂usmöus
 0x00b1

	)

660 
	#XK_twosu≥ri‹
 0x00b2

	)

661 
	#XK_thªesu≥ri‹
 0x00b3

	)

662 
	#XK_acuã
 0x00b4

	)

663 
	#XK_mu
 0x00b5

	)

664 
	#XK_∑øgøph
 0x00b6

	)

665 
	#XK_≥riod˚¡îed
 0x00b7

	)

666 
	#XK_˚dûœ
 0x00b8

	)

667 
	#XK_⁄esu≥ri‹
 0x00b9

	)

668 
	#XK_masculöe
 0x00b®

	)

669 
	#XK_guûÀmŸright
 0x00bb

	)

670 
	#XK_⁄equ¨ãr
 0x00b¯

	)

671 
	#XK_⁄ehÆf
 0x00bd

	)

672 
	#XK_thªequ¨ãrs
 0x00bê

	)

673 
	#XK_que°i⁄down
 0x00b‡

	)

674 
	#XK_Agøve
 0x00c0

	)

675 
	#XK_Aacuã
 0x00c1

	)

676 
	#XK_AcúcumÊex
 0x00c2

	)

677 
	#XK_Atûde
 0x00c3

	)

678 
	#XK_Adüîesis
 0x00c4

	)

679 
	#XK_Arög
 0x00c5

	)

680 
	#XK_AE
 0x00c6

	)

681 
	#XK_C˚dûœ
 0x00c7

	)

682 
	#XK_Egøve
 0x00c8

	)

683 
	#XK_Eacuã
 0x00c9

	)

684 
	#XK_EcúcumÊex
 0x00ˇ

	)

685 
	#XK_Edüîesis
 0x00cb

	)

686 
	#XK_Igøve
 0x00c¯

	)

687 
	#XK_Iacuã
 0x00cd

	)

688 
	#XK_IcúcumÊex
 0x00˚

	)

689 
	#XK_Idüîesis
 0x00c‡

	)

690 
	#XK_ETH
 0x00d0

	)

691 
	#XK_Eth
 0x00d0

	)

692 
	#XK_Ntûde
 0x00d1

	)

693 
	#XK_Ogøve
 0x00d2

	)

694 
	#XK_Oacuã
 0x00d3

	)

695 
	#XK_OcúcumÊex
 0x00d4

	)

696 
	#XK_Otûde
 0x00d5

	)

697 
	#XK_Odüîesis
 0x00d6

	)

698 
	#XK_mu…ùly
 0x00d7

	)

699 
	#XK_O¶ash
 0x00d8

	)

700 
	#XK_Ooblique
 0x00d8

	)

701 
	#XK_Ugøve
 0x00d9

	)

702 
	#XK_Uacuã
 0x00d®

	)

703 
	#XK_UcúcumÊex
 0x00db

	)

704 
	#XK_Udüîesis
 0x00d¯

	)

705 
	#XK_Yacuã
 0x00dd

	)

706 
	#XK_THORN
 0x00dê

	)

707 
	#XK_Th‹n
 0x00dê

	)

708 
	#XK_ssh¨p
 0x00d‡

	)

709 
	#XK_agøve
 0x00e0

	)

710 
	#XK_Øcuã
 0x00e1

	)

711 
	#XK_acúcumÊex
 0x00e2

	)

712 
	#XK_©ûde
 0x00e3

	)

713 
	#XK_adüîesis
 0x00e4

	)

714 
	#XK_¨ög
 0x00e5

	)

715 
	#XK_´
 0x00e6

	)

716 
	#XK_c˚dûœ
 0x00e7

	)

717 
	#XK_egøve
 0x00e8

	)

718 
	#XK_ócuã
 0x00e9

	)

719 
	#XK_ecúcumÊex
 0x00ó

	)

720 
	#XK_edüîesis
 0x00eb

	)

721 
	#XK_igøve
 0x00e¯

	)

722 
	#XK_ücuã
 0x00ed

	)

723 
	#XK_icúcumÊex
 0x00ì

	)

724 
	#XK_idüîesis
 0x00e‡

	)

725 
	#XK_ëh
 0x00f0

	)

726 
	#XK_¡ûde
 0x00f1

	)

727 
	#XK_ogøve
 0x00f2

	)

728 
	#XK_ﬂcuã
 0x00f3

	)

729 
	#XK_ocúcumÊex
 0x00f4

	)

730 
	#XK_Ÿûde
 0x00f5

	)

731 
	#XK_odüîesis
 0x00f6

	)

732 
	#XK_divisi⁄
 0x00f7

	)

733 
	#XK_o¶ash
 0x00f8

	)

734 
	#XK_ooblique
 0x00f8

	)

735 
	#XK_ugøve
 0x00f9

	)

736 
	#XK_uacuã
 0x00Á

	)

737 
	#XK_ucúcumÊex
 0x00fb

	)

738 
	#XK_udüîesis
 0x00f¯

	)

739 
	#XK_yacuã
 0x00fd

	)

740 
	#XK_th‹n
 0x00„

	)

741 
	#XK_ydüîesis
 0x00f‡

	)

749 #ifde‡
XK_LATIN2


750 
	#XK_Aog⁄ek
 0x01a1

	)

751 
	#XK_bªve
 0x01a2

	)

752 
	#XK_L°roke
 0x01a3

	)

753 
	#XK_Lˇr⁄
 0x01a5

	)

754 
	#XK_Sacuã
 0x01a6

	)

755 
	#XK_Sˇr⁄
 0x01a9

	)

756 
	#XK_S˚dûœ
 0x01Ø

	)

757 
	#XK_Tˇr⁄
 0x01ab

	)

758 
	#XK_Zacuã
 0x01a¯

	)

759 
	#XK_Zˇr⁄
 0x01´

	)

760 
	#XK_ZabovedŸ
 0x01a‡

	)

761 
	#XK_aog⁄ek
 0x01b1

	)

762 
	#XK_og⁄ek
 0x01b2

	)

763 
	#XK_l°roke
 0x01b3

	)

764 
	#XK_lˇr⁄
 0x01b5

	)

765 
	#XK_ßcuã
 0x01b6

	)

766 
	#XK_ˇr⁄
 0x01b7

	)

767 
	#XK_sˇr⁄
 0x01b9

	)

768 
	#XK_s˚dûœ
 0x01b®

	)

769 
	#XK_tˇr⁄
 0x01bb

	)

770 
	#XK_zacuã
 0x01b¯

	)

771 
	#XK_doubÀacuã
 0x01bd

	)

772 
	#XK_zˇr⁄
 0x01bê

	)

773 
	#XK_zabovedŸ
 0x01b‡

	)

774 
	#XK_Racuã
 0x01c0

	)

775 
	#XK_Abªve
 0x01c3

	)

776 
	#XK_Lacuã
 0x01c5

	)

777 
	#XK_Cacuã
 0x01c6

	)

778 
	#XK_Cˇr⁄
 0x01c8

	)

779 
	#XK_Eog⁄ek
 0x01ˇ

	)

780 
	#XK_Eˇr⁄
 0x01c¯

	)

781 
	#XK_Dˇr⁄
 0x01c‡

	)

782 
	#XK_D°roke
 0x01d0

	)

783 
	#XK_Nacuã
 0x01d1

	)

784 
	#XK_Nˇr⁄
 0x01d2

	)

785 
	#XK_OdoubÀacuã
 0x01d5

	)

786 
	#XK_Rˇr⁄
 0x01d8

	)

787 
	#XK_Urög
 0x01d9

	)

788 
	#XK_UdoubÀacuã
 0x01db

	)

789 
	#XK_T˚dûœ
 0x01dê

	)

790 
	#XK_øcuã
 0x01e0

	)

791 
	#XK_abªve
 0x01e3

	)

792 
	#XK_œcuã
 0x01e5

	)

793 
	#XK_ˇcuã
 0x01e6

	)

794 
	#XK_cˇr⁄
 0x01e8

	)

795 
	#XK_eog⁄ek
 0x01ó

	)

796 
	#XK_eˇr⁄
 0x01e¯

	)

797 
	#XK_dˇr⁄
 0x01e‡

	)

798 
	#XK_d°roke
 0x01f0

	)

799 
	#XK_«cuã
 0x01f1

	)

800 
	#XK_nˇr⁄
 0x01f2

	)

801 
	#XK_odoubÀacuã
 0x01f5

	)

802 
	#XK_rˇr⁄
 0x01f8

	)

803 
	#XK_urög
 0x01f9

	)

804 
	#XK_udoubÀacuã
 0x01fb

	)

805 
	#XK_t˚dûœ
 0x01„

	)

806 
	#XK_abovedŸ
 0x01f‡

	)

814 #ifde‡
XK_LATIN3


815 
	#XK_H°roke
 0x02a1

	)

816 
	#XK_HcúcumÊex
 0x02a6

	)

817 
	#XK_IabovedŸ
 0x02a9

	)

818 
	#XK_Gbªve
 0x02ab

	)

819 
	#XK_JcúcumÊex
 0x02a¯

	)

820 
	#XK_h°roke
 0x02b1

	)

821 
	#XK_hcúcumÊex
 0x02b6

	)

822 
	#XK_idŸÀss
 0x02b9

	)

823 
	#XK_gbªve
 0x02bb

	)

824 
	#XK_jcúcumÊex
 0x02b¯

	)

825 
	#XK_CabovedŸ
 0x02c5

	)

826 
	#XK_CcúcumÊex
 0x02c6

	)

827 
	#XK_GabovedŸ
 0x02d5

	)

828 
	#XK_GcúcumÊex
 0x02d8

	)

829 
	#XK_Ubªve
 0x02dd

	)

830 
	#XK_ScúcumÊex
 0x02dê

	)

831 
	#XK_ˇbovedŸ
 0x02e5

	)

832 
	#XK_ccúcumÊex
 0x02e6

	)

833 
	#XK_gabovedŸ
 0x02f5

	)

834 
	#XK_gcúcumÊex
 0x02f8

	)

835 
	#XK_ubªve
 0x02fd

	)

836 
	#XK_scúcumÊex
 0x02„

	)

845 #ifde‡
XK_LATIN4


846 
	#XK_kø
 0x03a2

	)

847 
	#XK_k≠∑
 0x03a2

	)

848 
	#XK_R˚dûœ
 0x03a3

	)

849 
	#XK_Itûde
 0x03a5

	)

850 
	#XK_L˚dûœ
 0x03a6

	)

851 
	#XK_Ema¸⁄
 0x03Ø

	)

852 
	#XK_G˚dûœ
 0x03ab

	)

853 
	#XK_T¶ash
 0x03a¯

	)

854 
	#XK_r˚dûœ
 0x03b3

	)

855 
	#XK_ôûde
 0x03b5

	)

856 
	#XK_l˚dûœ
 0x03b6

	)

857 
	#XK_ema¸⁄
 0x03b®

	)

858 
	#XK_g˚dûœ
 0x03bb

	)

859 
	#XK_t¶ash
 0x03b¯

	)

860 
	#XK_ENG
 0x03bd

	)

861 
	#XK_íg
 0x03b‡

	)

862 
	#XK_Ama¸⁄
 0x03c0

	)

863 
	#XK_Iog⁄ek
 0x03c7

	)

864 
	#XK_EabovedŸ
 0x03c¯

	)

865 
	#XK_Ima¸⁄
 0x03c‡

	)

866 
	#XK_N˚dûœ
 0x03d1

	)

867 
	#XK_Oma¸⁄
 0x03d2

	)

868 
	#XK_K˚dûœ
 0x03d3

	)

869 
	#XK_Uog⁄ek
 0x03d9

	)

870 
	#XK_Utûde
 0x03dd

	)

871 
	#XK_Uma¸⁄
 0x03dê

	)

872 
	#XK_ama¸⁄
 0x03e0

	)

873 
	#XK_iog⁄ek
 0x03e7

	)

874 
	#XK_óbovedŸ
 0x03e¯

	)

875 
	#XK_ima¸⁄
 0x03e‡

	)

876 
	#XK_n˚dûœ
 0x03f1

	)

877 
	#XK_oma¸⁄
 0x03f2

	)

878 
	#XK_k˚dûœ
 0x03f3

	)

879 
	#XK_uog⁄ek
 0x03f9

	)

880 
	#XK_utûde
 0x03fd

	)

881 
	#XK_uma¸⁄
 0x03„

	)

887 #ifde‡
XK_LATIN8


888 
	#XK_WcúcumÊex
 0x1000174

	)

889 
	#XK_wcúcumÊex
 0x1000175

	)

890 
	#XK_YcúcumÊex
 0x1000176

	)

891 
	#XK_ycúcumÊex
 0x1000177

	)

892 
	#XK_BabovedŸ
 0x1001e02

	)

893 
	#XK_babovedŸ
 0x1001e03

	)

894 
	#XK_DabovedŸ
 0x1001e0®

	)

895 
	#XK_dabovedŸ
 0x1001e0b

	)

896 
	#XK_FabovedŸ
 0x1001e1ê

	)

897 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

898 
	#XK_MabovedŸ
 0x1001e40

	)

899 
	#XK_mabovedŸ
 0x1001e41

	)

900 
	#XK_PabovedŸ
 0x1001e56

	)

901 
	#XK_∑bovedŸ
 0x1001e57

	)

902 
	#XK_SabovedŸ
 0x1001e60

	)

903 
	#XK_ßbovedŸ
 0x1001e61

	)

904 
	#XK_TabovedŸ
 0x1001e6®

	)

905 
	#XK_èbovedŸ
 0x1001e6b

	)

906 
	#XK_Wgøve
 0x1001e80

	)

907 
	#XK_wgøve
 0x1001e81

	)

908 
	#XK_Wacuã
 0x1001e82

	)

909 
	#XK_wacuã
 0x1001e83

	)

910 
	#XK_Wdüîesis
 0x1001e84

	)

911 
	#XK_wdüîesis
 0x1001e85

	)

912 
	#XK_Ygøve
 0x1001ef2

	)

913 
	#XK_ygøve
 0x1001ef3

	)

921 #ifde‡
XK_LATIN9


922 
	#XK_OE
 0x13b¯

	)

923 
	#XK_€
 0x13bd

	)

924 
	#XK_Ydüîesis
 0x13bê

	)

932 #ifde‡
XK_KATAKANA


933 
	#XK_ovîlöe
 0x047ê

	)

934 
	#XK_k™a_fuŒ°›
 0x04a1

	)

935 
	#XK_k™a_›íögbøckë
 0x04a2

	)

936 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

937 
	#XK_k™a_comma
 0x04a4

	)

938 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

939 
	#XK_k™a_middÀdŸ
 0x04a5

	)

940 
	#XK_k™a_WO
 0x04a6

	)

941 
	#XK_k™a_a
 0x04a7

	)

942 
	#XK_k™a_i
 0x04a8

	)

943 
	#XK_k™a_u
 0x04a9

	)

944 
	#XK_k™a_e
 0x04Ø

	)

945 
	#XK_k™a_o
 0x04ab

	)

946 
	#XK_k™a_ya
 0x04a¯

	)

947 
	#XK_k™a_yu
 0x04ad

	)

948 
	#XK_k™a_yo
 0x04´

	)

949 
	#XK_k™a_tsu
 0x04a‡

	)

950 
	#XK_k™a_tu
 0x04a‡

	)

951 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

952 
	#XK_k™a_A
 0x04b1

	)

953 
	#XK_k™a_I
 0x04b2

	)

954 
	#XK_k™a_U
 0x04b3

	)

955 
	#XK_k™a_E
 0x04b4

	)

956 
	#XK_k™a_O
 0x04b5

	)

957 
	#XK_k™a_KA
 0x04b6

	)

958 
	#XK_k™a_KI
 0x04b7

	)

959 
	#XK_k™a_KU
 0x04b8

	)

960 
	#XK_k™a_KE
 0x04b9

	)

961 
	#XK_k™a_KO
 0x04b®

	)

962 
	#XK_k™a_SA
 0x04bb

	)

963 
	#XK_k™a_SHI
 0x04b¯

	)

964 
	#XK_k™a_SU
 0x04bd

	)

965 
	#XK_k™a_SE
 0x04bê

	)

966 
	#XK_k™a_SO
 0x04b‡

	)

967 
	#XK_k™a_TA
 0x04c0

	)

968 
	#XK_k™a_CHI
 0x04c1

	)

969 
	#XK_k™a_TI
 0x04c1

	)

970 
	#XK_k™a_TSU
 0x04c2

	)

971 
	#XK_k™a_TU
 0x04c2

	)

972 
	#XK_k™a_TE
 0x04c3

	)

973 
	#XK_k™a_TO
 0x04c4

	)

974 
	#XK_k™a_NA
 0x04c5

	)

975 
	#XK_k™a_NI
 0x04c6

	)

976 
	#XK_k™a_NU
 0x04c7

	)

977 
	#XK_k™a_NE
 0x04c8

	)

978 
	#XK_k™a_NO
 0x04c9

	)

979 
	#XK_k™a_HA
 0x04ˇ

	)

980 
	#XK_k™a_HI
 0x04cb

	)

981 
	#XK_k™a_FU
 0x04c¯

	)

982 
	#XK_k™a_HU
 0x04c¯

	)

983 
	#XK_k™a_HE
 0x04cd

	)

984 
	#XK_k™a_HO
 0x04˚

	)

985 
	#XK_k™a_MA
 0x04c‡

	)

986 
	#XK_k™a_MI
 0x04d0

	)

987 
	#XK_k™a_MU
 0x04d1

	)

988 
	#XK_k™a_ME
 0x04d2

	)

989 
	#XK_k™a_MO
 0x04d3

	)

990 
	#XK_k™a_YA
 0x04d4

	)

991 
	#XK_k™a_YU
 0x04d5

	)

992 
	#XK_k™a_YO
 0x04d6

	)

993 
	#XK_k™a_RA
 0x04d7

	)

994 
	#XK_k™a_RI
 0x04d8

	)

995 
	#XK_k™a_RU
 0x04d9

	)

996 
	#XK_k™a_RE
 0x04d®

	)

997 
	#XK_k™a_RO
 0x04db

	)

998 
	#XK_k™a_WA
 0x04d¯

	)

999 
	#XK_k™a_N
 0x04dd

	)

1000 
	#XK_voi˚dsound
 0x04dê

	)

1001 
	#XK_£mivoi˚dsound
 0x04d‡

	)

1002 
	#XK_k™a_swôch
 0xff7ê

	)

1010 #ifde‡
XK_ARABIC


1011 
	#XK_F¨si_0
 0x10006f0

	)

1012 
	#XK_F¨si_1
 0x10006f1

	)

1013 
	#XK_F¨si_2
 0x10006f2

	)

1014 
	#XK_F¨si_3
 0x10006f3

	)

1015 
	#XK_F¨si_4
 0x10006f4

	)

1016 
	#XK_F¨si_5
 0x10006f5

	)

1017 
	#XK_F¨si_6
 0x10006f6

	)

1018 
	#XK_F¨si_7
 0x10006f7

	)

1019 
	#XK_F¨si_8
 0x10006f8

	)

1020 
	#XK_F¨si_9
 0x10006f9

	)

1021 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1022 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1023 
	#XK_Aøbic_âeh
 0x1000679

	)

1024 
	#XK_Aøbic_≥h
 0x100067ê

	)

1025 
	#XK_Aøbic_tcheh
 0x1000686

	)

1026 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1027 
	#XK_Aøbic_ºeh
 0x1000691

	)

1028 
	#XK_Aøbic_comma
 0x05a¯

	)

1029 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1030 
	#XK_Aøbic_0
 0x1000660

	)

1031 
	#XK_Aøbic_1
 0x1000661

	)

1032 
	#XK_Aøbic_2
 0x1000662

	)

1033 
	#XK_Aøbic_3
 0x1000663

	)

1034 
	#XK_Aøbic_4
 0x1000664

	)

1035 
	#XK_Aøbic_5
 0x1000665

	)

1036 
	#XK_Aøbic_6
 0x1000666

	)

1037 
	#XK_Aøbic_7
 0x1000667

	)

1038 
	#XK_Aøbic_8
 0x1000668

	)

1039 
	#XK_Aøbic_9
 0x1000669

	)

1040 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1041 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1042 
	#XK_Aøbic_hamza
 0x05c1

	)

1043 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1044 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1045 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1046 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1047 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1048 
	#XK_Aøbic_Æef
 0x05c7

	)

1049 
	#XK_Aøbic_beh
 0x05c8

	)

1050 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1051 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1052 
	#XK_Aøbic_theh
 0x05cb

	)

1053 
	#XK_Aøbic_jìm
 0x05c¯

	)

1054 
	#XK_Aøbic_hah
 0x05cd

	)

1055 
	#XK_Aøbic_khah
 0x05˚

	)

1056 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1057 
	#XK_Aøbic_thÆ
 0x05d0

	)

1058 
	#XK_Aøbic_ø
 0x05d1

	)

1059 
	#XK_Aøbic_zaö
 0x05d2

	)

1060 
	#XK_Aøbic_£í
 0x05d3

	)

1061 
	#XK_Aøbic_shìn
 0x05d4

	)

1062 
	#XK_Aøbic_ßd
 0x05d5

	)

1063 
	#XK_Aøbic_dad
 0x05d6

	)

1064 
	#XK_Aøbic_èh
 0x05d7

	)

1065 
	#XK_Aøbic_zah
 0x05d8

	)

1066 
	#XK_Aøbic_aö
 0x05d9

	)

1067 
	#XK_Aøbic_ghaö
 0x05d®

	)

1068 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1069 
	#XK_Aøbic_„h
 0x05e1

	)

1070 
	#XK_Aøbic_qaf
 0x05e2

	)

1071 
	#XK_Aøbic_kaf
 0x05e3

	)

1072 
	#XK_Aøbic_œm
 0x05e4

	)

1073 
	#XK_Aøbic_mìm
 0x05e5

	)

1074 
	#XK_Aøbic_no⁄
 0x05e6

	)

1075 
	#XK_Aøbic_ha
 0x05e7

	)

1076 
	#XK_Aøbic_heh
 0x05e7

	)

1077 
	#XK_Aøbic_waw
 0x05e8

	)

1078 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1079 
	#XK_Aøbic_yeh
 0x05ó

	)

1080 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1081 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1082 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1083 
	#XK_Aøbic_Átha
 0x05ì

	)

1084 
	#XK_Aøbic_damma
 0x05e‡

	)

1085 
	#XK_Aøbic_ka§a
 0x05f0

	)

1086 
	#XK_Aøbic_shadda
 0x05f1

	)

1087 
	#XK_Aøbic_sukun
 0x05f2

	)

1088 
	#XK_Aøbic_madda_above
 0x1000653

	)

1089 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1090 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1091 
	#XK_Aøbic_jeh
 0x1000698

	)

1092 
	#XK_Aøbic_veh
 0x10006a4

	)

1093 
	#XK_Aøbic_keheh
 0x10006a9

	)

1094 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1095 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1096 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1097 
	#XK_F¨si_yeh
 0x10006c¯

	)

1098 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1099 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1100 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1101 
	#XK_Aøbic_swôch
 0xff7ê

	)

1108 #ifde‡
XK_CYRILLIC


1109 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1110 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1111 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1112 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1113 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1114 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1115 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1116 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1117 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1118 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1119 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1120 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1121 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1122 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1123 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1124 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1125 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1126 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1127 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1128 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1129 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1130 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1132 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1133 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1134 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1135 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1136 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1137 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1138 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1139 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1141 
	#XK_Sîbün_dje
 0x06a1

	)

1142 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1143 
	#XK_Cyrûlic_io
 0x06a3

	)

1144 
	#XK_Ukøöün_õ
 0x06a4

	)

1145 
	#XK_Ukønün_je
 0x06a4

	)

1146 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1147 
	#XK_Ukøöün_i
 0x06a6

	)

1148 
	#XK_Ukønün_i
 0x06a6

	)

1149 
	#XK_Ukøöün_yi
 0x06a7

	)

1150 
	#XK_Ukønün_yi
 0x06a7

	)

1151 
	#XK_Cyrûlic_je
 0x06a8

	)

1152 
	#XK_Sîbün_je
 0x06a8

	)

1153 
	#XK_Cyrûlic_lje
 0x06a9

	)

1154 
	#XK_Sîbün_lje
 0x06a9

	)

1155 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1156 
	#XK_Sîbün_nje
 0x06Ø

	)

1157 
	#XK_Sîbün_tshe
 0x06ab

	)

1158 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1159 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1160 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1161 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1162 
	#XK_Sîbün_dze
 0x06a‡

	)

1163 
	#XK_numîosign
 0x06b0

	)

1164 
	#XK_Sîbün_DJE
 0x06b1

	)

1165 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1166 
	#XK_Cyrûlic_IO
 0x06b3

	)

1167 
	#XK_Ukøöün_IE
 0x06b4

	)

1168 
	#XK_Ukønün_JE
 0x06b4

	)

1169 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1170 
	#XK_Ukøöün_I
 0x06b6

	)

1171 
	#XK_Ukønün_I
 0x06b6

	)

1172 
	#XK_Ukøöün_YI
 0x06b7

	)

1173 
	#XK_Ukønün_YI
 0x06b7

	)

1174 
	#XK_Cyrûlic_JE
 0x06b8

	)

1175 
	#XK_Sîbün_JE
 0x06b8

	)

1176 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1177 
	#XK_Sîbün_LJE
 0x06b9

	)

1178 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1179 
	#XK_Sîbün_NJE
 0x06b®

	)

1180 
	#XK_Sîbün_TSHE
 0x06bb

	)

1181 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1182 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1183 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1184 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1185 
	#XK_Sîbün_DZE
 0x06b‡

	)

1186 
	#XK_Cyrûlic_yu
 0x06c0

	)

1187 
	#XK_Cyrûlic_a
 0x06c1

	)

1188 
	#XK_Cyrûlic_be
 0x06c2

	)

1189 
	#XK_Cyrûlic_t£
 0x06c3

	)

1190 
	#XK_Cyrûlic_de
 0x06c4

	)

1191 
	#XK_Cyrûlic_õ
 0x06c5

	)

1192 
	#XK_Cyrûlic_ef
 0x06c6

	)

1193 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1194 
	#XK_Cyrûlic_ha
 0x06c8

	)

1195 
	#XK_Cyrûlic_i
 0x06c9

	)

1196 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1197 
	#XK_Cyrûlic_ka
 0x06cb

	)

1198 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1199 
	#XK_Cyrûlic_em
 0x06cd

	)

1200 
	#XK_Cyrûlic_í
 0x06˚

	)

1201 
	#XK_Cyrûlic_o
 0x06c‡

	)

1202 
	#XK_Cyrûlic_≥
 0x06d0

	)

1203 
	#XK_Cyrûlic_ya
 0x06d1

	)

1204 
	#XK_Cyrûlic_î
 0x06d2

	)

1205 
	#XK_Cyrûlic_es
 0x06d3

	)

1206 
	#XK_Cyrûlic_ã
 0x06d4

	)

1207 
	#XK_Cyrûlic_u
 0x06d5

	)

1208 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1209 
	#XK_Cyrûlic_ve
 0x06d7

	)

1210 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1211 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1212 
	#XK_Cyrûlic_ze
 0x06d®

	)

1213 
	#XK_Cyrûlic_sha
 0x06db

	)

1214 
	#XK_Cyrûlic_e
 0x06d¯

	)

1215 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1216 
	#XK_Cyrûlic_che
 0x06dê

	)

1217 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1218 
	#XK_Cyrûlic_YU
 0x06e0

	)

1219 
	#XK_Cyrûlic_A
 0x06e1

	)

1220 
	#XK_Cyrûlic_BE
 0x06e2

	)

1221 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1222 
	#XK_Cyrûlic_DE
 0x06e4

	)

1223 
	#XK_Cyrûlic_IE
 0x06e5

	)

1224 
	#XK_Cyrûlic_EF
 0x06e6

	)

1225 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1226 
	#XK_Cyrûlic_HA
 0x06e8

	)

1227 
	#XK_Cyrûlic_I
 0x06e9

	)

1228 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1229 
	#XK_Cyrûlic_KA
 0x06eb

	)

1230 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1231 
	#XK_Cyrûlic_EM
 0x06ed

	)

1232 
	#XK_Cyrûlic_EN
 0x06ì

	)

1233 
	#XK_Cyrûlic_O
 0x06e‡

	)

1234 
	#XK_Cyrûlic_PE
 0x06f0

	)

1235 
	#XK_Cyrûlic_YA
 0x06f1

	)

1236 
	#XK_Cyrûlic_ER
 0x06f2

	)

1237 
	#XK_Cyrûlic_ES
 0x06f3

	)

1238 
	#XK_Cyrûlic_TE
 0x06f4

	)

1239 
	#XK_Cyrûlic_U
 0x06f5

	)

1240 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1241 
	#XK_Cyrûlic_VE
 0x06f7

	)

1242 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1243 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1244 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1245 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1246 
	#XK_Cyrûlic_E
 0x06f¯

	)

1247 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1248 
	#XK_Cyrûlic_CHE
 0x06„

	)

1249 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1258 #ifde‡
XK_GREEK


1259 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1260 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1261 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1262 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1263 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1264 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1265 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1266 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1267 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1268 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1269 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1270 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1271 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1272 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1273 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1274 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1275 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1276 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1277 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1278 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1279 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1280 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1281 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1282 
	#XK_Gªek_ALPHA
 0x07c1

	)

1283 
	#XK_Gªek_BETA
 0x07c2

	)

1284 
	#XK_Gªek_GAMMA
 0x07c3

	)

1285 
	#XK_Gªek_DELTA
 0x07c4

	)

1286 
	#XK_Gªek_EPSILON
 0x07c5

	)

1287 
	#XK_Gªek_ZETA
 0x07c6

	)

1288 
	#XK_Gªek_ETA
 0x07c7

	)

1289 
	#XK_Gªek_THETA
 0x07c8

	)

1290 
	#XK_Gªek_IOTA
 0x07c9

	)

1291 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1292 
	#XK_Gªek_LAMDA
 0x07cb

	)

1293 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1294 
	#XK_Gªek_MU
 0x07c¯

	)

1295 
	#XK_Gªek_NU
 0x07cd

	)

1296 
	#XK_Gªek_XI
 0x07˚

	)

1297 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1298 
	#XK_Gªek_PI
 0x07d0

	)

1299 
	#XK_Gªek_RHO
 0x07d1

	)

1300 
	#XK_Gªek_SIGMA
 0x07d2

	)

1301 
	#XK_Gªek_TAU
 0x07d4

	)

1302 
	#XK_Gªek_UPSILON
 0x07d5

	)

1303 
	#XK_Gªek_PHI
 0x07d6

	)

1304 
	#XK_Gªek_CHI
 0x07d7

	)

1305 
	#XK_Gªek_PSI
 0x07d8

	)

1306 
	#XK_Gªek_OMEGA
 0x07d9

	)

1307 
	#XK_Gªek_Æpha
 0x07e1

	)

1308 
	#XK_Gªek_bëa
 0x07e2

	)

1309 
	#XK_Gªek_gamma
 0x07e3

	)

1310 
	#XK_Gªek_dñè
 0x07e4

	)

1311 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1312 
	#XK_Gªek_zëa
 0x07e6

	)

1313 
	#XK_Gªek_ëa
 0x07e7

	)

1314 
	#XK_Gªek_thëa
 0x07e8

	)

1315 
	#XK_Gªek_iŸa
 0x07e9

	)

1316 
	#XK_Gªek_k≠∑
 0x07ó

	)

1317 
	#XK_Gªek_œmda
 0x07eb

	)

1318 
	#XK_Gªek_œmbda
 0x07eb

	)

1319 
	#XK_Gªek_mu
 0x07e¯

	)

1320 
	#XK_Gªek_nu
 0x07ed

	)

1321 
	#XK_Gªek_xi
 0x07ì

	)

1322 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1323 
	#XK_Gªek_pi
 0x07f0

	)

1324 
	#XK_Gªek_rho
 0x07f1

	)

1325 
	#XK_Gªek_sigma
 0x07f2

	)

1326 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1327 
	#XK_Gªek_èu
 0x07f4

	)

1328 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1329 
	#XK_Gªek_phi
 0x07f6

	)

1330 
	#XK_Gªek_chi
 0x07f7

	)

1331 
	#XK_Gªek_psi
 0x07f8

	)

1332 
	#XK_Gªek_omega
 0x07f9

	)

1333 
	#XK_Gªek_swôch
 0xff7ê

	)

1342 #ifde‡
XK_TECHNICAL


1343 
	#XK_À·ødiˇl
 0x08a1

	)

1344 
	#XK_t›À·ødiˇl
 0x08a2

	)

1345 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1346 
	#XK_t›öãgøl
 0x08a4

	)

1347 
	#XK_bŸöãgøl
 0x08a5

	)

1348 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1349 
	#XK_t›À·sqbøckë
 0x08a7

	)

1350 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1351 
	#XK_t›rightsqbøckë
 0x08a9

	)

1352 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1353 
	#XK_t›À·∑ªns
 0x08ab

	)

1354 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1355 
	#XK_t›righç¨ís
 0x08ad

	)

1356 
	#XK_bŸrighç¨ís
 0x08´

	)

1357 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1358 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1359 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1360 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1361 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1362 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1363 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1364 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1365 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1366 
	#XK_Às°h™equÆ
 0x08b¯

	)

1367 
	#XK_nŸequÆ
 0x08bd

	)

1368 
	#XK_gª©îth™equÆ
 0x08bê

	)

1369 
	#XK_öãgøl
 0x08b‡

	)

1370 
	#XK_thîef‹e
 0x08c0

	)

1371 
	#XK_v¨üti⁄
 0x08c1

	)

1372 
	#XK_öföôy
 0x08c2

	)

1373 
	#XK_«bœ
 0x08c5

	)

1374 
	#XK_≠¥oxim©e
 0x08c8

	)

1375 
	#XK_simû¨equÆ
 0x08c9

	)

1376 
	#XK_if⁄lyif
 0x08cd

	)

1377 
	#XK_im∂õs
 0x08˚

	)

1378 
	#XK_idítiˇl
 0x08c‡

	)

1379 
	#XK_ødiˇl
 0x08d6

	)

1380 
	#XK_ö˛udedö
 0x08d®

	)

1381 
	#XK_ö˛udes
 0x08db

	)

1382 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1383 
	#XK_uni⁄
 0x08dd

	)

1384 
	#XK_logiˇœnd
 0x08dê

	)

1385 
	#XK_logiˇl‹
 0x08d‡

	)

1386 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1387 
	#XK_fun˘i⁄
 0x08f6

	)

1388 
	#XK_À·¨row
 0x08fb

	)

1389 
	#XK_u∑ºow
 0x08f¯

	)

1390 
	#XK_righèºow
 0x08fd

	)

1391 
	#XK_dow«ºow
 0x08„

	)

1400 #ifde‡
XK_SPECIAL


1401 
	#XK_bœnk
 0x09df

	)

1402 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1403 
	#XK_checkîbﬂrd
 0x09e1

	)

1404 
	#XK_ht
 0x09e2

	)

1405 
	#XK_ff
 0x09e3

	)

1406 
	#XK_¸
 0x09e4

	)

1407 
	#XK_lf
 0x09e5

	)

1408 
	#XK_∆
 0x09e8

	)

1409 
	#XK_vt
 0x09e9

	)

1410 
	#XK_lowrightc‹√r
 0x09ó

	)

1411 
	#XK_u¥ightc‹√r
 0x09eb

	)

1412 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1413 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1414 
	#XK_¸ossöglöes
 0x09ì

	)

1415 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1416 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1417 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1418 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1419 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1420 
	#XK_À·t
 0x09f4

	)

1421 
	#XK_righâ
 0x09f5

	)

1422 
	#XK_bŸt
 0x09f6

	)

1423 
	#XK_t›t
 0x09f7

	)

1424 
	#XK_vîtb¨
 0x09f8

	)

1434 #ifde‡
XK_PUBLISHING


1435 
	#XK_em•a˚
 0x0Ø1

	)

1436 
	#XK_í•a˚
 0x0Ø2

	)

1437 
	#XK_em3•a˚
 0x0Ø3

	)

1438 
	#XK_em4•a˚
 0x0Ø4

	)

1439 
	#XK_digô•a˚
 0x0Ø5

	)

1440 
	#XK_pun˘•a˚
 0x0Ø6

	)

1441 
	#XK_thö•a˚
 0x0Ø7

	)

1442 
	#XK_haú•a˚
 0x0Ø8

	)

1443 
	#XK_emdash
 0x0Ø9

	)

1444 
	#XK_ídash
 0x0Ø®

	)

1445 
	#XK_signifbœnk
 0x0Ø¯

	)

1446 
	#XK_ñlùsis
 0x0Øê

	)

1447 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1448 
	#XK_⁄ëhúd
 0x0ab0

	)

1449 
	#XK_twŸhúds
 0x0ab1

	)

1450 
	#XK_⁄efi·h
 0x0ab2

	)

1451 
	#XK_twofi·hs
 0x0ab3

	)

1452 
	#XK_thªefi·hs
 0x0ab4

	)

1453 
	#XK_fourfi·hs
 0x0ab5

	)

1454 
	#XK_⁄esixth
 0x0ab6

	)

1455 
	#XK_fivesixths
 0x0ab7

	)

1456 
	#XK_ˇªof
 0x0ab8

	)

1457 
	#XK_figdash
 0x0abb

	)

1458 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1459 
	#XK_decimÆpoöt
 0x0abd

	)

1460 
	#XK_righèngÀbøckë
 0x0abê

	)

1461 
	#XK_m¨kî
 0x0abf

	)

1462 
	#XK_⁄ìighth
 0x0ac3

	)

1463 
	#XK_thªìighths
 0x0ac4

	)

1464 
	#XK_fivìighths
 0x0ac5

	)

1465 
	#XK_£víeighths
 0x0ac6

	)

1466 
	#XK_åadem¨k
 0x0ac9

	)

1467 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1468 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1469 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1470 
	#XK_right›íåüngÀ
 0x0acd

	)

1471 
	#XK_em›ícú˛e
 0x0a˚

	)

1472 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1473 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1474 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1475 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1476 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1477 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1478 
	#XK_≥rmûÀ
 0x0ad5

	)

1479 
	#XK_möuãs
 0x0ad6

	)

1480 
	#XK_£c⁄ds
 0x0ad7

	)

1481 
	#XK_œtö¸oss
 0x0ad9

	)

1482 
	#XK_hexagøm
 0x0ada

	)

1483 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1484 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1485 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1486 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1487 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1488 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1489 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1490 
	#XK_›íª˘buŒë
 0x0´2

	)

1491 
	#XK_›íåibuŒëup
 0x0´3

	)

1492 
	#XK_›íåibuŒëdown
 0x0´4

	)

1493 
	#XK_›í°¨
 0x0´5

	)

1494 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1495 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1496 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1497 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1498 
	#XK_À·poöãr
 0x0´®

	)

1499 
	#XK_righçoöãr
 0x0´b

	)

1500 
	#XK_˛ub
 0x0´¯

	)

1501 
	#XK_düm⁄d
 0x0´d

	)

1502 
	#XK_hóπ
 0x0´ê

	)

1503 
	#XK_mÆã£¸oss
 0x0af0

	)

1504 
	#XK_daggî
 0x0af1

	)

1505 
	#XK_doubÀdaggî
 0x0af2

	)

1506 
	#XK_checkm¨k
 0x0af3

	)

1507 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1508 
	#XK_musiˇlsh¨p
 0x0af5

	)

1509 
	#XK_musiˇlÊ©
 0x0af6

	)

1510 
	#XK_mÆesymbﬁ
 0x0af7

	)

1511 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1512 
	#XK_ãÀph⁄e
 0x0af9

	)

1513 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1514 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1515 
	#XK_ˇªt
 0x0af¯

	)

1516 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1517 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1518 
	#XK_curs‹
 0x0aff

	)

1526 #ifde‡
XK_APL


1527 
	#XK_À·ˇªt
 0x0ba3

	)

1528 
	#XK_rightˇªt
 0x0ba6

	)

1529 
	#XK_downˇªt
 0x0ba8

	)

1530 
	#XK_upˇªt
 0x0ba9

	)

1531 
	#XK_ovîb¨
 0x0bc0

	)

1532 
	#XK_dow¡ack
 0x0bc2

	)

1533 
	#XK_upsh€
 0x0bc3

	)

1534 
	#XK_down°ûe
 0x0bc4

	)

1535 
	#XK_undîb¨
 0x0bc6

	)

1536 
	#XK_jŸ
 0x0bˇ

	)

1537 
	#XK_quad
 0x0bc¯

	)

1538 
	#XK_u±ack
 0x0b˚

	)

1539 
	#XK_cú˛e
 0x0bc‡

	)

1540 
	#XK_up°ûe
 0x0bd3

	)

1541 
	#XK_downsh€
 0x0bd6

	)

1542 
	#XK_rightsh€
 0x0bd8

	)

1543 
	#XK_À·sh€
 0x0bd®

	)

1544 
	#XK_À·èck
 0x0bd¯

	)

1545 
	#XK_righâack
 0x0bf¯

	)

1553 #ifde‡
XK_HEBREW


1554 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1555 
	#XK_hebªw_Æïh
 0x0˚0

	)

1556 
	#XK_hebªw_bë
 0x0˚1

	)

1557 
	#XK_hebªw_bëh
 0x0˚1

	)

1558 
	#XK_hebªw_gimñ
 0x0˚2

	)

1559 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1560 
	#XK_hebªw_dÆë
 0x0˚3

	)

1561 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1562 
	#XK_hebªw_he
 0x0˚4

	)

1563 
	#XK_hebªw_waw
 0x0˚5

	)

1564 
	#XK_hebªw_zaö
 0x0˚6

	)

1565 
	#XK_hebªw_zayö
 0x0˚6

	)

1566 
	#XK_hebªw_chë
 0x0˚7

	)

1567 
	#XK_hebªw_hë
 0x0˚7

	)

1568 
	#XK_hebªw_ãt
 0x0˚8

	)

1569 
	#XK_hebªw_ãth
 0x0˚8

	)

1570 
	#XK_hebªw_yod
 0x0˚9

	)

1571 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1572 
	#XK_hebªw_k≠h
 0x0˚b

	)

1573 
	#XK_hebªw_œmed
 0x0˚¯

	)

1574 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1575 
	#XK_hebªw_mem
 0x0˚ê

	)

1576 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1577 
	#XK_hebªw_nun
 0x0cf0

	)

1578 
	#XK_hebªw_ßmech
 0x0cf1

	)

1579 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1580 
	#XK_hebªw_ayö
 0x0cf2

	)

1581 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1582 
	#XK_hebªw_≥
 0x0cf4

	)

1583 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1584 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1585 
	#XK_hebªw_zade
 0x0cf6

	)

1586 
	#XK_hebªw_zadi
 0x0cf6

	)

1587 
	#XK_hebªw_q›h
 0x0cf7

	)

1588 
	#XK_hebªw_kuf
 0x0cf7

	)

1589 
	#XK_hebªw_ªsh
 0x0cf8

	)

1590 
	#XK_hebªw_shö
 0x0cf9

	)

1591 
	#XK_hebªw_èw
 0x0cÁ

	)

1592 
	#XK_hebªw_èf
 0x0cÁ

	)

1593 
	#XK_Hebªw_swôch
 0xff7ê

	)

1601 #ifde‡
XK_THAI


1602 
	#XK_Thai_kokai
 0x0da1

	)

1603 
	#XK_Thai_khokhai
 0x0da2

	)

1604 
	#XK_Thai_khokhu©
 0x0da3

	)

1605 
	#XK_Thai_khokhwai
 0x0da4

	)

1606 
	#XK_Thai_khokh⁄
 0x0da5

	)

1607 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1608 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1609 
	#XK_Thai_choch™
 0x0da8

	)

1610 
	#XK_Thai_chochög
 0x0da9

	)

1611 
	#XK_Thai_choch™g
 0x0dØ

	)

1612 
	#XK_Thai_soso
 0x0dab

	)

1613 
	#XK_Thai_choch€
 0x0da¯

	)

1614 
	#XK_Thai_yoyög
 0x0dad

	)

1615 
	#XK_Thai_dochada
 0x0d´

	)

1616 
	#XK_Thai_t›©ak
 0x0da‡

	)

1617 
	#XK_Thai_thŸh™
 0x0db0

	)

1618 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1619 
	#XK_Thai_th›huthao
 0x0db2

	)

1620 
	#XK_Thai_n⁄í
 0x0db3

	)

1621 
	#XK_Thai_dodek
 0x0db4

	)

1622 
	#XK_Thai_tŸao
 0x0db5

	)

1623 
	#XK_Thai_thŸhung
 0x0db6

	)

1624 
	#XK_Thai_thŸhah™
 0x0db7

	)

1625 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1626 
	#XK_Thai_n⁄u
 0x0db9

	)

1627 
	#XK_Thai_bobaimai
 0x0db®

	)

1628 
	#XK_Thai_p›œ
 0x0dbb

	)

1629 
	#XK_Thai_ph›hung
 0x0db¯

	)

1630 
	#XK_Thai_foÁ
 0x0dbd

	)

1631 
	#XK_Thai_ph›h™
 0x0dbê

	)

1632 
	#XK_Thai_foÁn
 0x0db‡

	)

1633 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1634 
	#XK_Thai_moma
 0x0dc1

	)

1635 
	#XK_Thai_yoyak
 0x0dc2

	)

1636 
	#XK_Thai_r‹ua
 0x0dc3

	)

1637 
	#XK_Thai_ru
 0x0dc4

	)

1638 
	#XK_Thai_lﬁög
 0x0dc5

	)

1639 
	#XK_Thai_lu
 0x0dc6

	)

1640 
	#XK_Thai_wow´n
 0x0dc7

	)

1641 
	#XK_Thai_soßœ
 0x0dc8

	)

1642 
	#XK_Thai_s‹usi
 0x0dc9

	)

1643 
	#XK_Thai_sosua
 0x0dˇ

	)

1644 
	#XK_Thai_hohù
 0x0dcb

	)

1645 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1646 
	#XK_Thai_ﬂng
 0x0dcd

	)

1647 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1648 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1649 
	#XK_Thai_ßøa
 0x0dd0

	)

1650 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1651 
	#XK_Thai_ßøØ
 0x0dd2

	)

1652 
	#XK_Thai_ßøam
 0x0dd3

	)

1653 
	#XK_Thai_ßøi
 0x0dd4

	)

1654 
	#XK_Thai_ßøii
 0x0dd5

	)

1655 
	#XK_Thai_ßøue
 0x0dd6

	)

1656 
	#XK_Thai_ßøuì
 0x0dd7

	)

1657 
	#XK_Thai_ßøu
 0x0dd8

	)

1658 
	#XK_Thai_ßøuu
 0x0dd9

	)

1659 
	#XK_Thai_phöthu
 0x0dd®

	)

1660 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1661 
	#XK_Thai_baht
 0x0dd‡

	)

1662 
	#XK_Thai_ßøe
 0x0de0

	)

1663 
	#XK_Thai_ßø´
 0x0de1

	)

1664 
	#XK_Thai_ßøo
 0x0de2

	)

1665 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1666 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1667 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1668 
	#XK_Thai_maiyamok
 0x0de6

	)

1669 
	#XK_Thai_maôaikhu
 0x0de7

	)

1670 
	#XK_Thai_maõk
 0x0de8

	)

1671 
	#XK_Thai_maôho
 0x0de9

	)

1672 
	#XK_Thai_maôri
 0x0dó

	)

1673 
	#XK_Thai_maich©èwa
 0x0deb

	)

1674 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1675 
	#XK_Thai_nikhahô
 0x0ded

	)

1676 
	#XK_Thai_Àksun
 0x0df0

	)

1677 
	#XK_Thai_Àknung
 0x0df1

	)

1678 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1679 
	#XK_Thai_Àkßm
 0x0df3

	)

1680 
	#XK_Thai_Àksi
 0x0df4

	)

1681 
	#XK_Thai_Àkha
 0x0df5

	)

1682 
	#XK_Thai_Àkhok
 0x0df6

	)

1683 
	#XK_Thai_Àkchë
 0x0df7

	)

1684 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1685 
	#XK_Thai_Àkkao
 0x0df9

	)

1693 #ifde‡
XK_KOREAN


1695 
	#XK_H™gul
 0xff31

	)

1696 
	#XK_H™gul_Sèπ
 0xff32

	)

1697 
	#XK_H™gul_End
 0xff33

	)

1698 
	#XK_H™gul_H™ja
 0xff34

	)

1699 
	#XK_H™gul_Jamo
 0xff35

	)

1700 
	#XK_H™gul_Romaja
 0xff36

	)

1701 
	#XK_H™gul_Codeöput
 0xff37

	)

1702 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1703 
	#XK_H™gul_B™ja
 0xff39

	)

1704 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1705 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1706 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1707 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1708 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1709 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1710 
	#XK_H™gul_swôch
 0xff7ê

	)

1713 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1714 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1715 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1716 
	#XK_H™gul_Nõun
 0x0ó4

	)

1717 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1718 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1719 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1720 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1721 
	#XK_H™gul_Rõul
 0x0ó9

	)

1722 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1723 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1724 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1725 
	#XK_H™gul_RõulSios
 0x0ód

	)

1726 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1727 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1728 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1729 
	#XK_H™gul_Mõum
 0x0eb1

	)

1730 
	#XK_H™gul_Põub
 0x0eb2

	)

1731 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1732 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1733 
	#XK_H™gul_Sios
 0x0eb5

	)

1734 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1735 
	#XK_H™gul_Ieung
 0x0eb7

	)

1736 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1737 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1738 
	#XK_H™gul_Cõuc
 0x0eba

	)

1739 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1740 
	#XK_H™gul_Tõut
 0x0ebc

	)

1741 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1742 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1745 
	#XK_H™gul_A
 0x0ebf

	)

1746 
	#XK_H™gul_AE
 0x0ec0

	)

1747 
	#XK_H™gul_YA
 0x0ec1

	)

1748 
	#XK_H™gul_YAE
 0x0ec2

	)

1749 
	#XK_H™gul_EO
 0x0ec3

	)

1750 
	#XK_H™gul_E
 0x0ec4

	)

1751 
	#XK_H™gul_YEO
 0x0ec5

	)

1752 
	#XK_H™gul_YE
 0x0ec6

	)

1753 
	#XK_H™gul_O
 0x0ec7

	)

1754 
	#XK_H™gul_WA
 0x0ec8

	)

1755 
	#XK_H™gul_WAE
 0x0ec9

	)

1756 
	#XK_H™gul_OE
 0x0eˇ

	)

1757 
	#XK_H™gul_YO
 0x0ecb

	)

1758 
	#XK_H™gul_U
 0x0ecc

	)

1759 
	#XK_H™gul_WEO
 0x0ecd

	)

1760 
	#XK_H™gul_WE
 0x0e˚

	)

1761 
	#XK_H™gul_WI
 0x0ecf

	)

1762 
	#XK_H™gul_YU
 0x0ed0

	)

1763 
	#XK_H™gul_EU
 0x0ed1

	)

1764 
	#XK_H™gul_YI
 0x0ed2

	)

1765 
	#XK_H™gul_I
 0x0ed3

	)

1768 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1769 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1770 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1771 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1772 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1773 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1774 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1775 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1776 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1777 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1778 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1779 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1780 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1781 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1782 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1783 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1784 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1785 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1786 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1787 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1788 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1789 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1790 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1791 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1792 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1793 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1794 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1797 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1798 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1799 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1800 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1801 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1802 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1803 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1806 
	#XK_H™gul_AøeA
 0x0ef6

	)

1807 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1810 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1811 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1812 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1815 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1823 #ifde‡
XK_ARMENIAN


1824 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1825 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1826 
	#XK_Armíün_vîjakë
 0x1000589

	)

1827 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1828 
	#XK_Armíün_but
 0x100055d

	)

1829 
	#XK_Armíün_hyphí
 0x100058®

	)

1830 
	#XK_Armíün_yíèm«
 0x100058®

	)

1831 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1832 
	#XK_Armíün_am™ak
 0x100055¯

	)

1833 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1834 
	#XK_Armíün_shesht
 0x100055b

	)

1835 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1836 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1837 
	#XK_Armíün_AYB
 0x1000531

	)

1838 
	#XK_Armíün_ayb
 0x1000561

	)

1839 
	#XK_Armíün_BEN
 0x1000532

	)

1840 
	#XK_Armíün_bí
 0x1000562

	)

1841 
	#XK_Armíün_GIM
 0x1000533

	)

1842 
	#XK_Armíün_gim
 0x1000563

	)

1843 
	#XK_Armíün_DA
 0x1000534

	)

1844 
	#XK_Armíün_da
 0x1000564

	)

1845 
	#XK_Armíün_YECH
 0x1000535

	)

1846 
	#XK_Armíün_yech
 0x1000565

	)

1847 
	#XK_Armíün_ZA
 0x1000536

	)

1848 
	#XK_Armíün_za
 0x1000566

	)

1849 
	#XK_Armíün_E
 0x1000537

	)

1850 
	#XK_Armíün_e
 0x1000567

	)

1851 
	#XK_Armíün_AT
 0x1000538

	)

1852 
	#XK_Armíün_©
 0x1000568

	)

1853 
	#XK_Armíün_TO
 0x1000539

	)

1854 
	#XK_Armíün_to
 0x1000569

	)

1855 
	#XK_Armíün_ZHE
 0x100053®

	)

1856 
	#XK_Armíün_zhe
 0x100056®

	)

1857 
	#XK_Armíün_INI
 0x100053b

	)

1858 
	#XK_Armíün_öi
 0x100056b

	)

1859 
	#XK_Armíün_LYUN
 0x100053¯

	)

1860 
	#XK_Armíün_lyun
 0x100056¯

	)

1861 
	#XK_Armíün_KHE
 0x100053d

	)

1862 
	#XK_Armíün_khe
 0x100056d

	)

1863 
	#XK_Armíün_TSA
 0x100053ê

	)

1864 
	#XK_Armíün_tß
 0x100056ê

	)

1865 
	#XK_Armíün_KEN
 0x100053‡

	)

1866 
	#XK_Armíün_kí
 0x100056‡

	)

1867 
	#XK_Armíün_HO
 0x1000540

	)

1868 
	#XK_Armíün_ho
 0x1000570

	)

1869 
	#XK_Armíün_DZA
 0x1000541

	)

1870 
	#XK_Armíün_dza
 0x1000571

	)

1871 
	#XK_Armíün_GHAT
 0x1000542

	)

1872 
	#XK_Armíün_gh©
 0x1000572

	)

1873 
	#XK_Armíün_TCHE
 0x1000543

	)

1874 
	#XK_Armíün_tche
 0x1000573

	)

1875 
	#XK_Armíün_MEN
 0x1000544

	)

1876 
	#XK_Armíün_mí
 0x1000574

	)

1877 
	#XK_Armíün_HI
 0x1000545

	)

1878 
	#XK_Armíün_hi
 0x1000575

	)

1879 
	#XK_Armíün_NU
 0x1000546

	)

1880 
	#XK_Armíün_nu
 0x1000576

	)

1881 
	#XK_Armíün_SHA
 0x1000547

	)

1882 
	#XK_Armíün_sha
 0x1000577

	)

1883 
	#XK_Armíün_VO
 0x1000548

	)

1884 
	#XK_Armíün_vo
 0x1000578

	)

1885 
	#XK_Armíün_CHA
 0x1000549

	)

1886 
	#XK_Armíün_cha
 0x1000579

	)

1887 
	#XK_Armíün_PE
 0x100054®

	)

1888 
	#XK_Armíün_≥
 0x100057®

	)

1889 
	#XK_Armíün_JE
 0x100054b

	)

1890 
	#XK_Armíün_je
 0x100057b

	)

1891 
	#XK_Armíün_RA
 0x100054¯

	)

1892 
	#XK_Armíün_ø
 0x100057¯

	)

1893 
	#XK_Armíün_SE
 0x100054d

	)

1894 
	#XK_Armíün_£
 0x100057d

	)

1895 
	#XK_Armíün_VEV
 0x100054ê

	)

1896 
	#XK_Armíün_vev
 0x100057ê

	)

1897 
	#XK_Armíün_TYUN
 0x100054‡

	)

1898 
	#XK_Armíün_tyun
 0x100057‡

	)

1899 
	#XK_Armíün_RE
 0x1000550

	)

1900 
	#XK_Armíün_ª
 0x1000580

	)

1901 
	#XK_Armíün_TSO
 0x1000551

	)

1902 
	#XK_Armíün_tso
 0x1000581

	)

1903 
	#XK_Armíün_VYUN
 0x1000552

	)

1904 
	#XK_Armíün_vyun
 0x1000582

	)

1905 
	#XK_Armíün_PYUR
 0x1000553

	)

1906 
	#XK_Armíün_pyur
 0x1000583

	)

1907 
	#XK_Armíün_KE
 0x1000554

	)

1908 
	#XK_Armíün_ke
 0x1000584

	)

1909 
	#XK_Armíün_O
 0x1000555

	)

1910 
	#XK_Armíün_o
 0x1000585

	)

1911 
	#XK_Armíün_FE
 0x1000556

	)

1912 
	#XK_Armíün_„
 0x1000586

	)

1913 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1920 #ifde‡
XK_GEORGIAN


1921 
	#XK_Ge‹gün_™
 0x10010d0

	)

1922 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1923 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1924 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1925 
	#XK_Ge‹gün_í
 0x10010d4

	)

1926 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1927 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1928 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1929 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1930 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1931 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1932 
	#XK_Ge‹gün_m™
 0x10010db

	)

1933 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1934 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1935 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1936 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1937 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1938 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1939 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1940 
	#XK_Ge‹gün_un
 0x10010e3

	)

1941 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1942 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1943 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1944 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1945 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1946 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1947 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1948 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1949 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1950 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1951 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1952 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1953 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1954 
	#XK_Ge‹gün_he
 0x10010f1

	)

1955 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1956 
	#XK_Ge‹gün_we
 0x10010f3

	)

1957 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1958 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1959 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1966 #ifde‡
XK_CAUCASUS


1968 
	#XK_XabovedŸ
 0x1001e8®

	)

1969 
	#XK_Ibªve
 0x100012¯

	)

1970 
	#XK_Z°roke
 0x10001b5

	)

1971 
	#XK_Gˇr⁄
 0x10001e6

	)

1972 
	#XK_Oˇr⁄
 0x10001d1

	)

1973 
	#XK_Ob¨ªd
 0x100019‡

	)

1974 
	#XK_xabovedŸ
 0x1001e8b

	)

1975 
	#XK_ibªve
 0x100012d

	)

1976 
	#XK_z°roke
 0x10001b6

	)

1977 
	#XK_gˇr⁄
 0x10001e7

	)

1978 
	#XK_oˇr⁄
 0x10001d2

	)

1979 
	#XK_ob¨ªd
 0x1000275

	)

1980 
	#XK_SCHWA
 0x100018‡

	)

1981 
	#XK_schwa
 0x1000259

	)

1982 
	#XK_EZH
 0x10001b7

	)

1983 
	#XK_ezh
 0x1000292

	)

1986 
	#XK_LbñowdŸ
 0x1001e36

	)

1987 
	#XK_lbñowdŸ
 0x1001e37

	)

1994 #ifde‡
XK_VIETNAMESE


1995 
	#XK_AbñowdŸ
 0x1001ó0

	)

1996 
	#XK_abñowdŸ
 0x1001ó1

	)

1997 
	#XK_Ahook
 0x1001ó2

	)

1998 
	#XK_ahook
 0x1001ó3

	)

1999 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

2000 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

2001 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

2002 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

2003 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

2004 
	#XK_acúcumÊexhook
 0x1001ó9

	)

2005 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

2006 
	#XK_acúcumÊextûde
 0x1001ób

	)

2007 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

2008 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

2009 
	#XK_Abªvócuã
 0x1001óê

	)

2010 
	#XK_abªvócuã
 0x1001ó‡

	)

2011 
	#XK_Abªvegøve
 0x1001eb0

	)

2012 
	#XK_abªvegøve
 0x1001eb1

	)

2013 
	#XK_Abªvehook
 0x1001eb2

	)

2014 
	#XK_abªvehook
 0x1001eb3

	)

2015 
	#XK_Abªvëûde
 0x1001eb4

	)

2016 
	#XK_abªvëûde
 0x1001eb5

	)

2017 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

2018 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

2019 
	#XK_EbñowdŸ
 0x1001eb8

	)

2020 
	#XK_ebñowdŸ
 0x1001eb9

	)

2021 
	#XK_Ehook
 0x1001eb®

	)

2022 
	#XK_ehook
 0x1001ebb

	)

2023 
	#XK_Etûde
 0x1001eb¯

	)

2024 
	#XK_ëûde
 0x1001ebd

	)

2025 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2026 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2027 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2028 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2029 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2030 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2031 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2032 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2033 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2034 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2035 
	#XK_Ihook
 0x1001ec8

	)

2036 
	#XK_ihook
 0x1001ec9

	)

2037 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2038 
	#XK_ibñowdŸ
 0x1001ecb

	)

2039 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2040 
	#XK_obñowdŸ
 0x1001ecd

	)

2041 
	#XK_Ohook
 0x1001e˚

	)

2042 
	#XK_ohook
 0x1001ec‡

	)

2043 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2044 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2045 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2046 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2047 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2048 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2049 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2050 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2051 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2052 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2053 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2054 
	#XK_oh‹«cuã
 0x1001edb

	)

2055 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2056 
	#XK_oh‹ngøve
 0x1001edd

	)

2057 
	#XK_Oh‹nhook
 0x1001edê

	)

2058 
	#XK_oh‹nhook
 0x1001ed‡

	)

2059 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2060 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2061 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2062 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2063 
	#XK_UbñowdŸ
 0x1001ì4

	)

2064 
	#XK_ubñowdŸ
 0x1001ì5

	)

2065 
	#XK_Uhook
 0x1001ì6

	)

2066 
	#XK_uhook
 0x1001ì7

	)

2067 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2068 
	#XK_uh‹«cuã
 0x1001ì9

	)

2069 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2070 
	#XK_uh‹ngøve
 0x1001ìb

	)

2071 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2072 
	#XK_uh‹nhook
 0x1001ìd

	)

2073 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2074 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2075 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2076 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2077 
	#XK_YbñowdŸ
 0x1001ef4

	)

2078 
	#XK_ybñowdŸ
 0x1001ef5

	)

2079 
	#XK_Yhook
 0x1001ef6

	)

2080 
	#XK_yhook
 0x1001ef7

	)

2081 
	#XK_Ytûde
 0x1001ef8

	)

2082 
	#XK_ytûde
 0x1001ef9

	)

2083 
	#XK_Oh‹n
 0x10001a0

	)

2084 
	#XK_oh‹n
 0x10001a1

	)

2085 
	#XK_Uh‹n
 0x10001a‡

	)

2086 
	#XK_uh‹n
 0x10001b0

	)

2090 #ifde‡
XK_CURRENCY


2091 
	#XK_EcuSign
 0x10020a0

	)

2092 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2093 
	#XK_CruzeúoSign
 0x10020a2

	)

2094 
	#XK_FFøncSign
 0x10020a3

	)

2095 
	#XK_LúaSign
 0x10020a4

	)

2096 
	#XK_MûlSign
 0x10020a5

	)

2097 
	#XK_NaúaSign
 0x10020a6

	)

2098 
	#XK_Pe£èSign
 0x10020a7

	)

2099 
	#XK_Ru≥eSign
 0x10020a8

	)

2100 
	#XK_W⁄Sign
 0x10020a9

	)

2101 
	#XK_NewSheqñSign
 0x10020Ø

	)

2102 
	#XK_D⁄gSign
 0x10020ab

	)

2103 
	#XK_EuroSign
 0x20a¯

	)

2106 #ifde‡
XK_MATHEMATICAL


2108 
	#XK_zîosu≥ri‹
 0x1002070

	)

2109 
	#XK_foursu≥ri‹
 0x1002074

	)

2110 
	#XK_fivesu≥ri‹
 0x1002075

	)

2111 
	#XK_sixsu≥ri‹
 0x1002076

	)

2112 
	#XK_£vísu≥ri‹
 0x1002077

	)

2113 
	#XK_eightsu≥ri‹
 0x1002078

	)

2114 
	#XK_nöesu≥ri‹
 0x1002079

	)

2115 
	#XK_zîosubs¸ùt
 0x1002080

	)

2116 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2117 
	#XK_twosubs¸ùt
 0x1002082

	)

2118 
	#XK_thªesubs¸ùt
 0x1002083

	)

2119 
	#XK_foursubs¸ùt
 0x1002084

	)

2120 
	#XK_fivesubs¸ùt
 0x1002085

	)

2121 
	#XK_sixsubs¸ùt
 0x1002086

	)

2122 
	#XK_£vísubs¸ùt
 0x1002087

	)

2123 
	#XK_eightsubs¸ùt
 0x1002088

	)

2124 
	#XK_nöesubs¸ùt
 0x1002089

	)

2125 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2126 
	#XK_em±y£t
 0x1002205

	)

2127 
	#XK_ñemítof
 0x1002208

	)

2128 
	#XK_nŸñemítof
 0x1002209

	)

2129 
	#XK_c⁄èößs
 0x100220B

	)

2130 
	#XK_squ¨îoŸ
 0x100221A

	)

2131 
	#XK_cubîoŸ
 0x100221B

	)

2132 
	#XK_fouπhroŸ
 0x100221C

	)

2133 
	#XK_döãgøl
 0x100222C

	)

2134 
	#XK_töãgøl
 0x100222D

	)

2135 
	#XK_beˇu£
 0x1002235

	)

2136 
	#XK_≠¥oxeq
 0x1002248

	)

2137 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2138 
	#XK_nŸidítiˇl
 0x1002262

	)

2139 
	#XK_°ri˘eq
 0x1002263

	)

2142 #ifde‡
XK_BRAILLE


2143 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2144 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2145 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2146 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2147 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2148 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2149 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2150 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2151 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2152 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2153 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2154 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2155 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2156 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2157 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2158 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2159 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2160 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2161 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2162 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2163 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2164 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2165 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2166 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2167 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2168 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2169 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2170 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2171 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2172 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2173 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2174 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2175 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2176 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2177 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2178 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2179 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2180 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2181 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2182 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2183 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2184 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2185 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2186 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2187 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2188 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2189 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2190 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2191 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2192 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2193 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2194 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2195 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2196 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2197 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2198 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2199 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2200 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2201 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2202 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2203 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2204 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2205 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2206 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2207 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2208 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2209 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2210 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2211 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2212 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2213 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2214 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2215 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2216 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2217 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2218 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2219 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2220 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2221 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2222 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2223 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2224 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2225 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2226 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2227 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2228 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2229 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2230 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2231 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2232 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2233 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2234 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2235 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2236 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2237 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2238 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2239 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2240 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2241 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2242 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2243 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2244 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2245 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2246 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2247 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2248 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2249 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2250 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2251 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2252 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2253 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2254 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2255 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2256 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2257 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2258 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2259 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2260 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2261 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2262 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2263 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2264 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2265 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2266 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2267 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2268 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2269 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2270 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2271 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2272 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2273 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2274 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2275 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2276 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2277 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2278 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2279 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2280 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2281 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2282 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2283 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2284 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2285 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2286 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2287 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2288 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2289 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2290 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2291 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2292 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2293 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2294 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2295 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2296 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2297 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2298 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2299 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2300 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2301 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2302 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2303 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2304 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2305 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2306 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2307 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2308 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2309 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2310 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2311 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2312 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2313 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2314 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2315 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2316 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2317 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2318 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2319 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2320 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2321 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2322 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2323 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2324 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2325 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2326 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2327 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2328 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2329 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2330 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2331 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2332 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2333 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2334 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2335 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2336 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2337 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2338 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2339 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2340 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2341 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2342 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2343 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2344 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2345 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2346 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2347 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2348 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2349 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2350 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2351 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2352 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2353 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2354 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2355 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2356 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2357 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2358 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2359 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2360 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2361 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2362 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2363 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2364 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2365 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2366 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2367 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2368 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2369 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2370 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2371 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2372 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2373 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2374 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2375 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2376 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2377 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2378 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2379 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2380 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2381 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2382 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2383 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2384 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2385 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2386 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2387 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2388 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2389 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2390 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2391 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2392 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2393 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2394 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2395 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2396 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2397 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2398 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2399 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2400 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2401 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2402 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2403 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2404 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2405 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2406 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2407 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2408 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2416 #ifde‡
XK_SINHALA


2417 
	#XK_Söh_ng
 0x1000d82

	)

2418 
	#XK_Söh_h2
 0x1000d83

	)

2419 
	#XK_Söh_a
 0x1000d85

	)

2420 
	#XK_Söh_Ø
 0x1000d86

	)

2421 
	#XK_Söh_´
 0x1000d87

	)

2422 
	#XK_Söh_´e
 0x1000d88

	)

2423 
	#XK_Söh_i
 0x1000d89

	)

2424 
	#XK_Söh_ii
 0x1000d8®

	)

2425 
	#XK_Söh_u
 0x1000d8b

	)

2426 
	#XK_Söh_uu
 0x1000d8¯

	)

2427 
	#XK_Söh_ri
 0x1000d8d

	)

2428 
	#XK_Söh_rii
 0x1000d8ê

	)

2429 
	#XK_Söh_lu
 0x1000d8‡

	)

2430 
	#XK_Söh_luu
 0x1000d90

	)

2431 
	#XK_Söh_e
 0x1000d91

	)

2432 
	#XK_Söh_ì
 0x1000d92

	)

2433 
	#XK_Söh_ai
 0x1000d93

	)

2434 
	#XK_Söh_o
 0x1000d94

	)

2435 
	#XK_Söh_oo
 0x1000d95

	)

2436 
	#XK_Söh_au
 0x1000d96

	)

2437 
	#XK_Söh_ka
 0x1000d9®

	)

2438 
	#XK_Söh_kha
 0x1000d9b

	)

2439 
	#XK_Söh_ga
 0x1000d9¯

	)

2440 
	#XK_Söh_gha
 0x1000d9d

	)

2441 
	#XK_Söh_ng2
 0x1000d9ê

	)

2442 
	#XK_Söh_nga
 0x1000d9‡

	)

2443 
	#XK_Söh_ˇ
 0x1000da0

	)

2444 
	#XK_Söh_cha
 0x1000da1

	)

2445 
	#XK_Söh_ja
 0x1000da2

	)

2446 
	#XK_Söh_jha
 0x1000da3

	)

2447 
	#XK_Söh_nya
 0x1000da4

	)

2448 
	#XK_Söh_jnya
 0x1000da5

	)

2449 
	#XK_Söh_nja
 0x1000da6

	)

2450 
	#XK_Söh_âa
 0x1000da7

	)

2451 
	#XK_Söh_âha
 0x1000da8

	)

2452 
	#XK_Söh_dda
 0x1000da9

	)

2453 
	#XK_Söh_ddha
 0x1000dØ

	)

2454 
	#XK_Söh_¬a
 0x1000dab

	)

2455 
	#XK_Söh_ndda
 0x1000da¯

	)

2456 
	#XK_Söh_tha
 0x1000dad

	)

2457 
	#XK_Söh_thha
 0x1000d´

	)

2458 
	#XK_Söh_dha
 0x1000da‡

	)

2459 
	#XK_Söh_dhha
 0x1000db0

	)

2460 
	#XK_Söh_«
 0x1000db1

	)

2461 
	#XK_Söh_ndha
 0x1000db3

	)

2462 
	#XK_Söh_∑
 0x1000db4

	)

2463 
	#XK_Söh_pha
 0x1000db5

	)

2464 
	#XK_Söh_ba
 0x1000db6

	)

2465 
	#XK_Söh_bha
 0x1000db7

	)

2466 
	#XK_Söh_ma
 0x1000db8

	)

2467 
	#XK_Söh_mba
 0x1000db9

	)

2468 
	#XK_Söh_ya
 0x1000db®

	)

2469 
	#XK_Söh_ø
 0x1000dbb

	)

2470 
	#XK_Söh_œ
 0x1000dbd

	)

2471 
	#XK_Söh_va
 0x1000dc0

	)

2472 
	#XK_Söh_sha
 0x1000dc1

	)

2473 
	#XK_Söh_ssha
 0x1000dc2

	)

2474 
	#XK_Söh_ß
 0x1000dc3

	)

2475 
	#XK_Söh_ha
 0x1000dc4

	)

2476 
	#XK_Söh_Œa
 0x1000dc5

	)

2477 
	#XK_Söh_Á
 0x1000dc6

	)

2478 
	#XK_Söh_Æ
 0x1000dˇ

	)

2479 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2480 
	#XK_Söh_´2
 0x1000dd0

	)

2481 
	#XK_Söh_´e2
 0x1000dd1

	)

2482 
	#XK_Söh_i2
 0x1000dd2

	)

2483 
	#XK_Söh_ii2
 0x1000dd3

	)

2484 
	#XK_Söh_u2
 0x1000dd4

	)

2485 
	#XK_Söh_uu2
 0x1000dd6

	)

2486 
	#XK_Söh_ru2
 0x1000dd8

	)

2487 
	#XK_Söh_e2
 0x1000dd9

	)

2488 
	#XK_Söh_ì2
 0x1000dd®

	)

2489 
	#XK_Söh_ai2
 0x1000ddb

	)

2490 
	#XK_Söh_o2
 0x1000dd¯

	)

2491 
	#XK_Söh_oo2
 0x1000ddd

	)

2492 
	#XK_Söh_au2
 0x1000ddê

	)

2493 
	#XK_Söh_lu2
 0x1000dd‡

	)

2494 
	#XK_Söh_ruu2
 0x1000df2

	)

2495 
	#XK_Söh_luu2
 0x1000df3

	)

2496 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/auxv.h

20 
	#AT_NULL
 0

	)

21 
	#AT_IGNORE
 1

	)

22 
	#AT_EXECFD
 2

	)

23 
	#AT_PHDR
 3

	)

24 
	#AT_PHENT
 4

	)

25 
	#AT_PHNUM
 5

	)

26 
	#AT_PAGESZ
 6

	)

27 
	#AT_BASE
 7

	)

28 
	#AT_FLAGS
 8

	)

29 
	#AT_ENTRY
 9

	)

30 
	#AT_NOTELF
 10

	)

31 
	#AT_UID
 11

	)

32 
	#AT_EUID
 12

	)

33 
	#AT_GID
 13

	)

34 
	#AT_EGID
 14

	)

35 
	#AT_CLKTCK
 17

	)

38 
	#AT_PLATFORM
 15

	)

39 
	#AT_HWCAP
 16

	)

44 
	#AT_FPUCW
 18

	)

47 
	#AT_DCACHEBSIZE
 19

	)

48 
	#AT_ICACHEBSIZE
 20

	)

49 
	#AT_UCACHEBSIZE
 21

	)

53 
	#AT_IGNOREPPC
 22

	)

55 
	#AT_SECURE
 23

	)

57 
	#AT_BASE_PLATFORM
 24

	)

59 
	#AT_RANDOM
 25

	)

61 
	#AT_HWCAP2
 26

	)

64 
	#AT_EXECFN
 31

	)

68 
	#AT_SYSINFO
 32

	)

69 
	#AT_SYSINFO_EHDR
 33

	)

73 
	#AT_L1I_CACHESHAPE
 34

	)

74 
	#AT_L1D_CACHESHAPE
 35

	)

75 
	#AT_L2_CACHESHAPE
 36

	)

76 
	#AT_L3_CACHESHAPE
 37

	)

81 
	#AT_L1I_CACHESIZE
 40

	)

82 
	#AT_L1I_CACHEGEOMETRY
 41

	)

83 
	#AT_L1D_CACHESIZE
 42

	)

84 
	#AT_L1D_CACHEGEOMETRY
 43

	)

85 
	#AT_L2_CACHESIZE
 44

	)

86 
	#AT_L2_CACHEGEOMETRY
 45

	)

87 
	#AT_L3_CACHESIZE
 46

	)

88 
	#AT_L3_CACHEGEOMETRY
 47

	)

90 
	#AT_MINSIGSTKSZ
 51

	)

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/endian.h

19 #i‚de‡
_BITS_ENDIAN_H


20 
	#_BITS_ENDIAN_H
 1

	)

30 
	#__LITTLE_ENDIAN
 1234

	)

31 
	#__BIG_ENDIAN
 4321

	)

32 
	#__PDP_ENDIAN
 3412

	)

35 
	~<bôs/ídü¬ess.h
>

39 #i‚de‡
__FLOAT_WORD_ORDER


40 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

43 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


44 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

45 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #i‚de‡
_BITS_ERRNO_H


20 
	#_BITS_ERRNO_H
 1

	)

22 #i‡!
deföed
 
_ERRNO_H


26 
	~<löux/î∫o.h
>

29 #i‚de‡
ENOTSUP


30 
	#ENOTSUP
 
EOPNOTSUPP


	)

33 #i‚de‡
ECANCELED


34 
	#ECANCELED
 125

	)

37 #i‚de‡
EOWNERDEAD


38 
	#EOWNERDEAD
 130

	)

41 #i‚de‡
ENOTRECOVERABLE


42 
	#ENOTRECOVERABLE
 131

	)

45 #i‚de‡
ERFKILL


46 
	#ERFKILL
 132

	)

49 #i‚de‡
EHWPOISON


50 
	#EHWPOISON
 133

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/fenv.h

18 #i‚de‡
_FENV_H


26 
	mFE_INVALID
 =

27 
	#FE_INVALID
 0x01

	)

28 
FE_INVALID
,

29 
	m__FE_DENORM
 = 0x02,

30 
	mFE_DIVBYZERO
 =

31 
	#FE_DIVBYZERO
 0x04

	)

32 
FE_DIVBYZERO
,

33 
	mFE_OVERFLOW
 =

34 
	#FE_OVERFLOW
 0x08

	)

35 
FE_OVERFLOW
,

36 
	mFE_UNDERFLOW
 =

37 
	#FE_UNDERFLOW
 0x10

	)

38 
FE_UNDERFLOW
,

39 
	mFE_INEXACT
 =

40 
	#FE_INEXACT
 0x20

	)

41 
FE_INEXACT


44 
	#FE_ALL_EXCEPT
 \

45 (
FE_INEXACT
 | 
FE_DIVBYZERO
 | 
FE_UNDERFLOW
 | 
FE_OVERFLOW
 | 
FE_INVALID
)

	)

52 
	mFE_TONEAREST
 =

53 
	#FE_TONEAREST
 0

	)

54 
FE_TONEAREST
,

55 
	mFE_DOWNWARD
 =

56 
	#FE_DOWNWARD
 0x400

	)

57 
FE_DOWNWARD
,

58 
	mFE_UPWARD
 =

59 
	#FE_UPWARD
 0x800

	)

60 
FE_UPWARD
,

61 
	mFE_TOWARDZERO
 =

62 
	#FE_TOWARDZERO
 0xc00

	)

63 
FE_TOWARDZERO


68 
	t„x˚±_t
;

77 
	m__c⁄åﬁ_w‹d
;

78 
	m__glibc_ª£rved1
;

79 
	m__°©us_w‹d
;

80 
	m__glibc_ª£rved2
;

81 
	m__ègs
;

82 
	m__glibc_ª£rved3
;

83 
	m__eù
;

84 
	m__cs_£À˘‹
;

85 
	m__›code
:11;

86 
	m__glibc_ª£rved4
:5;

87 
	m__d©a_off£t
;

88 
	m__d©a_£À˘‹
;

89 
	m__glibc_ª£rved5
;

90 #ifde‡
__x86_64__


91 
	m__mxc§
;

94 
	t„nv_t
;

97 
	#FE_DFL_ENV
 ((c⁄° 
„nv_t
 *Ë-1)

	)

99 #ifde‡
__USE_GNU


101 
	#FE_NOMASK_ENV
 ((c⁄° 
„nv_t
 *Ë-2)

	)

104 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

108 
	m__c⁄åﬁ_w‹d
;

109 
	m__glibc_ª£rved
;

110 
	m__mxc§
;

112 
	t„mode_t
;

115 
	#FE_DFL_MODE
 ((c⁄° 
„mode_t
 *Ë-1L)

	)

119 #ifde‡
__USE_EXTERN_INLINES


120 
	g__BEGIN_DECLS


123 #i‚de‡
_LIBC


124 
__REDIRECT_NTH
 (
__„øi£ex˚±_ª«med
, (), 
„øi£ex˚±
);

126 
__exã∫_Æways_ölöe
 

127 
__NTH
 (
	$__„øi£ex˚±_övÆid_divbyzîo
 (
__ex˚±s
))

129 i‡((
FE_INVALID
 & 
__ex˚±s
) != 0)

132 
__f
 = 0.0;

134 #ifde‡
__SSE_MATH__


135 
__asm__
 
	`__vﬁ©ûe__
 ("divs†%0, %0 " : : "x" (
__f
));

137 
__asm__
 
	`__vﬁ©ûe__
 ("fdiv %%st, %%st(0); fwait"

138 : "Ò" (
__f
) : "0" (__f));

140 (Ë&
__f
;

142 i‡((
FE_DIVBYZERO
 & 
__ex˚±s
) != 0)

144 
__f
 = 1.0;

145 
__g
 = 0.0;

147 #ifde‡
__SSE_MATH__


148 
__asm__
 
	`__vﬁ©ûe__
 ("divs†%1, %0" : : "x" (
__f
), "x" (
__g
));

150 
__asm__
 
	`__vﬁ©ûe__
 ("fdivp %%st, %%st(1); fwait"

151 : "Ò" (
__f
Ë: "0" (__f), "u" (
__g
) : "st(1)");

153 (Ë&
__f
;

155 
	}
}

156 
__exã∫_ölöe
 

157 
__NTH
 (
	$„øi£ex˚±
 (
__ex˚±s
))

159 i‡(
	`__buûtö_c⁄°™t_p
 (
__ex˚±s
)

160 && (
__ex˚±s
 & ~(
FE_INVALID
 | 
FE_DIVBYZERO
)) == 0)

162 
	`__„øi£ex˚±_övÆid_divbyzîo
 (
__ex˚±s
);

166  
	`__„øi£ex˚±_ª«med
 (
__ex˚±s
);

167 
	}
}

169 
	g__END_DECLS


	@/usr/include/bits/fenvinline.h

4 #i‚de‡
__NO_MATH_INLINES


	@/usr/include/bits/floatn.h

19 #i‚de‡
_BITS_FLOATN_H


20 
	#_BITS_FLOATN_H


	)

22 
	~<„©uªs.h
>

29 #i‡(
deföed
 
__x86_64__
 \

30 ? 
__GNUC_PREREQ
 (4, 3) \

31 : (
deföed
 
__GNU__
 ? 
	$__GNUC_PREREQ
 (4, 5Ë: 
	`__GNUC_PREREQ
 (4, 4))) \

32 && !
	`deföed
(
__CUDACC__
Ë&& !
	$deföed
(
__ICC
)

33 
	#__HAVE_FLOAT128
 1

	)

35 
	#__HAVE_FLOAT128
 0

	)

40 #i‡
__HAVE_FLOAT128


41 
	#__HAVE_DISTINCT_FLOAT128
 1

	)

43 
	#__HAVE_DISTINCT_FLOAT128
 0

	)

49 
	#__HAVE_FLOAT64X
 1

	)

55 
	#__HAVE_FLOAT64X_LONG_DOUBLE
 1

	)

57 #i‚de‡
__ASSEMBLER__


61 #i‡
__HAVE_FLOAT128


62 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


64 
	#__f128
(
x
Ëx##
q


	)

66 
	#__f128
(
x
Ëx##
f128


	)

71 #i‡
__HAVE_FLOAT128


72 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


75 
_Com∂ex
 
	t__cÊﬂt128
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__TC__
)));

76 
	#__CFLOAT128
 
__cÊﬂt128


	)

78 
	#__CFLOAT128
 
_Com∂ex
 
_Flﬂt128


	)

83 #i‡
__HAVE_FLOAT128


86 #i‡!
	`__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


87 
__Êﬂt128
 
	t_Flﬂt128
;

91 #i‡!
	`__GNUC_PREREQ
 (7, 0)

92 
	#__buûtö_huge_vÆf128
(Ë((
_Flﬂt128
Ë
	`__buûtö_huge_vÆ
 ())

	)

100 #i‡!
	`__GNUC_PREREQ
 (7, 0)

101 
	#__buûtö_c›ysignf128
 
__buûtö_c›ysignq


	)

102 
	#__buûtö_Ábsf128
 
__buûtö_Ábsq


	)

103 
	#__buûtö_öff128
(Ë((
_Flﬂt128
Ë
	`__buûtö_öf
 ())

	)

104 
	#__buûtö_«nf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«n
 (x))

	)

105 
	#__buûtö_«nsf128
(
x
Ë((
_Flﬂt128
Ë
	`__buûtö_«ns
 (x))

	)

112 #i‡!
	`__GNUC_PREREQ
 (6, 0)

113 
	#__buûtö_signbôf128
 
__signbôf128


	)

120 
	~<bôs/Êﬂä-comm⁄.h
>

	@/usr/include/bits/flt-eval-method.h

19 #i‚de‡
_MATH_H


23 #ifde‡
__FLT_EVAL_METHOD__


24 #i‡
__FLT_EVAL_METHOD__
 == -1

25 
	#__GLIBC_FLT_EVAL_METHOD
 2

	)

27 
	#__GLIBC_FLT_EVAL_METHOD
 
__FLT_EVAL_METHOD__


	)

29 #ñi‡
deföed
 
__x86_64__


30 
	#__GLIBC_FLT_EVAL_METHOD
 0

	)

32 
	#__GLIBC_FLT_EVAL_METHOD
 2

	)

	@/usr/include/bits/fp-fast.h

19 #i‚de‡
_MATH_H


23 #ifde‡
__USE_ISOC99


27 #ifde‡
__FP_FAST_FMA


28 
	#FP_FAST_FMA
 1

	)

31 #ifde‡
__FP_FAST_FMAF


32 
	#FP_FAST_FMAF
 1

	)

35 #ifde‡
__FP_FAST_FMAL


36 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/fp-logb.h

19 #i‚de‡
_MATH_H


23 
	#__FP_LOGB0_IS_MIN
 1

	)

24 
	#__FP_LOGBNAN_IS_MIN
 1

	)

	@/usr/include/bits/getopt_posix.h

20 #i‚de‡
_GETOPT_POSIX_H


21 
	#_GETOPT_POSIX_H
 1

	)

23 #i‡!
deföed
 
_UNISTD_H
 && !deföed 
_STDIO_H


27 
	~<bôs/gë›t_c‹e.h
>

29 
	g__BEGIN_DECLS


31 #i‡
deföed
 
__USE_POSIX2
 && !deföed 
__USE_POSIX_IMPLICITLY
 \

32 && !
deföed
 
	g__USE_GNU
 && !deföed 
	g_GETOPT_H


37 #ifde‡
__REDIRECT


38 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

39 c⁄° *
__sh‹t›ts
),

40 
__posix_gë›t
);

42 
	$__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

43 c⁄° *
__sh‹t›ts
)

44 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

45 
	#gë›t
 
__posix_gë›t


	)

49 
__END_DECLS


	@/usr/include/bits/hwcap.h

19 #i‚de‡
_SYS_AUXV_H


	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/iscanonical.h

19 #i‚de‡
_MATH_H


23 
	$__isˇn⁄iˇŒ
 (
__x
)

24 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

25 
	#__isˇn⁄iˇlf
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

26 
	#__isˇn⁄iˇl
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

27 #i‡
__HAVE_DISTINCT_FLOAT128


28 
	#__isˇn⁄iˇlf128
(
x
Ë((Ë(
	`__ty≥of
 (x)Ë(x), 1)

	)

37 #i‚de‡
__˝lu•lus


38 
	#isˇn⁄iˇl
(
x
Ë
	`__MATH_TG
 ((x), 
__isˇn⁄iˇl
, (x))

	)

47 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇlf
 (__val); }

48 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇl
 (__val); }

49 
ölöe
 
	`isˇn⁄iˇl
 (
__vÆ
Ë{  
	`__isˇn⁄iˇŒ
 (__val); }

50 #i‡
__HAVE_DISTINCT_FLOAT128


51 
ölöe
 
	`isˇn⁄iˇl
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__isˇn⁄iˇlf128
 (__val); }

53 
	}
}

	@/usr/include/bits/libc-header-start.h

27 #i‚de‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


31 #unde‡
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


33 
	~<„©uªs.h
>

37 #unde‡
__GLIBC_USE_LIB_EXT2


38 #i‡(
deföed
 
__USE_GNU
 \

39 || (
deföed
 
	g__STDC_WANT_LIB_EXT2__
 && __STDC_WANT_LIB_EXT2__ > 0))

40 
	#__GLIBC_USE_LIB_EXT2
 1

	)

42 
	#__GLIBC_USE_LIB_EXT2
 0

	)

49 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT


50 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_BFP_EXT__


51 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 1

	)

53 
	#__GLIBC_USE_IEC_60559_BFP_EXT
 0

	)

55 #unde‡
__GLIBC_USE_IEC_60559_BFP_EXT_C2X


56 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

57 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 1

	)

59 
	#__GLIBC_USE_IEC_60559_BFP_EXT_C2X
 0

	)

66 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_FUNCS_EXT__


68 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 1

	)

70 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT
 0

	)

72 #unde‡
__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X


73 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT
Ë|| __GLIBC_USE (
ISOC2X
)

74 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 1

	)

76 
	#__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X
 0

	)

81 #unde‡
__GLIBC_USE_IEC_60559_TYPES_EXT


82 #i‡
deföed
 
__USE_GNU
 || deföed 
__STDC_WANT_IEC_60559_TYPES_EXT__


83 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 1

	)

85 
	#__GLIBC_USE_IEC_60559_TYPES_EXT
 0

	)

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls-helper-functions.h

21 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

22 
__©åibuã__
 ((
__c⁄°__
));

25 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

26 
__©åibuã__
 ((
__c⁄°__
));

30 
__MATHDECL_1
 (, 
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

33 
__MATHDECL_1
 (, 
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

36 
__MATHDECL_1
 (, 
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

39 
__MATHDECL_1
 (, 
__i£qsig
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

42 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

43 
__©åibuã__
 ((
__c⁄°__
));

	@/usr/include/bits/mathcalls-narrow.h

19 #i‚de‡
_MATH_H


24 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
add
), 
__MATHCALL_REDIR_NAME
 (add), 2);

27 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
div
), 
__MATHCALL_REDIR_NAME
 (div), 2);

30 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
mul
), 
__MATHCALL_REDIR_NAME
 (mul), 2);

33 
__MATHCALL_NARROW
 (
__MATHCALL_NAME
 (
sub
), 
__MATHCALL_REDIR_NAME
 (sub), 2);

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


53 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

55 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

62 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

64 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

71 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 #ifde‡
__USE_GNU


79 
__MATHDECL_VEC
 (,
söcos
,,

80 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

83 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


85 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

87 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

89 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

95 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

98 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

101 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

104 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

107 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

110 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

112 #i‡
__GLIBC_USE
 (
IEC_60559_FUNCS_EXT_C2X
)

114 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

117 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


119 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

125 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

128 #ifde‡
__USE_ISOC99


130 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

133 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

140 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

143 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

145 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


147 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

150 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


152 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

159 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

162 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

165 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

168 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

170 #ifde‡
__USE_MISC


171 #i‡((!
deföed
 
__˝lu•lus
 \

172 || 
	g__˝lu•lus
 < 201103L \

173 || 
	g__MATH_DECLARING_DOUBLE
 == 0)) \

174 && !
__MATH_DECLARING_FLOATN


177 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

180 #i‡!
__MATH_DECLARING_FLOATN


182 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

185 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

189 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

194 #ifde‡
__USE_ISOC99


196 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

199 #ifde‡
__USE_ISOC99


201 
__MATHCALL
 (
«n
,, (c⁄° *
__ègb
));

205 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

206 #i‡((!
deföed
 
__˝lu•lus
 \

207 || 
	g__˝lu•lus
 < 201103L \

208 || 
	g__MATH_DECLARING_DOUBLE
 == 0)) \

209 && !
__MATH_DECLARING_FLOATN


211 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

215 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

217 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

218 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

219 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

220 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

221 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

222 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

226 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


228 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

229 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

230 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

233 #ifde‡
__USE_ISOC99


235 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

238 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

239 #i‡!
__MATH_DECLARING_FLOATN


241 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

245 #ifde‡
__USE_MISC


249 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

253 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


256 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

259 
__MATHCALL
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

260 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT
 && !
__MATH_DECLARING_FLOATN


261 
__MATHCALL
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
));

264 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
Ë|| 
__MATH_DECLARING_FLOATN


266 
__MATHCALL
 (
√xtdown
,, (
_MdoubÀ_
 
__x
));

268 
__MATHCALL
 (
√xtup
,, (
_MdoubÀ_
 
__x
));

272 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

274 #ifde‡
__USE_ISOC99


276 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

280 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

283 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
Ë|| 
__MATH_DECLARING_FLOATN


285 
__MATHDECL
 (, 
Œogb
,, (
_MdoubÀ_
 
__x
));

288 #ifde‡
__USE_ISOC99


290 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

294 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

298 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

302 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

307 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

314 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

315 
__exãnsi⁄__


316 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

320 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

321 
__exãnsi⁄__


322 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

326 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

329 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

332 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

335 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

338 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
Ë|| 
__MATH_DECLARING_FLOATN


340 
__MATHCALLX
 (
roundeví
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

344 
__MATHDECL
 (
__ötmax_t
, 
‰omÂ
,, (
_MdoubÀ_
 
__x
, 
__round
,

345 
__width
));

349 
__MATHDECL
 (
__uötmax_t
, 
u‰omÂ
,, (
_MdoubÀ_
 
__x
, 
__round
,

350 
__width
));

355 
__MATHDECL
 (
__ötmax_t
, 
‰omÂx
,, (
_MdoubÀ_
 
__x
, 
__round
,

356 
__width
));

361 
__MATHDECL
 (
__uötmax_t
, 
u‰omÂx
,, (
_MdoubÀ_
 
__x
, 
__round
,

362 
__width
));

365 
__MATHCALLX
 (
fmaxmag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

368 
__MATHCALLX
 (
fmömag
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

371 
__MATHDECL_1
 (, 
ˇn⁄iˇlize
,, (
_MdoubÀ_
 *
__cx
, c⁄° _MdoubÀ_ *
__x
));

374 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
Ë|| 
__MATH_DECLARING_FLOATN


376 
__MATHDECL_1
 (, 
tŸÆ‹dî
,, (c⁄° 
_MdoubÀ_
 *
__x
,

377 c⁄° 
_MdoubÀ_
 *
__y
))

378 
	g__©åibuã_puª__
;

381 
__MATHDECL_1
 (, 
tŸÆ‹dîmag
,, (c⁄° 
_MdoubÀ_
 *
__x
,

382 c⁄° 
_MdoubÀ_
 *
__y
))

383 
	g__©åibuã_puª__
;

386 
__MATHCALL
 (
gë∑ylﬂd
,, (c⁄° 
_MdoubÀ_
 *
__x
));

389 
__MATHDECL_1
 (, 
£çaylﬂd
,, (
_MdoubÀ_
 *
__x
, _MdoubÀ_ 
__∑ylﬂd
));

392 
__MATHDECL_1
 (, 
£çaylﬂdsig
,, (
_MdoubÀ_
 *
__x
, _MdoubÀ_ 
__∑ylﬂd
));

395 #i‡(
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

396 && 
	g__MATH_DECLARING_DOUBLE
 \

397 && !
deföed
 
	g__USE_XOPEN2K8
)) \

398 && !
__MATH_DECLARING_FLOATN


400 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathinline.h

8 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

27 
	~<bôs/w‹dsize.h
>

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 #ifde‡
__USE_XOPEN2K


139 
	#_POSIX_TZNAME_MAX
 6

	)

141 
	#_POSIX_TZNAME_MAX
 3

	)

144 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


146 
	#_POSIX_QLIMIT
 1

	)

150 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

153 
	#_POSIX_UIO_MAXIOV
 16

	)

157 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

161 
	~<bôs/loˇl_lim.h
>

164 #i‚def 
SSIZE_MAX


168 #i‡
__WORDSIZE
 =64 || 
__WORDSIZE32_SIZE_ULONG


169 
	#SSIZE_MAX
 
LONG_MAX


	)

171 
	#SSIZE_MAX
 
INT_MAX


	)

179 #i‚def 
NGROUPS_MAX


180 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

32 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

35 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

38 
	#_POSIX_FSYNC
 200809L

	)

41 
	#_POSIX_MAPPED_FILES
 200809L

	)

44 
	#_POSIX_MEMLOCK
 200809L

	)

47 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

50 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

53 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

57 
	#_POSIX_VDISABLE
 '\0'

	)

60 
	#_POSIX_NO_TRUNC
 1

	)

63 
	#_XOPEN_REALTIME
 1

	)

66 
	#_XOPEN_REALTIME_THREADS
 1

	)

69 
	#_XOPEN_SHM
 1

	)

72 
	#_POSIX_THREADS
 200809L

	)

75 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

76 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

79 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

85 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

88 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

92 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

94 #ifde‡
__USE_XOPEN2K8


96 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

99 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

103 
	#_POSIX_SEMAPHORES
 200809L

	)

106 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

109 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

110 
	#_POSIX_ASYNC_IO
 1

	)

112 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

114 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

117 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

120 
	#_LFS_LARGEFILE
 1

	)

121 
	#_LFS64_LARGEFILE
 1

	)

122 
	#_LFS64_STDIO
 1

	)

125 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

128 
	#_POSIX_CPUTIME
 0

	)

131 
	#_POSIX_THREAD_CPUTIME
 0

	)

134 
	#_POSIX_REGEXP
 1

	)

137 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

140 
	#_POSIX_SHELL
 1

	)

143 
	#_POSIX_TIMEOUTS
 200809L

	)

146 
	#_POSIX_SPIN_LOCKS
 200809L

	)

149 
	#_POSIX_SPAWN
 200809L

	)

152 
	#_POSIX_TIMERS
 200809L

	)

155 
	#_POSIX_BARRIERS
 200809L

	)

158 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

161 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

164 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

167 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

170 
	#_POSIX_ADVISORY_INFO
 200809L

	)

173 
	#_POSIX_IPV6
 200809L

	)

176 
	#_POSIX_RAW_SOCKETS
 200809L

	)

179 
	#_POSIX2_CHAR_TERM
 200809L

	)

182 
	#_POSIX_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

186 
	#_POSIX_TRACE
 -1

	)

187 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

188 
	#_POSIX_TRACE_INHERIT
 -1

	)

189 
	#_POSIX_TRACE_LOG
 -1

	)

192 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_COMMON_H


20 
	#_BITS_PTHREADTYPES_COMMON_H
 1

	)

23 
	~<bôs/thªad-sh¨ed-ty≥s.h
>

27 
	t±hªad_t
;

34 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

35 
	m__Æign
;

36 } 
	t±hªad_muãx©å_t
;

43 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

44 
	m__Æign
;

45 } 
	t±hªad_c⁄d©å_t
;

49 
	t±hªad_key_t
;

53 
	t__ONCE_ALIGNMENT
 
	t±hªad_⁄˚_t
;

56 
	u±hªad_©å_t


58 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

59 
	m__Æign
;

61 #i‚de‡
__have_±hªad_©å_t


62 
±hªad_©å_t
 
	t±hªad_©å_t
;

63 
	#__have_±hªad_©å_t
 1

	)

69 
__±hªad_muãx_s
 
	m__d©a
;

70 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

71 
	m__Æign
;

72 } 
	t±hªad_muãx_t
;

77 
__±hªad_c⁄d_s
 
	m__d©a
;

78 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

79 
__exãnsi⁄__
 
	m__Æign
;

80 } 
	t±hªad_c⁄d_t
;

83 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 
__±hªad_rwlock_¨ch_t
 
	m__d©a
;

89 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

90 
	m__Æign
;

91 } 
	t±hªad_rwlock_t
;

95 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

96 
	m__Æign
;

97 } 
	t±hªad_rwlock©å_t
;

101 #ifde‡
__USE_XOPEN2K


103 vﬁ©ûê
	t±hªad_•ölock_t
;

110 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

111 
	m__Æign
;

112 } 
	t±hªad_b¨rõr_t
;

116 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

117 
	m__Æign
;

118 } 
	t±hªad_b¨rõøâr_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

19 #i‚de‡
_SETJMP_H


24 #ifde‡
__REDIRECT_NTH


25 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

26 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

27 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

28 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

29 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

30 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

31 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

32 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

33 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

35 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

36 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

37 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

38 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_BITS_SIGACTION_H


20 
	#_BITS_SIGACTION_H
 1

	)

22 #i‚de‡
_SIGNAL_H


27 
	ssiga˘i⁄


30 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


34 
__sigh™dÀr_t
 
	mß_h™dÀr
;

36 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

38 
	m__siga˘i⁄_h™dÀr
;

39 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

40 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

42 
__sigh™dÀr_t
 
	mß_h™dÀr
;

46 
__sig£t_t
 
	mß_mask
;

49 
	mß_Êags
;

52 (*
	mß_ª°‹î
) ();

56 
	#SA_NOCLDSTOP
 1

	)

57 
	#SA_NOCLDWAIT
 2

	)

58 
	#SA_SIGINFO
 4

	)

60 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


61 
	#SA_ONSTACK
 0x08000000

	)

63 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


64 
	#SA_RESTART
 0x10000000

	)

65 
	#SA_NODEFER
 0x40000000

	)

67 
	#SA_RESETHAND
 0x80000000

	)

69 #ifde‡
__USE_MISC


70 
	#SA_INTERRUPT
 0x20000000

	)

73 
	#SA_NOMASK
 
SA_NODEFER


	)

74 
	#SA_ONESHOT
 
SA_RESETHAND


	)

75 
	#SA_STACK
 
SA_ONSTACK


	)

79 
	#SIG_BLOCK
 0

	)

80 
	#SIG_UNBLOCK
 1

	)

81 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	~<bôs/ty≥s.h
>

27 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

28 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

29 
	#FP_XSTATE_MAGIC2_SIZE
  (
FP_XSTATE_MAGIC2
)

	)

31 
	s_Âx_sw_byãs


33 
__uöt32_t
 
	mmagic1
;

34 
__uöt32_t
 
	mexãnded_size
;

35 
__uöt64_t
 
	mx°©e_bv
;

36 
__uöt32_t
 
	mx°©e_size
;

37 
__uöt32_t
 
	m__glibc_ª£rved1
[7];

40 
	s_Âªg


42 
	msignifiˇnd
[4];

43 
	mexp⁄ít
;

46 
	s_Âxªg


48 
	msignifiˇnd
[4];

49 
	mexp⁄ít
;

50 
	m__glibc_ª£rved1
[3];

53 
	s_xmmªg


55 
__uöt32_t
 
	mñemít
[4];

60 #i‚de‡
__x86_64__


62 
	s_Â°©e


65 
__uöt32_t
 
	mcw
;

66 
__uöt32_t
 
	msw
;

67 
__uöt32_t
 
	mèg
;

68 
__uöt32_t
 
	mùoff
;

69 
__uöt32_t
 
	mcs£l
;

70 
__uöt32_t
 
	md©aoff
;

71 
__uöt32_t
 
	md©a£l
;

72 
_Âªg
 
	m_°
[8];

73 
	m°©us
;

74 
	mmagic
;

77 
__uöt32_t
 
	m_fx§_ív
[6];

78 
__uöt32_t
 
	mmxc§
;

79 
__uöt32_t
 
	m__glibc_ª£rved1
;

80 
_Âxªg
 
	m_fx§_°
[8];

81 
_xmmªg
 
	m_xmm
[8];

82 
__uöt32_t
 
	m__glibc_ª£rved2
[56];

85 #i‚de‡
sigc⁄ãxt_°ru˘


90 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

93 
	#X86_FXSR_MAGIC
 0x0000

	)

95 
	ssigc⁄ãxt


97 
	mgs
, 
	m__gsh
;

98 
	mfs
, 
	m__fsh
;

99 
	mes
, 
	m__esh
;

100 
	mds
, 
	m__dsh
;

101 
	medi
;

102 
	mesi
;

103 
	mebp
;

104 
	me•
;

105 
	mebx
;

106 
	medx
;

107 
	mecx
;

108 
	móx
;

109 
	må≠no
;

110 
	mîr
;

111 
	meù
;

112 
	mcs
, 
	m__csh
;

113 
	meÊags
;

114 
	me•_©_sig«l
;

115 
	mss
, 
	m__ssh
;

116 
_Â°©e
 * 
	mÂ°©e
;

117 
	mﬁdmask
;

118 
	m¸2
;

123 
	s_Â°©e


126 
__uöt16_t
 
	mcwd
;

127 
__uöt16_t
 
	mswd
;

128 
__uöt16_t
 
	m·w
;

129 
__uöt16_t
 
	mf›
;

130 
__uöt64_t
 
	mrù
;

131 
__uöt64_t
 
	mrdp
;

132 
__uöt32_t
 
	mmxc§
;

133 
__uöt32_t
 
	mmx¸_mask
;

134 
_Âxªg
 
	m_°
[8];

135 
_xmmªg
 
	m_xmm
[16];

136 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

139 
	ssigc⁄ãxt


141 
__uöt64_t
 
	mr8
;

142 
__uöt64_t
 
	mr9
;

143 
__uöt64_t
 
	mr10
;

144 
__uöt64_t
 
	mr11
;

145 
__uöt64_t
 
	mr12
;

146 
__uöt64_t
 
	mr13
;

147 
__uöt64_t
 
	mr14
;

148 
__uöt64_t
 
	mr15
;

149 
__uöt64_t
 
	mrdi
;

150 
__uöt64_t
 
	mrsi
;

151 
__uöt64_t
 
	mrbp
;

152 
__uöt64_t
 
	mrbx
;

153 
__uöt64_t
 
	mrdx
;

154 
__uöt64_t
 
	møx
;

155 
__uöt64_t
 
	mrcx
;

156 
__uöt64_t
 
	mr•
;

157 
__uöt64_t
 
	mrù
;

158 
__uöt64_t
 
	meÊags
;

159 
	mcs
;

160 
	mgs
;

161 
	mfs
;

162 
	m__∑d0
;

163 
__uöt64_t
 
	mîr
;

164 
__uöt64_t
 
	må≠no
;

165 
__uöt64_t
 
	mﬁdmask
;

166 
__uöt64_t
 
	m¸2
;

167 
__exãnsi⁄__
 union

169 
_Â°©e
 * 
	mÂ°©e
;

170 
__uöt64_t
 
	m__Â°©e_w‹d
;

172 
__uöt64_t
 
	m__ª£rved1
 [8];

177 
	s_xßve_hdr


179 
__uöt64_t
 
	mx°©e_bv
;

180 
__uöt64_t
 
	m__glibc_ª£rved1
[2];

181 
__uöt64_t
 
	m__glibc_ª£rved2
[5];

184 
	s_ymmh_°©e


186 
__uöt32_t
 
	mymmh_•a˚
[64];

189 
	s_x°©e


191 
_Â°©e
 
	mÂ°©e
;

192 
_xßve_hdr
 
	mx°©e_hdr
;

193 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/sigevent-consts.h

19 #i‚de‡
_BITS_SIGEVENT_CONSTS_H


20 
	#_BITS_SIGEVENT_CONSTS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_AIO_H


29 
	mSIGEV_SIGNAL
 = 0,

30 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

31 
	mSIGEV_NONE
,

32 
	#SIGEV_NONE
 
SIGEV_NONE


	)

33 
	mSIGEV_THREAD
,

34 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

36 
	mSIGEV_THREAD_ID
 = 4

38 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/siginfo-consts.h

19 #i‚de‡
_BITS_SIGINFO_CONSTS_H


20 
	#_BITS_SIGINFO_CONSTS_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	~<bôs/sigöfo-¨ch.h
>

29 #i‚de‡
__SI_ASYNCIO_AFTER_SIGIO


30 
	#__SI_ASYNCIO_AFTER_SIGIO
 1

	)

37 
	mSI_ASYNCNL
 = -60,

38 
	mSI_DETHREAD
 = -7,

40 
	mSI_TKILL
,

41 
	mSI_SIGIO
,

42 #i‡
__SI_ASYNCIO_AFTER_SIGIO


43 
	mSI_ASYNCIO
,

44 
	mSI_MESGQ
,

45 
	mSI_TIMER
,

47 
	mSI_MESGQ
,

48 
	mSI_TIMER
,

49 
	mSI_ASYNCIO
,

51 
	mSI_QUEUE
,

52 
	mSI_USER
,

53 
	mSI_KERNEL
 = 0x80

55 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

56 
	#SI_DETHREAD
 
SI_DETHREAD


	)

57 
	#SI_TKILL
 
SI_TKILL


	)

58 
	#SI_SIGIO
 
SI_SIGIO


	)

59 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

60 
	#SI_MESGQ
 
SI_MESGQ


	)

61 
	#SI_TIMER
 
SI_TIMER


	)

62 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

63 
	#SI_QUEUE
 
SI_QUEUE


	)

64 
	#SI_USER
 
SI_USER


	)

65 
	#SI_KERNEL
 
SI_KERNEL


	)

69 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


73 
	mILL_ILLOPC
 = 1,

74 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

75 
	mILL_ILLOPN
,

76 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

77 
	mILL_ILLADR
,

78 
	#ILL_ILLADR
 
ILL_ILLADR


	)

79 
	mILL_ILLTRP
,

80 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

81 
	mILL_PRVOPC
,

82 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

83 
	mILL_PRVREG
,

84 
	#ILL_PRVREG
 
ILL_PRVREG


	)

85 
	mILL_COPROC
,

86 
	#ILL_COPROC
 
ILL_COPROC


	)

87 
	mILL_BADSTK
,

88 
	#ILL_BADSTK
 
ILL_BADSTK


	)

89 
	mILL_BADIADDR


90 
	#ILL_BADIADDR
 
ILL_BADIADDR


	)

96 
	mFPE_INTDIV
 = 1,

97 
	#FPE_INTDIV
 
FPE_INTDIV


	)

98 
	mFPE_INTOVF
,

99 
	#FPE_INTOVF
 
FPE_INTOVF


	)

100 
	mFPE_FLTDIV
,

101 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

102 
	mFPE_FLTOVF
,

103 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

104 
	mFPE_FLTUND
,

105 
	#FPE_FLTUND
 
FPE_FLTUND


	)

106 
	mFPE_FLTRES
,

107 
	#FPE_FLTRES
 
FPE_FLTRES


	)

108 
	mFPE_FLTINV
,

109 
	#FPE_FLTINV
 
FPE_FLTINV


	)

110 
	mFPE_FLTSUB
,

111 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

112 
	mFPE_FLTUNK
 = 14,

113 
	#FPE_FLTUNK
 
FPE_FLTUNK


	)

114 
	mFPE_CONDTRAP


115 
	#FPE_CONDTRAP
 
FPE_CONDTRAP


	)

121 
	mSEGV_MAPERR
 = 1,

122 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

123 
	mSEGV_ACCERR
,

124 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

125 
	mSEGV_BNDERR
,

126 
	#SEGV_BNDERR
 
SEGV_BNDERR


	)

127 
	mSEGV_PKUERR
,

128 
	#SEGV_PKUERR
 
SEGV_PKUERR


	)

129 
	mSEGV_ACCADI
,

130 
	#SEGV_ACCADI
 
SEGV_ACCADI


	)

131 
	mSEGV_ADIDERR
,

132 
	#SEGV_ADIDERR
 
SEGV_ADIDERR


	)

133 
	mSEGV_ADIPERR


134 
	#SEGV_ADIPERR
 
SEGV_ADIPERR


	)

140 
	mBUS_ADRALN
 = 1,

141 
	#BUS_ADRALN
 
BUS_ADRALN


	)

142 
	mBUS_ADRERR
,

143 
	#BUS_ADRERR
 
BUS_ADRERR


	)

144 
	mBUS_OBJERR
,

145 
	#BUS_OBJERR
 
BUS_OBJERR


	)

146 
	mBUS_MCEERR_AR
,

147 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

148 
	mBUS_MCEERR_AO


149 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

153 #ifde‡
__USE_XOPEN_EXTENDED


157 
	mTRAP_BRKPT
 = 1,

158 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

159 
	mTRAP_TRACE
,

160 
	#TRAP_TRACE
 
TRAP_TRACE


	)

161 
	mTRAP_BRANCH
,

162 
	#TRAP_BRANCH
 
TRAP_BRANCH


	)

163 
	mTRAP_HWBKPT
,

164 
	#TRAP_HWBKPT
 
TRAP_HWBKPT


	)

165 
	mTRAP_UNK


166 
	#TRAP_UNK
 
TRAP_UNK


	)

170 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


174 
	mCLD_EXITED
 = 1,

175 
	#CLD_EXITED
 
CLD_EXITED


	)

176 
	mCLD_KILLED
,

177 
	#CLD_KILLED
 
CLD_KILLED


	)

178 
	mCLD_DUMPED
,

179 
	#CLD_DUMPED
 
CLD_DUMPED


	)

180 
	mCLD_TRAPPED
,

181 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

182 
	mCLD_STOPPED
,

183 
	#CLD_STOPPED
 
CLD_STOPPED


	)

184 
	mCLD_CONTINUED


185 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

191 
	mPOLL_IN
 = 1,

192 
	#POLL_IN
 
POLL_IN


	)

193 
	mPOLL_OUT
,

194 
	#POLL_OUT
 
POLL_OUT


	)

195 
	mPOLL_MSG
,

196 
	#POLL_MSG
 
POLL_MSG


	)

197 
	mPOLL_ERR
,

198 
	#POLL_ERR
 
POLL_ERR


	)

199 
	mPOLL_PRI
,

200 
	#POLL_PRI
 
POLL_PRI


	)

201 
	mPOLL_HUP


202 
	#POLL_HUP
 
POLL_HUP


	)

208 #ifde‡
__USE_GNU


209 
	~<bôs/sigöfo-c⁄°s-¨ch.h
>

	@/usr/include/bits/signal_ext.h

19 #i‚de‡
_SIGNAL_H


23 #ifde‡
__USE_GNU


29 
tgkûl
 (
__pid_t
 
__tgid
, __pid_à
__tid
, 
__sig«l
);

	@/usr/include/bits/signum.h

19 #i‚de‡
_BITS_SIGNUM_H


20 
	#_BITS_SIGNUM_H
 1

	)

22 #i‚de‡
_SIGNAL_H


26 
	~<bôs/signum-gíîic.h
>

31 
	#SIGSTKFLT
 16

	)

32 
	#SIGPWR
 30

	)

34 #unde‡
SIGBUS


35 
	#SIGBUS
 7

	)

36 #unde‡
SIGUSR1


37 
	#SIGUSR1
 10

	)

38 #unde‡
SIGUSR2


39 
	#SIGUSR2
 12

	)

40 #unde‡
SIGCHLD


41 
	#SIGCHLD
 17

	)

42 #unde‡
SIGCONT


43 
	#SIGCONT
 18

	)

44 #unde‡
SIGSTOP


45 
	#SIGSTOP
 19

	)

46 #unde‡
SIGTSTP


47 
	#SIGTSTP
 20

	)

48 #unde‡
SIGURG


49 
	#SIGURG
 23

	)

50 #unde‡
SIGPOLL


51 
	#SIGPOLL
 29

	)

52 #unde‡
SIGSYS


53 
	#SIGSYS
 31

	)

55 #unde‡
__SIGRTMAX


56 
	#__SIGRTMAX
 64

	)

	@/usr/include/bits/sigstack.h

19 #i‚de‡
_BITS_SIGSTACK_H


20 
	#_BITS_SIGSTACK_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


27 
	#MINSIGSTKSZ
 2048

	)

30 
	#SIGSTKSZ
 8192

	)

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	$±hªad_sigmask
 (
__how
,

32 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/ss_flags.h

19 #i‚de‡
_BITS_SS_FLAGS_H


20 
	#_BITS_SS_FLAGS_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


29 
	mSS_ONSTACK
 = 1,

30 
	#SS_ONSTACK
 
SS_ONSTACK


	)

31 
	mSS_DISABLE


32 
	#SS_DISABLE
 
SS_DISABLE


	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/statx.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©x
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

29 #ifde‡
__has_ö˛ude


30 #i‡
__has_ö˛ude
 ("linux/stat.h")

31 
	~"löux/°©.h
"

32 #ifde‡
STATX_TYPE


33 
	#__°©x_time°amp_deföed
 1

	)

34 
	#__°©x_deföed
 1

	)

39 
	~<bôs/°©x-gíîic.h
>

	@/usr/include/bits/stdint-intn.h

19 #i‚de‡
_BITS_STDINT_INTN_H


20 
	#_BITS_STDINT_INTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__öt8_t
 
	töt8_t
;

25 
__öt16_t
 
	töt16_t
;

26 
__öt32_t
 
	töt32_t
;

27 
__öt64_t
 
	töt64_t
;

	@/usr/include/bits/stdint-uintn.h

19 #i‚de‡
_BITS_STDINT_UINTN_H


20 
	#_BITS_STDINT_UINTN_H
 1

	)

22 
	~<bôs/ty≥s.h
>

24 
__uöt8_t
 
	tuöt8_t
;

25 
__uöt16_t
 
	tuöt16_t
;

26 
__uöt32_t
 
	tuöt32_t
;

27 
__uöt64_t
 
	tuöt64_t
;

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

24 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

25 
	$__LDBL_REDIR_DECL
 (
•rötf
)

26 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

27 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

28 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

29 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

30 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

31 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

32 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

34 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

35 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

36 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

39 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


40 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

41 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

44 #ifdef 
__USE_ISOC99


45 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

46 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

47 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

48 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

50 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

51 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

52 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

56 #ifde‡
__USE_XOPEN2K8


57 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

58 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

61 #ifde‡
__USE_GNU


62 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

63 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

64 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

65 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

66 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


70 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

72 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


73 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

74 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 1

77 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

79 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

81 #ifde‡
__USE_XOPEN2K8


82 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

85 #ifde‡
__USE_GNU


86 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_BITS_STDIO_H


20 
	#_BITS_STDIO_H
 1

	)

22 #i‚de‡
_STDIO_H


26 #i‚de‡
__exã∫_ölöe


27 
	#__STDIO_INLINE
 
ölöe


	)

29 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

33 #ifde‡
__USE_EXTERN_INLINES


36 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

38 
__STDIO_INLINE
 

39 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

41  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

42 
	}
}

46 
__STDIO_INLINE
 

47 
	$gëch¨
 ()

49  
	`gëc
 (
°dö
);

50 
	}
}

53 #ifde‡
__USE_MISC


55 
__STDIO_INLINE
 

56 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

58  
	`__gëc_u∆ocked_body
 (
__Â
);

59 
	}
}

63 #ifde‡
__USE_POSIX


65 
__STDIO_INLINE
 

66 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

68  
	`__gëc_u∆ocked_body
 (
__Â
);

69 
	}
}

72 
__STDIO_INLINE
 

73 
	$gëch¨_u∆ocked
 ()

75  
	`__gëc_u∆ocked_body
 (
°dö
);

76 
	}
}

81 
__STDIO_INLINE
 

82 
	$putch¨
 (
__c
)

84  
	`putc
 (
__c
, 
°dout
);

85 
	}
}

88 #ifde‡
__USE_MISC


90 
__STDIO_INLINE
 

91 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

93  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

94 
	}
}

98 #ifde‡
__USE_POSIX


100 
__STDIO_INLINE
 

101 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

103  
	`__putc_u∆ocked_body
 (
__c
, 
__°ªam
);

104 
	}
}

107 
__STDIO_INLINE
 

108 
	$putch¨_u∆ocked
 (
__c
)

110  
	`__putc_u∆ocked_body
 (
__c
, 
°dout
);

111 
	}
}

115 #ifdef 
__USE_GNU


117 
__STDIO_INLINE
 
__ssize_t


118 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

120  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

121 
	}
}

125 #ifde‡
__USE_MISC


127 
__STDIO_INLINE
 

128 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

130  
	`__„of_u∆ocked_body
 (
__°ªam
);

131 
	}
}

134 
__STDIO_INLINE
 

135 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

137  
	`__„º‹_u∆ocked_body
 (
__°ªam
);

138 
	}
}

144 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

145 && !
deföed
 
	g__˝lu•lus


147 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

148 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

149 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

150 && (
size_t
Ë(
size
) != 0) \

151 ? ({ *
__±r
 = (*Ë(
±r
); \

152 
FILE
 *
__°ªam
 = (
°ªam
); \

153 
size_t
 
__˙t
; \

154 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

155 
__˙t
 > 0; --__cnt) \

157 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
); \

158 i‡(
__c
 =
EOF
) \

160 *
__±r
++ = 
__c
; \

162 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

163 / (
size_t
Ë(
size
); }) \

164 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

165 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

167 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

168 (Ë(
n
), (
size_t
) 0) \

169 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

171 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

172 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

173 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

174 && (
size_t
Ë(
size
) != 0) \

175 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

176 
FILE
 *
__°ªam
 = (
°ªam
); \

177 
size_t
 
__˙t
; \

178 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

179 
__˙t
 > 0; --__cnt) \

180 i‡(
	`putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

182 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

183 / (
size_t
Ë(
size
); }) \

184 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

185 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

187 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

188 (Ë(
n
), (
size_t
) 0) \

189 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

193 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_BITS_STDIO2_H


20 
	#_BITS_STDIO2_H
 1

	)

22 #i‚de‡
_STDIO_H


26 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

28 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

29 c⁄° *
__ª°ri˘
 
__f‹m©
,

30 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

32 #ifde‡
__va_¨g_∑ck


33 
__f‹tify_fun˘i⁄
 

34 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

36  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

37 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

38 
	}
}

39 #ñi‡!
deföed
 
__˝lu•lus


40 
	#•rötf
(
°r
, ...) \

41 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

42 
__VA_ARGS__
)

	)

45 
__f‹tify_fun˘i⁄
 

46 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

47 
__gnuc_va_li°
 
__≠
))

49  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

50 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

51 
	}
}

53 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


55 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 ...Ë
__THROW
;

58 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

59 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

60 
__gnuc_va_li°
 
__≠
Ë
__THROW
;

62 #ifde‡
__va_¨g_∑ck


63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

65 c⁄° *
__ª°ri˘
 
__fmt
, ...))

67  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

68 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

69 
	}
}

70 #ñi‡!
deföed
 
__˝lu•lus


71 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

72 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

73 
__VA_ARGS__
)

	)

76 
__f‹tify_fun˘i⁄
 

77 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

78 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

80  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

81 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

82 
	}
}

86 #i‡
__USE_FORTIFY_LEVEL
 > 1

88 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

90 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

91 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

92 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__≠
);

93 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

94 
__gnuc_va_li°
 
__≠
);

96 #ifde‡
__va_¨g_∑ck


97 
__f‹tify_fun˘i⁄
 

98 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

100  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

101 
	`__va_¨g_∑ck
 ());

102 
	}
}

104 
__f‹tify_fun˘i⁄
 

105 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

107  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

108 
	}
}

109 #ñi‡!
deföed
 
__˝lu•lus


110 
	#¥ötf
(...) \

111 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

112 
	#Ârötf
(
°ªam
, ...) \

113 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

116 
__f‹tify_fun˘i⁄
 

117 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

119 #ifde‡
__USE_EXTERN_INLINES


120  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

124 
	}
}

126 
__f‹tify_fun˘i⁄
 

127 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

128 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

130  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

131 
	}
}

133 #ifde‡
__USE_XOPEN2K8


134 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

135 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

136 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

137 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

138 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

140 #ifde‡
__va_¨g_∑ck


141 
__f‹tify_fun˘i⁄
 

142 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

144  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

145 
	`__va_¨g_∑ck
 ());

146 
	}
}

147 #ñi‡!
deföed
 
__˝lu•lus


148 
	#d¥ötf
(
fd
, ...) \

149 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

152 
__f‹tify_fun˘i⁄
 

153 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

155  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

156 
	}
}

159 #ifde‡
__USE_GNU


161 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, ...)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

164 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

165 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__¨g
)

166 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

167 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

168 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

170 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

171 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

172 
__Êag
,

173 c⁄° *
__ª°ri˘
 
__f‹m©
,

174 
__gnuc_va_li°
 
__¨gs
)

175 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

177 #ifde‡
__va_¨g_∑ck


178 
__f‹tify_fun˘i⁄
 

179 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

181  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

185 
__f‹tify_fun˘i⁄
 

186 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

189  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

190 
	`__va_¨g_∑ck
 ());

191 
	}
}

193 
__f‹tify_fun˘i⁄
 

194 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

195 c⁄° *
__ª°ri˘
 
__fmt
, ...))

197  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

198 
	`__va_¨g_∑ck
 ());

199 
	}
}

200 #ñi‡!
deföed
 
__˝lu•lus


201 
	#a•rötf
(
±r
, ...) \

202 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

203 
	#__a•rötf
(
±r
, ...) \

204 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

205 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

206 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

209 
__f‹tify_fun˘i⁄
 

210 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

211 
__gnuc_va_li°
 
__≠
))

213  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

214 
	}
}

216 
__f‹tify_fun˘i⁄
 

217 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

218 c⁄° *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

220  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

221 
__≠
);

222 
	}
}

228 #i‡
__GLIBC_USE
 (
DEPRECATED_GETS
)

229 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

230 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

231 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

234 
__f‹tify_fun˘i⁄
 
__wur
 *

235 
	$gës
 (*
__°r
)

237 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

238  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

239  
	`__gës_w¨n
 (
__°r
);

240 
	}
}

243 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

244 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

245 *
	`__REDIRECT
 (
__fgës_Æüs
,

246 (*
__ª°ri˘
 
__s
, 
__n
,

247 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

248 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

249 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

250 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

251 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

254 
__f‹tify_fun˘i⁄
 
__wur
 *

255 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

257 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

259 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

260  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

262 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

263  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

265  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

266 
	}
}

268 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

269 
size_t
 
__size
, size_à
__n
,

270 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

271 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

272 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

273 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

274 
‰ód
Ë
__wur
;

275 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

276 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

277 
size_t
 
__size
, size_à
__n
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
),

279 
__‰ód_chk
)

280 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

283 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


284 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
)

287 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

289 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

290 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

291 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

292  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

294 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

295  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

297  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

298 
	}
}

300 #ifde‡
__USE_GNU


301 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

302 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

304 (*
__ª°ri˘
 
__s
, 
__n
,

305 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

306 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

307 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

308 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

309 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

312 
__f‹tify_fun˘i⁄
 
__wur
 *

313 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

315 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

317 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

318  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

320 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

321  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

323  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

324 
	}
}

327 #ifde‡
__USE_MISC


328 #unde‡
‰ód_u∆ocked


329 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

330 
size_t
 
__size
, size_à
__n
,

331 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

332 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

333 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

334 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

335 
‰ód_u∆ocked
Ë
__wur
;

336 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

337 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

338 
size_t
 
__size
, size_à
__n
,

339 
FILE
 *
__ª°ri˘
 
__°ªam
),

340 
__‰ód_u∆ocked_chk
)

341 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

344 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


345 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

346 
FILE
 *
__ª°ri˘
 
__°ªam
)

348 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

350 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

351 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

352 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

353  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

354 
__°ªam
);

356 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

357  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

358 
__°ªam
);

361 #ifde‡
__USE_EXTERN_INLINES


362 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

363 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

364 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

365 && 
__size
 * 
__n
 <= 8)

367 
size_t
 
__˙t
 = 
__size
 * 
__n
;

368 *
__˝å
 = (*Ë
__±r
;

369 i‡(
__˙t
 == 0)

372 ; 
__˙t
 > 0; --__cnt)

374 
__c
 = 
	`gëc_u∆ocked
 (
__°ªam
);

375 i‡(
__c
 =
EOF
)

377 *
__˝å
++ = 
__c
;

379  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

382  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

383 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‚de‡
_BITS_STDIO_LIM_H


19 
	#_BITS_STDIO_LIM_H
 1

	)

21 #i‚de‡
_STDIO_H


25 
	#L_tm≤am
 20

	)

26 
	#TMP_MAX
 238328

	)

27 
	#FILENAME_MAX
 4096

	)

29 #ifde‡
__USE_POSIX


30 
	#L_˘îmid
 9

	)

31 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


32 
	#L_cu£rid
 9

	)

36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__exã∫_ölöe
 

25 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

27  
	`°πod
 (
__≈å
, (**Ë
NULL
);

28 
	}
}

	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 #ifde‡
__USE_GNU


28 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

31 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

32 
	$__LDBL_REDIR1_DECL
 (
°r‰oml
, 
°r‰omd
)

35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string_fortified.h

18 #i‚de‡
_BITS_STRING_FORTIFIED_H


19 
	#_BITS_STRING_FORTIFIED_H
 1

	)

21 #i‚de‡
_STRING_H


25 #i‡!
__GNUC_PREREQ
 (5,0)

26 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

30 
__f‹tify_fun˘i⁄
 *

31 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

32 
size_t
 
__Àn
))

34  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

35 
	}
}

37 
__f‹tify_fun˘i⁄
 *

38 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

40  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

41 
	}
}

43 #ifde‡
__USE_GNU


44 
__f‹tify_fun˘i⁄
 *

45 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

46 
size_t
 
__Àn
))

48  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

49 
	}
}

58 
__f‹tify_fun˘i⁄
 *

59 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

63 #i‡!
	`__GNUC_PREREQ
 (5,0)

64 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

65 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

67 
	`__w¨n_mem£t_zîo_Àn
 ();

68  
__de°
;

71  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

72 
	}
}

74 #ifde‡
__USE_MISC


75 
	~<bôs/°rögs_f‹tifõd.h
>

77 
	$__ex∂icô_bzîo_chk
 (*
__de°
, 
size_t
 
__Àn
, size_à
__de°Àn
)

78 
__THROW
 
	`__n⁄nuŒ
 ((1));

80 
__f‹tify_fun˘i⁄
 

81 
	`__NTH
 (
	$ex∂icô_bzîo
 (*
__de°
, 
size_t
 
__Àn
))

83 
	`__ex∂icô_bzîo_chk
 (
__de°
, 
__Àn
, 
	`__bos0
 (__dest));

84 
	}
}

87 
__f‹tify_fun˘i⁄
 *

88 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

90  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

91 
	}
}

93 #ifde‡
__USE_GNU


94 
__f‹tify_fun˘i⁄
 *

95 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

97  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

98 
	}
}

102 
__f‹tify_fun˘i⁄
 *

103 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

104 
size_t
 
__Àn
))

106  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

107 
	}
}

110 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

111 
size_t
 
__de°Àn
Ë
__THROW
;

112 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

113 
size_t
 
__n
), 
°≤˝y
);

115 
__f‹tify_fun˘i⁄
 *

116 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

118 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

119 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

120  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

121  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

122 
	}
}

125 
__f‹tify_fun˘i⁄
 *

126 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

128  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

129 
	}
}

132 
__f‹tify_fun˘i⁄
 *

133 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

134 
size_t
 
__Àn
))

136  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

137 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‚de‡
_BITS_TIME_H


24 
	#_BITS_TIME_H
 1

	)

26 
	~<bôs/ty≥s.h
>

34 
	#CLOCKS_PER_SEC
 ((
__˛ock_t
Ë1000000)

	)

36 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

37 && !
deföed
 
__USE_XOPEN2K


40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

60 
	#CLOCK_BOOTTIME
 7

	)

62 
	#CLOCK_REALTIME_ALARM
 8

	)

64 
	#CLOCK_BOOTTIME_ALARM
 9

	)

66 
	#CLOCK_TAI
 11

	)

69 
	#TIMER_ABSTIME
 1

	)

72 #ifde‡
__USE_GNU


73 
	~<bôs/timex.h
>

75 
__BEGIN_DECLS


78 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

80 
__END_DECLS


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/timesize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 
__öt8_t
 
	t__öt_Àa°8_t
;

53 
__uöt8_t
 
	t__uöt_Àa°8_t
;

54 
__öt16_t
 
	t__öt_Àa°16_t
;

55 
__uöt16_t
 
	t__uöt_Àa°16_t
;

56 
__öt32_t
 
	t__öt_Àa°32_t
;

57 
__uöt32_t
 
	t__uöt_Àa°32_t
;

58 
__öt64_t
 
	t__öt_Àa°64_t
;

59 
__uöt64_t
 
	t__uöt_Àa°64_t
;

62 #i‡
__WORDSIZE
 == 64

63 
	t__quad_t
;

64 
	t__u_quad_t
;

66 
__exãnsi⁄__
 
	t__quad_t
;

67 
__exãnsi⁄__
 
	t__u_quad_t
;

71 #i‡
__WORDSIZE
 == 64

72 
	t__ötmax_t
;

73 
	t__uötmax_t
;

75 
__exãnsi⁄__
 
	t__ötmax_t
;

76 
__exãnsi⁄__
 
	t__uötmax_t
;

109 
	#__S16_TYPE
 

	)

110 
	#__U16_TYPE
 

	)

111 
	#__S32_TYPE
 

	)

112 
	#__U32_TYPE
 

	)

113 
	#__SLONGWORD_TYPE
 

	)

114 
	#__ULONGWORD_TYPE
 

	)

115 #i‡
__WORDSIZE
 == 32

116 
	#__SQUAD_TYPE
 
__öt64_t


	)

117 
	#__UQUAD_TYPE
 
__uöt64_t


	)

118 
	#__SWORD_TYPE
 

	)

119 
	#__UWORD_TYPE
 

	)

120 
	#__SLONG32_TYPE
 

	)

121 
	#__ULONG32_TYPE
 

	)

122 
	#__S64_TYPE
 
__öt64_t


	)

123 
	#__U64_TYPE
 
__uöt64_t


	)

126 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

127 #ñi‡
__WORDSIZE
 == 64

128 
	t__SQUAD_TYPE
 

	)

129 
	t__UQUAD_TYPE
 

	)

130 
	t__SWORD_TYPE
 

	)

131 
	t__UWORD_TYPE
 

	)

132 
	t__SLONG32_TYPE
 

	)

133 
	t__ULONG32_TYPE
 

	)

134 
	t__S64_TYPE
 

	)

135 
	t__U64_TYPE
 

	)

137 
	t__STD_TYPE
 

	)

141 
	~<bôs/ty≥sizes.h
>

142 
	~<bôs/time64.h
>

145 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

146 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

147 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

148 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

149 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

150 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

151 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

152 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

153 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

154 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

155 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

156 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

157 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

158 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

159 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

160 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

161 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

162 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

164 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

165 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

168 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

171 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

174 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

179 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

180 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

183 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

184 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

187 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

188 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

191 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

193 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

196 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

198 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

202 
__off64_t
 
	t__loff_t
;

203 *
	t__ˇddr_t
;

206 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

209 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

214 
	t__sig_©omic_t
;

219 #i‡
__TIMESIZE
 =64 && 
deföed
 
__LIBC


220 
	#__time64_t
 
__time_t


	)

221 #ñi‡
__TIMESIZE
 != 64

222 
__STD_TYPE
 
__TIME64_T_TYPE
 
	g__time64_t
;

225 #unde‡
__STD_TYPE


	@/usr/include/bits/types/FILE.h

1 #i‚de‡
__FILE_deföed


2 
	#__FILE_deföed
 1

	)

4 
	g_IO_FILE
;

7 
_IO_FILE
 
	tFILE
;

	@/usr/include/bits/types/__FILE.h

1 #i‚de‡
____FILE_deföed


2 
	#____FILE_deföed
 1

	)

4 
	g_IO_FILE
;

5 
_IO_FILE
 
	t__FILE
;

	@/usr/include/bits/types/__fpos64_t.h

1 #i‚de‡
_____Âos64_t_deföed


2 
	#_____Âos64_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos64_t


12 
__off64_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos64_t
;

	@/usr/include/bits/types/__fpos_t.h

1 #i‚de‡
_____Âos_t_deföed


2 
	#_____Âos_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/__mb°©e_t.h
>

10 
	s_G_Âos_t


12 
__off_t
 
	m__pos
;

13 
__mb°©e_t
 
	m__°©e
;

14 } 
	t__Âos_t
;

	@/usr/include/bits/types/__sigset_t.h

1 #i‚de‡
____sig£t_t_deföed


2 
	#____sig£t_t_deföed


	)

4 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

7 
	m__vÆ
[
_SIGSET_NWORDS
];

8 } 
	t__sig£t_t
;

	@/usr/include/bits/types/clock_t.h

1 #i‚de‡
__˛ock_t_deföed


2 
	#__˛ock_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ock_t
 
	t˛ock_t
;

	@/usr/include/bits/types/clockid_t.h

1 #i‚de‡
__˛ockid_t_deföed


2 
	#__˛ockid_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__˛ockid_t
 
	t˛ockid_t
;

	@/usr/include/bits/types/cookie_io_functions_t.h

18 #i‚de‡
__cookõ_io_fun˘i⁄s_t_deföed


19 
	#__cookõ_io_fun˘i⁄s_t_deföed
 1

	)

21 
	~<bôs/ty≥s.h
>

27 
__ssize_t
 
	tcookõ_ªad_fun˘i⁄_t
 (*
	t__cookõ
, *
	t__buf
,

28 
	tsize_t
 
	t__nbyãs
);

36 
__ssize_t
 
	tcookõ_wrôe_fun˘i⁄_t
 (*
	t__cookõ
, c⁄° *
	t__buf
,

37 
	tsize_t
 
	t__nbyãs
);

45 
	tcookõ_£ek_fun˘i⁄_t
 (*
	t__cookõ
, 
	t__off64_t
 *
	t__pos
, 
	t__w
);

48 
	tcookõ_˛o£_fun˘i⁄_t
 (*
	t__cookõ
);

55 
	s_IO_cookõ_io_fun˘i⁄s_t


57 
cookõ_ªad_fun˘i⁄_t
 *
	mªad
;

58 
cookõ_wrôe_fun˘i⁄_t
 *
	mwrôe
;

59 
cookõ_£ek_fun˘i⁄_t
 *
	m£ek
;

60 
cookõ_˛o£_fun˘i⁄_t
 *
	m˛o£
;

61 } 
	tcookõ_io_fun˘i⁄s_t
;

	@/usr/include/bits/types/error_t.h

19 #i‚de‡
__îr‹_t_deföed


20 
	#__îr‹_t_deföed
 1

	)

22 
	tîr‹_t
;

	@/usr/include/bits/types/locale_t.h

19 #i‚de‡
_BITS_TYPES_LOCALE_T_H


20 
	#_BITS_TYPES_LOCALE_T_H
 1

	)

22 
	~<bôs/ty≥s/__loˇÀ_t.h
>

24 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types/sig_atomic_t.h

1 #i‚de‡
__sig_©omic_t_deföed


2 
	#__sig_©omic_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
__sig_©omic_t
 
	tsig_©omic_t
;

	@/usr/include/bits/types/sigevent_t.h

1 #i‚de‡
__sigevít_t_deföed


2 
	#__sigevít_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SIGEV_MAX_SIZE
 64

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

16 #i‚de‡
__have_±hªad_©å_t


17 
±hªad_©å_t
 
	t±hªad_©å_t
;

18 
	#__have_±hªad_©å_t
 1

	)

22 
	ssigevít


24 
__sigvÆ_t
 
	msigev_vÆue
;

25 
	msigev_signo
;

26 
	msigev_nŸify
;

30 
	m_∑d
[
__SIGEV_PAD_SIZE
];

34 
__pid_t
 
	m_tid
;

38 (*
	m_fun˘i⁄
Ë(
	m__sigvÆ_t
);

39 
±hªad_©å_t
 *
	m_©åibuã
;

40 } 
	m_sigev_thªad
;

41 } 
	m_sigev_un
;

42 } 
	tsigevít_t
;

45 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

46 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

	@/usr/include/bits/types/siginfo_t.h

1 #i‚de‡
__sigöfo_t_deföed


2 
	#__sigöfo_t_deföed
 1

	)

4 
	~<bôs/w‹dsize.h
>

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ty≥s/__sigvÆ_t.h
>

8 
	#__SI_MAX_SIZE
 128

	)

9 #i‡
__WORDSIZE
 == 64

10 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

12 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

16 
	~<bôs/sigöfo-¨ch.h
>

17 #i‚de‡
__SI_ALIGNMENT


18 
	#__SI_ALIGNMENT


	)

20 #i‚de‡
__SI_BAND_TYPE


21 
	#__SI_BAND_TYPE
 

	)

23 #i‚de‡
__SI_CLOCK_T


24 
	#__SI_CLOCK_T
 
__˛ock_t


	)

26 #i‚de‡
__SI_ERRNO_THEN_CODE


27 
	#__SI_ERRNO_THEN_CODE
 1

	)

29 #i‚de‡
__SI_HAVE_SIGSYS


30 
	#__SI_HAVE_SIGSYS
 1

	)

32 #i‚de‡
__SI_SIGFAULT_ADDL


33 
	#__SI_SIGFAULT_ADDL


	)

38 
	msi_signo
;

39 #i‡
__SI_ERRNO_THEN_CODE


40 
	msi_î∫o
;

42 
	msi_code
;

44 
	msi_code
;

45 
	msi_î∫o
;

47 #i‡
__WORDSIZE
 == 64

48 
	m__∑d0
;

53 
	m_∑d
[
__SI_PAD_SIZE
];

58 
__pid_t
 
	msi_pid
;

59 
__uid_t
 
	msi_uid
;

60 } 
	m_kûl
;

65 
	msi_tid
;

66 
	msi_ovîrun
;

67 
__sigvÆ_t
 
	msi_sigvÆ
;

68 } 
	m_timî
;

73 
__pid_t
 
	msi_pid
;

74 
__uid_t
 
	msi_uid
;

75 
__sigvÆ_t
 
	msi_sigvÆ
;

76 } 
	m_π
;

81 
__pid_t
 
	msi_pid
;

82 
__uid_t
 
	msi_uid
;

83 
	msi_°©us
;

84 
__SI_CLOCK_T
 
	msi_utime
;

85 
__SI_CLOCK_T
 
	msi_°ime
;

86 } 
	m_sigchld
;

91 *
	msi_addr
;

92 
__SI_SIGFAULT_ADDL


93 
	msi_addr_lsb
;

99 *
	m_lowî
;

100 *
	m_uµî
;

101 } 
	m_addr_bnd
;

103 
__uöt32_t
 
	m_pkey
;

104 } 
	m_bounds
;

105 } 
	m_sigÁu…
;

110 
__SI_BAND_TYPE
 
	msi_b™d
;

111 
	msi_fd
;

112 } 
	m_sigpﬁl
;

115 #i‡
__SI_HAVE_SIGSYS


118 *
	m_ˇŒ_addr
;

119 
	m_sysˇŒ
;

120 
	m_¨ch
;

121 } 
	m_sigsys
;

123 } 
	m_sifõlds
;

124 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

128 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

129 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

130 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

131 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

132 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

133 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

134 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

135 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

136 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

137 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

138 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

139 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

140 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_lowî


	)

141 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_addr_bnd
.
_uµî


	)

142 
	#si_pkey
 
_sifõlds
.
_sigÁu…
.
_bounds
.
_pkey


	)

143 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

144 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

145 #i‡
__SI_HAVE_SIGSYS


146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

	@/usr/include/bits/types/sigset_t.h

1 #i‚de‡
__sig£t_t_deföed


2 
	#__sig£t_t_deföed
 1

	)

4 
	~<bôs/ty≥s/__sig£t_t.h
>

7 
__sig£t_t
 
	tsig£t_t
;

	@/usr/include/bits/types/sigval_t.h

1 #i‚de‡
__sigvÆ_t_deföed


2 
	#__sigvÆ_t_deföed


	)

4 
	~<bôs/ty≥s/__sigvÆ_t.h
>

12 #i‚de‡
__USE_POSIX199309


16 
__sigvÆ_t
 
	tsigvÆ_t
;

	@/usr/include/bits/types/stack_t.h

19 #i‚de‡
__°ack_t_deföed


20 
	#__°ack_t_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

28 *
	mss_•
;

29 
	mss_Êags
;

30 
size_t
 
	mss_size
;

31 } 
	t°ack_t
;

	@/usr/include/bits/types/struct_FILE.h

18 #i‚de‡
__°ru˘_FILE_deföed


19 
	#__°ru˘_FILE_deföed
 1

	)

25 #i‡
deföed
 
_IO_USE_OLD_IO_FILE
 && !deföed 
_LIBC


29 #i‡
deföed
 
_IO_lock_t_deföed
 && !deföed 
_LIBC


33 
	~<bôs/ty≥s.h
>

35 
	g_IO_FILE
;

36 
	g_IO_m¨kî
;

37 
	g_IO_codecvt
;

38 
	g_IO_wide_d©a
;

42 #i‚de‡
_IO_lock_t_deföed


43 
	t_IO_lock_t
;

49 
	s_IO_FILE


51 
	m_Êags
;

54 *
	m_IO_ªad_±r
;

55 *
	m_IO_ªad_íd
;

56 *
	m_IO_ªad_ba£
;

57 *
	m_IO_wrôe_ba£
;

58 *
	m_IO_wrôe_±r
;

59 *
	m_IO_wrôe_íd
;

60 *
	m_IO_buf_ba£
;

61 *
	m_IO_buf_íd
;

64 *
	m_IO_ßve_ba£
;

65 *
	m_IO_backup_ba£
;

66 *
	m_IO_ßve_íd
;

68 
_IO_m¨kî
 *
	m_m¨kîs
;

70 
_IO_FILE
 *
	m_chaö
;

72 
	m_fûío
;

73 
	m_Êags2
;

74 
__off_t
 
	m_ﬁd_off£t
;

77 
	m_cur_cﬁumn
;

78 sig√d 
	m_vèbÀ_off£t
;

79 
	m_sh‹tbuf
[1];

81 
_IO_lock_t
 *
	m_lock
;

82 #ifde‡
_IO_USE_OLD_IO_FILE


85 
	s_IO_FILE_com∂ëe


87 
_IO_FILE
 
	m_fûe
;

89 
__off64_t
 
	m_off£t
;

91 
_IO_codecvt
 *
	m_codecvt
;

92 
_IO_wide_d©a
 *
	m_wide_d©a
;

93 
_IO_FILE
 *
	m_‰ìªs_li°
;

94 *
	m_‰ìªs_buf
;

95 
size_t
 
	m__∑d5
;

96 
	m_mode
;

98 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

102 
	#__gëc_u∆ocked_body
(
_Â
) \

103 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
) \

104 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

106 
	#__putc_u∆ocked_body
(
_ch
, 
_Â
) \

107 (
	`__glibc_u∆ikñy
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
) \

108 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

109 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

111 
	#_IO_EOF_SEEN
 0x0010

	)

112 
	#__„of_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

114 
	#_IO_ERR_SEEN
 0x0020

	)

115 
	#__„º‹_u∆ocked_body
(
_Â
Ë(((_Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

117 
	#_IO_USER_LOCK
 0x8000

	)

	@/usr/include/bits/types/struct_itimerspec.h

1 #i‚de‡
__ôimî•ec_deföed


2 
	#__ôimî•ec_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

5 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

8 
	sôimî•ec


10 
time•ec
 
	mô_öãrvÆ
;

11 
time•ec
 
	mô_vÆue
;

	@/usr/include/bits/types/struct_sigstack.h

19 #i‚de‡
__sig°ack_deföed


20 
	#__sig°ack_deföed
 1

	)

23 
	ssig°ack


25 *
	mss_•
;

26 
	mss_⁄°ack
;

	@/usr/include/bits/types/struct_timespec.h

2 #i‚de‡
_STRUCT_TIMESPEC


3 
	#_STRUCT_TIMESPEC
 1

	)

5 
	~<bôs/ty≥s.h
>

6 
	~<bôs/ídün.h
>

10 
	stime•ec


12 
__time_t
 
	mtv_£c
;

13 #i‡
__WORDSIZE
 == 64 \

14 || (
deföed
 
	m__SYSCALL_WORDSIZE
 && __SYSCALL_WORDSIZE == 64) \

15 || 
__TIMESIZE
 == 32

16 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

18 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


20 
	mtv_n£c
;

22 
	mtv_n£c
;

	@/usr/include/bits/types/struct_tm.h

1 #i‚de‡
__°ru˘_tm_deföed


2 
	#__°ru˘_tm_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
	stm


9 
	mtm_£c
;

10 
	mtm_mö
;

11 
	mtm_hour
;

12 
	mtm_mday
;

13 
	mtm_m⁄
;

14 
	mtm_yór
;

15 
	mtm_wday
;

16 
	mtm_yday
;

17 
	mtm_isd°
;

19 #ifdef 
__USE_MISC


20 
	mtm_gmtoff
;

21 c⁄° *
	mtm_z⁄e
;

23 
	m__tm_gmtoff
;

24 c⁄° *
	m__tm_z⁄e
;

	@/usr/include/bits/types/time_t.h

1 #i‚de‡
__time_t_deföed


2 
	#__time_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__time_t
 
	ttime_t
;

	@/usr/include/bits/types/timer_t.h

1 #i‚de‡
__timî_t_deföed


2 
	#__timî_t_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

7 
__timî_t
 
	ttimî_t
;

	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #ifde‡
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/unistd_ext.h

19 #i‚de‡
_UNISTD_H


23 #ifde‡
__USE_GNU


34 
__pid_t
 
	$gëtid
 (Ë
__THROW
;

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

36 
	#__WNOTHREAD
 0x20000000

	)

38 
	#__WALL
 0x40000000

	)

39 
	#__WCLONE
 0x80000000

	)

42 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


43 #i‚de‡
__ENUM_IDTYPE_T


44 
	#__ENUM_IDTYPE_T
 1

	)

48 #unde‡
P_ALL


49 #unde‡
P_PID


50 #unde‡
P_PGID


54 
	mP_ALL
,

55 
	mP_PID
,

56 
	mP_PGID


57 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

7 
	#__WORDSIZE32_SIZE_ULONG
 0

	)

8 
	#__WORDSIZE32_PTRDIFF_LONG
 0

	)

11 #ifde‡
__x86_64__


12 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

14 
	#__SYSCALL_WORDSIZE
 64

	)

16 
	#__WORDSIZE_TIME64_COMPAT32
 0

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

62 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

64 
	~<bôs/uio_lim.h
>

65 #ifde‡
__IOV_MAX


66 
	#IOV_MAX
 
__IOV_MAX


	)

68 #unde‡
IOV_MAX


73 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

76 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

79 
	#NL_MSGMAX
 
INT_MAX


	)

83 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


84 
	#NL_NMAX
 
INT_MAX


	)

88 
	#NL_SETMAX
 
INT_MAX


	)

91 
	#NL_TEXTMAX
 
INT_MAX


	)

94 
	#NZERO
 20

	)

98 #ifde‡
INT_MAX


99 #i‡
INT_MAX
 == 32767

100 
	#WORD_BIT
 16

	)

102 #i‡
INT_MAX
 == 2147483647

103 
	#WORD_BIT
 32

	)

106 
	#WORD_BIT
 64

	)

109 #ñi‡
deföed
 
__INT_MAX__


110 #i‡
__INT_MAX__
 == 32767

111 
	#WORD_BIT
 16

	)

113 #i‡
__INT_MAX__
 == 2147483647

114 
	#WORD_BIT
 32

	)

117 
	#WORD_BIT
 64

	)

121 
	#WORD_BIT
 32

	)

125 #ifde‡
LONG_MAX


126 #i‡
LONG_MAX
 == 2147483647

127 
	#LONG_BIT
 32

	)

130 
	#LONG_BIT
 64

	)

132 #ñi‡
deföed
 
__LONG_MAX__


133 #i‡
__LONG_MAX__
 == 2147483647

134 
	#LONG_BIT
 32

	)

137 
	#LONG_BIT
 64

	)

140 
	~<bôs/w‹dsize.h
>

141 #i‡
__WORDSIZE
 == 64

142 
	#LONG_BIT
 64

	)

144 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ídün.h
>

26 #ifde‡
__USE_MISC


27 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

28 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

29 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

30 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

33 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


35 
	~<bôs/byãsw≠.h
>

36 
	~<bôs/uöä-idítôy.h
>

38 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


39 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

40 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

41 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

42 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

44 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

45 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

46 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

47 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

49 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

50 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

51 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

52 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

55 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

56 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

57 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

58 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

60 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

61 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

62 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

63 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

65 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

66 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

67 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

68 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

120 #unde‡
__USE_ISOC11


121 #unde‡
__USE_ISOC99


122 #unde‡
__USE_ISOC95


123 #unde‡
__USE_ISOCXX11


124 #unde‡
__USE_POSIX


125 #unde‡
__USE_POSIX2


126 #unde‡
__USE_POSIX199309


127 #unde‡
__USE_POSIX199506


128 #unde‡
__USE_XOPEN


129 #unde‡
__USE_XOPEN_EXTENDED


130 #unde‡
__USE_UNIX98


131 #unde‡
__USE_XOPEN2K


132 #unde‡
__USE_XOPEN2KXSI


133 #unde‡
__USE_XOPEN2K8


134 #unde‡
__USE_XOPEN2K8XSI


135 #unde‡
__USE_LARGEFILE


136 #unde‡
__USE_LARGEFILE64


137 #unde‡
__USE_FILE_OFFSET64


138 #unde‡
__USE_MISC


139 #unde‡
__USE_ATFILE


140 #unde‡
__USE_GNU


141 #unde‡
__USE_FORTIFY_LEVEL


142 #unde‡
__KERNEL_STRICT_NAMES


143 #unde‡
__GLIBC_USE_ISOC2X


144 #unde‡
__GLIBC_USE_DEPRECATED_GETS


145 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


149 #i‚de‡
_LOOSE_KERNEL_NAMES


150 
	#__KERNEL_STRICT_NAMES


	)

160 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


161 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

162 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

164 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

171 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

173 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

175 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

179 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

185 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

186 && !
deföed
 
	g_DEFAULT_SOURCE


188 #unde‡
_DEFAULT_SOURCE


189 
	#_DEFAULT_SOURCE
 1

	)

193 #ifde‡
_GNU_SOURCE


194 #unde‡
_ISOC95_SOURCE


195 
	#_ISOC95_SOURCE
 1

	)

196 #unde‡
_ISOC99_SOURCE


197 
	#_ISOC99_SOURCE
 1

	)

198 #unde‡
_ISOC11_SOURCE


199 
	#_ISOC11_SOURCE
 1

	)

200 #unde‡
_ISOC2X_SOURCE


201 
	#_ISOC2X_SOURCE
 1

	)

202 #unde‡
_POSIX_SOURCE


203 
	#_POSIX_SOURCE
 1

	)

204 #unde‡
_POSIX_C_SOURCE


205 
	#_POSIX_C_SOURCE
 200809L

	)

206 #unde‡
_XOPEN_SOURCE


207 
	#_XOPEN_SOURCE
 700

	)

208 #unde‡
_XOPEN_SOURCE_EXTENDED


209 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

210 #unde‡
_LARGEFILE64_SOURCE


211 
	#_LARGEFILE64_SOURCE
 1

	)

212 #unde‡
_DEFAULT_SOURCE


213 
	#_DEFAULT_SOURCE
 1

	)

214 #unde‡
_ATFILE_SOURCE


215 
	#_ATFILE_SOURCE
 1

	)

220 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

221 || (!
deföed
 
	g__STRICT_ANSI__
 \

222 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

223 && !
deföed
 
	g_ISOC2X_SOURCE
 \

224 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

225 && !
deföed
 
	g_XOPEN_SOURCE
))

226 #unde‡
_DEFAULT_SOURCE


227 
	#_DEFAULT_SOURCE
 1

	)

231 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

232 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

233 
	#__GLIBC_USE_ISOC2X
 1

	)

235 
	#__GLIBC_USE_ISOC2X
 0

	)

239 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

240 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

241 
	#__USE_ISOC11
 1

	)

245 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

246 || 
deföed
 
_ISOC2X_SOURCE
 \

247 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

248 
	#__USE_ISOC99
 1

	)

252 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

253 || 
deföed
 
_ISOC2X_SOURCE
 \

254 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

255 
	#__USE_ISOC95
 1

	)

258 #ifde‡
__˝lu•lus


260 #i‡
__˝lu•lus
 >= 201703L

261 
	#__USE_ISOC11
 1

	)

265 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


266 
	#__USE_ISOCXX11
 1

	)

267 
	#__USE_ISOC99
 1

	)

274 #ifde‡
_DEFAULT_SOURCE


275 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


276 
	#__USE_POSIX_IMPLICITLY
 1

	)

278 #unde‡
_POSIX_SOURCE


279 
	#_POSIX_SOURCE
 1

	)

280 #unde‡
_POSIX_C_SOURCE


281 
	#_POSIX_C_SOURCE
 200809L

	)

284 #i‡((!
deföed
 
__STRICT_ANSI__
 \

285 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

286 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

287 
	#_POSIX_SOURCE
 1

	)

288 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

289 
	#_POSIX_C_SOURCE
 2

	)

290 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

291 
	#_POSIX_C_SOURCE
 199506L

	)

292 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

293 
	#_POSIX_C_SOURCE
 200112L

	)

295 
	#_POSIX_C_SOURCE
 200809L

	)

297 
	#__USE_POSIX_IMPLICITLY
 1

	)

306 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

307 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

308 
	#_POSIX_SOURCE
 1

	)

309 #unde‡
_POSIX_C_SOURCE


310 
	#_POSIX_C_SOURCE
 199506L

	)

313 #i‡(
deföed
 
_POSIX_SOURCE
 \

314 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

315 || 
deföed
 
_XOPEN_SOURCE
)

316 
	#__USE_POSIX
 1

	)

319 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


320 
	#__USE_POSIX2
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

324 
	#__USE_POSIX199309
 1

	)

327 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

328 
	#__USE_POSIX199506
 1

	)

331 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

332 
	#__USE_XOPEN2K
 1

	)

333 #unde‡
__USE_ISOC95


334 
	#__USE_ISOC95
 1

	)

335 #unde‡
__USE_ISOC99


336 
	#__USE_ISOC99
 1

	)

339 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

340 
	#__USE_XOPEN2K8
 1

	)

341 #unde‡
_ATFILE_SOURCE


342 
	#_ATFILE_SOURCE
 1

	)

345 #ifdef 
_XOPEN_SOURCE


346 
	#__USE_XOPEN
 1

	)

347 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

348 
	#__USE_XOPEN_EXTENDED
 1

	)

349 
	#__USE_UNIX98
 1

	)

350 #unde‡
_LARGEFILE_SOURCE


351 
	#_LARGEFILE_SOURCE
 1

	)

352 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

353 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

354 
	#__USE_XOPEN2K8
 1

	)

355 
	#__USE_XOPEN2K8XSI
 1

	)

357 
	#__USE_XOPEN2K
 1

	)

358 
	#__USE_XOPEN2KXSI
 1

	)

359 #unde‡
__USE_ISOC95


360 
	#__USE_ISOC95
 1

	)

361 #unde‡
__USE_ISOC99


362 
	#__USE_ISOC99
 1

	)

365 #ifde‡
_XOPEN_SOURCE_EXTENDED


366 
	#__USE_XOPEN_EXTENDED
 1

	)

371 #ifde‡
_LARGEFILE_SOURCE


372 
	#__USE_LARGEFILE
 1

	)

375 #ifde‡
_LARGEFILE64_SOURCE


376 
	#__USE_LARGEFILE64
 1

	)

379 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

380 
	#__USE_FILE_OFFSET64
 1

	)

383 #i‡
deföed
 
_DEFAULT_SOURCE


384 
	#__USE_MISC
 1

	)

387 #ifdef 
_ATFILE_SOURCE


388 
	#__USE_ATFILE
 1

	)

391 #ifdef 
_GNU_SOURCE


392 
	#__USE_GNU
 1

	)

395 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

396 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

397 #i‡
_FORTIFY_SOURCE
 > 1

398 
	#__USE_FORTIFY_LEVEL
 2

	)

400 
	#__USE_FORTIFY_LEVEL
 1

	)

403 
	#__USE_FORTIFY_LEVEL
 0

	)

410 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


411 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

413 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

428 #i‡(
deföed
 
__USE_GNU
 \

429 && (
deföed
 
	g__˝lu•lus
 \

430 ? (
	g__˝lu•lus
 < 201103L && !
deföed
 
	g__GXX_EXPERIMENTAL_CXX0X__
) \

431 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

432 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

434 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

439 
	~<°dc-¥edef.h
>

447 #unde‡
__GNU_LIBRARY__


448 
	#__GNU_LIBRARY__
 6

	)

452 
	#__GLIBC__
 2

	)

453 
	#__GLIBC_MINOR__
 31

	)

455 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

456 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

459 #i‚de‡
__ASSEMBLER__


460 #i‚de‡
_SYS_CDEFS_H


461 
	~<sys/cdefs.h
>

466 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


467 
	#__USE_LARGEFILE
 1

	)

468 
	#__USE_LARGEFILE64
 1

	)

474 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

475 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

476 && 
deföed
 
	g__exã∫_ölöe


477 
	#__USE_EXTERN_INLINES
 1

	)

485 
	~<gnu/°ubs.h
>

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

58 
	#__NTHNL
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__NTHNL
(
f˘
Ëf˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

69 
	#__NTHNL
(
f˘
Ë
	)
fct

75 #i‡(
deföed
 
__˝lu•lus
 \

76 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

77 
	#__ölöe
 
ölöe


	)

79 
	#__ölöe


	)

82 
	#__THROW


	)

83 
	#__THROWNL


	)

84 
	#__NTH
(
f˘
Ë
	)
fct

91 #i‡
deföed
 
__˛™g__
 && deföed 
__has_exãnsi⁄


92 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë
	`__has_exãnsi⁄
 (ext)

	)

94 
	#__glibc_˛™g_has_exãnsi⁄
(
ext
Ë0

	)

99 
	#__P
(
¨gs
Ë
	)
args

100 
	#__PMT
(
¨gs
Ë
	)
args

105 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

106 
	#__STRING
(
x
Ë#x

	)

109 
	#__±r_t
 *

	)

113 #ifdef 
__˝lu•lus


114 
	#__BEGIN_DECLS
 "C" {

	)

115 
	#__END_DECLS
 }

	)

117 
	#__BEGIN_DECLS


	)

118 
	#__END_DECLS


	)

123 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

124 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

126 #i‡
__GNUC_PREREQ
 (4,3)

127 
	#__w¨nde˛
(
«me
, 
msg
) \

128 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

129 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

130 
	#__îr‹de˛
(
«me
, 
msg
) \

131 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

133 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

134 
	#__w¨«âr
(
msg
)

	)

135 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

142 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

143 
	#__Êex¨r
 []

	)

144 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

145 #ñi‡
__GNUC_PREREQ
 (2,97)

148 
	#__Êex¨r
 []

	)

149 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

150 #ñi‡
deföed
 
__GNUC__


153 
	#__Êex¨r
 [0]

	)

154 
	#__glibc_c99_Êex¨r_avaûabÀ
 1

	)

157 
	#__Êex¨r
 [1]

	)

158 
	#__glibc_c99_Êex¨r_avaûabÀ
 0

	)

172 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

174 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

175 #ifde‡
__˝lu•lus


176 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

177 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

179 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

183 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

184 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

186 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

187 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

200 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

201 
	#__©åibuã__
(
xyz
Ë

	)

207 #i‡
__GNUC_PREREQ
 (2,96)

208 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

210 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (4, 3)

216 
	#__©åibuã_Æloc_size__
(
∑øms
) \

217 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

219 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

225 #i‡
__GNUC_PREREQ
 (2,96)

226 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

228 
	#__©åibuã_puª__


	)

232 #i‡
__GNUC_PREREQ
 (2,5)

233 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

235 
	#__©åibuã_c⁄°__


	)

241 #i‡
__GNUC_PREREQ
 (3,1)

242 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

243 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

246 
	#__©åibuã_noölöe__


	)

250 #i‡
__GNUC_PREREQ
 (3,2)

251 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

253 
	#__©åibuã_dïªˇãd__


	)

259 #i‡
__GNUC_PREREQ
 (4,5) \

260 || 
	$__glibc_˛™g_has_exãnsi⁄
 (
__©åibuã_dïªˇãd_wôh_mesßge__
)

261 
	#__©åibuã_dïªˇãd_msg__
(
msg
) \

262 
	`__©åibuã__
 ((
	`__dïªˇãd__
 (
msg
)))

	)

264 
	#__©åibuã_dïªˇãd_msg__
(
msg
Ë
__©åibuã_dïªˇãd__


	)

273 #i‡
	`__GNUC_PREREQ
 (2,8)

274 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

276 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

283 #i‡
	`__GNUC_PREREQ
 (2,97)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

285 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

287 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

292 #i‡
	`__GNUC_PREREQ
 (3,3)

293 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

295 
	#__n⁄nuŒ
(
∑øms
)

	)

300 #i‡
	`__GNUC_PREREQ
 (3,4)

301 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

302 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

303 #i‡
__USE_FORTIFY_LEVEL
 > 0

304 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

307 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

309 #i‚de‡
__wur


310 
	#__wur


	)

314 #i‡
	`__GNUC_PREREQ
 (3,2)

318 #unde‡
__Æways_ölöe


319 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

321 #unde‡
__Æways_ölöe


322 
	#__Æways_ölöe
 
__ölöe


	)

327 #i‡
	`__GNUC_PREREQ
 (4,3)

328 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

330 
	#__©åibuã_¨tificül__


	)

342 #i‡(!
deföed
 
__˝lu•lus
 || 
	`__GNUC_PREREQ
 (4,3) \

343 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

344 || 
deföed
 
__GNUC_GNU_INLINE__
)))

345 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


346 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

347 
	#__exã∫_Æways_ölöe
 \

348 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

350 
	#__exã∫_ölöe
 
__ölöe


	)

351 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

355 #ifde‡
__exã∫_Æways_ölöe


356 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

361 #i‡
	`__GNUC_PREREQ
 (4,3)

362 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

363 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

370 #i‡!
	`__GNUC_PREREQ
 (2,8)

371 
	#__exãnsi⁄__


	)

375 #i‡!
	`__GNUC_PREREQ
 (2,92)

376 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

377 
	#__ª°ri˘
 
ª°ri˘


	)

379 
	#__ª°ri˘


	)

386 #i‡
	`__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


387 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

389 #ifde‡
__GNUC__


390 
	#__ª°ri˘_¨r


	)

392 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

393 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

396 
	#__ª°ri˘_¨r


	)

401 #i‡
__GNUC__
 >= 3

402 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

403 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

405 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

406 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

409 #ifde‡
__has_©åibuã


410 
	#__glibc_has_©åibuã
(
©å
Ë
	`__has_©åibuã
 (©å)

	)

412 
	#__glibc_has_©åibuã
(
©å
Ë0

	)

415 #i‡(!
deföed
 
_N‹ëu∫
 \

416 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

417 && !
	$__GNUC_PREREQ
 (4,7))

418 #i‡
	`__GNUC_PREREQ
 (2,8)

419 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

421 
	#_N‹ëu∫


	)

425 #i‡
	`__GNUC_PREREQ
 (8, 0)

429 
	#__©åibuã_n⁄°rög__
 
	`__©åibuã__
 ((
__n⁄°rög__
))

	)

431 
	#__©åibuã_n⁄°rög__


	)

435 #unde‡
__©åibuã_c›y__


436 #i‡
	`__GNUC_PREREQ
 (9, 0)

439 
	#__©åibuã_c›y__
(
¨g
Ë
	`__©åibuã__
 ((
	`__c›y__
 (¨g)))

	)

441 
	#__©åibuã_c›y__
(
¨g
)

	)

444 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

445 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

446 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

447 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

448 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

449 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

452 
	~<bôs/w‹dsize.h
>

453 
	~<bôs/l⁄g-doubÀ.h
>

455 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


456 
	#__LDBL_COMPAT
 1

	)

457 #ifde‡
__REDIRECT


458 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

459 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

460 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

461 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

462 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

463 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

464 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

465 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

466 
	#__LDBL_REDIR_DECL
(
«me
) \

467 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

468 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

469 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

470 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

471 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

474 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


475 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

476 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

477 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

478 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

479 
	#__LDBL_REDIR_DECL
(
«me
)

	)

480 #ifde‡
__REDIRECT


481 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

482 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

483 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

492 #i‡
	`__GNUC_PREREQ
 (4,8Ë|| 
	`__glibc_˛™g_¥îeq
 (3,5)

493 
	#__glibc_ma¸o_w¨nög1
(
mesßge
Ë
	`_Pøgma
 (#mesßge)

	)

494 
	#__glibc_ma¸o_w¨nög
(
mesßge
) \

495 
	`__glibc_ma¸o_w¨nög1
 (
GCC
 
w¨nög
 
mesßge
)

	)

497 
	#__glibc_ma¸o_w¨nög
(
msg
)

	)

507 #i‡!
deföed
 
__˝lu•lus
 \

508 && (
	`__GNUC_PREREQ
 (4, 9) \

509 || 
	`__glibc_˛™g_has_exãnsi⁄
 (
c_gíîic_£À˘i⁄s
) \

510 || (!
deföed
 
__GNUC__
 && deföed 
__STDC_VERSION__
 \

511 && 
__STDC_VERSION__
 >= 201112L))

512 
	#__HAVE_GENERIC_SELECTION
 1

	)

514 
	#__HAVE_GENERIC_SELECTION
 0

	)

	@/usr/include/sys/file.h

18 #i‚def 
_SYS_FILE_H


19 
	#_SYS_FILE_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‚def 
_FCNTL_H


24 
	~<f˙é.h
>

27 
	g__BEGIN_DECLS


32 #i‚de‡
L_SET


33 
	#L_SET
 0

	)

34 
	#L_INCR
 1

	)

35 
	#L_XTND
 2

	)

40 
	#LOCK_SH
 1

	)

41 
	#LOCK_EX
 2

	)

42 
	#LOCK_UN
 8

	)

45 
	#LOCK_NB
 4

	)

50 
	$Êock
 (
__fd
, 
__›î©i⁄
Ë
__THROW
;

53 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/ty≥s/sig£t_t.h
>

36 
	~<bôs/ty≥s/time_t.h
>

37 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

38 #ifde‡
__USE_XOPEN2K


39 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

42 #i‚de‡
__su£c⁄ds_t_deföed


43 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

44 
	#__su£c⁄ds_t_deföed


	)

49 
	t__fd_mask
;

52 #unde‡
__NFDBITS


54 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

55 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

56 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

63 #ifde‡
__USE_XOPEN


64 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

65 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

67 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

68 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

70 } 
	tfd_£t
;

73 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

75 #ifde‡
__USE_MISC


77 
__fd_mask
 
	tfd_mask
;

80 
	#NFDBITS
 
__NFDBITS


	)

85 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

86 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

87 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

88 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

91 
__BEGIN_DECLS


101 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

102 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

103 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

104 
timevÆ
 *
__ª°ri˘
 
__timeout
);

106 #ifde‡
__USE_XOPEN2K


113 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

114 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

115 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

116 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

117 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

122 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


123 
	~<bôs/£À˘2.h
>

126 
	g__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/time_t.h
>

25 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

27 #i‚de‡
__su£c⁄ds_t_deföed


28 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

29 
	#__su£c⁄ds_t_deföed


	)

32 
	~<sys/£À˘.h
>

34 
	g__BEGIN_DECLS


36 #ifde‡
__USE_GNU


38 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

39 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

40 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

41 }

	)

42 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

43 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

44 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

45 }

	)

49 #ifde‡
__USE_MISC


52 
	stimez⁄e


54 
	mtz_möuãswe°
;

55 
	mtz_d°time
;

66 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

67 *
__ª°ri˘
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 #ifde‡
__USE_MISC


75 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

76 c⁄° 
timez⁄e
 *
__tz
)

77 
__THROW
;

83 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

84 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

89 
	e__ôimî_which


92 
ITIMER_REAL
 = 0,

93 
	#ITIMER_REAL
 
ITIMER_REAL


	)

95 
ITIMER_VIRTUAL
 = 1,

96 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

99 
ITIMER_PROF
 = 2

100 
	#ITIMER_PROF
 
ITIMER_PROF


	)

105 
	sôimîvÆ


108 
timevÆ
 
ô_öãrvÆ
;

110 
timevÆ
 
ô_vÆue
;

113 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


116 
__ôimî_which
 
	t__ôimî_which_t
;

118 
	t__ôimî_which_t
;

123 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

124 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

129 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

130 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

131 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

136 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #ifde‡
__USE_MISC


141 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

148 #ifde‡
__USE_GNU


152 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

153 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

157 #ifde‡
__USE_MISC


160 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

161 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

162 
	#timîcmp
(
a
, 
b
, 
CMP
) \

163 (((
a
)->
tv_£c
 =(
b
)->tv_sec) \

164 ? ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) \

165 : ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

166 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

168 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

169 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

170 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

172 ++(
ªsu…
)->
tv_£c
; \

173 (
ªsu…
)->
tv_u£c
 -= 1000000; \

175 
	}
} 0)

	)

176 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

178 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

179 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

180 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

181 --(
ªsu…
)->
tv_£c
; \

182 (
ªsu…
)->
tv_u£c
 += 1000000; \

184 } 0)

	)

187 
	g__END_DECLS


	@/usr/include/sys/timeb.h

18 #i‚de‡
_SYS_TIMEB_H


19 
	#_SYS_TIMEB_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s/time_t.h
>

25 
__BEGIN_DECLS


29 
	stimeb


31 
time_t
 
	mtime
;

32 
	mmûlôm
;

33 
	mtimez⁄e
;

34 
	md°Êag
;

39 
	$·ime
 (
timeb
 *
__timebuf
)

40 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

42 
__END_DECLS


	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	~<bôs/ty≥s/sig£t_t.h
>

25 
	~<bôs/ty≥s/°ack_t.h
>

28 #ifde‡
__USE_MISC


29 
	#__˘x
(
Êd
Ë
	)
fld

31 
	#__˘x
(
Êd
Ë
__
 ## 
	)
fld

34 #ifde‡
__x86_64__


37 
__exãnsi⁄__
 
	tgªg_t
;

40 
	#__NGREG
 23

	)

41 #ifde‡
__USE_MISC


42 
	#NGREG
 
__NGREG


	)

46 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

48 #ifde‡
__USE_GNU


52 
	mREG_R8
 = 0,

53 
	#REG_R8
 
REG_R8


	)

54 
	mREG_R9
,

55 
	#REG_R9
 
REG_R9


	)

56 
	mREG_R10
,

57 
	#REG_R10
 
REG_R10


	)

58 
	mREG_R11
,

59 
	#REG_R11
 
REG_R11


	)

60 
	mREG_R12
,

61 
	#REG_R12
 
REG_R12


	)

62 
	mREG_R13
,

63 
	#REG_R13
 
REG_R13


	)

64 
	mREG_R14
,

65 
	#REG_R14
 
REG_R14


	)

66 
	mREG_R15
,

67 
	#REG_R15
 
REG_R15


	)

68 
	mREG_RDI
,

69 
	#REG_RDI
 
REG_RDI


	)

70 
	mREG_RSI
,

71 
	#REG_RSI
 
REG_RSI


	)

72 
	mREG_RBP
,

73 
	#REG_RBP
 
REG_RBP


	)

74 
	mREG_RBX
,

75 
	#REG_RBX
 
REG_RBX


	)

76 
	mREG_RDX
,

77 
	#REG_RDX
 
REG_RDX


	)

78 
	mREG_RAX
,

79 
	#REG_RAX
 
REG_RAX


	)

80 
	mREG_RCX
,

81 
	#REG_RCX
 
REG_RCX


	)

82 
	mREG_RSP
,

83 
	#REG_RSP
 
REG_RSP


	)

84 
	mREG_RIP
,

85 
	#REG_RIP
 
REG_RIP


	)

86 
	mREG_EFL
,

87 
	#REG_EFL
 
REG_EFL


	)

88 
	mREG_CSGSFS
,

89 
	#REG_CSGSFS
 
REG_CSGSFS


	)

90 
	mREG_ERR
,

91 
	#REG_ERR
 
REG_ERR


	)

92 
	mREG_TRAPNO
,

93 
	#REG_TRAPNO
 
REG_TRAPNO


	)

94 
	mREG_OLDMASK
,

95 
	#REG_OLDMASK
 
REG_OLDMASK


	)

96 
	mREG_CR2


97 
	#REG_CR2
 
REG_CR2


	)

101 
	s_libc_Âxªg


103 
__˘x
(
signifiˇnd
)[4];

104 
__˘x
(
exp⁄ít
);

105 
	m__glibc_ª£rved1
[3];

108 
	s_libc_xmmªg


110 
__uöt32_t
 
__˘x
(
ñemít
)[4];

113 
	s_libc_Â°©e


116 
__uöt16_t
 
__˘x
(
cwd
);

117 
__uöt16_t
 
__˘x
(
swd
);

118 
__uöt16_t
 
__˘x
(
·w
);

119 
__uöt16_t
 
__˘x
(
f›
);

120 
__uöt64_t
 
__˘x
(
rù
);

121 
__uöt64_t
 
__˘x
(
rdp
);

122 
__uöt32_t
 
__˘x
(
mxc§
);

123 
__uöt32_t
 
__˘x
(
mx¸_mask
);

124 
_libc_Âxªg
 
	m_°
[8];

125 
_libc_xmmªg
 
	m_xmm
[16];

126 
__uöt32_t
 
	m__glibc_ª£rved1
[24];

130 
_libc_Â°©e
 *
	tÂªg£t_t
;

135 
gªg£t_t
 
__˘x
(
gªgs
);

137 
Âªg£t_t
 
__˘x
(
Âªgs
);

138 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

139 } 
	tmc⁄ãxt_t
;

142 
	suc⁄ãxt_t


144 
__˘x
(
uc_Êags
);

145 
uc⁄ãxt_t
 *
	muc_lök
;

146 
°ack_t
 
	muc_°ack
;

147 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

148 
sig£t_t
 
	muc_sigmask
;

149 
_libc_Â°©e
 
	m__Âªgs_mem
;

150 
__exãnsi⁄__
 
	m__s•
[4];

151 } 
	tuc⁄ãxt_t
;

156 
	tgªg_t
;

159 
	#__NGREG
 19

	)

160 #ifde‡
__USE_MISC


161 
	#NGREG
 
__NGREG


	)

165 
gªg_t
 
	tgªg£t_t
[
__NGREG
];

167 #ifde‡
__USE_GNU


171 
	mREG_GS
 = 0,

172 
	#REG_GS
 
REG_GS


	)

173 
	mREG_FS
,

174 
	#REG_FS
 
REG_FS


	)

175 
	mREG_ES
,

176 
	#REG_ES
 
REG_ES


	)

177 
	mREG_DS
,

178 
	#REG_DS
 
REG_DS


	)

179 
	mREG_EDI
,

180 
	#REG_EDI
 
REG_EDI


	)

181 
	mREG_ESI
,

182 
	#REG_ESI
 
REG_ESI


	)

183 
	mREG_EBP
,

184 
	#REG_EBP
 
REG_EBP


	)

185 
	mREG_ESP
,

186 
	#REG_ESP
 
REG_ESP


	)

187 
	mREG_EBX
,

188 
	#REG_EBX
 
REG_EBX


	)

189 
	mREG_EDX
,

190 
	#REG_EDX
 
REG_EDX


	)

191 
	mREG_ECX
,

192 
	#REG_ECX
 
REG_ECX


	)

193 
	mREG_EAX
,

194 
	#REG_EAX
 
REG_EAX


	)

195 
	mREG_TRAPNO
,

196 
	#REG_TRAPNO
 
REG_TRAPNO


	)

197 
	mREG_ERR
,

198 
	#REG_ERR
 
REG_ERR


	)

199 
	mREG_EIP
,

200 
	#REG_EIP
 
REG_EIP


	)

201 
	mREG_CS
,

202 
	#REG_CS
 
REG_CS


	)

203 
	mREG_EFL
,

204 
	#REG_EFL
 
REG_EFL


	)

205 
	mREG_UESP
,

206 
	#REG_UESP
 
REG_UESP


	)

207 
	mREG_SS


208 
	#REG_SS
 
REG_SS


	)

213 
	s_libc_Âªg


215 
__˘x
(
signifiˇnd
)[4];

216 
__˘x
(
exp⁄ít
);

219 
	s_libc_Â°©e


221 
__˘x
(
cw
);

222 
__˘x
(
sw
);

223 
__˘x
(
èg
);

224 
__˘x
(
ùoff
);

225 
__˘x
(
cs£l
);

226 
__˘x
(
d©aoff
);

227 
__˘x
(
d©a£l
);

228 
_libc_Âªg
 
	m_°
[8];

229 
__˘x
(
°©us
);

233 
_libc_Â°©e
 *
	tÂªg£t_t
;

238 
gªg£t_t
 
__˘x
(
gªgs
);

241 
Âªg£t_t
 
__˘x
(
Âªgs
);

242 
__˘x
(
ﬁdmask
);

243 
__˘x
(
¸2
);

244 } 
	tmc⁄ãxt_t
;

247 
	suc⁄ãxt_t


249 
__˘x
(
uc_Êags
);

250 
uc⁄ãxt_t
 *
	muc_lök
;

251 
°ack_t
 
	muc_°ack
;

252 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

253 
sig£t_t
 
	muc_sigmask
;

254 
_libc_Â°©e
 
	m__Âªgs_mem
;

255 
	m__s•
[4];

256 } 
	tuc⁄ãxt_t
;

260 #unde‡
__˘x


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 
	#adÀr32_z
 
z_adÀr32_z


	)

33 #i‚de‡
Z_SOLO


34 
	#com¥ess
 
z_com¥ess


	)

35 
	#com¥ess2
 
z_com¥ess2


	)

36 
	#com¥essBound
 
z_com¥essBound


	)

38 
	#¸c32
 
z_¸c32


	)

39 
	#¸c32_comböe
 
z_¸c32_comböe


	)

40 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

41 
	#¸c32_z
 
z_¸c32_z


	)

42 
	#deÊ©e
 
z_deÊ©e


	)

43 
	#deÊ©eBound
 
z_deÊ©eBound


	)

44 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

45 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

46 
	#deÊ©eGëDi˘i⁄¨y
 
z_deÊ©eGëDi˘i⁄¨y


	)

47 
	#deÊ©eInô
 
z_deÊ©eInô


	)

48 
	#deÊ©eInô2
 
z_deÊ©eInô2


	)

49 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

50 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

51 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

52 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

53 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

54 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

55 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

56 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

57 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

58 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

59 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

60 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

61 #i‚de‡
Z_SOLO


62 
	#gz_îr‹
 
z_gz_îr‹


	)

63 
	#gz_ötmax
 
z_gz_ötmax


	)

64 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

65 
	#gzbuf„r
 
z_gzbuf„r


	)

66 
	#gz˛óªº
 
z_gz˛óªº


	)

67 
	#gz˛o£
 
z_gz˛o£


	)

68 
	#gz˛o£_r
 
z_gz˛o£_r


	)

69 
	#gz˛o£_w
 
z_gz˛o£_w


	)

70 
	#gzdúe˘
 
z_gzdúe˘


	)

71 
	#gzd›í
 
z_gzd›í


	)

72 
	#gzeof
 
z_gzeof


	)

73 
	#gzîr‹
 
z_gzîr‹


	)

74 
	#gzÊush
 
z_gzÊush


	)

75 
	#gz‰ód
 
z_gz‰ód


	)

76 
	#gzfwrôe
 
z_gzfwrôe


	)

77 
	#gzgëc
 
z_gzgëc


	)

78 
	#gzgëc_
 
z_gzgëc_


	)

79 
	#gzgës
 
z_gzgës


	)

80 
	#gzoff£t
 
z_gzoff£t


	)

81 
	#gzoff£t64
 
z_gzoff£t64


	)

82 
	#gz›í
 
z_gz›í


	)

83 
	#gz›í64
 
z_gz›í64


	)

84 #ifde‡
_WIN32


85 
	#gz›í_w
 
z_gz›í_w


	)

87 
	#gz¥ötf
 
z_gz¥ötf


	)

88 
	#gzputc
 
z_gzputc


	)

89 
	#gzputs
 
z_gzputs


	)

90 
	#gzªad
 
z_gzªad


	)

91 
	#gzªwöd
 
z_gzªwöd


	)

92 
	#gz£ek
 
z_gz£ek


	)

93 
	#gz£ek64
 
z_gz£ek64


	)

94 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

95 
	#gzãŒ
 
z_gzãŒ


	)

96 
	#gzãŒ64
 
z_gzãŒ64


	)

97 
	#gzungëc
 
z_gzungëc


	)

98 
	#gzv¥ötf
 
z_gzv¥ötf


	)

99 
	#gzwrôe
 
z_gzwrôe


	)

101 
	#öÊ©e
 
z_öÊ©e


	)

102 
	#öÊ©eBack
 
z_öÊ©eBack


	)

103 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

104 
	#öÊ©eBackInô
 
z_öÊ©eBackInô


	)

105 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

106 
	#öÊ©eCodesU£d
 
z_öÊ©eCodesU£d


	)

107 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

108 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

109 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

110 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

111 
	#öÊ©eInô
 
z_öÊ©eInô


	)

112 
	#öÊ©eInô2
 
z_öÊ©eInô2


	)

113 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

114 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

115 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

116 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

117 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

118 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

119 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

120 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

121 
	#öÊ©eSync
 
z_öÊ©eSync


	)

122 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

123 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

124 
	#öÊ©eVÆid©e
 
z_öÊ©eVÆid©e


	)

125 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

126 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

127 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

128 #i‚de‡
Z_SOLO


129 
	#uncom¥ess
 
z_uncom¥ess


	)

130 
	#uncom¥ess2
 
z_uncom¥ess2


	)

132 
	#zEº‹
 
z_zEº‹


	)

133 #i‚de‡
Z_SOLO


134 
	#zˇŒoc
 
z_zˇŒoc


	)

135 
	#zc‰ì
 
z_zc‰ì


	)

137 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

138 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

141 
	#Byã
 
z_Byã


	)

142 
	#Byãf
 
z_Byãf


	)

143 
	#Æloc_func
 
z_Æloc_func


	)

144 
	#ch¨f
 
z_ch¨f


	)

145 
	#‰ì_func
 
z_‰ì_func


	)

146 #i‚de‡
Z_SOLO


147 
	#gzFûe
 
z_gzFûe


	)

149 
	#gz_hódî
 
z_gz_hódî


	)

150 
	#gz_hódîp
 
z_gz_hódîp


	)

151 
	#ö_func
 
z_ö_func


	)

152 
	#ötf
 
z_ötf


	)

153 
	#out_func
 
z_out_func


	)

154 
	#uI¡
 
z_uI¡


	)

155 
	#uI¡f
 
z_uI¡f


	)

156 
	#uL⁄g
 
z_uL⁄g


	)

157 
	#uL⁄gf
 
z_uL⁄gf


	)

158 
	#voidp
 
z_voidp


	)

159 
	#voidpc
 
z_voidpc


	)

160 
	#voidpf
 
z_voidpf


	)

163 
	#gz_hódî_s
 
z_gz_hódî_s


	)

164 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

168 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

169 
	#MSDOS


	)

171 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

172 
	#OS2


	)

174 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

175 
	#WINDOWS


	)

177 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

178 #i‚de‡
WIN32


179 
	#WIN32


	)

182 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

183 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

184 #i‚de‡
SYS16BIT


185 
	#SYS16BIT


	)

194 #ifde‡
SYS16BIT


195 
	#MAXSEG_64K


	)

197 #ifde‡
MSDOS


198 
	#UNALIGNED_OK


	)

201 #ifde‡
__STDC_VERSION__


202 #i‚de‡
STDC


203 
	#STDC


	)

205 #i‡
__STDC_VERSION__
 >= 199901L

206 #i‚de‡
STDC99


207 
	#STDC99


	)

211 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

212 
	#STDC


	)

214 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

215 
	#STDC


	)

217 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

218 
	#STDC


	)

220 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

221 
	#STDC


	)

224 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

225 
	#STDC


	)

228 #i‚de‡
STDC


230 c⁄°

	)

234 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

235 
	#z_c⁄°
 c⁄°

	)

237 
	#z_c⁄°


	)

240 #ifde‡
Z_SOLO


241 
	tz_size_t
;

243 
	#z_l⁄gl⁄g
 

	)

244 #i‡
deföed
(
NO_SIZE_T
)

245 
	tNO_SIZE_T
 
	tz_size_t
;

246 #ñi‡
deföed
(
STDC
)

247 
	~<°ddef.h
>

248 
size_t
 
	tz_size_t
;

250 
	tz_size_t
;

252 #unde‡
z_l⁄gl⁄g


256 #i‚de‡
MAX_MEM_LEVEL


257 #ifde‡
MAXSEG_64K


258 
	#MAX_MEM_LEVEL
 8

	)

260 
	#MAX_MEM_LEVEL
 9

	)

269 #i‚de‡
MAX_WBITS


270 
	#MAX_WBITS
 15

	)

288 #i‚de‡
OF


289 #ifde‡
STDC


290 
	#OF
(
¨gs
Ë
	)
args

292 
	#OF
(
¨gs
Ë()

	)

296 #i‚de‡
Z_ARG


297 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

298 
	#Z_ARG
(
¨gs
Ë
	)
args

300 
	#Z_ARG
(
¨gs
Ë()

	)

310 #ifde‡
SYS16BIT


311 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

313 
	#SMALL_MEDIUM


	)

314 #ifde‡
_MSC_VER


315 
	#FAR
 
_Ár


	)

317 
	#FAR
 
Ár


	)

320 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

322 
	#SMALL_MEDIUM


	)

323 #ifde‡
__BORLANDC__


324 
	#FAR
 
_Ár


	)

326 
	#FAR
 
Ár


	)

331 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

335 #ifde‡
ZLIB_DLL


336 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

337 #ifde‡
ZLIB_INTERNAL


338 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

340 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 #ifde‡
ZLIB_WINAPI


349 #ifde‡
FAR


350 #unde‡
FAR


352 
	~<wödows.h
>

355 
	#ZEXPORT
 
WINAPI


	)

356 #ifde‡
WIN32


357 
	#ZEXPORTVA
 
WINAPIV


	)

359 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

364 #i‡
deföed
 (
__BEOS__
)

365 #ifde‡
ZLIB_DLL


366 #ifde‡
ZLIB_INTERNAL


367 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

368 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

370 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

371 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

376 #i‚de‡
ZEXTERN


377 
	#ZEXTERN
 

	)

379 #i‚de‡
ZEXPORT


380 
	#ZEXPORT


	)

382 #i‚de‡
ZEXPORTVA


383 
	#ZEXPORTVA


	)

386 #i‚de‡
FAR


387 
	#FAR


	)

390 #i‡!
deföed
(
__MACTYPES__
)

391 
	tByã
;

393 
	tuI¡
;

394 
	tuL⁄g
;

396 #ifde‡
SMALL_MEDIUM


398 
	#Byãf
 
Byã
 
FAR


	)

400 
Byã
 
	tFAR
 
	tByãf
;

402 
	tFAR
 
	tch¨f
;

403 
	tFAR
 
	tötf
;

404 
uI¡
 
	tFAR
 
	tuI¡f
;

405 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

407 #ifde‡
STDC


408 c⁄° *
	tvoidpc
;

409 
	tFAR
 *
	tvoidpf
;

410 *
	tvoidp
;

412 
Byã
 c⁄° *
	tvoidpc
;

413 
Byã
 
	tFAR
 *
	tvoidpf
;

414 
Byã
 *
	tvoidp
;

417 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

418 
	~<limôs.h
>

419 #i‡(
UINT_MAX
 == 0xffffffffUL)

420 
	#Z_U4
 

	)

421 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

422 
	#Z_U4
 

	)

423 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

424 
	#Z_U4
 

	)

428 #ifde‡
Z_U4


429 
Z_U4
 
	tz_¸c_t
;

431 
	tz_¸c_t
;

435 
	#Z_HAVE_UNISTD_H


	)

439 
	#Z_HAVE_STDARG_H


	)

442 #ifde‡
STDC


443 #i‚de‡
Z_SOLO


444 
	~<sys/ty≥s.h
>

448 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

449 #i‚de‡
Z_SOLO


450 
	~<°d¨g.h
>

454 #ifde‡
_WIN32


455 #i‚de‡
Z_SOLO


456 
	~<°ddef.h
>

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

467 #unde‡
_LARGEFILE64_SOURCE


470 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

471 
	#Z_HAVE_UNISTD_H


	)

473 #i‚de‡
Z_SOLO


474 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

475 
	~<uni°d.h
>

476 #ifde‡
VMS


477 
	~<unixio.h
>

479 #i‚de‡
z_off_t


480 
	#z_off_t
 
off_t


	)

485 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

486 
	#Z_LFS64


	)

489 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

490 
	#Z_LARGE64


	)

493 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

494 
	#Z_WANT64


	)

497 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

498 
	#SEEK_SET
 0

	)

499 
	#SEEK_CUR
 1

	)

500 
	#SEEK_END
 2

	)

503 #i‚de‡
z_off_t


504 
	#z_off_t
 

	)

507 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

508 
	#z_off64_t
 
off64_t


	)

510 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

511 
	#z_off64_t
 
__öt64


	)

513 
	#z_off64_t
 
z_off_t


	)

518 #i‡
deföed
(
__MVS__
)

519 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

520 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

521 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

522 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

523 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

524 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

525 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

526 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

527 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

528 #¥agm®
m≠
(
com¥essBound
,"CMBND")

529 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

530 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

531 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 #i‡!
	`deföed
(
__ILP32__
)

68 
	#LONG64


	)

86 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

87 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

94 
	#B32


	)

95 
	#B16


	)

96 #ifde‡
LONG64


97 
	tINT64
;

98 
	tINT32
;

100 
	tINT32
;

102 
	tINT16
;

104 sig√d 
	tINT8
;

106 #ifde‡
LONG64


107 
	tCARD64
;

108 
	tCARD32
;

110 
	tCARD64
;

111 
	tCARD32
;

113 
	tCARD16
;

114 
	tCARD8
;

116 
CARD32
 
	tBITS32
;

117 
CARD16
 
	tBITS16
;

119 
CARD8
 
	tBYTE
;

120 
CARD8
 
	tBOOL
;

126 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

127 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

128 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

129 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

130 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

131 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

132 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

133 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

134 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

140 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	#__bsw≠_c⁄°™t_16
(
x
) \

31 ((
__uöt16_t
Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

33 
__ölöe
 
__uöt16_t


34 
	$__bsw≠_16
 (
__uöt16_t
 
__bsx
)

36 #i‡
	`__GNUC_PREREQ
 (4, 8)

37  
	`__buûtö_bsw≠16
 (
__bsx
);

39  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

41 
	}
}

44 
	#__bsw≠_c⁄°™t_32
(
x
) \

45 ((((
x
) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) \

46 | (((
x
Ë& 0x0000ff00uË<< 8Ë| (((xË& 0x000000ffuË<< 24))

	)

48 
__ölöe
 
__uöt32_t


49 
	$__bsw≠_32
 (
__uöt32_t
 
__bsx
)

51 #i‡
	`__GNUC_PREREQ
 (4, 3)

52  
	`__buûtö_bsw≠32
 (
__bsx
);

54  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

56 
	}
}

59 
	#__bsw≠_c⁄°™t_64
(
x
) \

60 ((((
x
) & 0xff00000000000000ull) >> 56) \

61 | (((
x
) & 0x00ff000000000000ull) >> 40) \

62 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

63 | (((
x
) & 0x000000ff00000000ull) >> 8) \

64 | (((
x
) & 0x00000000ff000000ull) << 8) \

65 | (((
x
) & 0x0000000000ff0000ull) << 24) \

66 | (((
x
) & 0x000000000000ff00ull) << 40) \

67 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

69 
__exãnsi⁄__
 
__ölöe
 
__uöt64_t


70 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

72 #i‡
	`__GNUC_PREREQ
 (4, 3)

73  
	`__buûtö_bsw≠64
 (
__bsx
);

75  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

77 
	}
}

	@/usr/include/bits/endianness.h

1 #i‚de‡
_BITS_ENDIANNESS_H


2 
	#_BITS_ENDIANNESS_H
 1

	)

4 #i‚de‡
_BITS_ENDIAN_H


9 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/ty≥s/°ru˘_iovec.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

205 
	#F_ADD_SEALS
 1033

	)

206 
	#F_GET_SEALS
 1034

	)

208 
	#F_GET_RW_HINT
 1035

	)

209 
	#F_SET_RW_HINT
 1036

	)

210 
	#F_GET_FILE_RW_HINT
 1037

	)

211 
	#F_SET_FILE_RW_HINT
 1038

	)

213 #ifde‡
__USE_XOPEN2K8


214 
	#F_DUPFD_CLOEXEC
 1030

	)

219 
	#FD_CLOEXEC
 1

	)

221 #i‚de‡
F_RDLCK


223 
	#F_RDLCK
 0

	)

224 
	#F_WRLCK
 1

	)

225 
	#F_UNLCK
 2

	)

230 #i‚de‡
F_EXLCK


231 
	#F_EXLCK
 4

	)

232 
	#F_SHLCK
 8

	)

235 #ifde‡
__USE_MISC


237 
	#LOCK_SH
 1

	)

238 
	#LOCK_EX
 2

	)

239 
	#LOCK_NB
 4

	)

241 
	#LOCK_UN
 8

	)

244 #ifde‡
__USE_GNU


245 
	#LOCK_MAND
 32

	)

246 
	#LOCK_READ
 64

	)

247 
	#LOCK_WRITE
 128

	)

248 
	#LOCK_RW
 192

	)

251 #ifde‡
__USE_GNU


253 
	#DN_ACCESS
 0x00000001

	)

254 
	#DN_MODIFY
 0x00000002

	)

255 
	#DN_CREATE
 0x00000004

	)

256 
	#DN_DELETE
 0x00000008

	)

257 
	#DN_RENAME
 0x00000010

	)

258 
	#DN_ATTRIB
 0x00000020

	)

259 
	#DN_MULTISHOT
 0x80000000

	)

263 #ifde‡
__USE_GNU


265 
	e__pid_ty≥


267 
	mF_OWNER_TID
 = 0,

268 
	mF_OWNER_PID
,

269 
	mF_OWNER_PGRP
,

270 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


274 
	sf_ow√r_ex


276 
__pid_ty≥
 
	mty≥
;

277 
__pid_t
 
	mpid
;

281 #ifde‡
__USE_GNU


283 
	#F_SEAL_SEAL
 0x0001

	)

284 
	#F_SEAL_SHRINK
 0x0002

	)

285 
	#F_SEAL_GROW
 0x0004

	)

286 
	#F_SEAL_WRITE
 0x0008

	)

287 
	#F_SEAL_FUTURE_WRITE
 0x0010

	)

291 #ifde‡
__USE_GNU


293 
	#RWF_WRITE_LIFE_NOT_SET
 0

	)

294 
	#RWH_WRITE_LIFE_NONE
 1

	)

295 
	#RWH_WRITE_LIFE_SHORT
 2

	)

296 
	#RWH_WRITE_LIFE_MEDIUM
 3

	)

297 
	#RWH_WRITE_LIFE_LONG
 4

	)

298 
	#RWH_WRITE_LIFE_EXTREME
 5

	)

303 #ifdef 
__USE_MISC


304 
	#FAPPEND
 
O_APPEND


	)

305 
	#FFSYNC
 
O_FSYNC


	)

306 
	#FASYNC
 
O_ASYNC


	)

307 
	#FNONBLOCK
 
O_NONBLOCK


	)

308 
	#FNDELAY
 
O_NDELAY


	)

311 #i‚de‡
__POSIX_FADV_DONTNEED


312 
	#__POSIX_FADV_DONTNEED
 4

	)

313 
	#__POSIX_FADV_NOREUSE
 5

	)

316 #ifde‡
__USE_XOPEN2K


317 
	#POSIX_FADV_NORMAL
 0

	)

318 
	#POSIX_FADV_RANDOM
 1

	)

319 
	#POSIX_FADV_SEQUENTIAL
 2

	)

320 
	#POSIX_FADV_WILLNEED
 3

	)

321 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

322 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

326 #ifde‡
__USE_GNU


328 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

331 
	#SYNC_FILE_RANGE_WRITE
 2

	)

334 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

339 
	#SYNC_FILE_RANGE_WRITE_AND_WAIT
 (
SYNC_FILE_RANGE_WRITE
 \

340 | 
SYNC_FILE_RANGE_WAIT_BEFORE
 \

341 | 
SYNC_FILE_RANGE_WAIT_AFTER
)

	)

344 
	#SPLICE_F_MOVE
 1

	)

345 
	#SPLICE_F_NONBLOCK
 2

	)

348 
	#SPLICE_F_MORE
 4

	)

349 
	#SPLICE_F_GIFT
 8

	)

353 
	~<löux/ÁŒoc.h
>

357 
	sfûe_h™dÀ


359 
	mh™dÀ_byãs
;

360 
	mh™dÀ_ty≥
;

362 
	mf_h™dÀ
[0];

366 
	#MAX_HANDLE_SZ
 128

	)

370 #ifde‡
__USE_ATFILE


371 
	#AT_FDCWD
 -100

	)

374 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

375 
	#AT_REMOVEDIR
 0x200

	)

377 
	#AT_SYMLINK_FOLLOW
 0x400

	)

378 #ifde‡
__USE_GNU


379 
	#AT_NO_AUTOMOUNT
 0x800

	)

381 
	#AT_EMPTY_PATH
 0x1000

	)

382 
	#AT_STATX_SYNC_TYPE
 0x6000

	)

383 
	#AT_STATX_SYNC_AS_STAT
 0x0000

	)

384 
	#AT_STATX_FORCE_SYNC
 0x2000

	)

385 
	#AT_STATX_DONT_SYNC
 0x4000

	)

386 
	#AT_RECURSIVE
 0x8000

	)

388 
	#AT_EACCESS
 0x200

	)

392 
	g__BEGIN_DECLS


394 #ifde‡
__USE_GNU


397 
__ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

398 
__THROW
;

405 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

406 
__Êags
);

413 
__ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

414 
size_t
 
__cou¡
, 
__Êags
);

420 
__ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

421 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

422 
__Êags
);

428 
__ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

429 
__Êags
);

435 #i‚de‡
__USE_FILE_OFFSET64


436 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

438 #ifde‡
__REDIRECT


439 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

440 
__off64_t
 
__Àn
),

441 
ÁŒoˇã64
);

443 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

446 #ifde‡
__USE_LARGEFILE64


447 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

448 
__off64_t
 
__Àn
);

453 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

454 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

455 
__Êags
Ë
__THROW
;

461 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

462 
__Êags
);

466 
__END_DECLS


	@/usr/include/bits/floatn-common.h

20 #i‚de‡
_BITS_FLOATN_COMMON_H


21 
	#_BITS_FLOATN_COMMON_H


	)

23 
	~<„©uªs.h
>

24 
	~<bôs/l⁄g-doubÀ.h
>

34 
	#__HAVE_FLOAT16
 0

	)

35 
	#__HAVE_FLOAT32
 1

	)

36 
	#__HAVE_FLOAT64
 1

	)

37 
	#__HAVE_FLOAT32X
 1

	)

38 
	#__HAVE_FLOAT128X
 0

	)

52 
	#__HAVE_DISTINCT_FLOAT16
 
__HAVE_FLOAT16


	)

53 
	#__HAVE_DISTINCT_FLOAT32
 0

	)

54 
	#__HAVE_DISTINCT_FLOAT64
 0

	)

55 
	#__HAVE_DISTINCT_FLOAT32X
 0

	)

56 
	#__HAVE_DISTINCT_FLOAT64X
 0

	)

57 
	#__HAVE_DISTINCT_FLOAT128X
 
__HAVE_FLOAT128X


	)

63 
	#__HAVE_FLOAT128_UNLIKE_LDBL
 (
__HAVE_DISTINCT_FLOAT128
 \

64 && 
__LDBL_MANT_DIG__
 !113)

	)

69 #i‡
__GNUC_PREREQ
 (7, 0Ë&& !
deföed
 
__˝lu•lus


70 
	#__HAVE_FLOATN_NOT_TYPEDEF
 1

	)

72 
	#__HAVE_FLOATN_NOT_TYPEDEF
 0

	)

75 #i‚de‡
__ASSEMBLER__


80 #i‡
__HAVE_FLOAT16


81 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


83 
	#__f16
(
x
Ë((
_Flﬂt16
Ëx##
f
)

	)

85 
	#__f16
(
x
Ëx##
f16


	)

89 #i‡
__HAVE_FLOAT32


90 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


91 
	#__f32
(
x
Ëx##
f


	)

93 
	#__f32
(
x
Ëx##
f32


	)

97 #i‡
__HAVE_FLOAT64


98 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
	#__f64
(
x
Ëx##
l


	)

102 
	#__f64
(
x
Ë
	)
x

105 
	#__f64
(
x
Ëx##
f64


	)

109 #i‡
__HAVE_FLOAT32X


110 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


111 
	#__f32x
(
x
Ë
	)
x

113 
	#__f32x
(
x
Ëx##
f32x


	)

117 #i‡
__HAVE_FLOAT64X


118 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


119 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


120 
	#__f64x
(
x
Ëx##
l


	)

122 
	#__f64x
(
x
Ë
	`__f128
 (x)

	)

125 
	#__f64x
(
x
Ëx##
f64x


	)

129 #i‡
__HAVE_FLOAT128X


130 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


133 
	#__f128x
(
x
Ëx##
f128x


	)

138 #i‡
__HAVE_FLOAT16


139 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


140 
_Com∂ex
 
	t__cÊﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HC__
)));

141 
	#__CFLOAT16
 
__cÊﬂt16


	)

143 
	#__CFLOAT16
 
_Com∂ex
 
_Flﬂt16


	)

147 #i‡
__HAVE_FLOAT32


148 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


149 
	#__CFLOAT32
 
_Com∂ex
 

	)

151 
	#__CFLOAT32
 
_Com∂ex
 
_Flﬂt32


	)

155 #i‡
__HAVE_FLOAT64


156 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


157 #ifde‡
__NO_LONG_DOUBLE_MATH


158 
	#__CFLOAT64
 
_Com∂ex
 

	)

160 
	#__CFLOAT64
 
_Com∂ex
 

	)

163 
	#__CFLOAT64
 
_Com∂ex
 
_Flﬂt64


	)

167 #i‡
__HAVE_FLOAT32X


168 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


169 
	#__CFLOAT32X
 
_Com∂ex
 

	)

171 
	#__CFLOAT32X
 
_Com∂ex
 
_Flﬂt32x


	)

175 #i‡
__HAVE_FLOAT64X


176 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


177 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


178 
	#__CFLOAT64X
 
_Com∂ex
 

	)

180 
	#__CFLOAT64X
 
__CFLOAT128


	)

183 
	#__CFLOAT64X
 
_Com∂ex
 
_Flﬂt64x


	)

187 #i‡
__HAVE_FLOAT128X


188 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


191 
	#__CFLOAT128X
 
_Com∂ex
 
_Flﬂt128x


	)

196 #i‡
__HAVE_FLOAT16


198 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


199 
	t_Flﬂt16
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HF__
)));

202 #i‡!
__GNUC_PREREQ
 (7, 0)

203 
	#__buûtö_huge_vÆf16
(Ë((
_Flﬂt16
Ë
	`__buûtö_huge_vÆ
 ())

	)

204 
	#__buûtö_öff16
(Ë((
_Flﬂt16
Ë
	`__buûtö_öf
 ())

	)

205 
	#__buûtö_«nf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«n
 (x))

	)

206 
	#__buûtö_«nsf16
(
x
Ë((
_Flﬂt16
Ë
	`__buûtö_«ns
 (x))

	)

211 #i‡
__HAVE_FLOAT32


213 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


214 
	t_Flﬂt32
;

217 #i‡!
__GNUC_PREREQ
 (7, 0)

218 
	#__buûtö_huge_vÆf32
(Ë(
	`__buûtö_huge_vÆf
 ())

	)

219 
	#__buûtö_öff32
(Ë(
	`__buûtö_öff
 ())

	)

220 
	#__buûtö_«nf32
(
x
Ë(
	`__buûtö_«nf
 (x))

	)

221 
	#__buûtö_«nsf32
(
x
Ë(
	`__buûtö_«nsf
 (x))

	)

226 #i‡
__HAVE_FLOAT64


235 #ifde‡
__NO_LONG_DOUBLE_MATH


237 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


238 
	t_Flﬂt64
;

241 #i‡!
__GNUC_PREREQ
 (7, 0)

242 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

243 
	#__buûtö_öff64
(Ë(
	`__buûtö_öÊ
 ())

	)

244 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

245 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

250 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


251 
	t_Flﬂt64
;

254 #i‡!
__GNUC_PREREQ
 (7, 0)

255 
	#__buûtö_huge_vÆf64
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

256 
	#__buûtö_öff64
(Ë(
	`__buûtö_öf
 ())

	)

257 
	#__buûtö_«nf64
(
x
Ë(
	`__buûtö_«n
 (x))

	)

258 
	#__buûtö_«nsf64
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

265 #i‡
__HAVE_FLOAT32X


267 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


268 
	t_Flﬂt32x
;

271 #i‡!
__GNUC_PREREQ
 (7, 0)

272 
	#__buûtö_huge_vÆf32x
(Ë(
	`__buûtö_huge_vÆ
 ())

	)

273 
	#__buûtö_öff32x
(Ë(
	`__buûtö_öf
 ())

	)

274 
	#__buûtö_«nf32x
(
x
Ë(
	`__buûtö_«n
 (x))

	)

275 
	#__buûtö_«nsf32x
(
x
Ë(
	`__buûtö_«ns
 (x))

	)

280 #i‡
__HAVE_FLOAT64X


282 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


284 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


285 
	t_Flﬂt64x
;

288 #i‡!
__GNUC_PREREQ
 (7, 0)

289 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆl
 ())

	)

290 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öÊ
 ())

	)

291 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«∆
 (x))

	)

292 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«n¶
 (x))

	)

297 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


298 
_Flﬂt128
 
	t_Flﬂt64x
;

301 #i‡!
__GNUC_PREREQ
 (7, 0)

302 
	#__buûtö_huge_vÆf64x
(Ë(
	`__buûtö_huge_vÆf128
 ())

	)

303 
	#__buûtö_öff64x
(Ë(
	`__buûtö_öff128
 ())

	)

304 
	#__buûtö_«nf64x
(
x
Ë(
	`__buûtö_«nf128
 (x))

	)

305 
	#__buûtö_«nsf64x
(
x
Ë(
	`__buûtö_«nsf128
 (x))

	)

312 #i‡
__HAVE_FLOAT128X


314 #i‡!
__GNUC_PREREQ
 (7, 0Ë|| 
deföed
 
__˝lu•lus


318 #i‡!
__GNUC_PREREQ
 (7, 0)

319 
	#__buûtö_huge_vÆf128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_huge_vÆ
 ())

	)

320 
	#__buûtö_öff128x
(Ë((
_Flﬂt128x
Ë
	`__buûtö_öf
 ())

	)

321 
	#__buûtö_«nf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«n
 (x))

	)

322 
	#__buûtö_«nsf128x
(
x
Ë((
_Flﬂt128x
Ë
	`__buûtö_«ns
 (x))

	)

	@/usr/include/bits/getopt_core.h

20 #i‚de‡
_GETOPT_CORE_H


21 
	#_GETOPT_CORE_H
 1

	)

28 
__BEGIN_DECLS


36 *
›èrg
;

50 
›töd
;

55 
›ãº
;

59 
›t›t
;

91 
	$gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

92 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

94 
__END_DECLS


	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

39 
	#__DECL_SIMD_cosf16


	)

40 
	#__DECL_SIMD_cosf32


	)

41 
	#__DECL_SIMD_cosf64


	)

42 
	#__DECL_SIMD_cosf128


	)

43 
	#__DECL_SIMD_cosf32x


	)

44 
	#__DECL_SIMD_cosf64x


	)

45 
	#__DECL_SIMD_cosf128x


	)

47 
	#__DECL_SIMD_sö


	)

48 
	#__DECL_SIMD_söf


	)

49 
	#__DECL_SIMD_söl


	)

50 
	#__DECL_SIMD_söf16


	)

51 
	#__DECL_SIMD_söf32


	)

52 
	#__DECL_SIMD_söf64


	)

53 
	#__DECL_SIMD_söf128


	)

54 
	#__DECL_SIMD_söf32x


	)

55 
	#__DECL_SIMD_söf64x


	)

56 
	#__DECL_SIMD_söf128x


	)

58 
	#__DECL_SIMD_söcos


	)

59 
	#__DECL_SIMD_söcosf


	)

60 
	#__DECL_SIMD_söco¶


	)

61 
	#__DECL_SIMD_söcosf16


	)

62 
	#__DECL_SIMD_söcosf32


	)

63 
	#__DECL_SIMD_söcosf64


	)

64 
	#__DECL_SIMD_söcosf128


	)

65 
	#__DECL_SIMD_söcosf32x


	)

66 
	#__DECL_SIMD_söcosf64x


	)

67 
	#__DECL_SIMD_söcosf128x


	)

69 
	#__DECL_SIMD_log


	)

70 
	#__DECL_SIMD_logf


	)

71 
	#__DECL_SIMD_logl


	)

72 
	#__DECL_SIMD_logf16


	)

73 
	#__DECL_SIMD_logf32


	)

74 
	#__DECL_SIMD_logf64


	)

75 
	#__DECL_SIMD_logf128


	)

76 
	#__DECL_SIMD_logf32x


	)

77 
	#__DECL_SIMD_logf64x


	)

78 
	#__DECL_SIMD_logf128x


	)

80 
	#__DECL_SIMD_exp


	)

81 
	#__DECL_SIMD_expf


	)

82 
	#__DECL_SIMD_ex∂


	)

83 
	#__DECL_SIMD_expf16


	)

84 
	#__DECL_SIMD_expf32


	)

85 
	#__DECL_SIMD_expf64


	)

86 
	#__DECL_SIMD_expf128


	)

87 
	#__DECL_SIMD_expf32x


	)

88 
	#__DECL_SIMD_expf64x


	)

89 
	#__DECL_SIMD_expf128x


	)

91 
	#__DECL_SIMD_pow


	)

92 
	#__DECL_SIMD_powf


	)

93 
	#__DECL_SIMD_powl


	)

94 
	#__DECL_SIMD_powf16


	)

95 
	#__DECL_SIMD_powf32


	)

96 
	#__DECL_SIMD_powf64


	)

97 
	#__DECL_SIMD_powf128


	)

98 
	#__DECL_SIMD_powf32x


	)

99 
	#__DECL_SIMD_powf64x


	)

100 
	#__DECL_SIMD_powf128x


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/long-double.h

21 
	#__LONG_DOUBLE_USES_FLOAT128
 0

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/siginfo-arch.h

2 #i‚de‡
_BITS_SIGINFO_ARCH_H


3 
	#_BITS_SIGINFO_ARCH_H
 1

	)

5 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

12 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

13 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

14 
	#__SI_CLOCK_T
 
__sigchld_˛ock_t


	)

	@/usr/include/bits/siginfo-consts-arch.h

2 #i‚de‡
_BITS_SIGINFO_CONSTS_ARCH_H


3 
	#_BITS_SIGINFO_CONSTS_ARCH_H
 1

	)

	@/usr/include/bits/signum-generic.h

19 #i‚def 
_BITS_SIGNUM_GENERIC_H


20 
	#_BITS_SIGNUM_GENERIC_H
 1

	)

22 #i‚de‡
_SIGNAL_H


28 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

29 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

30 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

32 #ifde‡
__USE_XOPEN


33 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

48 
	#SIGINT
 2

	)

49 
	#SIGILL
 4

	)

50 
	#SIGABRT
 6

	)

51 
	#SIGFPE
 8

	)

52 
	#SIGSEGV
 11

	)

53 
	#SIGTERM
 15

	)

56 
	#SIGHUP
 1

	)

57 
	#SIGQUIT
 3

	)

58 
	#SIGTRAP
 5

	)

59 
	#SIGKILL
 9

	)

60 
	#SIGBUS
 10

	)

61 
	#SIGSYS
 12

	)

62 
	#SIGPIPE
 13

	)

63 
	#SIGALRM
 14

	)

66 
	#SIGURG
 16

	)

67 
	#SIGSTOP
 17

	)

68 
	#SIGTSTP
 18

	)

69 
	#SIGCONT
 19

	)

70 
	#SIGCHLD
 20

	)

71 
	#SIGTTIN
 21

	)

72 
	#SIGTTOU
 22

	)

73 
	#SIGPOLL
 23

	)

74 
	#SIGXCPU
 24

	)

75 
	#SIGXFSZ
 25

	)

76 
	#SIGVTALRM
 26

	)

77 
	#SIGPROF
 27

	)

78 
	#SIGUSR1
 30

	)

79 
	#SIGUSR2
 31

	)

83 
	#SIGWINCH
 28

	)

86 
	#SIGIO
 
SIGPOLL


	)

87 
	#SIGIOT
 
SIGABRT


	)

88 
	#SIGCLD
 
SIGCHLD


	)

96 
	#__SIGRTMIN
 32

	)

97 
	#__SIGRTMAX
 
__SIGRTMIN


	)

100 
	#_NSIG
 (
__SIGRTMAX
 + 1)

	)

	@/usr/include/bits/statx-generic.h

21 #i‚de‡
_SYS_STAT_H


22 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
°©x
-
gíîic
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

25 
	~<bôs/ty≥s/°ru˘_°©x_time°amp.h
>

26 
	~<bôs/ty≥s/°ru˘_°©x.h
>

28 #i‚de‡
STATX_TYPE


29 
	#STATX_TYPE
 0x0001U

	)

30 
	#STATX_MODE
 0x0002U

	)

31 
	#STATX_NLINK
 0x0004U

	)

32 
	#STATX_UID
 0x0008U

	)

33 
	#STATX_GID
 0x0010U

	)

34 
	#STATX_ATIME
 0x0020U

	)

35 
	#STATX_MTIME
 0x0040U

	)

36 
	#STATX_CTIME
 0x0080U

	)

37 
	#STATX_INO
 0x0100U

	)

38 
	#STATX_SIZE
 0x0200U

	)

39 
	#STATX_BLOCKS
 0x0400U

	)

40 
	#STATX_BASIC_STATS
 0x07ffU

	)

41 
	#STATX_ALL
 0x0fffU

	)

42 
	#STATX_BTIME
 0x0800U

	)

43 
	#STATX__RESERVED
 0x80000000U

	)

45 
	#STATX_ATTR_COMPRESSED
 0x0004

	)

46 
	#STATX_ATTR_IMMUTABLE
 0x0010

	)

47 
	#STATX_ATTR_APPEND
 0x0020

	)

48 
	#STATX_ATTR_NODUMP
 0x0040

	)

49 
	#STATX_ATTR_ENCRYPTED
 0x0800

	)

50 
	#STATX_ATTR_AUTOMOUNT
 0x1000

	)

53 
__BEGIN_DECLS


56 
	$°©x
 (
__dúfd
, c⁄° *
__ª°ri˘
 
__∑th
, 
__Êags
,

57 
__mask
, 
°©x
 *
__ª°ri˘
 
__buf
)

58 
__THROW
 
	`__n⁄nuŒ
 ((2, 5));

60 
__END_DECLS


	@/usr/include/bits/strings_fortified.h

19 #i‚de‡
__STRINGS_FORTIFIED


20 
	#__STRINGS_FORTIFIED
 1

	)

22 
__f‹tify_fun˘i⁄
 

23 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

25 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

26 
	}
}

28 
__f‹tify_fun˘i⁄
 

29 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

31 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

32 
	}
}

	@/usr/include/bits/termios.h

19 #i‚de‡
_TERMIOS_H


23 
	tcc_t
;

24 
	t•ìd_t
;

25 
	ttcÊag_t
;

27 
	~<bôs/ãrmios-°ru˘.h
>

28 
	~<bôs/ãrmios-c_cc.h
>

29 
	~<bôs/ãrmios-c_iÊag.h
>

30 
	~<bôs/ãrmios-c_oÊag.h
>

33 
	#B0
 0000000

	)

34 
	#B50
 0000001

	)

35 
	#B75
 0000002

	)

36 
	#B110
 0000003

	)

37 
	#B134
 0000004

	)

38 
	#B150
 0000005

	)

39 
	#B200
 0000006

	)

40 
	#B300
 0000007

	)

41 
	#B600
 0000010

	)

42 
	#B1200
 0000011

	)

43 
	#B1800
 0000012

	)

44 
	#B2400
 0000013

	)

45 
	#B4800
 0000014

	)

46 
	#B9600
 0000015

	)

47 
	#B19200
 0000016

	)

48 
	#B38400
 0000017

	)

49 #ifde‡
__USE_MISC


50 
	#EXTA
 
B19200


	)

51 
	#EXTB
 
B38400


	)

53 
	~<bôs/ãrmios-baud.h
>

55 
	~<bôs/ãrmios-c_cÊag.h
>

56 
	~<bôs/ãrmios-c_lÊag.h
>

58 #ifde‡
__USE_MISC


60 
	#TIOCSER_TEMT
 0x01

	)

64 
	#TCOOFF
 0

	)

65 
	#TCOON
 1

	)

66 
	#TCIOFF
 2

	)

67 
	#TCION
 3

	)

70 
	#TCIFLUSH
 0

	)

71 
	#TCOFLUSH
 1

	)

72 
	#TCIOFLUSH
 2

	)

74 
	~<bôs/ãrmios-tcÊow.h
>

76 
	~<bôs/ãrmios-misc.h
>

	@/usr/include/bits/thread-shared-types.h

19 #i‚de‡
_THREAD_SHARED_TYPES_H


20 
	#_THREAD_SHARED_TYPES_H
 1

	)

44 
	~<bôs/±hªadty≥s-¨ch.h
>

49 
	s__±hªad_öã∫Æ_li°


51 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

52 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

53 } 
	t__±hªad_li°_t
;

55 
	s__±hªad_öã∫Æ_¶i°


57 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

58 } 
	t__±hªad_¶i°_t
;

74 
	~<bôs/°ru˘_muãx.h
>

87 
	~<bôs/°ru˘_rwlock.h
>

92 
	s__±hªad_c⁄d_s


94 
__exãnsi⁄__
 union

96 
__exãnsi⁄__
 
	m__w£q
;

99 
	m__low
;

100 
	m__high
;

101 } 
	m__w£q32
;

103 
__exãnsi⁄__
 union

105 
__exãnsi⁄__
 
	m__g1_°¨t
;

108 
	m__low
;

109 
	m__high
;

110 } 
	m__g1_°¨t32
;

112 
	m__g_ªfs
[2] 
	m__LOCK_ALIGNMENT
;

113 
	m__g_size
[2];

114 
	m__g1_‹ig_size
;

115 
	m__wªfs
;

116 
	m__g_sig«ls
[2];

	@/usr/include/bits/time64.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TIME64_H


24 
	#_BITS_TIME64_H
 1

	)

28 #i‡
__TIMESIZE
 == 64

30 
	#__TIME64_T_TYPE
 
__TIME_T_TYPE


	)

33 
	#__TIME64_T_TYPE
 
__SQUAD_TYPE


	)

	@/usr/include/bits/timesize.h

19 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


21 
	#__TIMESIZE
 64

	)

24 
	#__TIMESIZE
 
__WORDSIZE


	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

22 
	~<bôs/ty≥s/°ru˘_timevÆ.h
>

26 
	stimex


28 
	mmodes
;

29 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

30 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

31 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

32 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

33 
	m°©us
;

34 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

35 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

36 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

37 
timevÆ
 
	mtime
;

38 
__sysˇŒ_¶⁄g_t
 
	mtick
;

39 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

40 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

41 
	mshi·
;

42 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

43 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

46 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

48 
	mèi
;

57 
	#ADJ_OFFSET
 0x0001

	)

58 
	#ADJ_FREQUENCY
 0x0002

	)

59 
	#ADJ_MAXERROR
 0x0004

	)

60 
	#ADJ_ESTERROR
 0x0008

	)

61 
	#ADJ_STATUS
 0x0010

	)

62 
	#ADJ_TIMECONST
 0x0020

	)

63 
	#ADJ_TAI
 0x0080

	)

64 
	#ADJ_SETOFFSET
 0x0100

	)

65 
	#ADJ_MICRO
 0x1000

	)

66 
	#ADJ_NANO
 0x2000

	)

67 
	#ADJ_TICK
 0x4000

	)

68 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

69 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

72 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

73 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

74 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

75 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

76 
	#MOD_STATUS
 
ADJ_STATUS


	)

77 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

78 
	#MOD_CLKB
 
ADJ_TICK


	)

79 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

80 
	#MOD_TAI
 
ADJ_TAI


	)

81 
	#MOD_MICRO
 
ADJ_MICRO


	)

82 
	#MOD_NANO
 
ADJ_NANO


	)

86 
	#STA_PLL
 0x0001

	)

87 
	#STA_PPSFREQ
 0x0002

	)

88 
	#STA_PPSTIME
 0x0004

	)

89 
	#STA_FLL
 0x0008

	)

91 
	#STA_INS
 0x0010

	)

92 
	#STA_DEL
 0x0020

	)

93 
	#STA_UNSYNC
 0x0040

	)

94 
	#STA_FREQHOLD
 0x0080

	)

96 
	#STA_PPSSIGNAL
 0x0100

	)

97 
	#STA_PPSJITTER
 0x0200

	)

98 
	#STA_PPSWANDER
 0x0400

	)

99 
	#STA_PPSERROR
 0x0800

	)

101 
	#STA_CLOCKERR
 0x1000

	)

102 
	#STA_NANO
 0x2000

	)

103 
	#STA_MODE
 0x4000

	)

104 
	#STA_CLK
 0x8000

	)

107 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 \

108 | 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/types/__locale_t.h

20 #i‚de‡
_BITS_TYPES___LOCALE_T_H


21 
	#_BITS_TYPES___LOCALE_T_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

42 
__loˇÀ_°ru˘
 *
	t__loˇÀ_t
;

	@/usr/include/bits/types/__mbstate_t.h

1 #i‚de‡
____mb°©e_t_deföed


2 
	#____mb°©e_t_deföed
 1

	)

8 #i‚de‡
__WINT_TYPE__


9 
	#__WINT_TYPE__
 

	)

15 
	m__cou¡
;

18 
__WINT_TYPE__
 
	m__wch
;

19 
	m__wchb
[4];

20 } 
	m__vÆue
;

21 } 
	t__mb°©e_t
;

	@/usr/include/bits/types/__sigval_t.h

19 #i‚de‡
____sigvÆ_t_deföed


20 
	#____sigvÆ_t_deföed


	)

23 #ifde‡
__USE_POSIX199309


24 
	usigvÆ


26 
	msivÆ_öt
;

27 *
	msivÆ_±r
;

30 
sigvÆ
 
	t__sigvÆ_t
;

32 
	u__sigvÆ


34 
	m__sivÆ_öt
;

35 *
	m__sivÆ_±r
;

38 
__sigvÆ
 
	t__sigvÆ_t
;

	@/usr/include/bits/types/struct_timeval.h

1 #i‚de‡
__timevÆ_deföed


2 
	#__timevÆ_deföed
 1

	)

4 
	~<bôs/ty≥s.h
>

8 
	stimevÆ


10 
__time_t
 
	mtv_£c
;

11 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__RLIM_T_MATCHES_RLIM64_T
 1

	)

89 
	#__STATFS_MATCHES_STATFS64
 1

	)

91 
	#__RLIM_T_MATCHES_RLIM64_T
 0

	)

93 
	#__STATFS_MATCHES_STATFS64
 0

	)

97 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uintn-identity.h

19 #i‡!
deföed
 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_UINTN_IDENTITY_H


24 
	#_BITS_UINTN_IDENTITY_H
 1

	)

26 
	~<bôs/ty≥s.h
>

32 
__ölöe
 
__uöt16_t


33 
	$__uöt16_idítôy
 (
__uöt16_t
 
__x
)

35  
__x
;

36 
	}
}

38 
__ölöe
 
__uöt32_t


39 
	$__uöt32_idítôy
 (
__uöt32_t
 
__x
)

41  
__x
;

42 
	}
}

44 
__ölöe
 
__uöt64_t


45 
	$__uöt64_idítôy
 (
__uöt64_t
 
__x
)

47  
__x
;

48 
	}
}

	@/usr/include/bits/uio_lim.h

19 #i‚de‡
_BITS_UIO_LIM_H


20 
	#_BITS_UIO_LIM_H
 1

	)

30 
	#__IOV_MAX
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/stat.h

2 #i‚de‡
_LINUX_STAT_H


3 
	#_LINUX_STAT_H


	)

5 
	~<löux/ty≥s.h
>

7 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

9 
	#S_IFMT
 00170000

	)

10 
	#S_IFSOCK
 0140000

	)

11 
	#S_IFLNK
 0120000

	)

12 
	#S_IFREG
 0100000

	)

13 
	#S_IFBLK
 0060000

	)

14 
	#S_IFDIR
 0040000

	)

15 
	#S_IFCHR
 0020000

	)

16 
	#S_IFIFO
 0010000

	)

17 
	#S_ISUID
 0004000

	)

18 
	#S_ISGID
 0002000

	)

19 
	#S_ISVTX
 0001000

	)

21 
	#S_ISLNK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFLNK
)

	)

22 
	#S_ISREG
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFREG
)

	)

23 
	#S_ISDIR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFDIR
)

	)

24 
	#S_ISCHR
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFCHR
)

	)

25 
	#S_ISBLK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFBLK
)

	)

26 
	#S_ISFIFO
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFIFO
)

	)

27 
	#S_ISSOCK
(
m
Ë(((mË& 
S_IFMT
Ë=
S_IFSOCK
)

	)

29 
	#S_IRWXU
 00700

	)

30 
	#S_IRUSR
 00400

	)

31 
	#S_IWUSR
 00200

	)

32 
	#S_IXUSR
 00100

	)

34 
	#S_IRWXG
 00070

	)

35 
	#S_IRGRP
 00040

	)

36 
	#S_IWGRP
 00020

	)

37 
	#S_IXGRP
 00010

	)

39 
	#S_IRWXO
 00007

	)

40 
	#S_IROTH
 00004

	)

41 
	#S_IWOTH
 00002

	)

42 
	#S_IXOTH
 00001

	)

56 
	s°©x_time°amp
 {

57 
__s64
 
	mtv_£c
;

58 
__u32
 
	mtv_n£c
;

59 
__s32
 
	m__ª£rved
;

99 
	s°©x
 {

101 
__u32
 
	m°x_mask
;

102 
__u32
 
	m°x_blksize
;

103 
__u64
 
	m°x_©åibuãs
;

105 
__u32
 
	m°x_∆ök
;

106 
__u32
 
	m°x_uid
;

107 
__u32
 
	m°x_gid
;

108 
__u16
 
	m°x_mode
;

109 
__u16
 
	m__•¨e0
[1];

111 
__u64
 
	m°x_öo
;

112 
__u64
 
	m°x_size
;

113 
__u64
 
	m°x_blocks
;

114 
__u64
 
	m°x_©åibuãs_mask
;

116 
°©x_time°amp
 
	m°x_©ime
;

117 
°©x_time°amp
 
	m°x_btime
;

118 
°©x_time°amp
 
	m°x_˘ime
;

119 
°©x_time°amp
 
	m°x_mtime
;

121 
__u32
 
	m°x_rdev_maj‹
;

122 
__u32
 
	m°x_rdev_mö‹
;

123 
__u32
 
	m°x_dev_maj‹
;

124 
__u32
 
	m°x_dev_mö‹
;

126 
__u64
 
	m°x_m¡_id
;

127 
__u64
 
	m__•¨e2
;

129 
__u64
 
	m__•¨e3
[12];

141 
	#STATX_TYPE
 0x00000001U

	)

142 
	#STATX_MODE
 0x00000002U

	)

143 
	#STATX_NLINK
 0x00000004U

	)

144 
	#STATX_UID
 0x00000008U

	)

145 
	#STATX_GID
 0x00000010U

	)

146 
	#STATX_ATIME
 0x00000020U

	)

147 
	#STATX_MTIME
 0x00000040U

	)

148 
	#STATX_CTIME
 0x00000080U

	)

149 
	#STATX_INO
 0x00000100U

	)

150 
	#STATX_SIZE
 0x00000200U

	)

151 
	#STATX_BLOCKS
 0x00000400U

	)

152 
	#STATX_BASIC_STATS
 0x000007ffU

	)

153 
	#STATX_BTIME
 0x00000800U

	)

154 
	#STATX_MNT_ID
 0x00001000U

	)

156 
	#STATX__RESERVED
 0x80000000U

	)

163 
	#STATX_ALL
 0x00000fffU

	)

179 
	#STATX_ATTR_COMPRESSED
 0x00000004

	)

180 
	#STATX_ATTR_IMMUTABLE
 0x00000010

	)

181 
	#STATX_ATTR_APPEND
 0x00000020

	)

182 
	#STATX_ATTR_NODUMP
 0x00000040

	)

183 
	#STATX_ATTR_ENCRYPTED
 0x00000800

	)

184 
	#STATX_ATTR_AUTOMOUNT
 0x00001000

	)

185 
	#STATX_ATTR_MOUNT_ROOT
 0x00002000

	)

186 
	#STATX_ATTR_VERITY
 0x00100000

	)

187 
	#STATX_ATTR_DAX
 0x00200000

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/bits/pthreadtypes-arch.h

18 #i‚de‡
_BITS_PTHREADTYPES_ARCH_H


19 
	#_BITS_PTHREADTYPES_ARCH_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

28 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

30 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

31 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

32 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

37 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

38 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

39 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

41 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

42 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

43 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

44 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

45 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

47 
	#__LOCK_ALIGNMENT


	)

48 
	#__ONCE_ALIGNMENT


	)

50 #i‚de‡
__x86_64__


52 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/struct_mutex.h

19 #i‚de‡
_THREAD_MUTEX_INTERNAL_H


20 
	#_THREAD_MUTEX_INTERNAL_H
 1

	)

22 
	s__±hªad_muãx_s


24 
	m__lock
;

25 
	m__cou¡
;

26 
	m__ow√r
;

27 #ifde‡
__x86_64__


28 
	m__nu£rs
;

32 
	m__köd
;

33 #ifde‡
__x86_64__


34 
	m__•ös
;

35 
	m__ñisi⁄
;

36 
__±hªad_li°_t
 
	m__li°
;

37 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

39 
	m__nu£rs
;

40 
__exãnsi⁄__
 union

44 
	m__e•ös
;

45 
	m__ìlisi⁄
;

46 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

47 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ìlisi⁄


	)

48 } 
	m__ñisi⁄_d©a
;

49 
__±hªad_¶i°_t
 
	m__li°
;

51 
	#__PTHREAD_MUTEX_HAVE_PREV
 0

	)

55 #ifde‡
__x86_64__


56 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

57 0, 0, 0, 0, 
__köd
, 0, 0, { 0, 0 }

	)

59 
	#__PTHREAD_MUTEX_INITIALIZER
(
__köd
) \

60 0, 0, 0, 
__köd
, 0, { { 0, 0 } }

	)

	@/usr/include/bits/struct_rwlock.h

20 #i‚de‡
_RWLOCK_INTERNAL_H


21 
	#_RWLOCK_INTERNAL_H


	)

23 
	s__±hªad_rwlock_¨ch_t


25 
	m__ªadîs
;

26 
	m__wrôîs
;

27 
	m__wΩha£_fuãx
;

28 
	m__wrôîs_fuãx
;

29 
	m__∑d3
;

30 
	m__∑d4
;

31 #ifde‡
__x86_64__


32 
	m__cur_wrôî
;

33 
	m__sh¨ed
;

34 sig√d 
	m__rwñisi⁄
;

35 #ifde‡ 
__ILP32__


36 
	m__∑d1
[3];

37 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

39 
	m__∑d1
[7];

40 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

42 
	m__∑d2
;

45 
	m__Êags
;

49 
	m__Êags
;

50 
	m__sh¨ed
;

51 sig√d 
	m__rwñisi⁄
;

52 
	m__∑d2
;

53 
	m__cur_wrôî
;

57 #ifde‡
__x86_64__


58 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

59 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 
__Êags


	)

61 
	#__PTHREAD_RWLOCK_INITIALIZER
(
__Êags
) \

62 0, 0, 0, 0, 0, 0, 
__Êags
, 0, 0, 0, 0

	)

	@/usr/include/bits/termios-baud.h

19 #i‚de‡
_TERMIOS_H


23 #ifde‡
__USE_MISC


24 
	#CBAUD
 000000010017

	)

25 
	#CBAUDEX
 000000010000

	)

27 
	#CIBAUD
 002003600000

	)

28 
	#CMSPAR
 010000000000

	)

29 
	#CRTSCTS
 020000000000

	)

33 
	#B57600
 0010001

	)

34 
	#B115200
 0010002

	)

35 
	#B230400
 0010003

	)

36 
	#B460800
 0010004

	)

37 
	#B500000
 0010005

	)

38 
	#B576000
 0010006

	)

39 
	#B921600
 0010007

	)

40 
	#B1000000
 0010010

	)

41 
	#B1152000
 0010011

	)

42 
	#B1500000
 0010012

	)

43 
	#B2000000
 0010013

	)

44 
	#B2500000
 0010014

	)

45 
	#B3000000
 0010015

	)

46 
	#B3500000
 0010016

	)

47 
	#B4000000
 0010017

	)

48 
	#__MAX_BAUD
 
B4000000


	)

	@/usr/include/bits/termios-c_cc.h

19 #i‚de‡
_TERMIOS_H


24 
	#VINTR
 0

	)

25 
	#VQUIT
 1

	)

26 
	#VERASE
 2

	)

27 
	#VKILL
 3

	)

28 
	#VEOF
 4

	)

29 
	#VTIME
 5

	)

30 
	#VMIN
 6

	)

31 
	#VSWTC
 7

	)

32 
	#VSTART
 8

	)

33 
	#VSTOP
 9

	)

34 
	#VSUSP
 10

	)

35 
	#VEOL
 11

	)

36 
	#VREPRINT
 12

	)

37 
	#VDISCARD
 13

	)

38 
	#VWERASE
 14

	)

39 
	#VLNEXT
 15

	)

40 
	#VEOL2
 16

	)

	@/usr/include/bits/termios-c_cflag.h

19 #i‚de‡
_TERMIOS_H


24 
	#CSIZE
 0000060

	)

25 
	#CS5
 0000000

	)

26 
	#CS6
 0000020

	)

27 
	#CS7
 0000040

	)

28 
	#CS8
 0000060

	)

29 
	#CSTOPB
 0000100

	)

30 
	#CREAD
 0000200

	)

31 
	#PARENB
 0000400

	)

32 
	#PARODD
 0001000

	)

33 
	#HUPCL
 0002000

	)

34 
	#CLOCAL
 0004000

	)

	@/usr/include/bits/termios-c_iflag.h

19 #i‚de‡
_TERMIOS_H


24 
	#IGNBRK
 0000001

	)

25 
	#BRKINT
 0000002

	)

26 
	#IGNPAR
 0000004

	)

27 
	#PARMRK
 0000010

	)

28 
	#INPCK
 0000020

	)

29 
	#ISTRIP
 0000040

	)

30 
	#INLCR
 0000100

	)

31 
	#IGNCR
 0000200

	)

32 
	#ICRNL
 0000400

	)

33 
	#IUCLC
 0001000

	)

35 
	#IXON
 0002000

	)

36 
	#IXANY
 0004000

	)

37 
	#IXOFF
 0010000

	)

38 
	#IMAXBEL
 0020000

	)

40 
	#IUTF8
 0040000

	)

	@/usr/include/bits/termios-c_lflag.h

19 #i‚de‡
_TERMIOS_H


24 
	#ISIG
 0000001

	)

25 
	#ICANON
 0000002

	)

26 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

27 
	#XCASE
 0000004

	)

29 
	#ECHO
 0000010

	)

30 
	#ECHOE
 0000020

	)

32 
	#ECHOK
 0000040

	)

33 
	#ECHONL
 0000100

	)

34 
	#NOFLSH
 0000200

	)

35 
	#TOSTOP
 0000400

	)

36 #ifde‡
__USE_MISC


37 
	#ECHOCTL
 0001000

	)

42 
	#ECHOPRT
 0002000

	)

45 
	#ECHOKE
 0004000

	)

48 
	#FLUSHO
 0010000

	)

50 
	#PENDIN
 0040000

	)

54 
	#IEXTEN
 0100000

	)

56 #ifde‡
__USE_MISC


57 
	#EXTPROC
 0200000

	)

	@/usr/include/bits/termios-c_oflag.h

19 #i‚de‡
_TERMIOS_H


24 
	#OPOST
 0000001

	)

25 
	#OLCUC
 0000002

	)

27 
	#ONLCR
 0000004

	)

28 
	#OCRNL
 0000010

	)

29 
	#ONOCR
 0000020

	)

30 
	#ONLRET
 0000040

	)

31 
	#OFILL
 0000100

	)

32 
	#OFDEL
 0000200

	)

33 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


34 
	#NLDLY
 0000400

	)

35 
	#NL0
 0000000

	)

36 
	#NL1
 0000400

	)

37 
	#CRDLY
 0003000

	)

38 
	#CR0
 0000000

	)

39 
	#CR1
 0001000

	)

40 
	#CR2
 0002000

	)

41 
	#CR3
 0003000

	)

42 
	#TABDLY
 0014000

	)

43 
	#TAB0
 0000000

	)

44 
	#TAB1
 0004000

	)

45 
	#TAB2
 0010000

	)

46 
	#TAB3
 0014000

	)

47 
	#BSDLY
 0020000

	)

48 
	#BS0
 0000000

	)

49 
	#BS1
 0020000

	)

50 
	#FFDLY
 0100000

	)

51 
	#FF0
 0000000

	)

52 
	#FF1
 0100000

	)

55 
	#VTDLY
 0040000

	)

56 
	#VT0
 0000000

	)

57 
	#VT1
 0040000

	)

59 #ifde‡
__USE_MISC


60 
	#XTABS
 0014000

	)

	@/usr/include/bits/termios-misc.h

19 #i‚de‡
_TERMIOS_H


	@/usr/include/bits/termios-struct.h

19 #i‚de‡
_TERMIOS_H


23 
	#NCCS
 32

	)

24 
	sãrmios


26 
tcÊag_t
 
	mc_iÊag
;

27 
tcÊag_t
 
	mc_oÊag
;

28 
tcÊag_t
 
	mc_cÊag
;

29 
tcÊag_t
 
	mc_lÊag
;

30 
cc_t
 
	mc_löe
;

31 
cc_t
 
	mc_cc
[
NCCS
];

32 
•ìd_t
 
	mc_i•ìd
;

33 
•ìd_t
 
	mc_o•ìd
;

34 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

35 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

	@/usr/include/bits/termios-tcflow.h

19 #i‚de‡
_TERMIOS_H


24 
	#TCSANOW
 0

	)

25 
	#TCSADRAIN
 1

	)

26 
	#TCSAFLUSH
 2

	)

	@/usr/include/bits/types/struct_iovec.h

19 #i‚de‡
__iovec_deföed


20 
	#__iovec_deföed
 1

	)

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 
	siovec


28 *
	miov_ba£
;

29 
size_t
 
	miov_Àn
;

	@/usr/include/bits/types/struct_statx.h

19 #i‚de‡
_SYS_STAT_H


20 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
ty≥s
/
°ru˘_°©x
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

23 #i‚de‡
__°©x_deföed


24 
	#__°©x_deföed
 1

	)

30 
	s°©x


32 
__uöt32_t
 
	m°x_mask
;

33 
__uöt32_t
 
	m°x_blksize
;

34 
__uöt64_t
 
	m°x_©åibuãs
;

35 
__uöt32_t
 
	m°x_∆ök
;

36 
__uöt32_t
 
	m°x_uid
;

37 
__uöt32_t
 
	m°x_gid
;

38 
__uöt16_t
 
	m°x_mode
;

39 
__uöt16_t
 
	m__°©x_∑d1
[1];

40 
__uöt64_t
 
	m°x_öo
;

41 
__uöt64_t
 
	m°x_size
;

42 
__uöt64_t
 
	m°x_blocks
;

43 
__uöt64_t
 
	m°x_©åibuãs_mask
;

44 
°©x_time°amp
 
	m°x_©ime
;

45 
°©x_time°amp
 
	m°x_btime
;

46 
°©x_time°amp
 
	m°x_˘ime
;

47 
°©x_time°amp
 
	m°x_mtime
;

48 
__uöt32_t
 
	m°x_rdev_maj‹
;

49 
__uöt32_t
 
	m°x_rdev_mö‹
;

50 
__uöt32_t
 
	m°x_dev_maj‹
;

51 
__uöt32_t
 
	m°x_dev_mö‹
;

52 
__uöt64_t
 
	m__°©x_∑d2
[14];

	@/usr/include/bits/types/struct_statx_timestamp.h

19 #i‚de‡
_SYS_STAT_H


20 #îr‹ 
Nevî
 
ö˛ude
 <
bôs
/
ty≥s
/
°ru˘_°©x_time°amp
.
h
> 
dúe˘ly
, in˛udê<
sys
/
°©
.h> 
ö°ód
.

23 #i‚de‡
__°©x_time°amp_deföed


24 
	#__°©x_time°amp_deföed
 1

	)

26 
	s°©x_time°amp


28 
__öt64_t
 
	mtv_£c
;

29 
__uöt32_t
 
	mtv_n£c
;

30 
__öt32_t
 
	m__°©x_time°amp_∑d1
[1];

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_fchÊags


	)

12 
	#__°ub_gây


	)

13 
	#__°ub_lchmod


	)

14 
	#__°ub_ªvoke


	)

15 
	#__°ub_£éogö


	)

16 
	#__°ub_sigªtu∫


	)

17 
	#__°ub_s°k


	)

18 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_gây


	)

14 
	#__°ub_lchmod


	)

15 
	#__°ub_ªvoke


	)

16 
	#__°ub_£éogö


	)

17 
	#__°ub_sigªtu∫


	)

18 
	#__°ub_s°k


	)

19 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_nfs£rv˘l


	)

14 
	#__°ub___com∑t_quîy_moduÀ


	)

15 
	#__°ub___com∑t_u£lib


	)

16 
	#__°ub_chÊags


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_sigªtu∫


	)

23 
	#__°ub_s°k


	)

24 
	#__°ub_°ty


	)

	@/usr/include/linux/falloc.h

2 #i‚de‡
_FALLOC_H_


3 
	#_FALLOC_H_


	)

5 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

6 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

7 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

29 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

43 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

60 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

78 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/limits.h

2 #i‚de‡
_LINUX_LIMITS_H


3 
	#_LINUX_LIMITS_H


	)

5 
	#NR_OPEN
 1024

	)

7 
	#NGROUPS_MAX
 65536

	)

8 
	#ARG_MAX
 131072

	)

9 
	#LINK_MAX
 127

	)

10 
	#MAX_CANON
 255

	)

11 
	#MAX_INPUT
 255

	)

12 
	#NAME_MAX
 255

	)

13 
	#PATH_MAX
 4096

	)

14 
	#PIPE_BUF
 4096

	)

15 
	#XATTR_NAME_MAX
 255

	)

16 
	#XATTR_SIZE_MAX
 65536

	)

17 
	#XATTR_LIST_MAX
 65536

	)

19 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/types.h

2 #i‚de‡
_LINUX_TYPES_H


3 
	#_LINUX_TYPES_H


	)

5 
	~<asm/ty≥s.h
>

7 #i‚de‡
__ASSEMBLY__


9 
	~<löux/posix_ty≥s.h
>

17 #ifde‡
__CHECKER__


18 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

20 
	#__bôwi£__


	)

22 
	#__bôwi£
 
__bôwi£__


	)

24 
__u16
 
	t__bôwi£
 
	t__À16
;

25 
__u16
 
	t__bôwi£
 
	t__be16
;

26 
__u32
 
	t__bôwi£
 
	t__À32
;

27 
__u32
 
	t__bôwi£
 
	t__be32
;

28 
__u64
 
	t__bôwi£
 
	t__À64
;

29 
__u64
 
	t__bôwi£
 
	t__be64
;

31 
__u16
 
	t__bôwi£
 
	t__sum16
;

32 
__u32
 
	t__bôwi£
 
	t__wsum
;

43 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

45 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	t__bôwi£
 
	t__pﬁl_t
;

	@/usr/include/linux/posix_types.h

2 #i‚de‡
_LINUX_POSIX_TYPES_H


3 
	#_LINUX_POSIX_TYPES_H


	)

5 
	~<löux/°ddef.h
>

22 #unde‡
__FD_SETSIZE


23 
	#__FD_SETSIZE
 1024

	)

26 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

27 } 
	t__kî√l_fd_£t
;

30 (*
	t__kî√l_sigh™dÀr_t
)();

33 
	t__kî√l_key_t
;

34 
	t__kî√l_mqd_t
;

36 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/stddef.h

4 #i‚de‡
__Æways_ölöe


5 
	#__Æways_ölöe
 
__ölöe__


	)

	@
1
.
1
/usr/include
274
7551
arm/arm_init.c
arm/filter_neon_intrinsics.c
arm/palette_neon_intrinsics.c
contrib/arm-neon/android-ndk.c
contrib/arm-neon/linux-auxv.c
contrib/arm-neon/linux.c
contrib/examples/iccfrompng.c
contrib/examples/pngpixel.c
contrib/examples/pngtopng.c
contrib/examples/simpleover.c
contrib/gregbook/readpng.c
contrib/gregbook/readpng.h
contrib/gregbook/readpng2.c
contrib/gregbook/readpng2.h
contrib/gregbook/readppm.c
contrib/gregbook/rpng-win.c
contrib/gregbook/rpng-x.c
contrib/gregbook/rpng2-win.c
contrib/gregbook/rpng2-x.c
contrib/gregbook/wpng.c
contrib/gregbook/writepng.c
contrib/gregbook/writepng.h
contrib/libtests/fakepng.c
contrib/libtests/makepng.c
contrib/libtests/pngimage.c
contrib/libtests/pngstest-errors.h
contrib/libtests/pngstest.c
contrib/libtests/pngunknown.c
contrib/libtests/pngvalid.c
contrib/libtests/readpng.c
contrib/libtests/tarith.c
contrib/libtests/timepng.c
contrib/mips-msa/linux.c
contrib/oss-fuzz/libpng_read_fuzzer.cc
contrib/pngminim/decoder/pngusr.h
contrib/pngminim/encoder/pngusr.h
contrib/pngminim/preader/pngusr.h
contrib/pngminus/png2pnm.c
contrib/pngminus/pnm2png.c
contrib/powerpc-vsx/linux.c
contrib/powerpc-vsx/linux_aux.c
contrib/tools/checksum-icc.c
contrib/tools/cvtcolor.c
contrib/tools/genpng.c
contrib/tools/makesRGB.c
contrib/tools/png-fix-itxt.c
contrib/tools/pngcp.c
contrib/tools/pngfix.c
contrib/tools/sRGB.h
contrib/visupng/PngFile.c
contrib/visupng/PngFile.h
contrib/visupng/VisualPng.c
contrib/visupng/cexcept.h
contrib/visupng/resource.h
example.c
intel/filter_sse2_intrinsics.c
intel/intel_init.c
mips/filter_msa_intrinsics.c
mips/mips_init.c
png.c
png.h
pngconf.h
pngdebug.h
pngerror.c
pngget.c
pnginfo.h
pngmem.c
pngpread.c
pngpriv.h
pngread.c
pngrio.c
pngrtran.c
pngrutil.c
pngset.c
pngstruct.h
pngtest.c
pngtrans.c
pngwio.c
pngwrite.c
pngwtran.c
pngwutil.c
powerpc/filter_vsx_intrinsics.c
powerpc/powerpc_init.c
scripts/intprefix.c
scripts/prefix.c
scripts/sym.c
scripts/symbols.c
scripts/vers.c
/usr/include/X11/Xlib.h
/usr/include/X11/Xos.h
/usr/include/X11/Xutil.h
/usr/include/X11/keysym.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/fenv.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/pnglibconf.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/auxv.h
/usr/include/sys/ioctl.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/termio.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/X11/X.h
/usr/include/X11/Xarch.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/Xw32defs.h
/usr/include/X11/keysymdef.h
/usr/include/alloca.h
/usr/include/bits/auxv.h
/usr/include/bits/confname.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/fenv.h
/usr/include/bits/fenvinline.h
/usr/include/bits/floatn.h
/usr/include/bits/flt-eval-method.h
/usr/include/bits/fp-fast.h
/usr/include/bits/fp-logb.h
/usr/include/bits/getopt_posix.h
/usr/include/bits/hwcap.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/iscanonical.h
/usr/include/bits/libc-header-start.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls-helper-functions.h
/usr/include/bits/mathcalls-narrow.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathinline.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/sigevent-consts.h
/usr/include/bits/siginfo-consts.h
/usr/include/bits/signal_ext.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/ss_flags.h
/usr/include/bits/stat.h
/usr/include/bits/statx.h
/usr/include/bits/stdint-intn.h
/usr/include/bits/stdint-uintn.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string_fortified.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/types/FILE.h
/usr/include/bits/types/__FILE.h
/usr/include/bits/types/__fpos64_t.h
/usr/include/bits/types/__fpos_t.h
/usr/include/bits/types/__sigset_t.h
/usr/include/bits/types/clock_t.h
/usr/include/bits/types/clockid_t.h
/usr/include/bits/types/cookie_io_functions_t.h
/usr/include/bits/types/error_t.h
/usr/include/bits/types/locale_t.h
/usr/include/bits/types/sig_atomic_t.h
/usr/include/bits/types/sigevent_t.h
/usr/include/bits/types/siginfo_t.h
/usr/include/bits/types/sigset_t.h
/usr/include/bits/types/sigval_t.h
/usr/include/bits/types/stack_t.h
/usr/include/bits/types/struct_FILE.h
/usr/include/bits/types/struct_itimerspec.h
/usr/include/bits/types/struct_sigstack.h
/usr/include/bits/types/struct_timespec.h
/usr/include/bits/types/struct_tm.h
/usr/include/bits/types/time_t.h
/usr/include/bits/types/timer_t.h
/usr/include/bits/unistd.h
/usr/include/bits/unistd_ext.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/strings.h
/usr/include/sys/cdefs.h
/usr/include/sys/file.h
/usr/include/sys/select.h
/usr/include/sys/time.h
/usr/include/sys/timeb.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/termios.h
/usr/include/zconf.h
/usr/include/X11/Xmd.h
/usr/include/bits/byteswap.h
/usr/include/bits/endianness.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/floatn-common.h
/usr/include/bits/getopt_core.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/long-double.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/siginfo-arch.h
/usr/include/bits/siginfo-consts-arch.h
/usr/include/bits/signum-generic.h
/usr/include/bits/statx-generic.h
/usr/include/bits/strings_fortified.h
/usr/include/bits/termios.h
/usr/include/bits/thread-shared-types.h
/usr/include/bits/time64.h
/usr/include/bits/timesize.h
/usr/include/bits/timex.h
/usr/include/bits/types/__locale_t.h
/usr/include/bits/types/__mbstate_t.h
/usr/include/bits/types/__sigval_t.h
/usr/include/bits/types/struct_timeval.h
/usr/include/bits/typesizes.h
/usr/include/bits/uintn-identity.h
/usr/include/bits/uio_lim.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/stat.h
/usr/include/stdc-predef.h
/usr/include/bits/pthreadtypes-arch.h
/usr/include/bits/struct_mutex.h
/usr/include/bits/struct_rwlock.h
/usr/include/bits/termios-baud.h
/usr/include/bits/termios-c_cc.h
/usr/include/bits/termios-c_cflag.h
/usr/include/bits/termios-c_iflag.h
/usr/include/bits/termios-c_lflag.h
/usr/include/bits/termios-c_oflag.h
/usr/include/bits/termios-misc.h
/usr/include/bits/termios-struct.h
/usr/include/bits/termios-tcflow.h
/usr/include/bits/types/struct_iovec.h
/usr/include/bits/types/struct_statx.h
/usr/include/bits/types/struct_statx_timestamp.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/linux/falloc.h
/usr/include/linux/limits.h
/usr/include/linux/types.h
/usr/include/linux/posix_types.h
/usr/include/linux/stddef.h
